
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a2 fb 00 00       	call   c000fbc2 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 93 02 00       	call   c00293a8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 3e a0 02 c0       	mov    ebx,0xc002a03e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 4c a0 02 c0    	cmp    ebx,0xc002a04c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 e9 02 c0       	mov    eax,0xc002e978
c0000049:	3d 78 e9 02 c0       	cmp    eax,0xc002e978
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 e9 02 c0       	push   0xc002e978
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 e9 02 c0       	mov    eax,0xc002e978
c0000075:	2d 78 e9 02 c0       	sub    eax,0xc002e978
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 e9 02 c0       	push   0xc002e978
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efa8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 54 a0 02 c0       	mov    ebx,0xc002a054
c00000bb:	81 eb 50 a0 02 c0    	sub    ebx,0xc002a050
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 50 a0 02 c0       	mov    esi,0xc002a050
c00000ca:	a1 ac ef 02 c0       	mov    eax,ds:0xc002efac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac ef 02 c0       	mov    ds:0xc002efac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac ef 02 c0       	mov    eax,ds:0xc002efac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 e9 02 c0       	push   0xc002e978
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 ef 02 c0 01 	mov    BYTE PTR ds:0xc002efa8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 ef 02 c0       	push   0xc002efb0
c000012c:	68 78 e9 02 c0       	push   0xc002e978
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 eb db 01 00       	call   c001df8e <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 0a 28 01 00       	call   c0012bc5 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 c9 db 01 00       	call   c001df8e <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 71 e0 01 00       	call   c001e455 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 cf e6 01 00       	call   c001eabc <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 f0 f3 02 c0 	lgdtd  ds:0xc002f3f0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 1b 45 01 00       	call   c0014afd <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 c8 ef 02 c0       	mov    ds:0xc002efc8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 c8 ef 02 c0    	mov    DWORD PTR ds:0xc002efc8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d c8 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efc8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 a0 02 c0 02 	test   BYTE PTR [edx-0x3ffd5fa0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 a0 02 c0 01 	test   BYTE PTR [edx-0x3ffd5fa0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 a0 02 c0 08 	test   BYTE PTR [edx-0x3ffd5fa0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 a0 02 c0 04 	test   BYTE PTR [ebx-0x3ffd5fa0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 a0 02 c0 01 	test   BYTE PTR [edx-0x3ffd5fa0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d e0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efe0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d e0 ef 02 c0    	mov    DWORD PTR ds:0xc002efe0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 e4 ef 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd101c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 e4 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd101c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d e0 ef 02 c0    	mov    DWORD PTR ds:0xc002efe0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 0c f0 02 c0    	cmp    DWORD PTR ds:0xc002f00c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 1c f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f01c
c0000e38:	c7 42 0c 14 f0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002f014
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 1c f0 02 c0    	mov    DWORD PTR ds:0xc002f01c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 0c f0 02 c0    	mov    DWORD PTR ds:0xc002f00c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 e0 ef 02 c0 02 	test   BYTE PTR ds:0xc002efe0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 e0 ef 02 c0       	mov    eax,0xc002efe0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d e0 ef 02 c0    	mov    edi,DWORD PTR ds:0xc002efe0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 e0 ef 02 c0       	mov    eax,0xc002efe0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 e4 ef 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd101c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 e4 ef 02 c0 	mov    DWORD PTR [edx*4-0x3ffd101c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 14 f0 02 c0 	lea    edx,[eax*8-0x3ffd0fec]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 e0 ef 02 c0       	mov    eax,0xc002efe0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 20 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f020
c00011ba:	81 fb 14 f0 02 c0    	cmp    ebx,0xc002f014
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 14 f0 02 c0       	cmp    eax,0xc002f014
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 10 f0 02 c0    	cmp    DWORD PTR ds:0xc002f010,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 1c f0 02 c0       	mov    ds:0xc002f01c,eax
c00011f6:	a3 20 f0 02 c0       	mov    ds:0xc002f020,eax
c00011fb:	a3 10 f0 02 c0       	mov    ds:0xc002f010,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 14 f0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f014
c0001209:	c7 40 0c 14 f0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002f014
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 20 f0 02 c0       	mov    ds:0xc002f020,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 14 f0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f014
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 d8 ef 02 c0 	lea    ebp,[edx*4-0x3ffd1028]
c000125a:	8b 14 95 e0 ef 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1020]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 e0 ef 02 c0 	lea    ecx,[edx*4-0x3ffd1020]
c0001275:	8b 14 95 e0 ef 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1020]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 14 f3 02 c0 	or     DWORD PTR [edi*4-0x3ffd0cec],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 14 f0 02 c0 	lea    eax,[eax*8-0x3ffd0fec]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 1c f0 02 c0    	mov    DWORD PTR ds:0xc002f01c,ecx
c000132f:	89 0d 20 f0 02 c0    	mov    DWORD PTR ds:0xc002f020,ecx
c0001335:	c7 41 08 14 f0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002f014
c000133c:	c7 41 0c 14 f0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002f014
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 0c f0 02 c0 	lea    edx,[ecx*8-0x3ffd0ff4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 14 f3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0cec]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 14 f3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0cec]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 0c f0 02 c0 	lea    edx,[eax*4-0x3ffd0ff4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 14 f3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0cec],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 1c f0 02 c0    	mov    DWORD PTR ds:0xc002f01c,edi
c0001402:	89 3d 20 f0 02 c0    	mov    DWORD PTR ds:0xc002f020,edi
c0001408:	c7 47 08 14 f0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002f014
c000140f:	c7 47 0c 14 f0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002f014
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 10 f0 02 c0    	mov    DWORD PTR ds:0xc002f010,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 0c f0 02 c0       	mov    eax,ds:0xc002f00c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 0c f0 02 c0    	mov    DWORD PTR ds:0xc002f00c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba e0 ef 02 c0       	mov    edx,0xc002efe0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d e0 ef 02 c0 00 	cmp    DWORD PTR ds:0xc002efe0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 e0 ef 02 c0       	mov    eax,0xc002efe0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 34 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f334
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 34 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f334,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 34 f3 02 c0    	mov    DWORD PTR ds:0xc002f334,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 0c f0 02 c0    	cmp    DWORD PTR ds:0xc002f00c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 0c f0 02 c0    	mov    DWORD PTR ds:0xc002f00c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d e0 ef 02 c0 00 	cmp    DWORD PTR ds:0xc002efe0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 e0 ef 02 c0       	mov    eax,0xc002efe0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 3c f3 02 c0    	push   DWORD PTR ds:0xc002f33c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d e0 ef 02 c0 00 	cmp    DWORD PTR ds:0xc002efe0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 e0 ef 02 c0       	mov    eax,0xc002efe0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 3c f3 02 c0       	mov    eax,ds:0xc002f33c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 e0 ef 02 c0       	mov    eax,0xc002efe0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 0c f0 02 c0 00 	cmp    DWORD PTR ds:0xc002f00c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 e0 ef 02 c0       	mov    eax,0xc002efe0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 0c f0 02 c0       	mov    eax,ds:0xc002f00c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 e4 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd101c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 14 f0 02 c0       	mov    eax,0xc002f014
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 0c f3 02 c0       	cmp    eax,0xc002f30c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 48 f3 02 c0       	mov    eax,ds:0xc002f348
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 30 f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f330
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 44 f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f344
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 54 f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f354
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 e0 ef 02 c0       	mov    eax,0xc002efe0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 a1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5e9c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 e0 ef 02 c0       	mov    eax,ds:0xc002efe0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 e0 ef 02 c0       	mov    ds:0xc002efe0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 24 f3 02 c0    	mov    DWORD PTR ds:0xc002f324,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 28 f3 02 c0    	mov    DWORD PTR ds:0xc002f328,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 2c f3 02 c0    	mov    DWORD PTR ds:0xc002f32c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 34 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f334,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 2a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd540]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 1a fa 01 00       	jmp    c002160c <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 2a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd540]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 4b fa 01 00       	jmp    c0021653 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 2a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd540]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 73 fa 01 00       	jmp    c002169a <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 fa 57 02 00       	call   c0027704 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 a2 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd5d80]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 a2 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd5d80]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 a1 02 c0       	mov    edx,0xc002a180
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 a2 02 c0       	mov    edx,0xc002a2a0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba a8 d6 02 c0       	mov    edx,0xc002d6a8
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac a2 02 c0       	mov    edx,0xc002a2ac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 a2 02 c0       	mov    edx,0xc002a290
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 80 f3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0c80]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 60 f3 02 c0    	mov    ax,ds:0xc002f360
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 60 f3 02 c0    	mov    ds:0xc002f360,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 f7 45 02 00       	call   c0027704 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 a2 02 c0       	mov    eax,0xc002a2b2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 a2 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd5e00]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb a2 02 c0       	mov    eax,0xc002a2bb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 a2 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd5d80]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 c2 2f 02 00       	call   c0027704 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 a2 02 c0       	mov    edx,0xc002a290
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 a1 02 c0       	mov    edx,0xc002a180
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 a1 02 c0       	mov    edx,0xc002a190
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 80 f3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0c80]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 80 f3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0c80],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 89 19 02 00       	call   c0027704 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 6f 19 02 00       	call   c0027704 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 a1 02 c0       	mov    eax,0xc002a1d7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 a1 02 c0       	mov    eax,0xc002a1d0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 80 f3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0c80]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 a1 02 c0       	mov    esi,0xc002a1c0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 b2 00 02 00       	call   c0027704 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 a2 02 c0       	mov    edx,0xc002a2a0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 a1 02 c0       	mov    edx,0xc002a1a0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 a1 02 c0       	mov    edx,0xc002a1b0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 a2 02 c0       	mov    edx,0xc002a2c2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce a2 02 c0       	mov    edx,0xc002a2ce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 a2 02 c0       	mov    edx,0xc002a2e2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 a6 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a600
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 a6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a600
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 a4 02 c0       	mov    eax,0xc002a400
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 a3 02 c0       	mov    eax,0xc002a340
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 a3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d00]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 06 0a 02 00       	call   c00291d7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 c9 09 02 00       	call   c00291b9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 9d 09 02 00       	call   c00291d7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 50 00 02 00       	call   c00288dc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 d2 0a 02 00       	call   c0029370 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 17 09 02 00       	call   c00291d7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 59 08 02 00       	call   c00291d7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 26 08 02 00       	call   c00291b9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 13 07 02 00       	call   c00291d7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 db 06 02 00       	call   c00291b9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 a7 02 c0       	mov    eax,0xc002a700
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 e7 04 02 00       	call   c00291d7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 ac 04 02 00       	call   c00291b9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 ab 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd54a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 bc 01 02 00       	call   c0028f6b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 3a fb 01 00       	call   c0028908 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 f6 03 02 00       	call   c00291db <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 e4 04 02 00       	call   c00292ff <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 ce fa 01 00       	call   c0028908 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 79 03 02 00       	call   c00291d5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 5a 03 02 00       	call   c00291d9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 f0 04 02 00       	call   c0029390 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 9a 00 02 00       	call   c0028f6b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 18 fa 01 00       	call   c0028908 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 d4 02 02 00       	call   c00291db <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 c2 03 02 00       	call   c00292ff <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 ac f9 01 00       	call   c0028908 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 57 02 02 00       	call   c00291d5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 37 02 02 00       	call   c00291d9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 cc 03 02 00       	call   c0029390 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 72 01 02 00       	call   c00291d7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 30 01 02 00       	call   c00291b9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 18 01 02 00       	call   c00291d7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 8a fe 01 00       	call   c0028f6b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 8c f1 01 00       	call   c002828b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ef f7 01 00       	call   c0028908 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 41 fe 01 00       	call   c0028f6b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 47 f1 01 00       	call   c002828b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 16 fe 01 00       	call   c0028f6b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 66 00 02 00       	call   c00291d5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 43 f7 01 00       	call   c00288dc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 c5 01 02 00       	call   c0029370 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 ec ff 01 00       	call   c00291b9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 e7 f6 01 00       	call   c00288dc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 65 fd 01 00       	call   c0028f6b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 e8 f6 01 00       	call   c0028908 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 3a fd 01 00       	call   c0028f6b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 a1 f9 01 00       	call   c0028bec <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 20 f0 01 00       	call   c002828b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 80 e9 01 00       	call   c0027c20 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 57 00 02 00       	call   c00292ff <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 40 f6 01 00       	call   c0028908 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 27 00 02 00       	call   c00292ff <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 99 ef 01 00       	call   c002828b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 d2 fe 01 00       	call   c00291db <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ba f8 01 00       	call   c0028bec <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 40 ef 01 00       	call   c002828b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 2e 00 02 00       	call   c0029390 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 00 fc 01 00       	call   c0028f6b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 57 f5 01 00       	call   c00288dc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 36 fe 01 00       	call   c00291d7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 cf ee 01 00       	call   c002828b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 fb f4 01 00       	call   c00288dc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 9d ff 01 00       	call   c0029390 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 4e fb 01 00       	call   c0028f6b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 cb f4 01 00       	call   c0028908 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 1e fb 01 00       	call   c0028f6b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 24 ee 01 00       	call   c002828b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 f4 fa 01 00       	call   c0028f6b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 46 fd 01 00       	call   c00291d7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 1d f4 01 00       	call   c00288dc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 9f fe 01 00       	call   c0029370 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 c6 fc 01 00       	call   c00291b9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 c0 f3 01 00       	call   c00288dc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 3e fa 01 00       	call   c0028f6b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 c1 f3 01 00       	call   c0028908 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 13 fa 01 00       	call   c0028f6b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 7a f6 01 00       	call   c0028bec <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 f9 ec 01 00       	call   c002828b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 49 e6 01 00       	call   c0027c20 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 20 fd 01 00       	call   c00292ff <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 09 f3 01 00       	call   c0028908 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 f0 fc 01 00       	call   c00292ff <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 62 ec 01 00       	call   c002828b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 9b fb 01 00       	call   c00291db <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 82 f5 01 00       	call   c0028bec <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 01 ec 01 00       	call   c002828b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ef fc 01 00       	call   c0029390 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 c1 f8 01 00       	call   c0028f6b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 18 f2 01 00       	call   c00288dc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 f7 fa 01 00       	call   c00291d7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 90 eb 01 00       	call   c002828b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 bc f1 01 00       	call   c00288dc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 31 f8 01 00       	call   c0028f6b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 37 eb 01 00       	call   c002828b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 ab 02 c0       	mov    eax,0xc002abc0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 ab 02 c0       	mov    eax,0xc002abd4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 ac f6 01 00       	call   c0028f6b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 2a f0 01 00       	call   c0028908 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 bc e2 01 00       	call   c0027c20 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 93 f9 01 00       	call   c00292ff <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 7c ef 01 00       	call   c0028908 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 5f f9 01 00       	call   c00292ff <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 d1 e8 01 00       	call   c002828b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 31 f9 01 00       	call   c00292ff <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 20 ef 01 00       	call   c0028908 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 89 e8 01 00       	call   c002828b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 aa e1 01 00       	call   c0027c20 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 81 f8 01 00       	call   c00292ff <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 6a ee 01 00       	call   c0028908 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 4d f8 01 00       	call   c00292ff <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 bf e7 01 00       	call   c002828b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 1f f8 01 00       	call   c00292ff <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 0e ee 01 00       	call   c0028908 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 77 e7 01 00       	call   c002828b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 55 e7 01 00       	call   c002828b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 31 e0 01 00       	call   c0027c20 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 08 f7 01 00       	call   c00292ff <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 f1 ec 01 00       	call   c0028908 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 d4 f6 01 00       	call   c00292ff <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 46 e6 01 00       	call   c002828b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 a6 f6 01 00       	call   c00292ff <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 8f ec 01 00       	call   c0028908 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 f8 e5 01 00       	call   c002828b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 58 f6 01 00       	call   c00292ff <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 41 ec 01 00       	call   c0028908 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 aa e5 01 00       	call   c002828b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 bf de 01 00       	call   c0027c20 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 96 f5 01 00       	call   c00292ff <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 7f eb 01 00       	call   c0028908 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 66 f5 01 00       	call   c00292ff <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 d8 e4 01 00       	call   c002828b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 38 f5 01 00       	call   c00292ff <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 21 eb 01 00       	call   c0028908 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 8a e4 01 00       	call   c002828b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ea f4 01 00       	call   c00292ff <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 d3 ea 01 00       	call   c0028908 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 3c e4 01 00       	call   c002828b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 10 e4 01 00       	call   c002828b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 6d ea 01 00       	call   c0028908 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 29 f3 01 00       	call   c00291db <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 b8 e3 01 00       	call   c002828b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 15 ea 01 00       	call   c0028908 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 d1 f2 01 00       	call   c00291db <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 4b dc 01 00       	call   c0027c20 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 22 f3 01 00       	call   c00292ff <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 0b e9 01 00       	call   c0028908 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 ee f2 01 00       	call   c00292ff <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 60 e2 01 00       	call   c002828b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 c0 f2 01 00       	call   c00292ff <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 a9 e8 01 00       	call   c0028908 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 12 e2 01 00       	call   c002828b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 72 f2 01 00       	call   c00292ff <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 5b e8 01 00       	call   c0028908 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 c4 e1 01 00       	call   c002828b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 24 f2 01 00       	call   c00292ff <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 0d e8 01 00       	call   c0028908 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 76 e1 01 00       	call   c002828b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 d6 f1 01 00       	call   c00292ff <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 bf e7 01 00       	call   c0028908 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 28 e1 01 00       	call   c002828b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 2a da 01 00       	call   c0027c20 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 01 f1 01 00       	call   c00292ff <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ea e6 01 00       	call   c0028908 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 d1 f0 01 00       	call   c00292ff <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 43 e0 01 00       	call   c002828b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 a3 f0 01 00       	call   c00292ff <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 8c e6 01 00       	call   c0028908 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 f5 df 01 00       	call   c002828b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 55 f0 01 00       	call   c00292ff <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 3e e6 01 00       	call   c0028908 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 a7 df 01 00       	call   c002828b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 07 f0 01 00       	call   c00292ff <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 f0 e5 01 00       	call   c0028908 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 59 df 01 00       	call   c002828b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 b9 ef 01 00       	call   c00292ff <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 a2 e5 01 00       	call   c0028908 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 0b df 01 00       	call   c002828b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 df de 01 00       	call   c002828b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 3c e5 01 00       	call   c0028908 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 f8 ed 01 00       	call   c00291db <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 87 de 01 00       	call   c002828b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 e4 e4 01 00       	call   c0028908 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 a0 ed 01 00       	call   c00291db <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 2e de 01 00       	call   c002828b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 8b e4 01 00       	call   c0028908 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 47 ed 01 00       	call   c00291db <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 d5 dd 01 00       	call   c002828b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 32 e4 01 00       	call   c0028908 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 ee ec 01 00       	call   c00291db <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 4c d6 01 00       	call   c0027c20 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 23 ed 01 00       	call   c00292ff <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 0c e3 01 00       	call   c0028908 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ef ec 01 00       	call   c00292ff <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 61 dc 01 00       	call   c002828b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 c1 ec 01 00       	call   c00292ff <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 aa e2 01 00       	call   c0028908 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 13 dc 01 00       	call   c002828b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 73 ec 01 00       	call   c00292ff <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 5c e2 01 00       	call   c0028908 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 c5 db 01 00       	call   c002828b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 25 ec 01 00       	call   c00292ff <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 0e e2 01 00       	call   c0028908 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 77 db 01 00       	call   c002828b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 d7 eb 01 00       	call   c00292ff <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 c0 e1 01 00       	call   c0028908 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 29 db 01 00       	call   c002828b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 89 eb 01 00       	call   c00292ff <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 72 e1 01 00       	call   c0028908 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 d8 da 01 00       	call   c002828b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 38 eb 01 00       	call   c00292ff <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 21 e1 01 00       	call   c0028908 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 8a da 01 00       	call   c002828b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 84 d3 01 00       	call   c0027c20 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 5b ea 01 00       	call   c00292ff <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 44 e0 01 00       	call   c0028908 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 24 ea 01 00       	call   c00292ff <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 96 d9 01 00       	call   c002828b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 f6 e9 01 00       	call   c00292ff <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 df df 01 00       	call   c0028908 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 48 d9 01 00       	call   c002828b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 a8 e9 01 00       	call   c00292ff <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 91 df 01 00       	call   c0028908 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 fa d8 01 00       	call   c002828b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 5a e9 01 00       	call   c00292ff <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 43 df 01 00       	call   c0028908 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 ac d8 01 00       	call   c002828b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 0c e9 01 00       	call   c00292ff <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 f5 de 01 00       	call   c0028908 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 5e d8 01 00       	call   c002828b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 be e8 01 00       	call   c00292ff <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 a7 de 01 00       	call   c0028908 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 0d d8 01 00       	call   c002828b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 6d e8 01 00       	call   c00292ff <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 56 de 01 00       	call   c0028908 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 c5 d7 01 00       	call   c002828b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 9e d7 01 00       	call   c002828b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 fc dd 01 00       	call   c0028908 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 b8 e6 01 00       	call   c00291db <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 47 d7 01 00       	call   c002828b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 a5 dd 01 00       	call   c0028908 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 61 e6 01 00       	call   c00291db <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ef d6 01 00       	call   c002828b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 4d dd 01 00       	call   c0028908 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 09 e6 01 00       	call   c00291db <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 97 d6 01 00       	call   c002828b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 f5 dc 01 00       	call   c0028908 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 b1 e5 01 00       	call   c00291db <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 3f d6 01 00       	call   c002828b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 9d dc 01 00       	call   c0028908 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 59 e5 01 00       	call   c00291db <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 ed d5 01 00       	call   c002828b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 4b dc 01 00       	call   c0028908 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 07 e5 01 00       	call   c00291db <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 1b ce 01 00       	call   c0027c20 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 f2 e4 01 00       	call   c00292ff <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 db da 01 00       	call   c0028908 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 c2 e4 01 00       	call   c00292ff <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 34 d4 01 00       	call   c002828b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 ac 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd53fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 68 e4 01 00       	call   c00292ff <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 51 da 01 00       	call   c0028908 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 bc d3 01 00       	call   c002828b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 09 e4 01 00       	call   c00292ff <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 f2 d9 01 00       	call   c0028908 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 5d d3 01 00       	call   c002828b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 aa e3 01 00       	call   c00292ff <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 93 d9 01 00       	call   c0028908 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 fe d2 01 00       	call   c002828b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 4b e3 01 00       	call   c00292ff <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 34 d9 01 00       	call   c0028908 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 9f d2 01 00       	call   c002828b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 ec e2 01 00       	call   c00292ff <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 d5 d8 01 00       	call   c0028908 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 40 d2 01 00       	call   c002828b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 8d e2 01 00       	call   c00292ff <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 76 d8 01 00       	call   c0028908 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 e1 d1 01 00       	call   c002828b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 2e e2 01 00       	call   c00292ff <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 17 d8 01 00       	call   c0028908 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 82 d1 01 00       	call   c002828b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 cf e1 01 00       	call   c00292ff <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 b8 d7 01 00       	call   c0028908 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 23 d1 01 00       	call   c002828b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 2d ca 01 00       	call   c0027c20 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 04 e1 01 00       	call   c00292ff <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 ed d6 01 00       	call   c0028908 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 d4 e0 01 00       	call   c00292ff <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 46 d0 01 00       	call   c002828b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 ac 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd53e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 79 e0 01 00       	call   c00292ff <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 62 d6 01 00       	call   c0028908 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 cd cf 01 00       	call   c002828b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 19 e0 01 00       	call   c00292ff <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 02 d6 01 00       	call   c0028908 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 6d cf 01 00       	call   c002828b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 b9 df 01 00       	call   c00292ff <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 a2 d5 01 00       	call   c0028908 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 0d cf 01 00       	call   c002828b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 59 df 01 00       	call   c00292ff <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 42 d5 01 00       	call   c0028908 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 ad ce 01 00       	call   c002828b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 f9 de 01 00       	call   c00292ff <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 e2 d4 01 00       	call   c0028908 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 4d ce 01 00       	call   c002828b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 99 de 01 00       	call   c00292ff <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 82 d4 01 00       	call   c0028908 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 ed cd 01 00       	call   c002828b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 39 de 01 00       	call   c00292ff <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 22 d4 01 00       	call   c0028908 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 8d cd 01 00       	call   c002828b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 d9 dd 01 00       	call   c00292ff <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 c2 d3 01 00       	call   c0028908 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 2d cd 01 00       	call   c002828b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c ac 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd53c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 d2 cc 01 00       	call   c002828b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 2f d3 01 00       	call   c0028908 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 eb db 01 00       	call   c00291db <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 75 cc 01 00       	call   c002828b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 d2 d2 01 00       	call   c0028908 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 8e db 01 00       	call   c00291db <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 18 cc 01 00       	call   c002828b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 75 d2 01 00       	call   c0028908 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 31 db 01 00       	call   c00291db <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 bb cb 01 00       	call   c002828b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 18 d2 01 00       	call   c0028908 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 d4 da 01 00       	call   c00291db <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 5e cb 01 00       	call   c002828b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 bb d1 01 00       	call   c0028908 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 77 da 01 00       	call   c00291db <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 01 cb 01 00       	call   c002828b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 5e d1 01 00       	call   c0028908 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 1a da 01 00       	call   c00291db <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 a4 ca 01 00       	call   c002828b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 01 d1 01 00       	call   c0028908 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 bd d9 01 00       	call   c00291db <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 47 ca 01 00       	call   c002828b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 a4 d0 01 00       	call   c0028908 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 60 d9 01 00       	call   c00291db <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 5c d0 01 00       	call   c0028908 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 d4 da 01 00       	jmp    c0029390 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 3e d7 01 00       	call   c00291d7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 fc d6 01 00       	call   c00291b9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 93 d4 01 00       	call   c0028f6b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 94 c7 01 00       	call   c002828b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 63 d4 01 00       	call   c0028f6b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ca d0 01 00       	call   c0028bec <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 69 d6 01 00       	call   c00291b9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 6c d6 01 00       	call   c00291d7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 3f d6 01 00       	call   c00291d7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 38 d0 01 00       	call   c0028bec <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 c2 d7 01 00       	call   c0029390 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 9d d7 01 00       	call   c0029390 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 6f d3 01 00       	call   c0028f6b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 c6 cc 01 00       	call   c00288dc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 a5 d5 01 00       	call   c00291d7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 3e c6 01 00       	call   c002828b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 62 cc 01 00       	call   c00288dc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 04 d7 01 00       	call   c0029390 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 3c cf 01 00       	call   c0028bec <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 b9 c5 01 00       	call   c002828b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 e5 d1 01 00       	call   c0028f6b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 e5 c4 01 00       	call   c002828b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 c5 c4 01 00       	call   c002828b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 95 d1 01 00       	call   c0028f6b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 e5 d3 01 00       	call   c00291d5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 c4 ca 01 00       	call   c00288dc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 46 d5 01 00       	call   c0029370 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 6d d3 01 00       	call   c00291b9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 6b ca 01 00       	call   c00288dc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 e9 d0 01 00       	call   c0028f6b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 6c ca 01 00       	call   c0028908 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 be d0 01 00       	call   c0028f6b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 25 cd 01 00       	call   c0028bec <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 a4 c3 01 00       	call   c002828b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 6e d0 01 00       	call   c0028f6b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ba d2 01 00       	call   c00291d7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 af c9 01 00       	call   c0028908 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 81 c9 01 00       	call   c0028908 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ba cf 01 00       	call   c0028f6b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 1e cc 01 00       	call   c0028bec <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 e6 cb 01 00       	call   c0028bec <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 65 c2 01 00       	call   c002828b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 52 d3 01 00       	call   c0029390 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 24 cf 01 00       	call   c0028f6b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 7b c8 01 00       	call   c00288dc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 5a d1 01 00       	call   c00291d7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 f2 c1 01 00       	call   c002828b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 16 c8 01 00       	call   c00288dc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 b8 d2 01 00       	call   c0029390 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 79 d0 01 00       	call   c00291d7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 37 d0 01 00       	call   c00291b9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 ce cd 01 00       	call   c0028f6b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 cf c0 01 00       	call   c002828b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 9e cd 01 00       	call   c0028f6b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 05 ca 01 00       	call   c0028bec <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 a4 cf 01 00       	call   c00291b9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 a7 cf 01 00       	call   c00291d7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 7a cf 01 00       	call   c00291d7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 73 c9 01 00       	call   c0028bec <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 fd d0 01 00       	call   c0029390 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 d8 d0 01 00       	call   c0029390 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 aa cc 01 00       	call   c0028f6b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 01 c6 01 00       	call   c00288dc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 e0 ce 01 00       	call   c00291d7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 79 bf 01 00       	call   c002828b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 9d c5 01 00       	call   c00288dc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 3f d0 01 00       	call   c0029390 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 77 c8 01 00       	call   c0028bec <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 f4 be 01 00       	call   c002828b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 1f cb 01 00       	call   c0028f6b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 1f be 01 00       	call   c002828b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ff bd 01 00       	call   c002828b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 cf ca 01 00       	call   c0028f6b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 1f cd 01 00       	call   c00291d5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 fd c3 01 00       	call   c00288dc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 7f ce 01 00       	call   c0029370 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 a6 cc 01 00       	call   c00291b9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 a3 c3 01 00       	call   c00288dc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 21 ca 01 00       	call   c0028f6b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 a4 c3 01 00       	call   c0028908 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 f6 c9 01 00       	call   c0028f6b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 5d c6 01 00       	call   c0028bec <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 dc bc 01 00       	call   c002828b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 a6 c9 01 00       	call   c0028f6b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 f2 cb 01 00       	call   c00291d7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 e7 c2 01 00       	call   c0028908 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 b9 c2 01 00       	call   c0028908 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 f0 c8 01 00       	call   c0028f6b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 54 c5 01 00       	call   c0028bec <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 21 c5 01 00       	call   c0028bec <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 a0 bb 01 00       	call   c002828b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 8d cc 01 00       	call   c0029390 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 5f c8 01 00       	call   c0028f6b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 b6 c1 01 00       	call   c00288dc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 95 ca 01 00       	call   c00291d7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 2d bb 01 00       	call   c002828b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 51 c1 01 00       	call   c00288dc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 f3 cb 01 00       	call   c0029390 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 b4 c9 01 00       	call   c00291d7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 72 c9 01 00       	call   c00291b9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 09 c7 01 00       	call   c0028f6b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 0a ba 01 00       	call   c002828b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 d9 c6 01 00       	call   c0028f6b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 40 c3 01 00       	call   c0028bec <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 df c8 01 00       	call   c00291b9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 e2 c8 01 00       	call   c00291d7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 b5 c8 01 00       	call   c00291d7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ae c2 01 00       	call   c0028bec <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 38 ca 01 00       	call   c0029390 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 13 ca 01 00       	call   c0029390 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 e5 c5 01 00       	call   c0028f6b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 3c bf 01 00       	call   c00288dc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 1b c8 01 00       	call   c00291d7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 b4 b8 01 00       	call   c002828b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 d8 be 01 00       	call   c00288dc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 7a c9 01 00       	call   c0029390 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 b2 c1 01 00       	call   c0028bec <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 2f b8 01 00       	call   c002828b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 5a c4 01 00       	call   c0028f6b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 5a b7 01 00       	call   c002828b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 3a b7 01 00       	call   c002828b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 0a c4 01 00       	call   c0028f6b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 5a c6 01 00       	call   c00291d5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 38 bd 01 00       	call   c00288dc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ba c7 01 00       	call   c0029370 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 e1 c5 01 00       	call   c00291b9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 de bc 01 00       	call   c00288dc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 5c c3 01 00       	call   c0028f6b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 df bc 01 00       	call   c0028908 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 31 c3 01 00       	call   c0028f6b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 98 bf 01 00       	call   c0028bec <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 17 b6 01 00       	call   c002828b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 e1 c2 01 00       	call   c0028f6b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 2d c5 01 00       	call   c00291d7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 22 bc 01 00       	call   c0028908 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 f4 bb 01 00       	call   c0028908 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 2b c2 01 00       	call   c0028f6b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 8f be 01 00       	call   c0028bec <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 5c be 01 00       	call   c0028bec <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 db b4 01 00       	call   c002828b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 c8 c5 01 00       	call   c0029390 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 9a c1 01 00       	call   c0028f6b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 f1 ba 01 00       	call   c00288dc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 d0 c3 01 00       	call   c00291d7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 68 b4 01 00       	call   c002828b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 8c ba 01 00       	call   c00288dc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 2e c5 01 00       	call   c0029390 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ef c2 01 00       	call   c00291d7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 ad c2 01 00       	call   c00291b9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 44 c0 01 00       	call   c0028f6b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 45 b3 01 00       	call   c002828b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 14 c0 01 00       	call   c0028f6b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 7b bc 01 00       	call   c0028bec <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 1a c2 01 00       	call   c00291b9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 1d c2 01 00       	call   c00291d7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 f0 c1 01 00       	call   c00291d7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 e9 bb 01 00       	call   c0028bec <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 73 c3 01 00       	call   c0029390 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 4e c3 01 00       	call   c0029390 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 20 bf 01 00       	call   c0028f6b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 77 b8 01 00       	call   c00288dc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 56 c1 01 00       	call   c00291d7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ef b1 01 00       	call   c002828b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 13 b8 01 00       	call   c00288dc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 b5 c2 01 00       	call   c0029390 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 ed ba 01 00       	call   c0028bec <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 6a b1 01 00       	call   c002828b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 95 bd 01 00       	call   c0028f6b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 95 b0 01 00       	call   c002828b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 75 b0 01 00       	call   c002828b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 45 bd 01 00       	call   c0028f6b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 95 bf 01 00       	call   c00291d5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 73 b6 01 00       	call   c00288dc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 f5 c0 01 00       	call   c0029370 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 1c bf 01 00       	call   c00291b9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 19 b6 01 00       	call   c00288dc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 97 bc 01 00       	call   c0028f6b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 1a b6 01 00       	call   c0028908 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 6c bc 01 00       	call   c0028f6b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 d3 b8 01 00       	call   c0028bec <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 52 af 01 00       	call   c002828b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 1c bc 01 00       	call   c0028f6b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 68 be 01 00       	call   c00291d7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 5d b5 01 00       	call   c0028908 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 2f b5 01 00       	call   c0028908 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 66 bb 01 00       	call   c0028f6b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ca b7 01 00       	call   c0028bec <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 97 b7 01 00       	call   c0028bec <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 16 ae 01 00       	call   c002828b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 03 bf 01 00       	call   c0029390 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 d5 ba 01 00       	call   c0028f6b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 2c b4 01 00       	call   c00288dc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 0b bd 01 00       	call   c00291d7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 a3 ad 01 00       	call   c002828b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 c7 b3 01 00       	call   c00288dc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 69 be 01 00       	call   c0029390 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 27 bc 01 00       	call   c00291d7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 e5 bb 01 00       	call   c00291b9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 7c b9 01 00       	call   c0028f6b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 7d ac 01 00       	call   c002828b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 4c b9 01 00       	call   c0028f6b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 b3 b5 01 00       	call   c0028bec <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 52 bb 01 00       	call   c00291b9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 55 bb 01 00       	call   c00291d7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 28 bb 01 00       	call   c00291d7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 21 b5 01 00       	call   c0028bec <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 ab bc 01 00       	call   c0029390 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 82 bc 01 00       	call   c0029390 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 54 b8 01 00       	call   c0028f6b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 ab b1 01 00       	call   c00288dc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 8a ba 01 00       	call   c00291d7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 23 ab 01 00       	call   c002828b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 4b b1 01 00       	call   c00288dc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 ed bb 01 00       	call   c0029390 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 26 b4 01 00       	call   c0028bec <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 a3 aa 01 00       	call   c002828b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 cf b6 01 00       	call   c0028f6b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 cf a9 01 00       	call   c002828b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 af a9 01 00       	call   c002828b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 7f b6 01 00       	call   c0028f6b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 b3 b8 01 00       	call   c00291b9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 aa af 01 00       	call   c00288dc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 2c ba 01 00       	call   c0029370 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 53 b8 01 00       	call   c00291b9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 4d af 01 00       	call   c00288dc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 cb b5 01 00       	call   c0028f6b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 4e af 01 00       	call   c0028908 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 a0 b5 01 00       	call   c0028f6b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 07 b2 01 00       	call   c0028bec <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 86 a8 01 00       	call   c002828b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 50 b5 01 00       	call   c0028f6b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 9c b7 01 00       	call   c00291d7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 91 ae 01 00       	call   c0028908 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 63 ae 01 00       	call   c0028908 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 a7 b4 01 00       	call   c0028f6b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 0e b1 01 00       	call   c0028bec <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 f7 ad 01 00       	call   c0028908 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 b3 b6 01 00       	call   c00291db <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 a6 b0 01 00       	call   c0028bec <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 25 a7 01 00       	call   c002828b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 12 b8 01 00       	call   c0029390 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 e4 b3 01 00       	call   c0028f6b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 3b ad 01 00       	call   c00288dc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 1a b6 01 00       	call   c00291d7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 b2 a6 01 00       	call   c002828b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 da ac 01 00       	call   c00288dc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 7c b7 01 00       	call   c0029390 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 ac 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd539c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 ac 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd53a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 2f b4 01 00       	call   c00291d7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 ed b3 01 00       	call   c00291b9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 d9 b3 01 00       	call   c00291d7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 4b b1 01 00       	call   c0028f6b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 c9 aa 01 00       	call   c0028908 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 1b b1 01 00       	call   c0028f6b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 21 a4 01 00       	call   c002828b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 f0 b0 01 00       	call   c0028f6b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 40 b3 01 00       	call   c00291d5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 21 aa 01 00       	call   c00288dc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 a3 b4 01 00       	call   c0029370 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ca b2 01 00       	call   c00291b9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 c9 a9 01 00       	call   c00288dc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 47 b0 01 00       	call   c0028f6b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ca a9 01 00       	call   c0028908 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 1c b0 01 00       	call   c0028f6b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 83 ac 01 00       	call   c0028bec <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 02 a3 01 00       	call   c002828b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 2a ac 01 00       	call   c0028bec <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 b0 a2 01 00       	call   c002828b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 9e b3 01 00       	call   c0029390 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 70 af 01 00       	call   c0028f6b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 c7 a8 01 00       	call   c00288dc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 a6 b1 01 00       	call   c00291d7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 3f a2 01 00       	call   c002828b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 6b a8 01 00       	call   c00288dc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 0d b3 01 00       	call   c0029390 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ba ae 01 00       	call   c0028f6b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 37 a8 01 00       	call   c0028908 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 88 ae 01 00       	call   c0028f6b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 8e a1 01 00       	call   c002828b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 5e ae 01 00       	call   c0028f6b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 b2 b0 01 00       	call   c00291d9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 8b a7 01 00       	call   c00288dc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 0d b2 01 00       	call   c0029370 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 34 b0 01 00       	call   c00291b9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 32 a7 01 00       	call   c00288dc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 b0 ad 01 00       	call   c0028f6b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 33 a7 01 00       	call   c0028908 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 85 ad 01 00       	call   c0028f6b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 ec a9 01 00       	call   c0028bec <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 6b a0 01 00       	call   c002828b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 87 a9 01 00       	call   c0028bec <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 06 a0 01 00       	call   c002828b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 f4 b0 01 00       	call   c0029390 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 c6 ac 01 00       	call   c0028f6b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 1d a6 01 00       	call   c00288dc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 fc ae 01 00       	call   c00291d7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 95 9f 01 00       	call   c002828b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 c1 a5 01 00       	call   c00288dc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 32 ac 01 00       	call   c0028f6b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 38 9f 01 00       	call   c002828b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e ad 02 c0       	mov    eax,0xc002ad7e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f ad 02 c0       	mov    eax,0xc002ad8f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c000e4e3:	ff 05 24 29 03 c0    	inc    DWORD PTR ds:0xc0032924
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 20 29 03 c0 00 	cmp    DWORD PTR ds:0xc0032920,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c000e50d:	e8 d0 01 01 00       	call   c001e6e2 <schedule()>
c000e512:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c000e517:	48                   	dec    eax
c000e518:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 70 f5 02 c0       	mov    eax,ds:0xc002f570
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 ad 02 c0       	push   0xc002adc6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 e8 f3 02 c0       	mov    eax,0xc002f3e8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf ad 02 c0       	push   0xc002adcf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 04 77 02 c0       	mov    eax,0xc0027704
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 ad 02 c0       	push   0xc002add9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 38 74 02 c0       	mov    eax,0xc0027438
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 ad 02 c0       	push   0xc002ade2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 04 78 02 c0       	mov    eax,0xc0027804
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec ad 02 c0       	push   0xc002adec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 84 75 02 c0       	mov    eax,0xc0027584
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 ad 02 c0       	push   0xc002adf5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 ec f3 02 c0       	mov    eax,0xc002f3ec
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 ae 02 c0       	push   0xc002ae02
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 ed f3 02 c0       	mov    eax,0xc002f3ed
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 3d 5d 00 00       	call   c00143aa <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c000e6b2:	68 0f ae 02 c0       	push   0xc002ae0f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 e7 fb 00 00       	call   c001e2a6 <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 ca fd 00 00       	call   c001e49e <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 1c ef 01 c0       	push   0xc001ef1c
c000e6dd:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c000e6e3:	e8 b6 fd 00 00       	call   c001e49e <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 08 29 03 c0       	mov    ds:0xc0032908,eax
c000e6f0:	c6 05 ed f3 02 c0 01 	mov    BYTE PTR ds:0xc002f3ed,0x1
c000e6f7:	e8 57 0c 01 00       	call   c001f353 <Vm::initialise8086()>
c000e6fc:	e8 71 4a 00 00       	call   c0013172 <Fs::initVFS()>
c000e701:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 16 e4 00 00       	call   c001cb33 <Sys::loadSyscalls()>
c000e71d:	e8 d4 c0 00 00       	call   c001a7f6 <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 1c ae 02 c0       	push   0xc002ae1c
c000e72c:	68 25 ae 02 c0       	push   0xc002ae25
c000e731:	e8 af cf 00 00       	call   c001b6e5 <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 24 55 00 00       	call   c0013c62 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 1b 5c 00 00       	call   c001436a <Device::loadDriversForAll()>
c000e74f:	e8 ee bb 00 00       	call   c001a342 <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d e8 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3e8
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 2d ae 02 c0       	push   0xc002ae2d
c000e763:	e8 9b f5 00 00       	call   c001dd03 <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 bd f7 00 00       	call   c001df2e <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 63 01 01 00       	call   c001e8e1 <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 49 ae 02 c0       	push   0xc002ae49
c000e793:	50                   	push   eax
c000e794:	e8 8b 5c 00 00       	call   c0014424 <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba e8 af 02 c0       	mov    edx,0xc002afe8
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 01 f4 02 c0 04 	test   BYTE PTR ds:0xc002f401,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 99 8a 01 00       	call   c00273c6 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 ea a6 00 00       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 c3 a6 00 00       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 a1 a6 00 00       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 7f a6 00 00       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 00 f4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f400,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 8d a5 00 00       	call   c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 68 a5 00 00       	call   c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 03 89 01 00       	call   c0027380 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 c0 88 01 00       	call   c0027360 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 84 a5 00 00       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 59 ae 02 c0       	push   0xc002ae59
c000eaf9:	e8 e9 42 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 6c ae 02 c0       	push   0xc002ae6c
c000eb1c:	e8 c6 42 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 7d ae 02 c0       	push   0xc002ae7d
c000eb3f:	e8 a3 42 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 8e ae 02 c0       	push   0xc002ae8e
c000eb62:	e8 80 42 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 9f ae 02 c0       	push   0xc002ae9f
c000eb85:	e8 5d 42 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 b0 ae 02 c0       	push   0xc002aeb0
c000eba8:	e8 3a 42 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 c1 ae 02 c0       	push   0xc002aec1
c000ebcb:	e8 17 42 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 d2 ae 02 c0       	push   0xc002aed2
c000ebee:	e8 f4 41 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 e3 ae 02 c0       	push   0xc002aee3
c000ec11:	e8 d1 41 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 f4 ae 02 c0       	push   0xc002aef4
c000ec34:	e8 ae 41 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 05 af 02 c0       	push   0xc002af05
c000ec57:	e8 8b 41 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 16 af 02 c0       	push   0xc002af16
c000ec7a:	e8 68 41 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 27 af 02 c0       	push   0xc002af27
c000ec9d:	e8 45 41 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 38 af 02 c0       	push   0xc002af38
c000ecc0:	e8 22 41 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 49 af 02 c0       	push   0xc002af49
c000ece3:	e8 ff 40 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 5a af 02 c0       	push   0xc002af5a
c000ed06:	e8 dc 40 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 6b af 02 c0       	push   0xc002af6b
c000ed29:	e8 b9 40 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 7c af 02 c0       	push   0xc002af7c
c000ed4c:	e8 96 40 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 8d af 02 c0       	push   0xc002af8d
c000ed6b:	e8 77 40 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 2c ca 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ca2c
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 66 40 00 00       	jmp    c0012de7 <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 9e af 02 c0       	push   0xc002af9e
c000ee54:	e8 d6 ba 00 00       	call   c001a92f <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 a4 af 02 c0       	push   0xc002afa4
c000ee8c:	e8 9e ba 00 00       	call   c001a92f <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 00 f4 02 c0 04 	test   BYTE PTR ds:0xc002f400,0x4
c000eee4:	68 68 12 00 00       	push   0x1268
c000eee9:	0f 94 05 24 e3 02 c0 	sete   BYTE PTR ds:0xc002e324
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 7d 93 00 00       	call   c001827c <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 12 53 00 00       	call   c0014220 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 cc a1 00 00       	call   c001910a <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 d3 52 00 00       	call   c0014220 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 5f 58 00 00       	call   c00147c8 <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 a3 52 00 00       	call   c0014220 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 21 f6 00 00       	call   c001e5c0 <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 aa af 02 c0       	push   0xc002afaa
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 fa 3d 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 bb af 02 c0       	push   0xc002afbb
c000f00a:	e8 20 b9 00 00       	call   c001a92f <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 c8 af 02 c0       	push   0xc002afc8
c000f01f:	e8 0b b9 00 00       	call   c001a92f <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 d2 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002afd2
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 f4 b8 00 00       	jmp    c001a92f <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 0c b0 02 c0       	push   0xc002b00c
c000f0d0:	e8 12 3d 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 f2 f3 02 c0       	mov    ds:0xc002f3f2,eax
c000f111:	66 89 15 f0 f3 02 c0 	mov    WORD PTR ds:0xc002f3f0,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c000f228:	48                   	dec    eax
c000f229:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 e8 f3 02 c0    	push   DWORD PTR ds:0xc002f3e8
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 91 a1 01 00       	call   c0029410 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 88 a1 01 00       	call   c0029410 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 f8 f3 02 c0 ff 07 	mov    WORD PTR ds:0xc002f3f8,0x7ff
c000f375:	a3 fa f3 02 c0       	mov    ds:0xc002f3fa,eax
c000f37a:	0f 01 1d f8 f3 02 c0 	lidtd  ds:0xc002f3f8
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 70 f5 02 c0    	push   DWORD PTR ds:0xc002f570
c000f66c:	e8 a9 2c 00 00       	call   c001231a <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 83 1c 00 00       	call   c0011312 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 b4 1c 00 00       	call   c0011352 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 e8 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3e8
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d 14 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e314
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 14 e3 02 c0       	mov    eax,ds:0xc002e314
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 28 b0 02 c0       	push   0xc002b028
c000f745:	e8 9d 36 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 14 e3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e314,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 70 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f570
c000f771:	8b 2d 14 e3 02 c0    	mov    ebp,DWORD PTR ds:0xc002e314
c000f777:	e8 2d 07 00 00       	call   c000fea9 <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 8f 2a 00 00       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d 14 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e314
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 58 b0 02 c0       	push   0xc002b058
c000f7fd:	e8 2d b1 00 00       	call   c001a92f <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 5d b0 02 c0       	push   0xc002b05d
c000f813:	e8 17 b1 00 00       	call   c001a92f <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c000f833:	48                   	dec    eax
c000f834:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 70 f5 02 c0    	push   DWORD PTR ds:0xc002f570
c000f854:	e8 c1 2a 00 00       	call   c001231a <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 70 f5 02 c0    	push   DWORD PTR ds:0xc002f570
c000f86a:	e8 55 27 00 00       	call   c0011fc4 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <hwTextMode_loadInData(VgaText*)>:
c000f8e6:	55                   	push   ebp
c000f8e7:	a1 20 e3 02 c0       	mov    eax,ds:0xc002e320
c000f8ec:	57                   	push   edi
c000f8ed:	56                   	push   esi
c000f8ee:	53                   	push   ebx
c000f8ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8f3:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f8f6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f8f9:	85 d2                	test   edx,edx
c000f8fb:	7e 29                	jle    c000f926 <hwTextMode_loadInData(VgaText*)+0x40>
c000f8fd:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f903:	31 f6                	xor    esi,esi
c000f905:	29 cd                	sub    ebp,ecx
c000f907:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f90a:	31 c0                	xor    eax,eax
c000f90c:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f910:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f914:	40                   	inc    eax
c000f915:	83 f8 50             	cmp    eax,0x50
c000f918:	75 f2                	jne    c000f90c <hwTextMode_loadInData(VgaText*)+0x26>
c000f91a:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f920:	46                   	inc    esi
c000f921:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f924:	7f e1                	jg     c000f907 <hwTextMode_loadInData(VgaText*)+0x21>
c000f926:	5b                   	pop    ebx
c000f927:	5e                   	pop    esi
c000f928:	5f                   	pop    edi
c000f929:	5d                   	pop    ebp
c000f92a:	c3                   	ret    

c000f92b <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f92b:	55                   	push   ebp
c000f92c:	80 3d 80 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f480,0x0
c000f933:	57                   	push   edi
c000f934:	56                   	push   esi
c000f935:	53                   	push   ebx
c000f936:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f93a:	75 44                	jne    c000f980 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f93c:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f93f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f942:	8b 15 20 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e320
c000f948:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f94c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f952:	eb 08                	jmp    c000f95c <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f954:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f957:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f95a:	89 da                	mov    edx,ebx
c000f95c:	83 e5 0f             	and    ebp,0xf
c000f95f:	c1 e0 04             	shl    eax,0x4
c000f962:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f965:	0f b6 c0             	movzx  eax,al
c000f968:	41                   	inc    ecx
c000f969:	09 e8                	or     eax,ebp
c000f96b:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f96f:	c1 e0 08             	shl    eax,0x8
c000f972:	09 e8                	or     eax,ebp
c000f974:	39 fb                	cmp    ebx,edi
c000f976:	66 89 02             	mov    WORD PTR [edx],ax
c000f979:	75 d9                	jne    c000f954 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f97b:	5b                   	pop    ebx
c000f97c:	5e                   	pop    esi
c000f97d:	5f                   	pop    edi
c000f97e:	5d                   	pop    ebp
c000f97f:	c3                   	ret    
c000f980:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f987:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f98e:	31 c0                	xor    eax,eax
c000f990:	bd 02 00 00 00       	mov    ebp,0x2
c000f995:	eb ab                	jmp    c000f942 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f997 <hwTextMode_scrollScreen(VgaText*)>:
c000f997:	55                   	push   ebp
c000f998:	57                   	push   edi
c000f999:	56                   	push   esi
c000f99a:	53                   	push   ebx
c000f99b:	83 ec 1c             	sub    esp,0x1c
c000f99e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f9a2:	80 3d 80 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f480,0x0
c000f9a9:	74 0e                	je     c000f9b9 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000f9ab:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000f9b2:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000f9b9:	a1 20 e3 02 c0       	mov    eax,ds:0xc002e320
c000f9be:	bd 02 00 00 00       	mov    ebp,0x2
c000f9c3:	05 a0 00 00 00       	add    eax,0xa0
c000f9c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f9d0:	31 c0                	xor    eax,eax
c000f9d2:	eb 0b                	jmp    c000f9df <hwTextMode_scrollScreen(VgaText*)+0x48>
c000f9d4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f9da:	74 51                	je     c000fa2d <hwTextMode_scrollScreen(VgaText*)+0x96>
c000f9dc:	43                   	inc    ebx
c000f9dd:	89 f0                	mov    eax,esi
c000f9df:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f9e5:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f9eb:	88 13                	mov    BYTE PTR [ebx],dl
c000f9ed:	8d 70 01             	lea    esi,[eax+0x1]
c000f9f0:	83 fd 18             	cmp    ebp,0x18
c000f9f3:	75 df                	jne    c000f9d4 <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000f9f5:	a8 01                	test   al,0x1
c000f9f7:	75 13                	jne    c000fa0c <hwTextMode_scrollScreen(VgaText*)+0x75>
c000f9f9:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f9fc:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fa02:	75 d8                	jne    c000f9dc <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fa04:	83 c4 1c             	add    esp,0x1c
c000fa07:	5b                   	pop    ebx
c000fa08:	5e                   	pop    esi
c000fa09:	5f                   	pop    edi
c000fa0a:	5d                   	pop    ebp
c000fa0b:	c3                   	ret    
c000fa0c:	83 ec 08             	sub    esp,0x8
c000fa0f:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fa13:	50                   	push   eax
c000fa14:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fa18:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fa1c:	50                   	push   eax
c000fa1d:	e8 a6 0c 00 00       	call   c00106c8 <VgaText::combineColours(unsigned char, unsigned char)>
c000fa22:	83 c4 10             	add    esp,0x10
c000fa25:	88 07                	mov    BYTE PTR [edi],al
c000fa27:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa2b:	eb cf                	jmp    c000f9fc <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fa2d:	45                   	inc    ebp
c000fa2e:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fa36:	eb 94                	jmp    c000f9cc <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fa38 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fa38:	57                   	push   edi
c000fa39:	80 3d 80 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f480,0x0
c000fa40:	56                   	push   esi
c000fa41:	53                   	push   ebx
c000fa42:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fa46:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fa4a:	75 62                	jne    c000faae <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fa4c:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fa51:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fa56:	83 ec 08             	sub    esp,0x8
c000fa59:	52                   	push   edx
c000fa5a:	50                   	push   eax
c000fa5b:	e8 68 0c 00 00       	call   c00106c8 <VgaText::combineColours(unsigned char, unsigned char)>
c000fa60:	5a                   	pop    edx
c000fa61:	0f b6 c0             	movzx  eax,al
c000fa64:	59                   	pop    ecx
c000fa65:	50                   	push   eax
c000fa66:	0f be c3             	movsx  eax,bl
c000fa69:	50                   	push   eax
c000fa6a:	e8 ff 0c 00 00       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c000fa6f:	83 c4 10             	add    esp,0x10
c000fa72:	8b 35 20 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e320
c000fa78:	80 3d 80 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f480,0x0
c000fa7f:	74 07                	je     c000fa88 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fa81:	66 0f be c3          	movsx  ax,bl
c000fa85:	80 cc 02             	or     ah,0x2
c000fa88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fa8c:	ba 19 00 00 00       	mov    edx,0x19
c000fa91:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fa94:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fa97:	8d 14 92             	lea    edx,[edx+edx*4]
c000fa9a:	c1 e1 04             	shl    ecx,0x4
c000fa9d:	c1 e2 04             	shl    edx,0x4
c000faa0:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000faa4:	01 ca                	add    edx,ecx
c000faa6:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000faaa:	5b                   	pop    ebx
c000faab:	5e                   	pop    esi
c000faac:	5f                   	pop    edi
c000faad:	c3                   	ret    
c000faae:	b8 02 00 00 00       	mov    eax,0x2
c000fab3:	31 d2                	xor    edx,edx
c000fab5:	eb 9f                	jmp    c000fa56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fab7 <hwTextMode_showCursor(VgaText*, bool)>:
c000fab7:	56                   	push   esi
c000fab8:	80 3d 80 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f480,0x0
c000fabf:	53                   	push   ebx
c000fac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fac4:	75 36                	jne    c000fafc <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000fac6:	84 c0                	test   al,al
c000fac8:	74 35                	je     c000faff <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000faca:	bb d4 03 00 00       	mov    ebx,0x3d4
c000facf:	b0 0a                	mov    al,0xa
c000fad1:	89 da                	mov    edx,ebx
c000fad3:	ee                   	out    dx,al
c000fad4:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fad9:	89 ca                	mov    edx,ecx
c000fadb:	ec                   	in     al,dx
c000fadc:	b2 0f                	mov    dl,0xf
c000fade:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fae2:	83 e0 c0             	and    eax,0xffffffc0
c000fae5:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000fae8:	09 d0                	or     eax,edx
c000faea:	89 ca                	mov    edx,ecx
c000faec:	ee                   	out    dx,al
c000faed:	b0 0b                	mov    al,0xb
c000faef:	89 da                	mov    edx,ebx
c000faf1:	ee                   	out    dx,al
c000faf2:	89 ca                	mov    edx,ecx
c000faf4:	ec                   	in     al,dx
c000faf5:	83 e0 e0             	and    eax,0xffffffe0
c000faf8:	83 c8 0f             	or     eax,0xf
c000fafb:	ee                   	out    dx,al
c000fafc:	5b                   	pop    ebx
c000fafd:	5e                   	pop    esi
c000fafe:	c3                   	ret    
c000faff:	b0 0a                	mov    al,0xa
c000fb01:	ba d4 03 00 00       	mov    edx,0x3d4
c000fb06:	ee                   	out    dx,al
c000fb07:	b0 20                	mov    al,0x20
c000fb09:	ba d5 03 00 00       	mov    edx,0x3d5
c000fb0e:	ee                   	out    dx,al
c000fb0f:	5b                   	pop    ebx
c000fb10:	5e                   	pop    esi
c000fb11:	c3                   	ret    

c000fb12 <hwTextMode_update(VgaText*)>:
c000fb12:	c3                   	ret    

c000fb13 <hwTextMode_updateCursor(VgaText*)>:
c000fb13:	56                   	push   esi
c000fb14:	80 3d 80 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f480,0x0
c000fb1b:	53                   	push   ebx
c000fb1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb20:	75 36                	jne    c000fb58 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fb22:	be d4 03 00 00       	mov    esi,0x3d4
c000fb27:	b9 19 00 00 00       	mov    ecx,0x19
c000fb2c:	89 f2                	mov    edx,esi
c000fb2e:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fb31:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fb34:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fb37:	c1 e1 04             	shl    ecx,0x4
c000fb3a:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fb3d:	b0 0f                	mov    al,0xf
c000fb3f:	ee                   	out    dx,al
c000fb40:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fb45:	88 c8                	mov    al,cl
c000fb47:	89 da                	mov    edx,ebx
c000fb49:	ee                   	out    dx,al
c000fb4a:	b0 0e                	mov    al,0xe
c000fb4c:	89 f2                	mov    edx,esi
c000fb4e:	ee                   	out    dx,al
c000fb4f:	89 c8                	mov    eax,ecx
c000fb51:	89 da                	mov    edx,ebx
c000fb53:	66 c1 e8 08          	shr    ax,0x8
c000fb57:	ee                   	out    dx,al
c000fb58:	5b                   	pop    ebx
c000fb59:	5e                   	pop    esi
c000fb5a:	c3                   	ret    

c000fb5b <hwTextMode_disableBlink(VgaText*, bool)>:
c000fb5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb5f:	80 3d 80 f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f480,0x0
c000fb66:	75 38                	jne    c000fba0 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fb68:	ba da 03 00 00       	mov    edx,0x3da
c000fb6d:	84 c0                	test   al,al
c000fb6f:	75 18                	jne    c000fb89 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fb71:	ec                   	in     al,dx
c000fb72:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fb77:	b0 30                	mov    al,0x30
c000fb79:	89 ca                	mov    edx,ecx
c000fb7b:	ee                   	out    dx,al
c000fb7c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fb81:	ec                   	in     al,dx
c000fb82:	83 c8 08             	or     eax,0x8
c000fb85:	89 ca                	mov    edx,ecx
c000fb87:	ee                   	out    dx,al
c000fb88:	c3                   	ret    
c000fb89:	ec                   	in     al,dx
c000fb8a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fb8f:	b0 30                	mov    al,0x30
c000fb91:	89 ca                	mov    edx,ecx
c000fb93:	ee                   	out    dx,al
c000fb94:	ba c1 03 00 00       	mov    edx,0x3c1
c000fb99:	ec                   	in     al,dx
c000fb9a:	83 e0 f7             	and    eax,0xfffffff7
c000fb9d:	89 ca                	mov    edx,ecx
c000fb9f:	ee                   	out    dx,al
c000fba0:	c3                   	ret    

c000fba1 <setupTextMode()>:
c000fba1:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fba6:	83 e0 30             	and    eax,0x30
c000fba9:	66 83 f8 30          	cmp    ax,0x30
c000fbad:	74 01                	je     c000fbb0 <setupTextMode()+0xf>
c000fbaf:	c3                   	ret    
c000fbb0:	81 2d 20 e3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002e320,0x8000
c000fbba:	c6 05 80 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f480,0x1
c000fbc1:	c3                   	ret    

c000fbc2 <kernel_main>:
c000fbc2:	57                   	push   edi
c000fbc3:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbc8:	56                   	push   esi
c000fbc9:	89 fa                	mov    edx,edi
c000fbcb:	53                   	push   ebx
c000fbcc:	31 f6                	xor    esi,esi
c000fbce:	83 ec 2c             	sub    esp,0x2c
c000fbd1:	89 f0                	mov    eax,esi
c000fbd3:	ee                   	out    dx,al
c000fbd4:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fbd9:	b0 80                	mov    al,0x80
c000fbdb:	89 da                	mov    edx,ebx
c000fbdd:	ee                   	out    dx,al
c000fbde:	b1 03                	mov    cl,0x3
c000fbe0:	ba f8 03 00 00       	mov    edx,0x3f8
c000fbe5:	88 c8                	mov    al,cl
c000fbe7:	ee                   	out    dx,al
c000fbe8:	89 f0                	mov    eax,esi
c000fbea:	89 fa                	mov    edx,edi
c000fbec:	ee                   	out    dx,al
c000fbed:	88 c8                	mov    al,cl
c000fbef:	89 da                	mov    edx,ebx
c000fbf1:	ee                   	out    dx,al
c000fbf2:	b0 c7                	mov    al,0xc7
c000fbf4:	ba fa 03 00 00       	mov    edx,0x3fa
c000fbf9:	ee                   	out    dx,al
c000fbfa:	b0 0b                	mov    al,0xb
c000fbfc:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc01:	ee                   	out    dx,al
c000fc02:	68 64 b0 02 c0       	push   0xc002b064
c000fc07:	e8 db 31 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000fc0c:	e8 49 09 00 00       	call   c001055a <installVgaTextImplementation()>
c000fc11:	e8 8b ff ff ff       	call   c000fba1 <setupTextMode()>
c000fc16:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc1b:	05 ff 0f 00 00       	add    eax,0xfff
c000fc20:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc25:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc28:	e8 f5 03 00 00       	call   c0010022 <Phys::physicalMemorySetup(unsigned int)>
c000fc2d:	e8 6e 1f 00 00       	call   c0011ba0 <Virt::virtualMemorySetup()>
c000fc32:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc38:	83 c4 10             	add    esp,0x10
c000fc3b:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc41:	75 0e                	jne    c000fc51 <kernel_main+0x8f>
c000fc43:	89 d8                	mov    eax,ebx
c000fc45:	25 48 03 00 00       	and    eax,0x348
c000fc4a:	3d 00 03 00 00       	cmp    eax,0x300
c000fc4f:	74 10                	je     c000fc61 <kernel_main+0x9f>
c000fc51:	83 ec 0c             	sub    esp,0xc
c000fc54:	68 2d ca 02 c0       	push   0xc002ca2d
c000fc59:	e8 d1 ac 00 00       	call   c001a92f <Krnl::panic(char const*)>
c000fc5e:	83 c4 10             	add    esp,0x10
c000fc61:	83 ec 0c             	sub    esp,0xc
c000fc64:	89 1d 00 f4 02 c0    	mov    DWORD PTR ds:0xc002f400,ebx
c000fc6a:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fc6e:	53                   	push   ebx
c000fc6f:	e8 78 21 00 00       	call   c0011dec <VAS::VAS()>
c000fc74:	89 1d 70 f5 02 c0    	mov    DWORD PTR ds:0xc002f570,ebx
c000fc7a:	e8 a1 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fc7f:	c7 04 24 7b b0 02 c0 	mov    DWORD PTR [esp],0xc002b07b
c000fc86:	e8 5c 31 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000fc8b:	e8 8f 1f 00 00       	call   c0011c1f <Virt::swappingSetup()>
c000fc90:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fc97:	e8 f0 fb ff ff       	call   c000f88c <malloc>
c000fc9c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc9f:	89 c6                	mov    esi,eax
c000fca1:	e8 de ea ff ff       	call   c000e784 <Computer::Computer()>
c000fca6:	58                   	pop    eax
c000fca7:	89 35 e8 f3 02 c0    	mov    DWORD PTR ds:0xc002f3e8,esi
c000fcad:	5a                   	pop    edx
c000fcae:	56                   	push   esi
c000fcaf:	68 98 b0 02 c0       	push   0xc002b098
c000fcb4:	e8 2e 31 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000fcb9:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c000fcbe:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcc0:	6a 00                	push   0x0
c000fcc2:	6a 00                	push   0x0
c000fcc4:	6a 00                	push   0x0
c000fcc6:	50                   	push   eax
c000fcc7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcca:	83 c4 14             	add    esp,0x14
c000fccd:	53                   	push   ebx
c000fcce:	e8 c9 23 00 00       	call   c001209c <VAS::~VAS()>
c000fcd3:	c7 04 24 ab b0 02 c0 	mov    DWORD PTR [esp],0xc002b0ab
c000fcda:	e8 50 ac 00 00       	call   c001a92f <Krnl::panic(char const*)>
c000fcdf:	83 c4 30             	add    esp,0x30
c000fce2:	5b                   	pop    ebx
c000fce3:	5e                   	pop    esi
c000fce4:	5f                   	pop    edi
c000fce5:	c3                   	ret    

c000fce6 <Phys::allocateDMA(unsigned long)>:
c000fce6:	55                   	push   ebp
c000fce7:	31 d2                	xor    edx,edx
c000fce9:	57                   	push   edi
c000fcea:	31 ed                	xor    ebp,ebp
c000fcec:	56                   	push   esi
c000fced:	31 c9                	xor    ecx,ecx
c000fcef:	53                   	push   ebx
c000fcf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fcf4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fcfa:	31 c0                	xor    eax,eax
c000fcfc:	c1 ee 0c             	shr    esi,0xc
c000fcff:	eb 17                	jmp    c000fd18 <Phys::allocateDMA(unsigned long)+0x32>
c000fd01:	85 c9                	test   ecx,ecx
c000fd03:	75 04                	jne    c000fd09 <Phys::allocateDMA(unsigned long)+0x23>
c000fd05:	89 d5                	mov    ebp,edx
c000fd07:	89 d0                	mov    eax,edx
c000fd09:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd0c:	39 de                	cmp    esi,ebx
c000fd0e:	74 20                	je     c000fd30 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd10:	42                   	inc    edx
c000fd11:	89 d9                	mov    ecx,ebx
c000fd13:	83 fa 2f             	cmp    edx,0x2f
c000fd16:	7f 11                	jg     c000fd29 <Phys::allocateDMA(unsigned long)+0x43>
c000fd18:	80 ba 40 f4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0bc0],0x0
c000fd1f:	74 e0                	je     c000fd01 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd21:	31 c9                	xor    ecx,ecx
c000fd23:	42                   	inc    edx
c000fd24:	83 fa 2f             	cmp    edx,0x2f
c000fd27:	7e ef                	jle    c000fd18 <Phys::allocateDMA(unsigned long)+0x32>
c000fd29:	5b                   	pop    ebx
c000fd2a:	31 c0                	xor    eax,eax
c000fd2c:	5e                   	pop    esi
c000fd2d:	5f                   	pop    edi
c000fd2e:	5d                   	pop    ebp
c000fd2f:	c3                   	ret    
c000fd30:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd33:	89 d7                	mov    edi,edx
c000fd35:	4f                   	dec    edi
c000fd36:	79 03                	jns    c000fd3b <Phys::allocateDMA(unsigned long)+0x55>
c000fd38:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd3b:	c1 ff 04             	sar    edi,0x4
c000fd3e:	89 c2                	mov    edx,eax
c000fd40:	c1 fa 04             	sar    edx,0x4
c000fd43:	39 fa                	cmp    edx,edi
c000fd45:	75 2f                	jne    c000fd76 <Phys::allocateDMA(unsigned long)+0x90>
c000fd47:	85 db                	test   ebx,ebx
c000fd49:	74 1a                	je     c000fd65 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd4b:	be 40 f4 02 c0       	mov    esi,0xc002f440
c000fd50:	8d 90 40 f4 02 c0    	lea    edx,[eax-0x3ffd0bc0]
c000fd56:	f7 d6                	not    esi
c000fd58:	29 c6                	sub    esi,eax
c000fd5a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd5d:	42                   	inc    edx
c000fd5e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd61:	39 d9                	cmp    ecx,ebx
c000fd63:	7f f5                	jg     c000fd5a <Phys::allocateDMA(unsigned long)+0x74>
c000fd65:	85 ff                	test   edi,edi
c000fd67:	74 13                	je     c000fd7c <Phys::allocateDMA(unsigned long)+0x96>
c000fd69:	5b                   	pop    ebx
c000fd6a:	05 50 20 0c 00       	add    eax,0xc2050
c000fd6f:	5e                   	pop    esi
c000fd70:	c1 e0 0c             	shl    eax,0xc
c000fd73:	5f                   	pop    edi
c000fd74:	5d                   	pop    ebp
c000fd75:	c3                   	ret    
c000fd76:	89 ea                	mov    edx,ebp
c000fd78:	31 c9                	xor    ecx,ecx
c000fd7a:	eb a7                	jmp    c000fd23 <Phys::allocateDMA(unsigned long)+0x3d>
c000fd7c:	5b                   	pop    ebx
c000fd7d:	c1 e0 0c             	shl    eax,0xc
c000fd80:	5e                   	pop    esi
c000fd81:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fd86:	5f                   	pop    edi
c000fd87:	5d                   	pop    ebp
c000fd88:	c3                   	ret    

c000fd89 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fd89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fd91:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fd97:	c1 e9 0c             	shr    ecx,0xc
c000fd9a:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fd9f:	76 25                	jbe    c000fdc6 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fda1:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fda6:	c1 e8 0c             	shr    eax,0xc
c000fda9:	8d 50 10             	lea    edx,[eax+0x10]
c000fdac:	85 c9                	test   ecx,ecx
c000fdae:	74 15                	je     c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdb0:	8d 82 40 f4 02 c0    	lea    eax,[edx-0x3ffd0bc0]
c000fdb6:	8d 94 11 40 f4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0bc0]
c000fdbd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdc0:	40                   	inc    eax
c000fdc1:	39 d0                	cmp    eax,edx
c000fdc3:	75 f8                	jne    c000fdbd <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdc5:	c3                   	ret    
c000fdc6:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fdcc:	c1 ea 0c             	shr    edx,0xc
c000fdcf:	eb db                	jmp    c000fdac <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fdd1 <Phys::setPageState(unsigned long, bool)>:
c000fdd1:	56                   	push   esi
c000fdd2:	ba 01 00 00 00       	mov    edx,0x1
c000fdd7:	53                   	push   ebx
c000fdd8:	8b 35 18 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e318
c000fdde:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fde2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fde6:	89 c8                	mov    eax,ecx
c000fde8:	83 e1 07             	and    ecx,0x7
c000fdeb:	c1 e8 03             	shr    eax,0x3
c000fdee:	d3 e3                	shl    ebx,cl
c000fdf0:	01 c6                	add    esi,eax
c000fdf2:	d3 e2                	shl    edx,cl
c000fdf4:	f7 d2                	not    edx
c000fdf6:	20 16                	and    BYTE PTR [esi],dl
c000fdf8:	03 05 18 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e318
c000fdfe:	08 18                	or     BYTE PTR [eax],bl
c000fe00:	5b                   	pop    ebx
c000fe01:	5e                   	pop    esi
c000fe02:	c3                   	ret    

c000fe03 <Phys::getPageState(unsigned long)>:
c000fe03:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe07:	8b 15 18 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e318
c000fe0d:	89 c8                	mov    eax,ecx
c000fe0f:	83 e1 07             	and    ecx,0x7
c000fe12:	c1 e8 03             	shr    eax,0x3
c000fe15:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe19:	d3 f8                	sar    eax,cl
c000fe1b:	83 e0 01             	and    eax,0x1
c000fe1e:	c3                   	ret    

c000fe1f <Phys::freePage(unsigned long)>:
c000fe1f:	53                   	push   ebx
c000fe20:	83 ec 08             	sub    esp,0x8
c000fe23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe27:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe2d:	76 57                	jbe    c000fe86 <Phys::freePage(unsigned long)+0x67>
c000fe2f:	c1 eb 0c             	shr    ebx,0xc
c000fe32:	53                   	push   ebx
c000fe33:	e8 cb ff ff ff       	call   c000fe03 <Phys::getPageState(unsigned long)>
c000fe38:	5a                   	pop    edx
c000fe39:	84 c0                	test   al,al
c000fe3b:	74 5b                	je     c000fe98 <Phys::freePage(unsigned long)+0x79>
c000fe3d:	a1 30 f4 02 c0       	mov    eax,ds:0xc002f430
c000fe42:	48                   	dec    eax
c000fe43:	a3 30 f4 02 c0       	mov    ds:0xc002f430,eax
c000fe48:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe4b:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe4e:	c1 e0 02             	shl    eax,0x2
c000fe51:	99                   	cdq    
c000fe52:	f7 3d 34 f4 02 c0    	idiv   DWORD PTR ds:0xc002f434
c000fe58:	39 05 2c f4 02 c0    	cmp    DWORD PTR ds:0xc002f42c,eax
c000fe5e:	75 13                	jne    c000fe73 <Phys::freePage(unsigned long)+0x54>
c000fe60:	83 ec 08             	sub    esp,0x8
c000fe63:	6a 00                	push   0x0
c000fe65:	53                   	push   ebx
c000fe66:	e8 66 ff ff ff       	call   c000fdd1 <Phys::setPageState(unsigned long, bool)>
c000fe6b:	83 c4 10             	add    esp,0x10
c000fe6e:	83 c4 08             	add    esp,0x8
c000fe71:	5b                   	pop    ebx
c000fe72:	c3                   	ret    
c000fe73:	83 ec 0c             	sub    esp,0xc
c000fe76:	a3 2c f4 02 c0       	mov    ds:0xc002f42c,eax
c000fe7b:	50                   	push   eax
c000fe7c:	e8 07 0a 00 00       	call   c0010888 <VgaText::updateRAMUsageDisplay(int)>
c000fe81:	83 c4 10             	add    esp,0x10
c000fe84:	eb da                	jmp    c000fe60 <Phys::freePage(unsigned long)+0x41>
c000fe86:	68 00 10 00 00       	push   0x1000
c000fe8b:	53                   	push   ebx
c000fe8c:	e8 f8 fe ff ff       	call   c000fd89 <Phys::freeDMA(unsigned long, unsigned long)>
c000fe91:	59                   	pop    ecx
c000fe92:	5b                   	pop    ebx
c000fe93:	83 c4 08             	add    esp,0x8
c000fe96:	5b                   	pop    ebx
c000fe97:	c3                   	ret    
c000fe98:	c7 44 24 10 c6 b0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b0c6
c000fea0:	83 c4 08             	add    esp,0x8
c000fea3:	5b                   	pop    ebx
c000fea4:	e9 86 aa 00 00       	jmp    c001a92f <Krnl::panic(char const*)>

c000fea9 <Phys::allocatePage()>:
c000fea9:	56                   	push   esi
c000feaa:	53                   	push   ebx
c000feab:	51                   	push   ecx
c000feac:	8b 35 24 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f424
c000feb2:	89 f3                	mov    ebx,esi
c000feb4:	eb 0a                	jmp    c000fec0 <Phys::allocatePage()+0x17>
c000feb6:	89 1d 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,ebx
c000febc:	39 de                	cmp    esi,ebx
c000febe:	74 24                	je     c000fee4 <Phys::allocatePage()+0x3b>
c000fec0:	53                   	push   ebx
c000fec1:	e8 3d ff ff ff       	call   c000fe03 <Phys::getPageState(unsigned long)>
c000fec6:	5a                   	pop    edx
c000fec7:	84 c0                	test   al,al
c000fec9:	74 77                	je     c000ff42 <Phys::allocatePage()+0x99>
c000fecb:	43                   	inc    ebx
c000fecc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fed2:	75 e2                	jne    c000feb6 <Phys::allocatePage()+0xd>
c000fed4:	31 db                	xor    ebx,ebx
c000fed6:	c7 05 24 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f424,0x0
c000fee0:	39 de                	cmp    esi,ebx
c000fee2:	75 dc                	jne    c000fec0 <Phys::allocatePage()+0x17>
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000feec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000feef:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fef5:	e8 1a 2c 00 00       	call   c0012b14 <VAS::scanForEviction()>
c000fefa:	83 c4 10             	add    esp,0x10
c000fefd:	85 c0                	test   eax,eax
c000feff:	75 76                	jne    c000ff77 <Phys::allocatePage()+0xce>
c000ff01:	83 ec 0c             	sub    esp,0xc
c000ff04:	68 dc b0 02 c0       	push   0xc002b0dc
c000ff09:	e8 d9 2e 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c000ff0e:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff15:	e8 cc fd ff ff       	call   c000fce6 <Phys::allocateDMA(unsigned long)>
c000ff1a:	83 c4 10             	add    esp,0x10
c000ff1d:	85 c0                	test   eax,eax
c000ff1f:	75 56                	jne    c000ff77 <Phys::allocatePage()+0xce>
c000ff21:	83 ec 0c             	sub    esp,0xc
c000ff24:	68 ed b0 02 c0       	push   0xc002b0ed
c000ff29:	e8 01 aa 00 00       	call   c001a92f <Krnl::panic(char const*)>
c000ff2e:	83 c4 10             	add    esp,0x10
c000ff31:	8b 1d 24 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f424
c000ff37:	53                   	push   ebx
c000ff38:	e8 c6 fe ff ff       	call   c000fe03 <Phys::getPageState(unsigned long)>
c000ff3d:	5a                   	pop    edx
c000ff3e:	84 c0                	test   al,al
c000ff40:	75 89                	jne    c000fecb <Phys::allocatePage()+0x22>
c000ff42:	6a 01                	push   0x1
c000ff44:	53                   	push   ebx
c000ff45:	e8 87 fe ff ff       	call   c000fdd1 <Phys::setPageState(unsigned long, bool)>
c000ff4a:	a1 30 f4 02 c0       	mov    eax,ds:0xc002f430
c000ff4f:	59                   	pop    ecx
c000ff50:	40                   	inc    eax
c000ff51:	5b                   	pop    ebx
c000ff52:	a3 30 f4 02 c0       	mov    ds:0xc002f430,eax
c000ff57:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff5a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff5d:	c1 e0 02             	shl    eax,0x2
c000ff60:	99                   	cdq    
c000ff61:	f7 3d 34 f4 02 c0    	idiv   DWORD PTR ds:0xc002f434
c000ff67:	39 05 2c f4 02 c0    	cmp    DWORD PTR ds:0xc002f42c,eax
c000ff6d:	75 0c                	jne    c000ff7b <Phys::allocatePage()+0xd2>
c000ff6f:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c000ff74:	c1 e0 0c             	shl    eax,0xc
c000ff77:	5a                   	pop    edx
c000ff78:	5b                   	pop    ebx
c000ff79:	5e                   	pop    esi
c000ff7a:	c3                   	ret    
c000ff7b:	83 ec 0c             	sub    esp,0xc
c000ff7e:	a3 2c f4 02 c0       	mov    ds:0xc002f42c,eax
c000ff83:	50                   	push   eax
c000ff84:	e8 ff 08 00 00       	call   c0010888 <VgaText::updateRAMUsageDisplay(int)>
c000ff89:	83 c4 10             	add    esp,0x10
c000ff8c:	eb e1                	jmp    c000ff6f <Phys::allocatePage()+0xc6>

c000ff8e <Phys::allocateContiguousPages(int)>:
c000ff8e:	57                   	push   edi
c000ff8f:	56                   	push   esi
c000ff90:	53                   	push   ebx
c000ff91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff95:	fa                   	cli    
c000ff96:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c000ff9c:	31 db                	xor    ebx,ebx
c000ff9e:	85 db                	test   ebx,ebx
c000ffa0:	75 11                	jne    c000ffb3 <Phys::allocateContiguousPages(int)+0x25>
c000ffa2:	e8 02 ff ff ff       	call   c000fea9 <Phys::allocatePage()>
c000ffa7:	83 fe 01             	cmp    esi,0x1
c000ffaa:	89 c7                	mov    edi,eax
c000ffac:	74 21                	je     c000ffcf <Phys::allocateContiguousPages(int)+0x41>
c000ffae:	bb 01 00 00 00       	mov    ebx,0x1
c000ffb3:	e8 f1 fe ff ff       	call   c000fea9 <Phys::allocatePage()>
c000ffb8:	89 da                	mov    edx,ebx
c000ffba:	c1 e2 0c             	shl    edx,0xc
c000ffbd:	01 fa                	add    edx,edi
c000ffbf:	39 c2                	cmp    edx,eax
c000ffc1:	74 20                	je     c000ffe3 <Phys::allocateContiguousPages(int)+0x55>
c000ffc3:	bb 01 00 00 00       	mov    ebx,0x1
c000ffc8:	89 c7                	mov    edi,eax
c000ffca:	83 fe 01             	cmp    esi,0x1
c000ffcd:	75 e4                	jne    c000ffb3 <Phys::allocateContiguousPages(int)+0x25>
c000ffcf:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c000ffd4:	48                   	dec    eax
c000ffd5:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c000ffda:	75 01                	jne    c000ffdd <Phys::allocateContiguousPages(int)+0x4f>
c000ffdc:	fb                   	sti    
c000ffdd:	89 f8                	mov    eax,edi
c000ffdf:	5b                   	pop    ebx
c000ffe0:	5e                   	pop    esi
c000ffe1:	5f                   	pop    edi
c000ffe2:	c3                   	ret    
c000ffe3:	43                   	inc    ebx
c000ffe4:	39 f3                	cmp    ebx,esi
c000ffe6:	75 b6                	jne    c000ff9e <Phys::allocateContiguousPages(int)+0x10>
c000ffe8:	eb e5                	jmp    c000ffcf <Phys::allocateContiguousPages(int)+0x41>

c000ffea <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ffea:	56                   	push   esi
c000ffeb:	53                   	push   ebx
c000ffec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fff0:	39 1d 28 f4 02 c0    	cmp    DWORD PTR ds:0xc002f428,ebx
c000fff6:	73 06                	jae    c000fffe <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fff8:	89 1d 28 f4 02 c0    	mov    DWORD PTR ds:0xc002f428,ebx
c000fffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010002:	c1 eb 0c             	shr    ebx,0xc
c0010005:	c1 e8 0c             	shr    eax,0xc
c0010008:	39 d8                	cmp    eax,ebx
c001000a:	73 13                	jae    c001001f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001000c:	6a 00                	push   0x0
c001000e:	8d 70 01             	lea    esi,[eax+0x1]
c0010011:	50                   	push   eax
c0010012:	e8 ba fd ff ff       	call   c000fdd1 <Phys::setPageState(unsigned long, bool)>
c0010017:	5a                   	pop    edx
c0010018:	89 f0                	mov    eax,esi
c001001a:	59                   	pop    ecx
c001001b:	39 f3                	cmp    ebx,esi
c001001d:	75 ed                	jne    c001000c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001001f:	5b                   	pop    ebx
c0010020:	5e                   	pop    esi
c0010021:	c3                   	ret    

c0010022 <Phys::physicalMemorySetup(unsigned int)>:
c0010022:	55                   	push   ebp
c0010023:	57                   	push   edi
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	31 db                	xor    ebx,ebx
c0010028:	83 ec 40             	sub    esp,0x40
c001002b:	6a 30                	push   0x30
c001002d:	6a 00                	push   0x0
c001002f:	68 40 f4 02 c0       	push   0xc002f440
c0010034:	e8 17 07 ff ff       	call   c0000750 <memset>
c0010039:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001003d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010042:	05 00 10 00 00       	add    eax,0x1000
c0010047:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001004b:	83 c4 10             	add    esp,0x10
c001004e:	83 ec 08             	sub    esp,0x8
c0010051:	6a 01                	push   0x1
c0010053:	53                   	push   ebx
c0010054:	43                   	inc    ebx
c0010055:	e8 77 fd ff ff       	call   c000fdd1 <Phys::setPageState(unsigned long, bool)>
c001005a:	83 c4 10             	add    esp,0x10
c001005d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010063:	75 e9                	jne    c001004e <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010065:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c001006c:	66 85 c0             	test   ax,ax
c001006f:	0f 84 8e 01 00 00    	je     c0010203 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010075:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010079:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010081:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010085:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001008a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001008e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010096:	eb 15                	jmp    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010098:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001009c:	83 c3 18             	add    ebx,0x18
c001009f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100a3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100a7:	0f 84 66 01 00 00    	je     c0010213 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100be:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100c0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100c3:	01 f0                	add    eax,esi
c00100c5:	55                   	push   ebp
c00100c6:	11 fa                	adc    edx,edi
c00100c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100cc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100d4:	56                   	push   esi
c00100d5:	68 28 b1 02 c0       	push   0xc002b128
c00100da:	e8 08 2d 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00100df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100e3:	83 c4 10             	add    esp,0x10
c00100e6:	09 f8                	or     eax,edi
c00100e8:	0f 85 25 01 00 00    	jne    c0010213 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100ee:	4d                   	dec    ebp
c00100ef:	75 a7                	jne    c0010098 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00100f1:	ba 00 00 08 00       	mov    edx,0x80000
c00100f6:	89 c1                	mov    ecx,eax
c00100f8:	39 f2                	cmp    edx,esi
c00100fa:	19 f9                	sbb    ecx,edi
c00100fc:	0f 82 a7 00 00 00    	jb     c00101a9 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010102:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010106:	89 c1                	mov    ecx,eax
c0010108:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001010c:	0f 83 97 00 00 00    	jae    c00101a9 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010112:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010117:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001011b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001011f:	39 fa                	cmp    edx,edi
c0010121:	19 e8                	sbb    eax,ebp
c0010123:	0f 82 14 01 00 00    	jb     c001023d <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010129:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001012d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010131:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010137:	ba ff 1f 00 00       	mov    edx,0x1fff
c001013c:	83 d5 ff             	adc    ebp,0xffffffff
c001013f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010143:	31 c0                	xor    eax,eax
c0010145:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010149:	39 fa                	cmp    edx,edi
c001014b:	89 c1                	mov    ecx,eax
c001014d:	19 e9                	sbb    ecx,ebp
c001014f:	0f 83 43 ff ff ff    	jae    c0010098 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010155:	be 00 00 08 00       	mov    esi,0x80000
c001015a:	50                   	push   eax
c001015b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001015f:	57                   	push   edi
c0010160:	56                   	push   esi
c0010161:	68 4c b1 02 c0       	push   0xc002b14c
c0010166:	e8 7c 2c 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001016b:	5a                   	pop    edx
c001016c:	59                   	pop    ecx
c001016d:	57                   	push   edi
c001016e:	56                   	push   esi
c001016f:	e8 76 fe ff ff       	call   c000ffea <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010174:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010178:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001017c:	83 c4 0c             	add    esp,0xc
c001017f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010183:	03 05 34 f4 02 c0    	add    eax,DWORD PTR ds:0xc002f434
c0010189:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010190:	a3 34 f4 02 c0       	mov    ds:0xc002f434,eax
c0010195:	52                   	push   edx
c0010196:	50                   	push   eax
c0010197:	68 09 b1 02 c0       	push   0xc002b109
c001019c:	e8 46 2c 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00101a1:	83 c4 10             	add    esp,0x10
c00101a4:	e9 ef fe ff ff       	jmp    c0010098 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101a9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101b5:	39 ea                	cmp    edx,ebp
c00101b7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101bb:	0f 82 d7 fe ff ff    	jb     c0010098 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c1:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101c6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101ca:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101ce:	0f 83 c4 fe ff ff    	jae    c0010098 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d4:	39 ee                	cmp    esi,ebp
c00101d6:	89 f8                	mov    eax,edi
c00101d8:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101dc:	0f 83 78 ff ff ff    	jae    c001015a <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101ea:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00101ee:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00101f2:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00101f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00101fe:	e9 57 ff ff ff       	jmp    c001015a <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010203:	83 ec 0c             	sub    esp,0xc
c0010206:	68 fb b0 02 c0       	push   0xc002b0fb
c001020b:	e8 1f a7 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0010210:	83 c4 10             	add    esp,0x10
c0010213:	bb 40 01 00 00       	mov    ebx,0x140
c0010218:	83 ec 08             	sub    esp,0x8
c001021b:	6a 00                	push   0x0
c001021d:	53                   	push   ebx
c001021e:	43                   	inc    ebx
c001021f:	e8 ad fb ff ff       	call   c000fdd1 <Phys::setPageState(unsigned long, bool)>
c0010224:	ff 05 34 f4 02 c0    	inc    DWORD PTR ds:0xc002f434
c001022a:	83 c4 10             	add    esp,0x10
c001022d:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010233:	75 e3                	jne    c0010218 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010235:	83 c4 3c             	add    esp,0x3c
c0010238:	5b                   	pop    ebx
c0010239:	5e                   	pop    esi
c001023a:	5f                   	pop    edi
c001023b:	5d                   	pop    ebp
c001023c:	c3                   	ret    
c001023d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010245:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001024d:	e9 d7 fe ff ff       	jmp    c0010129 <Phys::physicalMemorySetup(unsigned int)+0x107>

c0010252 <Pipe::isAtty()>:
c0010252:	31 c0                	xor    eax,eax
c0010254:	c3                   	ret    
c0010255:	90                   	nop

c0010256 <Pipe::~Pipe()>:
c0010256:	83 ec 0c             	sub    esp,0xc
c0010259:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c001025e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010262:	89 10                	mov    DWORD PTR [eax],edx
c0010264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010268:	83 ec 0c             	sub    esp,0xc
c001026b:	50                   	push   eax
c001026c:	e8 0f 15 00 00       	call   c0011780 <UnixFile::~UnixFile()>
c0010271:	83 c4 10             	add    esp,0x10
c0010274:	90                   	nop
c0010275:	83 c4 0c             	add    esp,0xc
c0010278:	c3                   	ret    
c0010279:	90                   	nop

c001027a <Pipe::~Pipe()>:
c001027a:	83 ec 0c             	sub    esp,0xc
c001027d:	83 ec 0c             	sub    esp,0xc
c0010280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010284:	e8 cd ff ff ff       	call   c0010256 <Pipe::~Pipe()>
c0010289:	83 c4 10             	add    esp,0x10
c001028c:	83 ec 08             	sub    esp,0x8
c001028f:	6a 20                	push   0x20
c0010291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010295:	e8 6d 2a 00 00       	call   c0012d07 <operator delete(void*, unsigned long)>
c001029a:	83 c4 10             	add    esp,0x10
c001029d:	83 c4 0c             	add    esp,0xc
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <Pipe::read(unsigned long long, void*, int*)>:
c00102a2:	55                   	push   ebp
c00102a3:	57                   	push   edi
c00102a4:	56                   	push   esi
c00102a5:	53                   	push   ebx
c00102a6:	83 ec 1c             	sub    esp,0x1c
c00102a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102ad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102b5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102b8:	89 c8                	mov    eax,ecx
c00102ba:	99                   	cdq    
c00102bb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102bf:	74 24                	je     c00102e5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00102c1:	39 f9                	cmp    ecx,edi
c00102c3:	89 d1                	mov    ecx,edx
c00102c5:	19 f1                	sbb    ecx,esi
c00102c7:	73 1c                	jae    c00102e5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00102c9:	fa                   	cli    
c00102ca:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c00102d0:	e8 0d e4 00 00       	call   c001e6e2 <schedule()>
c00102d5:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c00102da:	48                   	dec    eax
c00102db:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c00102e0:	75 d3                	jne    c00102b5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102e2:	fb                   	sti    
c00102e3:	eb d0                	jmp    c00102b5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102e5:	39 f8                	cmp    eax,edi
c00102e7:	89 d1                	mov    ecx,edx
c00102e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00102ec:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00102f0:	19 f1                	sbb    ecx,esi
c00102f2:	73 07                	jae    c00102fb <Pipe::read(unsigned long long, void*, int*)+0x59>
c00102f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00102f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00102fb:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00102fe:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010301:	29 f7                	sub    edi,esi
c0010303:	89 f8                	mov    eax,edi
c0010305:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010309:	99                   	cdq    
c001030a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001030d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010311:	19 d0                	sbb    eax,edx
c0010313:	73 07                	jae    c001031c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0010315:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010318:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001031c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001031f:	89 ea                	mov    edx,ebp
c0010321:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001032a:	74 0d                	je     c0010339 <Pipe::read(unsigned long long, void*, int*)+0x97>
c001032c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001032f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010333:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010337:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010339:	85 d2                	test   edx,edx
c001033b:	74 11                	je     c001034e <Pipe::read(unsigned long long, void*, int*)+0xac>
c001033d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010341:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010344:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010348:	89 d1                	mov    ecx,edx
c001034a:	89 c7                	mov    edi,eax
c001034c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001034e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010351:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010354:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010357:	99                   	cdq    
c0010358:	89 f7                	mov    edi,esi
c001035a:	03 04 24             	add    eax,DWORD PTR [esp]
c001035d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010361:	c1 ff 1f             	sar    edi,0x1f
c0010364:	57                   	push   edi
c0010365:	56                   	push   esi
c0010366:	52                   	push   edx
c0010367:	50                   	push   eax
c0010368:	e8 97 74 01 00       	call   c0027804 <__umoddi3>
c001036d:	83 c4 10             	add    esp,0x10
c0010370:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010373:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010378:	75 10                	jne    c001038a <Pipe::read(unsigned long long, void*, int*)+0xe8>
c001037a:	83 ec 0c             	sub    esp,0xc
c001037d:	68 75 b1 02 c0       	push   0xc002b175
c0010382:	e8 a8 a5 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0010387:	83 c4 10             	add    esp,0x10
c001038a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001038e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010391:	89 10                	mov    DWORD PTR [eax],edx
c0010393:	83 c4 1c             	add    esp,0x1c
c0010396:	31 c0                	xor    eax,eax
c0010398:	5b                   	pop    ebx
c0010399:	5e                   	pop    esi
c001039a:	5f                   	pop    edi
c001039b:	5d                   	pop    ebp
c001039c:	c3                   	ret    
c001039d:	90                   	nop

c001039e <Pipe::write(unsigned long long, void*, int*)>:
c001039e:	55                   	push   ebp
c001039f:	57                   	push   edi
c00103a0:	56                   	push   esi
c00103a1:	53                   	push   ebx
c00103a2:	83 ec 1c             	sub    esp,0x1c
c00103a5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103ad:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00103b0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00103b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103bb:	89 d8                	mov    eax,ebx
c00103bd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00103c0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00103c4:	89 d6                	mov    esi,edx
c00103c6:	89 d7                	mov    edi,edx
c00103c8:	c1 ff 1f             	sar    edi,0x1f
c00103cb:	03 34 24             	add    esi,DWORD PTR [esp]
c00103ce:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00103d2:	c1 f8 1f             	sar    eax,0x1f
c00103d5:	39 f3                	cmp    ebx,esi
c00103d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103df:	19 f8                	sbb    eax,edi
c00103e1:	b8 01 00 00 00       	mov    eax,0x1
c00103e6:	72 6e                	jb     c0010456 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00103e8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103eb:	01 d0                	add    eax,edx
c00103ed:	99                   	cdq    
c00103ee:	f7 fb                	idiv   ebx
c00103f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f4:	29 d3                	sub    ebx,edx
c00103f6:	89 d7                	mov    edi,edx
c00103f8:	89 de                	mov    esi,ebx
c00103fa:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00103fd:	c1 fb 1f             	sar    ebx,0x1f
c0010400:	39 f2                	cmp    edx,esi
c0010402:	19 d8                	sbb    eax,ebx
c0010404:	b8 00 00 00 00       	mov    eax,0x0
c0010409:	72 04                	jb     c001040f <Pipe::write(unsigned long long, void*, int*)+0x71>
c001040b:	89 d0                	mov    eax,edx
c001040d:	29 f0                	sub    eax,esi
c001040f:	89 d3                	mov    ebx,edx
c0010411:	29 c3                	sub    ebx,eax
c0010413:	74 0b                	je     c0010420 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010415:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010418:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001041c:	89 d9                	mov    ecx,ebx
c001041e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010420:	85 c0                	test   eax,eax
c0010422:	74 0d                	je     c0010431 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010424:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010428:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001042b:	89 de                	mov    esi,ebx
c001042d:	89 c1                	mov    ecx,eax
c001042f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010431:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010434:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010439:	75 10                	jne    c001044b <Pipe::write(unsigned long long, void*, int*)+0xad>
c001043b:	83 ec 0c             	sub    esp,0xc
c001043e:	68 91 b1 02 c0       	push   0xc002b191
c0010443:	e8 e7 a4 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0010448:	83 c4 10             	add    esp,0x10
c001044b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001044f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010452:	89 08                	mov    DWORD PTR [eax],ecx
c0010454:	31 c0                	xor    eax,eax
c0010456:	83 c4 1c             	add    esp,0x1c
c0010459:	5b                   	pop    ebx
c001045a:	5e                   	pop    esi
c001045b:	5f                   	pop    edi
c001045c:	5d                   	pop    ebp
c001045d:	c3                   	ret    

c001045e <Pipe::Pipe(int)>:
c001045e:	83 ec 0c             	sub    esp,0xc
c0010461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010465:	83 ec 08             	sub    esp,0x8
c0010468:	6a 00                	push   0x0
c001046a:	50                   	push   eax
c001046b:	e8 2e 11 00 00       	call   c001159e <UnixFile::UnixFile(int)>
c0010470:	83 c4 10             	add    esp,0x10
c0010473:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c0010478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047c:	89 10                	mov    DWORD PTR [eax],edx
c001047e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010486:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010498:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001049f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104a3:	83 ec 0c             	sub    esp,0xc
c00104a6:	50                   	push   eax
c00104a7:	e8 e0 f3 ff ff       	call   c000f88c <malloc>
c00104ac:	83 c4 10             	add    esp,0x10
c00104af:	89 c2                	mov    edx,eax
c00104b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104c0:	90                   	nop
c00104c1:	83 c4 0c             	add    esp,0xc
c00104c4:	c3                   	ret    
c00104c5:	90                   	nop

c00104c6 <VgaText::isAtty()>:
c00104c6:	b0 01                	mov    al,0x1
c00104c8:	c3                   	ret    
c00104c9:	90                   	nop

c00104ca <VgaText::~VgaText()>:
c00104ca:	83 ec 0c             	sub    esp,0xc
c00104cd:	ba 74 b2 02 c0       	mov    edx,0xc002b274
c00104d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d6:	89 10                	mov    DWORD PTR [eax],edx
c00104d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dc:	83 ec 0c             	sub    esp,0xc
c00104df:	50                   	push   eax
c00104e0:	e8 9b 12 00 00       	call   c0011780 <UnixFile::~UnixFile()>
c00104e5:	83 c4 10             	add    esp,0x10
c00104e8:	90                   	nop
c00104e9:	83 c4 0c             	add    esp,0xc
c00104ec:	c3                   	ret    
c00104ed:	90                   	nop

c00104ee <VgaText::~VgaText()>:
c00104ee:	83 ec 0c             	sub    esp,0xc
c00104f1:	83 ec 0c             	sub    esp,0xc
c00104f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f8:	e8 cd ff ff ff       	call   c00104ca <VgaText::~VgaText()>
c00104fd:	83 c4 10             	add    esp,0x10
c0010500:	83 ec 08             	sub    esp,0x8
c0010503:	68 c4 02 00 00       	push   0x2c4
c0010508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050c:	e8 f6 27 00 00       	call   c0012d07 <operator delete(void*, unsigned long)>
c0010511:	83 c4 10             	add    esp,0x10
c0010514:	83 c4 0c             	add    esp,0xc
c0010517:	c3                   	ret    

c0010518 <VgaText::read(unsigned long long, void*, int*)>:
c0010518:	83 ec 10             	sub    esp,0x10
c001051b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001051f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010527:	e8 70 5d 00 00       	call   c001629c <readKeyboard(VgaText*, char*, unsigned long)>
c001052c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010530:	89 02                	mov    DWORD PTR [edx],eax
c0010532:	31 c0                	xor    eax,eax
c0010534:	83 c4 1c             	add    esp,0x1c
c0010537:	c3                   	ret    

c0010538 <setTerminalScrollLock(bool)>:
c0010538:	c3                   	ret    

c0010539 <addToTerminalCycle(VgaText*)>:
c0010539:	8b 15 c0 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4c0
c001053f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010543:	85 d2                	test   edx,edx
c0010545:	75 09                	jne    c0010550 <addToTerminalCycle(VgaText*)+0x17>
c0010547:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001054a:	a3 c0 f4 02 c0       	mov    ds:0xc002f4c0,eax
c001054f:	c3                   	ret    
c0010550:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010553:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010556:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010559:	c3                   	ret    

c001055a <installVgaTextImplementation()>:
c001055a:	83 ec 10             	sub    esp,0x10
c001055d:	6a 20                	push   0x20
c001055f:	6a 00                	push   0x0
c0010561:	68 a0 f4 02 c0       	push   0xc002f4a0
c0010566:	e8 e5 01 ff ff       	call   c0000750 <memset>
c001056b:	83 c4 1c             	add    esp,0x1c
c001056e:	c3                   	ret    

c001056f <scrollTerminalScrollLock(int)>:
c001056f:	c3                   	ret    

c0010570 <VgaText::load()>:
c0010570:	53                   	push   ebx
c0010571:	31 c0                	xor    eax,eax
c0010573:	83 ec 58             	sub    esp,0x58
c0010576:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001057a:	89 e2                	mov    edx,esp
c001057c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010580:	40                   	inc    eax
c0010581:	83 f8 50             	cmp    eax,0x50
c0010584:	75 f6                	jne    c001057c <VgaText::load()+0xc>
c0010586:	31 c0                	xor    eax,eax
c0010588:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001058f:	84 c9                	test   cl,cl
c0010591:	74 06                	je     c0010599 <VgaText::load()+0x29>
c0010593:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010596:	40                   	inc    eax
c0010597:	eb ef                	jmp    c0010588 <VgaText::load()+0x18>
c0010599:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001059c:	85 c0                	test   eax,eax
c001059e:	74 09                	je     c00105a9 <VgaText::load()+0x39>
c00105a0:	51                   	push   ecx
c00105a1:	51                   	push   ecx
c00105a2:	52                   	push   edx
c00105a3:	53                   	push   ebx
c00105a4:	ff d0                	call   eax
c00105a6:	83 c4 10             	add    esp,0x10
c00105a9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00105ac:	85 c0                	test   eax,eax
c00105ae:	74 09                	je     c00105b9 <VgaText::load()+0x49>
c00105b0:	83 ec 0c             	sub    esp,0xc
c00105b3:	53                   	push   ebx
c00105b4:	ff d0                	call   eax
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	83 c4 58             	add    esp,0x58
c00105bc:	5b                   	pop    ebx
c00105bd:	c3                   	ret    

c00105be <VgaText::updateCursor()>:
c00105be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c2:	39 05 c4 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4c4,eax
c00105c8:	75 09                	jne    c00105d3 <VgaText::updateCursor()+0x15>
c00105ca:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00105cd:	85 c0                	test   eax,eax
c00105cf:	74 02                	je     c00105d3 <VgaText::updateCursor()+0x15>
c00105d1:	ff e0                	jmp    eax
c00105d3:	c3                   	ret    

c00105d4 <VgaText::showCursor(bool)>:
c00105d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105dc:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00105df:	c3                   	ret    

c00105e0 <VgaText::disableBlink(bool)>:
c00105e0:	56                   	push   esi
c00105e1:	53                   	push   ebx
c00105e2:	51                   	push   ecx
c00105e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105eb:	39 1d c4 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4c4,ebx
c00105f1:	75 15                	jne    c0010608 <VgaText::disableBlink(bool)+0x28>
c00105f3:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00105f6:	85 c0                	test   eax,eax
c00105f8:	74 0e                	je     c0010608 <VgaText::disableBlink(bool)+0x28>
c00105fa:	89 f1                	mov    ecx,esi
c00105fc:	52                   	push   edx
c00105fd:	52                   	push   edx
c00105fe:	0f b6 d1             	movzx  edx,cl
c0010601:	52                   	push   edx
c0010602:	53                   	push   ebx
c0010603:	ff d0                	call   eax
c0010605:	83 c4 10             	add    esp,0x10
c0010608:	89 f0                	mov    eax,esi
c001060a:	83 f0 01             	xor    eax,0x1
c001060d:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010610:	58                   	pop    eax
c0010611:	5b                   	pop    ebx
c0010612:	5e                   	pop    esi
c0010613:	c3                   	ret    

c0010614 <VgaText::doANSI_SGR(int)>:
c0010614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061c:	85 d2                	test   edx,edx
c001061e:	75 0b                	jne    c001062b <VgaText::doANSI_SGR(int)+0x17>
c0010620:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010623:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010626:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010629:	eb 59                	jmp    c0010684 <VgaText::doANSI_SGR(int)+0x70>
c001062b:	83 fa 07             	cmp    edx,0x7
c001062e:	75 0b                	jne    c001063b <VgaText::doANSI_SGR(int)+0x27>
c0010630:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010633:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010636:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010639:	eb 49                	jmp    c0010684 <VgaText::doANSI_SGR(int)+0x70>
c001063b:	83 fa 1b             	cmp    edx,0x1b
c001063e:	74 e0                	je     c0010620 <VgaText::doANSI_SGR(int)+0xc>
c0010640:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010643:	83 f9 07             	cmp    ecx,0x7
c0010646:	77 09                	ja     c0010651 <VgaText::doANSI_SGR(int)+0x3d>
c0010648:	8b 14 8d 40 e3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1cc0]
c001064f:	eb 20                	jmp    c0010671 <VgaText::doANSI_SGR(int)+0x5d>
c0010651:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010654:	83 f9 07             	cmp    ecx,0x7
c0010657:	77 09                	ja     c0010662 <VgaText::doANSI_SGR(int)+0x4e>
c0010659:	8b 14 8d 40 e3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1cc0]
c0010660:	eb 22                	jmp    c0010684 <VgaText::doANSI_SGR(int)+0x70>
c0010662:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010665:	83 f9 07             	cmp    ecx,0x7
c0010668:	77 0b                	ja     c0010675 <VgaText::doANSI_SGR(int)+0x61>
c001066a:	8b 14 95 f8 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e08]
c0010671:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010674:	c3                   	ret    
c0010675:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010678:	83 f9 07             	cmp    ecx,0x7
c001067b:	77 0a                	ja     c0010687 <VgaText::doANSI_SGR(int)+0x73>
c001067d:	8b 14 95 d0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e30]
c0010684:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010687:	c3                   	ret    

c0010688 <VgaText::setDefaultBgColour(VgaColour)>:
c0010688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001068c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010690:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010693:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010696:	c3                   	ret    
c0010697:	90                   	nop

c0010698 <VgaText::setDefaultFgColour(VgaColour)>:
c0010698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001069c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106a0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106a3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106a6:	c3                   	ret    
c00106a7:	90                   	nop

c00106a8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00106a8:	53                   	push   ebx
c00106a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00106b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00106b5:	51                   	push   ecx
c00106b6:	e8 cd ff ff ff       	call   c0010688 <VgaText::setDefaultBgColour(VgaColour)>
c00106bb:	58                   	pop    eax
c00106bc:	5a                   	pop    edx
c00106bd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00106c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00106c5:	5b                   	pop    ebx
c00106c6:	eb d0                	jmp    c0010698 <VgaText::setDefaultFgColour(VgaColour)>

c00106c8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00106c8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00106cc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00106d1:	83 e0 0f             	and    eax,0xf
c00106d4:	c1 e2 04             	shl    edx,0x4
c00106d7:	09 d0                	or     eax,edx
c00106d9:	c3                   	ret    

c00106da <VgaText::scrollScreen()>:
c00106da:	55                   	push   ebp
c00106db:	b9 01 00 00 00       	mov    ecx,0x1
c00106e0:	57                   	push   edi
c00106e1:	56                   	push   esi
c00106e2:	53                   	push   ebx
c00106e3:	83 ec 0c             	sub    esp,0xc
c00106e6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106ea:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00106f0:	31 ff                	xor    edi,edi
c00106f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00106f5:	83 f9 17             	cmp    ecx,0x17
c00106f8:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00106fb:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010702:	75 27                	jne    c001072b <VgaText::scrollScreen()+0x51>
c0010704:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010707:	01 f5                	add    ebp,esi
c0010709:	f7 c7 01 00 00 00    	test   edi,0x1
c001070f:	74 16                	je     c0010727 <VgaText::scrollScreen()+0x4d>
c0010711:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010715:	50                   	push   eax
c0010716:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001071a:	50                   	push   eax
c001071b:	e8 a8 ff ff ff       	call   c00106c8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010720:	5a                   	pop    edx
c0010721:	5a                   	pop    edx
c0010722:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010725:	eb 04                	jmp    c001072b <VgaText::scrollScreen()+0x51>
c0010727:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001072b:	47                   	inc    edi
c001072c:	46                   	inc    esi
c001072d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010733:	75 bd                	jne    c00106f2 <VgaText::scrollScreen()+0x18>
c0010735:	41                   	inc    ecx
c0010736:	83 f9 18             	cmp    ecx,0x18
c0010739:	75 af                	jne    c00106ea <VgaText::scrollScreen()+0x10>
c001073b:	39 1d c4 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4c4,ebx
c0010741:	75 1b                	jne    c001075e <VgaText::scrollScreen()+0x84>
c0010743:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010747:	74 05                	je     c001074e <VgaText::scrollScreen()+0x74>
c0010749:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001074c:	eb 10                	jmp    c001075e <VgaText::scrollScreen()+0x84>
c001074e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010751:	85 c0                	test   eax,eax
c0010753:	74 09                	je     c001075e <VgaText::scrollScreen()+0x84>
c0010755:	83 ec 0c             	sub    esp,0xc
c0010758:	53                   	push   ebx
c0010759:	ff d0                	call   eax
c001075b:	83 c4 10             	add    esp,0x10
c001075e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010762:	83 c4 0c             	add    esp,0xc
c0010765:	5b                   	pop    ebx
c0010766:	5e                   	pop    esi
c0010767:	5f                   	pop    edi
c0010768:	5d                   	pop    ebp
c0010769:	e9 50 fe ff ff       	jmp    c00105be <VgaText::updateCursor()>

c001076e <VgaText::combineCharAndColour(char, unsigned char)>:
c001076e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010773:	c1 e0 08             	shl    eax,0x8
c0010776:	89 c2                	mov    edx,eax
c0010778:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001077d:	09 d0                	or     eax,edx
c001077f:	c3                   	ret    

c0010780 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010780:	56                   	push   esi
c0010781:	53                   	push   ebx
c0010782:	51                   	push   ecx
c0010783:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010787:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001078c:	50                   	push   eax
c001078d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010792:	50                   	push   eax
c0010793:	e8 30 ff ff ff       	call   c00106c8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010798:	5b                   	pop    ebx
c0010799:	0f b6 c0             	movzx  eax,al
c001079c:	5e                   	pop    esi
c001079d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107a2:	50                   	push   eax
c00107a3:	53                   	push   ebx
c00107a4:	e8 c5 ff ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c00107a9:	5a                   	pop    edx
c00107aa:	5e                   	pop    esi
c00107ab:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00107ae:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00107b4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00107b8:	0f b7 d2             	movzx  edx,dx
c00107bb:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00107bf:	39 0d c4 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4c4,ecx
c00107c5:	75 10                	jne    c00107d7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00107c7:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00107ca:	85 c0                	test   eax,eax
c00107cc:	74 09                	je     c00107d7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00107ce:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00107d2:	5a                   	pop    edx
c00107d3:	5b                   	pop    ebx
c00107d4:	5e                   	pop    esi
c00107d5:	ff e0                	jmp    eax
c00107d7:	58                   	pop    eax
c00107d8:	5b                   	pop    ebx
c00107d9:	5e                   	pop    esi
c00107da:	c3                   	ret    
c00107db:	90                   	nop

c00107dc <VgaText::getCursorX()>:
c00107dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00107e3:	c3                   	ret    

c00107e4 <VgaText::getCursorY()>:
c00107e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107e8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00107eb:	c3                   	ret    

c00107ec <VgaText::setCursor(int, int)>:
c00107ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107f4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00107f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00107fb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00107fe:	e9 bb fd ff ff       	jmp    c00105be <VgaText::updateCursor()>
c0010803:	90                   	nop

c0010804 <VgaText::setCursorX(int)>:
c0010804:	83 ec 10             	sub    esp,0x10
c0010807:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001080b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001080e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010812:	50                   	push   eax
c0010813:	e8 d4 ff ff ff       	call   c00107ec <VgaText::setCursor(int, int)>
c0010818:	83 c4 1c             	add    esp,0x1c
c001081b:	c3                   	ret    

c001081c <VgaText::setCursorY(int)>:
c001081c:	83 ec 10             	sub    esp,0x10
c001081f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010823:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010827:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001082a:	50                   	push   eax
c001082b:	e8 bc ff ff ff       	call   c00107ec <VgaText::setCursor(int, int)>
c0010830:	83 c4 1c             	add    esp,0x1c
c0010833:	c3                   	ret    

c0010834 <VgaText::incrementCursor(bool)>:
c0010834:	56                   	push   esi
c0010835:	53                   	push   ebx
c0010836:	51                   	push   ecx
c0010837:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001083b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001083f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010842:	40                   	inc    eax
c0010843:	83 f8 50             	cmp    eax,0x50
c0010846:	74 05                	je     c001084d <VgaText::incrementCursor(bool)+0x19>
c0010848:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001084b:	eb 24                	jmp    c0010871 <VgaText::incrementCursor(bool)+0x3d>
c001084d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010850:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010857:	8d 50 01             	lea    edx,[eax+0x1]
c001085a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001085d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010860:	75 0f                	jne    c0010871 <VgaText::incrementCursor(bool)+0x3d>
c0010862:	83 ec 0c             	sub    esp,0xc
c0010865:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010868:	53                   	push   ebx
c0010869:	e8 6c fe ff ff       	call   c00106da <VgaText::scrollScreen()>
c001086e:	83 c4 10             	add    esp,0x10
c0010871:	89 f0                	mov    eax,esi
c0010873:	84 c0                	test   al,al
c0010875:	74 0c                	je     c0010883 <VgaText::incrementCursor(bool)+0x4f>
c0010877:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001087b:	5a                   	pop    edx
c001087c:	5b                   	pop    ebx
c001087d:	5e                   	pop    esi
c001087e:	e9 3b fd ff ff       	jmp    c00105be <VgaText::updateCursor()>
c0010883:	58                   	pop    eax
c0010884:	5b                   	pop    ebx
c0010885:	5e                   	pop    esi
c0010886:	c3                   	ret    
c0010887:	90                   	nop

c0010888 <VgaText::updateRAMUsageDisplay(int)>:
c0010888:	56                   	push   esi
c0010889:	8b 35 20 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e320
c001088f:	53                   	push   ebx
c0010890:	bb 0a 00 00 00       	mov    ebx,0xa
c0010895:	6a 0f                	push   0xf
c0010897:	6a 00                	push   0x0
c0010899:	e8 2a fe ff ff       	call   c00106c8 <VgaText::combineColours(unsigned char, unsigned char)>
c001089e:	5a                   	pop    edx
c001089f:	59                   	pop    ecx
c00108a0:	0f b6 c8             	movzx  ecx,al
c00108a3:	51                   	push   ecx
c00108a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a8:	99                   	cdq    
c00108a9:	f7 fb                	idiv   ebx
c00108ab:	89 d3                	mov    ebx,edx
c00108ad:	83 c0 30             	add    eax,0x30
c00108b0:	83 c3 30             	add    ebx,0x30
c00108b3:	0f be c0             	movsx  eax,al
c00108b6:	0f b6 db             	movzx  ebx,bl
c00108b9:	50                   	push   eax
c00108ba:	e8 af fe ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c00108bf:	5a                   	pop    edx
c00108c0:	5a                   	pop    edx
c00108c1:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00108c8:	51                   	push   ecx
c00108c9:	53                   	push   ebx
c00108ca:	e8 9f fe ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c00108cf:	5b                   	pop    ebx
c00108d0:	5a                   	pop    edx
c00108d1:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00108d8:	51                   	push   ecx
c00108d9:	6a 25                	push   0x25
c00108db:	e8 8e fe ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c00108e0:	59                   	pop    ecx
c00108e1:	5b                   	pop    ebx
c00108e2:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00108e9:	5b                   	pop    ebx
c00108ea:	5e                   	pop    esi
c00108eb:	c3                   	ret    

c00108ec <VgaText::updateDiskUsage()>:
c00108ec:	55                   	push   ebp
c00108ed:	bd 10 27 00 00       	mov    ebp,0x2710
c00108f2:	57                   	push   edi
c00108f3:	8b 3d 20 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e320
c00108f9:	56                   	push   esi
c00108fa:	53                   	push   ebx
c00108fb:	6a 0f                	push   0xf
c00108fd:	6a 00                	push   0x0
c00108ff:	e8 c4 fd ff ff       	call   c00106c8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010904:	5a                   	pop    edx
c0010905:	0f b6 d8             	movzx  ebx,al
c0010908:	59                   	pop    ecx
c0010909:	8b 35 58 37 03 c0    	mov    esi,DWORD PTR ds:0xc0033758
c001090f:	53                   	push   ebx
c0010910:	b9 0a 00 00 00       	mov    ecx,0xa
c0010915:	89 f0                	mov    eax,esi
c0010917:	99                   	cdq    
c0010918:	f7 fd                	idiv   ebp
c001091a:	99                   	cdq    
c001091b:	f7 f9                	idiv   ecx
c001091d:	8d 42 30             	lea    eax,[edx+0x30]
c0010920:	0f b6 c0             	movzx  eax,al
c0010923:	50                   	push   eax
c0010924:	e8 45 fe ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c0010929:	5d                   	pop    ebp
c001092a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001092f:	5a                   	pop    edx
c0010930:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010934:	53                   	push   ebx
c0010935:	89 f0                	mov    eax,esi
c0010937:	99                   	cdq    
c0010938:	f7 fd                	idiv   ebp
c001093a:	99                   	cdq    
c001093b:	f7 f9                	idiv   ecx
c001093d:	8d 42 30             	lea    eax,[edx+0x30]
c0010940:	0f b6 c0             	movzx  eax,al
c0010943:	50                   	push   eax
c0010944:	e8 25 fe ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c0010949:	5d                   	pop    ebp
c001094a:	bd 64 00 00 00       	mov    ebp,0x64
c001094f:	5a                   	pop    edx
c0010950:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010957:	53                   	push   ebx
c0010958:	89 f0                	mov    eax,esi
c001095a:	99                   	cdq    
c001095b:	f7 fd                	idiv   ebp
c001095d:	99                   	cdq    
c001095e:	f7 f9                	idiv   ecx
c0010960:	8d 42 30             	lea    eax,[edx+0x30]
c0010963:	0f b6 c0             	movzx  eax,al
c0010966:	50                   	push   eax
c0010967:	e8 02 fe ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c001096c:	5d                   	pop    ebp
c001096d:	5a                   	pop    edx
c001096e:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010975:	53                   	push   ebx
c0010976:	89 f0                	mov    eax,esi
c0010978:	99                   	cdq    
c0010979:	f7 f9                	idiv   ecx
c001097b:	89 d6                	mov    esi,edx
c001097d:	99                   	cdq    
c001097e:	f7 f9                	idiv   ecx
c0010980:	8d 42 30             	lea    eax,[edx+0x30]
c0010983:	0f b6 c0             	movzx  eax,al
c0010986:	50                   	push   eax
c0010987:	e8 e2 fd ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c001098c:	5d                   	pop    ebp
c001098d:	5a                   	pop    edx
c001098e:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010995:	53                   	push   ebx
c0010996:	8d 46 30             	lea    eax,[esi+0x30]
c0010999:	0f b6 f0             	movzx  esi,al
c001099c:	56                   	push   esi
c001099d:	e8 cc fd ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c00109a2:	5e                   	pop    esi
c00109a3:	8b 35 54 37 03 c0    	mov    esi,DWORD PTR ds:0xc0033754
c00109a9:	5d                   	pop    ebp
c00109aa:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00109b1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109b6:	53                   	push   ebx
c00109b7:	89 f0                	mov    eax,esi
c00109b9:	99                   	cdq    
c00109ba:	f7 fd                	idiv   ebp
c00109bc:	99                   	cdq    
c00109bd:	f7 f9                	idiv   ecx
c00109bf:	8d 42 30             	lea    eax,[edx+0x30]
c00109c2:	0f b6 c0             	movzx  eax,al
c00109c5:	50                   	push   eax
c00109c6:	e8 a3 fd ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c00109cb:	5a                   	pop    edx
c00109cc:	5d                   	pop    ebp
c00109cd:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00109d4:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109d9:	53                   	push   ebx
c00109da:	89 f0                	mov    eax,esi
c00109dc:	99                   	cdq    
c00109dd:	f7 fd                	idiv   ebp
c00109df:	99                   	cdq    
c00109e0:	f7 f9                	idiv   ecx
c00109e2:	8d 42 30             	lea    eax,[edx+0x30]
c00109e5:	0f b6 c0             	movzx  eax,al
c00109e8:	50                   	push   eax
c00109e9:	e8 80 fd ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c00109ee:	5a                   	pop    edx
c00109ef:	5d                   	pop    ebp
c00109f0:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c00109f7:	bd 64 00 00 00       	mov    ebp,0x64
c00109fc:	53                   	push   ebx
c00109fd:	89 f0                	mov    eax,esi
c00109ff:	99                   	cdq    
c0010a00:	f7 fd                	idiv   ebp
c0010a02:	99                   	cdq    
c0010a03:	f7 f9                	idiv   ecx
c0010a05:	83 c2 30             	add    edx,0x30
c0010a08:	0f b6 d2             	movzx  edx,dl
c0010a0b:	52                   	push   edx
c0010a0c:	e8 5d fd ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a11:	5a                   	pop    edx
c0010a12:	5d                   	pop    ebp
c0010a13:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a1a:	53                   	push   ebx
c0010a1b:	89 f0                	mov    eax,esi
c0010a1d:	99                   	cdq    
c0010a1e:	f7 f9                	idiv   ecx
c0010a20:	89 d6                	mov    esi,edx
c0010a22:	99                   	cdq    
c0010a23:	f7 f9                	idiv   ecx
c0010a25:	8d 42 30             	lea    eax,[edx+0x30]
c0010a28:	0f b6 c0             	movzx  eax,al
c0010a2b:	50                   	push   eax
c0010a2c:	e8 3d fd ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a31:	5a                   	pop    edx
c0010a32:	59                   	pop    ecx
c0010a33:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a3a:	53                   	push   ebx
c0010a3b:	8d 46 30             	lea    eax,[esi+0x30]
c0010a3e:	0f b6 f0             	movzx  esi,al
c0010a41:	56                   	push   esi
c0010a42:	e8 27 fd ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a47:	5b                   	pop    ebx
c0010a48:	5e                   	pop    esi
c0010a49:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010a50:	5b                   	pop    ebx
c0010a51:	5e                   	pop    esi
c0010a52:	5f                   	pop    edi
c0010a53:	5d                   	pop    ebp
c0010a54:	c3                   	ret    
c0010a55:	90                   	nop

c0010a56 <VgaText::updateTitle()>:
c0010a56:	53                   	push   ebx
c0010a57:	31 c0                	xor    eax,eax
c0010a59:	83 ec 58             	sub    esp,0x58
c0010a5c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010a60:	89 e1                	mov    ecx,esp
c0010a62:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010a66:	40                   	inc    eax
c0010a67:	83 f8 50             	cmp    eax,0x50
c0010a6a:	75 f6                	jne    c0010a62 <VgaText::updateTitle()+0xc>
c0010a6c:	31 c0                	xor    eax,eax
c0010a6e:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010a75:	84 db                	test   bl,bl
c0010a77:	74 06                	je     c0010a7f <VgaText::updateTitle()+0x29>
c0010a79:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010a7c:	40                   	inc    eax
c0010a7d:	eb ef                	jmp    c0010a6e <VgaText::updateTitle()+0x18>
c0010a7f:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010a82:	85 c0                	test   eax,eax
c0010a84:	74 09                	je     c0010a8f <VgaText::updateTitle()+0x39>
c0010a86:	53                   	push   ebx
c0010a87:	53                   	push   ebx
c0010a88:	51                   	push   ecx
c0010a89:	52                   	push   edx
c0010a8a:	ff d0                	call   eax
c0010a8c:	83 c4 10             	add    esp,0x10
c0010a8f:	e8 58 fe ff ff       	call   c00108ec <VgaText::updateDiskUsage()>
c0010a94:	83 c4 58             	add    esp,0x58
c0010a97:	5b                   	pop    ebx
c0010a98:	c3                   	ret    
c0010a99:	90                   	nop

c0010a9a <VgaText::setTitleTextColour(VgaColour)>:
c0010a9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aa2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010aa5:	eb af                	jmp    c0010a56 <VgaText::updateTitle()>
c0010aa7:	90                   	nop

c0010aa8 <VgaText::setTitleColour(VgaColour)>:
c0010aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ab0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ab3:	eb a1                	jmp    c0010a56 <VgaText::updateTitle()>
c0010ab5:	90                   	nop

c0010ab6 <VgaText::setTitle(char*)>:
c0010ab6:	53                   	push   ebx
c0010ab7:	83 ec 10             	sub    esp,0x10
c0010aba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ac2:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010ac8:	50                   	push   eax
c0010ac9:	e8 3e fd fe ff       	call   c000080c <strcpy>
c0010ace:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010ad2:	83 c4 18             	add    esp,0x18
c0010ad5:	5b                   	pop    ebx
c0010ad6:	e9 7b ff ff ff       	jmp    c0010a56 <VgaText::updateTitle()>
c0010adb:	90                   	nop

c0010adc <VgaText::decrementCursor(bool)>:
c0010adc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010ae0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010ae4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010ae7:	85 c0                	test   eax,eax
c0010ae9:	74 04                	je     c0010aef <VgaText::decrementCursor(bool)+0x13>
c0010aeb:	48                   	dec    eax
c0010aec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010aef:	84 c9                	test   cl,cl
c0010af1:	74 09                	je     c0010afc <VgaText::decrementCursor(bool)+0x20>
c0010af3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010af7:	e9 c2 fa ff ff       	jmp    c00105be <VgaText::updateCursor()>
c0010afc:	c3                   	ret    
c0010afd:	90                   	nop

c0010afe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010afe:	53                   	push   ebx
c0010aff:	83 ec 08             	sub    esp,0x8
c0010b02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b0e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b12:	3c 07                	cmp    al,0x7
c0010b14:	75 2a                	jne    c0010b40 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b16:	a1 78 f5 02 c0       	mov    eax,ds:0xc002f578
c0010b1b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b23:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b2b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b37:	83 c4 08             	add    esp,0x8
c0010b3a:	5b                   	pop    ebx
c0010b3b:	e9 b4 30 00 00       	jmp    c0013bf4 <Buzzer::beep(int, int, bool)>
c0010b40:	3c 0d                	cmp    al,0xd
c0010b42:	75 09                	jne    c0010b4d <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010b44:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b4b:	eb 2c                	jmp    c0010b79 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010b4d:	3c 0a                	cmp    al,0xa
c0010b4f:	75 31                	jne    c0010b82 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010b51:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010b54:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b5b:	8d 50 01             	lea    edx,[eax+0x1]
c0010b5e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010b61:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010b64:	75 0f                	jne    c0010b75 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010b66:	83 ec 0c             	sub    esp,0xc
c0010b69:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010b6c:	53                   	push   ebx
c0010b6d:	e8 68 fb ff ff       	call   c00106da <VgaText::scrollScreen()>
c0010b72:	83 c4 10             	add    esp,0x10
c0010b75:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b79:	83 c4 08             	add    esp,0x8
c0010b7c:	5b                   	pop    ebx
c0010b7d:	e9 3c fa ff ff       	jmp    c00105be <VgaText::updateCursor()>
c0010b82:	3c 08                	cmp    al,0x8
c0010b84:	75 25                	jne    c0010bab <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010b86:	50                   	push   eax
c0010b87:	50                   	push   eax
c0010b88:	6a 01                	push   0x1
c0010b8a:	53                   	push   ebx
c0010b8b:	e8 4c ff ff ff       	call   c0010adc <VgaText::decrementCursor(bool)>
c0010b90:	5a                   	pop    edx
c0010b91:	59                   	pop    ecx
c0010b92:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010b95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010b98:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010b9b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010b9e:	6a 20                	push   0x20
c0010ba0:	53                   	push   ebx
c0010ba1:	e8 da fb ff ff       	call   c0010780 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ba6:	83 c4 28             	add    esp,0x28
c0010ba9:	5b                   	pop    ebx
c0010baa:	c3                   	ret    
c0010bab:	83 ec 08             	sub    esp,0x8
c0010bae:	0f be c0             	movsx  eax,al
c0010bb1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010bb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010bb7:	51                   	push   ecx
c0010bb8:	52                   	push   edx
c0010bb9:	50                   	push   eax
c0010bba:	53                   	push   ebx
c0010bbb:	e8 c0 fb ff ff       	call   c0010780 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bc0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010bc4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010bcc:	83 c4 28             	add    esp,0x28
c0010bcf:	5b                   	pop    ebx
c0010bd0:	e9 5f fc ff ff       	jmp    c0010834 <VgaText::incrementCursor(bool)>
c0010bd5:	90                   	nop

c0010bd6 <VgaText::isShowingCursor()>:
c0010bd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bda:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010bdd:	c3                   	ret    

c0010bde <VgaText::isBlinkDisabled()>:
c0010bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010be2:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010be5:	83 f0 01             	xor    eax,0x1
c0010be8:	c3                   	ret    
c0010be9:	90                   	nop

c0010bea <VgaText::setCursorHeight(int)>:
c0010bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bf2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010bf5:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010bf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bfd:	e9 d2 f9 ff ff       	jmp    c00105d4 <VgaText::showCursor(bool)>

c0010c02 <VgaText::getCursorHeight()>:
c0010c02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c06:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c09:	c3                   	ret    

c0010c0a <setActiveTerminal(VgaText*)>:
c0010c0a:	53                   	push   ebx
c0010c0b:	83 ec 08             	sub    esp,0x8
c0010c0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c12:	85 db                	test   ebx,ebx
c0010c14:	75 11                	jne    c0010c27 <setActiveTerminal(VgaText*)+0x1d>
c0010c16:	c7 44 24 10 cc b1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b1cc
c0010c1e:	83 c4 08             	add    esp,0x8
c0010c21:	5b                   	pop    ebx
c0010c22:	e9 08 9d 00 00       	jmp    c001a92f <Krnl::panic(char const*)>
c0010c27:	50                   	push   eax
c0010c28:	50                   	push   eax
c0010c29:	53                   	push   ebx
c0010c2a:	68 da b1 02 c0       	push   0xc002b1da
c0010c2f:	e8 b3 21 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0010c34:	a1 c4 f4 02 c0       	mov    eax,ds:0xc002f4c4
c0010c39:	83 c4 10             	add    esp,0x10
c0010c3c:	85 c0                	test   eax,eax
c0010c3e:	74 0c                	je     c0010c4c <setActiveTerminal(VgaText*)+0x42>
c0010c40:	83 ec 0c             	sub    esp,0xc
c0010c43:	50                   	push   eax
c0010c44:	e8 75 f9 ff ff       	call   c00105be <VgaText::updateCursor()>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	89 1d c4 f4 02 c0    	mov    DWORD PTR ds:0xc002f4c4,ebx
c0010c52:	51                   	push   ecx
c0010c53:	51                   	push   ecx
c0010c54:	53                   	push   ebx
c0010c55:	68 f2 b1 02 c0       	push   0xc002b1f2
c0010c5a:	e8 88 21 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0010c5f:	83 c4 0c             	add    esp,0xc
c0010c62:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c65:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c68:	53                   	push   ebx
c0010c69:	e8 7e fb ff ff       	call   c00107ec <VgaText::setCursor(int, int)>
c0010c6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c71:	e8 68 ff ff ff       	call   c0010bde <VgaText::isBlinkDisabled()>
c0010c76:	5a                   	pop    edx
c0010c77:	0f b6 c0             	movzx  eax,al
c0010c7a:	59                   	pop    ecx
c0010c7b:	50                   	push   eax
c0010c7c:	53                   	push   ebx
c0010c7d:	e8 5e f9 ff ff       	call   c00105e0 <VgaText::disableBlink(bool)>
c0010c82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c85:	e8 78 ff ff ff       	call   c0010c02 <VgaText::getCursorHeight()>
c0010c8a:	5a                   	pop    edx
c0010c8b:	59                   	pop    ecx
c0010c8c:	50                   	push   eax
c0010c8d:	53                   	push   ebx
c0010c8e:	e8 57 ff ff ff       	call   c0010bea <VgaText::setCursorHeight(int)>
c0010c93:	83 c4 10             	add    esp,0x10
c0010c96:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010c9a:	75 07                	jne    c0010ca3 <setActiveTerminal(VgaText*)+0x99>
c0010c9c:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010ca3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010ca7:	83 c4 08             	add    esp,0x8
c0010caa:	5b                   	pop    ebx
c0010cab:	e9 c0 f8 ff ff       	jmp    c0010570 <VgaText::load()>

c0010cb0 <doTerminalCycle()>:
c0010cb0:	83 ec 18             	sub    esp,0x18
c0010cb3:	a1 c0 f4 02 c0       	mov    eax,ds:0xc002f4c0
c0010cb8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010cbb:	50                   	push   eax
c0010cbc:	a3 c0 f4 02 c0       	mov    ds:0xc002f4c0,eax
c0010cc1:	e8 44 ff ff ff       	call   c0010c0a <setActiveTerminal(VgaText*)>
c0010cc6:	83 c4 1c             	add    esp,0x1c
c0010cc9:	c3                   	ret    

c0010cca <VgaText::doUpdate()>:
c0010cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cce:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010cd1:	85 c0                	test   eax,eax
c0010cd3:	74 02                	je     c0010cd7 <VgaText::doUpdate()+0xd>
c0010cd5:	ff e0                	jmp    eax
c0010cd7:	c3                   	ret    

c0010cd8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010cd8:	55                   	push   ebp
c0010cd9:	31 ed                	xor    ebp,ebp
c0010cdb:	57                   	push   edi
c0010cdc:	56                   	push   esi
c0010cdd:	53                   	push   ebx
c0010cde:	83 ec 1c             	sub    esp,0x1c
c0010ce1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010ce5:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010cea:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010cf1:	50                   	push   eax
c0010cf2:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010cf7:	50                   	push   eax
c0010cf8:	e8 cb f9 ff ff       	call   c00106c8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010cfd:	59                   	pop    ecx
c0010cfe:	0f b6 c0             	movzx  eax,al
c0010d01:	5e                   	pop    esi
c0010d02:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d07:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d0b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d12:	0f b7 f6             	movzx  esi,si
c0010d15:	01 f6                	add    esi,esi
c0010d17:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d1a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d1d:	84 c0                	test   al,al
c0010d1f:	0f 84 fd 00 00 00    	je     c0010e22 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d25:	3c 0d                	cmp    al,0xd
c0010d27:	75 0c                	jne    c0010d35 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d29:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d30:	e9 e7 00 00 00       	jmp    c0010e1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d35:	3c 0a                	cmp    al,0xa
c0010d37:	75 47                	jne    c0010d80 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d39:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d3c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d43:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d46:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010d49:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010d4c:	75 0f                	jne    c0010d5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010d4e:	83 ec 0c             	sub    esp,0xc
c0010d51:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010d54:	53                   	push   ebx
c0010d55:	e8 80 f9 ff ff       	call   c00106da <VgaText::scrollScreen()>
c0010d5a:	83 c4 10             	add    esp,0x10
c0010d5d:	83 ec 0c             	sub    esp,0xc
c0010d60:	31 ed                	xor    ebp,ebp
c0010d62:	53                   	push   ebx
c0010d63:	e8 56 f8 ff ff       	call   c00105be <VgaText::updateCursor()>
c0010d68:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d6d:	83 c4 10             	add    esp,0x10
c0010d70:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d73:	0f b7 f6             	movzx  esi,si
c0010d76:	01 f6                	add    esi,esi
c0010d78:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d7b:	e9 9c 00 00 00       	jmp    c0010e1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d80:	3c 08                	cmp    al,0x8
c0010d82:	75 35                	jne    c0010db9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010d84:	56                   	push   esi
c0010d85:	56                   	push   esi
c0010d86:	6a 01                	push   0x1
c0010d88:	53                   	push   ebx
c0010d89:	e8 4e fd ff ff       	call   c0010adc <VgaText::decrementCursor(bool)>
c0010d8e:	58                   	pop    eax
c0010d8f:	5a                   	pop    edx
c0010d90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d93:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010d96:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010d99:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010d9c:	6a 20                	push   0x20
c0010d9e:	53                   	push   ebx
c0010d9f:	e8 dc f9 ff ff       	call   c0010780 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010da4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010da9:	83 c4 20             	add    esp,0x20
c0010dac:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010daf:	0f b7 f6             	movzx  esi,si
c0010db2:	01 f6                	add    esi,esi
c0010db4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010db7:	eb 63                	jmp    c0010e1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010db9:	51                   	push   ecx
c0010dba:	51                   	push   ecx
c0010dbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010dbf:	50                   	push   eax
c0010dc0:	e8 a9 f9 ff ff       	call   c001076e <VgaText::combineCharAndColour(char, unsigned char)>
c0010dc5:	83 c4 10             	add    esp,0x10
c0010dc8:	66 89 06             	mov    WORD PTR [esi],ax
c0010dcb:	39 1d c4 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4c4,ebx
c0010dd1:	75 21                	jne    c0010df4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010dd3:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010dd6:	85 c0                	test   eax,eax
c0010dd8:	74 1a                	je     c0010df4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010dda:	52                   	push   edx
c0010ddb:	52                   	push   edx
c0010ddc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ddf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010de2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010de6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010dea:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010ded:	51                   	push   ecx
c0010dee:	53                   	push   ebx
c0010def:	ff d0                	call   eax
c0010df1:	83 c4 20             	add    esp,0x20
c0010df4:	83 c6 02             	add    esi,0x2
c0010df7:	50                   	push   eax
c0010df8:	50                   	push   eax
c0010df9:	6a 00                	push   0x0
c0010dfb:	53                   	push   ebx
c0010dfc:	e8 33 fa ff ff       	call   c0010834 <VgaText::incrementCursor(bool)>
c0010e01:	83 c4 10             	add    esp,0x10
c0010e04:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e08:	75 0d                	jne    c0010e17 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e0a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e0f:	0f b7 f6             	movzx  esi,si
c0010e12:	01 f6                	add    esi,esi
c0010e14:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e17:	bd 01 00 00 00       	mov    ebp,0x1
c0010e1c:	47                   	inc    edi
c0010e1d:	e9 f8 fe ff ff       	jmp    c0010d1a <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e22:	83 ec 0c             	sub    esp,0xc
c0010e25:	53                   	push   ebx
c0010e26:	e8 93 f7 ff ff       	call   c00105be <VgaText::updateCursor()>
c0010e2b:	83 c4 10             	add    esp,0x10
c0010e2e:	89 e8                	mov    eax,ebp
c0010e30:	84 c0                	test   al,al
c0010e32:	74 0c                	je     c0010e40 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e34:	83 ec 0c             	sub    esp,0xc
c0010e37:	53                   	push   ebx
c0010e38:	e8 8d fe ff ff       	call   c0010cca <VgaText::doUpdate()>
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010e47:	83 c4 1c             	add    esp,0x1c
c0010e4a:	5b                   	pop    ebx
c0010e4b:	5e                   	pop    esi
c0010e4c:	5f                   	pop    edi
c0010e4d:	5d                   	pop    ebp
c0010e4e:	c3                   	ret    
c0010e4f:	90                   	nop

c0010e50 <VgaText::clearScreen()>:
c0010e50:	57                   	push   edi
c0010e51:	56                   	push   esi
c0010e52:	31 f6                	xor    esi,esi
c0010e54:	53                   	push   ebx
c0010e55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e59:	52                   	push   edx
c0010e5a:	6a 00                	push   0x0
c0010e5c:	6a 00                	push   0x0
c0010e5e:	53                   	push   ebx
c0010e5f:	e8 88 f9 ff ff       	call   c00107ec <VgaText::setCursor(int, int)>
c0010e64:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010e6b:	83 c4 10             	add    esp,0x10
c0010e6e:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010e71:	7e 20                	jle    c0010e93 <VgaText::clearScreen()+0x43>
c0010e73:	31 ff                	xor    edi,edi
c0010e75:	50                   	push   eax
c0010e76:	50                   	push   eax
c0010e77:	56                   	push   esi
c0010e78:	57                   	push   edi
c0010e79:	47                   	inc    edi
c0010e7a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e7d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e80:	6a 20                	push   0x20
c0010e82:	53                   	push   ebx
c0010e83:	e8 f8 f8 ff ff       	call   c0010780 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e88:	83 c4 20             	add    esp,0x20
c0010e8b:	83 ff 50             	cmp    edi,0x50
c0010e8e:	75 e5                	jne    c0010e75 <VgaText::clearScreen()+0x25>
c0010e90:	46                   	inc    esi
c0010e91:	eb db                	jmp    c0010e6e <VgaText::clearScreen()+0x1e>
c0010e93:	83 ec 0c             	sub    esp,0xc
c0010e96:	53                   	push   ebx
c0010e97:	e8 2e fe ff ff       	call   c0010cca <VgaText::doUpdate()>
c0010e9c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ea3:	83 c4 10             	add    esp,0x10
c0010ea6:	5b                   	pop    ebx
c0010ea7:	5e                   	pop    esi
c0010ea8:	5f                   	pop    edi
c0010ea9:	c3                   	ret    

c0010eaa <VgaText::putchar(char)>:
c0010eaa:	56                   	push   esi
c0010eab:	53                   	push   ebx
c0010eac:	83 ec 14             	sub    esp,0x14
c0010eaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010eb3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010eb7:	3c 5b                	cmp    al,0x5b
c0010eb9:	75 18                	jne    c0010ed3 <VgaText::putchar(char)+0x29>
c0010ebb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010ebf:	74 1f                	je     c0010ee0 <VgaText::putchar(char)+0x36>
c0010ec1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010ec7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010ece:	e9 bd 00 00 00       	jmp    c0010f90 <VgaText::putchar(char)+0xe6>
c0010ed3:	3c 1b                	cmp    al,0x1b
c0010ed5:	75 09                	jne    c0010ee0 <VgaText::putchar(char)+0x36>
c0010ed7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010edb:	e9 b0 00 00 00       	jmp    c0010f90 <VgaText::putchar(char)+0xe6>
c0010ee0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010ee3:	84 c9                	test   cl,cl
c0010ee5:	0f 84 92 00 00 00    	je     c0010f7d <VgaText::putchar(char)+0xd3>
c0010eeb:	8d 50 c0             	lea    edx,[eax-0x40]
c0010eee:	80 fa 3e             	cmp    dl,0x3e
c0010ef1:	77 76                	ja     c0010f69 <VgaText::putchar(char)+0xbf>
c0010ef3:	3c 6d                	cmp    al,0x6d
c0010ef5:	75 47                	jne    c0010f3e <VgaText::putchar(char)+0x94>
c0010ef7:	31 f6                	xor    esi,esi
c0010ef9:	31 d2                	xor    edx,edx
c0010efb:	31 c0                	xor    eax,eax
c0010efd:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f00:	7e 2d                	jle    c0010f2f <VgaText::putchar(char)+0x85>
c0010f02:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f07:	80 fa 3b             	cmp    dl,0x3b
c0010f0a:	75 17                	jne    c0010f23 <VgaText::putchar(char)+0x79>
c0010f0c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f10:	50                   	push   eax
c0010f11:	53                   	push   ebx
c0010f12:	e8 fd f6 ff ff       	call   c0010614 <VgaText::doANSI_SGR(int)>
c0010f17:	59                   	pop    ecx
c0010f18:	31 d2                	xor    edx,edx
c0010f1a:	58                   	pop    eax
c0010f1b:	31 c0                	xor    eax,eax
c0010f1d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f21:	eb 09                	jmp    c0010f2c <VgaText::putchar(char)+0x82>
c0010f23:	6b c0 0a             	imul   eax,eax,0xa
c0010f26:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f2a:	88 ca                	mov    dl,cl
c0010f2c:	46                   	inc    esi
c0010f2d:	eb ce                	jmp    c0010efd <VgaText::putchar(char)+0x53>
c0010f2f:	84 d2                	test   dl,dl
c0010f31:	74 2e                	je     c0010f61 <VgaText::putchar(char)+0xb7>
c0010f33:	50                   	push   eax
c0010f34:	53                   	push   ebx
c0010f35:	e8 da f6 ff ff       	call   c0010614 <VgaText::doANSI_SGR(int)>
c0010f3a:	58                   	pop    eax
c0010f3b:	5a                   	pop    edx
c0010f3c:	eb 23                	jmp    c0010f61 <VgaText::putchar(char)+0xb7>
c0010f3e:	3c 4a                	cmp    al,0x4a
c0010f40:	75 1f                	jne    c0010f61 <VgaText::putchar(char)+0xb7>
c0010f42:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010f46:	75 19                	jne    c0010f61 <VgaText::putchar(char)+0xb7>
c0010f48:	83 ec 0c             	sub    esp,0xc
c0010f4b:	53                   	push   ebx
c0010f4c:	e8 ff fe ff ff       	call   c0010e50 <VgaText::clearScreen()>
c0010f51:	83 c4 0c             	add    esp,0xc
c0010f54:	6a 00                	push   0x0
c0010f56:	6a 00                	push   0x0
c0010f58:	53                   	push   ebx
c0010f59:	e8 8e f8 ff ff       	call   c00107ec <VgaText::setCursor(int, int)>
c0010f5e:	83 c4 10             	add    esp,0x10
c0010f61:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010f67:	eb 27                	jmp    c0010f90 <VgaText::putchar(char)+0xe6>
c0010f69:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010f6c:	83 fa 0e             	cmp    edx,0xe
c0010f6f:	7f 1f                	jg     c0010f90 <VgaText::putchar(char)+0xe6>
c0010f71:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010f74:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010f77:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010f7b:	eb 13                	jmp    c0010f90 <VgaText::putchar(char)+0xe6>
c0010f7d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f80:	0f be c0             	movsx  eax,al
c0010f83:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f86:	50                   	push   eax
c0010f87:	53                   	push   ebx
c0010f88:	e8 71 fb ff ff       	call   c0010afe <VgaText::putchar(char, VgaColour, VgaColour)>
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	83 c4 14             	add    esp,0x14
c0010f93:	5b                   	pop    ebx
c0010f94:	5e                   	pop    esi
c0010f95:	c3                   	ret    

c0010f96 <VgaText::puts(char const*)>:
c0010f96:	53                   	push   ebx
c0010f97:	83 ec 08             	sub    esp,0x8
c0010f9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f9e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010fa1:	84 c0                	test   al,al
c0010fa3:	74 12                	je     c0010fb7 <VgaText::puts(char const*)+0x21>
c0010fa5:	43                   	inc    ebx
c0010fa6:	51                   	push   ecx
c0010fa7:	51                   	push   ecx
c0010fa8:	50                   	push   eax
c0010fa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fad:	e8 f8 fe ff ff       	call   c0010eaa <VgaText::putchar(char)>
c0010fb2:	83 c4 10             	add    esp,0x10
c0010fb5:	eb e7                	jmp    c0010f9e <VgaText::puts(char const*)+0x8>
c0010fb7:	83 c4 08             	add    esp,0x8
c0010fba:	5b                   	pop    ebx
c0010fbb:	c3                   	ret    

c0010fbc <VgaText::putx(unsigned int)>:
c0010fbc:	57                   	push   edi
c0010fbd:	b9 11 00 00 00       	mov    ecx,0x11
c0010fc2:	56                   	push   esi
c0010fc3:	be 0e b2 02 c0       	mov    esi,0xc002b20e
c0010fc8:	53                   	push   ebx
c0010fc9:	83 ec 20             	sub    esp,0x20
c0010fcc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010fd0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010fd4:	fc                   	cld    
c0010fd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fd7:	be 08 00 00 00       	mov    esi,0x8
c0010fdc:	50                   	push   eax
c0010fdd:	50                   	push   eax
c0010fde:	89 d8                	mov    eax,ebx
c0010fe0:	c1 e3 04             	shl    ebx,0x4
c0010fe3:	c1 e8 1c             	shr    eax,0x1c
c0010fe6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010feb:	50                   	push   eax
c0010fec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ff0:	e8 b5 fe ff ff       	call   c0010eaa <VgaText::putchar(char)>
c0010ff5:	83 c4 10             	add    esp,0x10
c0010ff8:	4e                   	dec    esi
c0010ff9:	75 e1                	jne    c0010fdc <VgaText::putx(unsigned int)+0x20>
c0010ffb:	83 c4 20             	add    esp,0x20
c0010ffe:	5b                   	pop    ebx
c0010fff:	5e                   	pop    esi
c0011000:	5f                   	pop    edi
c0011001:	c3                   	ret    

c0011002 <VgaText::VgaText(char const*)>:
c0011002:	57                   	push   edi
c0011003:	56                   	push   esi
c0011004:	53                   	push   ebx
c0011005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011009:	83 ec 08             	sub    esp,0x8
c001100c:	6a 00                	push   0x0
c001100e:	50                   	push   eax
c001100f:	e8 8a 05 00 00       	call   c001159e <UnixFile::UnixFile(int)>
c0011014:	83 c4 10             	add    esp,0x10
c0011017:	ba 74 b2 02 c0       	mov    edx,0xc002b274
c001101c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011020:	89 10                	mov    DWORD PTR [eax],edx
c0011022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011026:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001102d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011031:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011044:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001104c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011057:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001105e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011062:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011078:	8d 50 60             	lea    edx,[eax+0x60]
c001107b:	bb a0 f4 02 c0       	mov    ebx,0xc002f4a0
c0011080:	b8 08 00 00 00       	mov    eax,0x8
c0011085:	fc                   	cld    
c0011086:	89 d7                	mov    edi,edx
c0011088:	89 de                	mov    esi,ebx
c001108a:	89 c1                	mov    ecx,eax
c001108c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001108e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011092:	05 82 00 00 00       	add    eax,0x82
c0011097:	83 ec 08             	sub    esp,0x8
c001109a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001109e:	50                   	push   eax
c001109f:	e8 68 f7 fe ff       	call   c000080c <strcpy>
c00110a4:	83 c4 10             	add    esp,0x10
c00110a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ab:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00110b2:	83 ec 0c             	sub    esp,0xc
c00110b5:	6a 01                	push   0x1
c00110b7:	e8 25 09 00 00       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c00110bc:	83 c4 10             	add    esp,0x10
c00110bf:	89 c2                	mov    edx,eax
c00110c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00110c8:	8b 1d 70 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f570
c00110ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110d5:	89 c6                	mov    esi,eax
c00110d7:	e8 cd ed ff ff       	call   c000fea9 <Phys::allocatePage()>
c00110dc:	6a 05                	push   0x5
c00110de:	56                   	push   esi
c00110df:	50                   	push   eax
c00110e0:	53                   	push   ebx
c00110e1:	e8 32 11 00 00       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c00110e6:	83 c4 10             	add    esp,0x10
c00110e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110f0:	83 ec 04             	sub    esp,0x4
c00110f3:	68 00 0f 00 00       	push   0xf00
c00110f8:	6a 00                	push   0x0
c00110fa:	50                   	push   eax
c00110fb:	e8 50 f6 fe ff       	call   c0000750 <memset>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	83 ec 04             	sub    esp,0x4
c0011106:	6a 00                	push   0x0
c0011108:	6a 07                	push   0x7
c001110a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001110e:	e8 95 f5 ff ff       	call   c00106a8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	83 ec 08             	sub    esp,0x8
c0011119:	6a 02                	push   0x2
c001111b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111f:	e8 c6 fa ff ff       	call   c0010bea <VgaText::setCursorHeight(int)>
c0011124:	83 c4 10             	add    esp,0x10
c0011127:	83 ec 04             	sub    esp,0x4
c001112a:	6a 00                	push   0x0
c001112c:	6a 00                	push   0x0
c001112e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011132:	e8 b5 f6 ff ff       	call   c00107ec <VgaText::setCursor(int, int)>
c0011137:	83 c4 10             	add    esp,0x10
c001113a:	83 ec 08             	sub    esp,0x8
c001113d:	6a 01                	push   0x1
c001113f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011143:	e8 8c f4 ff ff       	call   c00105d4 <VgaText::showCursor(bool)>
c0011148:	83 c4 10             	add    esp,0x10
c001114b:	83 ec 08             	sub    esp,0x8
c001114e:	6a 01                	push   0x1
c0011150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011154:	e8 87 f4 ff ff       	call   c00105e0 <VgaText::disableBlink(bool)>
c0011159:	83 c4 10             	add    esp,0x10
c001115c:	83 ec 0c             	sub    esp,0xc
c001115f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011163:	e8 e8 fc ff ff       	call   c0010e50 <VgaText::clearScreen()>
c0011168:	83 c4 10             	add    esp,0x10
c001116b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001116f:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011177:	05 02 01 00 00       	add    eax,0x102
c001117c:	83 ec 04             	sub    esp,0x4
c001117f:	68 96 00 00 00       	push   0x96
c0011184:	6a 00                	push   0x0
c0011186:	50                   	push   eax
c0011187:	e8 c4 f5 fe ff       	call   c0000750 <memset>
c001118c:	83 c4 10             	add    esp,0x10
c001118f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011193:	05 98 01 00 00       	add    eax,0x198
c0011198:	83 ec 04             	sub    esp,0x4
c001119b:	68 2c 01 00 00       	push   0x12c
c00111a0:	6a 00                	push   0x0
c00111a2:	50                   	push   eax
c00111a3:	e8 a8 f5 fe ff       	call   c0000750 <memset>
c00111a8:	83 c4 10             	add    esp,0x10
c00111ab:	90                   	nop
c00111ac:	5b                   	pop    ebx
c00111ad:	5e                   	pop    esi
c00111ae:	5f                   	pop    edi
c00111af:	c3                   	ret    

c00111b0 <VgaText::receiveKey(unsigned char)>:
c00111b0:	55                   	push   ebp
c00111b1:	57                   	push   edi
c00111b2:	56                   	push   esi
c00111b3:	53                   	push   ebx
c00111b4:	83 ec 1c             	sub    esp,0x1c
c00111b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111bf:	84 db                	test   bl,bl
c00111c1:	0f 84 c9 00 00 00    	je     c0011290 <VgaText::receiveKey(unsigned char)+0xe0>
c00111c7:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00111cd:	80 fb 08             	cmp    bl,0x8
c00111d0:	75 2c                	jne    c00111fe <VgaText::receiveKey(unsigned char)+0x4e>
c00111d2:	83 ec 0c             	sub    esp,0xc
c00111d5:	57                   	push   edi
c00111d6:	e8 91 f5 fe ff       	call   c000076c <strlen>
c00111db:	83 c4 10             	add    esp,0x10
c00111de:	85 c0                	test   eax,eax
c00111e0:	74 41                	je     c0011223 <VgaText::receiveKey(unsigned char)+0x73>
c00111e2:	50                   	push   eax
c00111e3:	50                   	push   eax
c00111e4:	6a 08                	push   0x8
c00111e6:	56                   	push   esi
c00111e7:	e8 be fc ff ff       	call   c0010eaa <VgaText::putchar(char)>
c00111ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111ef:	e8 78 f5 fe ff       	call   c000076c <strlen>
c00111f4:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00111fc:	eb 22                	jmp    c0011220 <VgaText::receiveKey(unsigned char)+0x70>
c00111fe:	0f be c3             	movsx  eax,bl
c0011201:	52                   	push   edx
c0011202:	52                   	push   edx
c0011203:	50                   	push   eax
c0011204:	56                   	push   esi
c0011205:	e8 a0 fc ff ff       	call   c0010eaa <VgaText::putchar(char)>
c001120a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001120e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011213:	59                   	pop    ecx
c0011214:	5d                   	pop    ebp
c0011215:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011219:	50                   	push   eax
c001121a:	57                   	push   edi
c001121b:	e8 2c f7 fe ff       	call   c000094c <strcat>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c001122a:	75 05                	jne    c0011231 <VgaText::receiveKey(unsigned char)+0x81>
c001122c:	80 fb 0a             	cmp    bl,0xa
c001122f:	75 53                	jne    c0011284 <VgaText::receiveKey(unsigned char)+0xd4>
c0011231:	83 ec 0c             	sub    esp,0xc
c0011234:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c001123a:	53                   	push   ebx
c001123b:	e8 2c f5 fe ff       	call   c000076c <strlen>
c0011240:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011243:	89 c5                	mov    ebp,eax
c0011245:	e8 22 f5 fe ff       	call   c000076c <strlen>
c001124a:	83 c4 10             	add    esp,0x10
c001124d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011251:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011256:	76 10                	jbe    c0011268 <VgaText::receiveKey(unsigned char)+0xb8>
c0011258:	83 ec 0c             	sub    esp,0xc
c001125b:	68 1f b2 02 c0       	push   0xc002b21f
c0011260:	e8 ca 96 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0011265:	83 c4 10             	add    esp,0x10
c0011268:	50                   	push   eax
c0011269:	50                   	push   eax
c001126a:	57                   	push   edi
c001126b:	53                   	push   ebx
c001126c:	e8 db f6 fe ff       	call   c000094c <strcat>
c0011271:	83 c4 0c             	add    esp,0xc
c0011274:	68 96 00 00 00       	push   0x96
c0011279:	6a 00                	push   0x0
c001127b:	57                   	push   edi
c001127c:	e8 cf f4 fe ff       	call   c0000750 <memset>
c0011281:	83 c4 10             	add    esp,0x10
c0011284:	83 ec 0c             	sub    esp,0xc
c0011287:	56                   	push   esi
c0011288:	e8 3d fa ff ff       	call   c0010cca <VgaText::doUpdate()>
c001128d:	83 c4 10             	add    esp,0x10
c0011290:	83 c4 1c             	add    esp,0x1c
c0011293:	5b                   	pop    ebx
c0011294:	5e                   	pop    esi
c0011295:	5f                   	pop    edi
c0011296:	5d                   	pop    ebp
c0011297:	c3                   	ret    

c0011298 <VgaText::write(unsigned long long, void*, int*)>:
c0011298:	55                   	push   ebp
c0011299:	57                   	push   edi
c001129a:	56                   	push   esi
c001129b:	53                   	push   ebx
c001129c:	83 ec 0c             	sub    esp,0xc
c001129f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112a3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00112a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112ab:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00112b2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00112b5:	39 eb                	cmp    ebx,ebp
c00112b7:	74 13                	je     c00112cc <VgaText::write(unsigned long long, void*, int*)+0x34>
c00112b9:	43                   	inc    ebx
c00112ba:	50                   	push   eax
c00112bb:	50                   	push   eax
c00112bc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00112c0:	50                   	push   eax
c00112c1:	56                   	push   esi
c00112c2:	e8 e3 fb ff ff       	call   c0010eaa <VgaText::putchar(char)>
c00112c7:	83 c4 10             	add    esp,0x10
c00112ca:	eb e9                	jmp    c00112b5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00112cc:	83 ec 0c             	sub    esp,0xc
c00112cf:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00112d6:	56                   	push   esi
c00112d7:	e8 ee f9 ff ff       	call   c0010cca <VgaText::doUpdate()>
c00112dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112e0:	89 38                	mov    DWORD PTR [eax],edi
c00112e2:	83 c4 1c             	add    esp,0x1c
c00112e5:	31 c0                	xor    eax,eax
c00112e7:	5b                   	pop    ebx
c00112e8:	5e                   	pop    esi
c00112e9:	5f                   	pop    edi
c00112ea:	5d                   	pop    ebp
c00112eb:	c3                   	ret    

c00112ec <newTerminal(char*)>:
c00112ec:	83 ec 28             	sub    esp,0x28
c00112ef:	68 c4 02 00 00       	push   0x2c4
c00112f4:	e8 93 e5 ff ff       	call   c000f88c <malloc>
c00112f9:	5a                   	pop    edx
c00112fa:	59                   	pop    ecx
c00112fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00112ff:	50                   	push   eax
c0011300:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011304:	e8 f9 fc ff ff       	call   c0011002 <VgaText::VgaText(char const*)>
c0011309:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001130d:	83 c4 2c             	add    esp,0x2c
c0011310:	c3                   	ret    
c0011311:	90                   	nop

c0011312 <TSS::TSS()>:
c0011312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011316:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001131d:	90                   	nop
c001131e:	c3                   	ret    
c001131f:	90                   	nop

c0011320 <TSS::setESP(unsigned long)>:
c0011320:	55                   	push   ebp
c0011321:	89 e5                	mov    ebp,esp
c0011323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011326:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011329:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001132c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001132f:	90                   	nop
c0011330:	5d                   	pop    ebp
c0011331:	c3                   	ret    

c0011332 <TSS::flush()>:
c0011332:	55                   	push   ebp
c0011333:	89 e5                	mov    ebp,esp
c0011335:	83 ec 10             	sub    esp,0x10
c0011338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001133b:	8b 00                	mov    eax,DWORD PTR [eax]
c001133d:	83 c8 03             	or     eax,0x3
c0011340:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011344:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011348:	66 89 d0             	mov    ax,dx
c001134b:	0f 00 d8             	ltr    ax
c001134e:	90                   	nop
c001134f:	c9                   	leave  
c0011350:	c3                   	ret    
c0011351:	90                   	nop

c0011352 <TSS::setup(unsigned long, unsigned long)>:
c0011352:	55                   	push   ebp
c0011353:	89 e5                	mov    ebp,esp
c0011355:	83 ec 18             	sub    esp,0x18
c0011358:	83 ec 0c             	sub    esp,0xc
c001135b:	6a 68                	push   0x68
c001135d:	e8 2a e5 ff ff       	call   c000f88c <malloc>
c0011362:	83 c4 10             	add    esp,0x10
c0011365:	89 c2                	mov    edx,eax
c0011367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001136a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001136d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011370:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011373:	83 ec 04             	sub    esp,0x4
c0011376:	6a 68                	push   0x68
c0011378:	6a 00                	push   0x0
c001137a:	50                   	push   eax
c001137b:	e8 d0 f3 fe ff       	call   c0000750 <memset>
c0011380:	83 c4 10             	add    esp,0x10
c0011383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011386:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011389:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001138f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011395:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001139b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001139e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ad:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00113b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113b9:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00113bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113c5:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00113cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d1:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00113d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113dd:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00113e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e9:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00113ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00113f8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00113fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011401:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011404:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001140d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011417:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001141a:	0f 20 da             	mov    edx,cr3
c001141d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011420:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011423:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011429:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001142c:	83 ec 08             	sub    esp,0x8
c001142f:	50                   	push   eax
c0011430:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011433:	50                   	push   eax
c0011434:	e8 2f dc ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	83 ec 08             	sub    esp,0x8
c001143f:	6a 68                	push   0x68
c0011441:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011444:	50                   	push   eax
c0011445:	e8 3a dc ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c001144a:	83 c4 10             	add    esp,0x10
c001144d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011451:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011454:	83 e0 0f             	and    eax,0xf
c0011457:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001145a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001145d:	83 c8 40             	or     eax,0x40
c0011460:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011463:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0011468:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001146e:	05 78 01 00 00       	add    eax,0x178
c0011473:	83 ec 04             	sub    esp,0x4
c0011476:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011479:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001147c:	50                   	push   eax
c001147d:	e8 36 dc ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c0011482:	83 c4 10             	add    esp,0x10
c0011485:	89 c2                	mov    edx,eax
c0011487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001148a:	89 10                	mov    DWORD PTR [eax],edx
c001148c:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0011491:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011497:	05 78 01 00 00       	add    eax,0x178
c001149c:	83 ec 0c             	sub    esp,0xc
c001149f:	50                   	push   eax
c00114a0:	e8 57 dc ff ff       	call   c000f0fc <GDT::flush()>
c00114a5:	83 c4 10             	add    esp,0x10
c00114a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00114ad:	83 ec 08             	sub    esp,0x8
c00114b0:	50                   	push   eax
c00114b1:	68 88 b2 02 c0       	push   0xc002b288
c00114b6:	e8 2c 19 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00114bb:	83 c4 10             	add    esp,0x10
c00114be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00114c3:	c9                   	leave  
c00114c4:	c3                   	ret    
c00114c5:	90                   	nop

c00114c6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00114c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00114ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00114d6:	75 08                	jne    c00114e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00114d8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00114de:	eb 38                	jmp    c0011518 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00114e0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114e5:	75 17                	jne    c00114fe <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00114e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114ef:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00114f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00114f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114fb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00114fe:	89 c1                	mov    ecx,eax
c0011500:	83 e1 fd             	and    ecx,0xfffffffd
c0011503:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011509:	74 cd                	je     c00114d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001150b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011510:	83 e0 ef             	and    eax,0xffffffef
c0011513:	83 f8 08             	cmp    eax,0x8
c0011516:	76 c0                	jbe    c00114d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011518:	31 c0                	xor    eax,eax
c001151a:	c3                   	ret    
c001151b:	90                   	nop

c001151c <ReservedFilename::isAtty()>:
c001151c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011520:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011523:	31 c0                	xor    eax,eax
c0011525:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001152b:	74 09                	je     c0011536 <ReservedFilename::isAtty()+0x1a>
c001152d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011533:	0f 94 c0             	sete   al
c0011536:	c3                   	ret    
c0011537:	90                   	nop

c0011538 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011543:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011547:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001154c:	75 08                	jne    c0011556 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001154e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011554:	eb 3d                	jmp    c0011593 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011556:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001155b:	75 17                	jne    c0011574 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001155d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011562:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011565:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001156b:	8b 10                	mov    edx,DWORD PTR [eax]
c001156d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011571:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011574:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011579:	75 04                	jne    c001157f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001157b:	89 0a                	mov    DWORD PTR [edx],ecx
c001157d:	eb 14                	jmp    c0011593 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001157f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011584:	74 c8                	je     c001154e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011586:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001158b:	83 e0 ef             	and    eax,0xffffffef
c001158e:	83 f8 08             	cmp    eax,0x8
c0011591:	76 bb                	jbe    c001154e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011593:	31 c0                	xor    eax,eax
c0011595:	c3                   	ret    

c0011596 <UnixFile::getFileDescriptor()>:
c0011596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001159a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159d:	c3                   	ret    

c001159e <UnixFile::UnixFile(int)>:
c001159e:	53                   	push   ebx
c001159f:	83 ec 28             	sub    esp,0x28
c00115a2:	ba 74 b3 02 c0       	mov    edx,0xc002b374
c00115a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115ab:	89 10                	mov    DWORD PTR [eax],edx
c00115ad:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00115b5:	0f 8f 8c 01 00 00    	jg     c0011747 <UnixFile::UnixFile(int)+0x1a9>
c00115bb:	a1 80 e3 02 c0       	mov    eax,ds:0xc002e380
c00115c0:	8d 50 01             	lea    edx,[eax+0x1]
c00115c3:	89 15 80 e3 02 c0    	mov    DWORD PTR ds:0xc002e380,edx
c00115c9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00115cd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00115d0:	83 ec 08             	sub    esp,0x8
c00115d3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00115d7:	68 58 f5 02 c0       	push   0xc002f558
c00115dc:	e8 ab 7e 01 00       	call   c002948c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00115e1:	83 c4 10             	add    esp,0x10
c00115e4:	a0 54 f5 02 c0       	mov    al,ds:0xc002f554
c00115e9:	83 f0 01             	xor    eax,0x1
c00115ec:	84 c0                	test   al,al
c00115ee:	0f 84 54 01 00 00    	je     c0011748 <UnixFile::UnixFile(int)+0x1aa>
c00115f4:	c6 05 54 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f554,0x1
c00115fb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011603:	83 ec 0c             	sub    esp,0xc
c0011606:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001160a:	e8 7d e2 ff ff       	call   c000f88c <malloc>
c001160f:	83 c4 10             	add    esp,0x10
c0011612:	89 c3                	mov    ebx,eax
c0011614:	83 ec 08             	sub    esp,0x8
c0011617:	68 03 ff ff 0f       	push   0xfffff03
c001161c:	53                   	push   ebx
c001161d:	e8 2c 01 00 00       	call   c001174e <ReservedFilename::ReservedFilename(int)>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	89 1d 4c f5 02 c0    	mov    DWORD PTR ds:0xc002f54c,ebx
c001162b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011633:	83 ec 0c             	sub    esp,0xc
c0011636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001163a:	e8 4d e2 ff ff       	call   c000f88c <malloc>
c001163f:	83 c4 10             	add    esp,0x10
c0011642:	89 c3                	mov    ebx,eax
c0011644:	83 ec 08             	sub    esp,0x8
c0011647:	68 01 ff ff 0f       	push   0xfffff01
c001164c:	53                   	push   ebx
c001164d:	e8 fc 00 00 00       	call   c001174e <ReservedFilename::ReservedFilename(int)>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	89 1d 50 f5 02 c0    	mov    DWORD PTR ds:0xc002f550,ebx
c001165b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011663:	83 ec 0c             	sub    esp,0xc
c0011666:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001166a:	e8 1d e2 ff ff       	call   c000f88c <malloc>
c001166f:	83 c4 10             	add    esp,0x10
c0011672:	89 c3                	mov    ebx,eax
c0011674:	83 ec 08             	sub    esp,0x8
c0011677:	68 00 ff ff 0f       	push   0xfffff00
c001167c:	53                   	push   ebx
c001167d:	e8 cc 00 00 00       	call   c001174e <ReservedFilename::ReservedFilename(int)>
c0011682:	83 c4 10             	add    esp,0x10
c0011685:	89 1d 44 f5 02 c0    	mov    DWORD PTR ds:0xc002f544,ebx
c001168b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011693:	83 ec 0c             	sub    esp,0xc
c0011696:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001169a:	e8 ed e1 ff ff       	call   c000f88c <malloc>
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	89 c3                	mov    ebx,eax
c00116a4:	83 ec 08             	sub    esp,0x8
c00116a7:	68 02 ff ff 0f       	push   0xfffff02
c00116ac:	53                   	push   ebx
c00116ad:	e8 9c 00 00 00       	call   c001174e <ReservedFilename::ReservedFilename(int)>
c00116b2:	83 c4 10             	add    esp,0x10
c00116b5:	89 1d 48 f5 02 c0    	mov    DWORD PTR ds:0xc002f548,ebx
c00116bb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00116c3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00116c8:	7f 7e                	jg     c0011748 <UnixFile::UnixFile(int)+0x1aa>
c00116ca:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00116d2:	83 ec 0c             	sub    esp,0xc
c00116d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116d9:	e8 ae e1 ff ff       	call   c000f88c <malloc>
c00116de:	83 c4 10             	add    esp,0x10
c00116e1:	89 c3                	mov    ebx,eax
c00116e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116e7:	05 10 ff ff 0f       	add    eax,0xfffff10
c00116ec:	83 ec 08             	sub    esp,0x8
c00116ef:	50                   	push   eax
c00116f0:	53                   	push   ebx
c00116f1:	e8 58 00 00 00       	call   c001174e <ReservedFilename::ReservedFilename(int)>
c00116f6:	83 c4 10             	add    esp,0x10
c00116f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116fd:	89 1c 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],ebx
c0011704:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001170c:	83 ec 0c             	sub    esp,0xc
c001170f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011713:	e8 74 e1 ff ff       	call   c000f88c <malloc>
c0011718:	83 c4 10             	add    esp,0x10
c001171b:	89 c3                	mov    ebx,eax
c001171d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011721:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011726:	83 ec 08             	sub    esp,0x8
c0011729:	50                   	push   eax
c001172a:	53                   	push   ebx
c001172b:	e8 1e 00 00 00       	call   c001174e <ReservedFilename::ReservedFilename(int)>
c0011730:	83 c4 10             	add    esp,0x10
c0011733:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011737:	89 1c 85 e0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b20],ebx
c001173e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011742:	e9 7c ff ff ff       	jmp    c00116c3 <UnixFile::UnixFile(int)+0x125>
c0011747:	90                   	nop
c0011748:	83 c4 28             	add    esp,0x28
c001174b:	5b                   	pop    ebx
c001174c:	c3                   	ret    
c001174d:	90                   	nop

c001174e <ReservedFilename::ReservedFilename(int)>:
c001174e:	83 ec 0c             	sub    esp,0xc
c0011751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011755:	83 ec 08             	sub    esp,0x8
c0011758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001175c:	50                   	push   eax
c001175d:	e8 3c fe ff ff       	call   c001159e <UnixFile::UnixFile(int)>
c0011762:	83 c4 10             	add    esp,0x10
c0011765:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c001176a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176e:	89 10                	mov    DWORD PTR [eax],edx
c0011770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011774:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011778:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001177b:	90                   	nop
c001177c:	83 c4 0c             	add    esp,0xc
c001177f:	c3                   	ret    

c0011780 <UnixFile::~UnixFile()>:
c0011780:	83 ec 1c             	sub    esp,0x1c
c0011783:	ba 74 b3 02 c0       	mov    edx,0xc002b374
c0011788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001178c:	89 10                	mov    DWORD PTR [eax],edx
c001178e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011792:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011795:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001179a:	7f 73                	jg     c001180f <UnixFile::~UnixFile()+0x8f>
c001179c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117a4:	83 ec 0c             	sub    esp,0xc
c00117a7:	68 58 f5 02 c0       	push   0xc002f558
c00117ac:	e8 af 7d 01 00       	call   c0029560 <LinkedList<UnixFile>::getFirstElement()>
c00117b1:	83 c4 10             	add    esp,0x10
c00117b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00117b8:	83 ec 0c             	sub    esp,0xc
c00117bb:	68 58 f5 02 c0       	push   0xc002f558
c00117c0:	e8 a3 7d 01 00       	call   c0029568 <LinkedList<UnixFile>::removeFirst()>
c00117c5:	83 c4 10             	add    esp,0x10
c00117c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00117cc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00117d0:	74 40                	je     c0011812 <UnixFile::~UnixFile()+0x92>
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117d9:	68 58 f5 02 c0       	push   0xc002f558
c00117de:	e8 a9 7c 01 00       	call   c002948c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117e3:	83 c4 10             	add    esp,0x10
c00117e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117ea:	8d 50 01             	lea    edx,[eax+0x1]
c00117ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00117f1:	3d 88 13 00 00       	cmp    eax,0x1388
c00117f6:	0f 94 c0             	sete   al
c00117f9:	84 c0                	test   al,al
c00117fb:	74 a7                	je     c00117a4 <UnixFile::~UnixFile()+0x24>
c00117fd:	83 ec 0c             	sub    esp,0xc
c0011800:	68 4c b3 02 c0       	push   0xc002b34c
c0011805:	e8 25 91 00 00       	call   c001a92f <Krnl::panic(char const*)>
c001180a:	83 c4 10             	add    esp,0x10
c001180d:	eb 95                	jmp    c00117a4 <UnixFile::~UnixFile()+0x24>
c001180f:	90                   	nop
c0011810:	eb 01                	jmp    c0011813 <UnixFile::~UnixFile()+0x93>
c0011812:	90                   	nop
c0011813:	90                   	nop
c0011814:	83 c4 1c             	add    esp,0x1c
c0011817:	c3                   	ret    

c0011818 <UnixFile::~UnixFile()>:
c0011818:	83 ec 0c             	sub    esp,0xc
c001181b:	83 ec 0c             	sub    esp,0xc
c001181e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011822:	e8 59 ff ff ff       	call   c0011780 <UnixFile::~UnixFile()>
c0011827:	83 c4 10             	add    esp,0x10
c001182a:	83 ec 08             	sub    esp,0x8
c001182d:	6a 0c                	push   0xc
c001182f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011833:	e8 cf 14 00 00       	call   c0012d07 <operator delete(void*, unsigned long)>
c0011838:	83 c4 10             	add    esp,0x10
c001183b:	83 c4 0c             	add    esp,0xc
c001183e:	c3                   	ret    
c001183f:	90                   	nop

c0011840 <ReservedFilename::~ReservedFilename()>:
c0011840:	83 ec 0c             	sub    esp,0xc
c0011843:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0011848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001184c:	89 10                	mov    DWORD PTR [eax],edx
c001184e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011852:	83 ec 0c             	sub    esp,0xc
c0011855:	50                   	push   eax
c0011856:	e8 25 ff ff ff       	call   c0011780 <UnixFile::~UnixFile()>
c001185b:	83 c4 10             	add    esp,0x10
c001185e:	90                   	nop
c001185f:	83 c4 0c             	add    esp,0xc
c0011862:	c3                   	ret    
c0011863:	90                   	nop

c0011864 <ReservedFilename::~ReservedFilename()>:
c0011864:	83 ec 0c             	sub    esp,0xc
c0011867:	83 ec 0c             	sub    esp,0xc
c001186a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001186e:	e8 cd ff ff ff       	call   c0011840 <ReservedFilename::~ReservedFilename()>
c0011873:	83 c4 10             	add    esp,0x10
c0011876:	83 ec 08             	sub    esp,0x8
c0011879:	6a 0c                	push   0xc
c001187b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187f:	e8 83 14 00 00       	call   c0012d07 <operator delete(void*, unsigned long)>
c0011884:	83 c4 10             	add    esp,0x10
c0011887:	83 c4 0c             	add    esp,0xc
c001188a:	c3                   	ret    

c001188b <getFromFileDescriptor(int)>:
c001188b:	53                   	push   ebx
c001188c:	83 ec 08             	sub    esp,0x8
c001188f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011893:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011899:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001189f:	7f 2c                	jg     c00118cd <getFromFileDescriptor(int)+0x42>
c00118a1:	83 ec 0c             	sub    esp,0xc
c00118a4:	68 58 f5 02 c0       	push   0xc002f558
c00118a9:	e8 b2 7c 01 00       	call   c0029560 <LinkedList<UnixFile>::getFirstElement()>
c00118ae:	83 c4 10             	add    esp,0x10
c00118b1:	85 c0                	test   eax,eax
c00118b3:	75 04                	jne    c00118b9 <getFromFileDescriptor(int)+0x2e>
c00118b5:	31 c0                	xor    eax,eax
c00118b7:	eb 6e                	jmp    c0011927 <getFromFileDescriptor(int)+0x9c>
c00118b9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00118bc:	74 69                	je     c0011927 <getFromFileDescriptor(int)+0x9c>
c00118be:	52                   	push   edx
c00118bf:	52                   	push   edx
c00118c0:	50                   	push   eax
c00118c1:	68 58 f5 02 c0       	push   0xc002f558
c00118c6:	e8 3f 7d 01 00       	call   c002960a <LinkedList<UnixFile>::getNext(UnixFile*)>
c00118cb:	eb e1                	jmp    c00118ae <getFromFileDescriptor(int)+0x23>
c00118cd:	a1 4c f5 02 c0       	mov    eax,ds:0xc002f54c
c00118d2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00118d8:	74 4d                	je     c0011927 <getFromFileDescriptor(int)+0x9c>
c00118da:	a1 50 f5 02 c0       	mov    eax,ds:0xc002f550
c00118df:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00118e5:	74 40                	je     c0011927 <getFromFileDescriptor(int)+0x9c>
c00118e7:	a1 48 f5 02 c0       	mov    eax,ds:0xc002f548
c00118ec:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00118f2:	74 33                	je     c0011927 <getFromFileDescriptor(int)+0x9c>
c00118f4:	a1 44 f5 02 c0       	mov    eax,ds:0xc002f544
c00118f9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00118ff:	74 26                	je     c0011927 <getFromFileDescriptor(int)+0x9c>
c0011901:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011907:	83 f8 08             	cmp    eax,0x8
c001190a:	77 09                	ja     c0011915 <getFromFileDescriptor(int)+0x8a>
c001190c:	8b 04 85 20 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ae0]
c0011913:	eb 12                	jmp    c0011927 <getFromFileDescriptor(int)+0x9c>
c0011915:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001191b:	83 fb 08             	cmp    ebx,0x8
c001191e:	77 95                	ja     c00118b5 <getFromFileDescriptor(int)+0x2a>
c0011920:	8b 04 9d e0 f4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0b20]
c0011927:	83 c4 08             	add    esp,0x8
c001192a:	5b                   	pop    ebx
c001192b:	c3                   	ret    

c001192c <__static_initialization_and_destruction_0(int, int)>:
c001192c:	83 ec 0c             	sub    esp,0xc
c001192f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011934:	75 34                	jne    c001196a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011936:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001193e:	75 2a                	jne    c001196a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011940:	83 ec 0c             	sub    esp,0xc
c0011943:	68 58 f5 02 c0       	push   0xc002f558
c0011948:	e8 e7 7a 01 00       	call   c0029434 <LinkedList<UnixFile>::LinkedList()>
c001194d:	83 c4 10             	add    esp,0x10
c0011950:	83 ec 04             	sub    esp,0x4
c0011953:	68 10 e3 02 c0       	push   0xc002e310
c0011958:	68 58 f5 02 c0       	push   0xc002f558
c001195d:	68 32 94 02 c0       	push   0xc0029432
c0011962:	e8 1a 13 00 00       	call   c0012c81 <__cxa_atexit>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	90                   	nop
c001196b:	83 c4 0c             	add    esp,0xc
c001196e:	c3                   	ret    

c001196f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001196f:	83 ec 0c             	sub    esp,0xc
c0011972:	83 ec 08             	sub    esp,0x8
c0011975:	68 ff ff 00 00       	push   0xffff
c001197a:	6a 01                	push   0x1
c001197c:	e8 ab ff ff ff       	call   c001192c <__static_initialization_and_destruction_0(int, int)>
c0011981:	83 c4 10             	add    esp,0x10
c0011984:	83 c4 0c             	add    esp,0xc
c0011987:	c3                   	ret    

c0011988 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011988:	53                   	push   ebx
c0011989:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001198d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011991:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011997:	89 c8                	mov    eax,ecx
c0011999:	d1 e8                	shr    eax,1
c001199b:	03 05 88 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e388
c00119a1:	83 e1 01             	and    ecx,0x1
c00119a4:	8a 10                	mov    dl,BYTE PTR [eax]
c00119a6:	75 09                	jne    c00119b1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00119a8:	83 e2 f0             	and    edx,0xfffffff0
c00119ab:	09 da                	or     edx,ebx
c00119ad:	88 10                	mov    BYTE PTR [eax],dl
c00119af:	5b                   	pop    ebx
c00119b0:	c3                   	ret    
c00119b1:	c1 e3 04             	shl    ebx,0x4
c00119b4:	83 e2 0f             	and    edx,0xf
c00119b7:	09 da                	or     edx,ebx
c00119b9:	88 10                	mov    BYTE PTR [eax],dl
c00119bb:	5b                   	pop    ebx
c00119bc:	c3                   	ret    

c00119bd <Virt::getPageState(unsigned long)>:
c00119bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119c1:	8b 0d 88 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e388
c00119c7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00119cd:	89 d0                	mov    eax,edx
c00119cf:	d1 e8                	shr    eax,1
c00119d1:	83 e2 01             	and    edx,0x1
c00119d4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00119d7:	75 04                	jne    c00119dd <Virt::getPageState(unsigned long)+0x20>
c00119d9:	83 e0 0f             	and    eax,0xf
c00119dc:	c3                   	ret    
c00119dd:	c0 e8 04             	shr    al,0x4
c00119e0:	c3                   	ret    

c00119e1 <Virt::allocateKernelVirtualPages(int)>:
c00119e1:	55                   	push   ebp
c00119e2:	31 ed                	xor    ebp,ebp
c00119e4:	57                   	push   edi
c00119e5:	56                   	push   esi
c00119e6:	53                   	push   ebx
c00119e7:	31 db                	xor    ebx,ebx
c00119e9:	83 ec 1c             	sub    esp,0x1c
c00119ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119f0:	8b 3d 84 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e384
c00119f6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00119fb:	57                   	push   edi
c00119fc:	e8 bc ff ff ff       	call   c00119bd <Virt::getPageState(unsigned long)>
c0011a01:	5a                   	pop    edx
c0011a02:	84 c0                	test   al,al
c0011a04:	75 3a                	jne    c0011a40 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a06:	85 db                	test   ebx,ebx
c0011a08:	75 02                	jne    c0011a0c <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a0a:	89 fd                	mov    ebp,edi
c0011a0c:	43                   	inc    ebx
c0011a0d:	39 f3                	cmp    ebx,esi
c0011a0f:	74 5a                	je     c0011a6b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a11:	47                   	inc    edi
c0011a12:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a18:	76 31                	jbe    c0011a4b <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a1a:	c7 05 84 e3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e384,0xc8000
c0011a24:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a29:	75 28                	jne    c0011a53 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a2b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a30:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a35:	57                   	push   edi
c0011a36:	e8 82 ff ff ff       	call   c00119bd <Virt::getPageState(unsigned long)>
c0011a3b:	5a                   	pop    edx
c0011a3c:	84 c0                	test   al,al
c0011a3e:	74 c6                	je     c0011a06 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a40:	31 db                	xor    ebx,ebx
c0011a42:	47                   	inc    edi
c0011a43:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a49:	77 cf                	ja     c0011a1a <Virt::allocateKernelVirtualPages(int)+0x39>
c0011a4b:	89 3d 84 e3 02 c0    	mov    DWORD PTR ds:0xc002e384,edi
c0011a51:	eb a8                	jmp    c00119fb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011a53:	83 ec 0c             	sub    esp,0xc
c0011a56:	68 a4 b3 02 c0       	push   0xc002b3a4
c0011a5b:	e8 cf 8e 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0011a60:	8b 3d 84 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e384
c0011a66:	83 c4 10             	add    esp,0x10
c0011a69:	eb 90                	jmp    c00119fb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011a6b:	89 2d 84 e3 02 c0    	mov    DWORD PTR ds:0xc002e384,ebp
c0011a71:	4b                   	dec    ebx
c0011a72:	74 5f                	je     c0011ad3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011a74:	85 f6                	test   esi,esi
c0011a76:	74 3d                	je     c0011ab5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011a78:	89 e8                	mov    eax,ebp
c0011a7a:	31 db                	xor    ebx,ebx
c0011a7c:	8d 7e ff             	lea    edi,[esi-0x1]
c0011a7f:	eb 14                	jmp    c0011a95 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011a81:	6a 01                	push   0x1
c0011a83:	43                   	inc    ebx
c0011a84:	50                   	push   eax
c0011a85:	e8 fe fe ff ff       	call   c0011988 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a8a:	58                   	pop    eax
c0011a8b:	39 f3                	cmp    ebx,esi
c0011a8d:	5a                   	pop    edx
c0011a8e:	74 25                	je     c0011ab5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011a90:	a1 84 e3 02 c0       	mov    eax,ds:0xc002e384
c0011a95:	8d 50 01             	lea    edx,[eax+0x1]
c0011a98:	85 db                	test   ebx,ebx
c0011a9a:	89 15 84 e3 02 c0    	mov    DWORD PTR ds:0xc002e384,edx
c0011aa0:	74 20                	je     c0011ac2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011aa2:	39 df                	cmp    edi,ebx
c0011aa4:	75 db                	jne    c0011a81 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011aa6:	6a 03                	push   0x3
c0011aa8:	43                   	inc    ebx
c0011aa9:	50                   	push   eax
c0011aaa:	e8 d9 fe ff ff       	call   c0011988 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aaf:	59                   	pop    ecx
c0011ab0:	39 f3                	cmp    ebx,esi
c0011ab2:	58                   	pop    eax
c0011ab3:	75 db                	jne    c0011a90 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ab5:	83 c4 1c             	add    esp,0x1c
c0011ab8:	89 e8                	mov    eax,ebp
c0011aba:	5b                   	pop    ebx
c0011abb:	c1 e0 0c             	shl    eax,0xc
c0011abe:	5e                   	pop    esi
c0011abf:	5f                   	pop    edi
c0011ac0:	5d                   	pop    ebp
c0011ac1:	c3                   	ret    
c0011ac2:	6a 02                	push   0x2
c0011ac4:	bb 01 00 00 00       	mov    ebx,0x1
c0011ac9:	50                   	push   eax
c0011aca:	e8 b9 fe ff ff       	call   c0011988 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011acf:	58                   	pop    eax
c0011ad0:	5a                   	pop    edx
c0011ad1:	eb bd                	jmp    c0011a90 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ad3:	6a 04                	push   0x4
c0011ad5:	8d 45 01             	lea    eax,[ebp+0x1]
c0011ad8:	55                   	push   ebp
c0011ad9:	a3 84 e3 02 c0       	mov    ds:0xc002e384,eax
c0011ade:	e8 a5 fe ff ff       	call   c0011988 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ae3:	59                   	pop    ecx
c0011ae4:	89 e8                	mov    eax,ebp
c0011ae6:	5b                   	pop    ebx
c0011ae7:	c1 e0 0c             	shl    eax,0xc
c0011aea:	83 c4 1c             	add    esp,0x1c
c0011aed:	5b                   	pop    ebx
c0011aee:	5e                   	pop    esi
c0011aef:	5f                   	pop    edi
c0011af0:	5d                   	pop    ebp
c0011af1:	c3                   	ret    

c0011af2 <Virt::freeSwapfilePage(unsigned long)>:
c0011af2:	53                   	push   ebx
c0011af3:	8b 15 6c f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f56c
c0011af9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011afd:	b8 01 00 00 00       	mov    eax,0x1
c0011b02:	89 cb                	mov    ebx,ecx
c0011b04:	d3 e0                	shl    eax,cl
c0011b06:	c1 eb 05             	shr    ebx,0x5
c0011b09:	f7 d0                	not    eax
c0011b0b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b0e:	5b                   	pop    ebx
c0011b0f:	c3                   	ret    

c0011b10 <Virt::swapIDToSector(unsigned long)>:
c0011b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b14:	0f af 05 8c e3 02 c0 	imul   eax,DWORD PTR ds:0xc002e38c
c0011b1b:	03 05 94 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e394
c0011b21:	c3                   	ret    

c0011b22 <Virt::allocateSwapfilePage()>:
c0011b22:	55                   	push   ebp
c0011b23:	31 d2                	xor    edx,edx
c0011b25:	57                   	push   edi
c0011b26:	56                   	push   esi
c0011b27:	53                   	push   ebx
c0011b28:	83 ec 0c             	sub    esp,0xc
c0011b2b:	8b 0d 8c e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e38c
c0011b31:	a1 90 e3 02 c0       	mov    eax,ds:0xc002e390
c0011b36:	f7 f1                	div    ecx
c0011b38:	39 0d 90 e3 02 c0    	cmp    DWORD PTR ds:0xc002e390,ecx
c0011b3e:	72 2d                	jb     c0011b6d <Virt::allocateSwapfilePage()+0x4b>
c0011b40:	8b 35 6c f5 02 c0    	mov    esi,DWORD PTR ds:0xc002f56c
c0011b46:	8b 16                	mov    edx,DWORD PTR [esi]
c0011b48:	f6 c2 01             	test   dl,0x1
c0011b4b:	74 3c                	je     c0011b89 <Virt::allocateSwapfilePage()+0x67>
c0011b4d:	31 c9                	xor    ecx,ecx
c0011b4f:	bf 01 00 00 00       	mov    edi,0x1
c0011b54:	eb 12                	jmp    c0011b68 <Virt::allocateSwapfilePage()+0x46>
c0011b56:	89 fd                	mov    ebp,edi
c0011b58:	89 ca                	mov    edx,ecx
c0011b5a:	d3 e5                	shl    ebp,cl
c0011b5c:	c1 ea 05             	shr    edx,0x5
c0011b5f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011b62:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011b64:	85 ea                	test   edx,ebp
c0011b66:	74 2a                	je     c0011b92 <Virt::allocateSwapfilePage()+0x70>
c0011b68:	41                   	inc    ecx
c0011b69:	39 c8                	cmp    eax,ecx
c0011b6b:	77 e9                	ja     c0011b56 <Virt::allocateSwapfilePage()+0x34>
c0011b6d:	83 ec 0c             	sub    esp,0xc
c0011b70:	68 2b b5 02 c0       	push   0xc002b52b
c0011b75:	e8 b5 8d 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0011b7a:	83 c4 10             	add    esp,0x10
c0011b7d:	31 c9                	xor    ecx,ecx
c0011b7f:	83 c4 0c             	add    esp,0xc
c0011b82:	89 c8                	mov    eax,ecx
c0011b84:	5b                   	pop    ebx
c0011b85:	5e                   	pop    esi
c0011b86:	5f                   	pop    edi
c0011b87:	5d                   	pop    ebp
c0011b88:	c3                   	ret    
c0011b89:	89 f3                	mov    ebx,esi
c0011b8b:	bd 01 00 00 00       	mov    ebp,0x1
c0011b90:	31 c9                	xor    ecx,ecx
c0011b92:	09 ea                	or     edx,ebp
c0011b94:	89 c8                	mov    eax,ecx
c0011b96:	89 13                	mov    DWORD PTR [ebx],edx
c0011b98:	83 c4 0c             	add    esp,0xc
c0011b9b:	5b                   	pop    ebx
c0011b9c:	5e                   	pop    esi
c0011b9d:	5f                   	pop    edi
c0011b9e:	5d                   	pop    ebp
c0011b9f:	c3                   	ret    

c0011ba0 <Virt::virtualMemorySetup()>:
c0011ba0:	53                   	push   ebx
c0011ba1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011ba6:	83 ec 08             	sub    esp,0x8
c0011ba9:	6a 0f                	push   0xf
c0011bab:	53                   	push   ebx
c0011bac:	43                   	inc    ebx
c0011bad:	e8 d6 fd ff ff       	call   c0011988 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bb2:	59                   	pop    ecx
c0011bb3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011bb9:	58                   	pop    eax
c0011bba:	75 ed                	jne    c0011ba9 <Virt::virtualMemorySetup()+0x9>
c0011bbc:	83 ec 08             	sub    esp,0x8
c0011bbf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bc4:	68 00 00 00 c8       	push   0xc8000000
c0011bc9:	68 42 b5 02 c0       	push   0xc002b542
c0011bce:	e8 14 12 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0011bd3:	58                   	pop    eax
c0011bd4:	5a                   	pop    edx
c0011bd5:	68 00 f0 ff ef       	push   0xeffff000
c0011bda:	68 56 b5 02 c0       	push   0xc002b556
c0011bdf:	e8 03 12 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0011be4:	83 c4 10             	add    esp,0x10
c0011be7:	83 ec 08             	sub    esp,0x8
c0011bea:	6a 00                	push   0x0
c0011bec:	53                   	push   ebx
c0011bed:	43                   	inc    ebx
c0011bee:	e8 95 fd ff ff       	call   c0011988 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bf3:	83 c4 10             	add    esp,0x10
c0011bf6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011bfc:	75 e9                	jne    c0011be7 <Virt::virtualMemorySetup()+0x47>
c0011bfe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c03:	83 ec 08             	sub    esp,0x8
c0011c06:	6a 0f                	push   0xf
c0011c08:	53                   	push   ebx
c0011c09:	43                   	inc    ebx
c0011c0a:	e8 79 fd ff ff       	call   c0011988 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0f:	83 c4 10             	add    esp,0x10
c0011c12:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c18:	75 e9                	jne    c0011c03 <Virt::virtualMemorySetup()+0x63>
c0011c1a:	83 c4 08             	add    esp,0x8
c0011c1d:	5b                   	pop    ebx
c0011c1e:	c3                   	ret    

c0011c1f <Virt::swappingSetup()>:
c0011c1f:	c3                   	ret    

c0011c20 <Virt::setupPageSwapping(int)>:
c0011c20:	57                   	push   edi
c0011c21:	56                   	push   esi
c0011c22:	53                   	push   ebx
c0011c23:	83 ec 1c             	sub    esp,0x1c
c0011c26:	68 6a b5 02 c0       	push   0xc002b56a
c0011c2b:	e8 b7 11 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0011c30:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c37:	e8 50 dc ff ff       	call   c000f88c <malloc>
c0011c3c:	83 c4 0c             	add    esp,0xc
c0011c3f:	89 c6                	mov    esi,eax
c0011c41:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c0011c47:	68 7e b5 02 c0       	push   0xc002b57e
c0011c4c:	50                   	push   eax
c0011c4d:	e8 f4 16 00 00       	call   c0013346 <File::File(char const*, Process*)>
c0011c52:	89 34 24             	mov    DWORD PTR [esp],esi
c0011c55:	e8 c8 18 00 00       	call   c0013522 <File::unlink()>
c0011c5a:	59                   	pop    ecx
c0011c5b:	5b                   	pop    ebx
c0011c5c:	6a 12                	push   0x12
c0011c5e:	56                   	push   esi
c0011c5f:	e8 46 17 00 00       	call   c00133aa <File::open(FileOpenMode)>
c0011c64:	83 c4 10             	add    esp,0x10
c0011c67:	85 c0                	test   eax,eax
c0011c69:	0f 85 5b 01 00 00    	jne    c0011dca <Virt::setupPageSwapping(int)+0x1aa>
c0011c6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c7b:	c1 e3 08             	shl    ebx,0x8
c0011c7e:	83 ec 0c             	sub    esp,0xc
c0011c81:	68 00 00 01 00       	push   0x10000
c0011c86:	e8 01 dc ff ff       	call   c000f88c <malloc>
c0011c8b:	83 c4 0c             	add    esp,0xc
c0011c8e:	89 c7                	mov    edi,eax
c0011c90:	68 00 00 01 00       	push   0x10000
c0011c95:	68 ee 00 00 00       	push   0xee
c0011c9a:	50                   	push   eax
c0011c9b:	e8 b0 ea fe ff       	call   c0000750 <memset>
c0011ca0:	83 c4 10             	add    esp,0x10
c0011ca3:	85 db                	test   ebx,ebx
c0011ca5:	79 03                	jns    c0011caa <Virt::setupPageSwapping(int)+0x8a>
c0011ca7:	83 c3 0f             	add    ebx,0xf
c0011caa:	c1 fb 04             	sar    ebx,0x4
c0011cad:	4b                   	dec    ebx
c0011cae:	83 fb ff             	cmp    ebx,0xffffffff
c0011cb1:	74 4f                	je     c0011d02 <Virt::setupPageSwapping(int)+0xe2>
c0011cb3:	83 ec 0c             	sub    esp,0xc
c0011cb6:	8b 06                	mov    eax,DWORD PTR [esi]
c0011cb8:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011cbc:	52                   	push   edx
c0011cbd:	57                   	push   edi
c0011cbe:	6a 00                	push   0x0
c0011cc0:	68 00 00 01 00       	push   0x10000
c0011cc5:	56                   	push   esi
c0011cc6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011cc9:	83 c4 20             	add    esp,0x20
c0011ccc:	85 c0                	test   eax,eax
c0011cce:	0f 85 e0 00 00 00    	jne    c0011db4 <Virt::setupPageSwapping(int)+0x194>
c0011cd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cd8:	3d 00 00 01 00       	cmp    eax,0x10000
c0011cdd:	74 ce                	je     c0011cad <Virt::setupPageSwapping(int)+0x8d>
c0011cdf:	83 ec 08             	sub    esp,0x8
c0011ce2:	4b                   	dec    ebx
c0011ce3:	50                   	push   eax
c0011ce4:	68 d1 b5 02 c0       	push   0xc002b5d1
c0011ce9:	e8 f9 10 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0011cee:	c7 04 24 da b5 02 c0 	mov    DWORD PTR [esp],0xc002b5da
c0011cf5:	e8 35 8c 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0011cfa:	83 c4 10             	add    esp,0x10
c0011cfd:	83 fb ff             	cmp    ebx,0xffffffff
c0011d00:	75 b1                	jne    c0011cb3 <Virt::setupPageSwapping(int)+0x93>
c0011d02:	83 ec 0c             	sub    esp,0xc
c0011d05:	56                   	push   esi
c0011d06:	e8 fd 16 00 00       	call   c0013408 <File::close()>
c0011d0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d0e:	e8 99 db ff ff       	call   c000f8ac <rfree>
c0011d13:	83 c4 10             	add    esp,0x10
c0011d16:	85 f6                	test   esi,esi
c0011d18:	74 0c                	je     c0011d26 <Virt::setupPageSwapping(int)+0x106>
c0011d1a:	83 ec 0c             	sub    esp,0xc
c0011d1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d1f:	56                   	push   esi
c0011d20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	83 ec 08             	sub    esp,0x8
c0011d29:	a1 08 fa 02 c0       	mov    eax,ds:0xc002fa08
c0011d2e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d34:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d36:	68 7e b5 02 c0       	push   0xc002b57e
c0011d3b:	50                   	push   eax
c0011d3c:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d3f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d43:	c6 05 98 e3 02 c0 43 	mov    BYTE PTR ds:0xc002e398,0x43
c0011d4a:	c1 e2 0b             	shl    edx,0xb
c0011d4d:	a3 94 e3 02 c0       	mov    ds:0xc002e394,eax
c0011d52:	89 15 90 e3 02 c0    	mov    DWORD PTR ds:0xc002e390,edx
c0011d58:	c7 05 8c e3 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e38c,0x8
c0011d62:	c1 ea 08             	shr    edx,0x8
c0011d65:	89 14 24             	mov    DWORD PTR [esp],edx
c0011d68:	e8 1f db ff ff       	call   c000f88c <malloc>
c0011d6d:	83 c4 0c             	add    esp,0xc
c0011d70:	89 c1                	mov    ecx,eax
c0011d72:	a3 6c f5 02 c0       	mov    ds:0xc002f56c,eax
c0011d77:	31 d2                	xor    edx,edx
c0011d79:	a1 90 e3 02 c0       	mov    eax,ds:0xc002e390
c0011d7e:	f7 35 8c e3 02 c0    	div    DWORD PTR ds:0xc002e38c
c0011d84:	c1 e8 05             	shr    eax,0x5
c0011d87:	50                   	push   eax
c0011d88:	6a 00                	push   0x0
c0011d8a:	51                   	push   ecx
c0011d8b:	e8 c0 e9 fe ff       	call   c0000750 <memset>
c0011d90:	58                   	pop    eax
c0011d91:	a1 90 e3 02 c0       	mov    eax,ds:0xc002e390
c0011d96:	5a                   	pop    edx
c0011d97:	31 d2                	xor    edx,edx
c0011d99:	f7 35 8c e3 02 c0    	div    DWORD PTR ds:0xc002e38c
c0011d9f:	c1 e8 05             	shr    eax,0x5
c0011da2:	50                   	push   eax
c0011da3:	68 e0 b5 02 c0       	push   0xc002b5e0
c0011da8:	e8 3a 10 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0011dad:	83 c4 20             	add    esp,0x20
c0011db0:	5b                   	pop    ebx
c0011db1:	5e                   	pop    esi
c0011db2:	5f                   	pop    edi
c0011db3:	c3                   	ret    
c0011db4:	83 ec 08             	sub    esp,0x8
c0011db7:	50                   	push   eax
c0011db8:	68 b9 b5 02 c0       	push   0xc002b5b9
c0011dbd:	e8 25 10 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0011dc2:	83 c4 10             	add    esp,0x10
c0011dc5:	e9 0a ff ff ff       	jmp    c0011cd4 <Virt::setupPageSwapping(int)+0xb4>
c0011dca:	83 ec 08             	sub    esp,0x8
c0011dcd:	50                   	push   eax
c0011dce:	68 95 b5 02 c0       	push   0xc002b595
c0011dd3:	e8 0f 10 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0011dd8:	c7 04 24 9e b5 02 c0 	mov    DWORD PTR [esp],0xc002b59e
c0011ddf:	e8 4b 8b 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	e9 83 fe ff ff       	jmp    c0011c6f <Virt::setupPageSwapping(int)+0x4f>

c0011dec <VAS::VAS()>:
c0011dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e06:	a3 70 f5 02 c0       	mov    ds:0xc002f570,eax
c0011e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e17:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e1e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e25:	90                   	nop
c0011e26:	c3                   	ret    
c0011e27:	90                   	nop

c0011e28 <VAS::VAS(VAS*)>:
c0011e28:	83 ec 0c             	sub    esp,0xc
c0011e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e3a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e41:	83 ec 0c             	sub    esp,0xc
c0011e44:	68 c4 b3 02 c0       	push   0xc002b3c4
c0011e49:	e8 e1 8a 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0011e4e:	83 c4 10             	add    esp,0x10
c0011e51:	90                   	nop
c0011e52:	83 c4 0c             	add    esp,0xc
c0011e55:	c3                   	ret    

c0011e56 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e5a:	89 c2                	mov    edx,eax
c0011e5c:	c1 e8 0a             	shr    eax,0xa
c0011e5f:	c1 ea 16             	shr    edx,0x16
c0011e62:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e67:	19 c9                	sbb    ecx,ecx
c0011e69:	c1 e2 0c             	shl    edx,0xc
c0011e6c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e72:	25 fc 0f 00 00       	and    eax,0xffc
c0011e77:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e7e:	01 d0                	add    eax,edx
c0011e80:	c3                   	ret    
c0011e81:	90                   	nop

c0011e82 <VAS::getPageTableEntry(unsigned long)>:
c0011e82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e86:	89 ca                	mov    edx,ecx
c0011e88:	c1 e9 0a             	shr    ecx,0xa
c0011e8b:	c1 ea 16             	shr    edx,0x16
c0011e8e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e94:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e9a:	c1 e0 0c             	shl    eax,0xc
c0011e9d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ea0:	c3                   	ret    

c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ea1:	57                   	push   edi
c0011ea2:	56                   	push   esi
c0011ea3:	be 01 00 00 00       	mov    esi,0x1
c0011ea8:	53                   	push   ebx
c0011ea9:	83 ec 10             	sub    esp,0x10
c0011eac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011eb0:	c1 eb 0c             	shr    ebx,0xc
c0011eb3:	eb 3f                	jmp    c0011ef4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011eb5:	83 ec 08             	sub    esp,0x8
c0011eb8:	57                   	push   edi
c0011eb9:	ff 35 70 f5 02 c0    	push   DWORD PTR ds:0xc002f570
c0011ebf:	e8 be ff ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ec9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ecd:	f6 c4 04             	test   ah,0x4
c0011ed0:	75 5f                	jne    c0011f31 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ed2:	80 fa 04             	cmp    dl,0x4
c0011ed5:	74 78                	je     c0011f4f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ed7:	80 fa 02             	cmp    dl,0x2
c0011eda:	0f 84 88 00 00 00    	je     c0011f68 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ee0:	80 fa 03             	cmp    dl,0x3
c0011ee3:	0f 84 ad 00 00 00    	je     c0011f96 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ee9:	fe ca                	dec    dl
c0011eeb:	0f 84 92 00 00 00    	je     c0011f83 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ef1:	43                   	inc    ebx
c0011ef2:	31 f6                	xor    esi,esi
c0011ef4:	53                   	push   ebx
c0011ef5:	89 df                	mov    edi,ebx
c0011ef7:	e8 c1 fa ff ff       	call   c00119bd <Virt::getPageState(unsigned long)>
c0011efc:	c1 e7 0c             	shl    edi,0xc
c0011eff:	59                   	pop    ecx
c0011f00:	84 c0                	test   al,al
c0011f02:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f06:	75 ad                	jne    c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f08:	83 ec 0c             	sub    esp,0xc
c0011f0b:	68 fb b5 02 c0       	push   0xc002b5fb
c0011f10:	e8 1a 8a 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0011f15:	58                   	pop    eax
c0011f16:	5a                   	pop    edx
c0011f17:	57                   	push   edi
c0011f18:	ff 35 70 f5 02 c0    	push   DWORD PTR ds:0xc002f570
c0011f1e:	e8 5f ff ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0011f23:	83 c4 10             	add    esp,0x10
c0011f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f28:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f2c:	f6 c4 04             	test   ah,0x4
c0011f2f:	74 c0                	je     c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f31:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f35:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f3a:	83 ec 0c             	sub    esp,0xc
c0011f3d:	50                   	push   eax
c0011f3e:	e8 dc de ff ff       	call   c000fe1f <Phys::freePage(unsigned long)>
c0011f43:	83 c4 10             	add    esp,0x10
c0011f46:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f4a:	80 fa 04             	cmp    dl,0x4
c0011f4d:	75 88                	jne    c0011ed7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f4f:	89 f0                	mov    eax,esi
c0011f51:	84 c0                	test   al,al
c0011f53:	75 47                	jne    c0011f9c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f55:	c7 44 24 20 e8 b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b3e8
c0011f5d:	83 c4 10             	add    esp,0x10
c0011f60:	5b                   	pop    ebx
c0011f61:	5e                   	pop    esi
c0011f62:	5f                   	pop    edi
c0011f63:	e9 c7 89 00 00       	jmp    c001a92f <Krnl::panic(char const*)>
c0011f68:	89 f0                	mov    eax,esi
c0011f6a:	84 c0                	test   al,al
c0011f6c:	75 15                	jne    c0011f83 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f6e:	83 ec 0c             	sub    esp,0xc
c0011f71:	68 17 b6 02 c0       	push   0xc002b617
c0011f76:	e8 b4 89 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	e9 6e ff ff ff       	jmp    c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f83:	83 ec 08             	sub    esp,0x8
c0011f86:	6a 00                	push   0x0
c0011f88:	53                   	push   ebx
c0011f89:	e8 fa f9 ff ff       	call   c0011988 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f8e:	83 c4 10             	add    esp,0x10
c0011f91:	e9 5b ff ff ff       	jmp    c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f96:	89 f0                	mov    eax,esi
c0011f98:	84 c0                	test   al,al
c0011f9a:	75 15                	jne    c0011fb1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f9c:	83 ec 08             	sub    esp,0x8
c0011f9f:	6a 00                	push   0x0
c0011fa1:	53                   	push   ebx
c0011fa2:	e8 e1 f9 ff ff       	call   c0011988 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	83 c4 10             	add    esp,0x10
c0011fad:	5b                   	pop    ebx
c0011fae:	5e                   	pop    esi
c0011faf:	5f                   	pop    edi
c0011fb0:	c3                   	ret    
c0011fb1:	c7 44 24 20 33 b6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b633
c0011fb9:	83 c4 10             	add    esp,0x10
c0011fbc:	5b                   	pop    ebx
c0011fbd:	5e                   	pop    esi
c0011fbe:	5f                   	pop    edi
c0011fbf:	e9 6b 89 00 00       	jmp    c001a92f <Krnl::panic(char const*)>

c0011fc4 <VAS::freeAllocatedPages(unsigned long)>:
c0011fc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fcc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fd0:	74 09                	je     c0011fdb <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fd6:	e9 c6 fe ff ff       	jmp    c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fdb:	c7 44 24 04 0c b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b40c
c0011fe3:	e9 ff 0d 00 00       	jmp    c0012de7 <Dbg::kprintf(char const*, ...)>

c0011fe8 <VAS::virtualToPhysical(unsigned long)>:
c0011fe8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fec:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ff0:	e8 8d fe ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0011ff5:	5a                   	pop    edx
c0011ff6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff8:	59                   	pop    ecx
c0011ff9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ffe:	c3                   	ret    
c0011fff:	90                   	nop

c0012000 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012000:	55                   	push   ebp
c0012001:	57                   	push   edi
c0012002:	56                   	push   esi
c0012003:	53                   	push   ebx
c0012004:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012008:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001200c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012010:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012014:	85 db                	test   ebx,ebx
c0012016:	7e 22                	jle    c001203a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012018:	c1 e3 0c             	shl    ebx,0xc
c001201b:	01 f3                	add    ebx,esi
c001201d:	56                   	push   esi
c001201e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012024:	55                   	push   ebp
c0012025:	e8 58 fe ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c001202a:	5a                   	pop    edx
c001202b:	59                   	pop    ecx
c001202c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001202e:	21 f9                	and    ecx,edi
c0012030:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012034:	39 f3                	cmp    ebx,esi
c0012036:	89 08                	mov    DWORD PTR [eax],ecx
c0012038:	75 e3                	jne    c001201d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001203a:	5b                   	pop    ebx
c001203b:	5e                   	pop    esi
c001203c:	5f                   	pop    edi
c001203d:	5d                   	pop    ebp
c001203e:	c3                   	ret    
c001203f:	90                   	nop

c0012040 <VAS::setToWriteCombining(unsigned long, int)>:
c0012040:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0012045:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001204b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012052:	75 01                	jne    c0012055 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012054:	c3                   	ret    
c0012055:	68 80 00 00 00       	push   0x80
c001205a:	6a ff                	push   0xffffffff
c001205c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012068:	e8 93 ff ff ff       	call   c0012000 <VAS::reflagRange(unsigned long, int, int, int)>
c001206d:	83 c4 14             	add    esp,0x14
c0012070:	c3                   	ret    
c0012071:	90                   	nop

c0012072 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012072:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001207b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001207e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012082:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012085:	19 c0                	sbb    eax,eax
c0012087:	83 ca 03             	or     edx,0x3
c001208a:	83 e0 fc             	and    eax,0xfffffffc
c001208d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012094:	0f 20 d8             	mov    eax,cr3
c0012097:	0f 22 d8             	mov    cr3,eax
c001209a:	c3                   	ret    
c001209b:	90                   	nop

c001209c <VAS::~VAS()>:
c001209c:	83 ec 2c             	sub    esp,0x2c
c001209f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120a7:	fa                   	cli    
c00120a8:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c00120ad:	40                   	inc    eax
c00120ae:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c00120b3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00120ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120bd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00120c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00120c7:	6a 01                	push   0x1
c00120c9:	50                   	push   eax
c00120ca:	e8 a3 ff ff ff       	call   c0012072 <VAS::mapOtherVASIn(bool, VAS*)>
c00120cf:	83 c4 0c             	add    esp,0xc
c00120d2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120da:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120e2:	0f 8f d4 00 00 00    	jg     c00121bc <VAS::~VAS()+0x120>
c00120e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120f3:	c1 e2 02             	shl    edx,0x2
c00120f6:	01 d0                	add    eax,edx
c00120f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00120fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012102:	83 e0 01             	and    eax,0x1
c0012105:	0f 84 a8 00 00 00    	je     c00121b3 <VAS::~VAS()+0x117>
c001210b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012113:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001211b:	7f 72                	jg     c001218f <VAS::~VAS()+0xf3>
c001211d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012121:	c1 e0 0a             	shl    eax,0xa
c0012124:	89 c2                	mov    edx,eax
c0012126:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001212a:	01 d0                	add    eax,edx
c001212c:	c1 e0 0c             	shl    eax,0xc
c001212f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012133:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012138:	8b 00                	mov    eax,DWORD PTR [eax]
c001213a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001213d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012143:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012147:	6a 01                	push   0x1
c0012149:	50                   	push   eax
c001214a:	e8 07 fd ff ff       	call   c0011e56 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001214f:	83 c4 0c             	add    esp,0xc
c0012152:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012156:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001215a:	8b 00                	mov    eax,DWORD PTR [eax]
c001215c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012164:	25 01 04 00 00       	and    eax,0x401
c0012169:	3d 01 04 00 00       	cmp    eax,0x401
c001216e:	75 19                	jne    c0012189 <VAS::~VAS()+0xed>
c0012170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012174:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012179:	83 ec 0c             	sub    esp,0xc
c001217c:	50                   	push   eax
c001217d:	e8 9d dc ff ff       	call   c000fe1f <Phys::freePage(unsigned long)>
c0012182:	83 c4 10             	add    esp,0x10
c0012185:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012189:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001218d:	eb 84                	jmp    c0012113 <VAS::~VAS()+0x77>
c001218f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012193:	25 00 04 00 00       	and    eax,0x400
c0012198:	74 19                	je     c00121b3 <VAS::~VAS()+0x117>
c001219a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001219e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121a3:	83 ec 0c             	sub    esp,0xc
c00121a6:	50                   	push   eax
c00121a7:	e8 73 dc ff ff       	call   c000fe1f <Phys::freePage(unsigned long)>
c00121ac:	83 c4 10             	add    esp,0x10
c00121af:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121b3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121b7:	e9 1e ff ff ff       	jmp    c00120da <VAS::~VAS()+0x3e>
c00121bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121c3:	83 ec 0c             	sub    esp,0xc
c00121c6:	50                   	push   eax
c00121c7:	e8 d5 fc ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c00121cc:	83 c4 10             	add    esp,0x10
c00121cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	50                   	push   eax
c00121da:	e8 40 dc ff ff       	call   c000fe1f <Phys::freePage(unsigned long)>
c00121df:	83 c4 10             	add    esp,0x10
c00121e2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121ea:	c1 e0 02             	shl    eax,0x2
c00121ed:	83 ec 08             	sub    esp,0x8
c00121f0:	50                   	push   eax
c00121f1:	68 30 b4 02 c0       	push   0xc002b430
c00121f6:	e8 ec 0b 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00121fb:	83 c4 10             	add    esp,0x10
c00121fe:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0012203:	48                   	dec    eax
c0012204:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0012209:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001220e:	85 c0                	test   eax,eax
c0012210:	75 01                	jne    c0012213 <VAS::~VAS()+0x177>
c0012212:	fb                   	sti    
c0012213:	90                   	nop
c0012214:	83 c4 2c             	add    esp,0x2c
c0012217:	c3                   	ret    

c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012218:	55                   	push   ebp
c0012219:	57                   	push   edi
c001221a:	56                   	push   esi
c001221b:	53                   	push   ebx
c001221c:	83 ec 1c             	sub    esp,0x1c
c001221f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012223:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012227:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001222d:	77 08                	ja     c0012237 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001222f:	0f 20 d8             	mov    eax,cr3
c0012232:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012235:	75 47                	jne    c001227e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012237:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001223b:	09 d8                	or     eax,ebx
c001223d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012242:	75 57                	jne    c001229b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012244:	89 de                	mov    esi,ebx
c0012246:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012249:	c1 ee 16             	shr    esi,0x16
c001224c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012253:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012257:	74 54                	je     c00122ad <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012259:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001225d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012263:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012267:	c1 e6 0c             	shl    esi,0xc
c001226a:	c1 eb 0a             	shr    ebx,0xa
c001226d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012273:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012276:	83 c4 1c             	add    esp,0x1c
c0012279:	5b                   	pop    ebx
c001227a:	5e                   	pop    esi
c001227b:	5f                   	pop    edi
c001227c:	5d                   	pop    ebp
c001227d:	c3                   	ret    
c001227e:	83 ec 0c             	sub    esp,0xc
c0012281:	68 50 b4 02 c0       	push   0xc002b450
c0012286:	e8 5c 0b 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001228b:	83 c4 10             	add    esp,0x10
c001228e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012292:	09 d8                	or     eax,ebx
c0012294:	a9 ff 0f 00 00       	test   eax,0xfff
c0012299:	74 a9                	je     c0012244 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001229b:	83 ec 0c             	sub    esp,0xc
c001229e:	68 b8 b4 02 c0       	push   0xc002b4b8
c00122a3:	e8 87 86 00 00       	call   c001a92f <Krnl::panic(char const*)>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	eb 97                	jmp    c0012244 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122b1:	e8 f3 db ff ff       	call   c000fea9 <Phys::allocatePage()>
c00122b6:	83 ec 0c             	sub    esp,0xc
c00122b9:	89 c5                	mov    ebp,eax
c00122bb:	8b 0d 70 f5 02 c0    	mov    ecx,DWORD PTR ds:0xc002f570
c00122c1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00122c5:	6a 01                	push   0x1
c00122c7:	e8 15 f7 ff ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c00122cc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122d3:	6a 01                	push   0x1
c00122d5:	50                   	push   eax
c00122d6:	55                   	push   ebp
c00122d7:	81 cd 07 04 00 00    	or     ebp,0x407
c00122dd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122e1:	51                   	push   ecx
c00122e2:	e8 27 02 00 00       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122e7:	83 c4 1c             	add    esp,0x1c
c00122ea:	68 00 10 00 00       	push   0x1000
c00122ef:	6a 00                	push   0x0
c00122f1:	50                   	push   eax
c00122f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122f6:	e8 55 e4 fe ff       	call   c0000750 <memset>
c00122fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012302:	e8 9a fb ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012307:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001230b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001230e:	83 c4 10             	add    esp,0x10
c0012311:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012314:	e9 40 ff ff ff       	jmp    c0012259 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012319:	90                   	nop

c001231a <VAS::allocatePages(int, int)>:
c001231a:	55                   	push   ebp
c001231b:	57                   	push   edi
c001231c:	56                   	push   esi
c001231d:	53                   	push   ebx
c001231e:	83 ec 1c             	sub    esp,0x1c
c0012321:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012325:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001232a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012330:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012336:	83 e0 01             	and    eax,0x1
c0012339:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001233d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012341:	0f 85 cc 00 00 00    	jne    c0012413 <VAS::allocatePages(int, int)+0xf9>
c0012347:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001234a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001234e:	85 c0                	test   eax,eax
c0012350:	0f 84 a1 00 00 00    	je     c00123f7 <VAS::allocatePages(int, int)+0xdd>
c0012356:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001235a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001235e:	c1 e6 0c             	shl    esi,0xc
c0012361:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012365:	85 c0                	test   eax,eax
c0012367:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001236a:	7e 33                	jle    c001239f <VAS::allocatePages(int, int)+0x85>
c001236c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012370:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012374:	81 cd 00 04 00 00    	or     ebp,0x400
c001237a:	e8 2a db ff ff       	call   c000fea9 <Phys::allocatePage()>
c001237f:	55                   	push   ebp
c0012380:	53                   	push   ebx
c0012381:	50                   	push   eax
c0012382:	57                   	push   edi
c0012383:	e8 90 fe ff ff       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012388:	83 c4 10             	add    esp,0x10
c001238b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012390:	74 03                	je     c0012395 <VAS::allocatePages(int, int)+0x7b>
c0012392:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012395:	81 c3 00 10 00 00    	add    ebx,0x1000
c001239b:	39 de                	cmp    esi,ebx
c001239d:	75 db                	jne    c001237a <VAS::allocatePages(int, int)+0x60>
c001239f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123a4:	75 12                	jne    c00123b8 <VAS::allocatePages(int, int)+0x9e>
c00123a6:	0f 20 d8             	mov    eax,cr3
c00123a9:	0f 22 d8             	mov    cr3,eax
c00123ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123b0:	83 c4 1c             	add    esp,0x1c
c00123b3:	5b                   	pop    ebx
c00123b4:	5e                   	pop    esi
c00123b5:	5f                   	pop    edi
c00123b6:	5d                   	pop    ebp
c00123b7:	c3                   	ret    
c00123b8:	c1 ee 0a             	shr    esi,0xa
c00123bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123bf:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123c5:	c1 eb 0a             	shr    ebx,0xa
c00123c8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123ce:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123d4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123da:	39 c3                	cmp    ebx,eax
c00123dc:	77 ce                	ja     c00123ac <VAS::allocatePages(int, int)+0x92>
c00123de:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123e1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123e7:	39 d8                	cmp    eax,ebx
c00123e9:	73 f3                	jae    c00123de <VAS::allocatePages(int, int)+0xc4>
c00123eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123ef:	83 c4 1c             	add    esp,0x1c
c00123f2:	5b                   	pop    ebx
c00123f3:	5e                   	pop    esi
c00123f4:	5f                   	pop    edi
c00123f5:	5d                   	pop    ebp
c00123f6:	c3                   	ret    
c00123f7:	83 ec 0c             	sub    esp,0xc
c00123fa:	68 dc b4 02 c0       	push   0xc002b4dc
c00123ff:	e8 2b 85 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0012404:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012407:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	e9 43 ff ff ff       	jmp    c0012356 <VAS::allocatePages(int, int)+0x3c>
c0012413:	83 ec 0c             	sub    esp,0xc
c0012416:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001241a:	e8 c2 f5 ff ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c001241f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012423:	83 c4 10             	add    esp,0x10
c0012426:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001242b:	0f 87 9b 00 00 00    	ja     c00124cc <VAS::allocatePages(int, int)+0x1b2>
c0012431:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012435:	85 d2                	test   edx,edx
c0012437:	7e 3c                	jle    c0012475 <VAS::allocatePages(int, int)+0x15b>
c0012439:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001243d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012441:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012445:	c1 e5 0c             	shl    ebp,0xc
c0012448:	81 ce 00 04 00 00    	or     esi,0x400
c001244e:	01 dd                	add    ebp,ebx
c0012450:	e8 54 da ff ff       	call   c000fea9 <Phys::allocatePage()>
c0012455:	56                   	push   esi
c0012456:	53                   	push   ebx
c0012457:	50                   	push   eax
c0012458:	57                   	push   edi
c0012459:	e8 ba fd ff ff       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c001245e:	83 c4 10             	add    esp,0x10
c0012461:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012466:	74 03                	je     c001246b <VAS::allocatePages(int, int)+0x151>
c0012468:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001246b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012471:	39 dd                	cmp    ebp,ebx
c0012473:	75 db                	jne    c0012450 <VAS::allocatePages(int, int)+0x136>
c0012475:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001247a:	0f 84 26 ff ff ff    	je     c00123a6 <VAS::allocatePages(int, int)+0x8c>
c0012480:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012484:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012488:	89 d3                	mov    ebx,edx
c001248a:	c1 e0 0c             	shl    eax,0xc
c001248d:	c1 eb 0a             	shr    ebx,0xa
c0012490:	01 d0                	add    eax,edx
c0012492:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012498:	c1 e8 0a             	shr    eax,0xa
c001249b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124a6:	2d 00 00 40 00       	sub    eax,0x400000
c00124ab:	39 c3                	cmp    ebx,eax
c00124ad:	0f 87 f9 fe ff ff    	ja     c00123ac <VAS::allocatePages(int, int)+0x92>
c00124b3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124bc:	39 d8                	cmp    eax,ebx
c00124be:	73 f3                	jae    c00124b3 <VAS::allocatePages(int, int)+0x199>
c00124c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124c4:	83 c4 1c             	add    esp,0x1c
c00124c7:	5b                   	pop    ebx
c00124c8:	5e                   	pop    esi
c00124c9:	5f                   	pop    edi
c00124ca:	5d                   	pop    ebp
c00124cb:	c3                   	ret    
c00124cc:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00124d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124d7:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124de:	0f 84 4d ff ff ff    	je     c0012431 <VAS::allocatePages(int, int)+0x117>
c00124e4:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124ec:	e9 40 ff ff ff       	jmp    c0012431 <VAS::allocatePages(int, int)+0x117>
c00124f1:	90                   	nop

c00124f2 <VAS::setCPUSpecific(unsigned long)>:
c00124f2:	83 ec 0c             	sub    esp,0xc
c00124f5:	6a 05                	push   0x5
c00124f7:	68 00 00 40 c2       	push   0xc2400000
c00124fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012504:	e8 0f fd ff ff       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012509:	83 c4 1c             	add    esp,0x1c
c001250c:	c3                   	ret    
c001250d:	90                   	nop

c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001250e:	55                   	push   ebp
c001250f:	57                   	push   edi
c0012510:	56                   	push   esi
c0012511:	53                   	push   ebx
c0012512:	83 ec 1c             	sub    esp,0x1c
c0012515:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001251a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001251e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012524:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012528:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001252e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012532:	83 e0 01             	and    eax,0x1
c0012535:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012539:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001253d:	85 c0                	test   eax,eax
c001253f:	7e 39                	jle    c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012541:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012545:	89 f3                	mov    ebx,esi
c0012547:	c1 e0 0c             	shl    eax,0xc
c001254a:	01 f0                	add    eax,esi
c001254c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012550:	55                   	push   ebp
c0012551:	53                   	push   ebx
c0012552:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012556:	29 f0                	sub    eax,esi
c0012558:	01 d8                	add    eax,ebx
c001255a:	50                   	push   eax
c001255b:	57                   	push   edi
c001255c:	e8 b7 fc ff ff       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012561:	83 c4 10             	add    esp,0x10
c0012564:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012569:	74 03                	je     c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001256b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001256e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012574:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012578:	75 d6                	jne    c0012550 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001257a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001257f:	75 10                	jne    c0012591 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012581:	0f 20 d8             	mov    eax,cr3
c0012584:	0f 22 d8             	mov    cr3,eax
c0012587:	83 c4 1c             	add    esp,0x1c
c001258a:	89 f0                	mov    eax,esi
c001258c:	5b                   	pop    ebx
c001258d:	5e                   	pop    esi
c001258e:	5f                   	pop    edi
c001258f:	5d                   	pop    ebp
c0012590:	c3                   	ret    
c0012591:	89 f3                	mov    ebx,esi
c0012593:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012597:	c1 eb 0a             	shr    ebx,0xa
c001259a:	c1 e0 0c             	shl    eax,0xc
c001259d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125a3:	01 f0                	add    eax,esi
c00125a5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125ab:	c1 e8 0a             	shr    eax,0xa
c00125ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125b3:	2d 00 00 40 00       	sub    eax,0x400000
c00125b8:	39 c3                	cmp    ebx,eax
c00125ba:	77 cb                	ja     c0012587 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125bc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125bf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c5:	39 d8                	cmp    eax,ebx
c00125c7:	73 f3                	jae    c00125bc <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125c9:	83 c4 1c             	add    esp,0x1c
c00125cc:	89 f0                	mov    eax,esi
c00125ce:	5b                   	pop    ebx
c00125cf:	5e                   	pop    esi
c00125d0:	5f                   	pop    edi
c00125d1:	5d                   	pop    ebp
c00125d2:	c3                   	ret    
c00125d3:	90                   	nop

c00125d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125d4:	55                   	push   ebp
c00125d5:	57                   	push   edi
c00125d6:	56                   	push   esi
c00125d7:	53                   	push   ebx
c00125d8:	83 ec 1c             	sub    esp,0x1c
c00125db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125e3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125e7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125eb:	a9 ff 0f 00 00       	test   eax,0xfff
c00125f0:	75 4a                	jne    c001263c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125f6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00125f9:	c1 eb 16             	shr    ebx,0x16
c00125fc:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012603:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012607:	74 4d                	je     c0012656 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012609:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001260d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012611:	c1 e8 0a             	shr    eax,0xa
c0012614:	80 fa 01             	cmp    dl,0x1
c0012617:	19 d2                	sbb    edx,edx
c0012619:	c1 e3 0c             	shl    ebx,0xc
c001261c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012620:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012626:	25 fc 0f 00 00       	and    eax,0xffc
c001262b:	01 d8                	add    eax,ebx
c001262d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012634:	83 c4 1c             	add    esp,0x1c
c0012637:	5b                   	pop    ebx
c0012638:	5e                   	pop    esi
c0012639:	5f                   	pop    edi
c001263a:	5d                   	pop    ebp
c001263b:	c3                   	ret    
c001263c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012640:	83 ec 0c             	sub    esp,0xc
c0012643:	68 08 b5 02 c0       	push   0xc002b508
c0012648:	e8 e2 82 00 00       	call   c001a92f <Krnl::panic(char const*)>
c001264d:	83 c4 10             	add    esp,0x10
c0012650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012654:	eb 9c                	jmp    c00125f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012656:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001265a:	e8 4a d8 ff ff       	call   c000fea9 <Phys::allocatePage()>
c001265f:	83 ec 0c             	sub    esp,0xc
c0012662:	89 c5                	mov    ebp,eax
c0012664:	8b 0d 70 f5 02 c0    	mov    ecx,DWORD PTR ds:0xc002f570
c001266a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001266e:	6a 01                	push   0x1
c0012670:	e8 6c f3 ff ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c0012675:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001267c:	6a 01                	push   0x1
c001267e:	50                   	push   eax
c001267f:	55                   	push   ebp
c0012680:	81 cd 07 04 00 00    	or     ebp,0x407
c0012686:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001268a:	51                   	push   ecx
c001268b:	e8 7e fe ff ff       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012690:	83 c4 1c             	add    esp,0x1c
c0012693:	68 00 10 00 00       	push   0x1000
c0012698:	6a 00                	push   0x0
c001269a:	50                   	push   eax
c001269b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001269f:	e8 ac e0 fe ff       	call   c0000750 <memset>
c00126a4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126a8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00126ab:	e8 f1 f7 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c00126b0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00126b3:	83 c4 10             	add    esp,0x10
c00126b6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00126b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126bd:	e9 47 ff ff ff       	jmp    c0012609 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00126c2 <VAS::VAS(bool)>:
c00126c2:	53                   	push   ebx
c00126c3:	83 ec 28             	sub    esp,0x28
c00126c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126ca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126dd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00126e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126ec:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126ef:	e8 b5 d7 ff ff       	call   c000fea9 <Phys::allocatePage()>
c00126f4:	89 c2                	mov    edx,eax
c00126f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126fa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00126fd:	8b 1d 70 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f570
c0012703:	83 ec 0c             	sub    esp,0xc
c0012706:	6a 01                	push   0x1
c0012708:	e8 d4 f2 ff ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c001270d:	83 c4 10             	add    esp,0x10
c0012710:	89 c2                	mov    edx,eax
c0012712:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012719:	83 ec 0c             	sub    esp,0xc
c001271c:	6a 03                	push   0x3
c001271e:	6a 01                	push   0x1
c0012720:	52                   	push   edx
c0012721:	50                   	push   eax
c0012722:	53                   	push   ebx
c0012723:	e8 e6 fd ff ff       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012728:	83 c4 20             	add    esp,0x20
c001272b:	89 c2                	mov    edx,eax
c001272d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012731:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012734:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001273c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012744:	7f 1c                	jg     c0012762 <VAS::VAS(bool)+0xa0>
c0012746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001274a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001274d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012751:	c1 e2 02             	shl    edx,0x2
c0012754:	01 d0                	add    eax,edx
c0012756:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001275c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012760:	eb da                	jmp    c001273c <VAS::VAS(bool)+0x7a>
c0012762:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001276a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012772:	7f 7a                	jg     c00127ee <VAS::VAS(bool)+0x12c>
c0012774:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012778:	2d 00 02 00 00       	sub    eax,0x200
c001277d:	c1 e0 0c             	shl    eax,0xc
c0012780:	83 c8 03             	or     eax,0x3
c0012783:	89 c2                	mov    edx,eax
c0012785:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001278a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012790:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012796:	83 e0 10             	and    eax,0x10
c0012799:	84 c0                	test   al,al
c001279b:	74 07                	je     c00127a4 <VAS::VAS(bool)+0xe2>
c001279d:	b8 00 01 00 00       	mov    eax,0x100
c00127a2:	eb 05                	jmp    c00127a9 <VAS::VAS(bool)+0xe7>
c00127a4:	b8 00 00 00 00       	mov    eax,0x0
c00127a9:	09 d0                	or     eax,edx
c00127ab:	89 c1                	mov    ecx,eax
c00127ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127b8:	c1 e2 02             	shl    edx,0x2
c00127bb:	01 d0                	add    eax,edx
c00127bd:	89 ca                	mov    edx,ecx
c00127bf:	89 10                	mov    DWORD PTR [eax],edx
c00127c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127c5:	2d 40 03 00 00       	sub    eax,0x340
c00127ca:	83 f8 7f             	cmp    eax,0x7f
c00127cd:	77 16                	ja     c00127e5 <VAS::VAS(bool)+0x123>
c00127cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127da:	c1 e2 02             	shl    edx,0x2
c00127dd:	01 d0                	add    eax,edx
c00127df:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127e5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127e9:	e9 7c ff ff ff       	jmp    c001276a <VAS::VAS(bool)+0xa8>
c00127ee:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00127f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127f9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127ff:	83 e0 10             	and    eax,0x10
c0012802:	84 c0                	test   al,al
c0012804:	74 07                	je     c001280d <VAS::VAS(bool)+0x14b>
c0012806:	b8 03 41 00 00       	mov    eax,0x4103
c001280b:	eb 05                	jmp    c0012812 <VAS::VAS(bool)+0x150>
c001280d:	b8 03 40 00 00       	mov    eax,0x4003
c0012812:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012816:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012819:	81 c2 20 0c 00 00    	add    edx,0xc20
c001281f:	89 02                	mov    DWORD PTR [edx],eax
c0012821:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0012826:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001282c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012832:	83 ec 08             	sub    esp,0x8
c0012835:	50                   	push   eax
c0012836:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001283a:	e8 b3 fc ff ff       	call   c00124f2 <VAS::setCPUSpecific(unsigned long)>
c001283f:	83 c4 10             	add    esp,0x10
c0012842:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012846:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012849:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001284e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012854:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001285a:	83 e0 10             	and    eax,0x10
c001285d:	84 c0                	test   al,al
c001285f:	74 07                	je     c0012868 <VAS::VAS(bool)+0x1a6>
c0012861:	b8 00 01 00 00       	mov    eax,0x100
c0012866:	eb 05                	jmp    c001286d <VAS::VAS(bool)+0x1ab>
c0012868:	b8 00 00 00 00       	mov    eax,0x0
c001286d:	09 c2                	or     edx,eax
c001286f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012873:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012876:	05 fc 0f 00 00       	add    eax,0xffc
c001287b:	83 ca 03             	or     edx,0x3
c001287e:	89 10                	mov    DWORD PTR [eax],edx
c0012880:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0012885:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001288b:	83 ec 0c             	sub    esp,0xc
c001288e:	50                   	push   eax
c001288f:	e8 8c 1c 00 00       	call   c0014520 <Device::getName()>
c0012894:	83 c4 10             	add    esp,0x10
c0012897:	83 ec 08             	sub    esp,0x8
c001289a:	68 4d b6 02 c0       	push   0xc002b64d
c001289f:	50                   	push   eax
c00128a0:	e8 f3 df fe ff       	call   c0000898 <strcmp>
c00128a5:	83 c4 10             	add    esp,0x10
c00128a8:	85 c0                	test   eax,eax
c00128aa:	0f 94 c0             	sete   al
c00128ad:	84 c0                	test   al,al
c00128af:	0f 84 87 00 00 00    	je     c001293c <VAS::VAS(bool)+0x27a>
c00128b5:	fa                   	cli    
c00128b6:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c00128bb:	40                   	inc    eax
c00128bc:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c00128c1:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00128c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128cc:	05 7c 09 00 00       	add    eax,0x97c
c00128d1:	83 ec 0c             	sub    esp,0xc
c00128d4:	50                   	push   eax
c00128d5:	e8 34 ca ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128da:	83 c4 10             	add    esp,0x10
c00128dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128e2:	89 c3                	mov    ebx,eax
c00128e4:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00128e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ef:	05 7c 09 00 00       	add    eax,0x97c
c00128f4:	83 ec 0c             	sub    esp,0xc
c00128f7:	50                   	push   eax
c00128f8:	e8 11 ca ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128fd:	83 c4 10             	add    esp,0x10
c0012900:	83 ec 08             	sub    esp,0x8
c0012903:	50                   	push   eax
c0012904:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012908:	e8 75 f5 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c001290d:	83 c4 10             	add    esp,0x10
c0012910:	8b 00                	mov    eax,DWORD PTR [eax]
c0012912:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012917:	6a 11                	push   0x11
c0012919:	53                   	push   ebx
c001291a:	50                   	push   eax
c001291b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001291f:	e8 f4 f8 ff ff       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012924:	83 c4 10             	add    esp,0x10
c0012927:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001292c:	48                   	dec    eax
c001292d:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0012932:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0012937:	85 c0                	test   eax,eax
c0012939:	75 01                	jne    c001293c <VAS::VAS(bool)+0x27a>
c001293b:	fb                   	sti    
c001293c:	90                   	nop
c001293d:	83 c4 28             	add    esp,0x28
c0012940:	5b                   	pop    ebx
c0012941:	c3                   	ret    

c0012942 <VAS::evict(unsigned long)>:
c0012942:	55                   	push   ebp
c0012943:	57                   	push   edi
c0012944:	56                   	push   esi
c0012945:	53                   	push   ebx
c0012946:	83 ec 1c             	sub    esp,0x1c
c0012949:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001294d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012951:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012955:	e8 c8 f1 ff ff       	call   c0011b22 <Virt::allocateSwapfilePage()>
c001295a:	89 c7                	mov    edi,eax
c001295c:	a1 8c e3 02 c0       	mov    eax,ds:0xc002e38c
c0012961:	85 c0                	test   eax,eax
c0012963:	7e 3d                	jle    c00129a2 <VAS::evict(unsigned long)+0x60>
c0012965:	89 ee                	mov    esi,ebp
c0012967:	31 db                	xor    ebx,ebx
c0012969:	83 ec 0c             	sub    esp,0xc
c001296c:	57                   	push   edi
c001296d:	e8 9e f1 ff ff       	call   c0011b10 <Virt::swapIDToSector(unsigned long)>
c0012972:	89 34 24             	mov    DWORD PTR [esp],esi
c0012975:	01 d8                	add    eax,ebx
c0012977:	6a 01                	push   0x1
c0012979:	31 d2                	xor    edx,edx
c001297b:	43                   	inc    ebx
c001297c:	52                   	push   edx
c001297d:	81 c6 00 02 00 00    	add    esi,0x200
c0012983:	50                   	push   eax
c0012984:	0f be 05 98 e3 02 c0 	movsx  eax,BYTE PTR ds:0xc002e398
c001298b:	ff 34 85 fc f8 02 c0 	push   DWORD PTR [eax*4-0x3ffd0704]
c0012992:	e8 39 3e 00 00       	call   c00167d0 <LogicalDisk::write(unsigned long long, int, void*)>
c0012997:	83 c4 20             	add    esp,0x20
c001299a:	39 1d 8c e3 02 c0    	cmp    DWORD PTR ds:0xc002e38c,ebx
c00129a0:	7f c7                	jg     c0012969 <VAS::evict(unsigned long)+0x27>
c00129a2:	83 ec 08             	sub    esp,0x8
c00129a5:	c1 e7 0b             	shl    edi,0xb
c00129a8:	55                   	push   ebp
c00129a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129ad:	e8 d0 f4 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c00129b2:	83 c4 0c             	add    esp,0xc
c00129b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00129b7:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00129bd:	09 d7                	or     edi,edx
c00129bf:	89 38                	mov    DWORD PTR [eax],edi
c00129c1:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c00129c6:	40                   	inc    eax
c00129c7:	a3 68 f5 02 c0       	mov    ds:0xc002f568,eax
c00129cc:	0f 20 da             	mov    edx,cr3
c00129cf:	0f 22 da             	mov    cr3,edx
c00129d2:	50                   	push   eax
c00129d3:	55                   	push   ebp
c00129d4:	68 5b b6 02 c0       	push   0xc002b65b
c00129d9:	e8 09 04 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00129de:	a1 64 f5 02 c0       	mov    eax,ds:0xc002f564
c00129e3:	c7 44 24 40 70 b6 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b670
c00129eb:	8d 50 01             	lea    edx,[eax+0x1]
c00129ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00129f2:	89 15 64 f5 02 c0    	mov    DWORD PTR ds:0xc002f564,edx
c00129f8:	83 c4 2c             	add    esp,0x2c
c00129fb:	5b                   	pop    ebx
c00129fc:	5e                   	pop    esi
c00129fd:	5f                   	pop    edi
c00129fe:	5d                   	pop    ebp
c00129ff:	e9 e3 03 00 00       	jmp    c0012de7 <Dbg::kprintf(char const*, ...)>

c0012a04 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a04:	55                   	push   ebp
c0012a05:	57                   	push   edi
c0012a06:	56                   	push   esi
c0012a07:	53                   	push   ebx
c0012a08:	83 ec 0c             	sub    esp,0xc
c0012a0b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012a0f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012a15:	0f 84 dc 00 00 00    	je     c0012af7 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a1b:	56                   	push   esi
c0012a1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a20:	e8 5d f4 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0012a25:	5b                   	pop    ebx
c0012a26:	85 c0                	test   eax,eax
c0012a28:	5f                   	pop    edi
c0012a29:	89 c3                	mov    ebx,eax
c0012a2b:	0f 84 c6 00 00 00    	je     c0012af7 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a31:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a33:	31 c0                	xor    eax,eax
c0012a35:	89 fa                	mov    edx,edi
c0012a37:	81 e2 01 04 00 00    	and    edx,0x401
c0012a3d:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012a43:	0f 85 b0 00 00 00    	jne    c0012af9 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012a49:	e8 5b d4 ff ff       	call   c000fea9 <Phys::allocatePage()>
c0012a4e:	c1 ef 0b             	shr    edi,0xb
c0012a51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012a53:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012a59:	09 c2                	or     edx,eax
c0012a5b:	81 ca 01 08 00 00    	or     edx,0x801
c0012a61:	89 13                	mov    DWORD PTR [ebx],edx
c0012a63:	8b 0d 8c e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e38c
c0012a69:	85 c9                	test   ecx,ecx
c0012a6b:	7e 3d                	jle    c0012aaa <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012a6d:	89 f5                	mov    ebp,esi
c0012a6f:	31 db                	xor    ebx,ebx
c0012a71:	83 ec 0c             	sub    esp,0xc
c0012a74:	57                   	push   edi
c0012a75:	e8 96 f0 ff ff       	call   c0011b10 <Virt::swapIDToSector(unsigned long)>
c0012a7a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012a7d:	01 d8                	add    eax,ebx
c0012a7f:	6a 01                	push   0x1
c0012a81:	31 d2                	xor    edx,edx
c0012a83:	43                   	inc    ebx
c0012a84:	52                   	push   edx
c0012a85:	81 c5 00 02 00 00    	add    ebp,0x200
c0012a8b:	50                   	push   eax
c0012a8c:	0f be 05 98 e3 02 c0 	movsx  eax,BYTE PTR ds:0xc002e398
c0012a93:	ff 34 85 fc f8 02 c0 	push   DWORD PTR [eax*4-0x3ffd0704]
c0012a9a:	e8 c5 3c 00 00       	call   c0016764 <LogicalDisk::read(unsigned long long, int, void*)>
c0012a9f:	83 c4 20             	add    esp,0x20
c0012aa2:	39 1d 8c e3 02 c0    	cmp    DWORD PTR ds:0xc002e38c,ebx
c0012aa8:	7f c7                	jg     c0012a71 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012aaa:	a1 68 f5 02 c0       	mov    eax,ds:0xc002f568
c0012aaf:	48                   	dec    eax
c0012ab0:	52                   	push   edx
c0012ab1:	a3 68 f5 02 c0       	mov    ds:0xc002f568,eax
c0012ab6:	50                   	push   eax
c0012ab7:	56                   	push   esi
c0012ab8:	68 81 b6 02 c0       	push   0xc002b681
c0012abd:	e8 25 03 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0012ac2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ac5:	e8 28 f0 ff ff       	call   c0011af2 <Virt::freeSwapfilePage(unsigned long)>
c0012aca:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0012acf:	83 c4 10             	add    esp,0x10
c0012ad2:	48                   	dec    eax
c0012ad3:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0012ad8:	85 c0                	test   eax,eax
c0012ada:	75 01                	jne    c0012add <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012adc:	fb                   	sti    
c0012add:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ae1:	25 ff 0f 00 00       	and    eax,0xfff
c0012ae6:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012aeb:	77 14                	ja     c0012b01 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012aed:	0f 20 d8             	mov    eax,cr3
c0012af0:	0f 22 d8             	mov    cr3,eax
c0012af3:	b0 01                	mov    al,0x1
c0012af5:	eb 02                	jmp    c0012af9 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012af7:	31 c0                	xor    eax,eax
c0012af9:	83 c4 0c             	add    esp,0xc
c0012afc:	5b                   	pop    ebx
c0012afd:	5e                   	pop    esi
c0012afe:	5f                   	pop    edi
c0012aff:	5d                   	pop    ebp
c0012b00:	c3                   	ret    
c0012b01:	83 ec 0c             	sub    esp,0xc
c0012b04:	68 96 b6 02 c0       	push   0xc002b696
c0012b09:	e8 d9 02 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0012b0e:	83 c4 10             	add    esp,0x10
c0012b11:	eb da                	jmp    c0012aed <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012b13:	90                   	nop

c0012b14 <VAS::scanForEviction()>:
c0012b14:	57                   	push   edi
c0012b15:	56                   	push   esi
c0012b16:	53                   	push   ebx
c0012b17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b1b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b1e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b24:	75 0e                	jne    c0012b34 <VAS::scanForEviction()+0x20>
c0012b26:	89 da                	mov    edx,ebx
c0012b28:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b2b:	c1 ea 16             	shr    edx,0x16
c0012b2e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b32:	74 48                	je     c0012b7c <VAS::scanForEviction()+0x68>
c0012b34:	53                   	push   ebx
c0012b35:	56                   	push   esi
c0012b36:	e8 47 f3 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0012b3b:	5a                   	pop    edx
c0012b3c:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b3e:	59                   	pop    ecx
c0012b3f:	89 fa                	mov    edx,edi
c0012b41:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012b47:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012b4d:	74 3d                	je     c0012b8c <VAS::scanForEviction()+0x78>
c0012b4f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012b55:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012b5b:	76 2a                	jbe    c0012b87 <VAS::scanForEviction()+0x73>
c0012b5d:	31 db                	xor    ebx,ebx
c0012b5f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012b66:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b6c:	75 c6                	jne    c0012b34 <VAS::scanForEviction()+0x20>
c0012b6e:	89 da                	mov    edx,ebx
c0012b70:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b73:	c1 ea 16             	shr    edx,0x16
c0012b76:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b7a:	75 b8                	jne    c0012b34 <VAS::scanForEviction()+0x20>
c0012b7c:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012b82:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012b85:	eb 97                	jmp    c0012b1e <VAS::scanForEviction()+0xa>
c0012b87:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012b8a:	eb 92                	jmp    c0012b1e <VAS::scanForEviction()+0xa>
c0012b8c:	f7 c7 01 00 00 00    	test   edi,0x1
c0012b92:	74 bb                	je     c0012b4f <VAS::scanForEviction()+0x3b>
c0012b94:	f7 c7 20 00 00 00    	test   edi,0x20
c0012b9a:	74 0a                	je     c0012ba6 <VAS::scanForEviction()+0x92>
c0012b9c:	83 e7 df             	and    edi,0xffffffdf
c0012b9f:	89 38                	mov    DWORD PTR [eax],edi
c0012ba1:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012ba4:	eb a9                	jmp    c0012b4f <VAS::scanForEviction()+0x3b>
c0012ba6:	83 ec 08             	sub    esp,0x8
c0012ba9:	53                   	push   ebx
c0012baa:	56                   	push   esi
c0012bab:	e8 92 fd ff ff       	call   c0012942 <VAS::evict(unsigned long)>
c0012bb0:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012bb7:	83 c4 10             	add    esp,0x10
c0012bba:	89 f8                	mov    eax,edi
c0012bbc:	5b                   	pop    ebx
c0012bbd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012bc2:	5e                   	pop    esi
c0012bc3:	5f                   	pop    edi
c0012bc4:	c3                   	ret    

c0012bc5 <mapVASFirstTime>:
c0012bc5:	55                   	push   ebp
c0012bc6:	57                   	push   edi
c0012bc7:	56                   	push   esi
c0012bc8:	53                   	push   ebx
c0012bc9:	83 ec 0c             	sub    esp,0xc
c0012bcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bd1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012bd4:	4a                   	dec    edx
c0012bd5:	0f 84 8e 00 00 00    	je     c0012c69 <mapVASFirstTime+0xa4>
c0012bdb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012bde:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012be1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012be6:	c1 e5 15             	shl    ebp,0x15
c0012be9:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012bee:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012bf4:	29 eb                	sub    ebx,ebp
c0012bf6:	29 ee                	sub    esi,ebp
c0012bf8:	e8 ac d2 ff ff       	call   c000fea9 <Phys::allocatePage()>
c0012bfd:	83 ec 0c             	sub    esp,0xc
c0012c00:	68 03 04 00 00       	push   0x403
c0012c05:	6a 01                	push   0x1
c0012c07:	53                   	push   ebx
c0012c08:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c0e:	50                   	push   eax
c0012c0f:	57                   	push   edi
c0012c10:	e8 f9 f8 ff ff       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c15:	83 c4 20             	add    esp,0x20
c0012c18:	39 f3                	cmp    ebx,esi
c0012c1a:	75 dc                	jne    c0012bf8 <mapVASFirstTime+0x33>
c0012c1c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c21:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c26:	29 ee                	sub    esi,ebp
c0012c28:	29 e8                	sub    eax,ebp
c0012c2a:	89 c5                	mov    ebp,eax
c0012c2c:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c30:	19 db                	sbb    ebx,ebx
c0012c32:	e8 72 d2 ff ff       	call   c000fea9 <Phys::allocatePage()>
c0012c37:	83 e3 04             	and    ebx,0x4
c0012c3a:	83 ec 0c             	sub    esp,0xc
c0012c3d:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c43:	53                   	push   ebx
c0012c44:	6a 01                	push   0x1
c0012c46:	56                   	push   esi
c0012c47:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c4d:	50                   	push   eax
c0012c4e:	57                   	push   edi
c0012c4f:	e8 ba f8 ff ff       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c54:	83 c4 20             	add    esp,0x20
c0012c57:	39 f5                	cmp    ebp,esi
c0012c59:	75 d1                	jne    c0012c2c <mapVASFirstTime+0x67>
c0012c5b:	0f 20 d8             	mov    eax,cr3
c0012c5e:	0f 22 d8             	mov    cr3,eax
c0012c61:	83 c4 0c             	add    esp,0xc
c0012c64:	5b                   	pop    ebx
c0012c65:	5e                   	pop    esi
c0012c66:	5f                   	pop    edi
c0012c67:	5d                   	pop    ebp
c0012c68:	c3                   	ret    
c0012c69:	83 ec 0c             	sub    esp,0xc
c0012c6c:	68 a6 b6 02 c0       	push   0xc002b6a6
c0012c71:	e8 71 01 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0012c76:	83 c4 10             	add    esp,0x10
c0012c79:	83 c4 0c             	add    esp,0xc
c0012c7c:	5b                   	pop    ebx
c0012c7d:	5e                   	pop    esi
c0012c7e:	5f                   	pop    edi
c0012c7f:	5d                   	pop    ebp
c0012c80:	c3                   	ret    

c0012c81 <__cxa_atexit>:
c0012c81:	31 c0                	xor    eax,eax
c0012c83:	c3                   	ret    

c0012c84 <__cxa_finalize>:
c0012c84:	c3                   	ret    

c0012c85 <__stack_chk_fail>:
c0012c85:	55                   	push   ebp
c0012c86:	89 e5                	mov    ebp,esp
c0012c88:	83 ec 14             	sub    esp,0x14
c0012c8b:	68 bf b6 02 c0       	push   0xc002b6bf
c0012c90:	e8 52 01 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0012c95:	58                   	pop    eax
c0012c96:	5a                   	pop    edx
c0012c97:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c9a:	68 0f b7 02 c0       	push   0xc002b70f
c0012c9f:	e8 43 01 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0012ca4:	59                   	pop    ecx
c0012ca5:	58                   	pop    eax
c0012ca6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ca9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cac:	68 0f b7 02 c0       	push   0xc002b70f
c0012cb1:	e8 31 01 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0012cb6:	5a                   	pop    edx
c0012cb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cba:	59                   	pop    ecx
c0012cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cbd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cc0:	68 0f b7 02 c0       	push   0xc002b70f
c0012cc5:	e8 1d 01 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0012cca:	5a                   	pop    edx
c0012ccb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cce:	59                   	pop    ecx
c0012ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cd3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cd6:	68 0f b7 02 c0       	push   0xc002b70f
c0012cdb:	e8 07 01 00 00       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0012ce0:	c7 04 24 17 b7 02 c0 	mov    DWORD PTR [esp],0xc002b717
c0012ce7:	e8 43 7c 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0012cec:	83 c4 10             	add    esp,0x10
c0012cef:	c9                   	leave  
c0012cf0:	c3                   	ret    

c0012cf1 <__cxa_pure_virtual>:
c0012cf1:	83 ec 18             	sub    esp,0x18
c0012cf4:	68 2f b7 02 c0       	push   0xc002b72f
c0012cf9:	e8 31 7c 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0012cfe:	83 c4 1c             	add    esp,0x1c
c0012d01:	c3                   	ret    

c0012d02 <operator new[](unsigned long)>:
c0012d02:	e9 85 cb ff ff       	jmp    c000f88c <malloc>

c0012d07 <operator delete(void*, unsigned long)>:
c0012d07:	e9 a0 cb ff ff       	jmp    c000f8ac <rfree>

c0012d0c <operator delete[](void*)>:
c0012d0c:	e9 9b cb ff ff       	jmp    c000f8ac <rfree>

c0012d11 <operator delete[](void*, unsigned long)>:
c0012d11:	e9 96 cb ff ff       	jmp    c000f8ac <rfree>

c0012d16 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d16:	57                   	push   edi
c0012d17:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d1c:	56                   	push   esi
c0012d1d:	be 44 b7 02 c0       	mov    esi,0xc002b744
c0012d22:	53                   	push   ebx
c0012d23:	83 ec 40             	sub    esp,0x40
c0012d26:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d2a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d2e:	fc                   	cld    
c0012d2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d31:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d35:	83 f9 3e             	cmp    ecx,0x3e
c0012d38:	7e 05                	jle    c0012d3f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d3a:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d3f:	89 df                	mov    edi,ebx
c0012d41:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d45:	eb 02                	jmp    c0012d49 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012d47:	89 c7                	mov    edi,eax
c0012d49:	31 d2                	xor    edx,edx
c0012d4b:	46                   	inc    esi
c0012d4c:	89 f8                	mov    eax,edi
c0012d4e:	f7 f1                	div    ecx
c0012d50:	39 cf                	cmp    edi,ecx
c0012d52:	73 f3                	jae    c0012d47 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d54:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d57:	eb 02                	jmp    c0012d5b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d59:	89 c3                	mov    ebx,eax
c0012d5b:	31 d2                	xor    edx,edx
c0012d5d:	4e                   	dec    esi
c0012d5e:	89 d8                	mov    eax,ebx
c0012d60:	f7 f1                	div    ecx
c0012d62:	39 cb                	cmp    ebx,ecx
c0012d64:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d68:	88 16                	mov    BYTE PTR [esi],dl
c0012d6a:	73 ed                	jae    c0012d59 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d6c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d70:	83 c4 40             	add    esp,0x40
c0012d73:	5b                   	pop    ebx
c0012d74:	5e                   	pop    esi
c0012d75:	5f                   	pop    edi
c0012d76:	c3                   	ret    

c0012d77 <Dbg::logc(char)>:
c0012d77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d7b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d80:	ec                   	in     al,dx
c0012d81:	a8 20                	test   al,0x20
c0012d83:	74 fb                	je     c0012d80 <Dbg::logc(char)+0x9>
c0012d85:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d8a:	88 c8                	mov    al,cl
c0012d8c:	ee                   	out    dx,al
c0012d8d:	c3                   	ret    

c0012d8e <Dbg::logs(char*)>:
c0012d8e:	53                   	push   ebx
c0012d8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d93:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d96:	84 c0                	test   al,al
c0012d98:	74 0f                	je     c0012da9 <Dbg::logs(char*)+0x1b>
c0012d9a:	50                   	push   eax
c0012d9b:	43                   	inc    ebx
c0012d9c:	e8 d6 ff ff ff       	call   c0012d77 <Dbg::logc(char)>
c0012da1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012da4:	5a                   	pop    edx
c0012da5:	84 c0                	test   al,al
c0012da7:	75 f1                	jne    c0012d9a <Dbg::logs(char*)+0xc>
c0012da9:	5b                   	pop    ebx
c0012daa:	c3                   	ret    

c0012dab <Dbg::logWriteInt(unsigned int)>:
c0012dab:	83 ec 10             	sub    esp,0x10
c0012dae:	6a 0a                	push   0xa
c0012db0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012db4:	50                   	push   eax
c0012db5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012db9:	e8 58 ff ff ff       	call   c0012d16 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012dbe:	50                   	push   eax
c0012dbf:	e8 ca ff ff ff       	call   c0012d8e <Dbg::logs(char*)>
c0012dc4:	83 c4 20             	add    esp,0x20
c0012dc7:	c3                   	ret    

c0012dc8 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012dc8:	83 ec 10             	sub    esp,0x10
c0012dcb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dcf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012dd3:	50                   	push   eax
c0012dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dd8:	e8 39 ff ff ff       	call   c0012d16 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ddd:	50                   	push   eax
c0012dde:	e8 ab ff ff ff       	call   c0012d8e <Dbg::logs(char*)>
c0012de3:	83 c4 20             	add    esp,0x20
c0012de6:	c3                   	ret    

c0012de7 <Dbg::kprintf(char const*, ...)>:
c0012de7:	55                   	push   ebp
c0012de8:	57                   	push   edi
c0012de9:	56                   	push   esi
c0012dea:	53                   	push   ebx
c0012deb:	83 ec 0c             	sub    esp,0xc
c0012dee:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012df2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012df6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012dfa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012dfd:	84 c0                	test   al,al
c0012dff:	74 4a                	je     c0012e4b <Dbg::kprintf(char const*, ...)+0x64>
c0012e01:	31 db                	xor    ebx,ebx
c0012e03:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e06:	3c 25                	cmp    al,0x25
c0012e08:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e0b:	0f 85 e4 00 00 00    	jne    c0012ef5 <Dbg::kprintf(char const*, ...)+0x10e>
c0012e11:	83 c3 02             	add    ebx,0x2
c0012e14:	8a 07                	mov    al,BYTE PTR [edi]
c0012e16:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e19:	83 e8 25             	sub    eax,0x25
c0012e1c:	3c 53                	cmp    al,0x53
c0012e1e:	0f 87 ba 00 00 00    	ja     c0012ede <Dbg::kprintf(char const*, ...)+0xf7>
c0012e24:	0f b6 c0             	movzx  eax,al
c0012e27:	ff 24 85 84 b7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd487c]
c0012e2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e32:	89 c8                	mov    eax,ecx
c0012e34:	83 c1 04             	add    ecx,0x4
c0012e37:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e3b:	ff 30                	push   DWORD PTR [eax]
c0012e3d:	e8 4c ff ff ff       	call   c0012d8e <Dbg::logs(char*)>
c0012e42:	58                   	pop    eax
c0012e43:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012e47:	84 c0                	test   al,al
c0012e49:	75 b8                	jne    c0012e03 <Dbg::kprintf(char const*, ...)+0x1c>
c0012e4b:	83 c4 0c             	add    esp,0xc
c0012e4e:	5b                   	pop    ebx
c0012e4f:	5e                   	pop    esi
c0012e50:	5f                   	pop    edi
c0012e51:	5d                   	pop    ebp
c0012e52:	c3                   	ret    
c0012e53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e57:	89 d0                	mov    eax,edx
c0012e59:	83 c2 04             	add    edx,0x4
c0012e5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e60:	ff 30                	push   DWORD PTR [eax]
c0012e62:	e8 44 ff ff ff       	call   c0012dab <Dbg::logWriteInt(unsigned int)>
c0012e67:	58                   	pop    eax
c0012e68:	eb d9                	jmp    c0012e43 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e6e:	89 d0                	mov    eax,edx
c0012e70:	83 c2 04             	add    edx,0x4
c0012e73:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e7a:	50                   	push   eax
c0012e7b:	e8 f7 fe ff ff       	call   c0012d77 <Dbg::logc(char)>
c0012e80:	58                   	pop    eax
c0012e81:	eb c0                	jmp    c0012e43 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e87:	89 c8                	mov    eax,ecx
c0012e89:	83 c1 04             	add    ecx,0x4
c0012e8c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e90:	ff 30                	push   DWORD PTR [eax]
c0012e92:	e8 14 ff ff ff       	call   c0012dab <Dbg::logWriteInt(unsigned int)>
c0012e97:	5f                   	pop    edi
c0012e98:	eb a9                	jmp    c0012e43 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e9a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e9e:	89 c8                	mov    eax,ecx
c0012ea0:	83 c1 04             	add    ecx,0x4
c0012ea3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ea7:	6a 10                	push   0x10
c0012ea9:	ff 30                	push   DWORD PTR [eax]
c0012eab:	e8 18 ff ff ff       	call   c0012dc8 <Dbg::logWriteIntBase(unsigned int, int)>
c0012eb0:	59                   	pop    ecx
c0012eb1:	5f                   	pop    edi
c0012eb2:	eb 8f                	jmp    c0012e43 <Dbg::kprintf(char const*, ...)+0x5c>
c0012eb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012eb8:	89 d0                	mov    eax,edx
c0012eba:	83 c2 08             	add    edx,0x8
c0012ebd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ec1:	6a 10                	push   0x10
c0012ec3:	ff 30                	push   DWORD PTR [eax]
c0012ec5:	e8 fe fe ff ff       	call   c0012dc8 <Dbg::logWriteIntBase(unsigned int, int)>
c0012eca:	58                   	pop    eax
c0012ecb:	5a                   	pop    edx
c0012ecc:	e9 72 ff ff ff       	jmp    c0012e43 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ed1:	6a 25                	push   0x25
c0012ed3:	e8 9f fe ff ff       	call   c0012d77 <Dbg::logc(char)>
c0012ed8:	58                   	pop    eax
c0012ed9:	e9 65 ff ff ff       	jmp    c0012e43 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ede:	6a 25                	push   0x25
c0012ee0:	e8 92 fe ff ff       	call   c0012d77 <Dbg::logc(char)>
c0012ee5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ee8:	50                   	push   eax
c0012ee9:	e8 89 fe ff ff       	call   c0012d77 <Dbg::logc(char)>
c0012eee:	5a                   	pop    edx
c0012eef:	59                   	pop    ecx
c0012ef0:	e9 4e ff ff ff       	jmp    c0012e43 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ef5:	50                   	push   eax
c0012ef6:	89 eb                	mov    ebx,ebp
c0012ef8:	e8 7a fe ff ff       	call   c0012d77 <Dbg::logc(char)>
c0012efd:	89 fd                	mov    ebp,edi
c0012eff:	58                   	pop    eax
c0012f00:	e9 3e ff ff ff       	jmp    c0012e43 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f05:	90                   	nop

c0012f06 <File::read(unsigned long long, void*, int*)>:
c0012f06:	53                   	push   ebx
c0012f07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f0b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f0f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f16:	3c 19                	cmp    al,0x19
c0012f18:	77 35                	ja     c0012f4f <File::read(unsigned long long, void*, int*)+0x49>
c0012f1a:	8b 04 85 00 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0600]
c0012f21:	85 c0                	test   eax,eax
c0012f23:	74 2a                	je     c0012f4f <File::read(unsigned long long, void*, int*)+0x49>
c0012f25:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f2b:	85 c0                	test   eax,eax
c0012f2d:	74 20                	je     c0012f4f <File::read(unsigned long long, void*, int*)+0x49>
c0012f2f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f33:	74 21                	je     c0012f56 <File::read(unsigned long long, void*, int*)+0x50>
c0012f35:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f37:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f3b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f49:	5b                   	pop    ebx
c0012f4a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f4d:	ff e0                	jmp    eax
c0012f4f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f54:	eb 05                	jmp    c0012f5b <File::read(unsigned long long, void*, int*)+0x55>
c0012f56:	b8 05 00 00 00       	mov    eax,0x5
c0012f5b:	5b                   	pop    ebx
c0012f5c:	c3                   	ret    
c0012f5d:	90                   	nop

c0012f5e <File::write(unsigned long long, void*, int*)>:
c0012f5e:	53                   	push   ebx
c0012f5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f63:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f67:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f6e:	3c 19                	cmp    al,0x19
c0012f70:	77 35                	ja     c0012fa7 <File::write(unsigned long long, void*, int*)+0x49>
c0012f72:	8b 04 85 00 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0600]
c0012f79:	85 c0                	test   eax,eax
c0012f7b:	74 2a                	je     c0012fa7 <File::write(unsigned long long, void*, int*)+0x49>
c0012f7d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f83:	85 c0                	test   eax,eax
c0012f85:	74 20                	je     c0012fa7 <File::write(unsigned long long, void*, int*)+0x49>
c0012f87:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f8b:	74 21                	je     c0012fae <File::write(unsigned long long, void*, int*)+0x50>
c0012f8d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f8f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f93:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fa1:	5b                   	pop    ebx
c0012fa2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012fa5:	ff e0                	jmp    eax
c0012fa7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fac:	eb 05                	jmp    c0012fb3 <File::write(unsigned long long, void*, int*)+0x55>
c0012fae:	b8 05 00 00 00       	mov    eax,0x5
c0012fb3:	5b                   	pop    ebx
c0012fb4:	c3                   	ret    
c0012fb5:	90                   	nop

c0012fb6 <Directory::read(unsigned long long, void*, int*)>:
c0012fb6:	53                   	push   ebx
c0012fb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fbb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fbf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fc6:	3c 19                	cmp    al,0x19
c0012fc8:	77 35                	ja     c0012fff <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fca:	8b 04 85 00 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0600]
c0012fd1:	85 c0                	test   eax,eax
c0012fd3:	74 2a                	je     c0012fff <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fd5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fdb:	85 c0                	test   eax,eax
c0012fdd:	74 20                	je     c0012fff <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fdf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fe3:	74 21                	je     c0013006 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012fe5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fe7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012feb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ff1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ff5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ff9:	5b                   	pop    ebx
c0012ffa:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012ffd:	ff e0                	jmp    eax
c0012fff:	b8 0b 00 00 00       	mov    eax,0xb
c0013004:	eb 05                	jmp    c001300b <Directory::read(unsigned long long, void*, int*)+0x55>
c0013006:	b8 05 00 00 00       	mov    eax,0x5
c001300b:	5b                   	pop    ebx
c001300c:	c3                   	ret    
c001300d:	90                   	nop

c001300e <Directory::write(unsigned long long, void*, int*)>:
c001300e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013012:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013019:	b8 0b 00 00 00       	mov    eax,0xb
c001301e:	80 fa 19             	cmp    dl,0x19
c0013021:	77 18                	ja     c001303b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013023:	8b 14 95 00 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0600]
c001302a:	85 d2                	test   edx,edx
c001302c:	74 0d                	je     c001303b <Directory::write(unsigned long long, void*, int*)+0x2d>
c001302e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013035:	19 c0                	sbb    eax,eax
c0013037:	83 e0 0a             	and    eax,0xa
c001303a:	40                   	inc    eax
c001303b:	c3                   	ret    

c001303c <File::isAtty()>:
c001303c:	31 c0                	xor    eax,eax
c001303e:	c3                   	ret    
c001303f:	90                   	nop

c0013040 <Directory::isAtty()>:
c0013040:	31 c0                	xor    eax,eax
c0013042:	c3                   	ret    
c0013043:	90                   	nop

c0013044 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013044:	b8 0a 00 00 00       	mov    eax,0xa
c0013049:	c3                   	ret    

c001304a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001304a:	b8 0a 00 00 00       	mov    eax,0xa
c001304f:	c3                   	ret    

c0013050 <Filesystem::getFileFirstSector(char const*)>:
c0013050:	31 c0                	xor    eax,eax
c0013052:	31 d2                	xor    edx,edx
c0013054:	c3                   	ret    
c0013055:	90                   	nop

c0013056 <File::~File()>:
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	ba 44 b9 02 c0       	mov    edx,0xc002b944
c001305e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013062:	89 10                	mov    DWORD PTR [eax],edx
c0013064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013068:	83 ec 0c             	sub    esp,0xc
c001306b:	50                   	push   eax
c001306c:	e8 0f e7 ff ff       	call   c0011780 <UnixFile::~UnixFile()>
c0013071:	83 c4 10             	add    esp,0x10
c0013074:	90                   	nop
c0013075:	83 c4 0c             	add    esp,0xc
c0013078:	c3                   	ret    
c0013079:	90                   	nop

c001307a <File::~File()>:
c001307a:	83 ec 0c             	sub    esp,0xc
c001307d:	83 ec 0c             	sub    esp,0xc
c0013080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013084:	e8 cd ff ff ff       	call   c0013056 <File::~File()>
c0013089:	83 c4 10             	add    esp,0x10
c001308c:	83 ec 08             	sub    esp,0x8
c001308f:	68 14 01 00 00       	push   0x114
c0013094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013098:	e8 6a fc ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c001309d:	83 c4 10             	add    esp,0x10
c00130a0:	83 c4 0c             	add    esp,0xc
c00130a3:	c3                   	ret    

c00130a4 <Directory::~Directory()>:
c00130a4:	83 ec 0c             	sub    esp,0xc
c00130a7:	ba 60 b9 02 c0       	mov    edx,0xc002b960
c00130ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b0:	89 10                	mov    DWORD PTR [eax],edx
c00130b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b6:	83 ec 0c             	sub    esp,0xc
c00130b9:	50                   	push   eax
c00130ba:	e8 c1 e6 ff ff       	call   c0011780 <UnixFile::~UnixFile()>
c00130bf:	83 c4 10             	add    esp,0x10
c00130c2:	90                   	nop
c00130c3:	83 c4 0c             	add    esp,0xc
c00130c6:	c3                   	ret    
c00130c7:	90                   	nop

c00130c8 <Directory::~Directory()>:
c00130c8:	83 ec 0c             	sub    esp,0xc
c00130cb:	83 ec 0c             	sub    esp,0xc
c00130ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d2:	e8 cd ff ff ff       	call   c00130a4 <Directory::~Directory()>
c00130d7:	83 c4 10             	add    esp,0x10
c00130da:	83 ec 08             	sub    esp,0x8
c00130dd:	68 14 01 00 00       	push   0x114
c00130e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e6:	e8 1c fc ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c00130eb:	83 c4 10             	add    esp,0x10
c00130ee:	83 c4 0c             	add    esp,0xc
c00130f1:	c3                   	ret    

c00130f2 <Filesystem::Filesystem()>:
c00130f2:	ba dc b8 02 c0       	mov    edx,0xc002b8dc
c00130f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130fb:	89 10                	mov    DWORD PTR [eax],edx
c00130fd:	8b 15 74 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f574
c0013103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013107:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001310a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001310e:	a3 74 f5 02 c0       	mov    ds:0xc002f574,eax
c0013113:	90                   	nop
c0013114:	c3                   	ret    
c0013115:	90                   	nop

c0013116 <Filesystem::~Filesystem()>:
c0013116:	ba dc b8 02 c0       	mov    edx,0xc002b8dc
c001311b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001311f:	89 10                	mov    DWORD PTR [eax],edx
c0013121:	90                   	nop
c0013122:	c3                   	ret    
c0013123:	90                   	nop

c0013124 <Filesystem::~Filesystem()>:
c0013124:	83 ec 0c             	sub    esp,0xc
c0013127:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001312b:	e8 e6 ff ff ff       	call   c0013116 <Filesystem::~Filesystem()>
c0013130:	83 c4 04             	add    esp,0x4
c0013133:	83 ec 08             	sub    esp,0x8
c0013136:	6a 08                	push   0x8
c0013138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313c:	e8 c6 fb ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	83 c4 0c             	add    esp,0xc
c0013147:	c3                   	ret    

c0013148 <Fs::getcwd(Process*, char*, int)>:
c0013148:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001314c:	31 c0                	xor    eax,eax
c001314e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013151:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013155:	7d 15                	jge    c001316c <Fs::getcwd(Process*, char*, int)+0x24>
c0013157:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001315b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013162:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013165:	84 c9                	test   cl,cl
c0013167:	74 06                	je     c001316f <Fs::getcwd(Process*, char*, int)+0x27>
c0013169:	40                   	inc    eax
c001316a:	eb e2                	jmp    c001314e <Fs::getcwd(Process*, char*, int)+0x6>
c001316c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001316f:	31 c0                	xor    eax,eax
c0013171:	c3                   	ret    

c0013172 <Fs::initVFS()>:
c0013172:	83 ec 18             	sub    esp,0x18
c0013175:	6a 08                	push   0x8
c0013177:	e8 10 c7 ff ff       	call   c000f88c <malloc>
c001317c:	89 04 24             	mov    DWORD PTR [esp],eax
c001317f:	e8 1a e6 00 00       	call   c002179e <FAT::FAT()>
c0013184:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001318b:	e8 fc c6 ff ff       	call   c000f88c <malloc>
c0013190:	89 04 24             	mov    DWORD PTR [esp],eax
c0013193:	e8 42 f8 00 00       	call   c00229da <ISO9660::ISO9660()>
c0013198:	83 c4 1c             	add    esp,0x1c
c001319b:	c3                   	ret    

c001319c <Fs::standardiseFiles(char*, char const*, char const*)>:
c001319c:	55                   	push   ebp
c001319d:	57                   	push   edi
c001319e:	56                   	push   esi
c001319f:	53                   	push   ebx
c00131a0:	81 ec 10 04 00 00    	sub    esp,0x410
c00131a6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00131ad:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00131b4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00131bb:	68 00 04 00 00       	push   0x400
c00131c0:	6a 00                	push   0x0
c00131c2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00131c6:	56                   	push   esi
c00131c7:	e8 84 d5 fe ff       	call   c0000750 <memset>
c00131cc:	83 c4 10             	add    esp,0x10
c00131cf:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00131d3:	75 0b                	jne    c00131e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00131d5:	50                   	push   eax
c00131d6:	50                   	push   eax
c00131d7:	57                   	push   edi
c00131d8:	56                   	push   esi
c00131d9:	e8 2e d6 fe ff       	call   c000080c <strcpy>
c00131de:	eb 41                	jmp    c0013221 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00131e0:	8a 07                	mov    al,BYTE PTR [edi]
c00131e2:	3c 5c                	cmp    al,0x5c
c00131e4:	74 04                	je     c00131ea <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00131e6:	3c 2f                	cmp    al,0x2f
c00131e8:	75 18                	jne    c0013202 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00131ea:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00131ed:	3c 60                	cmp    al,0x60
c00131ef:	7e 03                	jle    c00131f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00131f1:	83 e8 20             	sub    eax,0x20
c00131f4:	88 04 24             	mov    BYTE PTR [esp],al
c00131f7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131fe:	50                   	push   eax
c00131ff:	50                   	push   eax
c0013200:	eb 18                	jmp    c001321a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013202:	50                   	push   eax
c0013203:	50                   	push   eax
c0013204:	55                   	push   ebp
c0013205:	56                   	push   esi
c0013206:	e8 01 d6 fe ff       	call   c000080c <strcpy>
c001320b:	5a                   	pop    edx
c001320c:	59                   	pop    ecx
c001320d:	68 29 d1 02 c0       	push   0xc002d129
c0013212:	56                   	push   esi
c0013213:	e8 34 d7 fe ff       	call   c000094c <strcat>
c0013218:	5d                   	pop    ebp
c0013219:	58                   	pop    eax
c001321a:	57                   	push   edi
c001321b:	56                   	push   esi
c001321c:	e8 2b d7 fe ff       	call   c000094c <strcat>
c0013221:	83 c4 10             	add    esp,0x10
c0013224:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013227:	3c 60                	cmp    al,0x60
c0013229:	7e 03                	jle    c001322e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001322b:	83 e8 20             	sub    eax,0x20
c001322e:	88 04 24             	mov    BYTE PTR [esp],al
c0013231:	88 03                	mov    BYTE PTR [ebx],al
c0013233:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001323a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013240:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013244:	bf 03 00 00 00       	mov    edi,0x3
c0013249:	b8 03 00 00 00       	mov    eax,0x3
c001324e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013251:	84 d2                	test   dl,dl
c0013253:	0f 84 91 00 00 00    	je     c00132ea <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013259:	8d 4f 01             	lea    ecx,[edi+0x1]
c001325c:	80 fa 5c             	cmp    dl,0x5c
c001325f:	74 05                	je     c0013266 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013261:	80 fa 2f             	cmp    dl,0x2f
c0013264:	75 12                	jne    c0013278 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013266:	89 c5                	mov    ebp,eax
c0013268:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001326d:	74 09                	je     c0013278 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001326f:	40                   	inc    eax
c0013270:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013274:	89 cf                	mov    edi,ecx
c0013276:	eb d6                	jmp    c001324e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013278:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001327d:	75 5b                	jne    c00132da <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001327f:	80 fa 2e             	cmp    dl,0x2e
c0013282:	75 56                	jne    c00132da <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013284:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013288:	74 19                	je     c00132a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001328a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001328f:	74 53                	je     c00132e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013291:	89 f9                	mov    ecx,edi
c0013293:	41                   	inc    ecx
c0013294:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013297:	80 fa 2f             	cmp    dl,0x2f
c001329a:	74 f7                	je     c0013293 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001329c:	80 fa 5c             	cmp    dl,0x5c
c001329f:	74 f2                	je     c0013293 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132a1:	eb d1                	jmp    c0013274 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132a3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132a8:	74 3a                	je     c00132e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132aa:	83 f8 03             	cmp    eax,0x3
c00132ad:	74 c5                	je     c0013274 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132af:	41                   	inc    ecx
c00132b0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00132b3:	80 fa 2f             	cmp    dl,0x2f
c00132b6:	74 f7                	je     c00132af <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00132b8:	80 fa 5c             	cmp    dl,0x5c
c00132bb:	74 f2                	je     c00132af <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00132bd:	48                   	dec    eax
c00132be:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132c2:	75 06                	jne    c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132c4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132c8:	eb f3                	jmp    c00132bd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00132ca:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132ce:	74 07                	je     c00132d7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00132d0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132d4:	48                   	dec    eax
c00132d5:	eb f3                	jmp    c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132d7:	40                   	inc    eax
c00132d8:	eb 9a                	jmp    c0013274 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132da:	80 fa 2f             	cmp    dl,0x2f
c00132dd:	74 95                	je     c0013274 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132df:	80 fa 5c             	cmp    dl,0x5c
c00132e2:	74 90                	je     c0013274 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132e4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00132e7:	40                   	inc    eax
c00132e8:	eb 8a                	jmp    c0013274 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132ea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132ee:	83 ec 0c             	sub    esp,0xc
c00132f1:	53                   	push   ebx
c00132f2:	e8 75 d4 fe ff       	call   c000076c <strlen>
c00132f7:	83 c4 10             	add    esp,0x10
c00132fa:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00132ff:	75 26                	jne    c0013327 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013301:	83 ec 0c             	sub    esp,0xc
c0013304:	53                   	push   ebx
c0013305:	e8 62 d4 fe ff       	call   c000076c <strlen>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013312:	74 26                	je     c001333a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013314:	83 ec 0c             	sub    esp,0xc
c0013317:	53                   	push   ebx
c0013318:	e8 4f d4 fe ff       	call   c000076c <strlen>
c001331d:	83 c4 10             	add    esp,0x10
c0013320:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013325:	eb c7                	jmp    c00132ee <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013327:	83 ec 0c             	sub    esp,0xc
c001332a:	53                   	push   ebx
c001332b:	e8 3c d4 fe ff       	call   c000076c <strlen>
c0013330:	83 c4 10             	add    esp,0x10
c0013333:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013338:	74 c7                	je     c0013301 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001333a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013340:	5b                   	pop    ebx
c0013341:	5e                   	pop    esi
c0013342:	5f                   	pop    edi
c0013343:	5d                   	pop    ebp
c0013344:	c3                   	ret    
c0013345:	90                   	nop

c0013346 <File::File(char const*, Process*)>:
c0013346:	83 ec 0c             	sub    esp,0xc
c0013349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334d:	83 ec 08             	sub    esp,0x8
c0013350:	6a 00                	push   0x0
c0013352:	50                   	push   eax
c0013353:	e8 46 e2 ff ff       	call   c001159e <UnixFile::UnixFile(int)>
c0013358:	83 c4 10             	add    esp,0x10
c001335b:	ba 44 b9 02 c0       	mov    edx,0xc002b944
c0013360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013364:	89 10                	mov    DWORD PTR [eax],edx
c0013366:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001336a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013374:	83 c0 0d             	add    eax,0xd
c0013377:	83 ec 04             	sub    esp,0x4
c001337a:	52                   	push   edx
c001337b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001337f:	50                   	push   eax
c0013380:	e8 17 fe ff ff       	call   c001319c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013385:	83 c4 10             	add    esp,0x10
c0013388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001338f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013396:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001339c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00133a4:	90                   	nop
c00133a5:	83 c4 0c             	add    esp,0xc
c00133a8:	c3                   	ret    
c00133a9:	90                   	nop

c00133aa <File::open(FileOpenMode)>:
c00133aa:	53                   	push   ebx
c00133ab:	b8 0b 00 00 00       	mov    eax,0xb
c00133b0:	83 ec 08             	sub    esp,0x8
c00133b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133b7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00133be:	80 fa 19             	cmp    dl,0x19
c00133c1:	77 40                	ja     c0013403 <File::open(FileOpenMode)+0x59>
c00133c3:	8b 14 95 00 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0600]
c00133ca:	85 d2                	test   edx,edx
c00133cc:	74 35                	je     c0013403 <File::open(FileOpenMode)+0x59>
c00133ce:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00133d4:	85 d2                	test   edx,edx
c00133d6:	74 2b                	je     c0013403 <File::open(FileOpenMode)+0x59>
c00133d8:	b8 06 00 00 00       	mov    eax,0x6
c00133dd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00133e1:	75 20                	jne    c0013403 <File::open(FileOpenMode)+0x59>
c00133e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00133e5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133ef:	51                   	push   ecx
c00133f0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133f3:	51                   	push   ecx
c00133f4:	52                   	push   edx
c00133f5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00133f8:	83 c4 10             	add    esp,0x10
c00133fb:	85 c0                	test   eax,eax
c00133fd:	75 04                	jne    c0013403 <File::open(FileOpenMode)+0x59>
c00133ff:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013403:	83 c4 08             	add    esp,0x8
c0013406:	5b                   	pop    ebx
c0013407:	c3                   	ret    

c0013408 <File::close()>:
c0013408:	53                   	push   ebx
c0013409:	b8 0b 00 00 00       	mov    eax,0xb
c001340e:	83 ec 08             	sub    esp,0x8
c0013411:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013415:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001341c:	80 fa 19             	cmp    dl,0x19
c001341f:	77 41                	ja     c0013462 <File::close()+0x5a>
c0013421:	8b 1c 95 00 fa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0600]
c0013428:	85 db                	test   ebx,ebx
c001342a:	74 36                	je     c0013462 <File::close()+0x5a>
c001342c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013433:	74 2d                	je     c0013462 <File::close()+0x5a>
c0013435:	b8 05 00 00 00       	mov    eax,0x5
c001343a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001343e:	74 22                	je     c0013462 <File::close()+0x5a>
c0013440:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013444:	8b 04 95 00 fa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0600]
c001344b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013451:	53                   	push   ebx
c0013452:	53                   	push   ebx
c0013453:	8b 10                	mov    edx,DWORD PTR [eax]
c0013455:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001345b:	50                   	push   eax
c001345c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001345f:	83 c4 10             	add    esp,0x10
c0013462:	83 c4 08             	add    esp,0x8
c0013465:	5b                   	pop    ebx
c0013466:	c3                   	ret    
c0013467:	90                   	nop

c0013468 <File::seek(unsigned long long)>:
c0013468:	56                   	push   esi
c0013469:	53                   	push   ebx
c001346a:	b8 0b 00 00 00       	mov    eax,0xb
c001346f:	51                   	push   ecx
c0013470:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013474:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013478:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001347f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013483:	80 fa 19             	cmp    dl,0x19
c0013486:	77 31                	ja     c00134b9 <File::seek(unsigned long long)+0x51>
c0013488:	8b 14 95 00 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0600]
c001348f:	85 d2                	test   edx,edx
c0013491:	74 26                	je     c00134b9 <File::seek(unsigned long long)+0x51>
c0013493:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013499:	85 d2                	test   edx,edx
c001349b:	74 1c                	je     c00134b9 <File::seek(unsigned long long)+0x51>
c001349d:	b8 05 00 00 00       	mov    eax,0x5
c00134a2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00134a6:	74 11                	je     c00134b9 <File::seek(unsigned long long)+0x51>
c00134a8:	8b 02                	mov    eax,DWORD PTR [edx]
c00134aa:	53                   	push   ebx
c00134ab:	51                   	push   ecx
c00134ac:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00134b2:	52                   	push   edx
c00134b3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134b6:	83 c4 10             	add    esp,0x10
c00134b9:	5a                   	pop    edx
c00134ba:	5b                   	pop    ebx
c00134bb:	5e                   	pop    esi
c00134bc:	c3                   	ret    
c00134bd:	90                   	nop

c00134be <File::tell(unsigned long long*)>:
c00134be:	83 ec 0c             	sub    esp,0xc
c00134c1:	b8 0b 00 00 00       	mov    eax,0xb
c00134c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134ca:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134d1:	80 fa 19             	cmp    dl,0x19
c00134d4:	77 34                	ja     c001350a <File::tell(unsigned long long*)+0x4c>
c00134d6:	8b 14 95 00 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0600]
c00134dd:	85 d2                	test   edx,edx
c00134df:	74 29                	je     c001350a <File::tell(unsigned long long*)+0x4c>
c00134e1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134e7:	85 d2                	test   edx,edx
c00134e9:	74 1f                	je     c001350a <File::tell(unsigned long long*)+0x4c>
c00134eb:	b8 05 00 00 00       	mov    eax,0x5
c00134f0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134f4:	74 14                	je     c001350a <File::tell(unsigned long long*)+0x4c>
c00134f6:	50                   	push   eax
c00134f7:	8b 02                	mov    eax,DWORD PTR [edx]
c00134f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134fd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013503:	52                   	push   edx
c0013504:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013507:	83 c4 10             	add    esp,0x10
c001350a:	83 c4 0c             	add    esp,0xc
c001350d:	c3                   	ret    

c001350e <File::rewind()>:
c001350e:	83 ec 10             	sub    esp,0x10
c0013511:	6a 00                	push   0x0
c0013513:	6a 00                	push   0x0
c0013515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013519:	e8 4a ff ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001351e:	83 c4 1c             	add    esp,0x1c
c0013521:	c3                   	ret    

c0013522 <File::unlink()>:
c0013522:	83 ec 0c             	sub    esp,0xc
c0013525:	b8 0b 00 00 00       	mov    eax,0xb
c001352a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001352e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013535:	80 f9 19             	cmp    cl,0x19
c0013538:	77 2f                	ja     c0013569 <File::unlink()+0x47>
c001353a:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c0013541:	85 c9                	test   ecx,ecx
c0013543:	74 24                	je     c0013569 <File::unlink()+0x47>
c0013545:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001354b:	85 c9                	test   ecx,ecx
c001354d:	74 1a                	je     c0013569 <File::unlink()+0x47>
c001354f:	b8 06 00 00 00       	mov    eax,0x6
c0013554:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013558:	75 0f                	jne    c0013569 <File::unlink()+0x47>
c001355a:	83 c2 0d             	add    edx,0xd
c001355d:	50                   	push   eax
c001355e:	50                   	push   eax
c001355f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013561:	52                   	push   edx
c0013562:	51                   	push   ecx
c0013563:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013566:	83 c4 10             	add    esp,0x10
c0013569:	83 c4 0c             	add    esp,0xc
c001356c:	c3                   	ret    
c001356d:	90                   	nop

c001356e <File::rename(char const*)>:
c001356e:	83 ec 0c             	sub    esp,0xc
c0013571:	b8 0b 00 00 00       	mov    eax,0xb
c0013576:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001357a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013581:	80 f9 19             	cmp    cl,0x19
c0013584:	77 32                	ja     c00135b8 <File::rename(char const*)+0x4a>
c0013586:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c001358d:	85 c9                	test   ecx,ecx
c001358f:	74 27                	je     c00135b8 <File::rename(char const*)+0x4a>
c0013591:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013597:	85 c9                	test   ecx,ecx
c0013599:	74 1d                	je     c00135b8 <File::rename(char const*)+0x4a>
c001359b:	b8 06 00 00 00       	mov    eax,0x6
c00135a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135a4:	75 12                	jne    c00135b8 <File::rename(char const*)+0x4a>
c00135a6:	83 c2 0d             	add    edx,0xd
c00135a9:	50                   	push   eax
c00135aa:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135b0:	52                   	push   edx
c00135b1:	51                   	push   ecx
c00135b2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00135b5:	83 c4 10             	add    esp,0x10
c00135b8:	83 c4 0c             	add    esp,0xc
c00135bb:	c3                   	ret    

c00135bc <File::chfatattr(unsigned char, unsigned char)>:
c00135bc:	57                   	push   edi
c00135bd:	b8 0b 00 00 00       	mov    eax,0xb
c00135c2:	56                   	push   esi
c00135c3:	53                   	push   ebx
c00135c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00135cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135d3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00135d7:	80 f9 19             	cmp    cl,0x19
c00135da:	77 37                	ja     c0013613 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135dc:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c00135e3:	85 c9                	test   ecx,ecx
c00135e5:	74 2c                	je     c0013613 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135e7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135ed:	85 c9                	test   ecx,ecx
c00135ef:	74 22                	je     c0013613 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135f1:	b8 06 00 00 00       	mov    eax,0x6
c00135f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135fa:	75 17                	jne    c0013613 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135fc:	8b 39                	mov    edi,DWORD PTR [ecx]
c00135fe:	89 f0                	mov    eax,esi
c0013600:	83 c2 0d             	add    edx,0xd
c0013603:	0f b6 f0             	movzx  esi,al
c0013606:	0f b6 db             	movzx  ebx,bl
c0013609:	56                   	push   esi
c001360a:	53                   	push   ebx
c001360b:	52                   	push   edx
c001360c:	51                   	push   ecx
c001360d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013610:	83 c4 10             	add    esp,0x10
c0013613:	5b                   	pop    ebx
c0013614:	5e                   	pop    esi
c0013615:	5f                   	pop    edi
c0013616:	c3                   	ret    
c0013617:	90                   	nop

c0013618 <File::exists()>:
c0013618:	83 ec 0c             	sub    esp,0xc
c001361b:	31 c0                	xor    eax,eax
c001361d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013621:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013628:	80 f9 19             	cmp    cl,0x19
c001362b:	77 24                	ja     c0013651 <File::exists()+0x39>
c001362d:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c0013634:	85 c9                	test   ecx,ecx
c0013636:	74 19                	je     c0013651 <File::exists()+0x39>
c0013638:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001363e:	85 c9                	test   ecx,ecx
c0013640:	74 0f                	je     c0013651 <File::exists()+0x39>
c0013642:	83 c2 0d             	add    edx,0xd
c0013645:	50                   	push   eax
c0013646:	50                   	push   eax
c0013647:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013649:	52                   	push   edx
c001364a:	51                   	push   ecx
c001364b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001364e:	83 c4 10             	add    esp,0x10
c0013651:	83 c4 0c             	add    esp,0xc
c0013654:	c3                   	ret    
c0013655:	90                   	nop

c0013656 <File::stat(unsigned long long*, bool*)>:
c0013656:	56                   	push   esi
c0013657:	53                   	push   ebx
c0013658:	50                   	push   eax
c0013659:	b8 0b 00 00 00       	mov    eax,0xb
c001365e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013662:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013666:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001366d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013671:	80 f9 19             	cmp    cl,0x19
c0013674:	77 3d                	ja     c00136b3 <File::stat(unsigned long long*, bool*)+0x5d>
c0013676:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c001367d:	85 c9                	test   ecx,ecx
c001367f:	74 32                	je     c00136b3 <File::stat(unsigned long long*, bool*)+0x5d>
c0013681:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013687:	85 c9                	test   ecx,ecx
c0013689:	74 28                	je     c00136b3 <File::stat(unsigned long long*, bool*)+0x5d>
c001368b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001368d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013691:	74 13                	je     c00136a6 <File::stat(unsigned long long*, bool*)+0x50>
c0013693:	83 ec 04             	sub    esp,0x4
c0013696:	56                   	push   esi
c0013697:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001369d:	51                   	push   ecx
c001369e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00136a1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00136a4:	eb 0a                	jmp    c00136b0 <File::stat(unsigned long long*, bool*)+0x5a>
c00136a6:	53                   	push   ebx
c00136a7:	83 c2 0d             	add    edx,0xd
c00136aa:	56                   	push   esi
c00136ab:	52                   	push   edx
c00136ac:	51                   	push   ecx
c00136ad:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00136b0:	83 c4 10             	add    esp,0x10
c00136b3:	5a                   	pop    edx
c00136b4:	5b                   	pop    ebx
c00136b5:	5e                   	pop    esi
c00136b6:	c3                   	ret    

c00136b7 <Fs::setcwd(Process*, char*)>:
c00136b7:	55                   	push   ebp
c00136b8:	57                   	push   edi
c00136b9:	56                   	push   esi
c00136ba:	53                   	push   ebx
c00136bb:	81 ec 20 02 00 00    	sub    esp,0x220
c00136c1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00136c8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00136ce:	57                   	push   edi
c00136cf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00136d6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00136da:	56                   	push   esi
c00136db:	e8 bc fa ff ff       	call   c001319c <Fs::standardiseFiles(char*, char const*, char const*)>
c00136e0:	89 34 24             	mov    DWORD PTR [esp],esi
c00136e3:	e8 84 d0 fe ff       	call   c000076c <strlen>
c00136e8:	83 c4 10             	add    esp,0x10
c00136eb:	83 f8 02             	cmp    eax,0x2
c00136ee:	77 17                	ja     c0013707 <Fs::setcwd(Process*, char*)+0x50>
c00136f0:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00136f5:	83 e8 41             	sub    eax,0x41
c00136f8:	83 f8 19             	cmp    eax,0x19
c00136fb:	76 24                	jbe    c0013721 <Fs::setcwd(Process*, char*)+0x6a>
c00136fd:	b8 03 00 00 00       	mov    eax,0x3
c0013702:	e9 e0 00 00 00       	jmp    c00137e7 <Fs::setcwd(Process*, char*)+0x130>
c0013707:	83 ec 0c             	sub    esp,0xc
c001370a:	56                   	push   esi
c001370b:	e8 5c d0 fe ff       	call   c000076c <strlen>
c0013710:	83 c4 10             	add    esp,0x10
c0013713:	83 f8 03             	cmp    eax,0x3
c0013716:	75 34                	jne    c001374c <Fs::setcwd(Process*, char*)+0x95>
c0013718:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001371d:	75 2d                	jne    c001374c <Fs::setcwd(Process*, char*)+0x95>
c001371f:	eb cf                	jmp    c00136f0 <Fs::setcwd(Process*, char*)+0x39>
c0013721:	8b 14 85 00 fa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0600]
c0013728:	b8 05 00 00 00       	mov    eax,0x5
c001372d:	85 d2                	test   edx,edx
c001372f:	0f 84 b2 00 00 00    	je     c00137e7 <Fs::setcwd(Process*, char*)+0x130>
c0013735:	b8 06 00 00 00       	mov    eax,0x6
c001373a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013741:	0f 85 92 00 00 00    	jne    c00137d9 <Fs::setcwd(Process*, char*)+0x122>
c0013747:	e9 9b 00 00 00       	jmp    c00137e7 <Fs::setcwd(Process*, char*)+0x130>
c001374c:	83 ec 0c             	sub    esp,0xc
c001374f:	68 14 01 00 00       	push   0x114
c0013754:	e8 33 c1 ff ff       	call   c000f88c <malloc>
c0013759:	83 c4 0c             	add    esp,0xc
c001375c:	89 c3                	mov    ebx,eax
c001375e:	55                   	push   ebp
c001375f:	56                   	push   esi
c0013760:	50                   	push   eax
c0013761:	e8 e0 fb ff ff       	call   c0013346 <File::File(char const*, Process*)>
c0013766:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001376b:	83 c4 0c             	add    esp,0xc
c001376e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013772:	50                   	push   eax
c0013773:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013777:	50                   	push   eax
c0013778:	53                   	push   ebx
c0013779:	e8 d8 fe ff ff       	call   c0013656 <File::stat(unsigned long long*, bool*)>
c001377e:	83 c4 10             	add    esp,0x10
c0013781:	83 f8 02             	cmp    eax,0x2
c0013784:	74 04                	je     c001378a <Fs::setcwd(Process*, char*)+0xd3>
c0013786:	85 c0                	test   eax,eax
c0013788:	74 1c                	je     c00137a6 <Fs::setcwd(Process*, char*)+0xef>
c001378a:	b8 01 00 00 00       	mov    eax,0x1
c001378f:	85 db                	test   ebx,ebx
c0013791:	74 54                	je     c00137e7 <Fs::setcwd(Process*, char*)+0x130>
c0013793:	83 ec 0c             	sub    esp,0xc
c0013796:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013798:	53                   	push   ebx
c0013799:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001379c:	83 c4 10             	add    esp,0x10
c001379f:	b8 01 00 00 00       	mov    eax,0x1
c00137a4:	eb 41                	jmp    c00137e7 <Fs::setcwd(Process*, char*)+0x130>
c00137a6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00137ab:	75 1c                	jne    c00137c9 <Fs::setcwd(Process*, char*)+0x112>
c00137ad:	b8 02 00 00 00       	mov    eax,0x2
c00137b2:	85 db                	test   ebx,ebx
c00137b4:	74 31                	je     c00137e7 <Fs::setcwd(Process*, char*)+0x130>
c00137b6:	83 ec 0c             	sub    esp,0xc
c00137b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137bb:	53                   	push   ebx
c00137bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137bf:	83 c4 10             	add    esp,0x10
c00137c2:	b8 02 00 00 00       	mov    eax,0x2
c00137c7:	eb 1e                	jmp    c00137e7 <Fs::setcwd(Process*, char*)+0x130>
c00137c9:	85 db                	test   ebx,ebx
c00137cb:	74 0c                	je     c00137d9 <Fs::setcwd(Process*, char*)+0x122>
c00137cd:	83 ec 0c             	sub    esp,0xc
c00137d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137d2:	53                   	push   ebx
c00137d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137d6:	83 c4 10             	add    esp,0x10
c00137d9:	50                   	push   eax
c00137da:	50                   	push   eax
c00137db:	56                   	push   esi
c00137dc:	57                   	push   edi
c00137dd:	e8 2a d0 fe ff       	call   c000080c <strcpy>
c00137e2:	83 c4 10             	add    esp,0x10
c00137e5:	31 c0                	xor    eax,eax
c00137e7:	81 c4 1c 02 00 00    	add    esp,0x21c
c00137ed:	5b                   	pop    ebx
c00137ee:	5e                   	pop    esi
c00137ef:	5f                   	pop    edi
c00137f0:	5d                   	pop    ebp
c00137f1:	c3                   	ret    

c00137f2 <Directory::Directory(char const*, Process*)>:
c00137f2:	83 ec 0c             	sub    esp,0xc
c00137f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f9:	83 ec 08             	sub    esp,0x8
c00137fc:	6a 00                	push   0x0
c00137fe:	50                   	push   eax
c00137ff:	e8 9a dd ff ff       	call   c001159e <UnixFile::UnixFile(int)>
c0013804:	83 c4 10             	add    esp,0x10
c0013807:	ba 60 b9 02 c0       	mov    edx,0xc002b960
c001380c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013810:	89 10                	mov    DWORD PTR [eax],edx
c0013812:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013816:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001381c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013820:	83 c0 0d             	add    eax,0xd
c0013823:	83 ec 04             	sub    esp,0x4
c0013826:	52                   	push   edx
c0013827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001382b:	50                   	push   eax
c001382c:	e8 6b f9 ff ff       	call   c001319c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013831:	83 c4 10             	add    esp,0x10
c0013834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013838:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001383b:	8d 50 bf             	lea    edx,[eax-0x41]
c001383e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013842:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013850:	90                   	nop
c0013851:	83 c4 0c             	add    esp,0xc
c0013854:	c3                   	ret    
c0013855:	90                   	nop

c0013856 <Directory::open()>:
c0013856:	53                   	push   ebx
c0013857:	b8 0b 00 00 00       	mov    eax,0xb
c001385c:	83 ec 08             	sub    esp,0x8
c001385f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013863:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001386a:	80 fa 19             	cmp    dl,0x19
c001386d:	77 3d                	ja     c00138ac <Directory::open()+0x56>
c001386f:	8b 14 95 00 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0600]
c0013876:	85 d2                	test   edx,edx
c0013878:	74 32                	je     c00138ac <Directory::open()+0x56>
c001387a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013880:	85 d2                	test   edx,edx
c0013882:	74 28                	je     c00138ac <Directory::open()+0x56>
c0013884:	b8 06 00 00 00       	mov    eax,0x6
c0013889:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001388d:	75 1d                	jne    c00138ac <Directory::open()+0x56>
c001388f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013895:	50                   	push   eax
c0013896:	8b 02                	mov    eax,DWORD PTR [edx]
c0013898:	51                   	push   ecx
c0013899:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001389c:	51                   	push   ecx
c001389d:	52                   	push   edx
c001389e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00138a1:	83 c4 10             	add    esp,0x10
c00138a4:	85 c0                	test   eax,eax
c00138a6:	75 04                	jne    c00138ac <Directory::open()+0x56>
c00138a8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00138ac:	83 c4 08             	add    esp,0x8
c00138af:	5b                   	pop    ebx
c00138b0:	c3                   	ret    
c00138b1:	90                   	nop

c00138b2 <Directory::close()>:
c00138b2:	53                   	push   ebx
c00138b3:	b8 0b 00 00 00       	mov    eax,0xb
c00138b8:	83 ec 08             	sub    esp,0x8
c00138bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00138bf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00138c6:	80 fa 19             	cmp    dl,0x19
c00138c9:	77 41                	ja     c001390c <Directory::close()+0x5a>
c00138cb:	8b 1c 95 00 fa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0600]
c00138d2:	85 db                	test   ebx,ebx
c00138d4:	74 36                	je     c001390c <Directory::close()+0x5a>
c00138d6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00138dd:	74 2d                	je     c001390c <Directory::close()+0x5a>
c00138df:	b8 05 00 00 00       	mov    eax,0x5
c00138e4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00138e8:	74 22                	je     c001390c <Directory::close()+0x5a>
c00138ea:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00138ee:	8b 04 95 00 fa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0600]
c00138f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138fb:	53                   	push   ebx
c00138fc:	53                   	push   ebx
c00138fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00138ff:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013905:	50                   	push   eax
c0013906:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	83 c4 08             	add    esp,0x8
c001390f:	5b                   	pop    ebx
c0013910:	c3                   	ret    
c0013911:	90                   	nop

c0013912 <Directory::unlink()>:
c0013912:	83 ec 0c             	sub    esp,0xc
c0013915:	b8 0b 00 00 00       	mov    eax,0xb
c001391a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001391e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013925:	80 f9 19             	cmp    cl,0x19
c0013928:	77 2f                	ja     c0013959 <Directory::unlink()+0x47>
c001392a:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c0013931:	85 c9                	test   ecx,ecx
c0013933:	74 24                	je     c0013959 <Directory::unlink()+0x47>
c0013935:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001393b:	85 c9                	test   ecx,ecx
c001393d:	74 1a                	je     c0013959 <Directory::unlink()+0x47>
c001393f:	b8 06 00 00 00       	mov    eax,0x6
c0013944:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013948:	75 0f                	jne    c0013959 <Directory::unlink()+0x47>
c001394a:	83 c2 0d             	add    edx,0xd
c001394d:	50                   	push   eax
c001394e:	50                   	push   eax
c001394f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013951:	52                   	push   edx
c0013952:	51                   	push   ecx
c0013953:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013956:	83 c4 10             	add    esp,0x10
c0013959:	83 c4 0c             	add    esp,0xc
c001395c:	c3                   	ret    
c001395d:	90                   	nop

c001395e <Directory::rename(char const*)>:
c001395e:	83 ec 0c             	sub    esp,0xc
c0013961:	b8 0b 00 00 00       	mov    eax,0xb
c0013966:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001396a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013971:	80 f9 19             	cmp    cl,0x19
c0013974:	77 32                	ja     c00139a8 <Directory::rename(char const*)+0x4a>
c0013976:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c001397d:	85 c9                	test   ecx,ecx
c001397f:	74 27                	je     c00139a8 <Directory::rename(char const*)+0x4a>
c0013981:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013987:	85 c9                	test   ecx,ecx
c0013989:	74 1d                	je     c00139a8 <Directory::rename(char const*)+0x4a>
c001398b:	b8 06 00 00 00       	mov    eax,0x6
c0013990:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013994:	75 12                	jne    c00139a8 <Directory::rename(char const*)+0x4a>
c0013996:	83 c2 0d             	add    edx,0xd
c0013999:	50                   	push   eax
c001399a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001399c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139a0:	52                   	push   edx
c00139a1:	51                   	push   ecx
c00139a2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00139a5:	83 c4 10             	add    esp,0x10
c00139a8:	83 c4 0c             	add    esp,0xc
c00139ab:	c3                   	ret    

c00139ac <Directory::exists()>:
c00139ac:	83 ec 0c             	sub    esp,0xc
c00139af:	31 c0                	xor    eax,eax
c00139b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139bc:	80 f9 19             	cmp    cl,0x19
c00139bf:	77 24                	ja     c00139e5 <Directory::exists()+0x39>
c00139c1:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c00139c8:	85 c9                	test   ecx,ecx
c00139ca:	74 19                	je     c00139e5 <Directory::exists()+0x39>
c00139cc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139d2:	85 c9                	test   ecx,ecx
c00139d4:	74 0f                	je     c00139e5 <Directory::exists()+0x39>
c00139d6:	83 c2 0d             	add    edx,0xd
c00139d9:	50                   	push   eax
c00139da:	50                   	push   eax
c00139db:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139dd:	52                   	push   edx
c00139de:	51                   	push   ecx
c00139df:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00139e2:	83 c4 10             	add    esp,0x10
c00139e5:	83 c4 0c             	add    esp,0xc
c00139e8:	c3                   	ret    
c00139e9:	90                   	nop

c00139ea <Directory::read(dirent*)>:
c00139ea:	83 ec 1c             	sub    esp,0x1c
c00139ed:	b8 0b 00 00 00       	mov    eax,0xb
c00139f2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00139f6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139fd:	80 fa 19             	cmp    dl,0x19
c0013a00:	77 30                	ja     c0013a32 <Directory::read(dirent*)+0x48>
c0013a02:	8b 14 95 00 fa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0600]
c0013a09:	85 d2                	test   edx,edx
c0013a0b:	74 25                	je     c0013a32 <Directory::read(dirent*)+0x48>
c0013a0d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a14:	74 1c                	je     c0013a32 <Directory::read(dirent*)+0x48>
c0013a16:	83 ec 0c             	sub    esp,0xc
c0013a19:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a1b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a1f:	52                   	push   edx
c0013a20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a24:	6a 00                	push   0x0
c0013a26:	68 10 01 00 00       	push   0x110
c0013a2b:	51                   	push   ecx
c0013a2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a2f:	83 c4 20             	add    esp,0x20
c0013a32:	83 c4 1c             	add    esp,0x1c
c0013a35:	c3                   	ret    

c0013a36 <Directory::create()>:
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	b8 0b 00 00 00       	mov    eax,0xb
c0013a3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a49:	80 f9 19             	cmp    cl,0x19
c0013a4c:	77 2f                	ja     c0013a7d <Directory::create()+0x47>
c0013a4e:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c0013a55:	85 c9                	test   ecx,ecx
c0013a57:	74 24                	je     c0013a7d <Directory::create()+0x47>
c0013a59:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a5f:	85 c9                	test   ecx,ecx
c0013a61:	74 1a                	je     c0013a7d <Directory::create()+0x47>
c0013a63:	b8 06 00 00 00       	mov    eax,0x6
c0013a68:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a6c:	75 0f                	jne    c0013a7d <Directory::create()+0x47>
c0013a6e:	83 c2 0d             	add    edx,0xd
c0013a71:	50                   	push   eax
c0013a72:	50                   	push   eax
c0013a73:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a75:	52                   	push   edx
c0013a76:	51                   	push   ecx
c0013a77:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a7a:	83 c4 10             	add    esp,0x10
c0013a7d:	83 c4 0c             	add    esp,0xc
c0013a80:	c3                   	ret    
c0013a81:	90                   	nop

c0013a82 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a82:	b8 0a 00 00 00       	mov    eax,0xa
c0013a87:	c3                   	ret    

c0013a88 <Bus::Bus(char const*)>:
c0013a88:	83 ec 0c             	sub    esp,0xc
c0013a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8f:	83 ec 08             	sub    esp,0x8
c0013a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a96:	50                   	push   eax
c0013a97:	e8 88 09 00 00       	call   c0014424 <Device::Device(char const*)>
c0013a9c:	83 c4 10             	add    esp,0x10
c0013a9f:	ba 7c b9 02 c0       	mov    edx,0xc002b97c
c0013aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa8:	89 10                	mov    DWORD PTR [eax],edx
c0013aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aae:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013ab8:	90                   	nop
c0013ab9:	83 c4 0c             	add    esp,0xc
c0013abc:	c3                   	ret    
c0013abd:	90                   	nop

c0013abe <Bus::~Bus()>:
c0013abe:	83 ec 0c             	sub    esp,0xc
c0013ac1:	ba 7c b9 02 c0       	mov    edx,0xc002b97c
c0013ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aca:	89 10                	mov    DWORD PTR [eax],edx
c0013acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad0:	83 ec 0c             	sub    esp,0xc
c0013ad3:	50                   	push   eax
c0013ad4:	e8 15 06 00 00       	call   c00140ee <Device::~Device()>
c0013ad9:	83 c4 10             	add    esp,0x10
c0013adc:	90                   	nop
c0013add:	83 c4 0c             	add    esp,0xc
c0013ae0:	c3                   	ret    
c0013ae1:	90                   	nop

c0013ae2 <Bus::~Bus()>:
c0013ae2:	83 ec 0c             	sub    esp,0xc
c0013ae5:	83 ec 0c             	sub    esp,0xc
c0013ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aec:	e8 cd ff ff ff       	call   c0013abe <Bus::~Bus()>
c0013af1:	83 c4 10             	add    esp,0x10
c0013af4:	83 ec 08             	sub    esp,0x8
c0013af7:	68 58 01 00 00       	push   0x158
c0013afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b00:	e8 02 f2 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0013b05:	83 c4 10             	add    esp,0x10
c0013b08:	83 c4 0c             	add    esp,0xc
c0013b0b:	c3                   	ret    

c0013b0c <Buzzer::Buzzer(char const*)>:
c0013b0c:	83 ec 0c             	sub    esp,0xc
c0013b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b13:	83 ec 08             	sub    esp,0x8
c0013b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b1a:	50                   	push   eax
c0013b1b:	e8 04 09 00 00       	call   c0014424 <Device::Device(char const*)>
c0013b20:	83 c4 10             	add    esp,0x10
c0013b23:	ba a8 b9 02 c0       	mov    edx,0xc002b9a8
c0013b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2c:	89 10                	mov    DWORD PTR [eax],edx
c0013b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b32:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b40:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013b4a:	90                   	nop
c0013b4b:	83 c4 0c             	add    esp,0xc
c0013b4e:	c3                   	ret    
c0013b4f:	90                   	nop

c0013b50 <Buzzer::~Buzzer()>:
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	ba a8 b9 02 c0       	mov    edx,0xc002b9a8
c0013b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5c:	89 10                	mov    DWORD PTR [eax],edx
c0013b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b62:	83 ec 0c             	sub    esp,0xc
c0013b65:	50                   	push   eax
c0013b66:	e8 83 05 00 00       	call   c00140ee <Device::~Device()>
c0013b6b:	83 c4 10             	add    esp,0x10
c0013b6e:	90                   	nop
c0013b6f:	83 c4 0c             	add    esp,0xc
c0013b72:	c3                   	ret    
c0013b73:	90                   	nop

c0013b74 <Buzzer::~Buzzer()>:
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	83 ec 0c             	sub    esp,0xc
c0013b7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b7e:	e8 cd ff ff ff       	call   c0013b50 <Buzzer::~Buzzer()>
c0013b83:	83 c4 10             	add    esp,0x10
c0013b86:	83 ec 08             	sub    esp,0x8
c0013b89:	68 5c 01 00 00       	push   0x15c
c0013b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b92:	e8 70 f1 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0013b97:	83 c4 10             	add    esp,0x10
c0013b9a:	83 c4 0c             	add    esp,0xc
c0013b9d:	c3                   	ret    

c0013b9e <Buzzer::stop()>:
c0013b9e:	83 ec 14             	sub    esp,0x14
c0013ba1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ba5:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ba7:	6a 00                	push   0x0
c0013ba9:	50                   	push   eax
c0013baa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013bad:	83 c4 1c             	add    esp,0x1c
c0013bb0:	c3                   	ret    

c0013bb1 <beepThread(void*)>:
c0013bb1:	53                   	push   ebx
c0013bb2:	83 ec 08             	sub    esp,0x8
c0013bb5:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0013bba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bbe:	48                   	dec    eax
c0013bbf:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0013bc4:	75 01                	jne    c0013bc7 <beepThread(void*)+0x16>
c0013bc6:	fb                   	sti    
c0013bc7:	50                   	push   eax
c0013bc8:	50                   	push   eax
c0013bc9:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013bce:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013bd4:	52                   	push   edx
c0013bd5:	50                   	push   eax
c0013bd6:	e8 0a ae 00 00       	call   c001e9e5 <nanoSleep(unsigned long long)>
c0013bdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bde:	e8 bb ff ff ff       	call   c0013b9e <Buzzer::stop()>
c0013be3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013beb:	83 c4 18             	add    esp,0x18
c0013bee:	5b                   	pop    ebx
c0013bef:	e9 ed ac 00 00       	jmp    c001e8e1 <blockTask(TaskState)>

c0013bf4 <Buzzer::beep(int, int, bool)>:
c0013bf4:	57                   	push   edi
c0013bf5:	56                   	push   esi
c0013bf6:	53                   	push   ebx
c0013bf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bfb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013bff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c03:	52                   	push   edx
c0013c04:	52                   	push   edx
c0013c05:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0b:	56                   	push   esi
c0013c0c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c0f:	83 c4 10             	add    esp,0x10
c0013c12:	89 f8                	mov    eax,edi
c0013c14:	84 c0                	test   al,al
c0013c16:	74 1f                	je     c0013c37 <Buzzer::beep(int, int, bool)+0x43>
c0013c18:	50                   	push   eax
c0013c19:	50                   	push   eax
c0013c1a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c20:	99                   	cdq    
c0013c21:	52                   	push   edx
c0013c22:	50                   	push   eax
c0013c23:	e8 bd ad 00 00       	call   c001e9e5 <nanoSleep(unsigned long long)>
c0013c28:	83 c4 10             	add    esp,0x10
c0013c2b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c2f:	5b                   	pop    ebx
c0013c30:	5e                   	pop    esi
c0013c31:	5f                   	pop    edi
c0013c32:	e9 67 ff ff ff       	jmp    c0013b9e <Buzzer::stop()>
c0013c37:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c3d:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0013c42:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013c4a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013c4e:	c7 44 24 14 b1 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013bb1
c0013c56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c5a:	5b                   	pop    ebx
c0013c5b:	5e                   	pop    esi
c0013c5c:	5f                   	pop    edi
c0013c5d:	e9 3c a8 00 00       	jmp    c001e49e <Process::createThread(void (*)(void*), void*, int)>

c0013c62 <User::loadClockSettings(int)>:
c0013c62:	53                   	push   ebx
c0013c63:	83 ec 14             	sub    esp,0x14
c0013c66:	68 14 01 00 00       	push   0x114
c0013c6b:	e8 1c bc ff ff       	call   c000f88c <malloc>
c0013c70:	83 c4 0c             	add    esp,0xc
c0013c73:	89 c3                	mov    ebx,eax
c0013c75:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c0013c7b:	68 d0 b9 02 c0       	push   0xc002b9d0
c0013c80:	50                   	push   eax
c0013c81:	e8 c0 f6 ff ff       	call   c0013346 <File::File(char const*, Process*)>
c0013c86:	58                   	pop    eax
c0013c87:	5a                   	pop    edx
c0013c88:	6a 01                	push   0x1
c0013c8a:	53                   	push   ebx
c0013c8b:	e8 1a f7 ff ff       	call   c00133aa <File::open(FileOpenMode)>
c0013c90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c93:	e8 70 f7 ff ff       	call   c0013408 <File::close()>
c0013c98:	83 c4 10             	add    esp,0x10
c0013c9b:	85 db                	test   ebx,ebx
c0013c9d:	74 0f                	je     c0013cae <User::loadClockSettings(int)+0x4c>
c0013c9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ca1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013ca5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ca8:	83 c4 08             	add    esp,0x8
c0013cab:	5b                   	pop    ebx
c0013cac:	ff e0                	jmp    eax
c0013cae:	83 c4 08             	add    esp,0x8
c0013cb1:	5b                   	pop    ebx
c0013cb2:	c3                   	ret    
c0013cb3:	90                   	nop

c0013cb4 <Clock::Clock(char const*)>:
c0013cb4:	83 ec 0c             	sub    esp,0xc
c0013cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cbb:	83 ec 08             	sub    esp,0x8
c0013cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc2:	50                   	push   eax
c0013cc3:	e8 5c 07 00 00       	call   c0014424 <Device::Device(char const*)>
c0013cc8:	83 c4 10             	add    esp,0x10
c0013ccb:	ba f8 b9 02 c0       	mov    edx,0xc002b9f8
c0013cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd4:	89 10                	mov    DWORD PTR [eax],edx
c0013cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cda:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013ce4:	90                   	nop
c0013ce5:	83 c4 0c             	add    esp,0xc
c0013ce8:	c3                   	ret    
c0013ce9:	90                   	nop

c0013cea <Clock::~Clock()>:
c0013cea:	83 ec 0c             	sub    esp,0xc
c0013ced:	ba f8 b9 02 c0       	mov    edx,0xc002b9f8
c0013cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf6:	89 10                	mov    DWORD PTR [eax],edx
c0013cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cfc:	83 ec 0c             	sub    esp,0xc
c0013cff:	50                   	push   eax
c0013d00:	e8 e9 03 00 00       	call   c00140ee <Device::~Device()>
c0013d05:	83 c4 10             	add    esp,0x10
c0013d08:	90                   	nop
c0013d09:	83 c4 0c             	add    esp,0xc
c0013d0c:	c3                   	ret    
c0013d0d:	90                   	nop

c0013d0e <Clock::~Clock()>:
c0013d0e:	83 ec 0c             	sub    esp,0xc
c0013d11:	83 ec 0c             	sub    esp,0xc
c0013d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d18:	e8 cd ff ff ff       	call   c0013cea <Clock::~Clock()>
c0013d1d:	83 c4 10             	add    esp,0x10
c0013d20:	83 ec 08             	sub    esp,0x8
c0013d23:	68 58 01 00 00       	push   0x158
c0013d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d2c:	e8 d6 ef ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0013d31:	83 c4 10             	add    esp,0x10
c0013d34:	83 c4 0c             	add    esp,0xc
c0013d37:	c3                   	ret    

c0013d38 <Clock::timeInSecondsLocal()>:
c0013d38:	53                   	push   ebx
c0013d39:	83 ec 14             	sub    esp,0x14
c0013d3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d40:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d42:	50                   	push   eax
c0013d43:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d46:	0f b6 0d 7c f5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f57c
c0013d4d:	03 0d 80 f5 02 c0    	add    ecx,DWORD PTR ds:0xc002f580
c0013d53:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013d59:	89 cb                	mov    ebx,ecx
c0013d5b:	c1 fb 1f             	sar    ebx,0x1f
c0013d5e:	01 c8                	add    eax,ecx
c0013d60:	11 da                	adc    edx,ebx
c0013d62:	83 c4 10             	add    esp,0x10
c0013d65:	31 c9                	xor    ecx,ecx
c0013d67:	80 3d 7d f5 02 c0 00 	cmp    BYTE PTR ds:0xc002f57d,0x0
c0013d6e:	74 05                	je     c0013d75 <Clock::timeInSecondsLocal()+0x3d>
c0013d70:	b9 08 07 00 00       	mov    ecx,0x708
c0013d75:	31 db                	xor    ebx,ebx
c0013d77:	01 c8                	add    eax,ecx
c0013d79:	11 da                	adc    edx,ebx
c0013d7b:	83 c4 08             	add    esp,0x8
c0013d7e:	5b                   	pop    ebx
c0013d7f:	c3                   	ret    

c0013d80 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d80:	57                   	push   edi
c0013d81:	56                   	push   esi
c0013d82:	53                   	push   ebx
c0013d83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d8b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d8d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d91:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d94:	0f b6 05 7c f5 02 c0 	movzx  eax,BYTE PTR ds:0xc002f57c
c0013d9b:	03 05 80 f5 02 c0    	add    eax,DWORD PTR ds:0xc002f580
c0013da1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013da7:	99                   	cdq    
c0013da8:	29 c6                	sub    esi,eax
c0013daa:	19 d7                	sbb    edi,edx
c0013dac:	89 f0                	mov    eax,esi
c0013dae:	89 fa                	mov    edx,edi
c0013db0:	31 f6                	xor    esi,esi
c0013db2:	80 3d 7d f5 02 c0 00 	cmp    BYTE PTR ds:0xc002f57d,0x0
c0013db9:	74 05                	je     c0013dc0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013dbb:	be 08 07 00 00       	mov    esi,0x708
c0013dc0:	31 ff                	xor    edi,edi
c0013dc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013dc6:	29 f0                	sub    eax,esi
c0013dc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013dcc:	19 fa                	sbb    edx,edi
c0013dce:	89 d8                	mov    eax,ebx
c0013dd0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013dd4:	5b                   	pop    ebx
c0013dd5:	5e                   	pop    esi
c0013dd6:	5f                   	pop    edi
c0013dd7:	ff e0                	jmp    eax

c0013dd9 <datetimeToSeconds(datetime_t)>:
c0013dd9:	55                   	push   ebp
c0013dda:	57                   	push   edi
c0013ddb:	56                   	push   esi
c0013ddc:	53                   	push   ebx
c0013ddd:	83 ec 14             	sub    esp,0x14
c0013de0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013de4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013de8:	89 d3                	mov    ebx,edx
c0013dea:	0f b6 c6             	movzx  eax,dh
c0013ded:	c1 eb 10             	shr    ebx,0x10
c0013df0:	48                   	dec    eax
c0013df1:	66 81 eb 6c 07       	sub    bx,0x76c
c0013df6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013dfa:	0f b6 f5             	movzx  esi,ch
c0013dfd:	89 cf                	mov    edi,ecx
c0013dff:	6b f6 3c             	imul   esi,esi,0x3c
c0013e02:	c1 ef 10             	shr    edi,0x10
c0013e05:	0f b6 c9             	movzx  ecx,cl
c0013e08:	89 f8                	mov    eax,edi
c0013e0a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e10:	0f b6 f8             	movzx  edi,al
c0013e13:	0f b6 d2             	movzx  edx,dl
c0013e16:	01 fe                	add    esi,edi
c0013e18:	01 f1                	add    ecx,esi
c0013e1a:	0f b7 f3             	movzx  esi,bx
c0013e1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e21:	c1 f9 1f             	sar    ecx,0x1f
c0013e24:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e29:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e2d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e32:	8b 0c 8d 40 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd45c0]
c0013e39:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e3d:	76 29                	jbe    c0013e68 <datetimeToSeconds(datetime_t)+0x8f>
c0013e3f:	f6 c3 03             	test   bl,0x3
c0013e42:	75 24                	jne    c0013e68 <datetimeToSeconds(datetime_t)+0x8f>
c0013e44:	31 d2                	xor    edx,edx
c0013e46:	bf 64 00 00 00       	mov    edi,0x64
c0013e4b:	89 d8                	mov    eax,ebx
c0013e4d:	66 f7 f7             	div    di
c0013e50:	66 85 d2             	test   dx,dx
c0013e53:	75 12                	jne    c0013e67 <datetimeToSeconds(datetime_t)+0x8e>
c0013e55:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013e5b:	bf 90 01 00 00       	mov    edi,0x190
c0013e60:	99                   	cdq    
c0013e61:	f7 ff                	idiv   edi
c0013e63:	85 d2                	test   edx,edx
c0013e65:	75 01                	jne    c0013e68 <datetimeToSeconds(datetime_t)+0x8f>
c0013e67:	41                   	inc    ecx
c0013e68:	66 83 fb 46          	cmp    bx,0x46
c0013e6c:	76 45                	jbe    c0013eb3 <datetimeToSeconds(datetime_t)+0xda>
c0013e6e:	bb 46 00 00 00       	mov    ebx,0x46
c0013e73:	bf 64 00 00 00       	mov    edi,0x64
c0013e78:	bd 90 01 00 00       	mov    ebp,0x190
c0013e7d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e82:	f6 c3 03             	test   bl,0x3
c0013e85:	75 23                	jne    c0013eaa <datetimeToSeconds(datetime_t)+0xd1>
c0013e87:	89 d8                	mov    eax,ebx
c0013e89:	99                   	cdq    
c0013e8a:	f7 ff                	idiv   edi
c0013e8c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e91:	85 d2                	test   edx,edx
c0013e93:	75 15                	jne    c0013eaa <datetimeToSeconds(datetime_t)+0xd1>
c0013e95:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e9b:	99                   	cdq    
c0013e9c:	f7 fd                	idiv   ebp
c0013e9e:	83 fa 01             	cmp    edx,0x1
c0013ea1:	19 c0                	sbb    eax,eax
c0013ea3:	f7 d0                	not    eax
c0013ea5:	05 6e 01 00 00       	add    eax,0x16e
c0013eaa:	01 c1                	add    ecx,eax
c0013eac:	43                   	inc    ebx
c0013ead:	39 f3                	cmp    ebx,esi
c0013eaf:	7c cc                	jl     c0013e7d <datetimeToSeconds(datetime_t)+0xa4>
c0013eb1:	eb 35                	jmp    c0013ee8 <datetimeToSeconds(datetime_t)+0x10f>
c0013eb3:	74 33                	je     c0013ee8 <datetimeToSeconds(datetime_t)+0x10f>
c0013eb5:	b8 45 00 00 00       	mov    eax,0x45
c0013eba:	89 c2                	mov    edx,eax
c0013ebc:	83 e2 03             	and    edx,0x3
c0013ebf:	39 f0                	cmp    eax,esi
c0013ec1:	7e 0f                	jle    c0013ed2 <datetimeToSeconds(datetime_t)+0xf9>
c0013ec3:	83 fa 01             	cmp    edx,0x1
c0013ec6:	19 d2                	sbb    edx,edx
c0013ec8:	48                   	dec    eax
c0013ec9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013ed0:	eb e8                	jmp    c0013eba <datetimeToSeconds(datetime_t)+0xe1>
c0013ed2:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ed7:	85 d2                	test   edx,edx
c0013ed9:	75 0b                	jne    c0013ee6 <datetimeToSeconds(datetime_t)+0x10d>
c0013edb:	66 83 fb 01          	cmp    bx,0x1
c0013edf:	19 c0                	sbb    eax,eax
c0013ee1:	05 6e 01 00 00       	add    eax,0x16e
c0013ee6:	29 c1                	sub    ecx,eax
c0013ee8:	b8 80 51 01 00       	mov    eax,0x15180
c0013eed:	f7 e9                	imul   ecx
c0013eef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ef3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ef7:	83 c4 14             	add    esp,0x14
c0013efa:	5b                   	pop    ebx
c0013efb:	5e                   	pop    esi
c0013efc:	5f                   	pop    edi
c0013efd:	5d                   	pop    ebp
c0013efe:	c3                   	ret    
c0013eff:	90                   	nop

c0013f00 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f00:	57                   	push   edi
c0013f01:	56                   	push   esi
c0013f02:	53                   	push   ebx
c0013f03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f07:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f09:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f14:	e8 c0 fe ff ff       	call   c0013dd9 <datetimeToSeconds(datetime_t)>
c0013f19:	59                   	pop    ecx
c0013f1a:	0f b6 0d 7c f5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f57c
c0013f21:	5b                   	pop    ebx
c0013f22:	03 0d 80 f5 02 c0    	add    ecx,DWORD PTR ds:0xc002f580
c0013f28:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f2e:	89 cb                	mov    ebx,ecx
c0013f30:	c1 fb 1f             	sar    ebx,0x1f
c0013f33:	29 c8                	sub    eax,ecx
c0013f35:	19 da                	sbb    edx,ebx
c0013f37:	31 c9                	xor    ecx,ecx
c0013f39:	80 3d 7d f5 02 c0 00 	cmp    BYTE PTR ds:0xc002f57d,0x0
c0013f40:	74 05                	je     c0013f47 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f42:	b9 08 07 00 00       	mov    ecx,0x708
c0013f47:	31 db                	xor    ebx,ebx
c0013f49:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013f4d:	29 c8                	sub    eax,ecx
c0013f4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f53:	19 da                	sbb    edx,ebx
c0013f55:	89 f8                	mov    eax,edi
c0013f57:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f5b:	5b                   	pop    ebx
c0013f5c:	5e                   	pop    esi
c0013f5d:	5f                   	pop    edi
c0013f5e:	ff e0                	jmp    eax

c0013f60 <secondsToDatetime(unsigned long long)>:
c0013f60:	55                   	push   ebp
c0013f61:	57                   	push   edi
c0013f62:	56                   	push   esi
c0013f63:	53                   	push   ebx
c0013f64:	83 ec 1c             	sub    esp,0x1c
c0013f67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f6b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f6f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f73:	6a 00                	push   0x0
c0013f75:	68 80 51 01 00       	push   0x15180
c0013f7a:	55                   	push   ebp
c0013f7b:	57                   	push   edi
c0013f7c:	e8 83 37 01 00       	call   c0027704 <__udivdi3>
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f8e:	6a 00                	push   0x0
c0013f90:	68 80 51 01 00       	push   0x15180
c0013f95:	55                   	push   ebp
c0013f96:	57                   	push   edi
c0013f97:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f9c:	e8 63 38 01 00       	call   c0027804 <__umoddi3>
c0013fa1:	83 c4 10             	add    esp,0x10
c0013fa4:	99                   	cdq    
c0013fa5:	f7 ff                	idiv   edi
c0013fa7:	bf 3c 00 00 00       	mov    edi,0x3c
c0013fac:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013faf:	89 d0                	mov    eax,edx
c0013fb1:	99                   	cdq    
c0013fb2:	f7 ff                	idiv   edi
c0013fb4:	85 db                	test   ebx,ebx
c0013fb6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013fb9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013fbc:	79 11                	jns    c0013fcf <secondsToDatetime(unsigned long long)+0x6f>
c0013fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013fc2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013fc8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fcd:	eb 07                	jmp    c0013fd6 <secondsToDatetime(unsigned long long)+0x76>
c0013fcf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fd4:	89 d8                	mov    eax,ebx
c0013fd6:	bf b4 05 00 00       	mov    edi,0x5b4
c0013fdb:	99                   	cdq    
c0013fdc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013fe1:	f7 f9                	idiv   ecx
c0013fe3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fec:	31 d2                	xor    edx,edx
c0013fee:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013ff6:	01 c3                	add    ebx,eax
c0013ff8:	89 d8                	mov    eax,ebx
c0013ffa:	f7 f1                	div    ecx
c0013ffc:	31 d2                	xor    edx,edx
c0013ffe:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014001:	89 d8                	mov    eax,ebx
c0014003:	f7 f7                	div    edi
c0014005:	31 d2                	xor    edx,edx
c0014007:	29 c1                	sub    ecx,eax
c0014009:	89 d8                	mov    eax,ebx
c001400b:	f7 f5                	div    ebp
c001400d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014012:	29 c1                	sub    ecx,eax
c0014014:	31 d2                	xor    edx,edx
c0014016:	89 c8                	mov    eax,ecx
c0014018:	f7 f5                	div    ebp
c001401a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001401f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014023:	31 d2                	xor    edx,edx
c0014025:	89 c8                	mov    eax,ecx
c0014027:	f7 f5                	div    ebp
c0014029:	31 d2                	xor    edx,edx
c001402b:	01 c3                	add    ebx,eax
c001402d:	89 c8                	mov    eax,ecx
c001402f:	f7 f7                	div    edi
c0014031:	bf 99 00 00 00       	mov    edi,0x99
c0014036:	29 c3                	sub    ebx,eax
c0014038:	31 d2                	xor    edx,edx
c001403a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014042:	29 c3                	sub    ebx,eax
c0014044:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014047:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001404a:	bb 05 00 00 00       	mov    ebx,0x5
c001404f:	83 c1 02             	add    ecx,0x2
c0014052:	89 c8                	mov    eax,ecx
c0014054:	f7 f7                	div    edi
c0014056:	31 d2                	xor    edx,edx
c0014058:	89 c7                	mov    edi,eax
c001405a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014060:	83 c0 02             	add    eax,0x2
c0014063:	f7 f3                	div    ebx
c0014065:	89 eb                	mov    ebx,ebp
c0014067:	29 c3                	sub    ebx,eax
c0014069:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001406f:	88 1e                	mov    BYTE PTR [esi],bl
c0014071:	19 c0                	sbb    eax,eax
c0014073:	31 d2                	xor    edx,edx
c0014075:	83 e0 0c             	and    eax,0xc
c0014078:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001407c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014084:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014088:	83 f9 01             	cmp    ecx,0x1
c001408b:	0f 96 c2             	setbe  dl
c001408e:	41                   	inc    ecx
c001408f:	01 d0                	add    eax,edx
c0014091:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014094:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014098:	83 c4 1c             	add    esp,0x1c
c001409b:	89 f0                	mov    eax,esi
c001409d:	5b                   	pop    ebx
c001409e:	5e                   	pop    esi
c001409f:	5f                   	pop    edi
c00140a0:	5d                   	pop    ebp
c00140a1:	c2 04 00             	ret    0x4

c00140a4 <Clock::timeInDatetimeLocal()>:
c00140a4:	53                   	push   ebx
c00140a5:	83 ec 14             	sub    esp,0x14
c00140a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00140b0:	e8 83 fc ff ff       	call   c0013d38 <Clock::timeInSecondsLocal()>
c00140b5:	83 c4 0c             	add    esp,0xc
c00140b8:	52                   	push   edx
c00140b9:	50                   	push   eax
c00140ba:	53                   	push   ebx
c00140bb:	e8 a0 fe ff ff       	call   c0013f60 <secondsToDatetime(unsigned long long)>
c00140c0:	89 d8                	mov    eax,ebx
c00140c2:	83 c4 14             	add    esp,0x14
c00140c5:	5b                   	pop    ebx
c00140c6:	c2 04 00             	ret    0x4
c00140c9:	90                   	nop

c00140ca <Device::hibernate()>:
c00140ca:	c3                   	ret    
c00140cb:	90                   	nop

c00140cc <Device::wake()>:
c00140cc:	c3                   	ret    
c00140cd:	90                   	nop

c00140ce <Device::detect()>:
c00140ce:	c3                   	ret    
c00140cf:	90                   	nop

c00140d0 <Device::disableLegacy()>:
c00140d0:	c3                   	ret    
c00140d1:	90                   	nop

c00140d2 <Device::powerSaving(PowerSavingLevel)>:
c00140d2:	c3                   	ret    
c00140d3:	90                   	nop

c00140d4 <DriverlessDevice::close(int, int, void*)>:
c00140d4:	31 c0                	xor    eax,eax
c00140d6:	c3                   	ret    
c00140d7:	90                   	nop

c00140d8 <DriverlessDevice::detect()>:
c00140d8:	c3                   	ret    
c00140d9:	90                   	nop

c00140da <DriverlessDevice::open(int, int, void*)>:
c00140da:	83 ec 18             	sub    esp,0x18
c00140dd:	68 70 ba 02 c0       	push   0xc002ba70
c00140e2:	e8 48 68 00 00       	call   c001a92f <Krnl::panic(char const*)>
c00140e7:	83 c8 ff             	or     eax,0xffffffff
c00140ea:	83 c4 1c             	add    esp,0x1c
c00140ed:	c3                   	ret    

c00140ee <Device::~Device()>:
c00140ee:	ba d0 ba 02 c0       	mov    edx,0xc002bad0
c00140f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140f7:	89 10                	mov    DWORD PTR [eax],edx
c00140f9:	90                   	nop
c00140fa:	c3                   	ret    
c00140fb:	90                   	nop

c00140fc <Device::~Device()>:
c00140fc:	83 ec 0c             	sub    esp,0xc
c00140ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014103:	e8 e6 ff ff ff       	call   c00140ee <Device::~Device()>
c0014108:	83 c4 04             	add    esp,0x4
c001410b:	83 ec 08             	sub    esp,0x8
c001410e:	68 58 01 00 00       	push   0x158
c0014113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014117:	e8 eb eb ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c001411c:	83 c4 10             	add    esp,0x10
c001411f:	83 c4 0c             	add    esp,0xc
c0014122:	c3                   	ret    
c0014123:	90                   	nop

c0014124 <Device::findAndLoadDriver()>:
c0014124:	c7 44 24 04 8e ba 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ba8e
c001412c:	e9 b6 ec ff ff       	jmp    c0012de7 <Dbg::kprintf(char const*, ...)>
c0014131:	90                   	nop

c0014132 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014132:	57                   	push   edi
c0014133:	b9 09 00 00 00       	mov    ecx,0x9
c0014138:	56                   	push   esi
c0014139:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001413d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014141:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001414b:	81 c7 18 01 00 00    	add    edi,0x118
c0014151:	fc                   	cld    
c0014152:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014154:	5e                   	pop    esi
c0014155:	5f                   	pop    edi
c0014156:	c3                   	ret    
c0014157:	90                   	nop

c0014158 <Device::preOpenACPI(void*, char*, char*)>:
c0014158:	57                   	push   edi
c0014159:	b9 1e 00 00 00       	mov    ecx,0x1e
c001415e:	56                   	push   esi
c001415f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014163:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014167:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0014171:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0014177:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001417d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014181:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014183:	b9 0e 00 00 00       	mov    ecx,0xe
c0014188:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001418e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014194:	5e                   	pop    esi
c0014195:	5f                   	pop    edi
c0014196:	c3                   	ret    
c0014197:	90                   	nop

c0014198 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001419c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141a1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141a8:	75 0b                	jne    c00141b5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00141aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00141ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141b0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00141b3:	eb 1e                	jmp    c00141d3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00141b5:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00141ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141c0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141c6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141c8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141d0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00141d3:	ff e0                	jmp    eax
c00141d5:	90                   	nop

c00141d6 <Device::getParent()>:
c00141d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141da:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00141e0:	c3                   	ret    
c00141e1:	90                   	nop

c00141e2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00141e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141e6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141eb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141f2:	75 0b                	jne    c00141ff <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00141f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00141f6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141fa:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00141fd:	eb 1e                	jmp    c001421d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00141ff:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0014204:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001420a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014210:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014212:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014216:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001421a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001421d:	ff e0                	jmp    eax
c001421f:	90                   	nop

c0014220 <Device::addChild(Device*)>:
c0014220:	53                   	push   ebx
c0014221:	83 ec 08             	sub    esp,0x8
c0014224:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014228:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001422c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014232:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014238:	8b 13                	mov    edx,DWORD PTR [ebx]
c001423a:	85 d2                	test   edx,edx
c001423c:	74 04                	je     c0014242 <Device::addChild(Device*)+0x22>
c001423e:	89 d3                	mov    ebx,edx
c0014240:	eb f6                	jmp    c0014238 <Device::addChild(Device*)+0x18>
c0014242:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014245:	83 ec 0c             	sub    esp,0xc
c0014248:	6a 08                	push   0x8
c001424a:	e8 3d b6 ff ff       	call   c000f88c <malloc>
c001424f:	89 03                	mov    DWORD PTR [ebx],eax
c0014251:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014257:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001425e:	83 c4 18             	add    esp,0x18
c0014261:	5b                   	pop    ebx
c0014262:	c3                   	ret    
c0014263:	90                   	nop

c0014264 <Device::removeAllChildren()>:
c0014264:	56                   	push   esi
c0014265:	53                   	push   ebx
c0014266:	52                   	push   edx
c0014267:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001426b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014271:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014274:	74 17                	je     c001428d <Device::removeAllChildren()+0x29>
c0014276:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014279:	85 c0                	test   eax,eax
c001427b:	74 0c                	je     c0014289 <Device::removeAllChildren()+0x25>
c001427d:	83 ec 0c             	sub    esp,0xc
c0014280:	8b 10                	mov    edx,DWORD PTR [eax]
c0014282:	50                   	push   eax
c0014283:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014286:	83 c4 10             	add    esp,0x10
c0014289:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001428b:	eb e4                	jmp    c0014271 <Device::removeAllChildren()+0xd>
c001428d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014293:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014299:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001429f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142a6:	58                   	pop    eax
c00142a7:	5b                   	pop    ebx
c00142a8:	5e                   	pop    esi
c00142a9:	c3                   	ret    

c00142aa <Device::hibernateAll()>:
c00142aa:	53                   	push   ebx
c00142ab:	83 ec 14             	sub    esp,0x14
c00142ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142b4:	53                   	push   ebx
c00142b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00142b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142be:	83 c4 10             	add    esp,0x10
c00142c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142c4:	74 0f                	je     c00142d5 <Device::hibernateAll()+0x2b>
c00142c6:	83 ec 0c             	sub    esp,0xc
c00142c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142cc:	e8 d9 ff ff ff       	call   c00142aa <Device::hibernateAll()>
c00142d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142d3:	eb e9                	jmp    c00142be <Device::hibernateAll()+0x14>
c00142d5:	83 c4 08             	add    esp,0x8
c00142d8:	5b                   	pop    ebx
c00142d9:	c3                   	ret    

c00142da <Device::wakeAll()>:
c00142da:	53                   	push   ebx
c00142db:	83 ec 14             	sub    esp,0x14
c00142de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142e4:	53                   	push   ebx
c00142e5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00142e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142ee:	83 c4 10             	add    esp,0x10
c00142f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142f4:	74 0f                	je     c0014305 <Device::wakeAll()+0x2b>
c00142f6:	83 ec 0c             	sub    esp,0xc
c00142f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142fc:	e8 d9 ff ff ff       	call   c00142da <Device::wakeAll()>
c0014301:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014303:	eb e9                	jmp    c00142ee <Device::wakeAll()+0x14>
c0014305:	83 c4 08             	add    esp,0x8
c0014308:	5b                   	pop    ebx
c0014309:	c3                   	ret    

c001430a <Device::detectAll()>:
c001430a:	53                   	push   ebx
c001430b:	83 ec 14             	sub    esp,0x14
c001430e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014312:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014314:	53                   	push   ebx
c0014315:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014318:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014324:	74 0f                	je     c0014335 <Device::detectAll()+0x2b>
c0014326:	83 ec 0c             	sub    esp,0xc
c0014329:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001432c:	e8 d9 ff ff ff       	call   c001430a <Device::detectAll()>
c0014331:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014333:	eb e9                	jmp    c001431e <Device::detectAll()+0x14>
c0014335:	83 c4 08             	add    esp,0x8
c0014338:	5b                   	pop    ebx
c0014339:	c3                   	ret    

c001433a <Device::disableLegacyAll()>:
c001433a:	53                   	push   ebx
c001433b:	83 ec 14             	sub    esp,0x14
c001433e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014342:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014344:	53                   	push   ebx
c0014345:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014348:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001434e:	83 c4 10             	add    esp,0x10
c0014351:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014354:	74 0f                	je     c0014365 <Device::disableLegacyAll()+0x2b>
c0014356:	83 ec 0c             	sub    esp,0xc
c0014359:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001435c:	e8 d9 ff ff ff       	call   c001433a <Device::disableLegacyAll()>
c0014361:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014363:	eb e9                	jmp    c001434e <Device::disableLegacyAll()+0x14>
c0014365:	83 c4 08             	add    esp,0x8
c0014368:	5b                   	pop    ebx
c0014369:	c3                   	ret    

c001436a <Device::loadDriversForAll()>:
c001436a:	53                   	push   ebx
c001436b:	83 ec 08             	sub    esp,0x8
c001436e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014372:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0014379:	75 0c                	jne    c0014387 <Device::loadDriversForAll()+0x1d>
c001437b:	83 ec 0c             	sub    esp,0xc
c001437e:	53                   	push   ebx
c001437f:	e8 a0 fd ff ff       	call   c0014124 <Device::findAndLoadDriver()>
c0014384:	83 c4 10             	add    esp,0x10
c0014387:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001438d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014390:	74 12                	je     c00143a4 <Device::loadDriversForAll()+0x3a>
c0014392:	83 ec 0c             	sub    esp,0xc
c0014395:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014398:	e8 cd ff ff ff       	call   c001436a <Device::loadDriversForAll()>
c001439d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001439f:	83 c4 10             	add    esp,0x10
c00143a2:	eb e9                	jmp    c001438d <Device::loadDriversForAll()+0x23>
c00143a4:	83 c4 08             	add    esp,0x8
c00143a7:	5b                   	pop    ebx
c00143a8:	c3                   	ret    
c00143a9:	90                   	nop

c00143aa <Device::closeAll()>:
c00143aa:	53                   	push   ebx
c00143ab:	83 ec 08             	sub    esp,0x8
c00143ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b4:	6a 00                	push   0x0
c00143b6:	6a 00                	push   0x0
c00143b8:	6a 00                	push   0x0
c00143ba:	53                   	push   ebx
c00143bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143be:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143c4:	83 c4 10             	add    esp,0x10
c00143c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ca:	74 0f                	je     c00143db <Device::closeAll()+0x31>
c00143cc:	83 ec 0c             	sub    esp,0xc
c00143cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143d2:	e8 d3 ff ff ff       	call   c00143aa <Device::closeAll()>
c00143d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143d9:	eb e9                	jmp    c00143c4 <Device::closeAll()+0x1a>
c00143db:	83 c4 08             	add    esp,0x8
c00143de:	5b                   	pop    ebx
c00143df:	c3                   	ret    

c00143e0 <Device::powerSavingAll(PowerSavingLevel)>:
c00143e0:	56                   	push   esi
c00143e1:	53                   	push   ebx
c00143e2:	83 ec 0c             	sub    esp,0xc
c00143e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143e9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00143ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ef:	56                   	push   esi
c00143f0:	53                   	push   ebx
c00143f1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00143f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143fa:	83 c4 10             	add    esp,0x10
c00143fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014400:	74 0f                	je     c0014411 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014402:	52                   	push   edx
c0014403:	52                   	push   edx
c0014404:	56                   	push   esi
c0014405:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014408:	e8 d3 ff ff ff       	call   c00143e0 <Device::powerSavingAll(PowerSavingLevel)>
c001440d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001440f:	eb e9                	jmp    c00143fa <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014411:	58                   	pop    eax
c0014412:	5b                   	pop    ebx
c0014413:	5e                   	pop    esi
c0014414:	c3                   	ret    
c0014415:	90                   	nop

c0014416 <Device::setName(char const*)>:
c0014416:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001441e:	e9 e9 c3 fe ff       	jmp    c000080c <strcpy>
c0014423:	90                   	nop

c0014424 <Device::Device(char const*)>:
c0014424:	83 ec 1c             	sub    esp,0x1c
c0014427:	ba d0 ba 02 c0       	mov    edx,0xc002bad0
c001442c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014430:	89 10                	mov    DWORD PTR [eax],edx
c0014432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014436:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014444:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001444e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014452:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001445c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014460:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001446a:	83 ec 08             	sub    esp,0x8
c001446d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014471:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014475:	e8 9c ff ff ff       	call   c0014416 <Device::setName(char const*)>
c001447a:	83 c4 10             	add    esp,0x10
c001447d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014485:	83 ec 0c             	sub    esp,0xc
c0014488:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001448c:	e8 fb b3 ff ff       	call   c000f88c <malloc>
c0014491:	83 c4 10             	add    esp,0x10
c0014494:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001449a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144a5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00144ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144af:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00144d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144db:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00144e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014502:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001450c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014510:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001451a:	90                   	nop
c001451b:	83 c4 1c             	add    esp,0x1c
c001451e:	c3                   	ret    
c001451f:	90                   	nop

c0014520 <Device::getName()>:
c0014520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014524:	05 d0 00 00 00       	add    eax,0xd0
c0014529:	c3                   	ret    

c001452a <DriverlessDevice::DriverlessDevice(char const*)>:
c001452a:	83 ec 0c             	sub    esp,0xc
c001452d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014531:	83 ec 08             	sub    esp,0x8
c0014534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014538:	50                   	push   eax
c0014539:	e8 e6 fe ff ff       	call   c0014424 <Device::Device(char const*)>
c001453e:	83 c4 10             	add    esp,0x10
c0014541:	ba fc ba 02 c0       	mov    edx,0xc002bafc
c0014546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001454a:	89 10                	mov    DWORD PTR [eax],edx
c001454c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014550:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001455a:	90                   	nop
c001455b:	83 c4 0c             	add    esp,0xc
c001455e:	c3                   	ret    
c001455f:	90                   	nop

c0014560 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014560:	57                   	push   edi
c0014561:	56                   	push   esi
c0014562:	53                   	push   ebx
c0014563:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014567:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001456b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001456f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014575:	75 0c                	jne    c0014583 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014577:	52                   	push   edx
c0014578:	52                   	push   edx
c0014579:	53                   	push   ebx
c001457a:	56                   	push   esi
c001457b:	e8 d6 50 01 00       	call   c0029656 <LinkedList<Device>::addElement(Device*)>
c0014580:	83 c4 10             	add    esp,0x10
c0014583:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014589:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001458c:	74 12                	je     c00145a0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001458e:	50                   	push   eax
c001458f:	57                   	push   edi
c0014590:	56                   	push   esi
c0014591:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014594:	e8 c7 ff ff ff       	call   c0014560 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014599:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001459b:	83 c4 10             	add    esp,0x10
c001459e:	eb e9                	jmp    c0014589 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00145a0:	5b                   	pop    ebx
c00145a1:	5e                   	pop    esi
c00145a2:	5f                   	pop    edi
c00145a3:	c3                   	ret    

c00145a4 <getDevicesOfType(DeviceType)>:
c00145a4:	53                   	push   ebx
c00145a5:	83 ec 14             	sub    esp,0x14
c00145a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145ac:	53                   	push   ebx
c00145ad:	e8 80 51 01 00       	call   c0029732 <LinkedList<Device>::LinkedList()>
c00145b2:	83 c4 0c             	add    esp,0xc
c00145b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145b9:	53                   	push   ebx
c00145ba:	ff 35 e8 f3 02 c0    	push   DWORD PTR ds:0xc002f3e8
c00145c0:	e8 9b ff ff ff       	call   c0014560 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145c5:	89 d8                	mov    eax,ebx
c00145c7:	83 c4 18             	add    esp,0x18
c00145ca:	5b                   	pop    ebx
c00145cb:	c2 04 00             	ret    0x4

c00145ce <HardDiskController::HardDiskController(char const*)>:
c00145ce:	83 ec 0c             	sub    esp,0xc
c00145d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d5:	83 ec 08             	sub    esp,0x8
c00145d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145dc:	50                   	push   eax
c00145dd:	e8 42 fe ff ff       	call   c0014424 <Device::Device(char const*)>
c00145e2:	83 c4 10             	add    esp,0x10
c00145e5:	ba 28 bb 02 c0       	mov    edx,0xc002bb28
c00145ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ee:	89 10                	mov    DWORD PTR [eax],edx
c00145f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f4:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00145fe:	90                   	nop
c00145ff:	83 c4 0c             	add    esp,0xc
c0014602:	c3                   	ret    
c0014603:	90                   	nop

c0014604 <HardDiskController::~HardDiskController()>:
c0014604:	83 ec 0c             	sub    esp,0xc
c0014607:	ba 28 bb 02 c0       	mov    edx,0xc002bb28
c001460c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014610:	89 10                	mov    DWORD PTR [eax],edx
c0014612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014616:	83 ec 0c             	sub    esp,0xc
c0014619:	50                   	push   eax
c001461a:	e8 cf fa ff ff       	call   c00140ee <Device::~Device()>
c001461f:	83 c4 10             	add    esp,0x10
c0014622:	90                   	nop
c0014623:	83 c4 0c             	add    esp,0xc
c0014626:	c3                   	ret    
c0014627:	90                   	nop

c0014628 <HardDiskController::~HardDiskController()>:
c0014628:	83 ec 0c             	sub    esp,0xc
c001462b:	83 ec 0c             	sub    esp,0xc
c001462e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014632:	e8 cd ff ff ff       	call   c0014604 <HardDiskController::~HardDiskController()>
c0014637:	83 c4 10             	add    esp,0x10
c001463a:	83 ec 08             	sub    esp,0x8
c001463d:	68 58 01 00 00       	push   0x158
c0014642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014646:	e8 bc e6 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c001464b:	83 c4 10             	add    esp,0x10
c001464e:	83 c4 0c             	add    esp,0xc
c0014651:	c3                   	ret    

c0014652 <PhysicalDisk::eject()>:
c0014652:	83 ec 18             	sub    esp,0x18
c0014655:	68 4c bb 02 c0       	push   0xc002bb4c
c001465a:	e8 88 e7 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001465f:	83 c8 ff             	or     eax,0xffffffff
c0014662:	83 c4 1c             	add    esp,0x1c
c0014665:	c3                   	ret    

c0014666 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014666:	83 ec 0c             	sub    esp,0xc
c0014669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001466d:	83 ec 08             	sub    esp,0x8
c0014670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014674:	50                   	push   eax
c0014675:	e8 aa fd ff ff       	call   c0014424 <Device::Device(char const*)>
c001467a:	83 c4 10             	add    esp,0x10
c001467d:	ba 7c bb 02 c0       	mov    edx,0xc002bb7c
c0014682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014686:	89 10                	mov    DWORD PTR [eax],edx
c0014688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001468c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014697:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001469e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00146ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146b4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00146ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146be:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00146c8:	90                   	nop
c00146c9:	83 c4 0c             	add    esp,0xc
c00146cc:	c3                   	ret    
c00146cd:	90                   	nop

c00146ce <PhysicalDisk::startCache()>:
c00146ce:	56                   	push   esi
c00146cf:	53                   	push   ebx
c00146d0:	83 ec 10             	sub    esp,0x10
c00146d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146d7:	6a 44                	push   0x44
c00146d9:	e8 ae b1 ff ff       	call   c000f88c <malloc>
c00146de:	89 c6                	mov    esi,eax
c00146e0:	58                   	pop    eax
c00146e1:	5a                   	pop    edx
c00146e2:	53                   	push   ebx
c00146e3:	56                   	push   esi
c00146e4:	e8 a9 28 00 00       	call   c0016f92 <VCache::VCache(PhysicalDisk*)>
c00146e9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00146ef:	83 c4 14             	add    esp,0x14
c00146f2:	5b                   	pop    ebx
c00146f3:	5e                   	pop    esi
c00146f4:	c3                   	ret    
c00146f5:	90                   	nop

c00146f6 <PhysicalDisk::~PhysicalDisk()>:
c00146f6:	83 ec 0c             	sub    esp,0xc
c00146f9:	ba 7c bb 02 c0       	mov    edx,0xc002bb7c
c00146fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014702:	89 10                	mov    DWORD PTR [eax],edx
c0014704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	50                   	push   eax
c001470c:	e8 dd f9 ff ff       	call   c00140ee <Device::~Device()>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	90                   	nop
c0014715:	83 c4 0c             	add    esp,0xc
c0014718:	c3                   	ret    
c0014719:	90                   	nop

c001471a <PhysicalDisk::~PhysicalDisk()>:
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	83 ec 0c             	sub    esp,0xc
c0014720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014724:	e8 cd ff ff ff       	call   c00146f6 <PhysicalDisk::~PhysicalDisk()>
c0014729:	83 c4 10             	add    esp,0x10
c001472c:	83 ec 08             	sub    esp,0x8
c001472f:	68 6c 01 00 00       	push   0x16c
c0014734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014738:	e8 ca e5 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c001473d:	83 c4 10             	add    esp,0x10
c0014740:	83 c4 0c             	add    esp,0xc
c0014743:	c3                   	ret    

c0014744 <FPU::FPU(char const*)>:
c0014744:	83 ec 0c             	sub    esp,0xc
c0014747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474b:	83 ec 08             	sub    esp,0x8
c001474e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014752:	50                   	push   eax
c0014753:	e8 cc fc ff ff       	call   c0014424 <Device::Device(char const*)>
c0014758:	83 c4 10             	add    esp,0x10
c001475b:	ba c0 bb 02 c0       	mov    edx,0xc002bbc0
c0014760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014764:	89 10                	mov    DWORD PTR [eax],edx
c0014766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014774:	90                   	nop
c0014775:	83 c4 0c             	add    esp,0xc
c0014778:	c3                   	ret    
c0014779:	90                   	nop

c001477a <FPU::~FPU()>:
c001477a:	83 ec 0c             	sub    esp,0xc
c001477d:	ba c0 bb 02 c0       	mov    edx,0xc002bbc0
c0014782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014786:	89 10                	mov    DWORD PTR [eax],edx
c0014788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478c:	83 ec 0c             	sub    esp,0xc
c001478f:	50                   	push   eax
c0014790:	e8 59 f9 ff ff       	call   c00140ee <Device::~Device()>
c0014795:	83 c4 10             	add    esp,0x10
c0014798:	90                   	nop
c0014799:	83 c4 0c             	add    esp,0xc
c001479c:	c3                   	ret    
c001479d:	90                   	nop

c001479e <FPU::~FPU()>:
c001479e:	83 ec 0c             	sub    esp,0xc
c00147a1:	83 ec 0c             	sub    esp,0xc
c00147a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a8:	e8 cd ff ff ff       	call   c001477a <FPU::~FPU()>
c00147ad:	83 c4 10             	add    esp,0x10
c00147b0:	83 ec 08             	sub    esp,0x8
c00147b3:	68 58 01 00 00       	push   0x158
c00147b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147bc:	e8 46 e5 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c00147c1:	83 c4 10             	add    esp,0x10
c00147c4:	83 c4 0c             	add    esp,0xc
c00147c7:	c3                   	ret    

c00147c8 <setupFPU()>:
c00147c8:	53                   	push   ebx
c00147c9:	83 ec 08             	sub    esp,0x8
c00147cc:	8b 15 e8 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3e8
c00147d2:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00147d9:	74 19                	je     c00147f4 <setupFPU()+0x2c>
c00147db:	83 ec 0c             	sub    esp,0xc
c00147de:	68 58 01 00 00       	push   0x158
c00147e3:	e8 a4 b0 ff ff       	call   c000f88c <malloc>
c00147e8:	89 c3                	mov    ebx,eax
c00147ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00147ed:	e8 98 1a 01 00       	call   c002628a <AVX::AVX()>
c00147f2:	eb 5b                	jmp    c001484f <setupFPU()+0x87>
c00147f4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00147fa:	84 c0                	test   al,al
c00147fc:	79 19                	jns    c0014817 <setupFPU()+0x4f>
c00147fe:	83 ec 0c             	sub    esp,0xc
c0014801:	68 58 01 00 00       	push   0x158
c0014806:	e8 81 b0 ff ff       	call   c000f88c <malloc>
c001480b:	89 c3                	mov    ebx,eax
c001480d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014810:	e8 9b 1b 01 00       	call   c00263b0 <SSE::SSE()>
c0014815:	eb 38                	jmp    c001484f <setupFPU()+0x87>
c0014817:	a8 20                	test   al,0x20
c0014819:	74 19                	je     c0014834 <setupFPU()+0x6c>
c001481b:	83 ec 0c             	sub    esp,0xc
c001481e:	68 58 01 00 00       	push   0x158
c0014823:	e8 64 b0 ff ff       	call   c000f88c <malloc>
c0014828:	89 c3                	mov    ebx,eax
c001482a:	89 04 24             	mov    DWORD PTR [esp],eax
c001482d:	e8 e8 1a 01 00       	call   c002631a <MMX::MMX()>
c0014832:	eb 1b                	jmp    c001484f <setupFPU()+0x87>
c0014834:	a8 10                	test   al,0x10
c0014836:	74 1c                	je     c0014854 <setupFPU()+0x8c>
c0014838:	83 ec 0c             	sub    esp,0xc
c001483b:	68 58 01 00 00       	push   0x158
c0014840:	e8 47 b0 ff ff       	call   c000f88c <malloc>
c0014845:	89 c3                	mov    ebx,eax
c0014847:	89 04 24             	mov    DWORD PTR [esp],eax
c001484a:	e8 ef 1b 01 00       	call   c002643e <x87::x87()>
c001484f:	83 c4 10             	add    esp,0x10
c0014852:	eb 24                	jmp    c0014878 <setupFPU()+0xb0>
c0014854:	83 e0 ef             	and    eax,0xffffffef
c0014857:	83 ec 0c             	sub    esp,0xc
c001485a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014860:	68 ac bb 02 c0       	push   0xc002bbac
c0014865:	e8 7d e5 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001486a:	0f 20 c0             	mov    eax,cr0
c001486d:	83 c8 04             	or     eax,0x4
c0014870:	0f 22 c0             	mov    cr0,eax
c0014873:	31 db                	xor    ebx,ebx
c0014875:	83 c4 10             	add    esp,0x10
c0014878:	89 d8                	mov    eax,ebx
c001487a:	83 c4 08             	add    esp,0x8
c001487d:	5b                   	pop    ebx
c001487e:	c3                   	ret    
c001487f:	90                   	nop

c0014880 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014884:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014888:	c1 e0 04             	shl    eax,0x4
c001488b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001488f:	8d 50 10             	lea    edx,[eax+0x10]
c0014892:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014898:	74 08                	je     c00148a2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001489a:	83 c0 04             	add    eax,0x4
c001489d:	39 d0                	cmp    eax,edx
c001489f:	75 f1                	jne    c0014892 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00148a1:	c3                   	ret    
c00148a2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148ac:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00148b6:	eb e2                	jmp    c001489a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00148b8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00148b8:	57                   	push   edi
c00148b9:	31 c0                	xor    eax,eax
c00148bb:	56                   	push   esi
c00148bc:	53                   	push   ebx
c00148bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00148c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148c5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00148c9:	89 da                	mov    edx,ebx
c00148cb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00148cf:	c1 e2 04             	shl    edx,0x4
c00148d2:	01 ca                	add    edx,ecx
c00148d4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00148dc:	74 16                	je     c00148f4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00148de:	40                   	inc    eax
c00148df:	83 f8 04             	cmp    eax,0x4
c00148e2:	75 f0                	jne    c00148d4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00148e4:	c7 44 24 10 f0 bb 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bbf0
c00148ec:	5b                   	pop    ebx
c00148ed:	5e                   	pop    esi
c00148ee:	5f                   	pop    edi
c00148ef:	e9 3b 60 00 00       	jmp    c001a92f <Krnl::panic(char const*)>
c00148f4:	8d 04 98             	lea    eax,[eax+ebx*4]
c00148f7:	8d 04 81             	lea    eax,[ecx+eax*4]
c00148fa:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014900:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014906:	5b                   	pop    ebx
c0014907:	5e                   	pop    esi
c0014908:	5f                   	pop    edi
c0014909:	c3                   	ret    

c001490a <doubleFault(regs*, void*)>:
c001490a:	55                   	push   ebp
c001490b:	89 e5                	mov    ebp,esp
c001490d:	83 ec 08             	sub    esp,0x8
c0014910:	83 ec 0c             	sub    esp,0xc
c0014913:	68 2b bc 02 c0       	push   0xc002bc2b
c0014918:	e8 12 60 00 00       	call   c001a92f <Krnl::panic(char const*)>
c001491d:	83 c4 10             	add    esp,0x10
c0014920:	90                   	nop
c0014921:	c9                   	leave  
c0014922:	c3                   	ret    
c0014923:	90                   	nop

c0014924 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014924:	56                   	push   esi
c0014925:	53                   	push   ebx
c0014926:	50                   	push   eax
c0014927:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001492b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001492f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014934:	75 35                	jne    c001496b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014936:	8d 43 20             	lea    eax,[ebx+0x20]
c0014939:	31 d2                	xor    edx,edx
c001493b:	89 c1                	mov    ecx,eax
c001493d:	c1 e1 04             	shl    ecx,0x4
c0014940:	01 f1                	add    ecx,esi
c0014942:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001494a:	74 3e                	je     c001498a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001494c:	42                   	inc    edx
c001494d:	83 fa 04             	cmp    edx,0x4
c0014950:	75 f0                	jne    c0014942 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014952:	83 ec 0c             	sub    esp,0xc
c0014955:	68 70 bc 02 c0       	push   0xc002bc70
c001495a:	e8 d0 5f 00 00       	call   c001a92f <Krnl::panic(char const*)>
c001495f:	83 c4 10             	add    esp,0x10
c0014962:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014967:	5a                   	pop    edx
c0014968:	5b                   	pop    ebx
c0014969:	5e                   	pop    esi
c001496a:	c3                   	ret    
c001496b:	83 ec 0c             	sub    esp,0xc
c001496e:	56                   	push   esi
c001496f:	e8 ac fb ff ff       	call   c0014520 <Device::getName()>
c0014974:	83 c4 10             	add    esp,0x10
c0014977:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001497a:	75 ba                	jne    c0014936 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001497c:	83 fb 0f             	cmp    ebx,0xf
c001497f:	7f 29                	jg     c00149aa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014981:	0f b6 9b 40 e6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd19c0]
c0014988:	eb ac                	jmp    c0014936 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001498a:	8d 04 82             	lea    eax,[edx+eax*4]
c001498d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014991:	8d 04 86             	lea    eax,[esi+eax*4]
c0014994:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001499a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001499e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00149a4:	89 d8                	mov    eax,ebx
c00149a6:	5a                   	pop    edx
c00149a7:	5b                   	pop    ebx
c00149a8:	5e                   	pop    esi
c00149a9:	c3                   	ret    
c00149aa:	83 ec 0c             	sub    esp,0xc
c00149ad:	68 38 bc 02 c0       	push   0xc002bc38
c00149b2:	e8 78 5f 00 00       	call   c001a92f <Krnl::panic(char const*)>
c00149b7:	83 c4 10             	add    esp,0x10
c00149ba:	e9 77 ff ff ff       	jmp    c0014936 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149bf:	90                   	nop

c00149c0 <InterruptController::clearAllHandlers(int, bool)>:
c00149c0:	56                   	push   esi
c00149c1:	53                   	push   ebx
c00149c2:	52                   	push   edx
c00149c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00149c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00149cb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00149d0:	75 61                	jne    c0014a33 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00149d2:	8d 46 20             	lea    eax,[esi+0x20]
c00149d5:	c1 e6 04             	shl    esi,0x4
c00149d8:	c1 e0 04             	shl    eax,0x4
c00149db:	01 de                	add    esi,ebx
c00149dd:	01 d8                	add    eax,ebx
c00149df:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00149e9:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00149f3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00149fd:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a07:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a11:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a1b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a25:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a2f:	58                   	pop    eax
c0014a30:	5b                   	pop    ebx
c0014a31:	5e                   	pop    esi
c0014a32:	c3                   	ret    
c0014a33:	83 ec 0c             	sub    esp,0xc
c0014a36:	53                   	push   ebx
c0014a37:	e8 e4 fa ff ff       	call   c0014520 <Device::getName()>
c0014a3c:	83 c4 10             	add    esp,0x10
c0014a3f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a42:	75 8e                	jne    c00149d2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a44:	83 fe 0f             	cmp    esi,0xf
c0014a47:	7f 09                	jg     c0014a52 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a49:	0f b6 b6 40 e6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd19c0]
c0014a50:	eb 80                	jmp    c00149d2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	68 ac bc 02 c0       	push   0xc002bcac
c0014a5a:	e8 d0 5e 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0014a5f:	83 c4 10             	add    esp,0x10
c0014a62:	e9 6b ff ff ff       	jmp    c00149d2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a67:	90                   	nop

c0014a68 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a68:	56                   	push   esi
c0014a69:	53                   	push   ebx
c0014a6a:	52                   	push   edx
c0014a6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a73:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a78:	75 3a                	jne    c0014ab4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014a7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a7e:	8d 50 20             	lea    edx,[eax+0x20]
c0014a81:	c1 e2 04             	shl    edx,0x4
c0014a84:	8d 04 16             	lea    eax,[esi+edx*1]
c0014a87:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a8b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a91:	74 0b                	je     c0014a9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a93:	83 c0 04             	add    eax,0x4
c0014a96:	39 d0                	cmp    eax,edx
c0014a98:	75 f1                	jne    c0014a8b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a9a:	58                   	pop    eax
c0014a9b:	5b                   	pop    ebx
c0014a9c:	5e                   	pop    esi
c0014a9d:	c3                   	ret    
c0014a9e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014aa8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ab2:	eb df                	jmp    c0014a93 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014ab4:	83 ec 0c             	sub    esp,0xc
c0014ab7:	56                   	push   esi
c0014ab8:	e8 63 fa ff ff       	call   c0014520 <Device::getName()>
c0014abd:	83 c4 10             	add    esp,0x10
c0014ac0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ac3:	75 b5                	jne    c0014a7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014ac5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014aca:	7f 11                	jg     c0014add <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014acc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ad0:	0f b6 80 40 e6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd19c0]
c0014ad7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014adb:	eb 9d                	jmp    c0014a7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014add:	83 ec 0c             	sub    esp,0xc
c0014ae0:	68 ac bc 02 c0       	push   0xc002bcac
c0014ae5:	e8 45 5e 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	eb 8b                	jmp    c0014a7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014aef <nmiHandler(regs*, void*)>:
c0014aef:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0014af4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014af8:	e9 d9 a4 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c0014afd <int_handler>:
c0014afd:	55                   	push   ebp
c0014afe:	57                   	push   edi
c0014aff:	56                   	push   esi
c0014b00:	53                   	push   ebx
c0014b01:	83 ec 0c             	sub    esp,0xc
c0014b04:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b08:	80 3d 44 1f 03 c0 00 	cmp    BYTE PTR ds:0xc0031f44,0x0
c0014b0f:	74 0b                	je     c0014b1c <int_handler+0x1f>
c0014b11:	fa                   	cli    
c0014b12:	f4                   	hlt    
c0014b13:	80 3d 44 1f 03 c0 00 	cmp    BYTE PTR ds:0xc0031f44,0x0
c0014b1a:	75 f5                	jne    c0014b11 <int_handler+0x14>
c0014b1c:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0014b21:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b2a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b30:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b33:	83 f8 17             	cmp    eax,0x17
c0014b36:	77 13                	ja     c0014b4b <int_handler+0x4e>
c0014b38:	83 ec 08             	sub    esp,0x8
c0014b3b:	8b 17                	mov    edx,DWORD PTR [edi]
c0014b3d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b40:	0f b6 c0             	movzx  eax,al
c0014b43:	50                   	push   eax
c0014b44:	57                   	push   edi
c0014b45:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b48:	83 c4 10             	add    esp,0x10
c0014b4b:	83 c3 15             	add    ebx,0x15
c0014b4e:	c1 e3 04             	shl    ebx,0x4
c0014b51:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b55:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b5c:	31 db                	xor    ebx,ebx
c0014b5e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b62:	85 c0                	test   eax,eax
c0014b64:	74 13                	je     c0014b79 <int_handler+0x7c>
c0014b66:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b69:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014b6d:	74 1c                	je     c0014b8b <int_handler+0x8e>
c0014b6f:	83 ec 08             	sub    esp,0x8
c0014b72:	52                   	push   edx
c0014b73:	56                   	push   esi
c0014b74:	ff d0                	call   eax
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	43                   	inc    ebx
c0014b7a:	83 fb 04             	cmp    ebx,0x4
c0014b7d:	75 df                	jne    c0014b5e <int_handler+0x61>
c0014b7f:	83 c4 0c             	add    esp,0xc
c0014b82:	31 c0                	xor    eax,eax
c0014b84:	5b                   	pop    ebx
c0014b85:	31 d2                	xor    edx,edx
c0014b87:	5e                   	pop    esi
c0014b88:	5f                   	pop    edi
c0014b89:	5d                   	pop    ebp
c0014b8a:	c3                   	ret    
c0014b8b:	83 ec 08             	sub    esp,0x8
c0014b8e:	52                   	push   edx
c0014b8f:	56                   	push   esi
c0014b90:	ff d0                	call   eax
c0014b92:	83 c4 10             	add    esp,0x10
c0014b95:	83 c4 0c             	add    esp,0xc
c0014b98:	5b                   	pop    ebx
c0014b99:	5e                   	pop    esi
c0014b9a:	5f                   	pop    edi
c0014b9b:	5d                   	pop    ebp
c0014b9c:	c3                   	ret    
c0014b9d:	90                   	nop

c0014b9e <InterruptController::InterruptController(char const*)>:
c0014b9e:	83 ec 1c             	sub    esp,0x1c
c0014ba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ba5:	83 ec 08             	sub    esp,0x8
c0014ba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bac:	50                   	push   eax
c0014bad:	e8 72 f8 ff ff       	call   c0014424 <Device::Device(char const*)>
c0014bb2:	83 c4 10             	add    esp,0x10
c0014bb5:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0014bba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bbe:	89 10                	mov    DWORD PTR [eax],edx
c0014bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bc4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014bce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014bd6:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014bde:	7f 5e                	jg     c0014c3e <InterruptController::InterruptController(char const*)+0xa0>
c0014be0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014be8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014bed:	7f 49                	jg     c0014c38 <InterruptController::InterruptController(char const*)+0x9a>
c0014bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bf3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bf7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c02:	01 ca                	add    edx,ecx
c0014c04:	83 c2 54             	add    edx,0x54
c0014c07:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c17:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c22:	01 ca                	add    edx,ecx
c0014c24:	81 c2 54 04 00 00    	add    edx,0x454
c0014c2a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c32:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014c36:	eb b0                	jmp    c0014be8 <InterruptController::InterruptController(char const*)+0x4a>
c0014c38:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c3c:	eb 98                	jmp    c0014bd6 <InterruptController::InterruptController(char const*)+0x38>
c0014c3e:	90                   	nop
c0014c3f:	83 c4 1c             	add    esp,0x1c
c0014c42:	c3                   	ret    
c0014c43:	90                   	nop

c0014c44 <InterruptController::~InterruptController()>:
c0014c44:	83 ec 0c             	sub    esp,0xc
c0014c47:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0014c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c50:	89 10                	mov    DWORD PTR [eax],edx
c0014c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c56:	83 ec 0c             	sub    esp,0xc
c0014c59:	50                   	push   eax
c0014c5a:	e8 8f f4 ff ff       	call   c00140ee <Device::~Device()>
c0014c5f:	83 c4 10             	add    esp,0x10
c0014c62:	90                   	nop
c0014c63:	83 c4 0c             	add    esp,0xc
c0014c66:	c3                   	ret    
c0014c67:	90                   	nop

c0014c68 <InterruptController::~InterruptController()>:
c0014c68:	83 ec 0c             	sub    esp,0xc
c0014c6b:	83 ec 0c             	sub    esp,0xc
c0014c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c72:	e8 cd ff ff ff       	call   c0014c44 <InterruptController::~InterruptController()>
c0014c77:	83 c4 10             	add    esp,0x10
c0014c7a:	83 ec 08             	sub    esp,0x8
c0014c7d:	68 58 21 00 00       	push   0x2158
c0014c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c86:	e8 7c e0 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0014c8b:	83 c4 10             	add    esp,0x10
c0014c8e:	83 c4 0c             	add    esp,0xc
c0014c91:	c3                   	ret    

c0014c92 <displayDebugInfo(regs*)>:
c0014c92:	55                   	push   ebp
c0014c93:	57                   	push   edi
c0014c94:	56                   	push   esi
c0014c95:	53                   	push   ebx
c0014c96:	83 ec 24             	sub    esp,0x24
c0014c99:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c9d:	0f 20 c2             	mov    edx,cr0
c0014ca0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014ca4:	0f 20 d7             	mov    edi,cr2
c0014ca7:	0f 20 de             	mov    esi,cr3
c0014caa:	0f 20 e5             	mov    ebp,cr4
c0014cad:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014cb0:	68 e6 bc 02 c0       	push   0xc002bce6
c0014cb5:	e8 2d e1 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014cba:	59                   	pop    ecx
c0014cbb:	58                   	pop    eax
c0014cbc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014cbf:	68 f1 bc 02 c0       	push   0xc002bcf1
c0014cc4:	e8 1e e1 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014cc9:	58                   	pop    eax
c0014cca:	5a                   	pop    edx
c0014ccb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014cce:	68 fc bc 02 c0       	push   0xc002bcfc
c0014cd3:	e8 0f e1 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014cd8:	59                   	pop    ecx
c0014cd9:	58                   	pop    eax
c0014cda:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014cdd:	68 07 bd 02 c0       	push   0xc002bd07
c0014ce2:	e8 00 e1 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014ce7:	58                   	pop    eax
c0014ce8:	5a                   	pop    edx
c0014ce9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014cec:	68 12 bd 02 c0       	push   0xc002bd12
c0014cf1:	e8 f1 e0 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014cf6:	59                   	pop    ecx
c0014cf7:	58                   	pop    eax
c0014cf8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014cfb:	68 1d bd 02 c0       	push   0xc002bd1d
c0014d00:	e8 e2 e0 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014d05:	58                   	pop    eax
c0014d06:	5a                   	pop    edx
c0014d07:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d0a:	68 28 bd 02 c0       	push   0xc002bd28
c0014d0f:	e8 d3 e0 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014d14:	59                   	pop    ecx
c0014d15:	58                   	pop    eax
c0014d16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d19:	68 33 bd 02 c0       	push   0xc002bd33
c0014d1e:	e8 c4 e0 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014d23:	58                   	pop    eax
c0014d24:	5a                   	pop    edx
c0014d25:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d28:	68 3e bd 02 c0       	push   0xc002bd3e
c0014d2d:	e8 b5 e0 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014d32:	59                   	pop    ecx
c0014d33:	58                   	pop    eax
c0014d34:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d37:	68 4d bd 02 c0       	push   0xc002bd4d
c0014d3c:	e8 a6 e0 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014d41:	58                   	pop    eax
c0014d42:	5a                   	pop    edx
c0014d43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d46:	68 58 bd 02 c0       	push   0xc002bd58
c0014d4b:	e8 97 e0 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014d50:	59                   	pop    ecx
c0014d51:	58                   	pop    eax
c0014d52:	57                   	push   edi
c0014d53:	68 63 bd 02 c0       	push   0xc002bd63
c0014d58:	e8 8a e0 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014d5d:	58                   	pop    eax
c0014d5e:	5a                   	pop    edx
c0014d5f:	56                   	push   esi
c0014d60:	68 6e bd 02 c0       	push   0xc002bd6e
c0014d65:	e8 7d e0 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0014d6a:	59                   	pop    ecx
c0014d6b:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014d70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d76:	e8 8f be ff ff       	call   c0010c0a <setActiveTerminal(VgaText*)>
c0014d7b:	58                   	pop    eax
c0014d7c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014d7f:	5a                   	pop    edx
c0014d80:	c1 e0 05             	shl    eax,0x5
c0014d83:	05 a0 e3 02 c0       	add    eax,0xc002e3a0
c0014d88:	50                   	push   eax
c0014d89:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014d8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d94:	e8 fd c1 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014d99:	59                   	pop    ecx
c0014d9a:	58                   	pop    eax
c0014d9b:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014da0:	68 79 bd 02 c0       	push   0xc002bd79
c0014da5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dab:	e8 e6 c1 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014db0:	58                   	pop    eax
c0014db1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014db6:	5a                   	pop    edx
c0014db7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dba:	83 c0 0c             	add    eax,0xc
c0014dbd:	50                   	push   eax
c0014dbe:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014dc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc9:	e8 c8 c1 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014dce:	59                   	pop    ecx
c0014dcf:	58                   	pop    eax
c0014dd0:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014dd5:	68 82 bd 02 c0       	push   0xc002bd82
c0014dda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de0:	e8 b1 c1 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014de5:	58                   	pop    eax
c0014de6:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014deb:	5a                   	pop    edx
c0014dec:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014def:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df5:	e8 c2 c1 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014dfa:	59                   	pop    ecx
c0014dfb:	58                   	pop    eax
c0014dfc:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014e01:	68 8a bd 02 c0       	push   0xc002bd8a
c0014e06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e0c:	e8 85 c1 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014e11:	58                   	pop    eax
c0014e12:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014e17:	5a                   	pop    edx
c0014e18:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e21:	e8 96 c1 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014e26:	59                   	pop    ecx
c0014e27:	58                   	pop    eax
c0014e28:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014e2d:	68 92 bd 02 c0       	push   0xc002bd92
c0014e32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e38:	e8 59 c1 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014e3d:	58                   	pop    eax
c0014e3e:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014e43:	5a                   	pop    edx
c0014e44:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4d:	e8 6a c1 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014e52:	59                   	pop    ecx
c0014e53:	58                   	pop    eax
c0014e54:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014e59:	68 9a bd 02 c0       	push   0xc002bd9a
c0014e5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e64:	e8 2d c1 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014e69:	58                   	pop    eax
c0014e6a:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014e6f:	5a                   	pop    edx
c0014e70:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014e73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e79:	e8 3e c1 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014e7e:	59                   	pop    ecx
c0014e7f:	58                   	pop    eax
c0014e80:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014e85:	68 a2 bd 02 c0       	push   0xc002bda2
c0014e8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e90:	e8 01 c1 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014e95:	58                   	pop    eax
c0014e96:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014e9b:	5a                   	pop    edx
c0014e9c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea5:	e8 12 c1 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014eaa:	59                   	pop    ecx
c0014eab:	58                   	pop    eax
c0014eac:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014eb1:	68 aa bd 02 c0       	push   0xc002bdaa
c0014eb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebc:	e8 d5 c0 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014ec1:	58                   	pop    eax
c0014ec2:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014ec7:	5a                   	pop    edx
c0014ec8:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014ecb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed1:	e8 e6 c0 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014ed6:	59                   	pop    ecx
c0014ed7:	58                   	pop    eax
c0014ed8:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014edd:	68 b2 bd 02 c0       	push   0xc002bdb2
c0014ee2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee8:	e8 a9 c0 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014eed:	58                   	pop    eax
c0014eee:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014ef3:	5a                   	pop    edx
c0014ef4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ef8:	52                   	push   edx
c0014ef9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eff:	e8 b8 c0 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014f04:	59                   	pop    ecx
c0014f05:	58                   	pop    eax
c0014f06:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014f0b:	68 bb bd 02 c0       	push   0xc002bdbb
c0014f10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f16:	e8 7b c0 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014f1b:	58                   	pop    eax
c0014f1c:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014f21:	5a                   	pop    edx
c0014f22:	57                   	push   edi
c0014f23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f29:	e8 8e c0 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014f2e:	59                   	pop    ecx
c0014f2f:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014f34:	5f                   	pop    edi
c0014f35:	68 c3 bd 02 c0       	push   0xc002bdc3
c0014f3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f40:	e8 51 c0 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014f45:	58                   	pop    eax
c0014f46:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014f4b:	5a                   	pop    edx
c0014f4c:	56                   	push   esi
c0014f4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f53:	e8 64 c0 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014f58:	59                   	pop    ecx
c0014f59:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014f5e:	5e                   	pop    esi
c0014f5f:	68 cb bd 02 c0       	push   0xc002bdcb
c0014f64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6a:	e8 27 c0 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014f6f:	5f                   	pop    edi
c0014f70:	58                   	pop    eax
c0014f71:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014f76:	55                   	push   ebp
c0014f77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7d:	e8 3a c0 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014f82:	58                   	pop    eax
c0014f83:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014f88:	5a                   	pop    edx
c0014f89:	68 d3 bd 02 c0       	push   0xc002bdd3
c0014f8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f94:	e8 fd bf ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014f99:	0f 21 c0             	mov    eax,db0
c0014f9c:	59                   	pop    ecx
c0014f9d:	5e                   	pop    esi
c0014f9e:	50                   	push   eax
c0014f9f:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014fa4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014faa:	e8 0d c0 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014faf:	5f                   	pop    edi
c0014fb0:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014fb5:	5d                   	pop    ebp
c0014fb6:	68 dc bd 02 c0       	push   0xc002bddc
c0014fbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc1:	e8 d0 bf ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014fc6:	0f 21 c8             	mov    eax,db1
c0014fc9:	5a                   	pop    edx
c0014fca:	59                   	pop    ecx
c0014fcb:	50                   	push   eax
c0014fcc:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014fd1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd7:	e8 e0 bf ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0014fdc:	5e                   	pop    esi
c0014fdd:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014fe2:	5f                   	pop    edi
c0014fe3:	68 e4 bd 02 c0       	push   0xc002bde4
c0014fe8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fee:	e8 a3 bf ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0014ff3:	0f 21 d0             	mov    eax,db2
c0014ff6:	5d                   	pop    ebp
c0014ff7:	5a                   	pop    edx
c0014ff8:	50                   	push   eax
c0014ff9:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0014ffe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015004:	e8 b3 bf ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0015009:	59                   	pop    ecx
c001500a:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001500f:	5e                   	pop    esi
c0015010:	68 ec bd 02 c0       	push   0xc002bdec
c0015015:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501b:	e8 76 bf ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c0015020:	0f 21 d8             	mov    eax,db3
c0015023:	5f                   	pop    edi
c0015024:	5d                   	pop    ebp
c0015025:	50                   	push   eax
c0015026:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001502b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015031:	e8 86 bf ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0015036:	58                   	pop    eax
c0015037:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001503c:	5a                   	pop    edx
c001503d:	68 f4 bd 02 c0       	push   0xc002bdf4
c0015042:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015048:	e8 49 bf ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001504d:	0f 21 f0             	mov    eax,db6
c0015050:	59                   	pop    ecx
c0015051:	5e                   	pop    esi
c0015052:	50                   	push   eax
c0015053:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0015058:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505e:	e8 59 bf ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0015063:	5f                   	pop    edi
c0015064:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0015069:	5d                   	pop    ebp
c001506a:	68 fc bd 02 c0       	push   0xc002bdfc
c001506f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015075:	e8 1c bf ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001507a:	0f 21 f8             	mov    eax,db7
c001507d:	5a                   	pop    edx
c001507e:	59                   	pop    ecx
c001507f:	50                   	push   eax
c0015080:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0015085:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508b:	e8 2c bf ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c0015090:	5e                   	pop    esi
c0015091:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015094:	e8 19 8c 00 00       	call   c001dcb2 <Thr::getDriverNameFromAddress(unsigned long)>
c0015099:	83 c4 10             	add    esp,0x10
c001509c:	85 c0                	test   eax,eax
c001509e:	74 7d                	je     c001511d <displayDebugInfo(regs*)+0x48b>
c00150a0:	89 c6                	mov    esi,eax
c00150a2:	50                   	push   eax
c00150a3:	50                   	push   eax
c00150a4:	56                   	push   esi
c00150a5:	68 04 be 02 c0       	push   0xc002be04
c00150aa:	e8 38 dd ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00150af:	5a                   	pop    edx
c00150b0:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c00150b5:	59                   	pop    ecx
c00150b6:	68 12 be 02 c0       	push   0xc002be12
c00150bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c1:	e8 d0 be ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c00150c6:	5f                   	pop    edi
c00150c7:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c00150cc:	5d                   	pop    ebp
c00150cd:	56                   	push   esi
c00150ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d4:	e8 bd be ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c00150d9:	58                   	pop    eax
c00150da:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c00150df:	5a                   	pop    edx
c00150e0:	68 1e be 02 c0       	push   0xc002be1e
c00150e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150eb:	e8 a6 be ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c00150f0:	59                   	pop    ecx
c00150f1:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c00150f6:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00150fc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150ff:	e8 e5 8b 00 00       	call   c001dce9 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015104:	5b                   	pop    ebx
c0015105:	5d                   	pop    ebp
c0015106:	50                   	push   eax
c0015107:	57                   	push   edi
c0015108:	e8 af be ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c001510d:	58                   	pop    eax
c001510e:	5a                   	pop    edx
c001510f:	56                   	push   esi
c0015110:	68 2a be 02 c0       	push   0xc002be2a
c0015115:	e8 cd dc ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001511a:	83 c4 10             	add    esp,0x10
c001511d:	fa                   	cli    
c001511e:	f4                   	hlt    
c001511f:	eb fe                	jmp    c001511f <displayDebugInfo(regs*)+0x48d>

c0015121 <x87EmulHandler(regs*, void*)>:
c0015121:	83 ec 0c             	sub    esp,0xc
c0015124:	0f 20 c2             	mov    edx,cr0
c0015127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001512c:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015130:	75 4b                	jne    c001517d <x87EmulHandler(regs*, void*)+0x5c>
c0015132:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0015137:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001513d:	85 c0                	test   eax,eax
c001513f:	74 05                	je     c0015146 <x87EmulHandler(regs*, void*)+0x25>
c0015141:	83 e2 08             	and    edx,0x8
c0015144:	75 17                	jne    c001515d <x87EmulHandler(regs*, void*)+0x3c>
c0015146:	83 ec 0c             	sub    esp,0xc
c0015149:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001514d:	e8 57 b0 00 00       	call   c00201a9 <Vm::x87Handler(regs*)>
c0015152:	83 c4 10             	add    esp,0x10
c0015155:	84 c0                	test   al,al
c0015157:	74 24                	je     c001517d <x87EmulHandler(regs*, void*)+0x5c>
c0015159:	83 c4 0c             	add    esp,0xc
c001515c:	c3                   	ret    
c001515d:	83 ec 0c             	sub    esp,0xc
c0015160:	68 50 be 02 c0       	push   0xc002be50
c0015165:	e8 7d dc ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001516a:	0f 06                	clts   
c001516c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015171:	83 c4 10             	add    esp,0x10
c0015174:	a3 88 f5 02 c0       	mov    ds:0xc002f588,eax
c0015179:	83 c4 0c             	add    esp,0xc
c001517c:	c3                   	ret    
c001517d:	83 ec 0c             	sub    esp,0xc
c0015180:	68 3a be 02 c0       	push   0xc002be3a
c0015185:	e8 5d dc ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001518a:	5a                   	pop    edx
c001518b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001518f:	e8 fe fa ff ff       	call   c0014c92 <displayDebugInfo(regs*)>

c0015194 <gpFault(regs*, void*)>:
c0015194:	53                   	push   ebx
c0015195:	83 ec 14             	sub    esp,0x14
c0015198:	c7 05 84 f5 02 c0 82 f6 01 c0 	mov    DWORD PTR ds:0xc002f584,0xc001f682
c00151a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151a6:	53                   	push   ebx
c00151a7:	e8 d6 a4 00 00       	call   c001f682 <Vm::faultHandler(regs*)>
c00151ac:	83 c4 10             	add    esp,0x10
c00151af:	84 c0                	test   al,al
c00151b1:	74 05                	je     c00151b8 <gpFault(regs*, void*)+0x24>
c00151b3:	83 c4 08             	add    esp,0x8
c00151b6:	5b                   	pop    ebx
c00151b7:	c3                   	ret    
c00151b8:	83 ec 0c             	sub    esp,0xc
c00151bb:	68 5d be 02 c0       	push   0xc002be5d
c00151c0:	e8 22 dc ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00151c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151c8:	e8 c5 fa ff ff       	call   c0014c92 <displayDebugInfo(regs*)>

c00151cd <pgFault(regs*, void*)>:
c00151cd:	83 ec 18             	sub    esp,0x18
c00151d0:	68 78 be 02 c0       	push   0xc002be78
c00151d5:	e8 0d dc ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00151da:	58                   	pop    eax
c00151db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151df:	e8 ae fa ff ff       	call   c0014c92 <displayDebugInfo(regs*)>

c00151e4 <otherISRHandler(regs*, void*)>:
c00151e4:	53                   	push   ebx
c00151e5:	83 ec 0c             	sub    esp,0xc
c00151e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00151ec:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00151ef:	50                   	push   eax
c00151f0:	50                   	push   eax
c00151f1:	68 85 be 02 c0       	push   0xc002be85
c00151f6:	e8 ec db ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00151fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151fe:	e8 8f fa ff ff       	call   c0014c92 <displayDebugInfo(regs*)>

c0015203 <opcodeFault(regs*, void*)>:
c0015203:	55                   	push   ebp
c0015204:	89 e5                	mov    ebp,esp
c0015206:	56                   	push   esi
c0015207:	53                   	push   ebx
c0015208:	83 ec 40             	sub    esp,0x40
c001520b:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0015210:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015216:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001521c:	84 c0                	test   al,al
c001521e:	74 24                	je     c0015244 <opcodeFault(regs*, void*)+0x41>
c0015220:	83 ec 0c             	sub    esp,0xc
c0015223:	68 a4 be 02 c0       	push   0xc002bea4
c0015228:	e8 ba db ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015233:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015236:	8d 50 19             	lea    edx,[eax+0x19]
c0015239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001523f:	e9 d5 05 00 00       	jmp    c0015819 <opcodeFault(regs*, void*)+0x616>
c0015244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015247:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001524a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001524d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015251:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015258:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001525b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001525e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015261:	8a 00                	mov    al,BYTE PTR [eax]
c0015263:	3c f0                	cmp    al,0xf0
c0015265:	75 17                	jne    c001527e <opcodeFault(regs*, void*)+0x7b>
c0015267:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001526a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015270:	8d 50 01             	lea    edx,[eax+0x1]
c0015273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015276:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015279:	e9 da 00 00 00       	jmp    c0015358 <opcodeFault(regs*, void*)+0x155>
c001527e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015281:	8a 00                	mov    al,BYTE PTR [eax]
c0015283:	3c f2                	cmp    al,0xf2
c0015285:	74 09                	je     c0015290 <opcodeFault(regs*, void*)+0x8d>
c0015287:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001528a:	8a 00                	mov    al,BYTE PTR [eax]
c001528c:	3c f3                	cmp    al,0xf3
c001528e:	75 1b                	jne    c00152ab <opcodeFault(regs*, void*)+0xa8>
c0015290:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015294:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001529d:	8d 50 01             	lea    edx,[eax+0x1]
c00152a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152a6:	e9 ad 00 00 00       	jmp    c0015358 <opcodeFault(regs*, void*)+0x155>
c00152ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ae:	8a 00                	mov    al,BYTE PTR [eax]
c00152b0:	3c 66                	cmp    al,0x66
c00152b2:	75 1f                	jne    c00152d3 <opcodeFault(regs*, void*)+0xd0>
c00152b4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152b8:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00152bc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c5:	8d 50 01             	lea    edx,[eax+0x1]
c00152c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152ce:	e9 85 00 00 00       	jmp    c0015358 <opcodeFault(regs*, void*)+0x155>
c00152d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d6:	8a 00                	mov    al,BYTE PTR [eax]
c00152d8:	3c 67                	cmp    al,0x67
c00152da:	75 18                	jne    c00152f4 <opcodeFault(regs*, void*)+0xf1>
c00152dc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e9:	8d 50 01             	lea    edx,[eax+0x1]
c00152ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152f2:	eb 64                	jmp    c0015358 <opcodeFault(regs*, void*)+0x155>
c00152f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f7:	8a 00                	mov    al,BYTE PTR [eax]
c00152f9:	3c 2e                	cmp    al,0x2e
c00152fb:	74 09                	je     c0015306 <opcodeFault(regs*, void*)+0x103>
c00152fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015300:	8a 00                	mov    al,BYTE PTR [eax]
c0015302:	3c 3e                	cmp    al,0x3e
c0015304:	75 18                	jne    c001531e <opcodeFault(regs*, void*)+0x11b>
c0015306:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001530a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001530d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015310:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015313:	8d 50 01             	lea    edx,[eax+0x1]
c0015316:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015319:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001531c:	eb 3a                	jmp    c0015358 <opcodeFault(regs*, void*)+0x155>
c001531e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015321:	8a 00                	mov    al,BYTE PTR [eax]
c0015323:	3c 36                	cmp    al,0x36
c0015325:	74 1b                	je     c0015342 <opcodeFault(regs*, void*)+0x13f>
c0015327:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532a:	8a 00                	mov    al,BYTE PTR [eax]
c001532c:	3c 26                	cmp    al,0x26
c001532e:	74 12                	je     c0015342 <opcodeFault(regs*, void*)+0x13f>
c0015330:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015333:	8a 00                	mov    al,BYTE PTR [eax]
c0015335:	3c 64                	cmp    al,0x64
c0015337:	74 09                	je     c0015342 <opcodeFault(regs*, void*)+0x13f>
c0015339:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533c:	8a 00                	mov    al,BYTE PTR [eax]
c001533e:	3c 65                	cmp    al,0x65
c0015340:	75 16                	jne    c0015358 <opcodeFault(regs*, void*)+0x155>
c0015342:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015346:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534f:	8d 50 01             	lea    edx,[eax+0x1]
c0015352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015355:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015358:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535b:	8a 00                	mov    al,BYTE PTR [eax]
c001535d:	3c 0f                	cmp    al,0xf
c001535f:	0f 85 ad 00 00 00    	jne    c0015412 <opcodeFault(regs*, void*)+0x20f>
c0015365:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015368:	40                   	inc    eax
c0015369:	8a 00                	mov    al,BYTE PTR [eax]
c001536b:	3c c2                	cmp    al,0xc2
c001536d:	74 0e                	je     c001537d <opcodeFault(regs*, void*)+0x17a>
c001536f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015372:	40                   	inc    eax
c0015373:	8a 00                	mov    al,BYTE PTR [eax]
c0015375:	3c c3                	cmp    al,0xc3
c0015377:	0f 85 95 00 00 00    	jne    c0015412 <opcodeFault(regs*, void*)+0x20f>
c001537d:	83 ec 0c             	sub    esp,0xc
c0015380:	68 c7 be 02 c0       	push   0xc002bec7
c0015385:	e8 5d da ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001538a:	83 c4 10             	add    esp,0x10
c001538d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015390:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015393:	8d 50 01             	lea    edx,[eax+0x1]
c0015396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015399:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001539c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001539f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a2:	8a 00                	mov    al,BYTE PTR [eax]
c00153a4:	8d 50 fe             	lea    edx,[eax-0x2]
c00153a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153aa:	88 10                	mov    BYTE PTR [eax],dl
c00153ac:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00153af:	50                   	push   eax
c00153b0:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00153b3:	50                   	push   eax
c00153b4:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00153b7:	50                   	push   eax
c00153b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00153bb:	e8 3c 4c 00 00       	call   c0019ffc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00153c0:	83 c4 10             	add    esp,0x10
c00153c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c9:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00153cc:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00153cf:	01 d0                	add    eax,edx
c00153d1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00153d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153da:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00153dd:	48                   	dec    eax
c00153de:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00153e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00153e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ed:	83 ec 04             	sub    esp,0x4
c00153f0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153f3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153f6:	50                   	push   eax
c00153f7:	e8 b8 ad fe ff       	call   c00001b4 <voodooXADD>
c00153fc:	83 c4 10             	add    esp,0x10
c00153ff:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015402:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015405:	01 c2                	add    edx,eax
c0015407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001540d:	e9 07 04 00 00       	jmp    c0015819 <opcodeFault(regs*, void*)+0x616>
c0015412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015415:	8a 00                	mov    al,BYTE PTR [eax]
c0015417:	3c 0f                	cmp    al,0xf
c0015419:	0f 85 8b 01 00 00    	jne    c00155aa <opcodeFault(regs*, void*)+0x3a7>
c001541f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015422:	40                   	inc    eax
c0015423:	8a 00                	mov    al,BYTE PTR [eax]
c0015425:	3c c7                	cmp    al,0xc7
c0015427:	0f 86 7d 01 00 00    	jbe    c00155aa <opcodeFault(regs*, void*)+0x3a7>
c001542d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015430:	40                   	inc    eax
c0015431:	8a 00                	mov    al,BYTE PTR [eax]
c0015433:	3c cf                	cmp    al,0xcf
c0015435:	0f 87 6f 01 00 00    	ja     c00155aa <opcodeFault(regs*, void*)+0x3a7>
c001543b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543e:	40                   	inc    eax
c001543f:	8a 00                	mov    al,BYTE PTR [eax]
c0015441:	83 c0 38             	add    eax,0x38
c0015444:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015447:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001544b:	75 0b                	jne    c0015458 <opcodeFault(regs*, void*)+0x255>
c001544d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015450:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015453:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015456:	eb 75                	jmp    c00154cd <opcodeFault(regs*, void*)+0x2ca>
c0015458:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001545c:	75 0b                	jne    c0015469 <opcodeFault(regs*, void*)+0x266>
c001545e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015461:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015464:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015467:	eb 64                	jmp    c00154cd <opcodeFault(regs*, void*)+0x2ca>
c0015469:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001546d:	75 0b                	jne    c001547a <opcodeFault(regs*, void*)+0x277>
c001546f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015472:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015475:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015478:	eb 53                	jmp    c00154cd <opcodeFault(regs*, void*)+0x2ca>
c001547a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001547e:	75 0b                	jne    c001548b <opcodeFault(regs*, void*)+0x288>
c0015480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015483:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015486:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015489:	eb 42                	jmp    c00154cd <opcodeFault(regs*, void*)+0x2ca>
c001548b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001548f:	75 0b                	jne    c001549c <opcodeFault(regs*, void*)+0x299>
c0015491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015494:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015497:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001549a:	eb 31                	jmp    c00154cd <opcodeFault(regs*, void*)+0x2ca>
c001549c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154a0:	75 0b                	jne    c00154ad <opcodeFault(regs*, void*)+0x2aa>
c00154a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00154a8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ab:	eb 20                	jmp    c00154cd <opcodeFault(regs*, void*)+0x2ca>
c00154ad:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00154b1:	75 0b                	jne    c00154be <opcodeFault(regs*, void*)+0x2bb>
c00154b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00154b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154bc:	eb 0f                	jmp    c00154cd <opcodeFault(regs*, void*)+0x2ca>
c00154be:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00154c2:	75 09                	jne    c00154cd <opcodeFault(regs*, void*)+0x2ca>
c00154c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00154ca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154cd:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00154d1:	74 10                	je     c00154e3 <opcodeFault(regs*, void*)+0x2e0>
c00154d3:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00154da:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00154e1:	eb 2d                	jmp    c0015510 <opcodeFault(regs*, void*)+0x30d>
c00154e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154e6:	c1 e0 18             	shl    eax,0x18
c00154e9:	89 c2                	mov    edx,eax
c00154eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154ee:	c1 e0 08             	shl    eax,0x8
c00154f1:	25 00 00 ff 00       	and    eax,0xff0000
c00154f6:	09 c2                	or     edx,eax
c00154f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154fb:	c1 e8 08             	shr    eax,0x8
c00154fe:	25 00 ff 00 00       	and    eax,0xff00
c0015503:	09 c2                	or     edx,eax
c0015505:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015508:	c1 e8 18             	shr    eax,0x18
c001550b:	09 d0                	or     eax,edx
c001550d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015510:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015514:	75 0b                	jne    c0015521 <opcodeFault(regs*, void*)+0x31e>
c0015516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015519:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001551c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001551f:	eb 75                	jmp    c0015596 <opcodeFault(regs*, void*)+0x393>
c0015521:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015525:	75 0b                	jne    c0015532 <opcodeFault(regs*, void*)+0x32f>
c0015527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001552d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015530:	eb 64                	jmp    c0015596 <opcodeFault(regs*, void*)+0x393>
c0015532:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015536:	75 0b                	jne    c0015543 <opcodeFault(regs*, void*)+0x340>
c0015538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001553e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015541:	eb 53                	jmp    c0015596 <opcodeFault(regs*, void*)+0x393>
c0015543:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015547:	75 0b                	jne    c0015554 <opcodeFault(regs*, void*)+0x351>
c0015549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001554f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015552:	eb 42                	jmp    c0015596 <opcodeFault(regs*, void*)+0x393>
c0015554:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015558:	75 0b                	jne    c0015565 <opcodeFault(regs*, void*)+0x362>
c001555a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015560:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015563:	eb 31                	jmp    c0015596 <opcodeFault(regs*, void*)+0x393>
c0015565:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015569:	75 0b                	jne    c0015576 <opcodeFault(regs*, void*)+0x373>
c001556b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015571:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015574:	eb 20                	jmp    c0015596 <opcodeFault(regs*, void*)+0x393>
c0015576:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001557a:	75 0b                	jne    c0015587 <opcodeFault(regs*, void*)+0x384>
c001557c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015582:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015585:	eb 0f                	jmp    c0015596 <opcodeFault(regs*, void*)+0x393>
c0015587:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001558b:	75 09                	jne    c0015596 <opcodeFault(regs*, void*)+0x393>
c001558d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015590:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015593:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015599:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001559c:	8d 50 02             	lea    edx,[eax+0x2]
c001559f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155a5:	e9 6f 02 00 00       	jmp    c0015819 <opcodeFault(regs*, void*)+0x616>
c00155aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ad:	8a 00                	mov    al,BYTE PTR [eax]
c00155af:	3c 0f                	cmp    al,0xf
c00155b1:	0f 85 8d 01 00 00    	jne    c0015744 <opcodeFault(regs*, void*)+0x541>
c00155b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ba:	40                   	inc    eax
c00155bb:	8a 00                	mov    al,BYTE PTR [eax]
c00155bd:	3c c7                	cmp    al,0xc7
c00155bf:	0f 85 7f 01 00 00    	jne    c0015744 <opcodeFault(regs*, void*)+0x541>
c00155c5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00155c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155ce:	8d 50 01             	lea    edx,[eax+0x1]
c00155d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155d7:	8d 45 ba             	lea    eax,[ebp-0x46]
c00155da:	50                   	push   eax
c00155db:	8d 45 bb             	lea    eax,[ebp-0x45]
c00155de:	50                   	push   eax
c00155df:	8d 45 bc             	lea    eax,[ebp-0x44]
c00155e2:	50                   	push   eax
c00155e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00155e6:	e8 11 4a 00 00       	call   c0019ffc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00155eb:	83 c4 10             	add    esp,0x10
c00155ee:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00155f1:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00155f4:	83 f0 01             	xor    eax,0x1
c00155f7:	84 c0                	test   al,al
c00155f9:	0f 84 45 01 00 00    	je     c0015744 <opcodeFault(regs*, void*)+0x541>
c00155ff:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015602:	3c 01                	cmp    al,0x1
c0015604:	0f 85 3a 01 00 00    	jne    c0015744 <opcodeFault(regs*, void*)+0x541>
c001560a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001560d:	83 f0 01             	xor    eax,0x1
c0015610:	84 c0                	test   al,al
c0015612:	0f 84 2c 01 00 00    	je     c0015744 <opcodeFault(regs*, void*)+0x541>
c0015618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001561e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015621:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015628:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001562b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001562e:	89 c2                	mov    edx,eax
c0015630:	b8 00 00 00 00       	mov    eax,0x0
c0015635:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015638:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001563b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015641:	ba 00 00 00 00       	mov    edx,0x0
c0015646:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015649:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001564c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015652:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015655:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001565c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001565f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015662:	89 c2                	mov    edx,eax
c0015664:	b8 00 00 00 00       	mov    eax,0x0
c0015669:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001566c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001566f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015672:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015675:	ba 00 00 00 00       	mov    edx,0x0
c001567a:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001567d:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015680:	fa                   	cli    
c0015681:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0015686:	40                   	inc    eax
c0015687:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001568c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001568f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015692:	8b 00                	mov    eax,DWORD PTR [eax]
c0015694:	89 c1                	mov    ecx,eax
c0015696:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015699:	89 cb                	mov    ebx,ecx
c001569b:	89 d0                	mov    eax,edx
c001569d:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00156a0:	89 c6                	mov    esi,eax
c00156a2:	89 f0                	mov    eax,esi
c00156a4:	09 d8                	or     eax,ebx
c00156a6:	85 c0                	test   eax,eax
c00156a8:	75 21                	jne    c00156cb <opcodeFault(regs*, void*)+0x4c8>
c00156aa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00156ad:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156b0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156b3:	89 01                	mov    DWORD PTR [ecx],eax
c00156b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00156b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156be:	83 c8 40             	or     eax,0x40
c00156c1:	89 c2                	mov    edx,eax
c00156c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c6:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00156c9:	eb 3e                	jmp    c0015709 <opcodeFault(regs*, void*)+0x506>
c00156cb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156ce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156d6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156d9:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00156dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156df:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156e2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156e5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156e8:	89 d0                	mov    eax,edx
c00156ea:	31 d2                	xor    edx,edx
c00156ec:	89 c3                	mov    ebx,eax
c00156ee:	89 d6                	mov    esi,edx
c00156f0:	89 da                	mov    edx,ebx
c00156f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f5:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156fe:	83 e0 bf             	and    eax,0xffffffbf
c0015701:	89 c2                	mov    edx,eax
c0015703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015706:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015709:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001570e:	48                   	dec    eax
c001570f:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0015714:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0015719:	85 c0                	test   eax,eax
c001571b:	75 01                	jne    c001571e <opcodeFault(regs*, void*)+0x51b>
c001571d:	fb                   	sti    
c001571e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015721:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015724:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015727:	01 c2                	add    edx,eax
c0015729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001572f:	83 ec 0c             	sub    esp,0xc
c0015732:	68 d6 be 02 c0       	push   0xc002bed6
c0015737:	e8 ab d6 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001573c:	83 c4 10             	add    esp,0x10
c001573f:	e9 d5 00 00 00       	jmp    c0015819 <opcodeFault(regs*, void*)+0x616>
c0015744:	83 ec 0c             	sub    esp,0xc
c0015747:	68 e9 be 02 c0       	push   0xc002bee9
c001574c:	e8 96 d6 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0015751:	83 c4 10             	add    esp,0x10
c0015754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015757:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001575a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015760:	c1 e0 04             	shl    eax,0x4
c0015763:	01 d0                	add    eax,edx
c0015765:	83 c0 03             	add    eax,0x3
c0015768:	8a 00                	mov    al,BYTE PTR [eax]
c001576a:	0f b6 d8             	movzx  ebx,al
c001576d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015770:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015776:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015779:	c1 e0 04             	shl    eax,0x4
c001577c:	01 d0                	add    eax,edx
c001577e:	83 c0 02             	add    eax,0x2
c0015781:	8a 00                	mov    al,BYTE PTR [eax]
c0015783:	0f b6 c8             	movzx  ecx,al
c0015786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015789:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001578c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015792:	c1 e0 04             	shl    eax,0x4
c0015795:	01 d0                	add    eax,edx
c0015797:	40                   	inc    eax
c0015798:	8a 00                	mov    al,BYTE PTR [eax]
c001579a:	0f b6 d0             	movzx  edx,al
c001579d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a0:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00157a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157a9:	c1 e0 04             	shl    eax,0x4
c00157ac:	01 f0                	add    eax,esi
c00157ae:	8a 00                	mov    al,BYTE PTR [eax]
c00157b0:	0f b6 c0             	movzx  eax,al
c00157b3:	83 ec 0c             	sub    esp,0xc
c00157b6:	53                   	push   ebx
c00157b7:	51                   	push   ecx
c00157b8:	52                   	push   edx
c00157b9:	50                   	push   eax
c00157ba:	68 fc be 02 c0       	push   0xc002befc
c00157bf:	e8 23 d6 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00157c4:	83 c4 20             	add    esp,0x20
c00157c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157cd:	83 c0 03             	add    eax,0x3
c00157d0:	8a 00                	mov    al,BYTE PTR [eax]
c00157d2:	0f b6 d8             	movzx  ebx,al
c00157d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157db:	83 c0 02             	add    eax,0x2
c00157de:	8a 00                	mov    al,BYTE PTR [eax]
c00157e0:	0f b6 c8             	movzx  ecx,al
c00157e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157e9:	40                   	inc    eax
c00157ea:	8a 00                	mov    al,BYTE PTR [eax]
c00157ec:	0f b6 d0             	movzx  edx,al
c00157ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157f5:	8a 00                	mov    al,BYTE PTR [eax]
c00157f7:	0f b6 c0             	movzx  eax,al
c00157fa:	83 ec 0c             	sub    esp,0xc
c00157fd:	53                   	push   ebx
c00157fe:	51                   	push   ecx
c00157ff:	52                   	push   edx
c0015800:	50                   	push   eax
c0015801:	68 24 bf 02 c0       	push   0xc002bf24
c0015806:	e8 dc d5 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001580b:	83 c4 20             	add    esp,0x20
c001580e:	83 ec 0c             	sub    esp,0xc
c0015811:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015814:	e8 79 f4 ff ff       	call   c0014c92 <displayDebugInfo(regs*)>
c0015819:	8d 65 f8             	lea    esp,[ebp-0x8]
c001581c:	5b                   	pop    ebx
c001581d:	5e                   	pop    esi
c001581e:	5d                   	pop    ebp
c001581f:	c3                   	ret    

c0015820 <displayProgramFault(char const*)>:
c0015820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015825:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015828:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001582e:	85 c0                	test   eax,eax
c0015830:	74 15                	je     c0015847 <displayProgramFault(char const*)+0x27>
c0015832:	83 ec 0c             	sub    esp,0xc
c0015835:	6a 04                	push   0x4
c0015837:	6a 0f                	push   0xf
c0015839:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001583d:	50                   	push   eax
c001583e:	e8 95 b4 ff ff       	call   c0010cd8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015843:	83 c4 1c             	add    esp,0x1c
c0015846:	c3                   	ret    
c0015847:	c3                   	ret    

c0015848 <setupInterruptController()>:
c0015848:	55                   	push   ebp
c0015849:	89 e5                	mov    ebp,esp
c001584b:	53                   	push   ebx
c001584c:	83 ec 24             	sub    esp,0x24
c001584f:	b8 00 00 00 00       	mov    eax,0x0
c0015854:	85 c0                	test   eax,eax
c0015856:	0f 95 c0             	setne  al
c0015859:	84 c0                	test   al,al
c001585b:	74 5b                	je     c00158b8 <setupInterruptController()+0x70>
c001585d:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001586a:	e8 1d a0 ff ff       	call   c000f88c <malloc>
c001586f:	83 c4 10             	add    esp,0x10
c0015872:	89 c3                	mov    ebx,eax
c0015874:	83 ec 0c             	sub    esp,0xc
c0015877:	53                   	push   ebx
c0015878:	e8 ff 0d 01 00       	call   c002667c <APIC::APIC()>
c001587d:	83 c4 10             	add    esp,0x10
c0015880:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015883:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015886:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015889:	8b 00                	mov    eax,DWORD PTR [eax]
c001588b:	83 c0 08             	add    eax,0x8
c001588e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015890:	6a 00                	push   0x0
c0015892:	6a 00                	push   0x0
c0015894:	6a 00                	push   0x0
c0015896:	52                   	push   edx
c0015897:	ff d0                	call   eax
c0015899:	83 c4 10             	add    esp,0x10
c001589c:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00158a1:	83 ec 08             	sub    esp,0x8
c00158a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158a7:	50                   	push   eax
c00158a8:	e8 73 e9 ff ff       	call   c0014220 <Device::addChild(Device*)>
c00158ad:	83 c4 10             	add    esp,0x10
c00158b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158b3:	e9 89 03 00 00       	jmp    c0015c41 <setupInterruptController()+0x3f9>
c00158b8:	a0 80 1d 03 c0       	mov    al,ds:0xc0031d80
c00158bd:	84 c0                	test   al,al
c00158bf:	75 24                	jne    c00158e5 <setupInterruptController()+0x9d>
c00158c1:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00158c6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00158cc:	83 e2 fe             	and    edx,0xfffffffe
c00158cf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00158d5:	83 ec 0c             	sub    esp,0xc
c00158d8:	68 49 bf 02 c0       	push   0xc002bf49
c00158dd:	e8 05 d5 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00158e2:	83 c4 10             	add    esp,0x10
c00158e5:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00158ea:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00158f0:	83 e0 01             	and    eax,0x1
c00158f3:	84 c0                	test   al,al
c00158f5:	0f 95 c0             	setne  al
c00158f8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00158fb:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015902:	83 ec 0c             	sub    esp,0xc
c0015905:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015908:	e8 7f 9f ff ff       	call   c000f88c <malloc>
c001590d:	83 c4 10             	add    esp,0x10
c0015910:	89 c3                	mov    ebx,eax
c0015912:	83 ec 0c             	sub    esp,0xc
c0015915:	53                   	push   ebx
c0015916:	e8 b9 12 01 00       	call   c0026bd4 <PIC::PIC()>
c001591b:	83 c4 10             	add    esp,0x10
c001591e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015921:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015924:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015927:	8b 00                	mov    eax,DWORD PTR [eax]
c0015929:	83 c0 08             	add    eax,0x8
c001592c:	8b 00                	mov    eax,DWORD PTR [eax]
c001592e:	6a 00                	push   0x0
c0015930:	6a 00                	push   0x0
c0015932:	6a 00                	push   0x0
c0015934:	52                   	push   edx
c0015935:	ff d0                	call   eax
c0015937:	83 c4 10             	add    esp,0x10
c001593a:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001593e:	74 73                	je     c00159b3 <setupInterruptController()+0x16b>
c0015940:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015943:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015946:	8b 00                	mov    eax,DWORD PTR [eax]
c0015948:	83 c0 0c             	add    eax,0xc
c001594b:	8b 00                	mov    eax,DWORD PTR [eax]
c001594d:	6a 00                	push   0x0
c001594f:	6a 00                	push   0x0
c0015951:	6a 00                	push   0x0
c0015953:	52                   	push   edx
c0015954:	ff d0                	call   eax
c0015956:	83 c4 10             	add    esp,0x10
c0015959:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001595d:	74 15                	je     c0015974 <setupInterruptController()+0x12c>
c001595f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015962:	8b 00                	mov    eax,DWORD PTR [eax]
c0015964:	83 c0 04             	add    eax,0x4
c0015967:	8b 00                	mov    eax,DWORD PTR [eax]
c0015969:	83 ec 0c             	sub    esp,0xc
c001596c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001596f:	ff d0                	call   eax
c0015971:	83 c4 10             	add    esp,0x10
c0015974:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001597b:	83 ec 0c             	sub    esp,0xc
c001597e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015981:	e8 06 9f ff ff       	call   c000f88c <malloc>
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	89 c3                	mov    ebx,eax
c001598b:	83 ec 0c             	sub    esp,0xc
c001598e:	53                   	push   ebx
c001598f:	e8 e8 0c 01 00       	call   c002667c <APIC::APIC()>
c0015994:	83 c4 10             	add    esp,0x10
c0015997:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001599a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001599d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a2:	83 c0 08             	add    eax,0x8
c00159a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a7:	6a 00                	push   0x0
c00159a9:	6a 00                	push   0x0
c00159ab:	6a 00                	push   0x0
c00159ad:	52                   	push   edx
c00159ae:	ff d0                	call   eax
c00159b0:	83 c4 10             	add    esp,0x10
c00159b3:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00159b8:	83 ec 08             	sub    esp,0x8
c00159bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159be:	50                   	push   eax
c00159bf:	e8 5c e8 ff ff       	call   c0014220 <Device::addChild(Device*)>
c00159c4:	83 c4 10             	add    esp,0x10
c00159c7:	c7 05 88 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f588,0x0
c00159d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d6:	83 c0 24             	add    eax,0x24
c00159d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159db:	6a 00                	push   0x0
c00159dd:	68 e4 51 01 c0       	push   0xc00151e4
c00159e2:	6a 00                	push   0x0
c00159e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159e7:	ff d0                	call   eax
c00159e9:	83 c4 10             	add    esp,0x10
c00159ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f1:	83 c0 24             	add    eax,0x24
c00159f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f6:	6a 00                	push   0x0
c00159f8:	68 e4 51 01 c0       	push   0xc00151e4
c00159fd:	6a 01                	push   0x1
c00159ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a02:	ff d0                	call   eax
c0015a04:	83 c4 10             	add    esp,0x10
c0015a07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0c:	83 c0 24             	add    eax,0x24
c0015a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a11:	6a 00                	push   0x0
c0015a13:	68 ef 4a 01 c0       	push   0xc0014aef
c0015a18:	6a 02                	push   0x2
c0015a1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a1d:	ff d0                	call   eax
c0015a1f:	83 c4 10             	add    esp,0x10
c0015a22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a27:	83 c0 24             	add    eax,0x24
c0015a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2c:	6a 00                	push   0x0
c0015a2e:	68 e4 51 01 c0       	push   0xc00151e4
c0015a33:	6a 03                	push   0x3
c0015a35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a38:	ff d0                	call   eax
c0015a3a:	83 c4 10             	add    esp,0x10
c0015a3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a42:	83 c0 24             	add    eax,0x24
c0015a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a47:	6a 00                	push   0x0
c0015a49:	68 e4 51 01 c0       	push   0xc00151e4
c0015a4e:	6a 04                	push   0x4
c0015a50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a53:	ff d0                	call   eax
c0015a55:	83 c4 10             	add    esp,0x10
c0015a58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5d:	83 c0 24             	add    eax,0x24
c0015a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a62:	6a 00                	push   0x0
c0015a64:	68 e4 51 01 c0       	push   0xc00151e4
c0015a69:	6a 05                	push   0x5
c0015a6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6e:	ff d0                	call   eax
c0015a70:	83 c4 10             	add    esp,0x10
c0015a73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a78:	83 c0 24             	add    eax,0x24
c0015a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7d:	6a 00                	push   0x0
c0015a7f:	68 03 52 01 c0       	push   0xc0015203
c0015a84:	6a 06                	push   0x6
c0015a86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a89:	ff d0                	call   eax
c0015a8b:	83 c4 10             	add    esp,0x10
c0015a8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a93:	83 c0 24             	add    eax,0x24
c0015a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a98:	6a 00                	push   0x0
c0015a9a:	68 21 51 01 c0       	push   0xc0015121
c0015a9f:	6a 07                	push   0x7
c0015aa1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa4:	ff d0                	call   eax
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aae:	83 c0 24             	add    eax,0x24
c0015ab1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab3:	6a 00                	push   0x0
c0015ab5:	68 0a 49 01 c0       	push   0xc001490a
c0015aba:	6a 08                	push   0x8
c0015abc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abf:	ff d0                	call   eax
c0015ac1:	83 c4 10             	add    esp,0x10
c0015ac4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac9:	83 c0 24             	add    eax,0x24
c0015acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ace:	6a 00                	push   0x0
c0015ad0:	68 e4 51 01 c0       	push   0xc00151e4
c0015ad5:	6a 09                	push   0x9
c0015ad7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ada:	ff d0                	call   eax
c0015adc:	83 c4 10             	add    esp,0x10
c0015adf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae4:	83 c0 24             	add    eax,0x24
c0015ae7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae9:	6a 00                	push   0x0
c0015aeb:	68 e4 51 01 c0       	push   0xc00151e4
c0015af0:	6a 0a                	push   0xa
c0015af2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af5:	ff d0                	call   eax
c0015af7:	83 c4 10             	add    esp,0x10
c0015afa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aff:	83 c0 24             	add    eax,0x24
c0015b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b04:	6a 00                	push   0x0
c0015b06:	68 e4 51 01 c0       	push   0xc00151e4
c0015b0b:	6a 0b                	push   0xb
c0015b0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b10:	ff d0                	call   eax
c0015b12:	83 c4 10             	add    esp,0x10
c0015b15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1a:	83 c0 24             	add    eax,0x24
c0015b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1f:	6a 00                	push   0x0
c0015b21:	68 e4 51 01 c0       	push   0xc00151e4
c0015b26:	6a 0c                	push   0xc
c0015b28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2b:	ff d0                	call   eax
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b35:	83 c0 24             	add    eax,0x24
c0015b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3a:	6a 00                	push   0x0
c0015b3c:	68 94 51 01 c0       	push   0xc0015194
c0015b41:	6a 0d                	push   0xd
c0015b43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b46:	ff d0                	call   eax
c0015b48:	83 c4 10             	add    esp,0x10
c0015b4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b50:	83 c0 24             	add    eax,0x24
c0015b53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b55:	6a 00                	push   0x0
c0015b57:	68 cd 51 01 c0       	push   0xc00151cd
c0015b5c:	6a 0e                	push   0xe
c0015b5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b61:	ff d0                	call   eax
c0015b63:	83 c4 10             	add    esp,0x10
c0015b66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6b:	83 c0 24             	add    eax,0x24
c0015b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b70:	6a 00                	push   0x0
c0015b72:	68 e4 51 01 c0       	push   0xc00151e4
c0015b77:	6a 0f                	push   0xf
c0015b79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7c:	ff d0                	call   eax
c0015b7e:	83 c4 10             	add    esp,0x10
c0015b81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b86:	83 c0 24             	add    eax,0x24
c0015b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8b:	6a 00                	push   0x0
c0015b8d:	68 e4 51 01 c0       	push   0xc00151e4
c0015b92:	6a 10                	push   0x10
c0015b94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b97:	ff d0                	call   eax
c0015b99:	83 c4 10             	add    esp,0x10
c0015b9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba1:	83 c0 24             	add    eax,0x24
c0015ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba6:	6a 00                	push   0x0
c0015ba8:	68 e4 51 01 c0       	push   0xc00151e4
c0015bad:	6a 11                	push   0x11
c0015baf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb2:	ff d0                	call   eax
c0015bb4:	83 c4 10             	add    esp,0x10
c0015bb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbc:	83 c0 24             	add    eax,0x24
c0015bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc1:	6a 00                	push   0x0
c0015bc3:	68 e4 51 01 c0       	push   0xc00151e4
c0015bc8:	6a 12                	push   0x12
c0015bca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcd:	ff d0                	call   eax
c0015bcf:	83 c4 10             	add    esp,0x10
c0015bd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd7:	83 c0 24             	add    eax,0x24
c0015bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdc:	6a 00                	push   0x0
c0015bde:	68 e4 51 01 c0       	push   0xc00151e4
c0015be3:	6a 13                	push   0x13
c0015be5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be8:	ff d0                	call   eax
c0015bea:	83 c4 10             	add    esp,0x10
c0015bed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf2:	83 c0 24             	add    eax,0x24
c0015bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf7:	6a 00                	push   0x0
c0015bf9:	68 e4 51 01 c0       	push   0xc00151e4
c0015bfe:	6a 14                	push   0x14
c0015c00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c03:	ff d0                	call   eax
c0015c05:	83 c4 10             	add    esp,0x10
c0015c08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0d:	83 c0 24             	add    eax,0x24
c0015c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c12:	6a 00                	push   0x0
c0015c14:	68 e4 51 01 c0       	push   0xc00151e4
c0015c19:	6a 1e                	push   0x1e
c0015c1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1e:	ff d0                	call   eax
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c28:	83 c0 24             	add    eax,0x24
c0015c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2d:	6a 00                	push   0x0
c0015c2f:	68 28 cd 01 c0       	push   0xc001cd28
c0015c34:	6a 60                	push   0x60
c0015c36:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c39:	ff d0                	call   eax
c0015c3b:	83 c4 10             	add    esp,0x10
c0015c3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c41:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c44:	c9                   	leave  
c0015c45:	c3                   	ret    

c0015c46 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c46:	55                   	push   ebp
c0015c47:	89 e5                	mov    ebp,esp
c0015c49:	83 ec 08             	sub    esp,0x8
c0015c4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4f:	83 ec 0c             	sub    esp,0xc
c0015c52:	50                   	push   eax
c0015c53:	e8 c8 e8 ff ff       	call   c0014520 <Device::getName()>
c0015c58:	83 c4 10             	add    esp,0x10
c0015c5b:	8a 00                	mov    al,BYTE PTR [eax]
c0015c5d:	3c 41                	cmp    al,0x41
c0015c5f:	0f 94 c0             	sete   al
c0015c62:	84 c0                	test   al,al
c0015c64:	74 28                	je     c0015c8e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c66:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015c6a:	7f 12                	jg     c0015c7e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015c6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c6f:	05 40 e6 02 c0       	add    eax,0xc002e640
c0015c74:	8a 00                	mov    al,BYTE PTR [eax]
c0015c76:	0f b6 c0             	movzx  eax,al
c0015c79:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015c7c:	eb 10                	jmp    c0015c8e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c7e:	83 ec 0c             	sub    esp,0xc
c0015c81:	68 38 bc 02 c0       	push   0xc002bc38
c0015c86:	e8 a4 4c 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0015c8b:	83 c4 10             	add    esp,0x10
c0015c8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c91:	c9                   	leave  
c0015c92:	c3                   	ret    
c0015c93:	90                   	nop

c0015c94 <startGUI(void*)>:
c0015c94:	55                   	push   ebp
c0015c95:	89 e5                	mov    ebp,esp
c0015c97:	53                   	push   ebx
c0015c98:	83 ec 04             	sub    esp,0x4
c0015c9b:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0015ca0:	48                   	dec    eax
c0015ca1:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0015ca6:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0015cab:	85 c0                	test   eax,eax
c0015cad:	75 01                	jne    c0015cb0 <startGUI(void*)+0x1c>
c0015caf:	fb                   	sti    
c0015cb0:	8b 1d e8 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3e8
c0015cb6:	83 ec 08             	sub    esp,0x8
c0015cb9:	6a 01                	push   0x1
c0015cbb:	68 ac bf 02 c0       	push   0xc002bfac
c0015cc0:	e8 3e 80 00 00       	call   c001dd03 <Thr::loadDLL(char const*, bool)>
c0015cc5:	83 c4 10             	add    esp,0x10
c0015cc8:	83 ec 08             	sub    esp,0x8
c0015ccb:	53                   	push   ebx
c0015ccc:	50                   	push   eax
c0015ccd:	e8 5c 82 00 00       	call   c001df2e <Thr::executeDLL(unsigned long, void*)>
c0015cd2:	83 c4 10             	add    esp,0x10
c0015cd5:	8b 1d e8 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3e8
c0015cdb:	83 ec 08             	sub    esp,0x8
c0015cde:	6a 01                	push   0x1
c0015ce0:	68 c6 bf 02 c0       	push   0xc002bfc6
c0015ce5:	e8 19 80 00 00       	call   c001dd03 <Thr::loadDLL(char const*, bool)>
c0015cea:	83 c4 10             	add    esp,0x10
c0015ced:	83 ec 08             	sub    esp,0x8
c0015cf0:	53                   	push   ebx
c0015cf1:	50                   	push   eax
c0015cf2:	e8 37 82 00 00       	call   c001df2e <Thr::executeDLL(unsigned long, void*)>
c0015cf7:	83 c4 10             	add    esp,0x10
c0015cfa:	90                   	nop
c0015cfb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cfe:	c9                   	leave  
c0015cff:	c3                   	ret    

c0015d00 <startGUIVESA(void*)>:
c0015d00:	55                   	push   ebp
c0015d01:	89 e5                	mov    ebp,esp
c0015d03:	53                   	push   ebx
c0015d04:	83 ec 04             	sub    esp,0x4
c0015d07:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0015d0c:	48                   	dec    eax
c0015d0d:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0015d12:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0015d17:	85 c0                	test   eax,eax
c0015d19:	75 01                	jne    c0015d1c <startGUIVESA(void*)+0x1c>
c0015d1b:	fb                   	sti    
c0015d1c:	8b 1d e8 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3e8
c0015d22:	83 ec 08             	sub    esp,0x8
c0015d25:	6a 01                	push   0x1
c0015d27:	68 e0 bf 02 c0       	push   0xc002bfe0
c0015d2c:	e8 d2 7f 00 00       	call   c001dd03 <Thr::loadDLL(char const*, bool)>
c0015d31:	83 c4 10             	add    esp,0x10
c0015d34:	83 ec 08             	sub    esp,0x8
c0015d37:	53                   	push   ebx
c0015d38:	50                   	push   eax
c0015d39:	e8 f0 81 00 00       	call   c001df2e <Thr::executeDLL(unsigned long, void*)>
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	8b 1d e8 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3e8
c0015d47:	83 ec 08             	sub    esp,0x8
c0015d4a:	6a 01                	push   0x1
c0015d4c:	68 c6 bf 02 c0       	push   0xc002bfc6
c0015d51:	e8 ad 7f 00 00       	call   c001dd03 <Thr::loadDLL(char const*, bool)>
c0015d56:	83 c4 10             	add    esp,0x10
c0015d59:	83 ec 08             	sub    esp,0x8
c0015d5c:	53                   	push   ebx
c0015d5d:	50                   	push   eax
c0015d5e:	e8 cb 81 00 00       	call   c001df2e <Thr::executeDLL(unsigned long, void*)>
c0015d63:	83 c4 10             	add    esp,0x10
c0015d66:	90                   	nop
c0015d67:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d6a:	c9                   	leave  
c0015d6b:	c3                   	ret    

c0015d6c <sendKeyToTerminal(unsigned char)>:
c0015d6c:	55                   	push   ebp
c0015d6d:	89 e5                	mov    ebp,esp
c0015d6f:	83 ec 28             	sub    esp,0x28
c0015d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d75:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015d78:	a1 c4 f4 02 c0       	mov    eax,ds:0xc002f4c4
c0015d7d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015d81:	83 ec 08             	sub    esp,0x8
c0015d84:	52                   	push   edx
c0015d85:	50                   	push   eax
c0015d86:	e8 25 b4 ff ff       	call   c00111b0 <VgaText::receiveKey(unsigned char)>
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015d92:	0f 85 8f 00 00 00    	jne    c0015e27 <sendKeyToTerminal(unsigned char)+0xbb>
c0015d98:	fa                   	cli    
c0015d99:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0015d9e:	40                   	inc    eax
c0015d9f:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0015da4:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c0015da9:	40                   	inc    eax
c0015daa:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c0015daf:	a1 a0 f5 02 c0       	mov    eax,ds:0xc002f5a0
c0015db4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015db7:	c7 05 a0 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5a0,0x0
c0015dc1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015dc5:	74 1f                	je     c0015de6 <sendKeyToTerminal(unsigned char)+0x7a>
c0015dc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015dcd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015dd0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015dd3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015dd6:	83 ec 0c             	sub    esp,0xc
c0015dd9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ddc:	e8 c5 8d 00 00       	call   c001eba6 <unblockTask(ThreadControlBlock*)>
c0015de1:	83 c4 10             	add    esp,0x10
c0015de4:	eb db                	jmp    c0015dc1 <sendKeyToTerminal(unsigned char)+0x55>
c0015de6:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c0015deb:	48                   	dec    eax
c0015dec:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c0015df1:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c0015df6:	85 c0                	test   eax,eax
c0015df8:	75 18                	jne    c0015e12 <sendKeyToTerminal(unsigned char)+0xa6>
c0015dfa:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c0015dff:	85 c0                	test   eax,eax
c0015e01:	74 0f                	je     c0015e12 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e03:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c0015e0d:	e8 d0 88 00 00       	call   c001e6e2 <schedule()>
c0015e12:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0015e17:	48                   	dec    eax
c0015e18:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0015e1d:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0015e22:	85 c0                	test   eax,eax
c0015e24:	75 01                	jne    c0015e27 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e26:	fb                   	sti    
c0015e27:	90                   	nop
c0015e28:	c9                   	leave  
c0015e29:	c3                   	ret    

c0015e2a <sendKeyboardToken(KeyboardToken)>:
c0015e2a:	55                   	push   ebp
c0015e2b:	89 e5                	mov    ebp,esp
c0015e2d:	83 ec 18             	sub    esp,0x18
c0015e30:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e36:	0f b7 c0             	movzx  eax,ax
c0015e39:	83 f2 01             	xor    edx,0x1
c0015e3c:	88 90 c0 f5 02 c0    	mov    BYTE PTR [eax-0x3ffd0a40],dl
c0015e42:	a1 a8 f5 02 c0       	mov    eax,ds:0xc002f5a8
c0015e47:	85 c0                	test   eax,eax
c0015e49:	74 24                	je     c0015e6f <sendKeyboardToken(KeyboardToken)+0x45>
c0015e4b:	8b 0d a8 f5 02 c0    	mov    ecx,DWORD PTR ds:0xc002f5a8
c0015e51:	83 ec 04             	sub    esp,0x4
c0015e54:	68 c0 f5 02 c0       	push   0xc002f5c0
c0015e59:	83 ec 08             	sub    esp,0x8
c0015e5c:	89 e2                	mov    edx,esp
c0015e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e61:	89 02                	mov    DWORD PTR [edx],eax
c0015e63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e66:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e6a:	ff d1                	call   ecx
c0015e6c:	83 c4 10             	add    esp,0x10
c0015e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e72:	66 3d 03 02          	cmp    ax,0x203
c0015e76:	75 07                	jne    c0015e7f <sendKeyboardToken(KeyboardToken)+0x55>
c0015e78:	a0 c0 f6 02 c0       	mov    al,ds:0xc002f6c0
c0015e7d:	84 c0                	test   al,al
c0015e7f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015e83:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015e86:	a0 c8 f9 02 c0       	mov    al,ds:0xc002f9c8
c0015e8b:	38 c2                	cmp    dl,al
c0015e8d:	74 1c                	je     c0015eab <sendKeyboardToken(KeyboardToken)+0x81>
c0015e8f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015e92:	a2 c8 f9 02 c0       	mov    ds:0xc002f9c8,al
c0015e97:	a0 c8 f9 02 c0       	mov    al,ds:0xc002f9c8
c0015e9c:	0f b6 c0             	movzx  eax,al
c0015e9f:	83 ec 0c             	sub    esp,0xc
c0015ea2:	50                   	push   eax
c0015ea3:	e8 90 a6 ff ff       	call   c0010538 <setTerminalScrollLock(bool)>
c0015ea8:	83 c4 10             	add    esp,0x10
c0015eab:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015eae:	84 c0                	test   al,al
c0015eb0:	0f 84 ae 00 00 00    	je     c0015f64 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb9:	66 3d 10 03          	cmp    ax,0x310
c0015ebd:	75 06                	jne    c0015ec5 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015ebf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015ec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec8:	66 3d 11 03          	cmp    ax,0x311
c0015ecc:	75 06                	jne    c0015ed4 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015ece:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed7:	66 3d 12 03          	cmp    ax,0x312
c0015edb:	75 06                	jne    c0015ee3 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015edd:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee6:	66 3d 13 03          	cmp    ax,0x313
c0015eea:	75 06                	jne    c0015ef2 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015eec:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef5:	66 3d 14 03          	cmp    ax,0x314
c0015ef9:	75 06                	jne    c0015f01 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015efb:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f04:	66 3d 15 03          	cmp    ax,0x315
c0015f08:	75 06                	jne    c0015f10 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f0a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f13:	66 3d 16 03          	cmp    ax,0x316
c0015f17:	75 06                	jne    c0015f1f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f19:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f22:	66 3d 17 03          	cmp    ax,0x317
c0015f26:	75 06                	jne    c0015f2e <sendKeyboardToken(KeyboardToken)+0x104>
c0015f28:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f31:	66 3d 18 03          	cmp    ax,0x318
c0015f35:	75 06                	jne    c0015f3d <sendKeyboardToken(KeyboardToken)+0x113>
c0015f37:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f40:	66 3d 19 03          	cmp    ax,0x319
c0015f44:	75 06                	jne    c0015f4c <sendKeyboardToken(KeyboardToken)+0x122>
c0015f46:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4f:	66 3d 1a 03          	cmp    ax,0x31a
c0015f53:	0f 85 c9 00 00 00    	jne    c0016022 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f59:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f5f:	e9 be 00 00 00       	jmp    c0016022 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f67:	66 3d 10 03          	cmp    ax,0x310
c0015f6b:	75 0a                	jne    c0015f77 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015f6d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015f73:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7a:	66 3d 11 03          	cmp    ax,0x311
c0015f7e:	75 0a                	jne    c0015f8a <sendKeyboardToken(KeyboardToken)+0x160>
c0015f80:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015f86:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8d:	66 3d 12 03          	cmp    ax,0x312
c0015f91:	75 0a                	jne    c0015f9d <sendKeyboardToken(KeyboardToken)+0x173>
c0015f93:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015f99:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa0:	66 3d 13 03          	cmp    ax,0x313
c0015fa4:	75 0a                	jne    c0015fb0 <sendKeyboardToken(KeyboardToken)+0x186>
c0015fa6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015fac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb3:	66 3d 14 03          	cmp    ax,0x314
c0015fb7:	75 0a                	jne    c0015fc3 <sendKeyboardToken(KeyboardToken)+0x199>
c0015fb9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015fbf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc6:	66 3d 15 03          	cmp    ax,0x315
c0015fca:	75 0a                	jne    c0015fd6 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015fcc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fd2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd9:	66 3d 16 03          	cmp    ax,0x316
c0015fdd:	75 0a                	jne    c0015fe9 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015fdf:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015fe5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fec:	66 3d 17 03          	cmp    ax,0x317
c0015ff0:	75 0a                	jne    c0015ffc <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015ff2:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015ff8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fff:	66 3d 18 03          	cmp    ax,0x318
c0016003:	75 0a                	jne    c001600f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016005:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001600b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001600f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016012:	66 3d 19 03          	cmp    ax,0x319
c0016016:	75 0a                	jne    c0016022 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016018:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001601e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016025:	66 3d 00 02          	cmp    ax,0x200
c0016029:	75 2c                	jne    c0016057 <sendKeyboardToken(KeyboardToken)+0x22d>
c001602b:	a0 c0 f9 02 c0       	mov    al,ds:0xc002f9c0
c0016030:	83 f0 01             	xor    eax,0x1
c0016033:	84 c0                	test   al,al
c0016035:	74 20                	je     c0016057 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016037:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001603c:	6a 01                	push   0x1
c001603e:	6a 00                	push   0x0
c0016040:	68 94 5c 01 c0       	push   0xc0015c94
c0016045:	50                   	push   eax
c0016046:	e8 53 84 00 00       	call   c001e49e <Process::createThread(void (*)(void*), void*, int)>
c001604b:	83 c4 10             	add    esp,0x10
c001604e:	c6 05 c0 f9 02 c0 01 	mov    BYTE PTR ds:0xc002f9c0,0x1
c0016055:	eb 33                	jmp    c001608a <sendKeyboardToken(KeyboardToken)+0x260>
c0016057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605a:	66 3d 01 02          	cmp    ax,0x201
c001605e:	75 2a                	jne    c001608a <sendKeyboardToken(KeyboardToken)+0x260>
c0016060:	a0 c0 f9 02 c0       	mov    al,ds:0xc002f9c0
c0016065:	83 f0 01             	xor    eax,0x1
c0016068:	84 c0                	test   al,al
c001606a:	74 1e                	je     c001608a <sendKeyboardToken(KeyboardToken)+0x260>
c001606c:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0016071:	6a 01                	push   0x1
c0016073:	6a 00                	push   0x0
c0016075:	68 00 5d 01 c0       	push   0xc0015d00
c001607a:	50                   	push   eax
c001607b:	e8 1e 84 00 00       	call   c001e49e <Process::createThread(void (*)(void*), void*, int)>
c0016080:	83 c4 10             	add    esp,0x10
c0016083:	c6 05 c0 f9 02 c0 01 	mov    BYTE PTR ds:0xc002f9c0,0x1
c001608a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608d:	66 3d 1d 03          	cmp    ax,0x31d
c0016091:	75 06                	jne    c0016099 <sendKeyboardToken(KeyboardToken)+0x26f>
c0016093:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609c:	66 3d 1c 03          	cmp    ax,0x31c
c00160a0:	75 06                	jne    c00160a8 <sendKeyboardToken(KeyboardToken)+0x27e>
c00160a2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ab:	66 3d 1b 03          	cmp    ax,0x31b
c00160af:	75 06                	jne    c00160b7 <sendKeyboardToken(KeyboardToken)+0x28d>
c00160b1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00160b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ba:	66 3d 1e 03          	cmp    ax,0x31e
c00160be:	75 06                	jne    c00160c6 <sendKeyboardToken(KeyboardToken)+0x29c>
c00160c0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00160c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c9:	66 3d 1f 03          	cmp    ax,0x31f
c00160cd:	75 06                	jne    c00160d5 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00160cf:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00160d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d8:	66 3d 1a 03          	cmp    ax,0x31a
c00160dc:	75 06                	jne    c00160e4 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00160de:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00160e4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00160e8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160eb:	83 f0 01             	xor    eax,0x1
c00160ee:	84 c0                	test   al,al
c00160f0:	74 77                	je     c0016169 <sendKeyboardToken(KeyboardToken)+0x33f>
c00160f2:	a0 c1 f6 02 c0       	mov    al,ds:0xc002f6c1
c00160f7:	84 c0                	test   al,al
c00160f9:	74 41                	je     c001613c <sendKeyboardToken(KeyboardToken)+0x312>
c00160fb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160ff:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016103:	74 2b                	je     c0016130 <sendKeyboardToken(KeyboardToken)+0x306>
c0016105:	8b 15 c4 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f9c4
c001610b:	89 d0                	mov    eax,edx
c001610d:	c1 e0 02             	shl    eax,0x2
c0016110:	01 d0                	add    eax,edx
c0016112:	01 c0                	add    eax,eax
c0016114:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c0016119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611c:	0f b7 c0             	movzx  eax,ax
c001611f:	8d 50 d0             	lea    edx,[eax-0x30]
c0016122:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c0016127:	01 d0                	add    eax,edx
c0016129:	a3 c4 f9 02 c0       	mov    ds:0xc002f9c4,eax
c001612e:	eb 6d                	jmp    c001619d <sendKeyboardToken(KeyboardToken)+0x373>
c0016130:	c7 05 c4 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c4,0x0
c001613a:	eb 61                	jmp    c001619d <sendKeyboardToken(KeyboardToken)+0x373>
c001613c:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c0016141:	85 c0                	test   eax,eax
c0016143:	74 18                	je     c001615d <sendKeyboardToken(KeyboardToken)+0x333>
c0016145:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c001614a:	0f b6 c0             	movzx  eax,al
c001614d:	83 ec 0c             	sub    esp,0xc
c0016150:	50                   	push   eax
c0016151:	e8 16 fc ff ff       	call   c0015d6c <sendKeyToTerminal(unsigned char)>
c0016156:	83 c4 10             	add    esp,0x10
c0016159:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001615d:	c7 05 c4 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c4,0x0
c0016167:	eb 34                	jmp    c001619d <sendKeyboardToken(KeyboardToken)+0x373>
c0016169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616c:	66 3d 01 01          	cmp    ax,0x101
c0016170:	75 2b                	jne    c001619d <sendKeyboardToken(KeyboardToken)+0x373>
c0016172:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c0016177:	85 c0                	test   eax,eax
c0016179:	74 18                	je     c0016193 <sendKeyboardToken(KeyboardToken)+0x369>
c001617b:	a1 c4 f9 02 c0       	mov    eax,ds:0xc002f9c4
c0016180:	0f b6 c0             	movzx  eax,al
c0016183:	83 ec 0c             	sub    esp,0xc
c0016186:	50                   	push   eax
c0016187:	e8 e0 fb ff ff       	call   c0015d6c <sendKeyToTerminal(unsigned char)>
c001618c:	83 c4 10             	add    esp,0x10
c001618f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016193:	c7 05 c4 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f9c4,0x0
c001619d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161a0:	83 f0 01             	xor    eax,0x1
c00161a3:	84 c0                	test   al,al
c00161a5:	74 4c                	je     c00161f3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161a7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161aa:	83 f0 01             	xor    eax,0x1
c00161ad:	84 c0                	test   al,al
c00161af:	74 42                	je     c00161f3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161b1:	a0 c0 f6 02 c0       	mov    al,ds:0xc002f6c0
c00161b6:	83 f0 01             	xor    eax,0x1
c00161b9:	84 c0                	test   al,al
c00161bb:	74 36                	je     c00161f3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c0:	66 83 f8 1f          	cmp    ax,0x1f
c00161c4:	76 09                	jbe    c00161cf <sendKeyboardToken(KeyboardToken)+0x3a5>
c00161c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c9:	66 83 f8 7e          	cmp    ax,0x7e
c00161cd:	76 12                	jbe    c00161e1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d2:	66 83 f8 0a          	cmp    ax,0xa
c00161d6:	74 09                	je     c00161e1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161db:	66 83 f8 08          	cmp    ax,0x8
c00161df:	75 12                	jne    c00161f3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e4:	0f b6 c0             	movzx  eax,al
c00161e7:	83 ec 0c             	sub    esp,0xc
c00161ea:	50                   	push   eax
c00161eb:	e8 7c fb ff ff       	call   c0015d6c <sendKeyToTerminal(unsigned char)>
c00161f0:	83 c4 10             	add    esp,0x10
c00161f3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161f6:	83 f0 01             	xor    eax,0x1
c00161f9:	84 c0                	test   al,al
c00161fb:	74 4f                	je     c001624c <sendKeyboardToken(KeyboardToken)+0x422>
c00161fd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016200:	83 f0 01             	xor    eax,0x1
c0016203:	84 c0                	test   al,al
c0016205:	74 45                	je     c001624c <sendKeyboardToken(KeyboardToken)+0x422>
c0016207:	a0 c0 f6 02 c0       	mov    al,ds:0xc002f6c0
c001620c:	84 c0                	test   al,al
c001620e:	74 3c                	je     c001624c <sendKeyboardToken(KeyboardToken)+0x422>
c0016210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016213:	66 83 f8 3f          	cmp    ax,0x3f
c0016217:	76 33                	jbe    c001624c <sendKeyboardToken(KeyboardToken)+0x422>
c0016219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621c:	66 83 f8 7f          	cmp    ax,0x7f
c0016220:	77 2a                	ja     c001624c <sendKeyboardToken(KeyboardToken)+0x422>
c0016222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016225:	88 c2                	mov    dl,al
c0016227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622a:	66 83 f8 5f          	cmp    ax,0x5f
c001622e:	76 04                	jbe    c0016234 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016230:	b0 20                	mov    al,0x20
c0016232:	eb 02                	jmp    c0016236 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016234:	b0 00                	mov    al,0x0
c0016236:	29 c2                	sub    edx,eax
c0016238:	88 d0                	mov    al,dl
c001623a:	83 e8 40             	sub    eax,0x40
c001623d:	0f b6 c0             	movzx  eax,al
c0016240:	83 ec 0c             	sub    esp,0xc
c0016243:	50                   	push   eax
c0016244:	e8 23 fb ff ff       	call   c0015d6c <sendKeyToTerminal(unsigned char)>
c0016249:	83 c4 10             	add    esp,0x10
c001624c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624f:	66 3d 00 03          	cmp    ax,0x300
c0016253:	75 0f                	jne    c0016264 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016255:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016258:	83 f0 01             	xor    eax,0x1
c001625b:	84 c0                	test   al,al
c001625d:	74 05                	je     c0016264 <sendKeyboardToken(KeyboardToken)+0x43a>
c001625f:	e8 4c aa ff ff       	call   c0010cb0 <doTerminalCycle()>
c0016264:	90                   	nop
c0016265:	c9                   	leave  
c0016266:	c3                   	ret    

c0016267 <clearInternalKeybuffer(VgaText*)>:
c0016267:	55                   	push   ebp
c0016268:	89 e5                	mov    ebp,esp
c001626a:	83 ec 08             	sub    esp,0x8
c001626d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016270:	05 98 01 00 00       	add    eax,0x198
c0016275:	83 ec 0c             	sub    esp,0xc
c0016278:	50                   	push   eax
c0016279:	e8 ee a4 fe ff       	call   c000076c <strlen>
c001627e:	83 c4 10             	add    esp,0x10
c0016281:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016284:	81 c2 98 01 00 00    	add    edx,0x198
c001628a:	83 ec 04             	sub    esp,0x4
c001628d:	50                   	push   eax
c001628e:	6a 00                	push   0x0
c0016290:	52                   	push   edx
c0016291:	e8 ba a4 fe ff       	call   c0000750 <memset>
c0016296:	83 c4 10             	add    esp,0x10
c0016299:	90                   	nop
c001629a:	c9                   	leave  
c001629b:	c3                   	ret    

c001629c <readKeyboard(VgaText*, char*, unsigned long)>:
c001629c:	55                   	push   ebp
c001629d:	89 e5                	mov    ebp,esp
c001629f:	83 ec 18             	sub    esp,0x18
c00162a2:	a1 a8 f5 02 c0       	mov    eax,ds:0xc002f5a8
c00162a7:	85 c0                	test   eax,eax
c00162a9:	74 2a                	je     c00162d5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00162ab:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00162b1:	8b 0d a8 f5 02 c0    	mov    ecx,DWORD PTR ds:0xc002f5a8
c00162b7:	83 ec 04             	sub    esp,0x4
c00162ba:	68 c0 f5 02 c0       	push   0xc002f5c0
c00162bf:	83 ec 08             	sub    esp,0x8
c00162c2:	89 e2                	mov    edx,esp
c00162c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00162c7:	89 02                	mov    DWORD PTR [edx],eax
c00162c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00162cc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00162d0:	ff d1                	call   ecx
c00162d2:	83 c4 10             	add    esp,0x10
c00162d5:	83 ec 0c             	sub    esp,0xc
c00162d8:	68 fb bf 02 c0       	push   0xc002bffb
c00162dd:	e8 05 cb ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00162e2:	83 c4 10             	add    esp,0x10
c00162e5:	fb                   	sti    
c00162e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00162ed:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00162f1:	0f 84 a1 00 00 00    	je     c0016398 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c00162f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fa:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016300:	84 c0                	test   al,al
c0016302:	75 28                	jne    c001632c <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0016304:	fa                   	cli    
c0016305:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001630a:	40                   	inc    eax
c001630b:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0016310:	e8 cd 83 00 00       	call   c001e6e2 <schedule()>
c0016315:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001631a:	48                   	dec    eax
c001631b:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0016320:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0016325:	85 c0                	test   eax,eax
c0016327:	75 ce                	jne    c00162f7 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016329:	fb                   	sti    
c001632a:	eb cb                	jmp    c00162f7 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001632c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001632f:	8d 50 01             	lea    edx,[eax+0x1]
c0016332:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016335:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016338:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c001633e:	88 10                	mov    BYTE PTR [eax],dl
c0016340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016343:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016349:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001634c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001634f:	05 98 01 00 00       	add    eax,0x198
c0016354:	83 ec 0c             	sub    esp,0xc
c0016357:	50                   	push   eax
c0016358:	e8 0f a4 fe ff       	call   c000076c <strlen>
c001635d:	83 c4 10             	add    esp,0x10
c0016360:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016363:	81 c2 98 01 00 00    	add    edx,0x198
c0016369:	8d 4a 01             	lea    ecx,[edx+0x1]
c001636c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001636f:	81 c2 98 01 00 00    	add    edx,0x198
c0016375:	83 ec 04             	sub    esp,0x4
c0016378:	50                   	push   eax
c0016379:	51                   	push   ecx
c001637a:	52                   	push   edx
c001637b:	e8 08 a3 fe ff       	call   c0000688 <memmove>
c0016380:	83 c4 10             	add    esp,0x10
c0016383:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016386:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016389:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001638d:	0f 85 5a ff ff ff    	jne    c00162ed <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0016393:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016396:	eb 03                	jmp    c001639b <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0016398:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001639b:	c9                   	leave  
c001639c:	c3                   	ret    
c001639d:	90                   	nop

c001639e <Keyboard::Keyboard(char const*)>:
c001639e:	83 ec 0c             	sub    esp,0xc
c00163a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a5:	83 ec 08             	sub    esp,0x8
c00163a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ac:	50                   	push   eax
c00163ad:	e8 72 e0 ff ff       	call   c0014424 <Device::Device(char const*)>
c00163b2:	83 c4 10             	add    esp,0x10
c00163b5:	ba 1c c0 02 c0       	mov    edx,0xc002c01c
c00163ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163be:	89 10                	mov    DWORD PTR [eax],edx
c00163c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163ce:	c6 05 a4 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f5a4,0x1
c00163d5:	90                   	nop
c00163d6:	83 c4 0c             	add    esp,0xc
c00163d9:	c3                   	ret    

c00163da <Keyboard::~Keyboard()>:
c00163da:	83 ec 0c             	sub    esp,0xc
c00163dd:	ba 1c c0 02 c0       	mov    edx,0xc002c01c
c00163e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e6:	89 10                	mov    DWORD PTR [eax],edx
c00163e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ec:	83 ec 0c             	sub    esp,0xc
c00163ef:	50                   	push   eax
c00163f0:	e8 f9 dc ff ff       	call   c00140ee <Device::~Device()>
c00163f5:	83 c4 10             	add    esp,0x10
c00163f8:	90                   	nop
c00163f9:	83 c4 0c             	add    esp,0xc
c00163fc:	c3                   	ret    
c00163fd:	90                   	nop

c00163fe <Keyboard::~Keyboard()>:
c00163fe:	83 ec 0c             	sub    esp,0xc
c0016401:	83 ec 0c             	sub    esp,0xc
c0016404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016408:	e8 cd ff ff ff       	call   c00163da <Keyboard::~Keyboard()>
c001640d:	83 c4 10             	add    esp,0x10
c0016410:	83 ec 08             	sub    esp,0x8
c0016413:	68 5c 01 00 00       	push   0x15c
c0016418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001641c:	e8 e6 c8 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0016421:	83 c4 10             	add    esp,0x10
c0016424:	83 c4 0c             	add    esp,0xc
c0016427:	c3                   	ret    

c0016428 <LogicalDisk::close(int, int, void*)>:
c0016428:	83 c8 ff             	or     eax,0xffffffff
c001642b:	c3                   	ret    

c001642c <LogicalDisk::~LogicalDisk()>:
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	ba cc c0 02 c0       	mov    edx,0xc002c0cc
c0016434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016438:	89 10                	mov    DWORD PTR [eax],edx
c001643a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643e:	83 ec 0c             	sub    esp,0xc
c0016441:	50                   	push   eax
c0016442:	e8 a7 dc ff ff       	call   c00140ee <Device::~Device()>
c0016447:	83 c4 10             	add    esp,0x10
c001644a:	90                   	nop
c001644b:	83 c4 0c             	add    esp,0xc
c001644e:	c3                   	ret    
c001644f:	90                   	nop

c0016450 <LogicalDisk::~LogicalDisk()>:
c0016450:	83 ec 0c             	sub    esp,0xc
c0016453:	83 ec 0c             	sub    esp,0xc
c0016456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001645a:	e8 cd ff ff ff       	call   c001642c <LogicalDisk::~LogicalDisk()>
c001645f:	83 c4 10             	add    esp,0x10
c0016462:	83 ec 08             	sub    esp,0x8
c0016465:	68 74 01 00 00       	push   0x174
c001646a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001646e:	e8 94 c8 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	83 c4 0c             	add    esp,0xc
c0016479:	c3                   	ret    

c001647a <LogicalDisk::open(int, int, void*)>:
c001647a:	83 ec 18             	sub    esp,0x18
c001647d:	68 48 c0 02 c0       	push   0xc002c048
c0016482:	e8 a8 44 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0016487:	83 c8 ff             	or     eax,0xffffffff
c001648a:	83 c4 1c             	add    esp,0x1c
c001648d:	c3                   	ret    

c001648e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001648e:	53                   	push   ebx
c001648f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016493:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016497:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001649b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164a1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164a7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164ad:	77 10                	ja     c00164bf <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164af:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164b5:	89 d3                	mov    ebx,edx
c00164b7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164bd:	72 05                	jb     c00164c4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164bf:	83 c8 ff             	or     eax,0xffffffff
c00164c2:	89 c2                	mov    edx,eax
c00164c4:	5b                   	pop    ebx
c00164c5:	c3                   	ret    

c00164c6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164c6:	56                   	push   esi
c00164c7:	83 c8 ff             	or     eax,0xffffffff
c00164ca:	53                   	push   ebx
c00164cb:	89 c2                	mov    edx,eax
c00164cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164d1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164d9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164df:	77 27                	ja     c0016508 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164e1:	89 d8                	mov    eax,ebx
c00164e3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164e9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164f4:	89 c2                	mov    edx,eax
c00164f6:	73 10                	jae    c0016508 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164f8:	89 c8                	mov    eax,ecx
c00164fa:	89 da                	mov    edx,ebx
c00164fc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016502:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016508:	5b                   	pop    ebx
c0016509:	5e                   	pop    esi
c001650a:	c3                   	ret    
c001650b:	90                   	nop

c001650c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001650c:	83 ec 1c             	sub    esp,0x1c
c001650f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016513:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016517:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001651b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001651f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016523:	89 04 24             	mov    DWORD PTR [esp],eax
c0016526:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001652a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001652e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016532:	83 ec 08             	sub    esp,0x8
c0016535:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016539:	50                   	push   eax
c001653a:	e8 e5 de ff ff       	call   c0014424 <Device::Device(char const*)>
c001653f:	83 c4 10             	add    esp,0x10
c0016542:	ba cc c0 02 c0       	mov    edx,0xc002c0cc
c0016547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001654b:	89 10                	mov    DWORD PTR [eax],edx
c001654d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016551:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001655c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016567:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016571:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016575:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016579:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001657d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016583:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016589:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001658d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016590:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016594:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001659a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165a8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165bc:	90                   	nop
c00165bd:	83 c4 1c             	add    esp,0x1c
c00165c0:	c3                   	ret    
c00165c1:	90                   	nop

c00165c2 <LogicalDisk::assignDriveLetter()>:
c00165c2:	55                   	push   ebp
c00165c3:	57                   	push   edi
c00165c4:	56                   	push   esi
c00165c5:	53                   	push   ebx
c00165c6:	83 ec 14             	sub    esp,0x14
c00165c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165cd:	8b 3d e0 f9 02 c0    	mov    edi,DWORD PTR ds:0xc002f9e0
c00165d3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165d9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165dd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165e3:	8b 3d e4 f9 02 c0    	mov    edi,DWORD PTR ds:0xc002f9e4
c00165e9:	3c 01                	cmp    al,0x1
c00165eb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165f3:	19 c0                	sbb    eax,eax
c00165f5:	83 e0 02             	and    eax,0x2
c00165f8:	83 c0 41             	add    eax,0x41
c00165fb:	0f be e8             	movsx  ebp,al
c00165fe:	3c 43                	cmp    al,0x43
c0016600:	75 10                	jne    c0016612 <LogicalDisk::assignDriveLetter()+0x50>
c0016602:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016609:	75 5d                	jne    c0016668 <LogicalDisk::assignDriveLetter()+0xa6>
c001660b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016610:	75 56                	jne    c0016668 <LogicalDisk::assignDriveLetter()+0xa6>
c0016612:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016615:	ba 01 00 00 00       	mov    edx,0x1
c001661a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001661e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016622:	d3 e2                	shl    edx,cl
c0016624:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016628:	89 d7                	mov    edi,edx
c001662a:	89 d6                	mov    esi,edx
c001662c:	c1 ff 1f             	sar    edi,0x1f
c001662f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016633:	21 f9                	and    ecx,edi
c0016635:	09 d1                	or     ecx,edx
c0016637:	75 2f                	jne    c0016668 <LogicalDisk::assignDriveLetter()+0xa6>
c0016639:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001663d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016641:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016647:	09 f2                	or     edx,esi
c0016649:	89 15 e0 f9 02 c0    	mov    DWORD PTR ds:0xc002f9e0,edx
c001664f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016653:	09 fa                	or     edx,edi
c0016655:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016659:	89 15 e4 f9 02 c0    	mov    DWORD PTR ds:0xc002f9e4,edx
c001665f:	89 1c bd 00 fa 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0600],ebx
c0016666:	eb 08                	jmp    c0016670 <LogicalDisk::assignDriveLetter()+0xae>
c0016668:	45                   	inc    ebp
c0016669:	40                   	inc    eax
c001666a:	3c 5b                	cmp    al,0x5b
c001666c:	75 90                	jne    c00165fe <LogicalDisk::assignDriveLetter()+0x3c>
c001666e:	31 c0                	xor    eax,eax
c0016670:	83 c4 14             	add    esp,0x14
c0016673:	5b                   	pop    ebx
c0016674:	5e                   	pop    esi
c0016675:	5f                   	pop    edi
c0016676:	5d                   	pop    ebp
c0016677:	c3                   	ret    

c0016678 <LogicalDisk::mount()>:
c0016678:	56                   	push   esi
c0016679:	53                   	push   ebx
c001667a:	50                   	push   eax
c001667b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001667f:	8b 1d 74 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f574
c0016685:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001668f:	85 db                	test   ebx,ebx
c0016691:	74 50                	je     c00166e3 <LogicalDisk::mount()+0x6b>
c0016693:	50                   	push   eax
c0016694:	50                   	push   eax
c0016695:	ff 35 28 29 03 c0    	push   DWORD PTR ds:0xc0032928
c001669b:	68 6c c0 02 c0       	push   0xc002c06c
c00166a0:	e8 42 c7 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00166a5:	83 c4 0c             	add    esp,0xc
c00166a8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166af:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166b1:	83 e8 41             	sub    eax,0x41
c00166b4:	50                   	push   eax
c00166b5:	56                   	push   esi
c00166b6:	53                   	push   ebx
c00166b7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166ba:	83 c4 10             	add    esp,0x10
c00166bd:	84 c0                	test   al,al
c00166bf:	74 08                	je     c00166c9 <LogicalDisk::mount()+0x51>
c00166c1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166c7:	eb 1c                	jmp    c00166e5 <LogicalDisk::mount()+0x6d>
c00166c9:	51                   	push   ecx
c00166ca:	51                   	push   ecx
c00166cb:	ff 35 28 29 03 c0    	push   DWORD PTR ds:0xc0032928
c00166d1:	68 87 c0 02 c0       	push   0xc002c087
c00166d6:	e8 0c c7 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00166db:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166de:	83 c4 10             	add    esp,0x10
c00166e1:	eb ac                	jmp    c001668f <LogicalDisk::mount()+0x17>
c00166e3:	31 c0                	xor    eax,eax
c00166e5:	5a                   	pop    edx
c00166e6:	5b                   	pop    ebx
c00166e7:	5e                   	pop    esi
c00166e8:	c3                   	ret    
c00166e9:	90                   	nop

c00166ea <LogicalDisk::unmount()>:
c00166ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166ee:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166f8:	c3                   	ret    
c00166f9:	90                   	nop

c00166fa <LogicalDisk::eject()>:
c00166fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166fe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016704:	8b 10                	mov    edx,DWORD PTR [eax]
c0016706:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001670a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001670d:	90                   	nop

c001670e <LogicalDisk::unassignDriveLetter()>:
c001670e:	57                   	push   edi
c001670f:	56                   	push   esi
c0016710:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016714:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001671b:	84 c9                	test   cl,cl
c001671d:	75 0f                	jne    c001672e <LogicalDisk::unassignDriveLetter()+0x20>
c001671f:	c7 44 24 0c a2 c0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002c0a2
c0016727:	5e                   	pop    esi
c0016728:	5f                   	pop    edi
c0016729:	e9 01 42 00 00       	jmp    c001a92f <Krnl::panic(char const*)>
c001672e:	83 e9 41             	sub    ecx,0x41
c0016731:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016738:	b8 01 00 00 00       	mov    eax,0x1
c001673d:	c7 04 8d 00 fa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0600],0x0
c0016748:	d3 e0                	shl    eax,cl
c001674a:	89 c7                	mov    edi,eax
c001674c:	f7 d0                	not    eax
c001674e:	c1 ff 1f             	sar    edi,0x1f
c0016751:	21 05 e0 f9 02 c0    	and    DWORD PTR ds:0xc002f9e0,eax
c0016757:	89 fe                	mov    esi,edi
c0016759:	f7 d6                	not    esi
c001675b:	21 35 e4 f9 02 c0    	and    DWORD PTR ds:0xc002f9e4,esi
c0016761:	5e                   	pop    esi
c0016762:	5f                   	pop    edi
c0016763:	c3                   	ret    

c0016764 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016764:	57                   	push   edi
c0016765:	56                   	push   esi
c0016766:	53                   	push   ebx
c0016767:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001676b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001676f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016773:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016777:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001677d:	77 41                	ja     c00167c0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001677f:	99                   	cdq    
c0016780:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016786:	01 c8                	add    eax,ecx
c0016788:	11 da                	adc    edx,ebx
c001678a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016790:	19 d7                	sbb    edi,edx
c0016792:	72 33                	jb     c00167c7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016794:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001679a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167a4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167a8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167b8:	5b                   	pop    ebx
c00167b9:	5e                   	pop    esi
c00167ba:	5f                   	pop    edi
c00167bb:	e9 ec 0a 00 00       	jmp    c00172ac <VCache::read(unsigned long long, int, void*)>
c00167c0:	b8 05 00 00 00       	mov    eax,0x5
c00167c5:	eb 05                	jmp    c00167cc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167c7:	b8 07 00 00 00       	mov    eax,0x7
c00167cc:	5b                   	pop    ebx
c00167cd:	5e                   	pop    esi
c00167ce:	5f                   	pop    edi
c00167cf:	c3                   	ret    

c00167d0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00167d0:	57                   	push   edi
c00167d1:	56                   	push   esi
c00167d2:	53                   	push   ebx
c00167d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167e9:	77 41                	ja     c001682c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167eb:	99                   	cdq    
c00167ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167f2:	01 c8                	add    eax,ecx
c00167f4:	11 da                	adc    edx,ebx
c00167f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167fc:	19 d7                	sbb    edi,edx
c00167fe:	72 33                	jb     c0016833 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016800:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016806:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001680c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016810:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016814:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001681a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016820:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016824:	5b                   	pop    ebx
c0016825:	5e                   	pop    esi
c0016826:	5f                   	pop    edi
c0016827:	e9 96 09 00 00       	jmp    c00171c2 <VCache::write(unsigned long long, int, void*)>
c001682c:	b8 05 00 00 00       	mov    eax,0x5
c0016831:	eb 05                	jmp    c0016838 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016833:	b8 07 00 00 00       	mov    eax,0x7
c0016838:	5b                   	pop    ebx
c0016839:	5e                   	pop    esi
c001683a:	5f                   	pop    edi
c001683b:	c3                   	ret    

c001683c <Mouse::Mouse(char const*)>:
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016843:	83 ec 08             	sub    esp,0x8
c0016846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001684a:	50                   	push   eax
c001684b:	e8 d4 db ff ff       	call   c0014424 <Device::Device(char const*)>
c0016850:	83 c4 10             	add    esp,0x10
c0016853:	ba f8 c0 02 c0       	mov    edx,0xc002c0f8
c0016858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001685c:	89 10                	mov    DWORD PTR [eax],edx
c001685e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016862:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001686c:	90                   	nop
c001686d:	83 c4 0c             	add    esp,0xc
c0016870:	c3                   	ret    
c0016871:	90                   	nop

c0016872 <Mouse::~Mouse()>:
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	ba f8 c0 02 c0       	mov    edx,0xc002c0f8
c001687a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001687e:	89 10                	mov    DWORD PTR [eax],edx
c0016880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016884:	83 ec 0c             	sub    esp,0xc
c0016887:	50                   	push   eax
c0016888:	e8 61 d8 ff ff       	call   c00140ee <Device::~Device()>
c001688d:	83 c4 10             	add    esp,0x10
c0016890:	90                   	nop
c0016891:	83 c4 0c             	add    esp,0xc
c0016894:	c3                   	ret    
c0016895:	90                   	nop

c0016896 <Mouse::~Mouse()>:
c0016896:	83 ec 0c             	sub    esp,0xc
c0016899:	83 ec 0c             	sub    esp,0xc
c001689c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a0:	e8 cd ff ff ff       	call   c0016872 <Mouse::~Mouse()>
c00168a5:	83 c4 10             	add    esp,0x10
c00168a8:	83 ec 08             	sub    esp,0x8
c00168ab:	68 58 01 00 00       	push   0x158
c00168b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168b4:	e8 4e c4 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c00168b9:	83 c4 10             	add    esp,0x10
c00168bc:	83 c4 0c             	add    esp,0xc
c00168bf:	c3                   	ret    

c00168c0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168c0:	55                   	push   ebp
c00168c1:	57                   	push   edi
c00168c2:	56                   	push   esi
c00168c3:	53                   	push   ebx
c00168c4:	81 ec 20 01 00 00    	sub    esp,0x120
c00168ca:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00168d1:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00168d8:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168df:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00168ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00168f2:	56                   	push   esi
c00168f3:	68 1c c1 02 c0       	push   0xc002c11c
c00168f8:	e8 ea c4 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00168fd:	58                   	pop    eax
c00168fe:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016905:	e8 16 dc ff ff       	call   c0014520 <Device::getName()>
c001690a:	5a                   	pop    edx
c001690b:	59                   	pop    ecx
c001690c:	50                   	push   eax
c001690d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016911:	53                   	push   ebx
c0016912:	e8 f5 9e fe ff       	call   c000080c <strcpy>
c0016917:	5d                   	pop    ebp
c0016918:	58                   	pop    eax
c0016919:	68 4d c1 02 c0       	push   0xc002c14d
c001691e:	53                   	push   ebx
c001691f:	e8 28 a0 fe ff       	call   c000094c <strcat>
c0016924:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001692b:	e8 5c 8f ff ff       	call   c000f88c <malloc>
c0016930:	83 c4 0c             	add    esp,0xc
c0016933:	89 c5                	mov    ebp,eax
c0016935:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016939:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001693d:	57                   	push   edi
c001693e:	56                   	push   esi
c001693f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016946:	53                   	push   ebx
c0016947:	50                   	push   eax
c0016948:	e8 bf fb ff ff       	call   c001650c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001694d:	83 c4 14             	add    esp,0x14
c0016950:	55                   	push   ebp
c0016951:	e8 6c fc ff ff       	call   c00165c2 <LogicalDisk::assignDriveLetter()>
c0016956:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016959:	0f be d8             	movsx  ebx,al
c001695c:	e8 17 fd ff ff       	call   c0016678 <LogicalDisk::mount()>
c0016961:	58                   	pop    eax
c0016962:	5a                   	pop    edx
c0016963:	55                   	push   ebp
c0016964:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001696b:	e8 b0 d8 ff ff       	call   c0014220 <Device::addChild(Device*)>
c0016970:	59                   	pop    ecx
c0016971:	5e                   	pop    esi
c0016972:	53                   	push   ebx
c0016973:	68 58 c1 02 c0       	push   0xc002c158
c0016978:	e8 6a c4 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001697d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016983:	5b                   	pop    ebx
c0016984:	5e                   	pop    esi
c0016985:	5f                   	pop    edi
c0016986:	5d                   	pop    ebp
c0016987:	c3                   	ret    

c0016988 <createPartitionsForDisk(PhysicalDisk*)>:
c0016988:	55                   	push   ebp
c0016989:	57                   	push   edi
c001698a:	56                   	push   esi
c001698b:	53                   	push   ebx
c001698c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016992:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016999:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001699f:	3d 00 02 00 00       	cmp    eax,0x200
c00169a4:	74 27                	je     c00169cd <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169a6:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169ac:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169b2:	83 ec 10             	sub    esp,0x10
c00169b5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169b9:	99                   	cdq    
c00169ba:	c1 e6 0a             	shl    esi,0xa
c00169bd:	52                   	push   edx
c00169be:	89 fd                	mov    ebp,edi
c00169c0:	50                   	push   eax
c00169c1:	55                   	push   ebp
c00169c2:	56                   	push   esi
c00169c3:	e8 3c 0d 01 00       	call   c0027704 <__udivdi3>
c00169c8:	e9 b1 00 00 00       	jmp    c0016a7e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169cd:	83 ec 0c             	sub    esp,0xc
c00169d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169d2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169d6:	56                   	push   esi
c00169d7:	6a 01                	push   0x1
c00169d9:	6a 00                	push   0x0
c00169db:	6a 00                	push   0x0
c00169dd:	53                   	push   ebx
c00169de:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169e1:	83 c4 20             	add    esp,0x20
c00169e4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169ec:	75 0a                	jne    c00169f8 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169ee:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169f6:	74 2c                	je     c0016a24 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169f8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169fe:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a04:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a0a:	83 ec 10             	sub    esp,0x10
c0016a0d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a11:	89 f7                	mov    edi,esi
c0016a13:	c1 e0 0a             	shl    eax,0xa
c0016a16:	c1 ff 1f             	sar    edi,0x1f
c0016a19:	57                   	push   edi
c0016a1a:	56                   	push   esi
c0016a1b:	52                   	push   edx
c0016a1c:	50                   	push   eax
c0016a1d:	e8 e2 0c 01 00       	call   c0027704 <__udivdi3>
c0016a22:	eb 5a                	jmp    c0016a7e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a24:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a2b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a32:	83 e1 7f             	and    ecx,0x7f
c0016a35:	83 e0 7f             	and    eax,0x7f
c0016a38:	01 c1                	add    ecx,eax
c0016a3a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a41:	83 e0 7f             	and    eax,0x7f
c0016a44:	01 c1                	add    ecx,eax
c0016a46:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a4d:	83 e0 7f             	and    eax,0x7f
c0016a50:	00 c1                	add    cl,al
c0016a52:	74 41                	je     c0016a95 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a54:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a5a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a60:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a66:	83 ec 10             	sub    esp,0x10
c0016a69:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a6d:	89 f7                	mov    edi,esi
c0016a6f:	c1 e0 0a             	shl    eax,0xa
c0016a72:	c1 ff 1f             	sar    edi,0x1f
c0016a75:	57                   	push   edi
c0016a76:	56                   	push   esi
c0016a77:	52                   	push   edx
c0016a78:	50                   	push   eax
c0016a79:	e8 86 0c 01 00       	call   c0027704 <__udivdi3>
c0016a7e:	83 c4 14             	add    esp,0x14
c0016a81:	52                   	push   edx
c0016a82:	50                   	push   eax
c0016a83:	6a 00                	push   0x0
c0016a85:	6a 00                	push   0x0
c0016a87:	53                   	push   ebx
c0016a88:	e8 33 fe ff ff       	call   c00168c0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a8d:	83 c4 20             	add    esp,0x20
c0016a90:	e9 79 01 00 00       	jmp    c0016c0e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a95:	89 f0                	mov    eax,esi
c0016a97:	31 f6                	xor    esi,esi
c0016a99:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016aa0:	75 02                	jne    c0016aa4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016aa2:	89 f1                	mov    ecx,esi
c0016aa4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016aab:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016ab2:	c1 e2 08             	shl    edx,0x8
c0016ab5:	c1 e7 10             	shl    edi,0x10
c0016ab8:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016ac0:	09 fa                	or     edx,edi
c0016ac2:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016aca:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016ad1:	83 c0 10             	add    eax,0x10
c0016ad4:	09 fa                	or     edx,edi
c0016ad6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016add:	c1 e7 18             	shl    edi,0x18
c0016ae0:	09 fa                	or     edx,edi
c0016ae2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016ae9:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016aed:	c1 e7 10             	shl    edi,0x10
c0016af0:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016af7:	c1 e2 08             	shl    edx,0x8
c0016afa:	09 fa                	or     edx,edi
c0016afc:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b03:	09 fa                	or     edx,edi
c0016b05:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b0c:	c1 e7 18             	shl    edi,0x18
c0016b0f:	09 fa                	or     edx,edi
c0016b11:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b15:	46                   	inc    esi
c0016b16:	83 fe 04             	cmp    esi,0x4
c0016b19:	0f 85 7a ff ff ff    	jne    c0016a99 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b23:	83 f0 01             	xor    eax,0x1
c0016b26:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b2a:	75 57                	jne    c0016b83 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b30:	83 f0 01             	xor    eax,0x1
c0016b33:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b37:	75 4a                	jne    c0016b83 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b39:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b3d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b45:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b53:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b59:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b5f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b63:	89 f7                	mov    edi,esi
c0016b65:	c1 e0 0a             	shl    eax,0xa
c0016b68:	c1 ff 1f             	sar    edi,0x1f
c0016b6b:	57                   	push   edi
c0016b6c:	56                   	push   esi
c0016b6d:	52                   	push   edx
c0016b6e:	50                   	push   eax
c0016b6f:	e8 90 0b 01 00       	call   c0027704 <__udivdi3>
c0016b74:	83 c4 10             	add    esp,0x10
c0016b77:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b7b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b7f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b83:	84 c9                	test   cl,cl
c0016b85:	74 53                	je     c0016bda <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b87:	0f b6 c9             	movzx  ecx,cl
c0016b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b92:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b96:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016ba2:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016ba6:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016baa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bba:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016bbe:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bc2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bc6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bd2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bd6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bda:	31 ed                	xor    ebp,ebp
c0016bdc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016be0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016be4:	89 f8                	mov    eax,edi
c0016be6:	09 f0                	or     eax,esi
c0016be8:	74 1e                	je     c0016c08 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bea:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016bee:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bf2:	89 d1                	mov    ecx,edx
c0016bf4:	09 c1                	or     ecx,eax
c0016bf6:	74 10                	je     c0016c08 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bf8:	83 ec 0c             	sub    esp,0xc
c0016bfb:	57                   	push   edi
c0016bfc:	56                   	push   esi
c0016bfd:	52                   	push   edx
c0016bfe:	50                   	push   eax
c0016bff:	53                   	push   ebx
c0016c00:	e8 bb fc ff ff       	call   c00168c0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c05:	83 c4 20             	add    esp,0x20
c0016c08:	45                   	inc    ebp
c0016c09:	83 fd 04             	cmp    ebp,0x4
c0016c0c:	75 ce                	jne    c0016bdc <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c0e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c14:	5b                   	pop    ebx
c0016c15:	5e                   	pop    esi
c0016c16:	5f                   	pop    edi
c0016c17:	5d                   	pop    ebp
c0016c18:	c3                   	ret    
c0016c19:	90                   	nop

c0016c1a <Serial::Serial(char const*)>:
c0016c1a:	83 ec 0c             	sub    esp,0xc
c0016c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c21:	83 ec 08             	sub    esp,0x8
c0016c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c28:	50                   	push   eax
c0016c29:	e8 f6 d7 ff ff       	call   c0014424 <Device::Device(char const*)>
c0016c2e:	83 c4 10             	add    esp,0x10
c0016c31:	ba 84 c1 02 c0       	mov    edx,0xc002c184
c0016c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3a:	89 10                	mov    DWORD PTR [eax],edx
c0016c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c40:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c4a:	90                   	nop
c0016c4b:	83 c4 0c             	add    esp,0xc
c0016c4e:	c3                   	ret    
c0016c4f:	90                   	nop

c0016c50 <Serial::~Serial()>:
c0016c50:	83 ec 0c             	sub    esp,0xc
c0016c53:	ba 84 c1 02 c0       	mov    edx,0xc002c184
c0016c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5c:	89 10                	mov    DWORD PTR [eax],edx
c0016c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c62:	83 ec 0c             	sub    esp,0xc
c0016c65:	50                   	push   eax
c0016c66:	e8 83 d4 ff ff       	call   c00140ee <Device::~Device()>
c0016c6b:	83 c4 10             	add    esp,0x10
c0016c6e:	90                   	nop
c0016c6f:	83 c4 0c             	add    esp,0xc
c0016c72:	c3                   	ret    
c0016c73:	90                   	nop

c0016c74 <Serial::~Serial()>:
c0016c74:	83 ec 0c             	sub    esp,0xc
c0016c77:	83 ec 0c             	sub    esp,0xc
c0016c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c7e:	e8 cd ff ff ff       	call   c0016c50 <Serial::~Serial()>
c0016c83:	83 c4 10             	add    esp,0x10
c0016c86:	83 ec 08             	sub    esp,0x8
c0016c89:	68 58 01 00 00       	push   0x158
c0016c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c92:	e8 70 c0 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0016c97:	83 c4 10             	add    esp,0x10
c0016c9a:	83 c4 0c             	add    esp,0xc
c0016c9d:	c3                   	ret    

c0016c9e <Timer::Timer(char const*)>:
c0016c9e:	83 ec 0c             	sub    esp,0xc
c0016ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca5:	83 ec 08             	sub    esp,0x8
c0016ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cac:	50                   	push   eax
c0016cad:	e8 72 d7 ff ff       	call   c0014424 <Device::Device(char const*)>
c0016cb2:	83 c4 10             	add    esp,0x10
c0016cb5:	ba c8 c1 02 c0       	mov    edx,0xc002c1c8
c0016cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cbe:	89 10                	mov    DWORD PTR [eax],edx
c0016cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc4:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cce:	90                   	nop
c0016ccf:	83 c4 0c             	add    esp,0xc
c0016cd2:	c3                   	ret    
c0016cd3:	90                   	nop

c0016cd4 <Timer::~Timer()>:
c0016cd4:	83 ec 0c             	sub    esp,0xc
c0016cd7:	ba c8 c1 02 c0       	mov    edx,0xc002c1c8
c0016cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce0:	89 10                	mov    DWORD PTR [eax],edx
c0016ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce6:	83 ec 0c             	sub    esp,0xc
c0016ce9:	50                   	push   eax
c0016cea:	e8 ff d3 ff ff       	call   c00140ee <Device::~Device()>
c0016cef:	83 c4 10             	add    esp,0x10
c0016cf2:	90                   	nop
c0016cf3:	83 c4 0c             	add    esp,0xc
c0016cf6:	c3                   	ret    
c0016cf7:	90                   	nop

c0016cf8 <Timer::~Timer()>:
c0016cf8:	83 ec 0c             	sub    esp,0xc
c0016cfb:	83 ec 0c             	sub    esp,0xc
c0016cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d02:	e8 cd ff ff ff       	call   c0016cd4 <Timer::~Timer()>
c0016d07:	83 c4 10             	add    esp,0x10
c0016d0a:	83 ec 08             	sub    esp,0x8
c0016d0d:	68 5c 01 00 00       	push   0x15c
c0016d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d16:	e8 ec bf ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	83 c4 0c             	add    esp,0xc
c0016d21:	c3                   	ret    

c0016d22 <Timer::read()>:
c0016d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d26:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d2c:	c3                   	ret    

c0016d2d <timerHandler(unsigned long long)>:
c0016d2d:	55                   	push   ebp
c0016d2e:	57                   	push   edi
c0016d2f:	56                   	push   esi
c0016d30:	53                   	push   ebx
c0016d31:	83 ec 0c             	sub    esp,0xc
c0016d34:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d38:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d3c:	01 35 70 fa 02 c0    	add    DWORD PTR ds:0xc002fa70,esi
c0016d42:	11 3d 74 fa 02 c0    	adc    DWORD PTR ds:0xc002fa74,edi
c0016d48:	80 3d ed f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f3ed,0x0
c0016d4f:	0f 84 42 01 00 00    	je     c0016e97 <timerHandler(unsigned long long)+0x16a>
c0016d55:	fa                   	cli    
c0016d56:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c0016d5c:	83 ec 0c             	sub    esp,0xc
c0016d5f:	ff 05 24 29 03 c0    	inc    DWORD PTR ds:0xc0032924
c0016d65:	68 38 29 03 c0       	push   0xc0032938
c0016d6a:	e8 1b 2a 01 00       	call   c002978a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d6f:	83 c4 10             	add    esp,0x10
c0016d72:	84 c0                	test   al,al
c0016d74:	0f 85 a2 00 00 00    	jne    c0016e1c <timerHandler(unsigned long long)+0xef>
c0016d7a:	83 ec 0c             	sub    esp,0xc
c0016d7d:	68 38 29 03 c0       	push   0xc0032938
c0016d82:	e8 1f 2a 01 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d87:	83 c4 10             	add    esp,0x10
c0016d8a:	89 c3                	mov    ebx,eax
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	68 38 29 03 c0       	push   0xc0032938
c0016d94:	e8 0d 2a 01 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d99:	c7 04 24 38 29 03 c0 	mov    DWORD PTR [esp],0xc0032938
c0016da0:	89 c5                	mov    ebp,eax
c0016da2:	e8 07 2a 01 00       	call   c00297ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016da7:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016daa:	83 c4 10             	add    esp,0x10
c0016dad:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016db0:	39 15 70 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa70,edx
c0016db6:	a1 74 fa 02 c0       	mov    eax,ds:0xc002fa74
c0016dbb:	19 c8                	sbb    eax,ecx
c0016dbd:	72 21                	jb     c0016de0 <timerHandler(unsigned long long)+0xb3>
c0016dbf:	83 ec 0c             	sub    esp,0xc
c0016dc2:	55                   	push   ebp
c0016dc3:	e8 de 7d 00 00       	call   c001eba6 <unblockTask(ThreadControlBlock*)>
c0016dc8:	83 c4 10             	add    esp,0x10
c0016dcb:	39 eb                	cmp    ebx,ebp
c0016dcd:	75 21                	jne    c0016df0 <timerHandler(unsigned long long)+0xc3>
c0016dcf:	83 ec 0c             	sub    esp,0xc
c0016dd2:	68 38 29 03 c0       	push   0xc0032938
c0016dd7:	e8 ca 29 01 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ddc:	89 c3                	mov    ebx,eax
c0016dde:	eb 0d                	jmp    c0016ded <timerHandler(unsigned long long)+0xc0>
c0016de0:	50                   	push   eax
c0016de1:	50                   	push   eax
c0016de2:	55                   	push   ebp
c0016de3:	68 38 29 03 c0       	push   0xc0032938
c0016de8:	e8 6f 2a 01 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ded:	83 c4 10             	add    esp,0x10
c0016df0:	83 ec 0c             	sub    esp,0xc
c0016df3:	68 38 29 03 c0       	push   0xc0032938
c0016df8:	e8 8d 29 01 00       	call   c002978a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dfd:	83 c4 10             	add    esp,0x10
c0016e00:	84 c0                	test   al,al
c0016e02:	75 18                	jne    c0016e1c <timerHandler(unsigned long long)+0xef>
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	68 38 29 03 c0       	push   0xc0032938
c0016e0c:	e8 95 29 01 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e11:	83 c4 10             	add    esp,0x10
c0016e14:	39 d8                	cmp    eax,ebx
c0016e16:	0f 85 70 ff ff ff    	jne    c0016d8c <timerHandler(unsigned long long)+0x5f>
c0016e1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e21:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016e25:	74 3d                	je     c0016e64 <timerHandler(unsigned long long)+0x137>
c0016e27:	80 3d ec f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f3ec,0x0
c0016e2e:	74 34                	je     c0016e64 <timerHandler(unsigned long long)+0x137>
c0016e30:	fa                   	cli    
c0016e31:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c0016e37:	31 d2                	xor    edx,edx
c0016e39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e3e:	89 f9                	mov    ecx,edi
c0016e40:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e48:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e4b:	39 c6                	cmp    esi,eax
c0016e4d:	19 d1                	sbb    ecx,edx
c0016e4f:	72 05                	jb     c0016e56 <timerHandler(unsigned long long)+0x129>
c0016e51:	e8 8c 78 00 00       	call   c001e6e2 <schedule()>
c0016e56:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0016e5b:	48                   	dec    eax
c0016e5c:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0016e61:	75 01                	jne    c0016e64 <timerHandler(unsigned long long)+0x137>
c0016e63:	fb                   	sti    
c0016e64:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c0016e69:	48                   	dec    eax
c0016e6a:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c0016e6f:	75 18                	jne    c0016e89 <timerHandler(unsigned long long)+0x15c>
c0016e71:	83 3d 20 29 03 c0 00 	cmp    DWORD PTR ds:0xc0032920,0x0
c0016e78:	74 0f                	je     c0016e89 <timerHandler(unsigned long long)+0x15c>
c0016e7a:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c0016e84:	e8 59 78 00 00       	call   c001e6e2 <schedule()>
c0016e89:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0016e8e:	48                   	dec    eax
c0016e8f:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c0016e94:	75 01                	jne    c0016e97 <timerHandler(unsigned long long)+0x16a>
c0016e96:	fb                   	sti    
c0016e97:	83 c4 0c             	add    esp,0xc
c0016e9a:	5b                   	pop    ebx
c0016e9b:	5e                   	pop    esi
c0016e9c:	5f                   	pop    edi
c0016e9d:	5d                   	pop    ebp
c0016e9e:	c3                   	ret    

c0016e9f <setupTimer(int)>:
c0016e9f:	57                   	push   edi
c0016ea0:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0016ea5:	56                   	push   esi
c0016ea6:	53                   	push   ebx
c0016ea7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016eab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016eb1:	83 ec 0c             	sub    esp,0xc
c0016eb4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016eba:	e8 61 d6 ff ff       	call   c0014520 <Device::getName()>
c0016ebf:	83 c4 10             	add    esp,0x10
c0016ec2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016ec5:	0f 85 8d 00 00 00    	jne    c0016f58 <setupTimer(int)+0xb9>
c0016ecb:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0016ed0:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ed7:	74 7f                	je     c0016f58 <setupTimer(int)+0xb9>
c0016ed9:	83 ec 0c             	sub    esp,0xc
c0016edc:	68 5c 01 00 00       	push   0x15c
c0016ee1:	e8 a6 89 ff ff       	call   c000f88c <malloc>
c0016ee6:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ee9:	89 c3                	mov    ebx,eax
c0016eeb:	e8 ee 03 01 00       	call   c00272de <PIT::PIT()>
c0016ef0:	59                   	pop    ecx
c0016ef1:	5f                   	pop    edi
c0016ef2:	53                   	push   ebx
c0016ef3:	ff 35 e8 f3 02 c0    	push   DWORD PTR ds:0xc002f3e8
c0016ef9:	e8 22 d3 ff ff       	call   c0014220 <Device::addChild(Device*)>
c0016efe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f00:	6a 00                	push   0x0
c0016f02:	6a 00                	push   0x0
c0016f04:	56                   	push   esi
c0016f05:	53                   	push   ebx
c0016f06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f09:	83 c4 14             	add    esp,0x14
c0016f0c:	68 60 01 00 00       	push   0x160
c0016f11:	e8 76 89 ff ff       	call   c000f88c <malloc>
c0016f16:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f19:	89 c7                	mov    edi,eax
c0016f1b:	e8 6e 02 01 00       	call   c002718e <APICTimer::APICTimer()>
c0016f20:	6a 00                	push   0x0
c0016f22:	6a 00                	push   0x0
c0016f24:	56                   	push   esi
c0016f25:	57                   	push   edi
c0016f26:	e8 65 01 01 00       	call   c0027090 <APICTimer::open(int, int, void*)>
c0016f2b:	83 c4 20             	add    esp,0x20
c0016f2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f30:	6a 00                	push   0x0
c0016f32:	6a 00                	push   0x0
c0016f34:	6a 00                	push   0x0
c0016f36:	53                   	push   ebx
c0016f37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f3a:	58                   	pop    eax
c0016f3b:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0016f40:	5a                   	pop    edx
c0016f41:	57                   	push   edi
c0016f42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f48:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f4e:	e8 cd d2 ff ff       	call   c0014220 <Device::addChild(Device*)>
c0016f53:	83 c4 10             	add    esp,0x10
c0016f56:	eb 33                	jmp    c0016f8b <setupTimer(int)+0xec>
c0016f58:	83 ec 0c             	sub    esp,0xc
c0016f5b:	68 5c 01 00 00       	push   0x15c
c0016f60:	e8 27 89 ff ff       	call   c000f88c <malloc>
c0016f65:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f68:	89 c3                	mov    ebx,eax
c0016f6a:	e8 6f 03 01 00       	call   c00272de <PIT::PIT()>
c0016f6f:	58                   	pop    eax
c0016f70:	5a                   	pop    edx
c0016f71:	53                   	push   ebx
c0016f72:	ff 35 e8 f3 02 c0    	push   DWORD PTR ds:0xc002f3e8
c0016f78:	e8 a3 d2 ff ff       	call   c0014220 <Device::addChild(Device*)>
c0016f7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f7f:	6a 00                	push   0x0
c0016f81:	6a 00                	push   0x0
c0016f83:	56                   	push   esi
c0016f84:	53                   	push   ebx
c0016f85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f88:	83 c4 20             	add    esp,0x20
c0016f8b:	89 d8                	mov    eax,ebx
c0016f8d:	5b                   	pop    ebx
c0016f8e:	5e                   	pop    esi
c0016f8f:	5f                   	pop    edi
c0016f90:	c3                   	ret    
c0016f91:	90                   	nop

c0016f92 <VCache::VCache(PhysicalDisk*)>:
c0016f92:	53                   	push   ebx
c0016f93:	83 ec 18             	sub    esp,0x18
c0016f96:	ba f8 c1 02 c0       	mov    edx,0xc002c1f8
c0016f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9f:	89 10                	mov    DWORD PTR [eax],edx
c0016fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa5:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb0:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbb:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016fc2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fcd:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016fd4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fdf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fea:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff2:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016ff9:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017004:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700c:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017014:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701c:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017023:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001702b:	83 ec 0c             	sub    esp,0xc
c001702e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017032:	e8 55 88 ff ff       	call   c000f88c <malloc>
c0017037:	83 c4 10             	add    esp,0x10
c001703a:	89 c3                	mov    ebx,eax
c001703c:	83 ec 0c             	sub    esp,0xc
c001703f:	53                   	push   ebx
c0017040:	e8 47 74 00 00       	call   c001e48c <Mutex::Mutex()>
c0017045:	83 c4 10             	add    esp,0x10
c0017048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001704f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017053:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017057:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001705a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705e:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017065:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017069:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001706f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017073:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017076:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001707a:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017080:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017086:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001708a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001708d:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017094:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017098:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001709c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170a2:	05 00 01 00 00       	add    eax,0x100
c00170a7:	c1 e0 04             	shl    eax,0x4
c00170aa:	83 ec 0c             	sub    esp,0xc
c00170ad:	50                   	push   eax
c00170ae:	e8 d9 87 ff ff       	call   c000f88c <malloc>
c00170b3:	83 c4 10             	add    esp,0x10
c00170b6:	89 c2                	mov    edx,eax
c00170b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c3:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ce:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170dc:	c1 e0 07             	shl    eax,0x7
c00170df:	83 ec 0c             	sub    esp,0xc
c00170e2:	50                   	push   eax
c00170e3:	e8 a4 87 ff ff       	call   c000f88c <malloc>
c00170e8:	83 c4 10             	add    esp,0x10
c00170eb:	89 c2                	mov    edx,eax
c00170ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f1:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170f4:	90                   	nop
c00170f5:	83 c4 18             	add    esp,0x18
c00170f8:	5b                   	pop    ebx
c00170f9:	c3                   	ret    

c00170fa <VCache::invalidateReadBuffer()>:
c00170fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170fe:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017104:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017108:	c3                   	ret    
c0017109:	90                   	nop

c001710a <VCache::writeWriteBuffer()>:
c001710a:	53                   	push   ebx
c001710b:	83 ec 14             	sub    esp,0x14
c001710e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017112:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017115:	8b 10                	mov    edx,DWORD PTR [eax]
c0017117:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001711a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001711d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017120:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017123:	50                   	push   eax
c0017124:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017127:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001712e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017135:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017139:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017140:	83 c4 28             	add    esp,0x28
c0017143:	5b                   	pop    ebx
c0017144:	c3                   	ret    
c0017145:	90                   	nop

c0017146 <VCache::~VCache()>:
c0017146:	83 ec 0c             	sub    esp,0xc
c0017149:	ba f8 c1 02 c0       	mov    edx,0xc002c1f8
c001714e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017152:	89 10                	mov    DWORD PTR [eax],edx
c0017154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017158:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001715b:	84 c0                	test   al,al
c001715d:	74 0f                	je     c001716e <VCache::~VCache()+0x28>
c001715f:	83 ec 0c             	sub    esp,0xc
c0017162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017166:	e8 9f ff ff ff       	call   c001710a <VCache::writeWriteBuffer()>
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017172:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017175:	83 ec 0c             	sub    esp,0xc
c0017178:	50                   	push   eax
c0017179:	e8 1e 87 ff ff       	call   c000f89c <free>
c001717e:	83 c4 10             	add    esp,0x10
c0017181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017185:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017188:	83 ec 0c             	sub    esp,0xc
c001718b:	50                   	push   eax
c001718c:	e8 0b 87 ff ff       	call   c000f89c <free>
c0017191:	83 c4 10             	add    esp,0x10
c0017194:	90                   	nop
c0017195:	83 c4 0c             	add    esp,0xc
c0017198:	c3                   	ret    
c0017199:	90                   	nop

c001719a <VCache::~VCache()>:
c001719a:	83 ec 0c             	sub    esp,0xc
c001719d:	83 ec 0c             	sub    esp,0xc
c00171a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171a4:	e8 9d ff ff ff       	call   c0017146 <VCache::~VCache()>
c00171a9:	83 c4 10             	add    esp,0x10
c00171ac:	83 ec 08             	sub    esp,0x8
c00171af:	6a 44                	push   0x44
c00171b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171b5:	e8 4d bb ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c00171ba:	83 c4 10             	add    esp,0x10
c00171bd:	83 c4 0c             	add    esp,0xc
c00171c0:	c3                   	ret    
c00171c1:	90                   	nop

c00171c2 <VCache::write(unsigned long long, int, void*)>:
c00171c2:	55                   	push   ebp
c00171c3:	57                   	push   edi
c00171c4:	56                   	push   esi
c00171c5:	53                   	push   ebx
c00171c6:	83 ec 18             	sub    esp,0x18
c00171c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00171cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00171d1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00171d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171d8:	e8 3d 78 00 00       	call   c001ea1a <Semaphore::acquire()>
c00171dd:	83 c4 10             	add    esp,0x10
c00171e0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171e4:	74 0c                	je     c00171f2 <VCache::write(unsigned long long, int, void*)+0x30>
c00171e6:	83 ec 0c             	sub    esp,0xc
c00171e9:	53                   	push   ebx
c00171ea:	e8 0b ff ff ff       	call   c00170fa <VCache::invalidateReadBuffer()>
c00171ef:	83 c4 10             	add    esp,0x10
c00171f2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171f6:	74 5c                	je     c0017254 <VCache::write(unsigned long long, int, void*)+0x92>
c00171f8:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00171fb:	89 e8                	mov    eax,ebp
c00171fd:	99                   	cdq    
c00171fe:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017201:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017204:	89 c1                	mov    ecx,eax
c0017206:	89 d0                	mov    eax,edx
c0017208:	31 f1                	xor    ecx,esi
c001720a:	31 f8                	xor    eax,edi
c001720c:	09 c1                	or     ecx,eax
c001720e:	75 38                	jne    c0017248 <VCache::write(unsigned long long, int, void*)+0x86>
c0017210:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0017215:	75 31                	jne    c0017248 <VCache::write(unsigned long long, int, void*)+0x86>
c0017217:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001721a:	89 ef                	mov    edi,ebp
c001721c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017222:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017226:	0f af f9             	imul   edi,ecx
c0017229:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001722c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001722e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017231:	40                   	inc    eax
c0017232:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017235:	83 c0 80             	add    eax,0xffffff80
c0017238:	75 5c                	jne    c0017296 <VCache::write(unsigned long long, int, void*)+0xd4>
c001723a:	83 ec 0c             	sub    esp,0xc
c001723d:	53                   	push   ebx
c001723e:	e8 c7 fe ff ff       	call   c001710a <VCache::writeWriteBuffer()>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	eb 4e                	jmp    c0017296 <VCache::write(unsigned long long, int, void*)+0xd4>
c0017248:	83 ec 0c             	sub    esp,0xc
c001724b:	53                   	push   ebx
c001724c:	e8 b9 fe ff ff       	call   c001710a <VCache::writeWriteBuffer()>
c0017251:	83 c4 10             	add    esp,0x10
c0017254:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017257:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c001725c:	7f 22                	jg     c0017280 <VCache::write(unsigned long long, int, void*)+0xbe>
c001725e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017261:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017264:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017268:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001726c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001726f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0017272:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017278:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001727c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001727e:	eb 16                	jmp    c0017296 <VCache::write(unsigned long long, int, void*)+0xd4>
c0017280:	83 ec 0c             	sub    esp,0xc
c0017283:	8b 10                	mov    edx,DWORD PTR [eax]
c0017285:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001728d:	57                   	push   edi
c001728e:	56                   	push   esi
c001728f:	50                   	push   eax
c0017290:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017293:	83 c4 20             	add    esp,0x20
c0017296:	83 ec 0c             	sub    esp,0xc
c0017299:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001729c:	e8 b3 7e 00 00       	call   c001f154 <Semaphore::release()>
c00172a1:	83 c4 1c             	add    esp,0x1c
c00172a4:	31 c0                	xor    eax,eax
c00172a6:	5b                   	pop    ebx
c00172a7:	5e                   	pop    esi
c00172a8:	5f                   	pop    edi
c00172a9:	5d                   	pop    ebp
c00172aa:	c3                   	ret    
c00172ab:	90                   	nop

c00172ac <VCache::read(unsigned long long, int, void*)>:
c00172ac:	55                   	push   ebp
c00172ad:	57                   	push   edi
c00172ae:	56                   	push   esi
c00172af:	53                   	push   ebx
c00172b0:	83 ec 28             	sub    esp,0x28
c00172b3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172b7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00172bb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00172bf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00172c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172c6:	e8 4f 77 00 00       	call   c001ea1a <Semaphore::acquire()>
c00172cb:	83 c4 10             	add    esp,0x10
c00172ce:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172d2:	74 0c                	je     c00172e0 <VCache::read(unsigned long long, int, void*)+0x34>
c00172d4:	83 ec 0c             	sub    esp,0xc
c00172d7:	53                   	push   ebx
c00172d8:	e8 2d fe ff ff       	call   c001710a <VCache::writeWriteBuffer()>
c00172dd:	83 c4 10             	add    esp,0x10
c00172e0:	83 fd 01             	cmp    ebp,0x1
c00172e3:	0f 85 80 00 00 00    	jne    c0017369 <VCache::read(unsigned long long, int, void*)+0xbd>
c00172e9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172f0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172f7:	75 70                	jne    c0017369 <VCache::read(unsigned long long, int, void*)+0xbd>
c00172f9:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00172fc:	89 e9                	mov    ecx,ebp
c00172fe:	f7 d9                	neg    ecx
c0017300:	89 c8                	mov    eax,ecx
c0017302:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017306:	c1 f8 1f             	sar    eax,0x1f
c0017309:	21 f1                	and    ecx,esi
c001730b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001730f:	89 c8                	mov    eax,ecx
c0017311:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017315:	21 f9                	and    ecx,edi
c0017317:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001731b:	89 ca                	mov    edx,ecx
c001731d:	74 0a                	je     c0017329 <VCache::read(unsigned long long, int, void*)+0x7d>
c001731f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017322:	75 05                	jne    c0017329 <VCache::read(unsigned long long, int, void*)+0x7d>
c0017324:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0017327:	74 23                	je     c001734c <VCache::read(unsigned long long, int, void*)+0xa0>
c0017329:	83 ec 0c             	sub    esp,0xc
c001732c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017330:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017334:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0017337:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001733a:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001733c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001733f:	55                   	push   ebp
c0017340:	52                   	push   edx
c0017341:	50                   	push   eax
c0017342:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017346:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017349:	83 c4 20             	add    esp,0x20
c001734c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001734f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017353:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017359:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001735c:	48                   	dec    eax
c001735d:	21 c6                	and    esi,eax
c001735f:	0f af f1             	imul   esi,ecx
c0017362:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0017365:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017367:	eb 1d                	jmp    c0017386 <VCache::read(unsigned long long, int, void*)+0xda>
c0017369:	83 ec 0c             	sub    esp,0xc
c001736c:	53                   	push   ebx
c001736d:	e8 88 fd ff ff       	call   c00170fa <VCache::invalidateReadBuffer()>
c0017372:	5a                   	pop    edx
c0017373:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017376:	8b 10                	mov    edx,DWORD PTR [eax]
c0017378:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001737c:	55                   	push   ebp
c001737d:	57                   	push   edi
c001737e:	56                   	push   esi
c001737f:	50                   	push   eax
c0017380:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017383:	83 c4 20             	add    esp,0x20
c0017386:	83 ec 0c             	sub    esp,0xc
c0017389:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001738c:	e8 c3 7d 00 00       	call   c001f154 <Semaphore::release()>
c0017391:	83 c4 2c             	add    esp,0x2c
c0017394:	31 c0                	xor    eax,eax
c0017396:	5b                   	pop    ebx
c0017397:	5e                   	pop    esi
c0017398:	5f                   	pop    edi
c0017399:	5d                   	pop    ebp
c001739a:	c3                   	ret    
c001739b:	90                   	nop

c001739c <Video::putrect(int, int, int, int, unsigned int)>:
c001739c:	55                   	push   ebp
c001739d:	57                   	push   edi
c001739e:	56                   	push   esi
c001739f:	53                   	push   ebx
c00173a0:	83 ec 1c             	sub    esp,0x1c
c00173a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173ab:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173af:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00173b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173bb:	01 df                	add    edi,ebx
c00173bd:	39 fb                	cmp    ebx,edi
c00173bf:	7d 1f                	jge    c00173e0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00173c1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173c5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173c9:	7d 12                	jge    c00173dd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173cb:	8b 16                	mov    edx,DWORD PTR [esi]
c00173cd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173d1:	53                   	push   ebx
c00173d2:	55                   	push   ebp
c00173d3:	45                   	inc    ebp
c00173d4:	56                   	push   esi
c00173d5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173d8:	83 c4 10             	add    esp,0x10
c00173db:	eb e8                	jmp    c00173c5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173dd:	43                   	inc    ebx
c00173de:	eb dd                	jmp    c00173bd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173e0:	83 c4 1c             	add    esp,0x1c
c00173e3:	5b                   	pop    ebx
c00173e4:	5e                   	pop    esi
c00173e5:	5f                   	pop    edi
c00173e6:	5d                   	pop    ebp
c00173e7:	c3                   	ret    

c00173e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173e8:	55                   	push   ebp
c00173e9:	57                   	push   edi
c00173ea:	31 ff                	xor    edi,edi
c00173ec:	56                   	push   esi
c00173ed:	53                   	push   ebx
c00173ee:	83 ec 1c             	sub    esp,0x1c
c00173f1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173f5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173f9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017400:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017405:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017409:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001740d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017411:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017414:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017418:	01 f9                	add    ecx,edi
c001741a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001741e:	7d 2f                	jge    c001744f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017420:	31 f6                	xor    esi,esi
c0017422:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017426:	01 f2                	add    edx,esi
c0017428:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001742c:	7d 1a                	jge    c0017448 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001742e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017431:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017434:	46                   	inc    esi
c0017435:	51                   	push   ecx
c0017436:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001743a:	52                   	push   edx
c001743b:	55                   	push   ebp
c001743c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001743f:	83 c4 10             	add    esp,0x10
c0017442:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017446:	eb da                	jmp    c0017422 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017448:	47                   	inc    edi
c0017449:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001744d:	eb c5                	jmp    c0017414 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001744f:	83 c4 1c             	add    esp,0x1c
c0017452:	5b                   	pop    ebx
c0017453:	5e                   	pop    esi
c0017454:	5f                   	pop    edi
c0017455:	5d                   	pop    ebp
c0017456:	c3                   	ret    
c0017457:	90                   	nop

c0017458 <Video::blit(unsigned int*, int, int, int, int)>:
c0017458:	55                   	push   ebp
c0017459:	57                   	push   edi
c001745a:	56                   	push   esi
c001745b:	53                   	push   ebx
c001745c:	83 ec 1c             	sub    esp,0x1c
c001745f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017463:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017467:	85 c0                	test   eax,eax
c0017469:	79 02                	jns    c001746d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001746b:	31 c0                	xor    eax,eax
c001746d:	c1 e0 02             	shl    eax,0x2
c0017470:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017474:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017478:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001747c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017480:	39 d8                	cmp    eax,ebx
c0017482:	7e 49                	jle    c00174cd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017484:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001748a:	7c 41                	jl     c00174cd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001748c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017490:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017494:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017498:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001749c:	39 f9                	cmp    ecx,edi
c001749e:	7e 22                	jle    c00174c2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174a0:	83 c5 04             	add    ebp,0x4
c00174a3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174a9:	7c 14                	jl     c00174bf <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174ab:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174ad:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174b8:	56                   	push   esi
c00174b9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00174bc:	83 c4 10             	add    esp,0x10
c00174bf:	47                   	inc    edi
c00174c0:	eb d2                	jmp    c0017494 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00174c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174c6:	43                   	inc    ebx
c00174c7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174cb:	eb ab                	jmp    c0017478 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174cd:	83 c4 1c             	add    esp,0x1c
c00174d0:	5b                   	pop    ebx
c00174d1:	5e                   	pop    esi
c00174d2:	5f                   	pop    edi
c00174d3:	5d                   	pop    ebp
c00174d4:	c3                   	ret    
c00174d5:	90                   	nop

c00174d6 <Video::clearScreen(unsigned int)>:
c00174d6:	57                   	push   edi
c00174d7:	56                   	push   esi
c00174d8:	53                   	push   ebx
c00174d9:	31 db                	xor    ebx,ebx
c00174db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174df:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174e5:	7e 1f                	jle    c0017506 <Video::clearScreen(unsigned int)+0x30>
c00174e7:	31 ff                	xor    edi,edi
c00174e9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174ef:	7e 12                	jle    c0017503 <Video::clearScreen(unsigned int)+0x2d>
c00174f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00174f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174f7:	53                   	push   ebx
c00174f8:	57                   	push   edi
c00174f9:	47                   	inc    edi
c00174fa:	56                   	push   esi
c00174fb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174fe:	83 c4 10             	add    esp,0x10
c0017501:	eb e6                	jmp    c00174e9 <Video::clearScreen(unsigned int)+0x13>
c0017503:	43                   	inc    ebx
c0017504:	eb d9                	jmp    c00174df <Video::clearScreen(unsigned int)+0x9>
c0017506:	5b                   	pop    ebx
c0017507:	5e                   	pop    esi
c0017508:	5f                   	pop    edi
c0017509:	c3                   	ret    

c001750a <Video::putpixel(int, int, unsigned int)>:
c001750a:	c7 44 24 04 00 c2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c200
c0017512:	e9 18 34 00 00       	jmp    c001a92f <Krnl::panic(char const*)>
c0017517:	90                   	nop

c0017518 <Video::Video(char const*)>:
c0017518:	83 ec 0c             	sub    esp,0xc
c001751b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001751f:	83 ec 08             	sub    esp,0x8
c0017522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017526:	50                   	push   eax
c0017527:	e8 f8 ce ff ff       	call   c0014424 <Device::Device(char const*)>
c001752c:	83 c4 10             	add    esp,0x10
c001752f:	ba 84 c2 02 c0       	mov    edx,0xc002c284
c0017534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017538:	89 10                	mov    DWORD PTR [eax],edx
c001753a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001753e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017548:	90                   	nop
c0017549:	83 c4 0c             	add    esp,0xc
c001754c:	c3                   	ret    
c001754d:	90                   	nop

c001754e <Video::~Video()>:
c001754e:	83 ec 0c             	sub    esp,0xc
c0017551:	ba 84 c2 02 c0       	mov    edx,0xc002c284
c0017556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001755a:	89 10                	mov    DWORD PTR [eax],edx
c001755c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017560:	83 ec 0c             	sub    esp,0xc
c0017563:	50                   	push   eax
c0017564:	e8 85 cb ff ff       	call   c00140ee <Device::~Device()>
c0017569:	83 c4 10             	add    esp,0x10
c001756c:	90                   	nop
c001756d:	83 c4 0c             	add    esp,0xc
c0017570:	c3                   	ret    
c0017571:	90                   	nop

c0017572 <Video::~Video()>:
c0017572:	83 ec 0c             	sub    esp,0xc
c0017575:	83 ec 0c             	sub    esp,0xc
c0017578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001757c:	e8 cd ff ff ff       	call   c001754e <Video::~Video()>
c0017581:	83 c4 10             	add    esp,0x10
c0017584:	83 ec 08             	sub    esp,0x8
c0017587:	68 64 01 00 00       	push   0x164
c001758c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017590:	e8 72 b7 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0017595:	83 c4 10             	add    esp,0x10
c0017598:	83 c4 0c             	add    esp,0xc
c001759b:	c3                   	ret    

c001759c <Video::isMonochrome()>:
c001759c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175a6:	c3                   	ret    
c00175a7:	90                   	nop

c00175a8 <Video::getWidth()>:
c00175a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175ac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175b2:	c3                   	ret    
c00175b3:	90                   	nop

c00175b4 <Video::getHeight()>:
c00175b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175b8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00175be:	c3                   	ret    
c00175bf:	90                   	nop

c00175c0 <Video::drawCursor(int, int, unsigned char*, int)>:
c00175c0:	55                   	push   ebp
c00175c1:	57                   	push   edi
c00175c2:	56                   	push   esi
c00175c3:	53                   	push   ebx
c00175c4:	83 ec 2c             	sub    esp,0x2c
c00175c7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175cf:	83 f8 01             	cmp    eax,0x1
c00175d2:	19 c9                	sbb    ecx,ecx
c00175d4:	31 db                	xor    ebx,ebx
c00175d6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175da:	89 cd                	mov    ebp,ecx
c00175dc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175e4:	f7 d5                	not    ebp
c00175e6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175f0:	01 d8                	add    eax,ebx
c00175f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175f6:	56                   	push   esi
c00175f7:	e8 b8 ff ff ff       	call   c00175b4 <Video::getHeight()>
c00175fc:	59                   	pop    ecx
c00175fd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017601:	7e 70                	jle    c0017673 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017603:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017607:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001760b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001760e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017612:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017616:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001761d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017621:	89 f8                	mov    eax,edi
c0017623:	83 c0 20             	add    eax,0x20
c0017626:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001762a:	56                   	push   esi
c001762b:	e8 78 ff ff ff       	call   c00175a8 <Video::getWidth()>
c0017630:	5a                   	pop    edx
c0017631:	39 c7                	cmp    edi,eax
c0017633:	7d 34                	jge    c0017669 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017635:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001763a:	74 05                	je     c0017641 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001763c:	8b 06                	mov    eax,DWORD PTR [esi]
c001763e:	55                   	push   ebp
c001763f:	eb 0d                	jmp    c001764e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017641:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017646:	74 12                	je     c001765a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017648:	8b 06                	mov    eax,DWORD PTR [esi]
c001764a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001764e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017652:	57                   	push   edi
c0017653:	56                   	push   esi
c0017654:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017657:	83 c4 10             	add    esp,0x10
c001765a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001765e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017662:	47                   	inc    edi
c0017663:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017667:	75 c1                	jne    c001762a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017669:	43                   	inc    ebx
c001766a:	83 fb 20             	cmp    ebx,0x20
c001766d:	0f 85 79 ff ff ff    	jne    c00175ec <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017673:	83 c4 2c             	add    esp,0x2c
c0017676:	5b                   	pop    ebx
c0017677:	5e                   	pop    esi
c0017678:	5f                   	pop    edi
c0017679:	5d                   	pop    ebp
c001767a:	c3                   	ret    
c001767b:	90                   	nop

c001767c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001767c:	55                   	push   ebp
c001767d:	57                   	push   edi
c001767e:	56                   	push   esi
c001767f:	53                   	push   ebx
c0017680:	83 ec 28             	sub    esp,0x28
c0017683:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017687:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001768b:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001768f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017693:	c1 e7 08             	shl    edi,0x8
c0017696:	01 c7                	add    edi,eax
c0017698:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001769c:	c1 e0 08             	shl    eax,0x8
c001769f:	01 d0                	add    eax,edx
c00176a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176a9:	0f af c7             	imul   eax,edi
c00176ac:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00176b3:	50                   	push   eax
c00176b4:	e8 d3 81 ff ff       	call   c000f88c <malloc>
c00176b9:	83 c4 10             	add    esp,0x10
c00176bc:	89 c5                	mov    ebp,eax
c00176be:	85 c0                	test   eax,eax
c00176c0:	75 15                	jne    c00176d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00176c2:	83 ec 0c             	sub    esp,0xc
c00176c5:	68 21 c2 02 c0       	push   0xc002c221
c00176ca:	e8 18 b7 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	e9 1c 01 00 00       	jmp    c00177f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176d7:	be 12 00 00 00       	mov    esi,0x12
c00176dc:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176e0:	74 11                	je     c00176f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176e2:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176e6:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176ea:	c1 fe 03             	sar    esi,0x3
c00176ed:	0f af f0             	imul   esi,eax
c00176f0:	83 c6 12             	add    esi,0x12
c00176f3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176f7:	74 04                	je     c00176fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176f9:	85 ff                	test   edi,edi
c00176fb:	75 12                	jne    c001770f <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176fd:	83 ec 0c             	sub    esp,0xc
c0017700:	68 38 c2 02 c0       	push   0xc002c238
c0017705:	e8 dd b6 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001770a:	e9 ce 00 00 00       	jmp    c00177dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001770f:	52                   	push   edx
c0017710:	52                   	push   edx
c0017711:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017715:	50                   	push   eax
c0017716:	68 4d c2 02 c0       	push   0xc002c24d
c001771b:	e8 c7 b6 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0017720:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017724:	83 c4 10             	add    esp,0x10
c0017727:	80 fa 02             	cmp    dl,0x2
c001772a:	0f 85 98 00 00 00    	jne    c00177c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017730:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017735:	75 10                	jne    c0017747 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017737:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001773b:	75 0a                	jne    c0017747 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001773d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017740:	83 e8 18             	sub    eax,0x18
c0017743:	a8 f7                	test   al,0xf7
c0017745:	74 0a                	je     c0017751 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017747:	83 ec 0c             	sub    esp,0xc
c001774a:	68 5a c2 02 c0       	push   0xc002c25a
c001774f:	eb 7f                	jmp    c00177d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017751:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017759:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017761:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017765:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001776d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017771:	75 0c                	jne    c001777f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017773:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017778:	c1 e0 18             	shl    eax,0x18
c001777b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001777f:	41                   	inc    ecx
c0017780:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017785:	c1 e2 10             	shl    edx,0x10
c0017788:	89 d0                	mov    eax,edx
c001778a:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001778f:	c1 e2 08             	shl    edx,0x8
c0017792:	09 c2                	or     edx,eax
c0017794:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017798:	09 c2                	or     edx,eax
c001779a:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001779e:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177a2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177a6:	c1 f8 03             	sar    eax,0x3
c00177a9:	01 c6                	add    esi,eax
c00177ab:	89 c8                	mov    eax,ecx
c00177ad:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177b1:	39 c7                	cmp    edi,eax
c00177b3:	7f b0                	jg     c0017765 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00177b5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177bd:	39 14 24             	cmp    DWORD PTR [esp],edx
c00177c0:	7e 22                	jle    c00177e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00177c2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177c6:	eb 99                	jmp    c0017761 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177c8:	50                   	push   eax
c00177c9:	50                   	push   eax
c00177ca:	52                   	push   edx
c00177cb:	68 68 c2 02 c0       	push   0xc002c268
c00177d0:	e8 12 b6 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00177d5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177d8:	e8 bf 80 ff ff       	call   c000f89c <free>
c00177dd:	83 c4 10             	add    esp,0x10
c00177e0:	31 ed                	xor    ebp,ebp
c00177e2:	eb 0f                	jmp    c00177f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177e8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177eb:	89 38                	mov    DWORD PTR [eax],edi
c00177ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177f1:	89 08                	mov    DWORD PTR [eax],ecx
c00177f3:	83 c4 1c             	add    esp,0x1c
c00177f6:	89 e8                	mov    eax,ebp
c00177f8:	5b                   	pop    ebx
c00177f9:	5e                   	pop    esi
c00177fa:	5f                   	pop    edi
c00177fb:	5d                   	pop    ebp
c00177fc:	c3                   	ret    
c00177fd:	90                   	nop

c00177fe <Video::putTGA(int, int, unsigned char*, int)>:
c00177fe:	55                   	push   ebp
c00177ff:	57                   	push   edi
c0017800:	56                   	push   esi
c0017801:	53                   	push   ebx
c0017802:	83 ec 28             	sub    esp,0x28
c0017805:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017809:	8d 44 24 18          	lea    eax,[esp+0x18]
c001780d:	50                   	push   eax
c001780e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017812:	50                   	push   eax
c0017813:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017817:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001781b:	56                   	push   esi
c001781c:	e8 5b fe ff ff       	call   c001767c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017821:	83 c4 20             	add    esp,0x20
c0017824:	85 c0                	test   eax,eax
c0017826:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001782a:	74 35                	je     c0017861 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001782c:	89 c7                	mov    edi,eax
c001782e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017832:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017836:	39 d8                	cmp    eax,ebx
c0017838:	7e 27                	jle    c0017861 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001783a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001783e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017842:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017846:	39 e8                	cmp    eax,ebp
c0017848:	7e 14                	jle    c001785e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001784a:	8b 06                	mov    eax,DWORD PTR [esi]
c001784c:	83 c7 04             	add    edi,0x4
c001784f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017852:	53                   	push   ebx
c0017853:	55                   	push   ebp
c0017854:	45                   	inc    ebp
c0017855:	56                   	push   esi
c0017856:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017859:	83 c4 10             	add    esp,0x10
c001785c:	eb e0                	jmp    c001783e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001785e:	43                   	inc    ebx
c001785f:	eb cd                	jmp    c001782e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017861:	83 c4 1c             	add    esp,0x1c
c0017864:	5b                   	pop    ebx
c0017865:	5e                   	pop    esi
c0017866:	5f                   	pop    edi
c0017867:	5d                   	pop    ebp
c0017868:	c3                   	ret    
c0017869:	90                   	nop

c001786a <ACPI::close(int, int, void*)>:
c001786a:	83 ec 1c             	sub    esp,0x1c
c001786d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017875:	74 0a                	je     c0017881 <ACPI::close(int, int, void*)+0x17>
c0017877:	b8 00 00 00 00       	mov    eax,0x0
c001787c:	e9 9a 00 00 00       	jmp    c001791b <ACPI::close(int, int, void*)+0xb1>
c0017881:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017886:	75 37                	jne    c00178bf <ACPI::close(int, int, void*)+0x55>
c0017888:	83 ec 0c             	sub    esp,0xc
c001788b:	68 c4 c2 02 c0       	push   0xc002c2c4
c0017890:	e8 52 b5 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0017895:	83 c4 10             	add    esp,0x10
c0017898:	a1 a8 1a 03 c0       	mov    eax,ds:0xc0031aa8
c001789d:	85 c0                	test   eax,eax
c001789f:	74 07                	je     c00178a8 <ACPI::close(int, int, void*)+0x3e>
c00178a1:	a1 a8 1a 03 c0       	mov    eax,ds:0xc0031aa8
c00178a6:	ff d0                	call   eax
c00178a8:	83 ec 0c             	sub    esp,0xc
c00178ab:	68 38 c4 02 c0       	push   0xc002c438
c00178b0:	e8 7a 30 00 00       	call   c001a92f <Krnl::panic(char const*)>
c00178b5:	83 c4 10             	add    esp,0x10
c00178b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178bd:	eb 5c                	jmp    c001791b <ACPI::close(int, int, void*)+0xb1>
c00178bf:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00178c4:	75 50                	jne    c0017916 <ACPI::close(int, int, void*)+0xac>
c00178c6:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c00178cb:	85 c0                	test   eax,eax
c00178cd:	74 07                	je     c00178d6 <ACPI::close(int, int, void*)+0x6c>
c00178cf:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c00178d4:	ff d0                	call   eax
c00178d6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178db:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178e0:	83 e0 02             	and    eax,0x2
c00178e3:	74 1c                	je     c0017901 <ACPI::close(int, int, void*)+0x97>
c00178e5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178f0:	89 c2                	mov    edx,eax
c00178f2:	ec                   	in     al,dx
c00178f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178f7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178ff:	eb da                	jmp    c00178db <ACPI::close(int, int, void*)+0x71>
c0017901:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017908:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001790d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017911:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017915:	ee                   	out    dx,al
c0017916:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001791b:	83 c4 1c             	add    esp,0x1c
c001791e:	c3                   	ret    

c001791f <findRSDP()>:
c001791f:	83 ec 1c             	sub    esp,0x1c
c0017922:	83 ec 0c             	sub    esp,0xc
c0017925:	68 d1 c2 02 c0       	push   0xc002c2d1
c001792a:	e8 b8 b4 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001792f:	83 c4 10             	add    esp,0x10
c0017932:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0017937:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001793d:	83 e0 04             	and    eax,0x4
c0017940:	84 c0                	test   al,al
c0017942:	75 07                	jne    c001794b <findRSDP()+0x2c>
c0017944:	b8 00 00 00 00       	mov    eax,0x0
c0017949:	eb 6a                	jmp    c00179b5 <findRSDP()+0x96>
c001794b:	a1 34 f4 02 c0       	mov    eax,ds:0xc002f434
c0017950:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017955:	7f 1b                	jg     c0017972 <findRSDP()+0x53>
c0017957:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001795c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017962:	83 e2 fb             	and    edx,0xfffffffb
c0017965:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001796b:	b8 00 00 00 00       	mov    eax,0x0
c0017970:	eb 43                	jmp    c00179b5 <findRSDP()+0x96>
c0017972:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001797a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017982:	77 2c                	ja     c00179b0 <findRSDP()+0x91>
c0017984:	83 ec 04             	sub    esp,0x4
c0017987:	6a 08                	push   0x8
c0017989:	68 df c2 02 c0       	push   0xc002c2df
c001798e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017992:	e8 b5 8c fe ff       	call   c000064c <memcmp>
c0017997:	83 c4 10             	add    esp,0x10
c001799a:	85 c0                	test   eax,eax
c001799c:	0f 94 c0             	sete   al
c001799f:	84 c0                	test   al,al
c00179a1:	74 06                	je     c00179a9 <findRSDP()+0x8a>
c00179a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179a7:	eb 0c                	jmp    c00179b5 <findRSDP()+0x96>
c00179a9:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179ae:	eb ca                	jmp    c001797a <findRSDP()+0x5b>
c00179b0:	b8 00 00 00 00       	mov    eax,0x0
c00179b5:	83 c4 1c             	add    esp,0x1c
c00179b8:	c3                   	ret    

c00179b9 <loadACPITables(unsigned char*)>:
c00179b9:	57                   	push   edi
c00179ba:	56                   	push   esi
c00179bb:	53                   	push   ebx
c00179bc:	83 ec 60             	sub    esp,0x60
c00179bf:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00179c4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179ca:	83 e0 04             	and    eax,0x4
c00179cd:	84 c0                	test   al,al
c00179cf:	0f 84 33 02 00 00    	je     c0017c08 <loadACPITables(unsigned char*)+0x24f>
c00179d5:	a0 c0 1c 03 c0       	mov    al,ds:0xc0031cc0
c00179da:	84 c0                	test   al,al
c00179dc:	74 75                	je     c0017a53 <loadACPITables(unsigned char*)+0x9a>
c00179de:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00179e2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00179e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ed:	83 e8 24             	sub    eax,0x24
c00179f0:	c1 e8 03             	shr    eax,0x3
c00179f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00179f7:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00179ff:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a03:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017a07:	0f 8d b2 00 00 00    	jge    c0017abf <loadACPITables(unsigned char*)+0x106>
c0017a0d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a11:	83 c0 24             	add    eax,0x24
c0017a14:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017a18:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017a1c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017a20:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a24:	c1 e0 03             	shl    eax,0x3
c0017a27:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017a2b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a2f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a34:	89 c1                	mov    ecx,eax
c0017a36:	a1 ac 1a 03 c0       	mov    eax,ds:0xc0031aac
c0017a3b:	8d 50 01             	lea    edx,[eax+0x1]
c0017a3e:	89 15 ac 1a 03 c0    	mov    DWORD PTR ds:0xc0031aac,edx
c0017a44:	89 ca                	mov    edx,ecx
c0017a46:	89 14 c5 c4 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce53c],edx
c0017a4d:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017a51:	eb ac                	jmp    c00179ff <loadACPITables(unsigned char*)+0x46>
c0017a53:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a57:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017a5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a62:	83 e8 24             	sub    eax,0x24
c0017a65:	c1 e8 02             	shr    eax,0x2
c0017a68:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017a6c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017a74:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017a78:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017a7c:	7d 41                	jge    c0017abf <loadACPITables(unsigned char*)+0x106>
c0017a7e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a82:	83 c0 24             	add    eax,0x24
c0017a85:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017a89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a8d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a91:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017a95:	c1 e0 02             	shl    eax,0x2
c0017a98:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017a9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aa0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017aa2:	a1 ac 1a 03 c0       	mov    eax,ds:0xc0031aac
c0017aa7:	8d 50 01             	lea    edx,[eax+0x1]
c0017aaa:	89 15 ac 1a 03 c0    	mov    DWORD PTR ds:0xc0031aac,edx
c0017ab0:	89 ca                	mov    edx,ecx
c0017ab2:	89 14 c5 c4 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce53c],edx
c0017ab9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017abd:	eb b5                	jmp    c0017a74 <loadACPITables(unsigned char*)+0xbb>
c0017abf:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017ac7:	a1 ac 1a 03 c0       	mov    eax,ds:0xc0031aac
c0017acc:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017ad0:	0f 8d 33 01 00 00    	jge    c0017c09 <loadACPITables(unsigned char*)+0x250>
c0017ad6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017ada:	8b 04 c5 c4 1a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce53c]
c0017ae1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ae5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ae9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017aed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017af1:	25 ff 0f 00 00       	and    eax,0xfff
c0017af6:	89 c6                	mov    esi,eax
c0017af8:	8b 1d 70 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f570
c0017afe:	83 ec 0c             	sub    esp,0xc
c0017b01:	6a 01                	push   0x1
c0017b03:	e8 d9 9e ff ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c0017b08:	83 c4 10             	add    esp,0x10
c0017b0b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b0f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b15:	83 ec 0c             	sub    esp,0xc
c0017b18:	6a 01                	push   0x1
c0017b1a:	6a 01                	push   0x1
c0017b1c:	50                   	push   eax
c0017b1d:	52                   	push   edx
c0017b1e:	53                   	push   ebx
c0017b1f:	e8 ea a9 ff ff       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b24:	83 c4 20             	add    esp,0x20
c0017b27:	09 f0                	or     eax,esi
c0017b29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b2d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b31:	c1 e0 03             	shl    eax,0x3
c0017b34:	05 c0 1a 03 c0       	add    eax,0xc0031ac0
c0017b39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b45:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017b4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017b5d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017b61:	89 c6                	mov    esi,eax
c0017b63:	89 d7                	mov    edi,edx
c0017b65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017b67:	89 c8                	mov    eax,ecx
c0017b69:	89 fa                	mov    edx,edi
c0017b6b:	89 f3                	mov    ebx,esi
c0017b6d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017b71:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b88:	05 00 10 00 00       	add    eax,0x1000
c0017b8d:	c1 e8 0c             	shr    eax,0xc
c0017b90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017b94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba0:	25 ff 0f 00 00       	and    eax,0xfff
c0017ba5:	89 c6                	mov    esi,eax
c0017ba7:	8b 1d 70 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f570
c0017bad:	83 ec 0c             	sub    esp,0xc
c0017bb0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017bb4:	e8 28 9e ff ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c0017bb9:	83 c4 10             	add    esp,0x10
c0017bbc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017bc0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bc6:	83 ec 0c             	sub    esp,0xc
c0017bc9:	6a 01                	push   0x1
c0017bcb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017bcf:	50                   	push   eax
c0017bd0:	52                   	push   edx
c0017bd1:	53                   	push   ebx
c0017bd2:	e8 37 a9 ff ff       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bd7:	83 c4 20             	add    esp,0x20
c0017bda:	09 f0                	or     eax,esi
c0017bdc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017be4:	83 ec 0c             	sub    esp,0xc
c0017be7:	50                   	push   eax
c0017be8:	e8 b4 a2 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c0017bed:	83 c4 10             	add    esp,0x10
c0017bf0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017bf4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bf8:	89 14 c5 c4 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce53c],edx
c0017bff:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017c03:	e9 bf fe ff ff       	jmp    c0017ac7 <loadACPITables(unsigned char*)+0x10e>
c0017c08:	90                   	nop
c0017c09:	83 c4 60             	add    esp,0x60
c0017c0c:	5b                   	pop    ebx
c0017c0d:	5e                   	pop    esi
c0017c0e:	5f                   	pop    edi
c0017c0f:	c3                   	ret    

c0017c10 <findRSDT(unsigned char*)>:
c0017c10:	57                   	push   edi
c0017c11:	56                   	push   esi
c0017c12:	53                   	push   ebx
c0017c13:	83 ec 50             	sub    esp,0x50
c0017c16:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0017c1b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c21:	83 e0 04             	and    eax,0x4
c0017c24:	84 c0                	test   al,al
c0017c26:	75 0a                	jne    c0017c32 <findRSDT(unsigned char*)+0x22>
c0017c28:	b8 00 00 00 00       	mov    eax,0x0
c0017c2d:	e9 21 01 00 00       	jmp    c0017d53 <findRSDT(unsigned char*)+0x143>
c0017c32:	89 e0                	mov    eax,esp
c0017c34:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c38:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017c3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017c40:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017c48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c4c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c50:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017c54:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017c58:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017c5c:	89 c6                	mov    esi,eax
c0017c5e:	89 d7                	mov    edi,edx
c0017c60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017c62:	89 c8                	mov    eax,ecx
c0017c64:	89 fa                	mov    edx,edi
c0017c66:	89 f3                	mov    ebx,esi
c0017c68:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017c6c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017c70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c74:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017c78:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017c7c:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017c84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c88:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c8c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017c98:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017c9c:	25 ff 0f 00 00       	and    eax,0xfff
c0017ca1:	89 c6                	mov    esi,eax
c0017ca3:	8b 1d 70 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f570
c0017ca9:	83 ec 0c             	sub    esp,0xc
c0017cac:	6a 02                	push   0x2
c0017cae:	e8 2e 9d ff ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c0017cb3:	83 c4 10             	add    esp,0x10
c0017cb6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017cba:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cc0:	83 ec 0c             	sub    esp,0xc
c0017cc3:	6a 01                	push   0x1
c0017cc5:	6a 02                	push   0x2
c0017cc7:	50                   	push   eax
c0017cc8:	52                   	push   edx
c0017cc9:	53                   	push   ebx
c0017cca:	e8 3f a8 ff ff       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ccf:	83 c4 20             	add    esp,0x20
c0017cd2:	09 f0                	or     eax,esi
c0017cd4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017cd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017cdc:	25 ff 0f 00 00       	and    eax,0xfff
c0017ce1:	89 c6                	mov    esi,eax
c0017ce3:	8b 1d 70 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f570
c0017ce9:	83 ec 0c             	sub    esp,0xc
c0017cec:	6a 02                	push   0x2
c0017cee:	e8 ee 9c ff ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c0017cf3:	83 c4 10             	add    esp,0x10
c0017cf6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017cfa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d00:	83 ec 0c             	sub    esp,0xc
c0017d03:	6a 01                	push   0x1
c0017d05:	6a 02                	push   0x2
c0017d07:	50                   	push   eax
c0017d08:	52                   	push   edx
c0017d09:	53                   	push   ebx
c0017d0a:	e8 ff a7 ff ff       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d0f:	83 c4 20             	add    esp,0x20
c0017d12:	09 f0                	or     eax,esi
c0017d14:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d18:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017d1d:	75 11                	jne    c0017d30 <findRSDT(unsigned char*)+0x120>
c0017d1f:	c6 05 c0 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031cc0,0x0
c0017d26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d2a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d2e:	eb 1f                	jmp    c0017d4f <findRSDT(unsigned char*)+0x13f>
c0017d30:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017d35:	75 11                	jne    c0017d48 <findRSDT(unsigned char*)+0x138>
c0017d37:	c6 05 c0 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031cc0,0x1
c0017d3e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d42:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d46:	eb 07                	jmp    c0017d4f <findRSDT(unsigned char*)+0x13f>
c0017d48:	b8 00 00 00 00       	mov    eax,0x0
c0017d4d:	eb 04                	jmp    c0017d53 <findRSDT(unsigned char*)+0x143>
c0017d4f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017d53:	83 c4 50             	add    esp,0x50
c0017d56:	5b                   	pop    ebx
c0017d57:	5e                   	pop    esi
c0017d58:	5f                   	pop    edi
c0017d59:	c3                   	ret    

c0017d5a <findDataTable(unsigned char*, char*)>:
c0017d5a:	83 ec 1c             	sub    esp,0x1c
c0017d5d:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0017d62:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d68:	83 e0 04             	and    eax,0x4
c0017d6b:	84 c0                	test   al,al
c0017d6d:	75 07                	jne    c0017d76 <findDataTable(unsigned char*, char*)+0x1c>
c0017d6f:	b8 00 00 00 00       	mov    eax,0x0
c0017d74:	eb 7c                	jmp    c0017df2 <findDataTable(unsigned char*, char*)+0x98>
c0017d76:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d7e:	a1 ac 1a 03 c0       	mov    eax,ds:0xc0031aac
c0017d83:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d87:	7d 3a                	jge    c0017dc3 <findDataTable(unsigned char*, char*)+0x69>
c0017d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d8d:	c1 e0 03             	shl    eax,0x3
c0017d90:	05 c0 1a 03 c0       	add    eax,0xc0031ac0
c0017d95:	83 ec 04             	sub    esp,0x4
c0017d98:	6a 04                	push   0x4
c0017d9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d9e:	50                   	push   eax
c0017d9f:	e8 a8 88 fe ff       	call   c000064c <memcmp>
c0017da4:	83 c4 10             	add    esp,0x10
c0017da7:	85 c0                	test   eax,eax
c0017da9:	0f 94 c0             	sete   al
c0017dac:	84 c0                	test   al,al
c0017dae:	74 0d                	je     c0017dbd <findDataTable(unsigned char*, char*)+0x63>
c0017db0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017db4:	8b 04 c5 c4 1a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce53c]
c0017dbb:	eb 35                	jmp    c0017df2 <findDataTable(unsigned char*, char*)+0x98>
c0017dbd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017dc1:	eb bb                	jmp    c0017d7e <findDataTable(unsigned char*, char*)+0x24>
c0017dc3:	a0 c0 1c 03 c0       	mov    al,ds:0xc0031cc0
c0017dc8:	84 c0                	test   al,al
c0017dca:	74 07                	je     c0017dd3 <findDataTable(unsigned char*, char*)+0x79>
c0017dcc:	b8 58 00 00 00       	mov    eax,0x58
c0017dd1:	eb 05                	jmp    c0017dd8 <findDataTable(unsigned char*, char*)+0x7e>
c0017dd3:	b8 52 00 00 00       	mov    eax,0x52
c0017dd8:	83 ec 04             	sub    esp,0x4
c0017ddb:	50                   	push   eax
c0017ddc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017de0:	68 5c c4 02 c0       	push   0xc002c45c
c0017de5:	e8 fd af ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0017dea:	83 c4 10             	add    esp,0x10
c0017ded:	b8 00 00 00 00       	mov    eax,0x0
c0017df2:	83 c4 1c             	add    esp,0x1c
c0017df5:	c3                   	ret    

c0017df6 <scanMADT()>:
c0017df6:	53                   	push   ebx
c0017df7:	83 ec 38             	sub    esp,0x38
c0017dfa:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0017dff:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e05:	83 e0 04             	and    eax,0x4
c0017e08:	84 c0                	test   al,al
c0017e0a:	0f 84 63 04 00 00    	je     c0018273 <scanMADT()+0x47d>
c0017e10:	e8 0a fb ff ff       	call   c001791f <findRSDP()>
c0017e15:	a3 cc 1c 03 c0       	mov    ds:0xc0031ccc,eax
c0017e1a:	a1 cc 1c 03 c0       	mov    eax,ds:0xc0031ccc
c0017e1f:	85 c0                	test   eax,eax
c0017e21:	75 19                	jne    c0017e3c <scanMADT()+0x46>
c0017e23:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0017e28:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e2e:	83 e2 fb             	and    edx,0xfffffffb
c0017e31:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e37:	e9 3b 04 00 00       	jmp    c0018277 <scanMADT()+0x481>
c0017e3c:	a1 cc 1c 03 c0       	mov    eax,ds:0xc0031ccc
c0017e41:	83 ec 0c             	sub    esp,0xc
c0017e44:	50                   	push   eax
c0017e45:	e8 c6 fd ff ff       	call   c0017c10 <findRSDT(unsigned char*)>
c0017e4a:	83 c4 10             	add    esp,0x10
c0017e4d:	a3 c8 1c 03 c0       	mov    ds:0xc0031cc8,eax
c0017e52:	a1 c8 1c 03 c0       	mov    eax,ds:0xc0031cc8
c0017e57:	85 c0                	test   eax,eax
c0017e59:	75 19                	jne    c0017e74 <scanMADT()+0x7e>
c0017e5b:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0017e60:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e66:	83 e2 fb             	and    edx,0xfffffffb
c0017e69:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e6f:	e9 03 04 00 00       	jmp    c0018277 <scanMADT()+0x481>
c0017e74:	a1 c8 1c 03 c0       	mov    eax,ds:0xc0031cc8
c0017e79:	83 ec 0c             	sub    esp,0xc
c0017e7c:	50                   	push   eax
c0017e7d:	e8 37 fb ff ff       	call   c00179b9 <loadACPITables(unsigned char*)>
c0017e82:	83 c4 10             	add    esp,0x10
c0017e85:	a1 c8 1c 03 c0       	mov    eax,ds:0xc0031cc8
c0017e8a:	83 ec 08             	sub    esp,0x8
c0017e8d:	68 e8 c2 02 c0       	push   0xc002c2e8
c0017e92:	50                   	push   eax
c0017e93:	e8 c2 fe ff ff       	call   c0017d5a <findDataTable(unsigned char*, char*)>
c0017e98:	83 c4 10             	add    esp,0x10
c0017e9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e9f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017ea4:	75 19                	jne    c0017ebf <scanMADT()+0xc9>
c0017ea6:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0017eab:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017eb1:	83 e2 fe             	and    edx,0xfffffffe
c0017eb4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017eba:	e9 b8 03 00 00       	jmp    c0018277 <scanMADT()+0x481>
c0017ebf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ec7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ecb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ece:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017ed2:	0f 87 9f 03 00 00    	ja     c0018277 <scanMADT()+0x481>
c0017ed8:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ee0:	0f 87 91 03 00 00    	ja     c0018277 <scanMADT()+0x481>
c0017ee6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017eee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ef5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ef9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017efd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f01:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f09:	8d 50 01             	lea    edx,[eax+0x1]
c0017f0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f14:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f18:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f1c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f21:	0f 86 4f 03 00 00    	jbe    c0018276 <scanMADT()+0x480>
c0017f27:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f2c:	75 57                	jne    c0017f85 <scanMADT()+0x18f>
c0017f2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f32:	8d 50 01             	lea    edx,[eax+0x1]
c0017f35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f39:	8a 15 c0 1e 03 c0    	mov    dl,BYTE PTR ds:0xc0031ec0
c0017f3f:	0f b6 d2             	movzx  edx,dl
c0017f42:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f46:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f4a:	88 82 00 1f 03 c0    	mov    BYTE PTR [edx-0x3ffce100],al
c0017f50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f54:	8d 50 01             	lea    edx,[eax+0x1]
c0017f57:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f5b:	8a 15 c0 1e 03 c0    	mov    dl,BYTE PTR ds:0xc0031ec0
c0017f61:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f64:	88 0d c0 1e 03 c0    	mov    BYTE PTR ds:0xc0031ec0,cl
c0017f6a:	0f b6 d2             	movzx  edx,dl
c0017f6d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f71:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f75:	88 82 e0 1e 03 c0    	mov    BYTE PTR [edx-0x3ffce120],al
c0017f7b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f80:	e9 da 02 00 00       	jmp    c001825f <scanMADT()+0x469>
c0017f85:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f8a:	0f 85 14 01 00 00    	jne    c00180a4 <scanMADT()+0x2ae>
c0017f90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f94:	8d 50 01             	lea    edx,[eax+0x1]
c0017f97:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f9b:	8a 15 80 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d80
c0017fa1:	0f b6 d2             	movzx  edx,dl
c0017fa4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fa8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fac:	88 82 a0 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce260],al
c0017fb2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017fb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbe:	01 d0                	add    eax,edx
c0017fc0:	83 c0 2c             	add    eax,0x2c
c0017fc3:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc5:	0f b6 d0             	movzx  edx,al
c0017fc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcc:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fd7:	0f b6 c0             	movzx  eax,al
c0017fda:	c1 e0 08             	shl    eax,0x8
c0017fdd:	89 d1                	mov    ecx,edx
c0017fdf:	09 c1                	or     ecx,eax
c0017fe1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe5:	8d 50 02             	lea    edx,[eax+0x2]
c0017fe8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fec:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff0:	0f b6 c0             	movzx  eax,al
c0017ff3:	c1 e0 10             	shl    eax,0x10
c0017ff6:	09 c1                	or     ecx,eax
c0017ff8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ffc:	8d 50 03             	lea    edx,[eax+0x3]
c0017fff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018003:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018007:	0f b6 c0             	movzx  eax,al
c001800a:	c1 e0 18             	shl    eax,0x18
c001800d:	09 c1                	or     ecx,eax
c001800f:	89 ca                	mov    edx,ecx
c0018011:	a0 80 1d 03 c0       	mov    al,ds:0xc0031d80
c0018016:	0f b6 c0             	movzx  eax,al
c0018019:	89 14 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],edx
c0018020:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018025:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018029:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802d:	01 d0                	add    eax,edx
c001802f:	83 c0 2c             	add    eax,0x2c
c0018032:	8a 00                	mov    al,BYTE PTR [eax]
c0018034:	0f b6 d0             	movzx  edx,al
c0018037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803b:	8d 48 01             	lea    ecx,[eax+0x1]
c001803e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018042:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018046:	0f b6 c0             	movzx  eax,al
c0018049:	c1 e0 08             	shl    eax,0x8
c001804c:	89 d1                	mov    ecx,edx
c001804e:	09 c1                	or     ecx,eax
c0018050:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018054:	8d 50 02             	lea    edx,[eax+0x2]
c0018057:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001805b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001805f:	0f b6 c0             	movzx  eax,al
c0018062:	c1 e0 10             	shl    eax,0x10
c0018065:	09 c1                	or     ecx,eax
c0018067:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806b:	8d 50 03             	lea    edx,[eax+0x3]
c001806e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018072:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018076:	0f b6 c0             	movzx  eax,al
c0018079:	c1 e0 18             	shl    eax,0x18
c001807c:	09 c1                	or     ecx,eax
c001807e:	89 ca                	mov    edx,ecx
c0018080:	a0 80 1d 03 c0       	mov    al,ds:0xc0031d80
c0018085:	0f b6 c0             	movzx  eax,al
c0018088:	89 14 85 40 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1c0],edx
c001808f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018094:	a0 80 1d 03 c0       	mov    al,ds:0xc0031d80
c0018099:	40                   	inc    eax
c001809a:	a2 80 1d 03 c0       	mov    ds:0xc0031d80,al
c001809f:	e9 bb 01 00 00       	jmp    c001825f <scanMADT()+0x469>
c00180a4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180a9:	0f 85 e9 00 00 00    	jne    c0018198 <scanMADT()+0x3a2>
c00180af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b3:	8d 50 01             	lea    edx,[eax+0x1]
c00180b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180c2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ca:	8d 50 01             	lea    edx,[eax+0x1]
c00180cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180d9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00180dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e5:	01 d0                	add    eax,edx
c00180e7:	83 c0 2c             	add    eax,0x2c
c00180ea:	8a 00                	mov    al,BYTE PTR [eax]
c00180ec:	0f b6 d0             	movzx  edx,al
c00180ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00180f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180fa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180fe:	0f b6 c0             	movzx  eax,al
c0018101:	c1 e0 08             	shl    eax,0x8
c0018104:	89 d1                	mov    ecx,edx
c0018106:	09 c1                	or     ecx,eax
c0018108:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001810c:	8d 50 02             	lea    edx,[eax+0x2]
c001810f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018113:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018117:	0f b6 c0             	movzx  eax,al
c001811a:	c1 e0 10             	shl    eax,0x10
c001811d:	09 c1                	or     ecx,eax
c001811f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018123:	8d 50 03             	lea    edx,[eax+0x3]
c0018126:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001812a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001812e:	0f b6 c0             	movzx  eax,al
c0018131:	c1 e0 18             	shl    eax,0x18
c0018134:	09 c8                	or     eax,ecx
c0018136:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001813a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001813f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018143:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018147:	01 d0                	add    eax,edx
c0018149:	83 c0 2c             	add    eax,0x2c
c001814c:	8a 00                	mov    al,BYTE PTR [eax]
c001814e:	0f b6 c0             	movzx  eax,al
c0018151:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018155:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018158:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001815c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018160:	0f b6 d2             	movzx  edx,dl
c0018163:	c1 e2 08             	shl    edx,0x8
c0018166:	09 d0                	or     eax,edx
c0018168:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001816d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018172:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018177:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001817b:	88 90 40 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd19c0],dl
c0018181:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018186:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001818b:	66 89 84 12 60 1d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce2a0],ax
c0018193:	e9 c7 00 00 00       	jmp    c001825f <scanMADT()+0x469>
c0018198:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001819d:	0f 85 b0 00 00 00    	jne    c0018253 <scanMADT()+0x45d>
c00181a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a7:	8d 50 01             	lea    edx,[eax+0x1]
c00181aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181b2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181b6:	0f b6 c0             	movzx  eax,al
c00181b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181c5:	01 d0                	add    eax,edx
c00181c7:	83 c0 2c             	add    eax,0x2c
c00181ca:	8a 00                	mov    al,BYTE PTR [eax]
c00181cc:	0f b6 d0             	movzx  edx,al
c00181cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d3:	8d 48 01             	lea    ecx,[eax+0x1]
c00181d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181da:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181de:	0f b6 c0             	movzx  eax,al
c00181e1:	c1 e0 08             	shl    eax,0x8
c00181e4:	09 d0                	or     eax,edx
c00181e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181ea:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f3:	8d 50 01             	lea    edx,[eax+0x1]
c00181f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018202:	0f b6 c0             	movzx  eax,al
c0018205:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820d:	c1 e0 08             	shl    eax,0x8
c0018210:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018214:	89 c1                	mov    ecx,eax
c0018216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001821a:	c1 e0 18             	shl    eax,0x18
c001821d:	89 c3                	mov    ebx,eax
c001821f:	a1 d0 1c 03 c0       	mov    eax,ds:0xc0031cd0
c0018224:	8d 50 01             	lea    edx,[eax+0x1]
c0018227:	89 15 d0 1c 03 c0    	mov    DWORD PTR ds:0xc0031cd0,edx
c001822d:	09 d9                	or     ecx,ebx
c001822f:	89 ca                	mov    edx,ecx
c0018231:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c0018238:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001823c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018244:	68 8c c4 02 c0       	push   0xc002c48c
c0018249:	e8 99 ab ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001824e:	83 c4 10             	add    esp,0x10
c0018251:	eb 0c                	jmp    c001825f <scanMADT()+0x469>
c0018253:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018258:	75 05                	jne    c001825f <scanMADT()+0x469>
c001825a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001825f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018268:	01 d0                	add    eax,edx
c001826a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001826e:	e9 54 fc ff ff       	jmp    c0017ec7 <scanMADT()+0xd1>
c0018273:	90                   	nop
c0018274:	eb 01                	jmp    c0018277 <scanMADT()+0x481>
c0018276:	90                   	nop
c0018277:	83 c4 38             	add    esp,0x38
c001827a:	5b                   	pop    ebx
c001827b:	c3                   	ret    

c001827c <ACPI::ACPI()>:
c001827c:	83 ec 0c             	sub    esp,0xc
c001827f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018283:	83 ec 08             	sub    esp,0x8
c0018286:	68 ed c2 02 c0       	push   0xc002c2ed
c001828b:	50                   	push   eax
c001828c:	e8 93 c1 ff ff       	call   c0014424 <Device::Device(char const*)>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	ba 28 c5 02 c0       	mov    edx,0xc002c528
c0018299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829d:	89 10                	mov    DWORD PTR [eax],edx
c001829f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ae:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182bc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00182c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ca:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182dc:	e8 15 fb ff ff       	call   c0017df6 <scanMADT()>
c00182e1:	90                   	nop
c00182e2:	83 c4 0c             	add    esp,0xc
c00182e5:	c3                   	ret    

c00182e6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00182e6:	83 ec 2c             	sub    esp,0x2c
c00182e9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00182ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00182f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182f5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00182f9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00182fe:	88 d0                	mov    al,dl
c0018300:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018304:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018309:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018311:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018315:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001831b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001831f:	0f 8d 97 00 00 00    	jge    c00183bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018325:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018329:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001832d:	83 c2 2a             	add    edx,0x2a
c0018330:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018334:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018339:	75 78                	jne    c00183b3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001833b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001833f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018343:	83 c2 2a             	add    edx,0x2a
c0018346:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001834a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001834e:	75 63                	jne    c00183b3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018350:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018355:	74 3a                	je     c0018391 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018357:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001835b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001835f:	83 c2 2a             	add    edx,0x2a
c0018362:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018366:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001836a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001836d:	39 c2                	cmp    edx,eax
c001836f:	74 10                	je     c0018381 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018371:	83 ec 0c             	sub    esp,0xc
c0018374:	68 c8 c4 02 c0       	push   0xc002c4c8
c0018379:	e8 b1 25 00 00       	call   c001a92f <Krnl::panic(char const*)>
c001837e:	83 c4 10             	add    esp,0x10
c0018381:	83 ec 0c             	sub    esp,0xc
c0018384:	68 f2 c2 02 c0       	push   0xc002c2f2
c0018389:	e8 a1 25 00 00       	call   c001a92f <Krnl::panic(char const*)>
c001838e:	83 c4 10             	add    esp,0x10
c0018391:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018399:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001839d:	83 c2 2a             	add    edx,0x2a
c00183a0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00183a6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183a9:	89 01                	mov    DWORD PTR [ecx],eax
c00183ab:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183ae:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183b3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183b7:	e9 55 ff ff ff       	jmp    c0018311 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183bc:	90                   	nop
c00183bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c1:	83 c4 2c             	add    esp,0x2c
c00183c4:	c2 04 00             	ret    0x4
c00183c7:	90                   	nop

c00183c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183c8:	83 ec 1c             	sub    esp,0x1c
c00183cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183cf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183d7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00183dc:	88 c8                	mov    al,cl
c00183de:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183e2:	88 d0                	mov    al,dl
c00183e4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ec:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183f9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00183fd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018405:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001840b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001840f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018412:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018416:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001841b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001841f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018425:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018429:	8d 48 01             	lea    ecx,[eax+0x1]
c001842c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018430:	83 c2 2a             	add    edx,0x2a
c0018433:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001843b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018445:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018448:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001844c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018454:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001845a:	8d 50 01             	lea    edx,[eax+0x1]
c001845d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018461:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001846b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018471:	3d 00 02 00 00       	cmp    eax,0x200
c0018476:	75 10                	jne    c0018488 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018478:	83 ec 0c             	sub    esp,0xc
c001847b:	68 01 c3 02 c0       	push   0xc002c301
c0018480:	e8 aa 24 00 00       	call   c001a92f <Krnl::panic(char const*)>
c0018485:	83 c4 10             	add    esp,0x10
c0018488:	90                   	nop
c0018489:	83 c4 1c             	add    esp,0x1c
c001848c:	c3                   	ret    
c001848d:	90                   	nop

c001848e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001848e:	b8 00 00 00 00       	mov    eax,0x0
c0018493:	c3                   	ret    

c0018494 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018494:	83 ec 1c             	sub    esp,0x1c
c0018497:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001849b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001849e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184a2:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00184a7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184ac:	83 ec 08             	sub    esp,0x8
c00184af:	52                   	push   edx
c00184b0:	50                   	push   eax
c00184b1:	e8 ec 69 ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c00184b6:	83 c4 10             	add    esp,0x10
c00184b9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184bd:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00184c2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184c7:	83 ec 04             	sub    esp,0x4
c00184ca:	6a 01                	push   0x1
c00184cc:	52                   	push   edx
c00184cd:	50                   	push   eax
c00184ce:	e8 e5 6a ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00184d3:	83 c4 10             	add    esp,0x10
c00184d6:	90                   	nop
c00184d7:	83 c4 1c             	add    esp,0x1c
c00184da:	c3                   	ret    
c00184db:	90                   	nop

c00184dc <ACPI::sleep()>:
c00184dc:	83 ec 0c             	sub    esp,0xc
c00184df:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00184e4:	85 c0                	test   eax,eax
c00184e6:	74 07                	je     c00184ef <ACPI::sleep()+0x13>
c00184e8:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00184ed:	ff d0                	call   eax
c00184ef:	90                   	nop
c00184f0:	83 c4 0c             	add    esp,0xc
c00184f3:	c3                   	ret    

c00184f4 <ACPI::open(int, int, void*)>:
c00184f4:	57                   	push   edi
c00184f5:	56                   	push   esi
c00184f6:	53                   	push   ebx
c00184f7:	81 ec 70 01 00 00    	sub    esp,0x170
c00184fd:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018504:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001850b:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018512:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018519:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001851e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018524:	83 e0 04             	and    eax,0x4
c0018527:	84 c0                	test   al,al
c0018529:	74 53                	je     c001857e <ACPI::open(int, int, void*)+0x8a>
c001852b:	a1 c8 1c 03 c0       	mov    eax,ds:0xc0031cc8
c0018530:	83 ec 08             	sub    esp,0x8
c0018533:	68 1e c3 02 c0       	push   0xc002c31e
c0018538:	50                   	push   eax
c0018539:	e8 1c f8 ff ff       	call   c0017d5a <findDataTable(unsigned char*, char*)>
c001853e:	83 c4 10             	add    esp,0x10
c0018541:	89 84 24 6c 01 00 00 	mov    DWORD PTR [esp+0x16c],eax
c0018548:	83 bc 24 6c 01 00 00 00 	cmp    DWORD PTR [esp+0x16c],0x0
c0018550:	74 2c                	je     c001857e <ACPI::open(int, int, void*)+0x8a>
c0018552:	83 ec 0c             	sub    esp,0xc
c0018555:	68 23 c3 02 c0       	push   0xc002c323
c001855a:	e8 88 a8 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001855f:	83 c4 10             	add    esp,0x10
c0018562:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018569:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018570:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018577:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001857e:	c7 84 24 68 01 00 00 5f 0c 00 00 	mov    DWORD PTR [esp+0x168],0xc5f
c0018589:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0018590:	8a 00                	mov    al,BYTE PTR [eax]
c0018592:	3c 01                	cmp    al,0x1
c0018594:	75 2e                	jne    c00185c4 <ACPI::open(int, int, void*)+0xd0>
c0018596:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001859d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185a4:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00185ab:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185b2:	83 ec 0c             	sub    esp,0xc
c00185b5:	68 34 c3 02 c0       	push   0xc002c334
c00185ba:	e8 28 a8 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00185bf:	83 c4 10             	add    esp,0x10
c00185c2:	eb 2b                	jmp    c00185ef <ACPI::open(int, int, void*)+0xfb>
c00185c4:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00185cb:	8a 00                	mov    al,BYTE PTR [eax]
c00185cd:	3c 02                	cmp    al,0x2
c00185cf:	75 1e                	jne    c00185ef <ACPI::open(int, int, void*)+0xfb>
c00185d1:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00185d8:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185df:	83 ec 0c             	sub    esp,0xc
c00185e2:	68 3c c3 02 c0       	push   0xc002c33c
c00185e7:	e8 fb a7 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00185ec:	83 c4 10             	add    esp,0x10
c00185ef:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00185f6:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185fc:	83 f0 01             	xor    eax,0x1
c00185ff:	84 c0                	test   al,al
c0018601:	74 7c                	je     c001867f <ACPI::open(int, int, void*)+0x18b>
c0018603:	83 ec 0c             	sub    esp,0xc
c0018606:	68 44 c3 02 c0       	push   0xc002c344
c001860b:	e8 d7 a7 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0018610:	83 c4 10             	add    esp,0x10
c0018613:	e8 38 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018618:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001861f:	83 bc 24 64 01 00 00 01 	cmp    DWORD PTR [esp+0x164],0x1
c0018627:	75 2e                	jne    c0018657 <ACPI::open(int, int, void*)+0x163>
c0018629:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018630:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018637:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001863e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018645:	83 ec 0c             	sub    esp,0xc
c0018648:	68 52 c3 02 c0       	push   0xc002c352
c001864d:	e8 95 a7 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0018652:	83 c4 10             	add    esp,0x10
c0018655:	eb 28                	jmp    c001867f <ACPI::open(int, int, void*)+0x18b>
c0018657:	83 bc 24 64 01 00 00 02 	cmp    DWORD PTR [esp+0x164],0x2
c001865f:	75 1e                	jne    c001867f <ACPI::open(int, int, void*)+0x18b>
c0018661:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018668:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001866f:	83 ec 0c             	sub    esp,0xc
c0018672:	68 5c c3 02 c0       	push   0xc002c35c
c0018677:	e8 6b a7 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001867c:	83 c4 10             	add    esp,0x10
c001867f:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018686:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001868c:	84 c0                	test   al,al
c001868e:	74 16                	je     c00186a6 <ACPI::open(int, int, void*)+0x1b2>
c0018690:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018697:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001869d:	83 f0 01             	xor    eax,0x1
c00186a0:	0f b6 c0             	movzx  eax,al
c00186a3:	40                   	inc    eax
c00186a4:	eb 05                	jmp    c00186ab <ACPI::open(int, int, void*)+0x1b7>
c00186a6:	b8 00 00 00 00       	mov    eax,0x0
c00186ab:	83 ec 08             	sub    esp,0x8
c00186ae:	50                   	push   eax
c00186af:	68 66 c3 02 c0       	push   0xc002c366
c00186b4:	e8 2e a7 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00186b9:	83 c4 10             	add    esp,0x10
c00186bc:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00186c3:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186c9:	84 c0                	test   al,al
c00186cb:	74 7c                	je     c0018749 <ACPI::open(int, int, void*)+0x255>
c00186cd:	c7 84 24 44 01 00 00 58 01 00 00 	mov    DWORD PTR [esp+0x144],0x158
c00186d8:	83 ec 0c             	sub    esp,0xc
c00186db:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00186e2:	e8 a5 71 ff ff       	call   c000f88c <malloc>
c00186e7:	83 c4 10             	add    esp,0x10
c00186ea:	89 c3                	mov    ebx,eax
c00186ec:	83 ec 0c             	sub    esp,0xc
c00186ef:	53                   	push   ebx
c00186f0:	e8 cb ab 00 00       	call   c00232c0 <PCI::PCI()>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	89 9c 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],ebx
c00186ff:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018706:	83 ec 08             	sub    esp,0x8
c0018709:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018710:	50                   	push   eax
c0018711:	e8 0a bb ff ff       	call   c0014220 <Device::addChild(Device*)>
c0018716:	83 c4 10             	add    esp,0x10
c0018719:	8b 84 24 60 01 00 00 	mov    eax,DWORD PTR [esp+0x160]
c0018720:	8b 00                	mov    eax,DWORD PTR [eax]
c0018722:	83 c0 08             	add    eax,0x8
c0018725:	8b 00                	mov    eax,DWORD PTR [eax]
c0018727:	6a 00                	push   0x0
c0018729:	6a 00                	push   0x0
c001872b:	6a 00                	push   0x0
c001872d:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0018734:	ff d0                	call   eax
c0018736:	83 c4 10             	add    esp,0x10
c0018739:	83 ec 0c             	sub    esp,0xc
c001873c:	68 6f c3 02 c0       	push   0xc002c36f
c0018741:	e8 a1 a6 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0018746:	83 c4 10             	add    esp,0x10
c0018749:	83 ec 0c             	sub    esp,0xc
c001874c:	68 7a c3 02 c0       	push   0xc002c37a
c0018751:	e8 36 4b 00 00       	call   c001d28c <Thr::loadKernelSymbolTable(char const*)>
c0018756:	83 c4 10             	add    esp,0x10
c0018759:	83 ec 0c             	sub    esp,0xc
c001875c:	6a 0c                	push   0xc
c001875e:	e8 bd 94 ff ff       	call   c0011c20 <Virt::setupPageSwapping(int)>
c0018763:	83 c4 10             	add    esp,0x10
c0018766:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001876d:	83 ec 08             	sub    esp,0x8
c0018770:	6a 12                	push   0x12
c0018772:	50                   	push   eax
c0018773:	e8 2c be ff ff       	call   c00145a4 <getDevicesOfType(DeviceType)>
c0018778:	83 c4 0c             	add    esp,0xc
c001877b:	83 ec 0c             	sub    esp,0xc
c001877e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018785:	50                   	push   eax
c0018786:	e8 f5 11 01 00       	call   c0029980 <LinkedList<Device>::isEmpty()>
c001878b:	83 c4 10             	add    esp,0x10
c001878e:	83 f0 01             	xor    eax,0x1
c0018791:	84 c0                	test   al,al
c0018793:	0f 84 c7 01 00 00    	je     c0018960 <ACPI::open(int, int, void*)+0x46c>
c0018799:	83 ec 0c             	sub    esp,0xc
c001879c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00187a3:	50                   	push   eax
c00187a4:	e8 f3 11 01 00       	call   c002999c <LinkedList<Device>::getFirstElement()>
c00187a9:	83 c4 10             	add    esp,0x10
c00187ac:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00187b3:	83 ec 0c             	sub    esp,0xc
c00187b6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00187bd:	50                   	push   eax
c00187be:	e8 e1 11 01 00       	call   c00299a4 <LinkedList<Device>::removeFirst()>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c00187cd:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00187d4:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00187db:	83 ec 0c             	sub    esp,0xc
c00187de:	50                   	push   eax
c00187df:	e8 3c bd ff ff       	call   c0014520 <Device::getName()>
c00187e4:	83 c4 10             	add    esp,0x10
c00187e7:	83 ec 08             	sub    esp,0x8
c00187ea:	50                   	push   eax
c00187eb:	68 f8 c4 02 c0       	push   0xc002c4f8
c00187f0:	e8 f2 a5 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c00187ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018803:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018809:	ba 09 00 00 00       	mov    edx,0x9
c001880e:	fc                   	cld    
c001880f:	89 c7                	mov    edi,eax
c0018811:	89 de                	mov    esi,ebx
c0018813:	89 d1                	mov    ecx,edx
c0018815:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018817:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001881b:	0f b6 c0             	movzx  eax,al
c001881e:	83 ec 08             	sub    esp,0x8
c0018821:	50                   	push   eax
c0018822:	68 98 c3 02 c0       	push   0xc002c398
c0018827:	e8 bb a5 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001882c:	83 c4 10             	add    esp,0x10
c001882f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018833:	0f b6 c0             	movzx  eax,al
c0018836:	83 ec 08             	sub    esp,0x8
c0018839:	50                   	push   eax
c001883a:	68 aa c3 02 c0       	push   0xc002c3aa
c001883f:	e8 a3 a5 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0018844:	83 c4 10             	add    esp,0x10
c0018847:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001884c:	0f b7 c0             	movzx  eax,ax
c001884f:	83 ec 08             	sub    esp,0x8
c0018852:	50                   	push   eax
c0018853:	68 bc c3 02 c0       	push   0xc002c3bc
c0018858:	e8 8a a5 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001885d:	83 c4 10             	add    esp,0x10
c0018860:	83 ec 08             	sub    esp,0x8
c0018863:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018867:	50                   	push   eax
c0018868:	83 ec 24             	sub    esp,0x24
c001886b:	89 e0                	mov    eax,esp
c001886d:	89 c3                	mov    ebx,eax
c001886f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018873:	ba 09 00 00 00       	mov    edx,0x9
c0018878:	89 df                	mov    edi,ebx
c001887a:	89 c6                	mov    esi,eax
c001887c:	89 d1                	mov    ecx,edx
c001887e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018880:	e8 c7 ad 00 00       	call   c002364c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018885:	83 c4 30             	add    esp,0x30
c0018888:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001888f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0018897:	0f 84 de fe ff ff    	je     c001877b <ACPI::open(int, int, void*)+0x287>
c001889d:	83 ec 08             	sub    esp,0x8
c00188a0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00188a7:	68 ce c3 02 c0       	push   0xc002c3ce
c00188ac:	e8 36 a5 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00188b1:	83 c4 10             	add    esp,0x10
c00188b4:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00188bf:	83 ec 0c             	sub    esp,0xc
c00188c2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00188c9:	e8 be 6f ff ff       	call   c000f88c <malloc>
c00188ce:	83 c4 10             	add    esp,0x10
c00188d1:	89 c3                	mov    ebx,eax
c00188d3:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c00188d8:	83 ec 04             	sub    esp,0x4
c00188db:	50                   	push   eax
c00188dc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00188e3:	53                   	push   ebx
c00188e4:	e8 5d aa ff ff       	call   c0013346 <File::File(char const*, Process*)>
c00188e9:	83 c4 10             	add    esp,0x10
c00188ec:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00188f3:	83 ec 0c             	sub    esp,0xc
c00188f6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00188fd:	e8 16 ad ff ff       	call   c0013618 <File::exists()>
c0018902:	83 c4 10             	add    esp,0x10
c0018905:	84 c0                	test   al,al
c0018907:	74 27                	je     c0018930 <ACPI::open(int, int, void*)+0x43c>
c0018909:	83 ec 08             	sub    esp,0x8
c001890c:	6a 01                	push   0x1
c001890e:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0018915:	e8 e9 53 00 00       	call   c001dd03 <Thr::loadDLL(char const*, bool)>
c001891a:	83 c4 10             	add    esp,0x10
c001891d:	83 ec 08             	sub    esp,0x8
c0018920:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0018927:	50                   	push   eax
c0018928:	e8 01 56 00 00       	call   c001df2e <Thr::executeDLL(unsigned long, void*)>
c001892d:	83 c4 10             	add    esp,0x10
c0018930:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018938:	0f 84 3d fe ff ff    	je     c001877b <ACPI::open(int, int, void*)+0x287>
c001893e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0018945:	8b 00                	mov    eax,DWORD PTR [eax]
c0018947:	83 c0 08             	add    eax,0x8
c001894a:	8b 00                	mov    eax,DWORD PTR [eax]
c001894c:	83 ec 0c             	sub    esp,0xc
c001894f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018956:	ff d0                	call   eax
c0018958:	83 c4 10             	add    esp,0x10
c001895b:	e9 1b fe ff ff       	jmp    c001877b <ACPI::open(int, int, void*)+0x287>
c0018960:	83 ec 0c             	sub    esp,0xc
c0018963:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001896a:	50                   	push   eax
c001896b:	e8 0e 10 01 00       	call   c002997e <LinkedList<Device>::~LinkedList()>
c0018970:	83 c4 10             	add    esp,0x10
c0018973:	8b 1d e8 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3e8
c0018979:	83 ec 08             	sub    esp,0x8
c001897c:	6a 01                	push   0x1
c001897e:	68 da c3 02 c0       	push   0xc002c3da
c0018983:	e8 7b 53 00 00       	call   c001dd03 <Thr::loadDLL(char const*, bool)>
c0018988:	83 c4 10             	add    esp,0x10
c001898b:	83 ec 08             	sub    esp,0x8
c001898e:	53                   	push   ebx
c001898f:	50                   	push   eax
c0018990:	e8 99 55 00 00       	call   c001df2e <Thr::executeDLL(unsigned long, void*)>
c0018995:	83 c4 10             	add    esp,0x10
c0018998:	8b 1d e8 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3e8
c001899e:	83 ec 08             	sub    esp,0x8
c00189a1:	6a 01                	push   0x1
c00189a3:	68 f7 c3 02 c0       	push   0xc002c3f7
c00189a8:	e8 56 53 00 00       	call   c001dd03 <Thr::loadDLL(char const*, bool)>
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	83 ec 08             	sub    esp,0x8
c00189b3:	53                   	push   ebx
c00189b4:	50                   	push   eax
c00189b5:	e8 74 55 00 00       	call   c001df2e <Thr::executeDLL(unsigned long, void*)>
c00189ba:	83 c4 10             	add    esp,0x10
c00189bd:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00189c2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00189c8:	83 e0 04             	and    eax,0x4
c00189cb:	84 c0                	test   al,al
c00189cd:	0f 84 fd 00 00 00    	je     c0018ad0 <ACPI::open(int, int, void*)+0x5dc>
c00189d3:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00189de:	83 ec 0c             	sub    esp,0xc
c00189e1:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00189e8:	e8 9f 6e ff ff       	call   c000f88c <malloc>
c00189ed:	83 c4 10             	add    esp,0x10
c00189f0:	89 c3                	mov    ebx,eax
c00189f2:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c00189f7:	83 ec 04             	sub    esp,0x4
c00189fa:	50                   	push   eax
c00189fb:	68 14 c4 02 c0       	push   0xc002c414
c0018a00:	53                   	push   ebx
c0018a01:	e8 40 a9 ff ff       	call   c0013346 <File::File(char const*, Process*)>
c0018a06:	83 c4 10             	add    esp,0x10
c0018a09:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018a10:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018a18:	74 1a                	je     c0018a34 <ACPI::open(int, int, void*)+0x540>
c0018a1a:	83 ec 0c             	sub    esp,0xc
c0018a1d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018a24:	e8 ef ab ff ff       	call   c0013618 <File::exists()>
c0018a29:	83 c4 10             	add    esp,0x10
c0018a2c:	84 c0                	test   al,al
c0018a2e:	74 04                	je     c0018a34 <ACPI::open(int, int, void*)+0x540>
c0018a30:	b0 01                	mov    al,0x1
c0018a32:	eb 02                	jmp    c0018a36 <ACPI::open(int, int, void*)+0x542>
c0018a34:	b0 00                	mov    al,0x0
c0018a36:	84 c0                	test   al,al
c0018a38:	74 25                	je     c0018a5f <ACPI::open(int, int, void*)+0x56b>
c0018a3a:	83 ec 08             	sub    esp,0x8
c0018a3d:	6a 01                	push   0x1
c0018a3f:	68 14 c4 02 c0       	push   0xc002c414
c0018a44:	e8 ba 52 00 00       	call   c001dd03 <Thr::loadDLL(char const*, bool)>
c0018a49:	83 c4 10             	add    esp,0x10
c0018a4c:	83 ec 08             	sub    esp,0x8
c0018a4f:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0018a56:	50                   	push   eax
c0018a57:	e8 d2 54 00 00       	call   c001df2e <Thr::executeDLL(unsigned long, void*)>
c0018a5c:	83 c4 10             	add    esp,0x10
c0018a5f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018a67:	74 27                	je     c0018a90 <ACPI::open(int, int, void*)+0x59c>
c0018a69:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018a71:	74 1d                	je     c0018a90 <ACPI::open(int, int, void*)+0x59c>
c0018a73:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a7c:	83 c0 08             	add    eax,0x8
c0018a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a81:	83 ec 0c             	sub    esp,0xc
c0018a84:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018a8b:	ff d0                	call   eax
c0018a8d:	83 c4 10             	add    esp,0x10
c0018a90:	a1 c8 1c 03 c0       	mov    eax,ds:0xc0031cc8
c0018a95:	83 ec 08             	sub    esp,0x8
c0018a98:	68 31 c4 02 c0       	push   0xc002c431
c0018a9d:	50                   	push   eax
c0018a9e:	e8 b7 f2 ff ff       	call   c0017d5a <findDataTable(unsigned char*, char*)>
c0018aa3:	83 c4 10             	add    esp,0x10
c0018aa6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0018aad:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018ab5:	74 19                	je     c0018ad0 <ACPI::open(int, int, void*)+0x5dc>
c0018ab7:	83 ec 08             	sub    esp,0x8
c0018aba:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0018ac1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0018ac8:	e8 c7 f9 ff ff       	call   c0018494 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018acd:	83 c4 10             	add    esp,0x10
c0018ad0:	b8 00 00 00 00       	mov    eax,0x0
c0018ad5:	81 c4 70 01 00 00    	add    esp,0x170
c0018adb:	5b                   	pop    ebx
c0018adc:	5e                   	pop    esi
c0018add:	5f                   	pop    edi
c0018ade:	c3                   	ret    
c0018adf:	90                   	nop

c0018ae0 <CPU::close(int, int, void*)>:
c0018ae0:	31 c0                	xor    eax,eax
c0018ae2:	c3                   	ret    
c0018ae3:	90                   	nop

c0018ae4 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018ae4:	55                   	push   ebp
c0018ae5:	57                   	push   edi
c0018ae6:	56                   	push   esi
c0018ae7:	53                   	push   ebx
c0018ae8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018aec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018af0:	89 ce                	mov    esi,ecx
c0018af2:	89 d5                	mov    ebp,edx
c0018af4:	80 f9 04             	cmp    cl,0x4
c0018af7:	75 28                	jne    c0018b21 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018af9:	8d 42 f9             	lea    eax,[edx-0x7]
c0018afc:	3c 03                	cmp    al,0x3
c0018afe:	0f 86 63 01 00 00    	jbe    c0018c67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018b04:	80 fa 03             	cmp    dl,0x3
c0018b07:	0f 84 5a 01 00 00    	je     c0018c67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018b0d:	8d 7a f2             	lea    edi,[edx-0xe]
c0018b10:	b8 10 e8 02 c0       	mov    eax,0xc002e810
c0018b15:	89 fb                	mov    ebx,edi
c0018b17:	80 fb 01             	cmp    bl,0x1
c0018b1a:	77 4e                	ja     c0018b6a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018b1c:	e9 52 01 00 00       	jmp    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b21:	80 f9 05             	cmp    cl,0x5
c0018b24:	75 4d                	jne    c0018b73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018b26:	b8 20 e8 02 c0       	mov    eax,0xc002e820
c0018b2b:	80 fa 03             	cmp    dl,0x3
c0018b2e:	0f 86 3f 01 00 00    	jbe    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b34:	8d 7a fa             	lea    edi,[edx-0x6]
c0018b37:	b8 30 e8 02 c0       	mov    eax,0xc002e830
c0018b3c:	89 fb                	mov    ebx,edi
c0018b3e:	80 fb 01             	cmp    bl,0x1
c0018b41:	0f 86 2c 01 00 00    	jbe    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b47:	b8 40 e8 02 c0       	mov    eax,0xc002e840
c0018b4c:	80 fa 08             	cmp    dl,0x8
c0018b4f:	0f 84 1e 01 00 00    	je     c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b55:	89 d7                	mov    edi,edx
c0018b57:	b8 50 e8 02 c0       	mov    eax,0xc002e850
c0018b5c:	83 e7 fb             	and    edi,0xfffffffb
c0018b5f:	89 fb                	mov    ebx,edi
c0018b61:	80 fb 09             	cmp    bl,0x9
c0018b64:	0f 84 09 01 00 00    	je     c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b6a:	31 c0                	xor    eax,eax
c0018b6c:	89 eb                	mov    ebx,ebp
c0018b6e:	0f b6 fb             	movzx  edi,bl
c0018b71:	eb 30                	jmp    c0018ba3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018b73:	31 c0                	xor    eax,eax
c0018b75:	80 f9 06             	cmp    cl,0x6
c0018b78:	75 f2                	jne    c0018b6c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b7a:	80 fa 0a             	cmp    dl,0xa
c0018b7d:	77 ed                	ja     c0018b6c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b7f:	bf de 05 00 00       	mov    edi,0x5de
c0018b84:	0f a3 d7             	bt     edi,edx
c0018b87:	73 e3                	jae    c0018b6c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b89:	b8 60 e8 02 c0       	mov    eax,0xc002e860
c0018b8e:	e9 e0 00 00 00       	jmp    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b93:	39 c7                	cmp    edi,eax
c0018b95:	0f 84 d3 00 00 00    	je     c0018c6e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b9b:	40                   	inc    eax
c0018b9c:	3d d0 00 00 00       	cmp    eax,0xd0
c0018ba1:	74 09                	je     c0018bac <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018ba3:	89 f3                	mov    ebx,esi
c0018ba5:	80 fb 0f             	cmp    bl,0xf
c0018ba8:	75 f1                	jne    c0018b9b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018baa:	eb e7                	jmp    c0018b93 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018bac:	80 f9 10             	cmp    cl,0x10
c0018baf:	75 14                	jne    c0018bc5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018bb1:	8d 42 fc             	lea    eax,[edx-0x4]
c0018bb4:	83 e0 fb             	and    eax,0xfffffffb
c0018bb7:	3c 02                	cmp    al,0x2
c0018bb9:	76 34                	jbe    c0018bef <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018bbb:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018bc0:	80 fa 02             	cmp    dl,0x2
c0018bc3:	eb 24                	jmp    c0018be9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018bc5:	80 f9 11             	cmp    cl,0x11
c0018bc8:	75 13                	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018bca:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018bcf:	80 fa 03             	cmp    dl,0x3
c0018bd2:	0f 85 9b 00 00 00    	jne    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd8:	e9 91 00 00 00       	jmp    c0018c6e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018bdd:	80 f9 12             	cmp    cl,0x12
c0018be0:	75 14                	jne    c0018bf6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018be2:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018be7:	fe ca                	dec    dl
c0018be9:	0f 85 84 00 00 00    	jne    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bef:	b8 80 e8 02 c0       	mov    eax,0xc002e880
c0018bf4:	eb 7d                	jmp    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bf6:	80 f9 14             	cmp    cl,0x14
c0018bf9:	75 12                	jne    c0018c0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018bfb:	4a                   	dec    edx
c0018bfc:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018c01:	80 fa 01             	cmp    dl,0x1
c0018c04:	77 6d                	ja     c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c06:	b8 90 e8 02 c0       	mov    eax,0xc002e890
c0018c0b:	eb 66                	jmp    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c0d:	80 f9 15             	cmp    cl,0x15
c0018c10:	75 31                	jne    c0018c43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018c12:	b8 a0 e8 02 c0       	mov    eax,0xc002e8a0
c0018c17:	80 fa 01             	cmp    dl,0x1
c0018c1a:	74 57                	je     c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c1c:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018c21:	80 fa 13             	cmp    dl,0x13
c0018c24:	76 0c                	jbe    c0018c32 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018c26:	80 fa 30             	cmp    dl,0x30
c0018c29:	75 48                	jne    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c2b:	b8 c0 e8 02 c0       	mov    eax,0xc002e8c0
c0018c30:	eb 41                	jmp    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c32:	b9 04 00 09 00       	mov    ecx,0x90004
c0018c37:	0f a3 d1             	bt     ecx,edx
c0018c3a:	73 37                	jae    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c3c:	b8 b0 e8 02 c0       	mov    eax,0xc002e8b0
c0018c41:	eb 30                	jmp    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c43:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018c48:	80 f9 16             	cmp    cl,0x16
c0018c4b:	75 26                	jne    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c4d:	b8 d0 e8 02 c0       	mov    eax,0xc002e8d0
c0018c52:	84 d2                	test   dl,dl
c0018c54:	74 1d                	je     c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c56:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018c5b:	80 fa 30             	cmp    dl,0x30
c0018c5e:	75 13                	jne    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c60:	b8 e0 e8 02 c0       	mov    eax,0xc002e8e0
c0018c65:	eb 0c                	jmp    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c67:	b8 00 e8 02 c0       	mov    eax,0xc002e800
c0018c6c:	eb 05                	jmp    c0018c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c6e:	b8 70 e8 02 c0       	mov    eax,0xc002e870
c0018c73:	5b                   	pop    ebx
c0018c74:	5e                   	pop    esi
c0018c75:	5f                   	pop    edi
c0018c76:	5d                   	pop    ebp
c0018c77:	c3                   	ret    

c0018c78 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018c78:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c80:	80 f9 04             	cmp    cl,0x4
c0018c83:	75 6b                	jne    c0018cf0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018c85:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c0018c8a:	80 fa 01             	cmp    dl,0x1
c0018c8d:	0f 86 92 02 00 00    	jbe    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c93:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c0018c98:	80 fa 02             	cmp    dl,0x2
c0018c9b:	0f 84 84 02 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca1:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018ca6:	80 fa 03             	cmp    dl,0x3
c0018ca9:	0f 84 76 02 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018caf:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c0018cb4:	80 fa 04             	cmp    dl,0x4
c0018cb7:	0f 84 68 02 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cbd:	b8 a0 e6 02 c0       	mov    eax,0xc002e6a0
c0018cc2:	80 fa 05             	cmp    dl,0x5
c0018cc5:	0f 84 5a 02 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ccb:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018cd0:	80 fa 07             	cmp    dl,0x7
c0018cd3:	0f 84 4c 02 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cd9:	83 ea 08             	sub    edx,0x8
c0018cdc:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018ce1:	80 fa 01             	cmp    dl,0x1
c0018ce4:	0f 87 3b 02 00 00    	ja     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cea:	b8 b0 e6 02 c0       	mov    eax,0xc002e6b0
c0018cef:	c3                   	ret    
c0018cf0:	80 f9 05             	cmp    cl,0x5
c0018cf3:	75 45                	jne    c0018d3a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018cf5:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018cf8:	b8 c0 e6 02 c0       	mov    eax,0xc002e6c0
c0018cfd:	80 f9 02             	cmp    cl,0x2
c0018d00:	0f 86 1f 02 00 00    	jbe    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d06:	80 fa 04             	cmp    dl,0x4
c0018d09:	0f 84 f3 01 00 00    	je     c0018f02 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018d0f:	80 fa 07             	cmp    dl,0x7
c0018d12:	0f 84 0d 02 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d18:	b8 d0 e6 02 c0       	mov    eax,0xc002e6d0
c0018d1d:	80 fa 08             	cmp    dl,0x8
c0018d20:	0f 84 ff 01 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d26:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018d2b:	80 fa 09             	cmp    dl,0x9
c0018d2e:	0f 85 f1 01 00 00    	jne    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d34:	b8 e0 e6 02 c0       	mov    eax,0xc002e6e0
c0018d39:	c3                   	ret    
c0018d3a:	80 f9 06             	cmp    cl,0x6
c0018d3d:	0f 85 85 01 00 00    	jne    c0018ec8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018d43:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c0018d48:	80 fa 01             	cmp    dl,0x1
c0018d4b:	0f 84 d4 01 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d51:	8d 42 fb             	lea    eax,[edx-0x5]
c0018d54:	3c 01                	cmp    al,0x1
c0018d56:	0f 86 ac 01 00 00    	jbe    c0018f08 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d5c:	80 fa 03             	cmp    dl,0x3
c0018d5f:	0f 84 a3 01 00 00    	je     c0018f08 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d65:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018d68:	b8 10 e7 02 c0       	mov    eax,0xc002e710
c0018d6d:	80 f9 01             	cmp    cl,0x1
c0018d70:	0f 86 af 01 00 00    	jbe    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d76:	80 fa 09             	cmp    dl,0x9
c0018d79:	0f 84 8f 01 00 00    	je     c0018f0e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018d7f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018d82:	80 f9 01             	cmp    cl,0x1
c0018d85:	0f 86 9a 01 00 00    	jbe    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d8b:	b8 20 e7 02 c0       	mov    eax,0xc002e720
c0018d90:	80 fa 0d             	cmp    dl,0xd
c0018d93:	0f 84 8c 01 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d99:	b8 30 e7 02 c0       	mov    eax,0xc002e730
c0018d9e:	80 fa 0e             	cmp    dl,0xe
c0018da1:	0f 84 7e 01 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da7:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c0018dac:	80 fa 0f             	cmp    dl,0xf
c0018daf:	0f 84 70 01 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db5:	b8 20 e7 02 c0       	mov    eax,0xc002e720
c0018dba:	80 fa 15             	cmp    dl,0x15
c0018dbd:	0f 84 62 01 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc3:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018dc6:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c0018dcb:	80 f9 01             	cmp    cl,0x1
c0018dce:	0f 86 51 01 00 00    	jbe    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dd4:	80 fa 1a             	cmp    dl,0x1a
c0018dd7:	0f 84 37 01 00 00    	je     c0018f14 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018ddd:	80 fa 1c             	cmp    dl,0x1c
c0018de0:	0f 84 34 01 00 00    	je     c0018f1a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018de6:	80 fa 1d             	cmp    dl,0x1d
c0018de9:	0f 84 36 01 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018def:	b8 70 e7 02 c0       	mov    eax,0xc002e770
c0018df4:	80 fa 25             	cmp    dl,0x25
c0018df7:	0f 84 28 01 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dfd:	8d 4a da             	lea    ecx,[edx-0x26]
c0018e00:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c0018e05:	80 f9 01             	cmp    cl,0x1
c0018e08:	0f 86 17 01 00 00    	jbe    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e0e:	b8 80 e7 02 c0       	mov    eax,0xc002e780
c0018e13:	80 fa 2a             	cmp    dl,0x2a
c0018e16:	0f 84 09 01 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e1c:	b8 70 e7 02 c0       	mov    eax,0xc002e770
c0018e21:	80 fa 2c             	cmp    dl,0x2c
c0018e24:	0f 84 fb 00 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e2a:	b8 80 e7 02 c0       	mov    eax,0xc002e780
c0018e2f:	80 fa 2d             	cmp    dl,0x2d
c0018e32:	0f 84 ed 00 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e38:	b8 50 e7 02 c0       	mov    eax,0xc002e750
c0018e3d:	80 fa 2e             	cmp    dl,0x2e
c0018e40:	0f 84 df 00 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e46:	b8 70 e7 02 c0       	mov    eax,0xc002e770
c0018e4b:	80 fa 2f             	cmp    dl,0x2f
c0018e4e:	0f 84 d1 00 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e54:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018e57:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c0018e5c:	80 f9 01             	cmp    cl,0x1
c0018e5f:	0f 86 c0 00 00 00    	jbe    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e65:	b8 90 e7 02 c0       	mov    eax,0xc002e790
c0018e6a:	80 fa 37             	cmp    dl,0x37
c0018e6d:	0f 84 b2 00 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e73:	b8 a0 e7 02 c0       	mov    eax,0xc002e7a0
c0018e78:	80 fa 3a             	cmp    dl,0x3a
c0018e7b:	0f 84 a4 00 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e81:	b8 b0 e7 02 c0       	mov    eax,0xc002e7b0
c0018e86:	80 fa 3c             	cmp    dl,0x3c
c0018e89:	0f 84 96 00 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e8f:	b8 c0 e7 02 c0       	mov    eax,0xc002e7c0
c0018e94:	80 fa 3d             	cmp    dl,0x3d
c0018e97:	0f 84 88 00 00 00    	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e9d:	b8 a0 e7 02 c0       	mov    eax,0xc002e7a0
c0018ea2:	80 fa 3e             	cmp    dl,0x3e
c0018ea5:	74 7e                	je     c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ea7:	8d 42 bb             	lea    eax,[edx-0x45]
c0018eaa:	3c 01                	cmp    al,0x1
c0018eac:	76 72                	jbe    c0018f20 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018eae:	80 fa 3f             	cmp    dl,0x3f
c0018eb1:	74 6d                	je     c0018f20 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018eb3:	80 fa 4a             	cmp    dl,0x4a
c0018eb6:	74 0a                	je     c0018ec2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018eb8:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018ebd:	80 fa 4d             	cmp    dl,0x4d
c0018ec0:	75 63                	jne    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ec2:	b8 90 e7 02 c0       	mov    eax,0xc002e790
c0018ec7:	c3                   	ret    
c0018ec8:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018ecd:	80 f9 0b             	cmp    cl,0xb
c0018ed0:	75 0a                	jne    c0018edc <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018ed2:	fe ca                	dec    dl
c0018ed4:	75 4f                	jne    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ed6:	b8 d0 e7 02 c0       	mov    eax,0xc002e7d0
c0018edb:	c3                   	ret    
c0018edc:	80 f9 0f             	cmp    cl,0xf
c0018edf:	75 44                	jne    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ee1:	b8 e0 e7 02 c0       	mov    eax,0xc002e7e0
c0018ee6:	80 fa 02             	cmp    dl,0x2
c0018ee9:	76 3a                	jbe    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018eeb:	8d 42 fd             	lea    eax,[edx-0x3]
c0018eee:	3c 01                	cmp    al,0x1
c0018ef0:	76 0a                	jbe    c0018efc <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018ef2:	b8 3e c8 02 c0       	mov    eax,0xc002c83e
c0018ef7:	80 fa 06             	cmp    dl,0x6
c0018efa:	75 29                	jne    c0018f25 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018efc:	b8 f0 e7 02 c0       	mov    eax,0xc002e7f0
c0018f01:	c3                   	ret    
c0018f02:	b8 d0 e6 02 c0       	mov    eax,0xc002e6d0
c0018f07:	c3                   	ret    
c0018f08:	b8 00 e7 02 c0       	mov    eax,0xc002e700
c0018f0d:	c3                   	ret    
c0018f0e:	b8 20 e7 02 c0       	mov    eax,0xc002e720
c0018f13:	c3                   	ret    
c0018f14:	b8 50 e7 02 c0       	mov    eax,0xc002e750
c0018f19:	c3                   	ret    
c0018f1a:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c0018f1f:	c3                   	ret    
c0018f20:	b8 b0 e7 02 c0       	mov    eax,0xc002e7b0
c0018f25:	c3                   	ret    

c0018f26 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018f26:	60                   	pusha  
c0018f27:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018f2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f33:	9c                   	pushf  
c0018f34:	fa                   	cli    
c0018f35:	0f 09                	wbinvd 
c0018f37:	0f 30                	wrmsr  
c0018f39:	9d                   	popf   
c0018f3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f3e:	89 02                	mov    DWORD PTR [edx],eax
c0018f40:	61                   	popa   
c0018f41:	c3                   	ret    

c0018f42 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018f42:	60                   	pusha  
c0018f43:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018f47:	9c                   	pushf  
c0018f48:	fa                   	cli    
c0018f49:	0f 09                	wbinvd 
c0018f4b:	31 c0                	xor    eax,eax
c0018f4d:	31 d2                	xor    edx,edx
c0018f4f:	0f 32                	rdmsr  
c0018f51:	9d                   	popf   
c0018f52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018f56:	89 02                	mov    DWORD PTR [edx],eax
c0018f58:	61                   	popa   
c0018f59:	c3                   	ret    

c0018f5a <CPU::AMD_K6_writeback(int, int, int)>:
c0018f5a:	56                   	push   esi
c0018f5b:	53                   	push   ebx
c0018f5c:	83 ec 10             	sub    esp,0x10
c0018f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f63:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018f68:	75 5d                	jne    c0018fc7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f6a:	83 f8 08             	cmp    eax,0x8
c0018f6d:	75 09                	jne    c0018f78 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018f6f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018f74:	7e 13                	jle    c0018f89 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f76:	eb 30                	jmp    c0018fa8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f78:	83 f8 06             	cmp    eax,0x6
c0018f7b:	7c 4a                	jl     c0018fc7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f7d:	83 f8 07             	cmp    eax,0x7
c0018f80:	7e 07                	jle    c0018f89 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f82:	83 f8 09             	cmp    eax,0x9
c0018f85:	74 21                	je     c0018fa8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f87:	eb 3e                	jmp    c0018fc7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f89:	89 e6                	mov    esi,esp
c0018f8b:	8b 1d 28 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f428
c0018f91:	56                   	push   esi
c0018f92:	c1 eb 15             	shr    ebx,0x15
c0018f95:	68 82 00 00 c0       	push   0xc0000082
c0018f9a:	83 e3 7e             	and    ebx,0x7e
c0018f9d:	e8 a0 ff ff ff       	call   c0018f42 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018fa2:	56                   	push   esi
c0018fa3:	6a 00                	push   0x0
c0018fa5:	53                   	push   ebx
c0018fa6:	eb 12                	jmp    c0018fba <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018fa8:	89 e3                	mov    ebx,esp
c0018faa:	53                   	push   ebx
c0018fab:	68 82 00 00 c0       	push   0xc0000082
c0018fb0:	e8 8d ff ff ff       	call   c0018f42 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018fb5:	53                   	push   ebx
c0018fb6:	6a 00                	push   0x0
c0018fb8:	6a 00                	push   0x0
c0018fba:	68 82 00 00 c0       	push   0xc0000082
c0018fbf:	e8 62 ff ff ff       	call   c0018f26 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018fc4:	83 c4 18             	add    esp,0x18
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	5b                   	pop    ebx
c0018fcb:	5e                   	pop    esi
c0018fcc:	c3                   	ret    
c0018fcd:	90                   	nop

c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018fce:	55                   	push   ebp
c0018fcf:	57                   	push   edi
c0018fd0:	56                   	push   esi
c0018fd1:	53                   	push   ebx
c0018fd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fd6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018fde:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018fe2:	39 05 00 e9 02 c0    	cmp    DWORD PTR ds:0xc002e900,eax
c0018fe8:	75 23                	jne    c001900d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018fea:	a1 2c 1f 03 c0       	mov    eax,ds:0xc0031f2c
c0018fef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ff3:	89 06                	mov    DWORD PTR [esi],eax
c0018ff5:	a1 28 1f 03 c0       	mov    eax,ds:0xc0031f28
c0018ffa:	89 07                	mov    DWORD PTR [edi],eax
c0018ffc:	a1 24 1f 03 c0       	mov    eax,ds:0xc0031f24
c0019001:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019004:	a1 20 1f 03 c0       	mov    eax,ds:0xc0031f20
c0019009:	89 02                	mov    DWORD PTR [edx],eax
c001900b:	eb 3f                	jmp    c001904c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001900d:	31 c9                	xor    ecx,ecx
c001900f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019013:	0f a2                	cpuid  
c0019015:	89 06                	mov    DWORD PTR [esi],eax
c0019017:	89 1f                	mov    DWORD PTR [edi],ebx
c0019019:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001901d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0019020:	89 10                	mov    DWORD PTR [eax],edx
c0019022:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019026:	a3 00 e9 02 c0       	mov    ds:0xc002e900,eax
c001902b:	8b 06                	mov    eax,DWORD PTR [esi]
c001902d:	a3 2c 1f 03 c0       	mov    ds:0xc0031f2c,eax
c0019032:	8b 07                	mov    eax,DWORD PTR [edi]
c0019034:	a3 28 1f 03 c0       	mov    ds:0xc0031f28,eax
c0019039:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001903c:	a3 24 1f 03 c0       	mov    ds:0xc0031f24,eax
c0019041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019045:	8b 00                	mov    eax,DWORD PTR [eax]
c0019047:	a3 20 1f 03 c0       	mov    ds:0xc0031f20,eax
c001904c:	5b                   	pop    ebx
c001904d:	5e                   	pop    esi
c001904e:	5f                   	pop    edi
c001904f:	5d                   	pop    ebp
c0019050:	c3                   	ret    
c0019051:	90                   	nop

c0019052 <CPU::cpuidCheckEDX(unsigned int)>:
c0019052:	83 ec 10             	sub    esp,0x10
c0019055:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019059:	50                   	push   eax
c001905a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001905e:	50                   	push   eax
c001905f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019063:	50                   	push   eax
c0019064:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019068:	50                   	push   eax
c0019069:	6a 01                	push   0x1
c001906b:	e8 5e ff ff ff       	call   c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019070:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019074:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0019078:	0f 95 c0             	setne  al
c001907b:	83 c4 24             	add    esp,0x24
c001907e:	c3                   	ret    
c001907f:	90                   	nop

c0019080 <CPU::cpuidCheckECX(unsigned int)>:
c0019080:	83 ec 10             	sub    esp,0x10
c0019083:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019087:	50                   	push   eax
c0019088:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001908c:	50                   	push   eax
c001908d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019091:	50                   	push   eax
c0019092:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019096:	50                   	push   eax
c0019097:	6a 01                	push   0x1
c0019099:	e8 30 ff ff ff       	call   c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001909e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190a2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00190a6:	0f 95 c0             	setne  al
c00190a9:	83 c4 24             	add    esp,0x24
c00190ac:	c3                   	ret    
c00190ad:	90                   	nop

c00190ae <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00190ae:	83 ec 10             	sub    esp,0x10
c00190b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190b5:	50                   	push   eax
c00190b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190ba:	50                   	push   eax
c00190bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190bf:	50                   	push   eax
c00190c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190c4:	50                   	push   eax
c00190c5:	6a 07                	push   0x7
c00190c7:	e8 02 ff ff ff       	call   c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190d0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00190d4:	0f 95 c0             	setne  al
c00190d7:	83 c4 24             	add    esp,0x24
c00190da:	c3                   	ret    
c00190db:	90                   	nop

c00190dc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00190dc:	83 ec 10             	sub    esp,0x10
c00190df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190e3:	50                   	push   eax
c00190e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190e8:	50                   	push   eax
c00190e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190ed:	50                   	push   eax
c00190ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190f2:	50                   	push   eax
c00190f3:	6a 07                	push   0x7
c00190f5:	e8 d4 fe ff ff       	call   c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190fe:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019102:	0f 95 c0             	setne  al
c0019105:	83 c4 24             	add    esp,0x24
c0019108:	c3                   	ret    
c0019109:	90                   	nop

c001910a <CPU::CPU()>:
c001910a:	83 ec 0c             	sub    esp,0xc
c001910d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019111:	83 ec 08             	sub    esp,0x8
c0019114:	68 3e c8 02 c0       	push   0xc002c83e
c0019119:	50                   	push   eax
c001911a:	e8 05 b3 ff ff       	call   c0014424 <Device::Device(char const*)>
c001911f:	83 c4 10             	add    esp,0x10
c0019122:	ba 18 c9 02 c0       	mov    edx,0xc002c918
c0019127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001912b:	89 10                	mov    DWORD PTR [eax],edx
c001912d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019131:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001913b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001913f:	05 78 01 00 00       	add    eax,0x178
c0019144:	83 ec 0c             	sub    esp,0xc
c0019147:	50                   	push   eax
c0019148:	e8 55 5f ff ff       	call   c000f0a2 <GDT::GDT()>
c001914d:	83 c4 10             	add    esp,0x10
c0019150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019154:	05 7c 09 00 00       	add    eax,0x97c
c0019159:	83 ec 0c             	sub    esp,0xc
c001915c:	50                   	push   eax
c001915d:	e8 aa 61 ff ff       	call   c000f30c <IDT::IDT()>
c0019162:	83 c4 10             	add    esp,0x10
c0019165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019169:	05 7c 11 00 00       	add    eax,0x117c
c001916e:	83 ec 0c             	sub    esp,0xc
c0019171:	50                   	push   eax
c0019172:	e8 9b 81 ff ff       	call   c0011312 <TSS::TSS()>
c0019177:	83 c4 10             	add    esp,0x10
c001917a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001917e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0019185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019189:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0019193:	90                   	nop
c0019194:	83 c4 0c             	add    esp,0xc
c0019197:	c3                   	ret    

c0019198 <CPU::displayFeatures()>:
c0019198:	53                   	push   ebx
c0019199:	83 ec 10             	sub    esp,0x10
c001919c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00191a0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00191a6:	68 4c c5 02 c0       	push   0xc002c54c
c00191ab:	e8 37 9c ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00191b0:	59                   	pop    ecx
c00191b1:	58                   	pop    eax
c00191b2:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00191b8:	50                   	push   eax
c00191b9:	68 5d c5 02 c0       	push   0xc002c55d
c00191be:	e8 24 9c ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00191c3:	58                   	pop    eax
c00191c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191ca:	5a                   	pop    edx
c00191cb:	c1 e8 0e             	shr    eax,0xe
c00191ce:	0f b6 c0             	movzx  eax,al
c00191d1:	50                   	push   eax
c00191d2:	68 6e c5 02 c0       	push   0xc002c56e
c00191d7:	e8 0b 9c ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00191dc:	59                   	pop    ecx
c00191dd:	58                   	pop    eax
c00191de:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191e4:	66 c1 e8 06          	shr    ax,0x6
c00191e8:	0f b6 c0             	movzx  eax,al
c00191eb:	50                   	push   eax
c00191ec:	68 7f c5 02 c0       	push   0xc002c57f
c00191f1:	e8 f1 9b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00191f6:	c7 04 24 2c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca2c
c00191fd:	e8 e5 9b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0019202:	83 c4 10             	add    esp,0x10
c0019205:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c001920a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0019211:	74 05                	je     c0019218 <CPU::displayFeatures()+0x80>
c0019213:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019218:	52                   	push   edx
c0019219:	52                   	push   edx
c001921a:	50                   	push   eax
c001921b:	68 90 c5 02 c0       	push   0xc002c590
c0019220:	e8 c2 9b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0019225:	83 c4 10             	add    esp,0x10
c0019228:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c001922d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0019234:	78 05                	js     c001923b <CPU::displayFeatures()+0xa3>
c0019236:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c001923b:	51                   	push   ecx
c001923c:	51                   	push   ecx
c001923d:	50                   	push   eax
c001923e:	68 a7 c5 02 c0       	push   0xc002c5a7
c0019243:	e8 9f 9b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0019248:	83 c4 10             	add    esp,0x10
c001924b:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019250:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0019257:	75 05                	jne    c001925e <CPU::displayFeatures()+0xc6>
c0019259:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c001925e:	52                   	push   edx
c001925f:	52                   	push   edx
c0019260:	50                   	push   eax
c0019261:	68 be c5 02 c0       	push   0xc002c5be
c0019266:	e8 7c 9b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001926b:	83 c4 10             	add    esp,0x10
c001926e:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019273:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001927a:	75 05                	jne    c0019281 <CPU::displayFeatures()+0xe9>
c001927c:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019281:	51                   	push   ecx
c0019282:	51                   	push   ecx
c0019283:	50                   	push   eax
c0019284:	68 d5 c5 02 c0       	push   0xc002c5d5
c0019289:	e8 59 9b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001928e:	83 c4 10             	add    esp,0x10
c0019291:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019296:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001929d:	75 05                	jne    c00192a4 <CPU::displayFeatures()+0x10c>
c001929f:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00192a4:	52                   	push   edx
c00192a5:	52                   	push   edx
c00192a6:	50                   	push   eax
c00192a7:	68 ec c5 02 c0       	push   0xc002c5ec
c00192ac:	e8 36 9b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00192b1:	83 c4 10             	add    esp,0x10
c00192b4:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00192b9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00192c0:	75 05                	jne    c00192c7 <CPU::displayFeatures()+0x12f>
c00192c2:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00192c7:	51                   	push   ecx
c00192c8:	51                   	push   ecx
c00192c9:	50                   	push   eax
c00192ca:	68 03 c6 02 c0       	push   0xc002c603
c00192cf:	e8 13 9b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00192d4:	83 c4 10             	add    esp,0x10
c00192d7:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00192dc:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00192e3:	75 05                	jne    c00192ea <CPU::displayFeatures()+0x152>
c00192e5:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00192ea:	52                   	push   edx
c00192eb:	52                   	push   edx
c00192ec:	50                   	push   eax
c00192ed:	68 1a c6 02 c0       	push   0xc002c61a
c00192f2:	e8 f0 9a ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00192f7:	83 c4 10             	add    esp,0x10
c00192fa:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00192ff:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019306:	75 05                	jne    c001930d <CPU::displayFeatures()+0x175>
c0019308:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c001930d:	51                   	push   ecx
c001930e:	51                   	push   ecx
c001930f:	50                   	push   eax
c0019310:	68 31 c6 02 c0       	push   0xc002c631
c0019315:	e8 cd 9a ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001931a:	83 c4 10             	add    esp,0x10
c001931d:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019322:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019329:	75 05                	jne    c0019330 <CPU::displayFeatures()+0x198>
c001932b:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019330:	52                   	push   edx
c0019331:	52                   	push   edx
c0019332:	50                   	push   eax
c0019333:	68 48 c6 02 c0       	push   0xc002c648
c0019338:	e8 aa 9a ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001933d:	83 c4 10             	add    esp,0x10
c0019340:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019345:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001934c:	75 05                	jne    c0019353 <CPU::displayFeatures()+0x1bb>
c001934e:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019353:	51                   	push   ecx
c0019354:	51                   	push   ecx
c0019355:	50                   	push   eax
c0019356:	68 5f c6 02 c0       	push   0xc002c65f
c001935b:	e8 87 9a ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0019360:	83 c4 10             	add    esp,0x10
c0019363:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c0019368:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001936f:	75 05                	jne    c0019376 <CPU::displayFeatures()+0x1de>
c0019371:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019376:	52                   	push   edx
c0019377:	52                   	push   edx
c0019378:	50                   	push   eax
c0019379:	68 76 c6 02 c0       	push   0xc002c676
c001937e:	e8 64 9a ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0019383:	83 c4 10             	add    esp,0x10
c0019386:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c001938b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019392:	75 05                	jne    c0019399 <CPU::displayFeatures()+0x201>
c0019394:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019399:	51                   	push   ecx
c001939a:	51                   	push   ecx
c001939b:	50                   	push   eax
c001939c:	68 8d c6 02 c0       	push   0xc002c68d
c00193a1:	e8 41 9a ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00193a6:	83 c4 10             	add    esp,0x10
c00193a9:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00193ae:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00193b5:	75 05                	jne    c00193bc <CPU::displayFeatures()+0x224>
c00193b7:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00193bc:	52                   	push   edx
c00193bd:	52                   	push   edx
c00193be:	50                   	push   eax
c00193bf:	68 a4 c6 02 c0       	push   0xc002c6a4
c00193c4:	e8 1e 9a ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00193c9:	83 c4 10             	add    esp,0x10
c00193cc:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00193d1:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00193d8:	78 05                	js     c00193df <CPU::displayFeatures()+0x247>
c00193da:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c00193df:	51                   	push   ecx
c00193e0:	51                   	push   ecx
c00193e1:	50                   	push   eax
c00193e2:	68 bb c6 02 c0       	push   0xc002c6bb
c00193e7:	e8 fb 99 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00193ec:	83 c4 10             	add    esp,0x10
c00193ef:	b8 52 ae 02 c0       	mov    eax,0xc002ae52
c00193f4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00193fb:	75 05                	jne    c0019402 <CPU::displayFeatures()+0x26a>
c00193fd:	b8 56 ae 02 c0       	mov    eax,0xc002ae56
c0019402:	52                   	push   edx
c0019403:	52                   	push   edx
c0019404:	50                   	push   eax
c0019405:	68 d2 c6 02 c0       	push   0xc002c6d2
c001940a:	e8 d8 99 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001940f:	83 c4 18             	add    esp,0x18
c0019412:	5b                   	pop    ebx
c0019413:	c3                   	ret    

c0019414 <CPU::detectFeatures()>:
c0019414:	55                   	push   ebp
c0019415:	57                   	push   edi
c0019416:	56                   	push   esi
c0019417:	53                   	push   ebx
c0019418:	83 ec 50             	sub    esp,0x50
c001941b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001941f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019429:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019430:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0019436:	6a 0d                	push   0xd
c0019438:	6a 00                	push   0x0
c001943a:	55                   	push   ebp
c001943b:	e8 10 73 fe ff       	call   c0000750 <memset>
c0019440:	83 c4 10             	add    esp,0x10
c0019443:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0019448:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001944f:	0f 84 22 09 00 00    	je     c0019d77 <CPU::detectFeatures()+0x963>
c0019455:	83 ec 0c             	sub    esp,0xc
c0019458:	89 ef                	mov    edi,ebp
c001945a:	6a 10                	push   0x10
c001945c:	e8 f1 fb ff ff       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c0019461:	83 e0 01             	and    eax,0x1
c0019464:	8d 14 00             	lea    edx,[eax+eax*1]
c0019467:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001946d:	83 e0 fd             	and    eax,0xfffffffd
c0019470:	09 d0                	or     eax,edx
c0019472:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019478:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001947f:	e8 ce fb ff ff       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c0019484:	83 e0 01             	and    eax,0x1
c0019487:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001948e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019494:	83 e0 fb             	and    eax,0xfffffffb
c0019497:	09 d0                	or     eax,edx
c0019499:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001949f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00194a6:	e8 a7 fb ff ff       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c00194ab:	83 e0 01             	and    eax,0x1
c00194ae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00194b5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194bb:	83 e0 f7             	and    eax,0xfffffff7
c00194be:	09 d0                	or     eax,edx
c00194c0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194c6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00194cd:	e8 80 fb ff ff       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c00194d2:	83 e0 01             	and    eax,0x1
c00194d5:	c1 e0 04             	shl    eax,0x4
c00194d8:	88 c2                	mov    dl,al
c00194da:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194e0:	83 e0 ef             	and    eax,0xffffffef
c00194e3:	09 d0                	or     eax,edx
c00194e5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194eb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00194f2:	e8 5b fb ff ff       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c00194f7:	83 e0 01             	and    eax,0x1
c00194fa:	c1 e0 05             	shl    eax,0x5
c00194fd:	88 c2                	mov    dl,al
c00194ff:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019505:	83 e0 df             	and    eax,0xffffffdf
c0019508:	09 d0                	or     eax,edx
c001950a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019510:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019517:	e8 36 fb ff ff       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c001951c:	83 e0 01             	and    eax,0x1
c001951f:	8d 14 00             	lea    edx,[eax+eax*1]
c0019522:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019528:	83 e0 fd             	and    eax,0xfffffffd
c001952b:	09 d0                	or     eax,edx
c001952d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019533:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001953a:	e8 13 fb ff ff       	call   c0019052 <CPU::cpuidCheckEDX(unsigned int)>
c001953f:	83 e0 01             	and    eax,0x1
c0019542:	c1 e0 06             	shl    eax,0x6
c0019545:	88 c2                	mov    dl,al
c0019547:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001954d:	83 e0 bf             	and    eax,0xffffffbf
c0019550:	09 d0                	or     eax,edx
c0019552:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019558:	58                   	pop    eax
c0019559:	8d 44 24 28          	lea    eax,[esp+0x28]
c001955d:	50                   	push   eax
c001955e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019562:	50                   	push   eax
c0019563:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019567:	56                   	push   esi
c0019568:	8d 44 24 28          	lea    eax,[esp+0x28]
c001956c:	50                   	push   eax
c001956d:	6a 00                	push   0x0
c001956f:	e8 5a fa ff ff       	call   c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019574:	b8 04 00 00 00       	mov    eax,0x4
c0019579:	89 c1                	mov    ecx,eax
c001957b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001957d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0019583:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0019587:	89 c1                	mov    ecx,eax
c0019589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001958b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0019591:	8d 74 24 38          	lea    esi,[esp+0x38]
c0019595:	89 c1                	mov    ecx,eax
c0019597:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019599:	83 c4 18             	add    esp,0x18
c001959c:	68 e9 c6 02 c0       	push   0xc002c6e9
c00195a1:	55                   	push   ebp
c00195a2:	e8 f1 72 fe ff       	call   c0000898 <strcmp>
c00195a7:	83 c4 10             	add    esp,0x10
c00195aa:	85 c0                	test   eax,eax
c00195ac:	75 0f                	jne    c00195bd <CPU::detectFeatures()+0x1a9>
c00195ae:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00195b8:	e9 22 02 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c00195bd:	50                   	push   eax
c00195be:	50                   	push   eax
c00195bf:	68 f6 c6 02 c0       	push   0xc002c6f6
c00195c4:	55                   	push   ebp
c00195c5:	e8 ce 72 fe ff       	call   c0000898 <strcmp>
c00195ca:	83 c4 10             	add    esp,0x10
c00195cd:	85 c0                	test   eax,eax
c00195cf:	74 dd                	je     c00195ae <CPU::detectFeatures()+0x19a>
c00195d1:	50                   	push   eax
c00195d2:	50                   	push   eax
c00195d3:	68 03 c7 02 c0       	push   0xc002c703
c00195d8:	55                   	push   ebp
c00195d9:	e8 ba 72 fe ff       	call   c0000898 <strcmp>
c00195de:	83 c4 10             	add    esp,0x10
c00195e1:	85 c0                	test   eax,eax
c00195e3:	74 2a                	je     c001960f <CPU::detectFeatures()+0x1fb>
c00195e5:	50                   	push   eax
c00195e6:	50                   	push   eax
c00195e7:	68 10 c7 02 c0       	push   0xc002c710
c00195ec:	55                   	push   ebp
c00195ed:	e8 a6 72 fe ff       	call   c0000898 <strcmp>
c00195f2:	83 c4 10             	add    esp,0x10
c00195f5:	85 c0                	test   eax,eax
c00195f7:	74 16                	je     c001960f <CPU::detectFeatures()+0x1fb>
c00195f9:	50                   	push   eax
c00195fa:	50                   	push   eax
c00195fb:	68 1d c7 02 c0       	push   0xc002c71d
c0019600:	55                   	push   ebp
c0019601:	e8 92 72 fe ff       	call   c0000898 <strcmp>
c0019606:	83 c4 10             	add    esp,0x10
c0019609:	85 c0                	test   eax,eax
c001960b:	74 48                	je     c0019655 <CPU::detectFeatures()+0x241>
c001960d:	eb 0f                	jmp    c001961e <CPU::detectFeatures()+0x20a>
c001960f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019619:	e9 c1 01 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c001961e:	50                   	push   eax
c001961f:	50                   	push   eax
c0019620:	68 2a c7 02 c0       	push   0xc002c72a
c0019625:	55                   	push   ebp
c0019626:	e8 6d 72 fe ff       	call   c0000898 <strcmp>
c001962b:	83 c4 10             	add    esp,0x10
c001962e:	85 c0                	test   eax,eax
c0019630:	74 23                	je     c0019655 <CPU::detectFeatures()+0x241>
c0019632:	57                   	push   edi
c0019633:	57                   	push   edi
c0019634:	68 37 c7 02 c0       	push   0xc002c737
c0019639:	55                   	push   ebp
c001963a:	e8 59 72 fe ff       	call   c0000898 <strcmp>
c001963f:	83 c4 10             	add    esp,0x10
c0019642:	85 c0                	test   eax,eax
c0019644:	75 1e                	jne    c0019664 <CPU::detectFeatures()+0x250>
c0019646:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019650:	e9 8a 01 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c0019655:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001965f:	e9 7b 01 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c0019664:	56                   	push   esi
c0019665:	56                   	push   esi
c0019666:	68 44 c7 02 c0       	push   0xc002c744
c001966b:	55                   	push   ebp
c001966c:	e8 27 72 fe ff       	call   c0000898 <strcmp>
c0019671:	83 c4 10             	add    esp,0x10
c0019674:	85 c0                	test   eax,eax
c0019676:	75 0f                	jne    c0019687 <CPU::detectFeatures()+0x273>
c0019678:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019682:	e9 58 01 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c0019687:	51                   	push   ecx
c0019688:	51                   	push   ecx
c0019689:	68 03 c7 02 c0       	push   0xc002c703
c001968e:	55                   	push   ebp
c001968f:	e8 04 72 fe ff       	call   c0000898 <strcmp>
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	85 c0                	test   eax,eax
c0019699:	75 0f                	jne    c00196aa <CPU::detectFeatures()+0x296>
c001969b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00196a5:	e9 35 01 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c00196aa:	52                   	push   edx
c00196ab:	52                   	push   edx
c00196ac:	68 51 c7 02 c0       	push   0xc002c751
c00196b1:	55                   	push   ebp
c00196b2:	e8 e1 71 fe ff       	call   c0000898 <strcmp>
c00196b7:	83 c4 10             	add    esp,0x10
c00196ba:	85 c0                	test   eax,eax
c00196bc:	75 0f                	jne    c00196cd <CPU::detectFeatures()+0x2b9>
c00196be:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00196c8:	e9 12 01 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c00196cd:	50                   	push   eax
c00196ce:	50                   	push   eax
c00196cf:	68 5e c7 02 c0       	push   0xc002c75e
c00196d4:	55                   	push   ebp
c00196d5:	e8 be 71 fe ff       	call   c0000898 <strcmp>
c00196da:	83 c4 10             	add    esp,0x10
c00196dd:	85 c0                	test   eax,eax
c00196df:	75 0f                	jne    c00196f0 <CPU::detectFeatures()+0x2dc>
c00196e1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00196eb:	e9 ef 00 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c00196f0:	50                   	push   eax
c00196f1:	50                   	push   eax
c00196f2:	68 6b c7 02 c0       	push   0xc002c76b
c00196f7:	55                   	push   ebp
c00196f8:	e8 9b 71 fe ff       	call   c0000898 <strcmp>
c00196fd:	83 c4 10             	add    esp,0x10
c0019700:	85 c0                	test   eax,eax
c0019702:	75 0f                	jne    c0019713 <CPU::detectFeatures()+0x2ff>
c0019704:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001970e:	e9 cc 00 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c0019713:	50                   	push   eax
c0019714:	50                   	push   eax
c0019715:	68 78 c7 02 c0       	push   0xc002c778
c001971a:	55                   	push   ebp
c001971b:	e8 78 71 fe ff       	call   c0000898 <strcmp>
c0019720:	83 c4 10             	add    esp,0x10
c0019723:	85 c0                	test   eax,eax
c0019725:	75 0f                	jne    c0019736 <CPU::detectFeatures()+0x322>
c0019727:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019731:	e9 a9 00 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c0019736:	50                   	push   eax
c0019737:	50                   	push   eax
c0019738:	68 85 c7 02 c0       	push   0xc002c785
c001973d:	55                   	push   ebp
c001973e:	e8 55 71 fe ff       	call   c0000898 <strcmp>
c0019743:	83 c4 10             	add    esp,0x10
c0019746:	85 c0                	test   eax,eax
c0019748:	75 0f                	jne    c0019759 <CPU::detectFeatures()+0x345>
c001974a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019754:	e9 86 00 00 00       	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c0019759:	50                   	push   eax
c001975a:	50                   	push   eax
c001975b:	68 92 c7 02 c0       	push   0xc002c792
c0019760:	55                   	push   ebp
c0019761:	e8 32 71 fe ff       	call   c0000898 <strcmp>
c0019766:	83 c4 10             	add    esp,0x10
c0019769:	85 c0                	test   eax,eax
c001976b:	75 0c                	jne    c0019779 <CPU::detectFeatures()+0x365>
c001976d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019777:	eb 66                	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c0019779:	50                   	push   eax
c001977a:	50                   	push   eax
c001977b:	68 9f c7 02 c0       	push   0xc002c79f
c0019780:	55                   	push   ebp
c0019781:	e8 12 71 fe ff       	call   c0000898 <strcmp>
c0019786:	83 c4 10             	add    esp,0x10
c0019789:	85 c0                	test   eax,eax
c001978b:	75 0c                	jne    c0019799 <CPU::detectFeatures()+0x385>
c001978d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019797:	eb 46                	jmp    c00197df <CPU::detectFeatures()+0x3cb>
c0019799:	57                   	push   edi
c001979a:	57                   	push   edi
c001979b:	68 ac c7 02 c0       	push   0xc002c7ac
c00197a0:	55                   	push   ebp
c00197a1:	e8 f2 70 fe ff       	call   c0000898 <strcmp>
c00197a6:	83 c4 10             	add    esp,0x10
c00197a9:	85 c0                	test   eax,eax
c00197ab:	74 e0                	je     c001978d <CPU::detectFeatures()+0x379>
c00197ad:	56                   	push   esi
c00197ae:	56                   	push   esi
c00197af:	68 b9 c7 02 c0       	push   0xc002c7b9
c00197b4:	55                   	push   ebp
c00197b5:	e8 de 70 fe ff       	call   c0000898 <strcmp>
c00197ba:	83 c4 10             	add    esp,0x10
c00197bd:	85 c0                	test   eax,eax
c00197bf:	74 cc                	je     c001978d <CPU::detectFeatures()+0x379>
c00197c1:	51                   	push   ecx
c00197c2:	51                   	push   ecx
c00197c3:	68 c6 c7 02 c0       	push   0xc002c7c6
c00197c8:	55                   	push   ebp
c00197c9:	e8 ca 70 fe ff       	call   c0000898 <strcmp>
c00197ce:	83 c4 10             	add    esp,0x10
c00197d1:	85 c0                	test   eax,eax
c00197d3:	74 b8                	je     c001978d <CPU::detectFeatures()+0x379>
c00197d5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00197df:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00197e4:	0f 86 be 00 00 00    	jbe    c00198a8 <CPU::detectFeatures()+0x494>
c00197ea:	83 ec 0c             	sub    esp,0xc
c00197ed:	68 80 00 00 00       	push   0x80
c00197f2:	e8 b7 f8 ff ff       	call   c00190ae <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197f7:	83 e0 01             	and    eax,0x1
c00197fa:	c1 e0 06             	shl    eax,0x6
c00197fd:	88 c2                	mov    dl,al
c00197ff:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019805:	83 e0 bf             	and    eax,0xffffffbf
c0019808:	09 d0                	or     eax,edx
c001980a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019810:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019817:	e8 92 f8 ff ff       	call   c00190ae <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001981c:	83 e0 01             	and    eax,0x1
c001981f:	c1 e0 04             	shl    eax,0x4
c0019822:	88 c2                	mov    dl,al
c0019824:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001982a:	83 e0 ef             	and    eax,0xffffffef
c001982d:	09 d0                	or     eax,edx
c001982f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019835:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001983c:	e8 6d f8 ff ff       	call   c00190ae <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019841:	c1 e0 07             	shl    eax,0x7
c0019844:	88 c2                	mov    dl,al
c0019846:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001984c:	83 e0 7f             	and    eax,0x7f
c001984f:	09 d0                	or     eax,edx
c0019851:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019857:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001985e:	e8 79 f8 ff ff       	call   c00190dc <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019863:	83 e0 01             	and    eax,0x1
c0019866:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001986d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019873:	83 e0 f7             	and    eax,0xfffffff7
c0019876:	09 d0                	or     eax,edx
c0019878:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001987e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019885:	e8 52 f8 ff ff       	call   c00190dc <CPU::cpuidCheckExtendedECX(unsigned int)>
c001988a:	83 c4 10             	add    esp,0x10
c001988d:	83 e0 01             	and    eax,0x1
c0019890:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019897:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001989d:	83 e0 fb             	and    eax,0xfffffffb
c00198a0:	09 d0                	or     eax,edx
c00198a2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00198a8:	83 ec 0c             	sub    esp,0xc
c00198ab:	8d 44 24 28          	lea    eax,[esp+0x28]
c00198af:	50                   	push   eax
c00198b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00198b4:	50                   	push   eax
c00198b5:	8d 74 24 28          	lea    esi,[esp+0x28]
c00198b9:	56                   	push   esi
c00198ba:	8d 44 24 28          	lea    eax,[esp+0x28]
c00198be:	50                   	push   eax
c00198bf:	6a 01                	push   0x1
c00198c1:	e8 08 f7 ff ff       	call   c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198c6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00198ca:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00198d0:	88 ca                	mov    dl,cl
c00198d2:	83 e0 f0             	and    eax,0xfffffff0
c00198d5:	83 e2 0f             	and    edx,0xf
c00198d8:	09 d0                	or     eax,edx
c00198da:	88 ca                	mov    dl,cl
c00198dc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00198e2:	c0 ea 04             	shr    dl,0x4
c00198e5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00198e9:	0f b6 c2             	movzx  eax,dl
c00198ec:	83 c4 20             	add    esp,0x20
c00198ef:	c1 e0 06             	shl    eax,0x6
c00198f2:	89 c7                	mov    edi,eax
c00198f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198fa:	66 25 3f c0          	and    ax,0xc03f
c00198fe:	09 f8                	or     eax,edi
c0019900:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019907:	89 c8                	mov    eax,ecx
c0019909:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019910:	c1 e8 08             	shr    eax,0x8
c0019913:	83 e5 3f             	and    ebp,0x3f
c0019916:	83 e0 0f             	and    eax,0xf
c0019919:	89 c7                	mov    edi,eax
c001991b:	c1 e7 06             	shl    edi,0x6
c001991e:	09 ef                	or     edi,ebp
c0019920:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019927:	89 fa                	mov    edx,edi
c0019929:	83 e5 c0             	and    ebp,0xffffffc0
c001992c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019932:	88 c2                	mov    dl,al
c0019934:	c0 ea 02             	shr    dl,0x2
c0019937:	89 d7                	mov    edi,edx
c0019939:	09 ef                	or     edi,ebp
c001993b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019941:	89 fa                	mov    edx,edi
c0019943:	83 e5 cf             	and    ebp,0xffffffcf
c0019946:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001994c:	89 cf                	mov    edi,ecx
c001994e:	c1 ef 0c             	shr    edi,0xc
c0019951:	83 e7 03             	and    edi,0x3
c0019954:	c1 e7 04             	shl    edi,0x4
c0019957:	09 ef                	or     edi,ebp
c0019959:	3c 06                	cmp    al,0x6
c001995b:	89 fa                	mov    edx,edi
c001995d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019963:	74 04                	je     c0019969 <CPU::detectFeatures()+0x555>
c0019965:	3c 0f                	cmp    al,0xf
c0019967:	75 5c                	jne    c00199c5 <CPU::detectFeatures()+0x5b1>
c0019969:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001996d:	89 cf                	mov    edi,ecx
c001996f:	c1 ef 10             	shr    edi,0x10
c0019972:	c1 e7 04             	shl    edi,0x4
c0019975:	09 fa                	or     edx,edi
c0019977:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001997d:	0f b6 d2             	movzx  edx,dl
c0019980:	66 81 e7 3f c0       	and    di,0xc03f
c0019985:	c1 e2 06             	shl    edx,0x6
c0019988:	09 fa                	or     edx,edi
c001998a:	3c 0f                	cmp    al,0xf
c001998c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019993:	75 30                	jne    c00199c5 <CPU::detectFeatures()+0x5b1>
c0019995:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001999b:	c1 e9 14             	shr    ecx,0x14
c001999e:	83 e0 3f             	and    eax,0x3f
c00199a1:	83 c1 0f             	add    ecx,0xf
c00199a4:	88 ca                	mov    dl,cl
c00199a6:	c0 e9 02             	shr    cl,0x2
c00199a9:	c1 e2 06             	shl    edx,0x6
c00199ac:	09 d0                	or     eax,edx
c00199ae:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00199b4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00199ba:	83 e0 c0             	and    eax,0xffffffc0
c00199bd:	09 c1                	or     ecx,eax
c00199bf:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00199c5:	83 ec 0c             	sub    esp,0xc
c00199c8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00199cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00199d3:	50                   	push   eax
c00199d4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00199d8:	55                   	push   ebp
c00199d9:	56                   	push   esi
c00199da:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00199de:	57                   	push   edi
c00199df:	68 00 00 00 80       	push   0x80000000
c00199e4:	e8 e5 f5 ff ff       	call   c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199e9:	83 c4 20             	add    esp,0x20
c00199ec:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00199f4:	76 22                	jbe    c0019a18 <CPU::detectFeatures()+0x604>
c00199f6:	83 ec 0c             	sub    esp,0xc
c00199f9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00199fd:	50                   	push   eax
c00199fe:	55                   	push   ebp
c00199ff:	56                   	push   esi
c0019a00:	57                   	push   edi
c0019a01:	68 01 00 00 80       	push   0x80000001
c0019a06:	e8 c3 f5 ff ff       	call   c0018fce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a0b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019a15:	83 c4 20             	add    esp,0x20
c0019a18:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019a1e:	83 f8 01             	cmp    eax,0x1
c0019a21:	75 6f                	jne    c0019a92 <CPU::detectFeatures()+0x67e>
c0019a23:	51                   	push   ecx
c0019a24:	51                   	push   ecx
c0019a25:	68 d2 c7 02 c0       	push   0xc002c7d2
c0019a2a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019a2e:	56                   	push   esi
c0019a2f:	e8 d8 6d fe ff       	call   c000080c <strcpy>
c0019a34:	5f                   	pop    edi
c0019a35:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a3b:	5d                   	pop    ebp
c0019a3c:	66 c1 e8 06          	shr    ax,0x6
c0019a40:	0f b6 c0             	movzx  eax,al
c0019a43:	50                   	push   eax
c0019a44:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a4a:	c1 e8 0e             	shr    eax,0xe
c0019a4d:	0f b6 c0             	movzx  eax,al
c0019a50:	50                   	push   eax
c0019a51:	e8 22 f2 ff ff       	call   c0018c78 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019a56:	5a                   	pop    edx
c0019a57:	59                   	pop    ecx
c0019a58:	50                   	push   eax
c0019a59:	56                   	push   esi
c0019a5a:	e8 ed 6e fe ff       	call   c000094c <strcat>
c0019a5f:	5f                   	pop    edi
c0019a60:	5d                   	pop    ebp
c0019a61:	56                   	push   esi
c0019a62:	53                   	push   ebx
c0019a63:	e8 ae a9 ff ff       	call   c0014416 <Device::setName(char const*)>
c0019a68:	58                   	pop    eax
c0019a69:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a6f:	5a                   	pop    edx
c0019a70:	68 d9 c7 02 c0       	push   0xc002c7d9
c0019a75:	50                   	push   eax
c0019a76:	e8 1d 6e fe ff       	call   c0000898 <strcmp>
c0019a7b:	83 c4 10             	add    esp,0x10
c0019a7e:	85 c0                	test   eax,eax
c0019a80:	0f 85 71 03 00 00    	jne    c0019df7 <CPU::detectFeatures()+0x9e3>
c0019a86:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019a8d:	e9 65 03 00 00       	jmp    c0019df7 <CPU::detectFeatures()+0x9e3>
c0019a92:	83 f8 02             	cmp    eax,0x2
c0019a95:	0f 85 b5 00 00 00    	jne    c0019b50 <CPU::detectFeatures()+0x73c>
c0019a9b:	57                   	push   edi
c0019a9c:	57                   	push   edi
c0019a9d:	68 eb c7 02 c0       	push   0xc002c7eb
c0019aa2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019aa6:	56                   	push   esi
c0019aa7:	e8 60 6d fe ff       	call   c000080c <strcpy>
c0019aac:	5d                   	pop    ebp
c0019aad:	58                   	pop    eax
c0019aae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ab4:	66 c1 e8 06          	shr    ax,0x6
c0019ab8:	0f b6 c0             	movzx  eax,al
c0019abb:	50                   	push   eax
c0019abc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ac2:	c1 e8 0e             	shr    eax,0xe
c0019ac5:	0f b6 c0             	movzx  eax,al
c0019ac8:	50                   	push   eax
c0019ac9:	e8 16 f0 ff ff       	call   c0018ae4 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019ace:	5a                   	pop    edx
c0019acf:	59                   	pop    ecx
c0019ad0:	50                   	push   eax
c0019ad1:	56                   	push   esi
c0019ad2:	e8 75 6e fe ff       	call   c000094c <strcat>
c0019ad7:	5f                   	pop    edi
c0019ad8:	5d                   	pop    ebp
c0019ad9:	56                   	push   esi
c0019ada:	53                   	push   ebx
c0019adb:	e8 36 a9 ff ff       	call   c0014416 <Device::setName(char const*)>
c0019ae0:	58                   	pop    eax
c0019ae1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019ae7:	5a                   	pop    edx
c0019ae8:	68 f0 c7 02 c0       	push   0xc002c7f0
c0019aed:	50                   	push   eax
c0019aee:	e8 a5 6d fe ff       	call   c0000898 <strcmp>
c0019af3:	83 c4 10             	add    esp,0x10
c0019af6:	85 c0                	test   eax,eax
c0019af8:	75 20                	jne    c0019b1a <CPU::detectFeatures()+0x706>
c0019afa:	8b 15 e8 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3e8
c0019b00:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019b06:	a8 01                	test   al,0x1
c0019b08:	74 10                	je     c0019b1a <CPU::detectFeatures()+0x706>
c0019b0a:	83 e0 fe             	and    eax,0xfffffffe
c0019b0d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019b13:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019b1a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b20:	c1 e8 0e             	shr    eax,0xe
c0019b23:	3c 05                	cmp    al,0x5
c0019b25:	0f 85 cc 02 00 00    	jne    c0019df7 <CPU::detectFeatures()+0x9e3>
c0019b2b:	56                   	push   esi
c0019b2c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019b32:	83 e0 0f             	and    eax,0xf
c0019b35:	50                   	push   eax
c0019b36:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b3c:	66 c1 e8 06          	shr    ax,0x6
c0019b40:	0f b6 c0             	movzx  eax,al
c0019b43:	50                   	push   eax
c0019b44:	6a 05                	push   0x5
c0019b46:	e8 0f f4 ff ff       	call   c0018f5a <CPU::AMD_K6_writeback(int, int, int)>
c0019b4b:	e9 1f 02 00 00       	jmp    c0019d6f <CPU::detectFeatures()+0x95b>
c0019b50:	8d 50 fd             	lea    edx,[eax-0x3]
c0019b53:	83 fa 01             	cmp    edx,0x1
c0019b56:	76 09                	jbe    c0019b61 <CPU::detectFeatures()+0x74d>
c0019b58:	83 f8 06             	cmp    eax,0x6
c0019b5b:	0f 85 91 01 00 00    	jne    c0019cf2 <CPU::detectFeatures()+0x8de>
c0019b61:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b67:	c1 ea 0e             	shr    edx,0xe
c0019b6a:	80 fa 05             	cmp    dl,0x5
c0019b6d:	75 7b                	jne    c0019bea <CPU::detectFeatures()+0x7d6>
c0019b6f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b75:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b7a:	66 81 fa 00 01       	cmp    dx,0x100
c0019b7f:	75 0c                	jne    c0019b8d <CPU::detectFeatures()+0x779>
c0019b81:	51                   	push   ecx
c0019b82:	51                   	push   ecx
c0019b83:	68 f7 c7 02 c0       	push   0xc002c7f7
c0019b88:	e9 dc 01 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019b8d:	66 81 fa 00 02       	cmp    dx,0x200
c0019b92:	75 0c                	jne    c0019ba0 <CPU::detectFeatures()+0x78c>
c0019b94:	52                   	push   edx
c0019b95:	52                   	push   edx
c0019b96:	68 0a c8 02 c0       	push   0xc002c80a
c0019b9b:	e9 c9 01 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019ba0:	66 81 fa 40 02       	cmp    dx,0x240
c0019ba5:	75 0c                	jne    c0019bb3 <CPU::detectFeatures()+0x79f>
c0019ba7:	50                   	push   eax
c0019ba8:	50                   	push   eax
c0019ba9:	68 1c c8 02 c0       	push   0xc002c81c
c0019bae:	e9 b6 01 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019bb3:	83 f8 06             	cmp    eax,0x6
c0019bb6:	75 0c                	jne    c0019bc4 <CPU::detectFeatures()+0x7b0>
c0019bb8:	50                   	push   eax
c0019bb9:	50                   	push   eax
c0019bba:	68 2e c8 02 c0       	push   0xc002c82e
c0019bbf:	e9 a5 01 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019bc4:	83 f8 04             	cmp    eax,0x4
c0019bc7:	75 0c                	jne    c0019bd5 <CPU::detectFeatures()+0x7c1>
c0019bc9:	50                   	push   eax
c0019bca:	50                   	push   eax
c0019bcb:	68 3a c8 02 c0       	push   0xc002c83a
c0019bd0:	e9 94 01 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019bd5:	83 f8 03             	cmp    eax,0x3
c0019bd8:	0f 85 19 02 00 00    	jne    c0019df7 <CPU::detectFeatures()+0x9e3>
c0019bde:	50                   	push   eax
c0019bdf:	50                   	push   eax
c0019be0:	68 42 c8 02 c0       	push   0xc002c842
c0019be5:	e9 7f 01 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019bea:	80 fa 06             	cmp    dl,0x6
c0019bed:	0f 85 db 00 00 00    	jne    c0019cce <CPU::detectFeatures()+0x8ba>
c0019bf3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019bf9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019bfe:	66 81 fa 80 01       	cmp    dx,0x180
c0019c03:	75 0c                	jne    c0019c11 <CPU::detectFeatures()+0x7fd>
c0019c05:	50                   	push   eax
c0019c06:	50                   	push   eax
c0019c07:	68 4d c8 02 c0       	push   0xc002c84d
c0019c0c:	e9 58 01 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019c11:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019c17:	66 f7 c1 80 ff       	test   cx,0xff80
c0019c1c:	75 0c                	jne    c0019c2a <CPU::detectFeatures()+0x816>
c0019c1e:	50                   	push   eax
c0019c1f:	50                   	push   eax
c0019c20:	68 5d c8 02 c0       	push   0xc002c85d
c0019c25:	e9 3f 01 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019c2a:	66 81 fa 40 02       	cmp    dx,0x240
c0019c2f:	75 0c                	jne    c0019c3d <CPU::detectFeatures()+0x829>
c0019c31:	55                   	push   ebp
c0019c32:	55                   	push   ebp
c0019c33:	68 64 c8 02 c0       	push   0xc002c864
c0019c38:	e9 2c 01 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019c3d:	66 81 fa 80 02       	cmp    dx,0x280
c0019c42:	75 0c                	jne    c0019c50 <CPU::detectFeatures()+0x83c>
c0019c44:	57                   	push   edi
c0019c45:	57                   	push   edi
c0019c46:	68 6d c8 02 c0       	push   0xc002c86d
c0019c4b:	e9 19 01 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019c50:	66 81 fa 40 03       	cmp    dx,0x340
c0019c55:	74 ed                	je     c0019c44 <CPU::detectFeatures()+0x830>
c0019c57:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019c5c:	75 0c                	jne    c0019c6a <CPU::detectFeatures()+0x856>
c0019c5e:	56                   	push   esi
c0019c5f:	56                   	push   esi
c0019c60:	68 74 c8 02 c0       	push   0xc002c874
c0019c65:	e9 ff 00 00 00       	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019c6a:	83 f8 06             	cmp    eax,0x6
c0019c6d:	0f 84 45 ff ff ff    	je     c0019bb8 <CPU::detectFeatures()+0x7a4>
c0019c73:	83 f8 04             	cmp    eax,0x4
c0019c76:	0f 84 4d ff ff ff    	je     c0019bc9 <CPU::detectFeatures()+0x7b5>
c0019c7c:	83 f8 03             	cmp    eax,0x3
c0019c7f:	0f 85 72 01 00 00    	jne    c0019df7 <CPU::detectFeatures()+0x9e3>
c0019c85:	51                   	push   ecx
c0019c86:	51                   	push   ecx
c0019c87:	68 7d c8 02 c0       	push   0xc002c87d
c0019c8c:	53                   	push   ebx
c0019c8d:	e8 84 a7 ff ff       	call   c0014416 <Device::setName(char const*)>
c0019c92:	b1 c1                	mov    cl,0xc1
c0019c94:	88 c8                	mov    al,cl
c0019c96:	e6 22                	out    0x22,al
c0019c98:	e4 23                	in     al,0x23
c0019c9a:	88 c2                	mov    dl,al
c0019c9c:	88 c8                	mov    al,cl
c0019c9e:	e6 22                	out    0x22,al
c0019ca0:	88 d0                	mov    al,dl
c0019ca2:	83 c8 10             	or     eax,0x10
c0019ca5:	e6 23                	out    0x23,al
c0019ca7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019cae:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019cb1:	89 d0                	mov    eax,edx
c0019cb3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019cb9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019cbd:	40                   	inc    eax
c0019cbe:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019cc4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019cc9:	e9 a1 00 00 00       	jmp    c0019d6f <CPU::detectFeatures()+0x95b>
c0019cce:	83 f8 06             	cmp    eax,0x6
c0019cd1:	0f 84 e1 fe ff ff    	je     c0019bb8 <CPU::detectFeatures()+0x7a4>
c0019cd7:	83 f8 04             	cmp    eax,0x4
c0019cda:	0f 84 e9 fe ff ff    	je     c0019bc9 <CPU::detectFeatures()+0x7b5>
c0019ce0:	83 f8 03             	cmp    eax,0x3
c0019ce3:	0f 85 0e 01 00 00    	jne    c0019df7 <CPU::detectFeatures()+0x9e3>
c0019ce9:	52                   	push   edx
c0019cea:	52                   	push   edx
c0019ceb:	68 88 c8 02 c0       	push   0xc002c888
c0019cf0:	eb 77                	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019cf2:	83 f8 07             	cmp    eax,0x7
c0019cf5:	75 09                	jne    c0019d00 <CPU::detectFeatures()+0x8ec>
c0019cf7:	50                   	push   eax
c0019cf8:	50                   	push   eax
c0019cf9:	68 92 c8 02 c0       	push   0xc002c892
c0019cfe:	eb 69                	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019d00:	83 f8 0a             	cmp    eax,0xa
c0019d03:	75 09                	jne    c0019d0e <CPU::detectFeatures()+0x8fa>
c0019d05:	50                   	push   eax
c0019d06:	50                   	push   eax
c0019d07:	68 9d c8 02 c0       	push   0xc002c89d
c0019d0c:	eb 5b                	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019d0e:	83 f8 0b             	cmp    eax,0xb
c0019d11:	75 09                	jne    c0019d1c <CPU::detectFeatures()+0x908>
c0019d13:	50                   	push   eax
c0019d14:	50                   	push   eax
c0019d15:	68 a5 c8 02 c0       	push   0xc002c8a5
c0019d1a:	eb 4d                	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019d1c:	83 f8 08             	cmp    eax,0x8
c0019d1f:	75 09                	jne    c0019d2a <CPU::detectFeatures()+0x916>
c0019d21:	50                   	push   eax
c0019d22:	50                   	push   eax
c0019d23:	68 ae c8 02 c0       	push   0xc002c8ae
c0019d28:	eb 3f                	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019d2a:	83 f8 09             	cmp    eax,0x9
c0019d2d:	75 09                	jne    c0019d38 <CPU::detectFeatures()+0x924>
c0019d2f:	50                   	push   eax
c0019d30:	50                   	push   eax
c0019d31:	68 b6 c8 02 c0       	push   0xc002c8b6
c0019d36:	eb 31                	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019d38:	83 f8 05             	cmp    eax,0x5
c0019d3b:	75 09                	jne    c0019d46 <CPU::detectFeatures()+0x932>
c0019d3d:	50                   	push   eax
c0019d3e:	50                   	push   eax
c0019d3f:	68 be c8 02 c0       	push   0xc002c8be
c0019d44:	eb 23                	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019d46:	83 f8 0c             	cmp    eax,0xc
c0019d49:	75 09                	jne    c0019d54 <CPU::detectFeatures()+0x940>
c0019d4b:	55                   	push   ebp
c0019d4c:	55                   	push   ebp
c0019d4d:	68 cc c8 02 c0       	push   0xc002c8cc
c0019d52:	eb 15                	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019d54:	83 f8 0d             	cmp    eax,0xd
c0019d57:	75 09                	jne    c0019d62 <CPU::detectFeatures()+0x94e>
c0019d59:	57                   	push   edi
c0019d5a:	57                   	push   edi
c0019d5b:	68 d7 c8 02 c0       	push   0xc002c8d7
c0019d60:	eb 07                	jmp    c0019d69 <CPU::detectFeatures()+0x955>
c0019d62:	56                   	push   esi
c0019d63:	56                   	push   esi
c0019d64:	68 eb c8 02 c0       	push   0xc002c8eb
c0019d69:	53                   	push   ebx
c0019d6a:	e8 a7 a6 ff ff       	call   c0014416 <Device::setName(char const*)>
c0019d6f:	83 c4 10             	add    esp,0x10
c0019d72:	e9 80 00 00 00       	jmp    c0019df7 <CPU::detectFeatures()+0x9e3>
c0019d77:	51                   	push   ecx
c0019d78:	51                   	push   ecx
c0019d79:	68 37 c7 02 c0       	push   0xc002c737
c0019d7e:	55                   	push   ebp
c0019d7f:	e8 88 6a fe ff       	call   c000080c <strcpy>
c0019d84:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019d8e:	e8 1b 65 fe ff       	call   c00002ae <is486>
c0019d93:	83 c4 10             	add    esp,0x10
c0019d96:	85 c0                	test   eax,eax
c0019d98:	74 2b                	je     c0019dc5 <CPU::detectFeatures()+0x9b1>
c0019d9a:	52                   	push   edx
c0019d9b:	52                   	push   edx
c0019d9c:	68 f7 c8 02 c0       	push   0xc002c8f7
c0019da1:	53                   	push   ebx
c0019da2:	e8 6f a6 ff ff       	call   c0014416 <Device::setName(char const*)>
c0019da7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019dae:	0f 20 c0             	mov    eax,cr0
c0019db1:	83 e0 14             	and    eax,0x14
c0019db4:	83 c4 10             	add    esp,0x10
c0019db7:	83 f8 04             	cmp    eax,0x4
c0019dba:	75 1f                	jne    c0019ddb <CPU::detectFeatures()+0x9c7>
c0019dbc:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019dc3:	eb 32                	jmp    c0019df7 <CPU::detectFeatures()+0x9e3>
c0019dc5:	50                   	push   eax
c0019dc6:	50                   	push   eax
c0019dc7:	68 02 c9 02 c0       	push   0xc002c902
c0019dcc:	53                   	push   ebx
c0019dcd:	e8 44 a6 ff ff       	call   c0014416 <Device::setName(char const*)>
c0019dd2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019dd9:	eb d3                	jmp    c0019dae <CPU::detectFeatures()+0x99a>
c0019ddb:	e8 a9 64 fe ff       	call   c0000289 <hasLegacyFPU>
c0019de0:	83 e0 01             	and    eax,0x1
c0019de3:	8d 14 00             	lea    edx,[eax+eax*1]
c0019de6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019dec:	83 e0 fd             	and    eax,0xfffffffd
c0019def:	09 d0                	or     eax,edx
c0019df1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019df7:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019dfe:	83 c4 4c             	add    esp,0x4c
c0019e01:	5b                   	pop    ebx
c0019e02:	5e                   	pop    esi
c0019e03:	5f                   	pop    edi
c0019e04:	5d                   	pop    ebp
c0019e05:	c3                   	ret    

c0019e06 <CPU::setupSMEP()>:
c0019e06:	0f 20 e0             	mov    eax,cr4
c0019e09:	0d 00 00 10 00       	or     eax,0x100000
c0019e0e:	0f 22 e0             	mov    cr4,eax
c0019e11:	c3                   	ret    

c0019e12 <CPU::setupUMIP()>:
c0019e12:	0f 20 e0             	mov    eax,cr4
c0019e15:	80 cc 08             	or     ah,0x8
c0019e18:	0f 22 e0             	mov    cr4,eax
c0019e1b:	c3                   	ret    

c0019e1c <CPU::setupTSC()>:
c0019e1c:	0f 20 e0             	mov    eax,cr4
c0019e1f:	83 c8 04             	or     eax,0x4
c0019e22:	0f 22 e0             	mov    cr4,eax
c0019e25:	c3                   	ret    

c0019e26 <CPU::setupLargePages()>:
c0019e26:	0f 20 e0             	mov    eax,cr4
c0019e29:	83 c8 10             	or     eax,0x10
c0019e2c:	0f 22 e0             	mov    cr4,eax
c0019e2f:	c3                   	ret    

c0019e30 <CPU::setupPAT()>:
c0019e30:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0019e35:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e3c:	74 2c                	je     c0019e6a <CPU::setupPAT()+0x3a>
c0019e3e:	53                   	push   ebx
c0019e3f:	83 ec 10             	sub    esp,0x10
c0019e42:	68 77 02 00 00       	push   0x277
c0019e47:	50                   	push   eax
c0019e48:	e8 e5 4f ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019e4d:	83 e2 f8             	and    edx,0xfffffff8
c0019e50:	83 ca 01             	or     edx,0x1
c0019e53:	52                   	push   edx
c0019e54:	50                   	push   eax
c0019e55:	68 77 02 00 00       	push   0x277
c0019e5a:	ff 35 e8 f3 02 c0    	push   DWORD PTR ds:0xc002f3e8
c0019e60:	e8 f9 4f ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019e65:	83 c4 28             	add    esp,0x28
c0019e68:	5b                   	pop    ebx
c0019e69:	c3                   	ret    
c0019e6a:	c3                   	ret    
c0019e6b:	90                   	nop

c0019e6c <CPU::setupMTRR()>:
c0019e6c:	c3                   	ret    
c0019e6d:	90                   	nop

c0019e6e <CPU::setupGlobalPages()>:
c0019e6e:	0f 20 e0             	mov    eax,cr4
c0019e71:	0c 80                	or     al,0x80
c0019e73:	0f 22 e0             	mov    cr4,eax
c0019e76:	c3                   	ret    
c0019e77:	90                   	nop

c0019e78 <CPU::allowUsermodeDataAccess()>:
c0019e78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e7c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e83:	74 03                	je     c0019e88 <CPU::allowUsermodeDataAccess()+0x10>
c0019e85:	0f 01 cb             	stac   
c0019e88:	c3                   	ret    
c0019e89:	90                   	nop

c0019e8a <CPU::prohibitUsermodeDataAccess()>:
c0019e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e8e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e95:	74 03                	je     c0019e9a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019e97:	0f 01 ca             	clac   
c0019e9a:	c3                   	ret    
c0019e9b:	90                   	nop

c0019e9c <CPU::setupSMAP()>:
c0019e9c:	0f 20 e0             	mov    eax,cr4
c0019e9f:	0d 00 00 20 00       	or     eax,0x200000
c0019ea4:	0f 22 e0             	mov    cr4,eax
c0019ea7:	eb e1                	jmp    c0019e8a <CPU::prohibitUsermodeDataAccess()>
c0019ea9:	90                   	nop

c0019eaa <CPU::setupFeatures()>:
c0019eaa:	83 ec 0c             	sub    esp,0xc
c0019ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019eb1:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019eb8:	74 07                	je     c0019ec1 <CPU::setupFeatures()+0x17>
c0019eba:	52                   	push   edx
c0019ebb:	e8 46 ff ff ff       	call   c0019e06 <CPU::setupSMEP()>
c0019ec0:	58                   	pop    eax
c0019ec1:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019ec8:	74 07                	je     c0019ed1 <CPU::setupFeatures()+0x27>
c0019eca:	52                   	push   edx
c0019ecb:	e8 cc ff ff ff       	call   c0019e9c <CPU::setupSMAP()>
c0019ed0:	58                   	pop    eax
c0019ed1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019ed8:	74 07                	je     c0019ee1 <CPU::setupFeatures()+0x37>
c0019eda:	52                   	push   edx
c0019edb:	e8 32 ff ff ff       	call   c0019e12 <CPU::setupUMIP()>
c0019ee0:	58                   	pop    eax
c0019ee1:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019ee8:	74 07                	je     c0019ef1 <CPU::setupFeatures()+0x47>
c0019eea:	52                   	push   edx
c0019eeb:	e8 2c ff ff ff       	call   c0019e1c <CPU::setupTSC()>
c0019ef0:	58                   	pop    eax
c0019ef1:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019ef8:	74 07                	je     c0019f01 <CPU::setupFeatures()+0x57>
c0019efa:	52                   	push   edx
c0019efb:	e8 26 ff ff ff       	call   c0019e26 <CPU::setupLargePages()>
c0019f00:	59                   	pop    ecx
c0019f01:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019f08:	74 07                	je     c0019f11 <CPU::setupFeatures()+0x67>
c0019f0a:	52                   	push   edx
c0019f0b:	e8 5e ff ff ff       	call   c0019e6e <CPU::setupGlobalPages()>
c0019f10:	58                   	pop    eax
c0019f11:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019f18:	74 0c                	je     c0019f26 <CPU::setupFeatures()+0x7c>
c0019f1a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019f1e:	83 c4 0c             	add    esp,0xc
c0019f21:	e9 0a ff ff ff       	jmp    c0019e30 <CPU::setupPAT()>
c0019f26:	83 c4 0c             	add    esp,0xc
c0019f29:	c3                   	ret    

c0019f2a <CPU::open(int, int, void*)>:
c0019f2a:	57                   	push   edi
c0019f2b:	56                   	push   esi
c0019f2c:	53                   	push   ebx
c0019f2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f35:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019f3b:	83 ec 0c             	sub    esp,0xc
c0019f3e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019f44:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019f4a:	50                   	push   eax
c0019f4b:	e8 ce 51 ff ff       	call   c000f11e <GDT::setup()>
c0019f50:	83 c4 0c             	add    esp,0xc
c0019f53:	6a 00                	push   0x0
c0019f55:	68 ef be ad de       	push   0xdeadbeef
c0019f5a:	57                   	push   edi
c0019f5b:	e8 f2 73 ff ff       	call   c0011352 <TSS::setup(unsigned long, unsigned long)>
c0019f60:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f63:	e8 ca 73 ff ff       	call   c0011332 <TSS::flush()>
c0019f68:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019f6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f71:	e8 0c 54 ff ff       	call   c000f382 <IDT::setup()>
c0019f76:	b8 00 04 00 00       	mov    eax,0x400
c0019f7b:	0f 23 f8             	mov    db7,eax
c0019f7e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019f88:	e8 1c 5f ff ff       	call   c000fea9 <Phys::allocatePage()>
c0019f8d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019f93:	89 30                	mov    DWORD PTR [eax],esi
c0019f95:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f9b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019f9e:	58                   	pop    eax
c0019f9f:	5a                   	pop    edx
c0019fa0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019faa:	e8 43 85 ff ff       	call   c00124f2 <VAS::setCPUSpecific(unsigned long)>
c0019faf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fb2:	e8 5d f4 ff ff       	call   c0019414 <CPU::detectFeatures()>
c0019fb7:	e8 8c b8 ff ff       	call   c0015848 <setupInterruptController()>
c0019fbc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019fc2:	a1 00 f4 02 c0       	mov    eax,ds:0xc002f400
c0019fc7:	83 e0 10             	and    eax,0x10
c0019fca:	83 f8 01             	cmp    eax,0x1
c0019fcd:	19 c0                	sbb    eax,eax
c0019fcf:	83 e0 46             	and    eax,0x46
c0019fd2:	83 c0 1e             	add    eax,0x1e
c0019fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fd8:	e8 c2 ce ff ff       	call   c0016e9f <setupTimer(int)>
c0019fdd:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019fe3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fe6:	e8 bf fe ff ff       	call   c0019eaa <CPU::setupFeatures()>
c0019feb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fee:	e8 a5 f1 ff ff       	call   c0019198 <CPU::displayFeatures()>
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	31 c0                	xor    eax,eax
c0019ff8:	5b                   	pop    ebx
c0019ff9:	5e                   	pop    esi
c0019ffa:	5f                   	pop    edi
c0019ffb:	c3                   	ret    

c0019ffc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ffc:	57                   	push   edi
c0019ffd:	56                   	push   esi
c0019ffe:	53                   	push   ebx
c0019fff:	51                   	push   ecx
c001a000:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a004:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001a007:	0f 02 c0             	lar    eax,ax
c001a00a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001a00d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a011:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001a014:	88 ca                	mov    dl,cl
c001a016:	c0 ea 06             	shr    dl,0x6
c001a019:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001a01d:	89 ca                	mov    edx,ecx
c001a01f:	66 c1 ea 03          	shr    dx,0x3
c001a023:	83 e2 07             	and    edx,0x7
c001a026:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001a02b:	88 17                	mov    BYTE PTR [edi],dl
c001a02d:	0f 84 a6 01 00 00    	je     c001a1d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001a033:	83 e1 07             	and    ecx,0x7
c001a036:	80 f9 04             	cmp    cl,0x4
c001a039:	0f 84 98 00 00 00    	je     c001a0d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001a03f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a044:	0f 95 c0             	setne  al
c001a047:	80 f9 05             	cmp    cl,0x5
c001a04a:	0f 95 c2             	setne  dl
c001a04d:	08 c2                	or     dl,al
c001a04f:	74 79                	je     c001a0ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001a051:	84 c9                	test   cl,cl
c001a053:	75 05                	jne    c001a05a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001a055:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a058:	eb 3c                	jmp    c001a096 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a05a:	80 f9 01             	cmp    cl,0x1
c001a05d:	75 05                	jne    c001a064 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001a05f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a062:	eb 32                	jmp    c001a096 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a064:	80 f9 02             	cmp    cl,0x2
c001a067:	75 05                	jne    c001a06e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001a069:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a06c:	eb 28                	jmp    c001a096 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a06e:	31 c0                	xor    eax,eax
c001a070:	80 f9 03             	cmp    cl,0x3
c001a073:	75 05                	jne    c001a07a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001a075:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a078:	eb 1c                	jmp    c001a096 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a07a:	80 f9 05             	cmp    cl,0x5
c001a07d:	75 05                	jne    c001a084 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001a07f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a082:	eb 12                	jmp    c001a096 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a084:	80 f9 06             	cmp    cl,0x6
c001a087:	75 05                	jne    c001a08e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001a089:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a08c:	eb 08                	jmp    c001a096 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a08e:	80 f9 07             	cmp    cl,0x7
c001a091:	75 03                	jne    c001a096 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a093:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a096:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a09b:	75 10                	jne    c001a0ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001a09d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001a0a1:	b9 03 00 00 00       	mov    ecx,0x3
c001a0a6:	01 d0                	add    eax,edx
c001a0a8:	e9 37 01 00 00       	jmp    c001a1e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a0ad:	b9 02 00 00 00       	mov    ecx,0x2
c001a0b2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a0b7:	0f 85 27 01 00 00    	jne    c001a1e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a0bd:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a0c0:	b9 06 00 00 00       	mov    ecx,0x6
c001a0c5:	e9 1a 01 00 00       	jmp    c001a1e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a0ca:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a0cd:	b9 06 00 00 00       	mov    ecx,0x6
c001a0d2:	e9 0f 01 00 00       	jmp    c001a1e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0d7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a0da:	88 ca                	mov    dl,cl
c001a0dc:	c0 ea 06             	shr    dl,0x6
c001a0df:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a0e3:	89 ca                	mov    edx,ecx
c001a0e5:	66 c1 ea 03          	shr    dx,0x3
c001a0e9:	83 e2 07             	and    edx,0x7
c001a0ec:	80 e1 07             	and    cl,0x7
c001a0ef:	75 05                	jne    c001a0f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a0f1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a0f4:	eb 4c                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0f6:	80 f9 01             	cmp    cl,0x1
c001a0f9:	75 05                	jne    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a0fb:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a0fe:	eb 42                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a100:	80 f9 02             	cmp    cl,0x2
c001a103:	75 05                	jne    c001a10a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a105:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a108:	eb 38                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a10a:	80 f9 03             	cmp    cl,0x3
c001a10d:	75 05                	jne    c001a114 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a10f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a112:	eb 2e                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a114:	80 f9 04             	cmp    cl,0x4
c001a117:	75 12                	jne    c001a12b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a119:	f6 c4 60             	test   ah,0x60
c001a11c:	75 08                	jne    c001a126 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a11e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a121:	8d 78 14             	lea    edi,[eax+0x14]
c001a124:	eb 1c                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a126:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a129:	eb 17                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a12b:	80 f9 05             	cmp    cl,0x5
c001a12e:	75 05                	jne    c001a135 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a130:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a133:	eb 0d                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a135:	80 f9 06             	cmp    cl,0x6
c001a138:	75 05                	jne    c001a13f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a13a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a13d:	eb 03                	jmp    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a13f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a142:	84 d2                	test   dl,dl
c001a144:	75 05                	jne    c001a14b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a146:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a149:	eb 3c                	jmp    c001a187 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a14b:	80 fa 01             	cmp    dl,0x1
c001a14e:	75 05                	jne    c001a155 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a150:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a153:	eb 32                	jmp    c001a187 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a155:	80 fa 02             	cmp    dl,0x2
c001a158:	75 05                	jne    c001a15f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a15a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a15d:	eb 28                	jmp    c001a187 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a15f:	80 fa 03             	cmp    dl,0x3
c001a162:	75 05                	jne    c001a169 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a164:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a167:	eb 1e                	jmp    c001a187 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a169:	31 c0                	xor    eax,eax
c001a16b:	80 fa 04             	cmp    dl,0x4
c001a16e:	74 17                	je     c001a187 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a170:	80 fa 05             	cmp    dl,0x5
c001a173:	75 05                	jne    c001a17a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a175:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a178:	eb 0d                	jmp    c001a187 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a17a:	80 fa 06             	cmp    dl,0x6
c001a17d:	75 05                	jne    c001a184 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a17f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a182:	eb 03                	jmp    c001a187 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a184:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a187:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a18c:	0f 94 c2             	sete   dl
c001a18f:	80 f9 05             	cmp    cl,0x5
c001a192:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a196:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a19b:	d3 e0                	shl    eax,cl
c001a19d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a1a1:	74 0a                	je     c001a1ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a1a3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a1a6:	b9 07 00 00 00       	mov    ecx,0x7
c001a1ab:	eb 37                	jmp    c001a1e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a1ad:	01 f8                	add    eax,edi
c001a1af:	b9 03 00 00 00       	mov    ecx,0x3
c001a1b4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a1b9:	74 2b                	je     c001a1e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a1bb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a1c0:	75 0d                	jne    c001a1cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a1c2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a1c6:	01 c8                	add    eax,ecx
c001a1c8:	b9 04 00 00 00       	mov    ecx,0x4
c001a1cd:	eb 17                	jmp    c001a1e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a1cf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a1d2:	b9 07 00 00 00       	mov    ecx,0x7
c001a1d7:	eb 0d                	jmp    c001a1e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a1d9:	b9 02 00 00 00       	mov    ecx,0x2
c001a1de:	b2 01                	mov    dl,0x1
c001a1e0:	31 c0                	xor    eax,eax
c001a1e2:	eb 02                	jmp    c001a1e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a1e4:	31 d2                	xor    edx,edx
c001a1e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a1ea:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a1ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1f0:	88 11                	mov    BYTE PTR [ecx],dl
c001a1f2:	5a                   	pop    edx
c001a1f3:	5b                   	pop    ebx
c001a1f4:	5e                   	pop    esi
c001a1f5:	5f                   	pop    edi
c001a1f6:	c3                   	ret    

c001a1f7 <Krnl::smpEntry()>:
c001a1f7:	eb fe                	jmp    c001a1f7 <Krnl::smpEntry()>

c001a1f9 <Krnl::startCPU(int)>:
c001a1f9:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001a1fe:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a205:	0f 84 36 01 00 00    	je     c001a341 <Krnl::startCPU(int)+0x148>
c001a20b:	53                   	push   ebx
c001a20c:	83 ec 10             	sub    esp,0x10
c001a20f:	fa                   	cli    
c001a210:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001a216:	6a 1b                	push   0x1b
c001a218:	ff 35 e8 f3 02 c0    	push   DWORD PTR ds:0xc002f3e8
c001a21e:	e8 0f 4c ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c001a223:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a228:	89 c3                	mov    ebx,eax
c001a22a:	58                   	pop    eax
c001a22b:	5a                   	pop    edx
c001a22c:	53                   	push   ebx
c001a22d:	68 3c c9 02 c0       	push   0xc002c93c
c001a232:	e8 b0 8b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001a237:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a245:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a24f:	c1 e0 18             	shl    eax,0x18
c001a252:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a258:	83 c4 10             	add    esp,0x10
c001a25b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a261:	09 c2                	or     edx,eax
c001a263:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a269:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a26f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a275:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a27b:	80 cd c5             	or     ch,0xc5
c001a27e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a284:	f3 90                	pause  
c001a286:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a288:	0f ba e1 0c          	bt     ecx,0xc
c001a28c:	72 f6                	jb     c001a284 <Krnl::startCPU(int)+0x8b>
c001a28e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a294:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a29a:	09 c1                	or     ecx,eax
c001a29c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a2a2:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a2a8:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a2ae:	80 cd 85             	or     ch,0x85
c001a2b1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a2b7:	f3 90                	pause  
c001a2b9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a2bb:	0f ba e1 0c          	bt     ecx,0xc
c001a2bf:	72 f6                	jb     c001a2b7 <Krnl::startCPU(int)+0xbe>
c001a2c1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a2cb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a2d1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a2d7:	09 c1                	or     ecx,eax
c001a2d9:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a2df:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a2e5:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a2eb:	81 c9 02 06 00 00    	or     ecx,0x602
c001a2f1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a2f7:	f3 90                	pause  
c001a2f9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a2fb:	0f ba e1 0c          	bt     ecx,0xc
c001a2ff:	72 f6                	jb     c001a2f7 <Krnl::startCPU(int)+0xfe>
c001a301:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a30b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a311:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a317:	09 c8                	or     eax,ecx
c001a319:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a31f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a325:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a32a:	0d 02 06 00 00       	or     eax,0x602
c001a32f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a335:	f3 90                	pause  
c001a337:	8b 02                	mov    eax,DWORD PTR [edx]
c001a339:	0f ba e0 0c          	bt     eax,0xc
c001a33d:	72 f6                	jb     c001a335 <Krnl::startCPU(int)+0x13c>
c001a33f:	eb fe                	jmp    c001a33f <Krnl::startCPU(int)+0x146>
c001a341:	c3                   	ret    

c001a342 <Krnl::startCPUs()>:
c001a342:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001a347:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a34d:	88 c2                	mov    dl,al
c001a34f:	83 e2 0a             	and    edx,0xa
c001a352:	80 fa 0a             	cmp    dl,0xa
c001a355:	75 09                	jne    c001a360 <Krnl::startCPUs()+0x1e>
c001a357:	a8 01                	test   al,0x1
c001a359:	74 05                	je     c001a360 <Krnl::startCPUs()+0x1e>
c001a35b:	e9 3b 5e fe ff       	jmp    c000019b <prepareTramp>
c001a360:	c3                   	ret    
c001a361:	90                   	nop

c001a362 <EnvVarContainer::getEnv(char const*)>:
c001a362:	57                   	push   edi
c001a363:	56                   	push   esi
c001a364:	53                   	push   ebx
c001a365:	31 db                	xor    ebx,ebx
c001a367:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a36b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a36d:	7e 2b                	jle    c001a39a <EnvVarContainer::getEnv(char const*)+0x38>
c001a36f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a376:	50                   	push   eax
c001a377:	50                   	push   eax
c001a378:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a37b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a37e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a382:	e8 11 65 fe ff       	call   c0000898 <strcmp>
c001a387:	83 c4 10             	add    esp,0x10
c001a38a:	85 c0                	test   eax,eax
c001a38c:	75 09                	jne    c001a397 <EnvVarContainer::getEnv(char const*)+0x35>
c001a38e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a391:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a395:	eb 05                	jmp    c001a39c <EnvVarContainer::getEnv(char const*)+0x3a>
c001a397:	43                   	inc    ebx
c001a398:	eb d1                	jmp    c001a36b <EnvVarContainer::getEnv(char const*)+0x9>
c001a39a:	31 c0                	xor    eax,eax
c001a39c:	5b                   	pop    ebx
c001a39d:	5e                   	pop    esi
c001a39e:	5f                   	pop    edi
c001a39f:	c3                   	ret    

c001a3a0 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a3a0:	55                   	push   ebp
c001a3a1:	57                   	push   edi
c001a3a2:	56                   	push   esi
c001a3a3:	53                   	push   ebx
c001a3a4:	83 ec 28             	sub    esp,0x28
c001a3a7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a3ab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001a3af:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a3b3:	56                   	push   esi
c001a3b4:	e8 b3 63 fe ff       	call   c000076c <strlen>
c001a3b9:	40                   	inc    eax
c001a3ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3bd:	e8 ca 54 ff ff       	call   c000f88c <malloc>
c001a3c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a3c9:	e8 9e 63 fe ff       	call   c000076c <strlen>
c001a3ce:	40                   	inc    eax
c001a3cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3d2:	e8 b5 54 ff ff       	call   c000f88c <malloc>
c001a3d7:	89 34 24             	mov    DWORD PTR [esp],esi
c001a3da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3de:	e8 89 63 fe ff       	call   c000076c <strlen>
c001a3e3:	83 c4 0c             	add    esp,0xc
c001a3e6:	40                   	inc    eax
c001a3e7:	50                   	push   eax
c001a3e8:	6a 00                	push   0x0
c001a3ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a3ee:	e8 5d 63 fe ff       	call   c0000750 <memset>
c001a3f3:	89 34 24             	mov    DWORD PTR [esp],esi
c001a3f6:	e8 71 63 fe ff       	call   c000076c <strlen>
c001a3fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a3ff:	8d 48 01             	lea    ecx,[eax+0x1]
c001a402:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a404:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a407:	89 de                	mov    esi,ebx
c001a409:	e8 5e 63 fe ff       	call   c000076c <strlen>
c001a40e:	83 c4 0c             	add    esp,0xc
c001a411:	40                   	inc    eax
c001a412:	50                   	push   eax
c001a413:	6a 00                	push   0x0
c001a415:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a419:	e8 32 63 fe ff       	call   c0000750 <memset>
c001a41e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a421:	e8 46 63 fe ff       	call   c000076c <strlen>
c001a426:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a42a:	8d 48 01             	lea    ecx,[eax+0x1]
c001a42d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a42f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a432:	40                   	inc    eax
c001a433:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a436:	c1 e0 03             	shl    eax,0x3
c001a439:	5a                   	pop    edx
c001a43a:	59                   	pop    ecx
c001a43b:	50                   	push   eax
c001a43c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a43f:	e8 34 54 ff ff       	call   c000f878 <realloc>
c001a444:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a448:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a44b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a44e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a452:	b9 08 00 00 00       	mov    ecx,0x8
c001a457:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a459:	83 c4 2c             	add    esp,0x2c
c001a45c:	5b                   	pop    ebx
c001a45d:	5e                   	pop    esi
c001a45e:	5f                   	pop    edi
c001a45f:	5d                   	pop    ebp
c001a460:	c3                   	ret    
c001a461:	90                   	nop

c001a462 <EnvVarContainer::deleteEnv(char const*)>:
c001a462:	c3                   	ret    
c001a463:	90                   	nop

c001a464 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a464:	55                   	push   ebp
c001a465:	57                   	push   edi
c001a466:	56                   	push   esi
c001a467:	53                   	push   ebx
c001a468:	81 ec 38 01 00 00    	sub    esp,0x138
c001a46e:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a475:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a47c:	68 14 01 00 00       	push   0x114
c001a481:	e8 06 54 ff ff       	call   c000f88c <malloc>
c001a486:	83 c4 0c             	add    esp,0xc
c001a489:	89 c5                	mov    ebp,eax
c001a48b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a48e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a495:	50                   	push   eax
c001a496:	e8 ab 8e ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001a49b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a49e:	e8 75 91 ff ff       	call   c0013618 <File::exists()>
c001a4a3:	83 c4 10             	add    esp,0x10
c001a4a6:	84 c0                	test   al,al
c001a4a8:	75 32                	jne    c001a4dc <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a4aa:	51                   	push   ecx
c001a4ab:	51                   	push   ecx
c001a4ac:	6a 12                	push   0x12
c001a4ae:	55                   	push   ebp
c001a4af:	e8 f6 8e ff ff       	call   c00133aa <File::open(FileOpenMode)>
c001a4b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4b7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a4ba:	89 34 24             	mov    DWORD PTR [esp],esi
c001a4bd:	e8 aa 62 fe ff       	call   c000076c <strlen>
c001a4c2:	5a                   	pop    edx
c001a4c3:	31 d2                	xor    edx,edx
c001a4c5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a4c9:	51                   	push   ecx
c001a4ca:	56                   	push   esi
c001a4cb:	52                   	push   edx
c001a4cc:	50                   	push   eax
c001a4cd:	55                   	push   ebp
c001a4ce:	ff d7                	call   edi
c001a4d0:	83 c4 14             	add    esp,0x14
c001a4d3:	55                   	push   ebp
c001a4d4:	e8 2f 8f ff ff       	call   c0013408 <File::close()>
c001a4d9:	83 c4 10             	add    esp,0x10
c001a4dc:	31 f6                	xor    esi,esi
c001a4de:	50                   	push   eax
c001a4df:	68 00 01 00 00       	push   0x100
c001a4e4:	6a 00                	push   0x0
c001a4e6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a4ea:	50                   	push   eax
c001a4eb:	e8 60 62 fe ff       	call   c0000750 <memset>
c001a4f0:	58                   	pop    eax
c001a4f1:	5a                   	pop    edx
c001a4f2:	6a 01                	push   0x1
c001a4f4:	55                   	push   ebp
c001a4f5:	e8 b0 8e ff ff       	call   c00133aa <File::open(FileOpenMode)>
c001a4fa:	83 c4 10             	add    esp,0x10
c001a4fd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a505:	83 ec 0c             	sub    esp,0xc
c001a508:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a50b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a50f:	51                   	push   ecx
c001a510:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a514:	52                   	push   edx
c001a515:	6a 00                	push   0x0
c001a517:	6a 01                	push   0x1
c001a519:	55                   	push   ebp
c001a51a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a51d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a521:	83 c4 20             	add    esp,0x20
c001a524:	3c 0d                	cmp    al,0xd
c001a526:	0f 84 16 01 00 00    	je     c001a642 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a52c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a531:	0f 84 fc 00 00 00    	je     c001a633 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a537:	3c 0a                	cmp    al,0xa
c001a539:	74 13                	je     c001a54e <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a53b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a540:	74 0c                	je     c001a54e <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a542:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a548:	0f 8e e5 00 00 00    	jle    c001a633 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a54e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a552:	83 ec 0c             	sub    esp,0xc
c001a555:	8d 78 01             	lea    edi,[eax+0x1]
c001a558:	57                   	push   edi
c001a559:	e8 2e 53 ff ff       	call   c000f88c <malloc>
c001a55e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a562:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a566:	8d 56 04             	lea    edx,[esi+0x4]
c001a569:	89 14 24             	mov    DWORD PTR [esp],edx
c001a56c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a570:	e8 17 53 ff ff       	call   c000f88c <malloc>
c001a575:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a579:	83 c4 0c             	add    esp,0xc
c001a57c:	57                   	push   edi
c001a57d:	6a 00                	push   0x0
c001a57f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a583:	e8 c8 61 fe ff       	call   c0000750 <memset>
c001a588:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a58c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a590:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a594:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a596:	83 c4 0c             	add    esp,0xc
c001a599:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a59d:	52                   	push   edx
c001a59e:	6a 00                	push   0x0
c001a5a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a5a4:	e8 a7 61 fe ff       	call   c0000750 <memset>
c001a5a9:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a5ad:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a5b1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a5b4:	e8 b3 61 fe ff       	call   c000076c <strlen>
c001a5b9:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a5bd:	89 c1                	mov    ecx,eax
c001a5bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5c1:	5e                   	pop    esi
c001a5c2:	5f                   	pop    edi
c001a5c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a5c7:	68 4d c9 02 c0       	push   0xc002c94d
c001a5cc:	e8 16 88 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001a5d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5d3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a5d6:	40                   	inc    eax
c001a5d7:	83 c4 10             	add    esp,0x10
c001a5da:	89 03                	mov    DWORD PTR [ebx],eax
c001a5dc:	85 d2                	test   edx,edx
c001a5de:	75 0c                	jne    c001a5ec <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a5e0:	83 ec 0c             	sub    esp,0xc
c001a5e3:	6a 08                	push   0x8
c001a5e5:	e8 a2 52 ff ff       	call   c000f88c <malloc>
c001a5ea:	eb 0c                	jmp    c001a5f8 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a5ec:	c1 e0 03             	shl    eax,0x3
c001a5ef:	51                   	push   ecx
c001a5f0:	51                   	push   ecx
c001a5f1:	50                   	push   eax
c001a5f2:	52                   	push   edx
c001a5f3:	e8 80 52 ff ff       	call   c000f878 <realloc>
c001a5f8:	83 c4 10             	add    esp,0x10
c001a5fb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a5fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a600:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a603:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a607:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a60b:	b9 08 00 00 00       	mov    ecx,0x8
c001a610:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a612:	31 f6                	xor    esi,esi
c001a614:	52                   	push   edx
c001a615:	68 00 01 00 00       	push   0x100
c001a61a:	6a 00                	push   0x0
c001a61c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a620:	50                   	push   eax
c001a621:	e8 2a 61 fe ff       	call   c0000750 <memset>
c001a626:	83 c4 10             	add    esp,0x10
c001a629:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a631:	eb 0f                	jmp    c001a642 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a633:	3c 3d                	cmp    al,0x3d
c001a635:	74 07                	je     c001a63e <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a637:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a63b:	46                   	inc    esi
c001a63c:	eb 04                	jmp    c001a642 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a63e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a642:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a647:	0f 85 b8 fe ff ff    	jne    c001a505 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a64d:	50                   	push   eax
c001a64e:	50                   	push   eax
c001a64f:	ff 33                	push   DWORD PTR [ebx]
c001a651:	68 5b c9 02 c0       	push   0xc002c95b
c001a656:	e8 8c 87 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001a65b:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a661:	5b                   	pop    ebx
c001a662:	5e                   	pop    esi
c001a663:	5f                   	pop    edi
c001a664:	5d                   	pop    ebp
c001a665:	c3                   	ret    

c001a666 <EnvVarContainer::__loadSystem()>:
c001a666:	83 ec 10             	sub    esp,0x10
c001a669:	68 20 e9 02 c0       	push   0xc002e920
c001a66e:	68 86 c9 02 c0       	push   0xc002c986
c001a673:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a677:	e8 e8 fd ff ff       	call   c001a464 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a67c:	83 c4 1c             	add    esp,0x1c
c001a67f:	c3                   	ret    

c001a680 <EnvVarContainer::__loadUser()>:
c001a680:	c3                   	ret    
c001a681:	90                   	nop

c001a682 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a686:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a68c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a690:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a694:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a697:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a69b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a6a2:	90                   	nop
c001a6a3:	c3                   	ret    

c001a6a4 <EnvVarContainer::~EnvVarContainer()>:
c001a6a4:	83 ec 0c             	sub    esp,0xc
c001a6a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a6ae:	85 c0                	test   eax,eax
c001a6b0:	74 1d                	je     c001a6cf <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6b8:	85 c0                	test   eax,eax
c001a6ba:	74 13                	je     c001a6cf <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a6c3:	83 ec 0c             	sub    esp,0xc
c001a6c6:	50                   	push   eax
c001a6c7:	e8 d0 51 ff ff       	call   c000f89c <free>
c001a6cc:	83 c4 10             	add    esp,0x10
c001a6cf:	90                   	nop
c001a6d0:	83 c4 0c             	add    esp,0xc
c001a6d3:	c3                   	ret    

c001a6d4 <Krnl::getEnv(Process*, char const*)>:
c001a6d4:	53                   	push   ebx
c001a6d5:	83 ec 08             	sub    esp,0x8
c001a6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6e0:	39 05 50 29 03 c0    	cmp    DWORD PTR ds:0xc0032950,eax
c001a6e6:	74 04                	je     c001a6ec <Krnl::getEnv(Process*, char const*)+0x18>
c001a6e8:	85 c0                	test   eax,eax
c001a6ea:	75 0b                	jne    c001a6f7 <Krnl::getEnv(Process*, char const*)+0x23>
c001a6ec:	a1 34 1f 03 c0       	mov    eax,ds:0xc0031f34
c001a6f1:	85 c0                	test   eax,eax
c001a6f3:	75 19                	jne    c001a70e <Krnl::getEnv(Process*, char const*)+0x3a>
c001a6f5:	eb 27                	jmp    c001a71e <Krnl::getEnv(Process*, char const*)+0x4a>
c001a6f7:	52                   	push   edx
c001a6f8:	52                   	push   edx
c001a6f9:	53                   	push   ebx
c001a6fa:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a700:	e8 5d fc ff ff       	call   c001a362 <EnvVarContainer::getEnv(char const*)>
c001a705:	83 c4 10             	add    esp,0x10
c001a708:	85 c0                	test   eax,eax
c001a70a:	75 28                	jne    c001a734 <Krnl::getEnv(Process*, char const*)+0x60>
c001a70c:	eb de                	jmp    c001a6ec <Krnl::getEnv(Process*, char const*)+0x18>
c001a70e:	52                   	push   edx
c001a70f:	52                   	push   edx
c001a710:	53                   	push   ebx
c001a711:	50                   	push   eax
c001a712:	e8 4b fc ff ff       	call   c001a362 <EnvVarContainer::getEnv(char const*)>
c001a717:	83 c4 10             	add    esp,0x10
c001a71a:	85 c0                	test   eax,eax
c001a71c:	75 16                	jne    c001a734 <Krnl::getEnv(Process*, char const*)+0x60>
c001a71e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a722:	a1 38 1f 03 c0       	mov    eax,ds:0xc0031f38
c001a727:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a72b:	83 c4 08             	add    esp,0x8
c001a72e:	5b                   	pop    ebx
c001a72f:	e9 2e fc ff ff       	jmp    c001a362 <EnvVarContainer::getEnv(char const*)>
c001a734:	83 c4 08             	add    esp,0x8
c001a737:	5b                   	pop    ebx
c001a738:	c3                   	ret    

c001a739 <Krnl::setEnvSystem(char const*, char const*)>:
c001a739:	83 ec 10             	sub    esp,0x10
c001a73c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a740:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a744:	ff 35 38 1f 03 c0    	push   DWORD PTR ds:0xc0031f38
c001a74a:	e8 51 fc ff ff       	call   c001a3a0 <EnvVarContainer::setEnv(char const*, char const*)>
c001a74f:	83 c4 1c             	add    esp,0x1c
c001a752:	c3                   	ret    

c001a753 <Krnl::setEnvUser(char const*, char const*)>:
c001a753:	a1 34 1f 03 c0       	mov    eax,ds:0xc0031f34
c001a758:	85 c0                	test   eax,eax
c001a75a:	74 15                	je     c001a771 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a75c:	83 ec 10             	sub    esp,0x10
c001a75f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a763:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a767:	50                   	push   eax
c001a768:	e8 33 fc ff ff       	call   c001a3a0 <EnvVarContainer::setEnv(char const*, char const*)>
c001a76d:	83 c4 1c             	add    esp,0x1c
c001a770:	c3                   	ret    
c001a771:	c3                   	ret    

c001a772 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a776:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a77c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a780:	e9 1b fc ff ff       	jmp    c001a3a0 <EnvVarContainer::setEnv(char const*, char const*)>

c001a785 <Krnl::deleteEnvSystem(char const*)>:
c001a785:	c3                   	ret    

c001a786 <Krnl::deleteEnvUser(char const*)>:
c001a786:	c3                   	ret    

c001a787 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a787:	c3                   	ret    

c001a788 <Krnl::newProcessEnv(Process*)>:
c001a788:	83 ec 28             	sub    esp,0x28
c001a78b:	6a 0c                	push   0xc
c001a78d:	e8 fa 50 ff ff       	call   c000f88c <malloc>
c001a792:	5a                   	pop    edx
c001a793:	59                   	pop    ecx
c001a794:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a798:	50                   	push   eax
c001a799:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a79d:	e8 e0 fe ff ff       	call   c001a682 <EnvVarContainer::EnvVarContainer(Process*)>
c001a7a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7a6:	83 c4 2c             	add    esp,0x2c
c001a7a9:	c3                   	ret    

c001a7aa <Krnl::copyProcessEnv(Process*, Process*)>:
c001a7aa:	57                   	push   edi
c001a7ab:	56                   	push   esi
c001a7ac:	53                   	push   ebx
c001a7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7b1:	83 ec 0c             	sub    esp,0xc
c001a7b4:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a7ba:	6a 0c                	push   0xc
c001a7bc:	e8 cb 50 ff ff       	call   c000f88c <malloc>
c001a7c1:	89 c3                	mov    ebx,eax
c001a7c3:	58                   	pop    eax
c001a7c4:	5a                   	pop    edx
c001a7c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7c9:	53                   	push   ebx
c001a7ca:	e8 b3 fe ff ff       	call   c001a682 <EnvVarContainer::EnvVarContainer(Process*)>
c001a7cf:	8b 07                	mov    eax,DWORD PTR [edi]
c001a7d1:	89 03                	mov    DWORD PTR [ebx],eax
c001a7d3:	c1 e0 03             	shl    eax,0x3
c001a7d6:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7d9:	e8 ae 50 ff ff       	call   c000f88c <malloc>
c001a7de:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a7e1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a7e3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a7e6:	c1 e1 03             	shl    ecx,0x3
c001a7e9:	89 c7                	mov    edi,eax
c001a7eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7ed:	83 c4 10             	add    esp,0x10
c001a7f0:	89 d8                	mov    eax,ebx
c001a7f2:	5b                   	pop    ebx
c001a7f3:	5e                   	pop    esi
c001a7f4:	5f                   	pop    edi
c001a7f5:	c3                   	ret    

c001a7f6 <Krnl::loadSystemEnv()>:
c001a7f6:	53                   	push   ebx
c001a7f7:	83 ec 14             	sub    esp,0x14
c001a7fa:	6a 0c                	push   0xc
c001a7fc:	e8 8b 50 ff ff       	call   c000f88c <malloc>
c001a801:	89 c3                	mov    ebx,eax
c001a803:	58                   	pop    eax
c001a804:	5a                   	pop    edx
c001a805:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c001a80b:	53                   	push   ebx
c001a80c:	e8 71 fe ff ff       	call   c001a682 <EnvVarContainer::EnvVarContainer(Process*)>
c001a811:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a814:	89 1d 38 1f 03 c0    	mov    DWORD PTR ds:0xc0031f38,ebx
c001a81a:	e8 47 fe ff ff       	call   c001a666 <EnvVarContainer::__loadSystem()>
c001a81f:	83 c4 18             	add    esp,0x18
c001a822:	5b                   	pop    ebx
c001a823:	c3                   	ret    

c001a824 <Krnl::loadUserEnv()>:
c001a824:	53                   	push   ebx
c001a825:	83 ec 14             	sub    esp,0x14
c001a828:	6a 0c                	push   0xc
c001a82a:	e8 5d 50 ff ff       	call   c000f88c <malloc>
c001a82f:	89 c3                	mov    ebx,eax
c001a831:	58                   	pop    eax
c001a832:	5a                   	pop    edx
c001a833:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c001a839:	53                   	push   ebx
c001a83a:	e8 43 fe ff ff       	call   c001a682 <EnvVarContainer::EnvVarContainer(Process*)>
c001a83f:	89 1d 34 1f 03 c0    	mov    DWORD PTR ds:0xc0031f34,ebx
c001a845:	83 c4 18             	add    esp,0x18
c001a848:	5b                   	pop    ebx
c001a849:	c3                   	ret    

c001a84a <Krnl::flushEnv()>:
c001a84a:	c3                   	ret    

c001a84b <Krnl::getProcessTotalEnvCount(Process*)>:
c001a84b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a84f:	8b 15 34 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031f34
c001a855:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a85b:	a1 38 1f 03 c0       	mov    eax,ds:0xc0031f38
c001a860:	8b 00                	mov    eax,DWORD PTR [eax]
c001a862:	03 01                	add    eax,DWORD PTR [ecx]
c001a864:	85 d2                	test   edx,edx
c001a866:	74 02                	je     c001a86a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a868:	03 02                	add    eax,DWORD PTR [edx]
c001a86a:	c3                   	ret    

c001a86b <Krnl::getProcessEnvPair(Process*, int)>:
c001a86b:	57                   	push   edi
c001a86c:	8b 0d 34 1f 03 c0    	mov    ecx,DWORD PTR ds:0xc0031f34
c001a872:	56                   	push   esi
c001a873:	85 c9                	test   ecx,ecx
c001a875:	53                   	push   ebx
c001a876:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a87a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a87e:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a884:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a888:	8b 02                	mov    eax,DWORD PTR [edx]
c001a88a:	75 47                	jne    c001a8d3 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a88c:	39 c3                	cmp    ebx,eax
c001a88e:	7c 47                	jl     c001a8d7 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a890:	8b 15 38 1f 03 c0    	mov    edx,DWORD PTR ds:0xc0031f38
c001a896:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a898:	01 c1                	add    ecx,eax
c001a89a:	39 d9                	cmp    ecx,ebx
c001a89c:	7e 6c                	jle    c001a90a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a89e:	51                   	push   ecx
c001a89f:	89 d9                	mov    ecx,ebx
c001a8a1:	29 c1                	sub    ecx,eax
c001a8a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a8a6:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a8aa:	53                   	push   ebx
c001a8ab:	68 a8 c9 02 c0       	push   0xc002c9a8
c001a8b0:	e8 32 85 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001a8b5:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a8bb:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a8bd:	a1 38 1f 03 c0       	mov    eax,ds:0xc0031f38
c001a8c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a8c5:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a8c9:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a8cc:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a8cf:	89 06                	mov    DWORD PTR [esi],eax
c001a8d1:	eb 51                	jmp    c001a924 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a8d3:	39 c3                	cmp    ebx,eax
c001a8d5:	7d 05                	jge    c001a8dc <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a8d7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a8da:	eb 20                	jmp    c001a8fc <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a8dc:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a8de:	8d 14 07             	lea    edx,[edi+eax*1]
c001a8e1:	39 da                	cmp    edx,ebx
c001a8e3:	7e 04                	jle    c001a8e9 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a8e5:	29 c3                	sub    ebx,eax
c001a8e7:	eb 10                	jmp    c001a8f9 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a8e9:	8b 0d 38 1f 03 c0    	mov    ecx,DWORD PTR ds:0xc0031f38
c001a8ef:	03 11                	add    edx,DWORD PTR [ecx]
c001a8f1:	39 da                	cmp    edx,ebx
c001a8f3:	7e 15                	jle    c001a90a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a8f5:	29 c3                	sub    ebx,eax
c001a8f7:	29 fb                	sub    ebx,edi
c001a8f9:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a8fc:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a900:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a903:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a906:	89 06                	mov    DWORD PTR [esi],eax
c001a908:	eb 1d                	jmp    c001a927 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a90a:	83 ec 0c             	sub    esp,0xc
c001a90d:	68 bc c9 02 c0       	push   0xc002c9bc
c001a912:	e8 18 00 00 00       	call   c001a92f <Krnl::panic(char const*)>
c001a917:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a91d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a924:	83 c4 10             	add    esp,0x10
c001a927:	89 f0                	mov    eax,esi
c001a929:	5b                   	pop    ebx
c001a92a:	5e                   	pop    esi
c001a92b:	5f                   	pop    edi
c001a92c:	c2 04 00             	ret    0x4

c001a92f <Krnl::panic(char const*)>:
c001a92f:	55                   	push   ebp
c001a930:	89 e5                	mov    ebp,esp
c001a932:	53                   	push   ebx
c001a933:	83 ec 0c             	sub    esp,0xc
c001a936:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a939:	fa                   	cli    
c001a93a:	c6 05 44 1f 03 c0 01 	mov    BYTE PTR ds:0xc0031f44,0x1
c001a941:	53                   	push   ebx
c001a942:	c6 05 24 e3 02 c0 00 	mov    BYTE PTR ds:0xc002e324,0x0
c001a949:	68 d6 c9 02 c0       	push   0xc002c9d6
c001a94e:	e8 94 84 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001a953:	58                   	pop    eax
c001a954:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001a959:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a95f:	e8 a6 62 ff ff       	call   c0010c0a <setActiveTerminal(VgaText*)>
c001a964:	83 c4 0c             	add    esp,0xc
c001a967:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001a96c:	6a 01                	push   0x1
c001a96e:	6a 0f                	push   0xf
c001a970:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a976:	e8 2d 5d ff ff       	call   c00106a8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a97b:	58                   	pop    eax
c001a97c:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001a981:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a987:	e8 c4 64 ff ff       	call   c0010e50 <VgaText::clearScreen()>
c001a98c:	58                   	pop    eax
c001a98d:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001a992:	5a                   	pop    edx
c001a993:	68 ef c9 02 c0       	push   0xc002c9ef
c001a998:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a99e:	e8 f3 65 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001a9a3:	59                   	pop    ecx
c001a9a4:	58                   	pop    eax
c001a9a5:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001a9aa:	68 94 ca 02 c0       	push   0xc002ca94
c001a9af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b5:	e8 dc 65 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001a9ba:	58                   	pop    eax
c001a9bb:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001a9c0:	5a                   	pop    edx
c001a9c1:	68 0b ca 02 c0       	push   0xc002ca0b
c001a9c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9cc:	e8 c5 65 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001a9d1:	59                   	pop    ecx
c001a9d2:	58                   	pop    eax
c001a9d3:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001a9d8:	53                   	push   ebx
c001a9d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9df:	e8 b2 65 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001a9e4:	58                   	pop    eax
c001a9e5:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001a9ea:	5a                   	pop    edx
c001a9eb:	68 2b ca 02 c0       	push   0xc002ca2b
c001a9f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9f6:	e8 9b 65 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001a9fb:	a1 40 1f 03 c0       	mov    eax,ds:0xc0031f40
c001aa00:	83 c4 10             	add    esp,0x10
c001aa03:	85 c0                	test   eax,eax
c001aa05:	74 02                	je     c001aa09 <Krnl::panic(char const*)+0xda>
c001aa07:	ff d0                	call   eax
c001aa09:	83 ec 0c             	sub    esp,0xc
c001aa0c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa0f:	e8 9e 32 00 00       	call   c001dcb2 <Thr::getDriverNameFromAddress(unsigned long)>
c001aa14:	83 c4 10             	add    esp,0x10
c001aa17:	89 c3                	mov    ebx,eax
c001aa19:	85 c0                	test   eax,eax
c001aa1b:	0f 84 50 02 00 00    	je     c001ac71 <Krnl::panic(char const*)+0x342>
c001aa21:	83 ec 08             	sub    esp,0x8
c001aa24:	8b 15 50 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032950
c001aa2a:	68 d0 ca 02 c0       	push   0xc002cad0
c001aa2f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001aa35:	e8 5c 65 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001aa3a:	58                   	pop    eax
c001aa3b:	5a                   	pop    edx
c001aa3c:	8b 15 50 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032950
c001aa42:	68 0b ca 02 c0       	push   0xc002ca0b
c001aa47:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001aa4d:	e8 44 65 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001aa52:	59                   	pop    ecx
c001aa53:	58                   	pop    eax
c001aa54:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001aa59:	53                   	push   ebx
c001aa5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa60:	e8 31 65 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001aa65:	83 c4 10             	add    esp,0x10
c001aa68:	83 ec 08             	sub    esp,0x8
c001aa6b:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001aa70:	68 2a ca 02 c0       	push   0xc002ca2a
c001aa75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa7b:	e8 16 65 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001aa80:	58                   	pop    eax
c001aa81:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001aa86:	5a                   	pop    edx
c001aa87:	68 28 cb 02 c0       	push   0xc002cb28
c001aa8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa92:	e8 ff 64 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001aa97:	59                   	pop    ecx
c001aa98:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001aa9d:	5b                   	pop    ebx
c001aa9e:	68 68 cb 02 c0       	push   0xc002cb68
c001aaa3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaa9:	e8 e8 64 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001aaae:	58                   	pop    eax
c001aaaf:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001aab4:	5a                   	pop    edx
c001aab5:	68 16 ca 02 c0       	push   0xc002ca16
c001aaba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aac0:	e8 d1 64 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001aac5:	59                   	pop    ecx
c001aac6:	5b                   	pop    ebx
c001aac7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aaca:	68 2e ca 02 c0       	push   0xc002ca2e
c001aacf:	e8 13 83 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001aad4:	58                   	pop    eax
c001aad5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aad8:	5a                   	pop    edx
c001aad9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aadc:	68 37 ca 02 c0       	push   0xc002ca37
c001aae1:	e8 01 83 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001aae6:	59                   	pop    ecx
c001aae7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aaea:	5b                   	pop    ebx
c001aaeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aaf0:	68 40 ca 02 c0       	push   0xc002ca40
c001aaf5:	e8 ed 82 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001aafa:	58                   	pop    eax
c001aafb:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ab00:	5a                   	pop    edx
c001ab01:	68 ac cb 02 c0       	push   0xc002cbac
c001ab06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab0c:	e8 85 64 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001ab11:	59                   	pop    ecx
c001ab12:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ab17:	5b                   	pop    ebx
c001ab18:	68 49 ca 02 c0       	push   0xc002ca49
c001ab1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab23:	e8 6e 64 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001ab28:	0f 20 c0             	mov    eax,cr0
c001ab2b:	5a                   	pop    edx
c001ab2c:	59                   	pop    ecx
c001ab2d:	50                   	push   eax
c001ab2e:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ab33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab39:	e8 7e 64 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c001ab3e:	5b                   	pop    ebx
c001ab3f:	58                   	pop    eax
c001ab40:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ab45:	68 53 ca 02 c0       	push   0xc002ca53
c001ab4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab50:	e8 41 64 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001ab55:	0f 20 d0             	mov    eax,cr2
c001ab58:	5a                   	pop    edx
c001ab59:	59                   	pop    ecx
c001ab5a:	50                   	push   eax
c001ab5b:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ab60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab66:	e8 51 64 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c001ab6b:	5b                   	pop    ebx
c001ab6c:	58                   	pop    eax
c001ab6d:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ab72:	68 5d ca 02 c0       	push   0xc002ca5d
c001ab77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab7d:	e8 14 64 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001ab82:	0f 20 d8             	mov    eax,cr3
c001ab85:	5a                   	pop    edx
c001ab86:	59                   	pop    ecx
c001ab87:	50                   	push   eax
c001ab88:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ab8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab93:	e8 24 64 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c001ab98:	5b                   	pop    ebx
c001ab99:	58                   	pop    eax
c001ab9a:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ab9f:	68 70 ca 02 c0       	push   0xc002ca70
c001aba4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abaa:	e8 e7 63 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001abaf:	0f 20 e0             	mov    eax,cr4
c001abb2:	5a                   	pop    edx
c001abb3:	59                   	pop    ecx
c001abb4:	50                   	push   eax
c001abb5:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001abba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abc0:	e8 f7 63 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c001abc5:	5b                   	pop    ebx
c001abc6:	58                   	pop    eax
c001abc7:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001abcc:	68 7a ca 02 c0       	push   0xc002ca7a
c001abd1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abd7:	e8 ba 63 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001abdc:	5a                   	pop    edx
c001abdd:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001abe2:	59                   	pop    ecx
c001abe3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001abe9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001abec:	50                   	push   eax
c001abed:	e8 ca 63 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c001abf2:	5b                   	pop    ebx
c001abf3:	58                   	pop    eax
c001abf4:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001abf9:	68 47 d9 02 c0       	push   0xc002d947
c001abfe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac04:	e8 8d 63 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001ac09:	5a                   	pop    edx
c001ac0a:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ac0f:	59                   	pop    ecx
c001ac10:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ac16:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ac19:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ac1c:	50                   	push   eax
c001ac1d:	e8 9a 63 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c001ac22:	5b                   	pop    ebx
c001ac23:	58                   	pop    eax
c001ac24:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ac29:	68 47 d9 02 c0       	push   0xc002d947
c001ac2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac34:	e8 5d 63 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001ac39:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ac3e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ac41:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ac47:	8b 12                	mov    edx,DWORD PTR [edx]
c001ac49:	59                   	pop    ecx
c001ac4a:	5b                   	pop    ebx
c001ac4b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ac4e:	50                   	push   eax
c001ac4f:	e8 68 63 ff ff       	call   c0010fbc <VgaText::putx(unsigned int)>
c001ac54:	83 c4 10             	add    esp,0x10
c001ac57:	b2 fe                	mov    dl,0xfe
c001ac59:	e4 60                	in     al,0x60
c001ac5b:	3c 1c                	cmp    al,0x1c
c001ac5d:	74 04                	je     c001ac63 <Krnl::panic(char const*)+0x334>
c001ac5f:	3c 5a                	cmp    al,0x5a
c001ac61:	75 f6                	jne    c001ac59 <Krnl::panic(char const*)+0x32a>
c001ac63:	e4 64                	in     al,0x64
c001ac65:	a8 02                	test   al,0x2
c001ac67:	75 fa                	jne    c001ac63 <Krnl::panic(char const*)+0x334>
c001ac69:	88 d0                	mov    al,dl
c001ac6b:	e6 64                	out    0x64,al
c001ac6d:	fa                   	cli    
c001ac6e:	f4                   	hlt    
c001ac6f:	eb e8                	jmp    c001ac59 <Krnl::panic(char const*)+0x32a>
c001ac71:	50                   	push   eax
c001ac72:	50                   	push   eax
c001ac73:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ac78:	68 fc ca 02 c0       	push   0xc002cafc
c001ac7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac83:	e8 0e 63 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001ac88:	58                   	pop    eax
c001ac89:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001ac8e:	5a                   	pop    edx
c001ac8f:	68 0b ca 02 c0       	push   0xc002ca0b
c001ac94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac9a:	e8 f7 62 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001ac9f:	59                   	pop    ecx
c001aca0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aca5:	5b                   	pop    ebx
c001aca6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aca9:	83 c0 0c             	add    eax,0xc
c001acac:	50                   	push   eax
c001acad:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001acb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001acb8:	e8 d9 62 ff ff       	call   c0010f96 <VgaText::puts(char const*)>
c001acbd:	83 c4 10             	add    esp,0x10
c001acc0:	e9 a3 fd ff ff       	jmp    c001aa68 <Krnl::panic(char const*)+0x139>

c001acc5 <Net::switchEndian16(unsigned short)>:
c001acc5:	83 ec 04             	sub    esp,0x4
c001acc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001accc:	66 89 04 24          	mov    WORD PTR [esp],ax
c001acd0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001acd4:	c1 f8 08             	sar    eax,0x8
c001acd7:	89 c2                	mov    edx,eax
c001acd9:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001acdd:	c1 e0 08             	shl    eax,0x8
c001ace0:	09 d0                	or     eax,edx
c001ace2:	83 c4 04             	add    esp,0x4
c001ace5:	c3                   	ret    

c001ace6 <Net::switchEndian32(unsigned int)>:
c001ace6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acea:	c1 e8 18             	shr    eax,0x18
c001aced:	89 c2                	mov    edx,eax
c001acef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acf3:	c1 e0 08             	shl    eax,0x8
c001acf6:	25 00 00 ff 00       	and    eax,0xff0000
c001acfb:	09 c2                	or     edx,eax
c001acfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad01:	c1 e8 08             	shr    eax,0x8
c001ad04:	25 00 ff 00 00       	and    eax,0xff00
c001ad09:	09 c2                	or     edx,eax
c001ad0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad0f:	c1 e0 18             	shl    eax,0x18
c001ad12:	09 d0                	or     eax,edx
c001ad14:	c3                   	ret    

c001ad15 <Net::crc32Calc(unsigned char*, int)>:
c001ad15:	83 ec 10             	sub    esp,0x10
c001ad18:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ad1d:	75 07                	jne    c001ad26 <Net::crc32Calc(unsigned char*, int)+0x11>
c001ad1f:	b8 00 00 00 00       	mov    eax,0x0
c001ad24:	eb 7c                	jmp    c001ada2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ad26:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ad2b:	7f 07                	jg     c001ad34 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ad2d:	b8 00 00 00 00       	mov    eax,0x0
c001ad32:	eb 6e                	jmp    c001ada2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ad34:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ad3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ad44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad48:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ad4c:	7d 4e                	jge    c001ad9c <Net::crc32Calc(unsigned char*, int)+0x87>
c001ad4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad56:	01 d0                	add    eax,edx
c001ad58:	8a 00                	mov    al,BYTE PTR [eax]
c001ad5a:	0f b6 c0             	movzx  eax,al
c001ad5d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ad61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad69:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ad6e:	7f 26                	jg     c001ad96 <Net::crc32Calc(unsigned char*, int)+0x81>
c001ad70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad74:	83 e0 01             	and    eax,0x1
c001ad77:	74 0d                	je     c001ad86 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ad79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad7d:	d1 e8                	shr    eax,1
c001ad7f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ad84:	eb 06                	jmp    c001ad8c <Net::crc32Calc(unsigned char*, int)+0x77>
c001ad86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad8a:	d1 e8                	shr    eax,1
c001ad8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad94:	eb d3                	jmp    c001ad69 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ad96:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ad9a:	eb a8                	jmp    c001ad44 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ad9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ada0:	f7 d0                	not    eax
c001ada2:	83 c4 10             	add    esp,0x10
c001ada5:	c3                   	ret    

c001ada6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ada6:	57                   	push   edi
c001ada7:	56                   	push   esi
c001ada8:	53                   	push   ebx
c001ada9:	83 ec 60             	sub    esp,0x60
c001adac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001adb3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001adb7:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001adbf:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001adc4:	7f 1a                	jg     c001ade0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001adc6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001adcd:	8d 50 01             	lea    edx,[eax+0x1]
c001add0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001add7:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001adda:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001adde:	eb df                	jmp    c001adbf <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001ade0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ade7:	8d 50 01             	lea    edx,[eax+0x1]
c001adea:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001adf1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001adf4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001adfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001adff:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001ae03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae07:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001ae0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae23:	89 c6                	mov    esi,eax
c001ae25:	89 d7                	mov    edi,edx
c001ae27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae29:	89 c8                	mov    eax,ecx
c001ae2b:	89 fa                	mov    edx,edi
c001ae2d:	89 f3                	mov    ebx,esi
c001ae2f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ae33:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ae37:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae3a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ae42:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae49:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ae4d:	8d 44 24 78          	lea    eax,[esp+0x78]
c001ae51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ae55:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001ae5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ae65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae69:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ae6d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ae71:	89 c6                	mov    esi,eax
c001ae73:	89 d7                	mov    edi,edx
c001ae75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae77:	89 c8                	mov    eax,ecx
c001ae79:	89 fa                	mov    edx,edi
c001ae7b:	89 f3                	mov    ebx,esi
c001ae7d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001ae81:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ae85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae89:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ae91:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae98:	0f b7 c0             	movzx  eax,ax
c001ae9b:	c1 f8 08             	sar    eax,0x8
c001ae9e:	89 c1                	mov    ecx,eax
c001aea0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aea7:	8d 50 01             	lea    edx,[eax+0x1]
c001aeaa:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aeb1:	88 ca                	mov    dl,cl
c001aeb3:	88 10                	mov    BYTE PTR [eax],dl
c001aeb5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001aebc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aec3:	8d 48 01             	lea    ecx,[eax+0x1]
c001aec6:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001aecd:	88 10                	mov    BYTE PTR [eax],dl
c001aecf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aed3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001aed7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001aede:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001aee2:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001aee6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aeea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aeee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aef2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aef6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aefa:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aefe:	89 c6                	mov    esi,eax
c001af00:	89 d7                	mov    edi,edx
c001af02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af04:	89 c8                	mov    eax,ecx
c001af06:	89 fa                	mov    edx,edi
c001af08:	89 f3                	mov    ebx,esi
c001af0a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001af0e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001af12:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001af16:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af1a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001af21:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af28:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001af2c:	50                   	push   eax
c001af2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001af31:	e8 df fd ff ff       	call   c001ad15 <Net::crc32Calc(unsigned char*, int)>
c001af36:	83 c4 08             	add    esp,0x8
c001af39:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001af3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af41:	c1 e8 18             	shr    eax,0x18
c001af44:	89 c1                	mov    ecx,eax
c001af46:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af4d:	8d 50 01             	lea    edx,[eax+0x1]
c001af50:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af57:	88 ca                	mov    dl,cl
c001af59:	88 10                	mov    BYTE PTR [eax],dl
c001af5b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af5f:	c1 e8 10             	shr    eax,0x10
c001af62:	89 c1                	mov    ecx,eax
c001af64:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af6b:	8d 50 01             	lea    edx,[eax+0x1]
c001af6e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af75:	88 ca                	mov    dl,cl
c001af77:	88 10                	mov    BYTE PTR [eax],dl
c001af79:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af7d:	c1 e8 08             	shr    eax,0x8
c001af80:	89 c1                	mov    ecx,eax
c001af82:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af89:	8d 50 01             	lea    edx,[eax+0x1]
c001af8c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af93:	88 ca                	mov    dl,cl
c001af95:	88 10                	mov    BYTE PTR [eax],dl
c001af97:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af9e:	8d 50 01             	lea    edx,[eax+0x1]
c001afa1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001afa8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001afac:	88 10                	mov    BYTE PTR [eax],dl
c001afae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001afb2:	83 c4 60             	add    esp,0x60
c001afb5:	5b                   	pop    ebx
c001afb6:	5e                   	pop    esi
c001afb7:	5f                   	pop    edi
c001afb8:	c3                   	ret    

c001afb9 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001afb9:	57                   	push   edi
c001afba:	56                   	push   esi
c001afbb:	53                   	push   ebx
c001afbc:	83 ec 70             	sub    esp,0x70
c001afbf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001afc6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001afca:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001afd2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001afd9:	83 c0 0e             	add    eax,0xe
c001afdc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001afe0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001afe7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afeb:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aff3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aff7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001affb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b003:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001b007:	89 c6                	mov    esi,eax
c001b009:	89 d7                	mov    edi,edx
c001b00b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b00d:	89 c8                	mov    eax,ecx
c001b00f:	89 fa                	mov    edx,edi
c001b011:	89 f3                	mov    ebx,esi
c001b013:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001b017:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b01b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b01f:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001b027:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b02e:	83 c0 08             	add    eax,0x8
c001b031:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001b035:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b03c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b040:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001b048:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b04c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b050:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b054:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b058:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b05c:	89 c6                	mov    esi,eax
c001b05e:	89 d7                	mov    edi,edx
c001b060:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b062:	89 c8                	mov    eax,ecx
c001b064:	89 fa                	mov    edx,edi
c001b066:	89 f3                	mov    ebx,esi
c001b068:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b06c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b074:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001b07c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b083:	8d 50 01             	lea    edx,[eax+0x1]
c001b086:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b08d:	8a 00                	mov    al,BYTE PTR [eax]
c001b08f:	0f b6 c0             	movzx  eax,al
c001b092:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001b097:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b09e:	8d 50 01             	lea    edx,[eax+0x1]
c001b0a1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b0a8:	8a 00                	mov    al,BYTE PTR [eax]
c001b0aa:	0f b6 c0             	movzx  eax,al
c001b0ad:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001b0b2:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001b0b7:	c1 e0 08             	shl    eax,0x8
c001b0ba:	89 c2                	mov    edx,eax
c001b0bc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b0c0:	09 d0                	or     eax,edx
c001b0c2:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b0c9:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001b0cd:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001b0d5:	75 46                	jne    c001b11d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b0d7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0de:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0e1:	66 3d dc 05          	cmp    ax,0x5dc
c001b0e5:	77 16                	ja     c001b0fd <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001b0e7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0ee:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0f1:	0f b7 c0             	movzx  eax,ax
c001b0f4:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001b0fb:	eb 20                	jmp    c001b11d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b0fd:	83 ec 0c             	sub    esp,0xc
c001b100:	68 d4 cb 02 c0       	push   0xc002cbd4
c001b105:	e8 dd 7c ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001b10a:	83 c4 10             	add    esp,0x10
c001b10d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b114:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001b118:	e9 17 01 00 00       	jmp    c001b234 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001b11d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b124:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b12b:	8b 12                	mov    edx,DWORD PTR [edx]
c001b12d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b131:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001b138:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001b13c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b140:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b144:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b148:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b14c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b150:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b154:	89 c6                	mov    esi,eax
c001b156:	89 d7                	mov    edi,edx
c001b158:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b15a:	89 c8                	mov    eax,ecx
c001b15c:	89 fa                	mov    edx,edi
c001b15e:	89 f3                	mov    ebx,esi
c001b160:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001b164:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b168:	89 04 24             	mov    DWORD PTR [esp],eax
c001b16b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b172:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001b179:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b180:	8d 50 01             	lea    edx,[eax+0x1]
c001b183:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b18a:	8a 00                	mov    al,BYTE PTR [eax]
c001b18c:	0f b6 c0             	movzx  eax,al
c001b18f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001b193:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b19a:	8d 50 01             	lea    edx,[eax+0x1]
c001b19d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b1a4:	8a 00                	mov    al,BYTE PTR [eax]
c001b1a6:	0f b6 c0             	movzx  eax,al
c001b1a9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001b1ad:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b1b4:	8d 50 01             	lea    edx,[eax+0x1]
c001b1b7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b1be:	8a 00                	mov    al,BYTE PTR [eax]
c001b1c0:	0f b6 c0             	movzx  eax,al
c001b1c3:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001b1c7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b1ce:	8d 50 01             	lea    edx,[eax+0x1]
c001b1d1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b1d8:	8a 00                	mov    al,BYTE PTR [eax]
c001b1da:	0f b6 c0             	movzx  eax,al
c001b1dd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001b1e1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b1e5:	c1 e0 18             	shl    eax,0x18
c001b1e8:	89 c2                	mov    edx,eax
c001b1ea:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b1ee:	c1 e0 10             	shl    eax,0x10
c001b1f1:	09 c2                	or     edx,eax
c001b1f3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b1f7:	c1 e0 08             	shl    eax,0x8
c001b1fa:	09 d0                	or     eax,edx
c001b1fc:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001b200:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b204:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b20b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001b20f:	83 e8 04             	sub    eax,0x4
c001b212:	83 ec 08             	sub    esp,0x8
c001b215:	50                   	push   eax
c001b216:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b21a:	e8 f6 fa ff ff       	call   c001ad15 <Net::crc32Calc(unsigned char*, int)>
c001b21f:	83 c4 10             	add    esp,0x10
c001b222:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001b226:	0f 94 c2             	sete   dl
c001b229:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b230:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b233:	90                   	nop
c001b234:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b23b:	83 c4 70             	add    esp,0x70
c001b23e:	5b                   	pop    ebx
c001b23f:	5e                   	pop    esi
c001b240:	5f                   	pop    edi
c001b241:	c2 04 00             	ret    0x4

c001b244 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b244:	55                   	push   ebp
c001b245:	57                   	push   edi
c001b246:	56                   	push   esi
c001b247:	53                   	push   ebx
c001b248:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b24e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b255:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b257:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b25a:	80 fb 40             	cmp    bl,0x40
c001b25d:	75 1b                	jne    c001b27a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b25f:	8a 16                	mov    dl,BYTE PTR [esi]
c001b261:	84 d2                	test   dl,dl
c001b263:	0f 84 f1 00 00 00    	je     c001b35a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b269:	8d 46 01             	lea    eax,[esi+0x1]
c001b26c:	80 fa 3a             	cmp    dl,0x3a
c001b26f:	74 04                	je     c001b275 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b271:	89 c6                	mov    esi,eax
c001b273:	eb ea                	jmp    c001b25f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b275:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b278:	89 c6                	mov    esi,eax
c001b27a:	50                   	push   eax
c001b27b:	6a 40                	push   0x40
c001b27d:	6a 00                	push   0x0
c001b27f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b283:	50                   	push   eax
c001b284:	e8 c7 54 fe ff       	call   c0000750 <memset>
c001b289:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b290:	31 c0                	xor    eax,eax
c001b292:	83 c4 10             	add    esp,0x10
c001b295:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b297:	84 c9                	test   cl,cl
c001b299:	0f 84 bb 00 00 00    	je     c001b35a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b29f:	3d c7 00 00 00       	cmp    eax,0xc7
c001b2a4:	0f 8f b0 00 00 00    	jg     c001b35a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b2aa:	80 f9 0a             	cmp    cl,0xa
c001b2ad:	0f 85 98 00 00 00    	jne    c001b34b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b2b3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b2b8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b2bc:	a8 df                	test   al,0xdf
c001b2be:	0f 94 c1             	sete   cl
c001b2c1:	3c 23                	cmp    al,0x23
c001b2c3:	0f 94 c2             	sete   dl
c001b2c6:	08 d1                	or     cl,dl
c001b2c8:	75 4a                	jne    c001b314 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2ca:	8d 50 f7             	lea    edx,[eax-0x9]
c001b2cd:	80 fa 01             	cmp    dl,0x1
c001b2d0:	76 42                	jbe    c001b314 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2d2:	3c 5b                	cmp    al,0x5b
c001b2d4:	75 42                	jne    c001b318 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b2d6:	80 fb 40             	cmp    bl,0x40
c001b2d9:	75 39                	jne    c001b314 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2db:	83 ec 0c             	sub    esp,0xc
c001b2de:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b2e2:	52                   	push   edx
c001b2e3:	e8 84 54 fe ff       	call   c000076c <strlen>
c001b2e8:	83 c4 10             	add    esp,0x10
c001b2eb:	83 f8 3f             	cmp    eax,0x3f
c001b2ee:	77 6a                	ja     c001b35a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b2f0:	50                   	push   eax
c001b2f1:	50                   	push   eax
c001b2f2:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b2f6:	52                   	push   edx
c001b2f7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b2fb:	52                   	push   edx
c001b2fc:	e8 0b 55 fe ff       	call   c000080c <strcpy>
c001b301:	58                   	pop    eax
c001b302:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b306:	52                   	push   edx
c001b307:	e8 60 54 fe ff       	call   c000076c <strlen>
c001b30c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b311:	83 c4 10             	add    esp,0x10
c001b314:	31 d2                	xor    edx,edx
c001b316:	eb 3a                	jmp    c001b352 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b318:	80 fb 40             	cmp    bl,0x40
c001b31b:	74 06                	je     c001b323 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b31d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b321:	eb 20                	jmp    c001b343 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b323:	50                   	push   eax
c001b324:	50                   	push   eax
c001b325:	55                   	push   ebp
c001b326:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b32a:	50                   	push   eax
c001b32b:	e8 68 55 fe ff       	call   c0000898 <strcmp>
c001b330:	83 c4 10             	add    esp,0x10
c001b333:	85 c0                	test   eax,eax
c001b335:	75 dd                	jne    c001b314 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b337:	eb e4                	jmp    c001b31d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b339:	8d 50 01             	lea    edx,[eax+0x1]
c001b33c:	80 f9 3d             	cmp    cl,0x3d
c001b33f:	74 1d                	je     c001b35e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b341:	89 d0                	mov    eax,edx
c001b343:	8a 08                	mov    cl,BYTE PTR [eax]
c001b345:	84 c9                	test   cl,cl
c001b347:	75 f0                	jne    c001b339 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b349:	eb 0f                	jmp    c001b35a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b34b:	8d 50 01             	lea    edx,[eax+0x1]
c001b34e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b352:	47                   	inc    edi
c001b353:	89 d0                	mov    eax,edx
c001b355:	e9 3b ff ff ff       	jmp    c001b295 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b35a:	31 c0                	xor    eax,eax
c001b35c:	eb 33                	jmp    c001b391 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b35e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b362:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b365:	50                   	push   eax
c001b366:	50                   	push   eax
c001b367:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b36b:	50                   	push   eax
c001b36c:	56                   	push   esi
c001b36d:	e8 26 55 fe ff       	call   c0000898 <strcmp>
c001b372:	83 c4 10             	add    esp,0x10
c001b375:	85 c0                	test   eax,eax
c001b377:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b37b:	75 97                	jne    c001b314 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b37d:	51                   	push   ecx
c001b37e:	51                   	push   ecx
c001b37f:	52                   	push   edx
c001b380:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b387:	e8 80 54 fe ff       	call   c000080c <strcpy>
c001b38c:	83 c4 10             	add    esp,0x10
c001b38f:	b0 01                	mov    al,0x1
c001b391:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b397:	5b                   	pop    ebx
c001b398:	5e                   	pop    esi
c001b399:	5f                   	pop    edi
c001b39a:	5d                   	pop    ebp
c001b39b:	c3                   	ret    

c001b39c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b39c:	57                   	push   edi
c001b39d:	56                   	push   esi
c001b39e:	53                   	push   ebx
c001b39f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b3a5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b3ac:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b3b3:	53                   	push   ebx
c001b3b4:	e8 b3 53 fe ff       	call   c000076c <strlen>
c001b3b9:	89 34 24             	mov    DWORD PTR [esp],esi
c001b3bc:	89 c7                	mov    edi,eax
c001b3be:	e8 a9 53 fe ff       	call   c000076c <strlen>
c001b3c3:	83 c4 10             	add    esp,0x10
c001b3c6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b3ca:	3d ff 00 00 00       	cmp    eax,0xff
c001b3cf:	0f 87 d3 00 00 00    	ja     c001b4a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b3d5:	57                   	push   edi
c001b3d6:	57                   	push   edi
c001b3d7:	56                   	push   esi
c001b3d8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b3dc:	56                   	push   esi
c001b3dd:	e8 2a 54 fe ff       	call   c000080c <strcpy>
c001b3e2:	58                   	pop    eax
c001b3e3:	5a                   	pop    edx
c001b3e4:	68 29 d1 02 c0       	push   0xc002d129
c001b3e9:	56                   	push   esi
c001b3ea:	e8 5d 55 fe ff       	call   c000094c <strcat>
c001b3ef:	59                   	pop    ecx
c001b3f0:	5f                   	pop    edi
c001b3f1:	53                   	push   ebx
c001b3f2:	56                   	push   esi
c001b3f3:	e8 54 55 fe ff       	call   c000094c <strcat>
c001b3f8:	58                   	pop    eax
c001b3f9:	5a                   	pop    edx
c001b3fa:	68 20 cc 02 c0       	push   0xc002cc20
c001b3ff:	56                   	push   esi
c001b400:	e8 47 55 fe ff       	call   c000094c <strcat>
c001b405:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b40c:	e8 7b 44 ff ff       	call   c000f88c <malloc>
c001b411:	83 c4 0c             	add    esp,0xc
c001b414:	89 c3                	mov    ebx,eax
c001b416:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c001b41c:	56                   	push   esi
c001b41d:	50                   	push   eax
c001b41e:	e8 23 7f ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001b423:	83 c4 10             	add    esp,0x10
c001b426:	85 db                	test   ebx,ebx
c001b428:	74 7e                	je     c001b4a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b42a:	51                   	push   ecx
c001b42b:	51                   	push   ecx
c001b42c:	6a 01                	push   0x1
c001b42e:	53                   	push   ebx
c001b42f:	e8 76 7f ff ff       	call   c00133aa <File::open(FileOpenMode)>
c001b434:	83 c4 10             	add    esp,0x10
c001b437:	85 c0                	test   eax,eax
c001b439:	74 08                	je     c001b443 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b43b:	83 ec 0c             	sub    esp,0xc
c001b43e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b440:	53                   	push   ebx
c001b441:	eb 5f                	jmp    c001b4a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b443:	52                   	push   edx
c001b444:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b448:	50                   	push   eax
c001b449:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b44d:	50                   	push   eax
c001b44e:	53                   	push   ebx
c001b44f:	e8 02 82 ff ff       	call   c0013656 <File::stat(unsigned long long*, bool*)>
c001b454:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b458:	83 c4 10             	add    esp,0x10
c001b45b:	89 c1                	mov    ecx,eax
c001b45d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b461:	74 31                	je     c001b494 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b463:	83 ec 0c             	sub    esp,0xc
c001b466:	50                   	push   eax
c001b467:	e8 20 44 ff ff       	call   c000f88c <malloc>
c001b46c:	89 c6                	mov    esi,eax
c001b46e:	58                   	pop    eax
c001b46f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b471:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b475:	52                   	push   edx
c001b476:	56                   	push   esi
c001b477:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b47b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b47f:	53                   	push   ebx
c001b480:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b483:	83 c4 20             	add    esp,0x20
c001b486:	85 c0                	test   eax,eax
c001b488:	75 0a                	jne    c001b494 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b48a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b48e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b492:	74 18                	je     c001b4ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b494:	83 ec 0c             	sub    esp,0xc
c001b497:	53                   	push   ebx
c001b498:	e8 6b 7f ff ff       	call   c0013408 <File::close()>
c001b49d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b49f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4a5:	83 c4 10             	add    esp,0x10
c001b4a8:	31 c0                	xor    eax,eax
c001b4aa:	eb 3b                	jmp    c001b4e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b4ac:	83 ec 0c             	sub    esp,0xc
c001b4af:	53                   	push   ebx
c001b4b0:	e8 53 7f ff ff       	call   c0013408 <File::close()>
c001b4b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4bd:	83 c4 0c             	add    esp,0xc
c001b4c0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b4c7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b4ce:	56                   	push   esi
c001b4cf:	e8 70 fd ff ff       	call   c001b244 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b4d4:	89 34 24             	mov    DWORD PTR [esp],esi
c001b4d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b4db:	e8 bc 43 ff ff       	call   c000f89c <free>
c001b4e0:	83 c4 10             	add    esp,0x10
c001b4e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b4e7:	81 c4 20 01 00 00    	add    esp,0x120
c001b4ed:	5b                   	pop    ebx
c001b4ee:	5e                   	pop    esi
c001b4ef:	5f                   	pop    edi
c001b4f0:	c3                   	ret    

c001b4f1 <Reg::getLine(char*, char*, char*)>:
c001b4f1:	57                   	push   edi
c001b4f2:	56                   	push   esi
c001b4f3:	53                   	push   ebx
c001b4f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b4fc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b500:	57                   	push   edi
c001b501:	56                   	push   esi
c001b502:	53                   	push   ebx
c001b503:	68 25 cc 02 c0       	push   0xc002cc25
c001b508:	e8 8f fe ff ff       	call   c001b39c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b50d:	83 c4 10             	add    esp,0x10
c001b510:	84 c0                	test   al,al
c001b512:	75 10                	jne    c001b524 <Reg::getLine(char*, char*, char*)+0x33>
c001b514:	57                   	push   edi
c001b515:	56                   	push   esi
c001b516:	53                   	push   ebx
c001b517:	68 4a cc 02 c0       	push   0xc002cc4a
c001b51c:	e8 7b fe ff ff       	call   c001b39c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	5b                   	pop    ebx
c001b525:	5e                   	pop    esi
c001b526:	5f                   	pop    edi
c001b527:	c3                   	ret    

c001b528 <Reg::readInt(char*, char*, int*)>:
c001b528:	55                   	push   ebp
c001b529:	57                   	push   edi
c001b52a:	56                   	push   esi
c001b52b:	53                   	push   ebx
c001b52c:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b532:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b536:	57                   	push   edi
c001b537:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b53e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b545:	e8 a7 ff ff ff       	call   c001b4f1 <Reg::getLine(char*, char*, char*)>
c001b54a:	83 c4 10             	add    esp,0x10
c001b54d:	84 c0                	test   al,al
c001b54f:	0f 84 b3 00 00 00    	je     c001b608 <Reg::readInt(char*, char*, int*)+0xe0>
c001b555:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b559:	80 fa 2b             	cmp    dl,0x2b
c001b55c:	74 0c                	je     c001b56a <Reg::readInt(char*, char*, int*)+0x42>
c001b55e:	80 fa 2d             	cmp    dl,0x2d
c001b561:	75 0e                	jne    c001b571 <Reg::readInt(char*, char*, int*)+0x49>
c001b563:	ba 01 00 00 00       	mov    edx,0x1
c001b568:	eb 0b                	jmp    c001b575 <Reg::readInt(char*, char*, int*)+0x4d>
c001b56a:	ba 01 00 00 00       	mov    edx,0x1
c001b56f:	eb 02                	jmp    c001b573 <Reg::readInt(char*, char*, int*)+0x4b>
c001b571:	31 d2                	xor    edx,edx
c001b573:	31 c0                	xor    eax,eax
c001b575:	be 0a 00 00 00       	mov    esi,0xa
c001b57a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b57f:	75 20                	jne    c001b5a1 <Reg::readInt(char*, char*, int*)+0x79>
c001b581:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b585:	80 f9 78             	cmp    cl,0x78
c001b588:	75 0a                	jne    c001b594 <Reg::readInt(char*, char*, int*)+0x6c>
c001b58a:	83 c2 02             	add    edx,0x2
c001b58d:	be 10 00 00 00       	mov    esi,0x10
c001b592:	eb 0d                	jmp    c001b5a1 <Reg::readInt(char*, char*, int*)+0x79>
c001b594:	80 f9 62             	cmp    cl,0x62
c001b597:	75 08                	jne    c001b5a1 <Reg::readInt(char*, char*, int*)+0x79>
c001b599:	83 c2 02             	add    edx,0x2
c001b59c:	be 02 00 00 00       	mov    esi,0x2
c001b5a1:	01 d7                	add    edi,edx
c001b5a3:	31 d2                	xor    edx,edx
c001b5a5:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b5a7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b5ab:	80 fb 0d             	cmp    bl,0xd
c001b5ae:	0f 94 c3             	sete   bl
c001b5b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b5b6:	0f 94 c1             	sete   cl
c001b5b9:	08 cb                	or     bl,cl
c001b5bb:	75 3a                	jne    c001b5f7 <Reg::readInt(char*, char*, int*)+0xcf>
c001b5bd:	0f af d6             	imul   edx,esi
c001b5c0:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b5c5:	83 fe 10             	cmp    esi,0x10
c001b5c8:	75 26                	jne    c001b5f0 <Reg::readInt(char*, char*, int*)+0xc8>
c001b5ca:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b5ce:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b5d1:	89 e9                	mov    ecx,ebp
c001b5d3:	80 f9 05             	cmp    cl,0x5
c001b5d6:	77 06                	ja     c001b5de <Reg::readInt(char*, char*, int*)+0xb6>
c001b5d8:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b5dc:	eb 16                	jmp    c001b5f4 <Reg::readInt(char*, char*, int*)+0xcc>
c001b5de:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b5e2:	83 e9 61             	sub    ecx,0x61
c001b5e5:	80 f9 05             	cmp    cl,0x5
c001b5e8:	77 06                	ja     c001b5f0 <Reg::readInt(char*, char*, int*)+0xc8>
c001b5ea:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b5ee:	eb 04                	jmp    c001b5f4 <Reg::readInt(char*, char*, int*)+0xcc>
c001b5f0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b5f4:	47                   	inc    edi
c001b5f5:	eb ae                	jmp    c001b5a5 <Reg::readInt(char*, char*, int*)+0x7d>
c001b5f7:	84 c0                	test   al,al
c001b5f9:	74 02                	je     c001b5fd <Reg::readInt(char*, char*, int*)+0xd5>
c001b5fb:	f7 da                	neg    edx
c001b5fd:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b604:	89 10                	mov    DWORD PTR [eax],edx
c001b606:	88 d8                	mov    al,bl
c001b608:	81 c4 ec 00 00 00    	add    esp,0xec
c001b60e:	5b                   	pop    ebx
c001b60f:	5e                   	pop    esi
c001b610:	5f                   	pop    edi
c001b611:	5d                   	pop    ebp
c001b612:	c3                   	ret    

c001b613 <Reg::readString(char*, char*, char*, int)>:
c001b613:	57                   	push   edi
c001b614:	56                   	push   esi
c001b615:	53                   	push   ebx
c001b616:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b61c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b623:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b627:	57                   	push   edi
c001b628:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b62f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b636:	e8 b6 fe ff ff       	call   c001b4f1 <Reg::getLine(char*, char*, char*)>
c001b63b:	83 c4 10             	add    esp,0x10
c001b63e:	89 c6                	mov    esi,eax
c001b640:	84 c0                	test   al,al
c001b642:	74 44                	je     c001b688 <Reg::readString(char*, char*, char*, int)+0x75>
c001b644:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b64b:	31 c0                	xor    eax,eax
c001b64d:	4a                   	dec    edx
c001b64e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b651:	84 c9                	test   cl,cl
c001b653:	74 0f                	je     c001b664 <Reg::readString(char*, char*, char*, int)+0x51>
c001b655:	39 c2                	cmp    edx,eax
c001b657:	7e 0b                	jle    c001b664 <Reg::readString(char*, char*, char*, int)+0x51>
c001b659:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b65c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b661:	40                   	inc    eax
c001b662:	eb ea                	jmp    c001b64e <Reg::readString(char*, char*, char*, int)+0x3b>
c001b664:	83 ec 0c             	sub    esp,0xc
c001b667:	53                   	push   ebx
c001b668:	e8 ff 50 fe ff       	call   c000076c <strlen>
c001b66d:	83 c4 10             	add    esp,0x10
c001b670:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b675:	75 11                	jne    c001b688 <Reg::readString(char*, char*, char*, int)+0x75>
c001b677:	83 ec 0c             	sub    esp,0xc
c001b67a:	53                   	push   ebx
c001b67b:	e8 ec 50 fe ff       	call   c000076c <strlen>
c001b680:	83 c4 10             	add    esp,0x10
c001b683:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b688:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b68e:	89 f0                	mov    eax,esi
c001b690:	5b                   	pop    ebx
c001b691:	5e                   	pop    esi
c001b692:	5f                   	pop    edi
c001b693:	c3                   	ret    

c001b694 <Reg::readBool(char*, char*, bool*)>:
c001b694:	83 ec 20             	sub    esp,0x20
c001b697:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b69b:	50                   	push   eax
c001b69c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6a4:	e8 7f fe ff ff       	call   c001b528 <Reg::readInt(char*, char*, int*)>
c001b6a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b6ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b6b2:	0f 95 02             	setne  BYTE PTR [edx]
c001b6b5:	83 c4 2c             	add    esp,0x2c
c001b6b8:	c3                   	ret    

c001b6b9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b6b9:	53                   	push   ebx
c001b6ba:	83 ec 1c             	sub    esp,0x1c
c001b6bd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b6c1:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b6c5:	50                   	push   eax
c001b6c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6ce:	e8 c1 ff ff ff       	call   c001b694 <Reg::readBool(char*, char*, bool*)>
c001b6d3:	83 c4 10             	add    esp,0x10
c001b6d6:	84 c0                	test   al,al
c001b6d8:	74 04                	je     c001b6de <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b6da:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b6de:	88 d8                	mov    al,bl
c001b6e0:	83 c4 18             	add    esp,0x18
c001b6e3:	5b                   	pop    ebx
c001b6e4:	c3                   	ret    

c001b6e5 <Reg::readIntWithDefault(char*, char*, int)>:
c001b6e5:	53                   	push   ebx
c001b6e6:	83 ec 1c             	sub    esp,0x1c
c001b6e9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b6ed:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b6f1:	50                   	push   eax
c001b6f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6fa:	e8 29 fe ff ff       	call   c001b528 <Reg::readInt(char*, char*, int*)>
c001b6ff:	83 c4 10             	add    esp,0x10
c001b702:	84 c0                	test   al,al
c001b704:	74 04                	je     c001b70a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b706:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b70a:	89 d8                	mov    eax,ebx
c001b70c:	83 c4 18             	add    esp,0x18
c001b70f:	5b                   	pop    ebx
c001b710:	c3                   	ret    

c001b711 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b711:	57                   	push   edi
c001b712:	56                   	push   esi
c001b713:	56                   	push   esi
c001b714:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b718:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b71c:	56                   	push   esi
c001b71d:	57                   	push   edi
c001b71e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b726:	e8 e8 fe ff ff       	call   c001b613 <Reg::readString(char*, char*, char*, int)>
c001b72b:	83 c4 10             	add    esp,0x10
c001b72e:	84 c0                	test   al,al
c001b730:	75 1a                	jne    c001b74c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b732:	51                   	push   ecx
c001b733:	56                   	push   esi
c001b734:	6a 00                	push   0x0
c001b736:	57                   	push   edi
c001b737:	e8 14 50 fe ff       	call   c0000750 <memset>
c001b73c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b73f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b743:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b745:	83 c4 10             	add    esp,0x10
c001b748:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b74c:	89 f8                	mov    eax,edi
c001b74e:	5a                   	pop    edx
c001b74f:	5e                   	pop    esi
c001b750:	5f                   	pop    edi
c001b751:	c3                   	ret    

c001b752 <Sys::eject(regs*)>:
c001b752:	83 ec 0c             	sub    esp,0xc
c001b755:	83 ca ff             	or     edx,0xffffffff
c001b758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b75c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b75f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b764:	83 e9 41             	sub    ecx,0x41
c001b767:	83 f9 19             	cmp    ecx,0x19
c001b76a:	77 18                	ja     c001b784 <Sys::eject(regs*)+0x32>
c001b76c:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c001b773:	85 c9                	test   ecx,ecx
c001b775:	74 0d                	je     c001b784 <Sys::eject(regs*)+0x32>
c001b777:	83 ec 0c             	sub    esp,0xc
c001b77a:	51                   	push   ecx
c001b77b:	e8 7a af ff ff       	call   c00166fa <LogicalDisk::eject()>
c001b780:	83 c4 10             	add    esp,0x10
c001b783:	99                   	cdq    
c001b784:	83 c4 0c             	add    esp,0xc
c001b787:	c3                   	ret    

c001b788 <Sys::exit(regs*)>:
c001b788:	83 ec 18             	sub    esp,0x18
c001b78b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b78f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b792:	e8 7e 38 00 00       	call   c001f015 <terminateTask(int)>
c001b797:	83 c8 ff             	or     eax,0xffffffff
c001b79a:	83 c4 1c             	add    esp,0x1c
c001b79d:	89 c2                	mov    edx,eax
c001b79f:	c3                   	ret    

c001b7a0 <Sys::getCwd(regs*)>:
c001b7a0:	83 ec 10             	sub    esp,0x10
c001b7a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7a7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b7aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b7ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7b5:	e8 8e 79 ff ff       	call   c0013148 <Fs::getcwd(Process*, char*, int)>
c001b7ba:	83 c4 1c             	add    esp,0x1c
c001b7bd:	99                   	cdq    
c001b7be:	c3                   	ret    

c001b7bf <Sys::getPID(regs*)>:
c001b7bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7c9:	99                   	cdq    
c001b7ca:	c3                   	ret    

c001b7cb <Sys::getRAMData(regs*)>:
c001b7cb:	8b 0d 34 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f434
c001b7d1:	6b 05 30 f4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f430,0x64
c001b7d8:	99                   	cdq    
c001b7d9:	f7 f9                	idiv   ecx
c001b7db:	c1 e0 18             	shl    eax,0x18
c001b7de:	09 c8                	or     eax,ecx
c001b7e0:	99                   	cdq    
c001b7e1:	c3                   	ret    

c001b7e2 <Sys::getVGAPtr(regs*)>:
c001b7e2:	55                   	push   ebp
c001b7e3:	57                   	push   edi
c001b7e4:	56                   	push   esi
c001b7e5:	53                   	push   ebx
c001b7e6:	83 ec 18             	sub    esp,0x18
c001b7e9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b7ed:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b7f0:	e8 02 33 00 00       	call   c001eaf7 <Thr::processFromPID(int)>
c001b7f5:	83 c4 10             	add    esp,0x10
c001b7f8:	89 c1                	mov    ecx,eax
c001b7fa:	b8 01 00 00 00       	mov    eax,0x1
c001b7ff:	85 c9                	test   ecx,ecx
c001b801:	74 59                	je     c001b85c <Sys::getVGAPtr(regs*)+0x7a>
c001b803:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b809:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b80d:	74 0c                	je     c001b81b <Sys::getVGAPtr(regs*)+0x39>
c001b80f:	83 ec 0c             	sub    esp,0xc
c001b812:	53                   	push   ebx
c001b813:	e8 f2 53 ff ff       	call   c0010c0a <setActiveTerminal(VgaText*)>
c001b818:	83 c4 10             	add    esp,0x10
c001b81b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b81e:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b821:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b826:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b828:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b82b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b82e:	81 c3 82 00 00 00    	add    ebx,0x82
c001b834:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b83a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b83d:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b840:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b846:	50                   	push   eax
c001b847:	50                   	push   eax
c001b848:	53                   	push   ebx
c001b849:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b84c:	05 a8 0f 00 00       	add    eax,0xfa8
c001b851:	50                   	push   eax
c001b852:	e8 b5 4f fe ff       	call   c000080c <strcpy>
c001b857:	83 c4 10             	add    esp,0x10
c001b85a:	31 c0                	xor    eax,eax
c001b85c:	83 c4 0c             	add    esp,0xc
c001b85f:	31 d2                	xor    edx,edx
c001b861:	5b                   	pop    ebx
c001b862:	5e                   	pop    esi
c001b863:	5f                   	pop    edi
c001b864:	5d                   	pop    ebp
c001b865:	c3                   	ret    

c001b866 <Sys::loadDLL(regs*)>:
c001b866:	56                   	push   esi
c001b867:	53                   	push   ebx
c001b868:	31 d2                	xor    edx,edx
c001b86a:	51                   	push   ecx
c001b86b:	b8 01 00 00 00       	mov    eax,0x1
c001b870:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b874:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b878:	0f 84 8c 00 00 00    	je     c001b90a <Sys::loadDLL(regs*)+0xa4>
c001b87e:	83 ec 0c             	sub    esp,0xc
c001b881:	68 14 01 00 00       	push   0x114
c001b886:	e8 01 40 ff ff       	call   c000f88c <malloc>
c001b88b:	83 c4 0c             	add    esp,0xc
c001b88e:	89 c3                	mov    ebx,eax
c001b890:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b895:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b898:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b89b:	53                   	push   ebx
c001b89c:	e8 a5 7a ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001b8a1:	83 c4 10             	add    esp,0x10
c001b8a4:	31 d2                	xor    edx,edx
c001b8a6:	b8 02 00 00 00       	mov    eax,0x2
c001b8ab:	85 db                	test   ebx,ebx
c001b8ad:	74 5b                	je     c001b90a <Sys::loadDLL(regs*)+0xa4>
c001b8af:	83 ec 0c             	sub    esp,0xc
c001b8b2:	53                   	push   ebx
c001b8b3:	e8 60 7d ff ff       	call   c0013618 <File::exists()>
c001b8b8:	83 c4 10             	add    esp,0x10
c001b8bb:	84 c0                	test   al,al
c001b8bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8bf:	75 11                	jne    c001b8d2 <Sys::loadDLL(regs*)+0x6c>
c001b8c1:	83 ec 0c             	sub    esp,0xc
c001b8c4:	53                   	push   ebx
c001b8c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8c8:	83 c4 10             	add    esp,0x10
c001b8cb:	b8 03 00 00 00       	mov    eax,0x3
c001b8d0:	eb 36                	jmp    c001b908 <Sys::loadDLL(regs*)+0xa2>
c001b8d2:	83 ec 0c             	sub    esp,0xc
c001b8d5:	53                   	push   ebx
c001b8d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8d9:	58                   	pop    eax
c001b8da:	5a                   	pop    edx
c001b8db:	6a 00                	push   0x0
c001b8dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b8e0:	e8 1e 24 00 00       	call   c001dd03 <Thr::loadDLL(char const*, bool)>
c001b8e5:	83 c4 10             	add    esp,0x10
c001b8e8:	89 c1                	mov    ecx,eax
c001b8ea:	31 d2                	xor    edx,edx
c001b8ec:	b8 04 00 00 00       	mov    eax,0x4
c001b8f1:	85 c9                	test   ecx,ecx
c001b8f3:	74 15                	je     c001b90a <Sys::loadDLL(regs*)+0xa4>
c001b8f5:	53                   	push   ebx
c001b8f6:	53                   	push   ebx
c001b8f7:	ff 35 e8 f3 02 c0    	push   DWORD PTR ds:0xc002f3e8
c001b8fd:	51                   	push   ecx
c001b8fe:	e8 2b 26 00 00       	call   c001df2e <Thr::executeDLL(unsigned long, void*)>
c001b903:	83 c4 10             	add    esp,0x10
c001b906:	31 c0                	xor    eax,eax
c001b908:	31 d2                	xor    edx,edx
c001b90a:	59                   	pop    ecx
c001b90b:	5b                   	pop    ebx
c001b90c:	5e                   	pop    esi
c001b90d:	c3                   	ret    

c001b90e <Sys::read(regs*)>:
c001b90e:	57                   	push   edi
c001b90f:	56                   	push   esi
c001b910:	53                   	push   ebx
c001b911:	83 ec 10             	sub    esp,0x10
c001b914:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b918:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b91b:	83 f8 02             	cmp    eax,0x2
c001b91e:	77 10                	ja     c001b930 <Sys::read(regs*)+0x22>
c001b920:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b925:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b928:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b92e:	eb 0e                	jmp    c001b93e <Sys::read(regs*)+0x30>
c001b930:	83 ec 0c             	sub    esp,0xc
c001b933:	50                   	push   eax
c001b934:	e8 52 5f ff ff       	call   c001188b <getFromFileDescriptor(int)>
c001b939:	83 c4 10             	add    esp,0x10
c001b93c:	89 c1                	mov    ecx,eax
c001b93e:	83 c8 ff             	or     eax,0xffffffff
c001b941:	85 c9                	test   ecx,ecx
c001b943:	89 c2                	mov    edx,eax
c001b945:	74 28                	je     c001b96f <Sys::read(regs*)+0x61>
c001b947:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b94f:	31 ff                	xor    edi,edi
c001b951:	83 ec 0c             	sub    esp,0xc
c001b954:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b956:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b95a:	52                   	push   edx
c001b95b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b95e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b961:	57                   	push   edi
c001b962:	56                   	push   esi
c001b963:	51                   	push   ecx
c001b964:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b967:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b96b:	83 c4 20             	add    esp,0x20
c001b96e:	99                   	cdq    
c001b96f:	83 c4 10             	add    esp,0x10
c001b972:	5b                   	pop    ebx
c001b973:	5e                   	pop    esi
c001b974:	5f                   	pop    edi
c001b975:	c3                   	ret    

c001b976 <Sys::sbrk(regs*)>:
c001b976:	56                   	push   esi
c001b977:	53                   	push   ebx
c001b978:	50                   	push   eax
c001b979:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b982:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b985:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b988:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b98e:	85 db                	test   ebx,ebx
c001b990:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b993:	74 02                	je     c001b997 <Sys::sbrk(regs*)+0x21>
c001b995:	79 06                	jns    c001b99d <Sys::sbrk(regs*)+0x27>
c001b997:	89 f0                	mov    eax,esi
c001b999:	31 d2                	xor    edx,edx
c001b99b:	eb 2a                	jmp    c001b9c7 <Sys::sbrk(regs*)+0x51>
c001b99d:	83 c8 ff             	or     eax,0xffffffff
c001b9a0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b9a6:	89 c2                	mov    edx,eax
c001b9a8:	77 1d                	ja     c001b9c7 <Sys::sbrk(regs*)+0x51>
c001b9aa:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b9b0:	50                   	push   eax
c001b9b1:	c1 ea 0c             	shr    edx,0xc
c001b9b4:	68 07 0c 00 00       	push   0xc07
c001b9b9:	52                   	push   edx
c001b9ba:	51                   	push   ecx
c001b9bb:	e8 5a 69 ff ff       	call   c001231a <VAS::allocatePages(int, int)>
c001b9c0:	89 f0                	mov    eax,esi
c001b9c2:	31 d2                	xor    edx,edx
c001b9c4:	83 c4 10             	add    esp,0x10
c001b9c7:	59                   	pop    ecx
c001b9c8:	5b                   	pop    ebx
c001b9c9:	5e                   	pop    esi
c001b9ca:	c3                   	ret    

c001b9cb <Sys::setCwd(regs*)>:
c001b9cb:	83 ec 14             	sub    esp,0x14
c001b9ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9d2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b9d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9da:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9dd:	e8 d5 7c ff ff       	call   c00136b7 <Fs::setcwd(Process*, char*)>
c001b9e2:	83 c4 1c             	add    esp,0x1c
c001b9e5:	99                   	cdq    
c001b9e6:	c3                   	ret    

c001b9e7 <Sys::setTime(regs*)>:
c001b9e7:	55                   	push   ebp
c001b9e8:	31 d2                	xor    edx,edx
c001b9ea:	57                   	push   edi
c001b9eb:	bf 18 00 00 00       	mov    edi,0x18
c001b9f0:	56                   	push   esi
c001b9f1:	53                   	push   ebx
c001b9f2:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b9f7:	83 ec 30             	sub    esp,0x30
c001b9fa:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b9fe:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001ba01:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ba04:	f7 f3                	div    ebx
c001ba06:	89 d6                	mov    esi,edx
c001ba08:	31 d2                	xor    edx,edx
c001ba0a:	f7 f3                	div    ebx
c001ba0c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ba0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba13:	bb 10 0e 00 00       	mov    ebx,0xe10
c001ba18:	31 d2                	xor    edx,edx
c001ba1a:	f7 f3                	div    ebx
c001ba1c:	31 d2                	xor    edx,edx
c001ba1e:	bb 0c 00 00 00       	mov    ebx,0xc
c001ba23:	f7 f7                	div    edi
c001ba25:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ba28:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ba2c:	0f b7 cd             	movzx  ecx,bp
c001ba2f:	56                   	push   esi
c001ba30:	89 c7                	mov    edi,eax
c001ba32:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ba36:	c1 e6 10             	shl    esi,0x10
c001ba39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba3d:	83 e7 1f             	and    edi,0x1f
c001ba40:	51                   	push   ecx
c001ba41:	47                   	inc    edi
c001ba42:	c1 e8 05             	shr    eax,0x5
c001ba45:	31 d2                	xor    edx,edx
c001ba47:	f7 f3                	div    ebx
c001ba49:	31 db                	xor    ebx,ebx
c001ba4b:	52                   	push   edx
c001ba4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ba50:	57                   	push   edi
c001ba51:	68 65 cc 02 c0       	push   0xc002cc65
c001ba56:	e8 8c 73 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ba5b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ba5f:	89 f8                	mov    eax,edi
c001ba61:	31 c9                	xor    ecx,ecx
c001ba63:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ba67:	88 c1                	mov    cl,al
c001ba69:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001ba6f:	88 d5                	mov    ch,dl
c001ba71:	c1 e0 10             	shl    eax,0x10
c001ba74:	0f b7 d1             	movzx  edx,cx
c001ba77:	09 c2                	or     edx,eax
c001ba79:	89 d8                	mov    eax,ebx
c001ba7b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001ba80:	09 f0                	or     eax,esi
c001ba82:	89 c3                	mov    ebx,eax
c001ba84:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001ba88:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ba8c:	83 c4 18             	add    esp,0x18
c001ba8f:	53                   	push   ebx
c001ba90:	52                   	push   edx
c001ba91:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ba95:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ba99:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ba9d:	e8 37 83 ff ff       	call   c0013dd9 <datetimeToSeconds(datetime_t)>
c001baa2:	83 c4 0c             	add    esp,0xc
c001baa5:	52                   	push   edx
c001baa6:	50                   	push   eax
c001baa7:	56                   	push   esi
c001baa8:	e8 b3 84 ff ff       	call   c0013f60 <secondsToDatetime(unsigned long long)>
c001baad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bab1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bab5:	51                   	push   ecx
c001bab6:	89 d6                	mov    esi,edx
c001bab8:	51                   	push   ecx
c001bab9:	c1 ee 10             	shr    esi,0x10
c001babc:	89 f3                	mov    ebx,esi
c001babe:	0f b6 f3             	movzx  esi,bl
c001bac1:	56                   	push   esi
c001bac2:	0f b6 f6             	movzx  esi,dh
c001bac5:	0f b6 d2             	movzx  edx,dl
c001bac8:	56                   	push   esi
c001bac9:	52                   	push   edx
c001baca:	89 c2                	mov    edx,eax
c001bacc:	c1 ea 10             	shr    edx,0x10
c001bacf:	52                   	push   edx
c001bad0:	0f b6 d4             	movzx  edx,ah
c001bad3:	0f b6 c0             	movzx  eax,al
c001bad6:	52                   	push   edx
c001bad7:	50                   	push   eax
c001bad8:	68 81 cc 02 c0       	push   0xc002cc81
c001badd:	e8 05 73 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001bae2:	83 c4 2c             	add    esp,0x2c
c001bae5:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001baea:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001baee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001baf2:	53                   	push   ebx
c001baf3:	51                   	push   ecx
c001baf4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001bafa:	e8 01 84 ff ff       	call   c0013f00 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001baff:	83 f0 01             	xor    eax,0x1
c001bb02:	31 d2                	xor    edx,edx
c001bb04:	0f b6 c0             	movzx  eax,al
c001bb07:	83 c4 3c             	add    esp,0x3c
c001bb0a:	5b                   	pop    ebx
c001bb0b:	5e                   	pop    esi
c001bb0c:	5f                   	pop    edi
c001bb0d:	5d                   	pop    ebp
c001bb0e:	c3                   	ret    

c001bb0f <Sys::timezone(regs*)>:
c001bb0f:	53                   	push   ebx
c001bb10:	83 ec 08             	sub    esp,0x8
c001bb13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb17:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001bb1b:	75 17                	jne    c001bb34 <Sys::timezone(regs*)+0x25>
c001bb1d:	83 ec 0c             	sub    esp,0xc
c001bb20:	68 9d cc 02 c0       	push   0xc002cc9d
c001bb25:	e8 bd 72 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001bb2a:	83 c8 ff             	or     eax,0xffffffff
c001bb2d:	83 c4 10             	add    esp,0x10
c001bb30:	89 c2                	mov    edx,eax
c001bb32:	eb 20                	jmp    c001bb54 <Sys::timezone(regs*)+0x45>
c001bb34:	83 ec 0c             	sub    esp,0xc
c001bb37:	68 d5 cc 02 c0       	push   0xc002ccd5
c001bb3c:	e8 a6 72 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001bb41:	58                   	pop    eax
c001bb42:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001bb45:	e8 18 81 ff ff       	call   c0013c62 <User::loadClockSettings(int)>
c001bb4a:	83 c4 10             	add    esp,0x10
c001bb4d:	b8 01 00 00 00       	mov    eax,0x1
c001bb52:	31 d2                	xor    edx,edx
c001bb54:	83 c4 08             	add    esp,0x8
c001bb57:	5b                   	pop    ebx
c001bb58:	c3                   	ret    

c001bb59 <Sys::write(regs*)>:
c001bb59:	57                   	push   edi
c001bb5a:	56                   	push   esi
c001bb5b:	53                   	push   ebx
c001bb5c:	83 ec 10             	sub    esp,0x10
c001bb5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb66:	83 f8 02             	cmp    eax,0x2
c001bb69:	77 10                	ja     c001bb7b <Sys::write(regs*)+0x22>
c001bb6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb73:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001bb79:	eb 0e                	jmp    c001bb89 <Sys::write(regs*)+0x30>
c001bb7b:	83 ec 0c             	sub    esp,0xc
c001bb7e:	50                   	push   eax
c001bb7f:	e8 07 5d ff ff       	call   c001188b <getFromFileDescriptor(int)>
c001bb84:	83 c4 10             	add    esp,0x10
c001bb87:	89 c1                	mov    ecx,eax
c001bb89:	83 c8 ff             	or     eax,0xffffffff
c001bb8c:	85 c9                	test   ecx,ecx
c001bb8e:	89 c2                	mov    edx,eax
c001bb90:	74 28                	je     c001bbba <Sys::write(regs*)+0x61>
c001bb92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bb9a:	31 ff                	xor    edi,edi
c001bb9c:	83 ec 0c             	sub    esp,0xc
c001bb9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001bba1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001bba5:	52                   	push   edx
c001bba6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bba9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001bbac:	57                   	push   edi
c001bbad:	56                   	push   esi
c001bbae:	51                   	push   ecx
c001bbaf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001bbb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bbb6:	83 c4 20             	add    esp,0x20
c001bbb9:	99                   	cdq    
c001bbba:	83 c4 10             	add    esp,0x10
c001bbbd:	5b                   	pop    ebx
c001bbbe:	5e                   	pop    esi
c001bbbf:	5f                   	pop    edi
c001bbc0:	c3                   	ret    

c001bbc1 <Sys::wsbe(regs*)>:
c001bbc1:	57                   	push   edi
c001bbc2:	b9 0b 00 00 00       	mov    ecx,0xb
c001bbc7:	56                   	push   esi
c001bbc8:	be 14 cd 02 c0       	mov    esi,0xc002cd14
c001bbcd:	53                   	push   ebx
c001bbce:	83 ec 30             	sub    esp,0x30
c001bbd1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bbd5:	fc                   	cld    
c001bbd6:	83 ec 0c             	sub    esp,0xc
c001bbd9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bbdb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bbdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbe4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbe7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001bbed:	8b 06                	mov    eax,DWORD PTR [esi]
c001bbef:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001bbf2:	57                   	push   edi
c001bbf3:	e8 74 4b fe ff       	call   c000076c <strlen>
c001bbf8:	5a                   	pop    edx
c001bbf9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001bbfd:	52                   	push   edx
c001bbfe:	31 d2                	xor    edx,edx
c001bc00:	57                   	push   edi
c001bc01:	52                   	push   edx
c001bc02:	50                   	push   eax
c001bc03:	56                   	push   esi
c001bc04:	ff d3                	call   ebx
c001bc06:	83 c4 14             	add    esp,0x14
c001bc09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bc0d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc10:	e8 00 34 00 00       	call   c001f015 <terminateTask(int)>
c001bc15:	83 c4 40             	add    esp,0x40
c001bc18:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bc1d:	5b                   	pop    ebx
c001bc1e:	31 d2                	xor    edx,edx
c001bc20:	5e                   	pop    esi
c001bc21:	5f                   	pop    edi
c001bc22:	c3                   	ret    

c001bc23 <Sys::yield(regs*)>:
c001bc23:	57                   	push   edi
c001bc24:	56                   	push   esi
c001bc25:	53                   	push   ebx
c001bc26:	fa                   	cli    
c001bc27:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001bc2d:	e8 b0 2a 00 00       	call   c001e6e2 <schedule()>
c001bc32:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001bc37:	48                   	dec    eax
c001bc38:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001bc3d:	75 01                	jne    c001bc40 <Sys::yield(regs*)+0x1d>
c001bc3f:	fb                   	sti    
c001bc40:	8b 35 70 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa70
c001bc46:	8b 3d 74 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa74
c001bc4c:	89 f0                	mov    eax,esi
c001bc4e:	89 fb                	mov    ebx,edi
c001bc50:	89 f1                	mov    ecx,esi
c001bc52:	c1 e0 07             	shl    eax,0x7
c001bc55:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001bc59:	25 80 30 0f 00       	and    eax,0xf3080
c001bc5e:	c1 eb 17             	shr    ebx,0x17
c001bc61:	31 c8                	xor    eax,ecx
c001bc63:	89 da                	mov    edx,ebx
c001bc65:	5b                   	pop    ebx
c001bc66:	5e                   	pop    esi
c001bc67:	5f                   	pop    edi
c001bc68:	c3                   	ret    

c001bc69 <sysCallSeekDir(regs*)>:
c001bc69:	31 c0                	xor    eax,eax
c001bc6b:	31 d2                	xor    edx,edx
c001bc6d:	c3                   	ret    

c001bc6e <sysCallTellDir(regs*)>:
c001bc6e:	31 c0                	xor    eax,eax
c001bc70:	31 d2                	xor    edx,edx
c001bc72:	c3                   	ret    

c001bc73 <sysCallVerify(regs*)>:
c001bc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc77:	31 d2                	xor    edx,edx
c001bc79:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc7c:	c3                   	ret    

c001bc7d <sysFormatDisk(regs*)>:
c001bc7d:	56                   	push   esi
c001bc7e:	53                   	push   ebx
c001bc7f:	53                   	push   ebx
c001bc80:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc84:	8b 1d 74 f5 02 c0    	mov    ebx,DWORD PTR ds:0xc002f574
c001bc8a:	eb 25                	jmp    c001bcb1 <sysFormatDisk(regs*)+0x34>
c001bc8c:	83 ec 0c             	sub    esp,0xc
c001bc8f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bc92:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bc94:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bc97:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bc9a:	50                   	push   eax
c001bc9b:	ff 34 85 00 fa 02 c0 	push   DWORD PTR [eax*4-0x3ffd0600]
c001bca2:	53                   	push   ebx
c001bca3:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001bca6:	83 c4 20             	add    esp,0x20
c001bca9:	83 f8 08             	cmp    eax,0x8
c001bcac:	75 12                	jne    c001bcc0 <sysFormatDisk(regs*)+0x43>
c001bcae:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001bcb1:	85 db                	test   ebx,ebx
c001bcb3:	75 d7                	jne    c001bc8c <sysFormatDisk(regs*)+0xf>
c001bcb5:	59                   	pop    ecx
c001bcb6:	b8 03 00 00 00       	mov    eax,0x3
c001bcbb:	31 d2                	xor    edx,edx
c001bcbd:	5b                   	pop    ebx
c001bcbe:	5e                   	pop    esi
c001bcbf:	c3                   	ret    
c001bcc0:	85 c0                	test   eax,eax
c001bcc2:	74 1b                	je     c001bcdf <sysFormatDisk(regs*)+0x62>
c001bcc4:	83 f8 09             	cmp    eax,0x9
c001bcc7:	74 0b                	je     c001bcd4 <sysFormatDisk(regs*)+0x57>
c001bcc9:	59                   	pop    ecx
c001bcca:	b8 02 00 00 00       	mov    eax,0x2
c001bccf:	31 d2                	xor    edx,edx
c001bcd1:	5b                   	pop    ebx
c001bcd2:	5e                   	pop    esi
c001bcd3:	c3                   	ret    
c001bcd4:	59                   	pop    ecx
c001bcd5:	b8 01 00 00 00       	mov    eax,0x1
c001bcda:	31 d2                	xor    edx,edx
c001bcdc:	5b                   	pop    ebx
c001bcdd:	5e                   	pop    esi
c001bcde:	c3                   	ret    
c001bcdf:	59                   	pop    ecx
c001bce0:	31 c0                	xor    eax,eax
c001bce2:	31 d2                	xor    edx,edx
c001bce4:	5b                   	pop    ebx
c001bce5:	5e                   	pop    esi
c001bce6:	c3                   	ret    

c001bce7 <sysSetDiskVolumeLabel(regs*)>:
c001bce7:	56                   	push   esi
c001bce8:	53                   	push   ebx
c001bce9:	53                   	push   ebx
c001bcea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bcee:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bcf1:	83 f8 19             	cmp    eax,0x19
c001bcf4:	77 29                	ja     c001bd1f <sysSetDiskVolumeLabel(regs*)+0x38>
c001bcf6:	8b 0c 85 00 fa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0600]
c001bcfd:	85 c9                	test   ecx,ecx
c001bcff:	74 1e                	je     c001bd1f <sysSetDiskVolumeLabel(regs*)+0x38>
c001bd01:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bd04:	85 d2                	test   edx,edx
c001bd06:	74 17                	je     c001bd1f <sysSetDiskVolumeLabel(regs*)+0x38>
c001bd08:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bd0e:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bd10:	52                   	push   edx
c001bd11:	50                   	push   eax
c001bd12:	51                   	push   ecx
c001bd13:	53                   	push   ebx
c001bd14:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bd17:	83 c4 10             	add    esp,0x10
c001bd1a:	99                   	cdq    
c001bd1b:	59                   	pop    ecx
c001bd1c:	5b                   	pop    ebx
c001bd1d:	5e                   	pop    esi
c001bd1e:	c3                   	ret    
c001bd1f:	59                   	pop    ecx
c001bd20:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bd25:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2a:	5b                   	pop    ebx
c001bd2b:	5e                   	pop    esi
c001bd2c:	c3                   	ret    

c001bd2d <sysGetDiskVolumeLabel(regs*)>:
c001bd2d:	57                   	push   edi
c001bd2e:	56                   	push   esi
c001bd2f:	53                   	push   ebx
c001bd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd34:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bd37:	83 fa 19             	cmp    edx,0x19
c001bd3a:	77 34                	ja     c001bd70 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd3c:	8b 0c 95 00 fa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0600]
c001bd43:	85 c9                	test   ecx,ecx
c001bd45:	74 29                	je     c001bd70 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd47:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bd4a:	85 db                	test   ebx,ebx
c001bd4c:	74 22                	je     c001bd70 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd4e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bd51:	85 c0                	test   eax,eax
c001bd53:	74 1b                	je     c001bd70 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd55:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bd5b:	83 ec 0c             	sub    esp,0xc
c001bd5e:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bd60:	50                   	push   eax
c001bd61:	53                   	push   ebx
c001bd62:	52                   	push   edx
c001bd63:	51                   	push   ecx
c001bd64:	56                   	push   esi
c001bd65:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bd68:	83 c4 20             	add    esp,0x20
c001bd6b:	99                   	cdq    
c001bd6c:	5b                   	pop    ebx
c001bd6d:	5e                   	pop    esi
c001bd6e:	5f                   	pop    edi
c001bd6f:	c3                   	ret    
c001bd70:	5b                   	pop    ebx
c001bd71:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bd76:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd7b:	5e                   	pop    esi
c001bd7c:	5f                   	pop    edi
c001bd7d:	c3                   	ret    

c001bd7e <sysShutdown(regs*)>:
c001bd7e:	83 ec 0c             	sub    esp,0xc
c001bd81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd85:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd88:	85 c0                	test   eax,eax
c001bd8a:	74 18                	je     c001bda4 <sysShutdown(regs*)+0x26>
c001bd8c:	83 f8 01             	cmp    eax,0x1
c001bd8f:	74 38                	je     c001bdc9 <sysShutdown(regs*)+0x4b>
c001bd91:	83 f8 02             	cmp    eax,0x2
c001bd94:	74 24                	je     c001bdba <sysShutdown(regs*)+0x3c>
c001bd96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bda0:	83 c4 0c             	add    esp,0xc
c001bda3:	c3                   	ret    
c001bda4:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001bda9:	8b 10                	mov    edx,DWORD PTR [eax]
c001bdab:	6a 00                	push   0x0
c001bdad:	6a 00                	push   0x0
c001bdaf:	6a 00                	push   0x0
c001bdb1:	50                   	push   eax
c001bdb2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bdb5:	83 c4 10             	add    esp,0x10
c001bdb8:	eb dc                	jmp    c001bd96 <sysShutdown(regs*)+0x18>
c001bdba:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001bdbf:	8b 10                	mov    edx,DWORD PTR [eax]
c001bdc1:	6a 00                	push   0x0
c001bdc3:	6a 00                	push   0x0
c001bdc5:	6a 01                	push   0x1
c001bdc7:	eb e8                	jmp    c001bdb1 <sysShutdown(regs*)+0x33>
c001bdc9:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c001bdce:	85 c0                	test   eax,eax
c001bdd0:	74 02                	je     c001bdd4 <sysShutdown(regs*)+0x56>
c001bdd2:	ff d0                	call   eax
c001bdd4:	31 c0                	xor    eax,eax
c001bdd6:	31 d2                	xor    edx,edx
c001bdd8:	83 c4 0c             	add    esp,0xc
c001bddb:	c3                   	ret    

c001bddc <sysCallRealpath(regs*)>:
c001bddc:	83 ec 0c             	sub    esp,0xc
c001bddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bde6:	85 d2                	test   edx,edx
c001bde8:	74 07                	je     c001bdf1 <sysCallRealpath(regs*)+0x15>
c001bdea:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bded:	85 c0                	test   eax,eax
c001bdef:	75 0b                	jne    c001bdfc <sysCallRealpath(regs*)+0x20>
c001bdf1:	b8 01 00 00 00       	mov    eax,0x1
c001bdf6:	31 d2                	xor    edx,edx
c001bdf8:	83 c4 0c             	add    esp,0xc
c001bdfb:	c3                   	ret    
c001bdfc:	51                   	push   ecx
c001bdfd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be03:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be06:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001be0c:	51                   	push   ecx
c001be0d:	52                   	push   edx
c001be0e:	50                   	push   eax
c001be0f:	e8 88 73 ff ff       	call   c001319c <Fs::standardiseFiles(char*, char const*, char const*)>
c001be14:	83 c4 10             	add    esp,0x10
c001be17:	31 c0                	xor    eax,eax
c001be19:	31 d2                	xor    edx,edx
c001be1b:	83 c4 0c             	add    esp,0xc
c001be1e:	c3                   	ret    

c001be1f <sysCallGetArgc(regs*)>:
c001be1f:	83 ec 14             	sub    esp,0x14
c001be22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be2a:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001be30:	68 40 cd 02 c0       	push   0xc002cd40
c001be35:	e8 ad 6f ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001be3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be42:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001be48:	83 c4 1c             	add    esp,0x1c
c001be4b:	99                   	cdq    
c001be4c:	c3                   	ret    

c001be4d <sysCallReadDir(regs*)>:
c001be4d:	53                   	push   ebx
c001be4e:	83 ec 18             	sub    esp,0x18
c001be51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be55:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be58:	83 f8 02             	cmp    eax,0x2
c001be5b:	76 53                	jbe    c001beb0 <sysCallReadDir(regs*)+0x63>
c001be5d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be60:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001be66:	77 4f                	ja     c001beb7 <sysCallReadDir(regs*)+0x6a>
c001be68:	83 ec 0c             	sub    esp,0xc
c001be6b:	50                   	push   eax
c001be6c:	e8 1a 5a ff ff       	call   c001188b <getFromFileDescriptor(int)>
c001be71:	83 c4 10             	add    esp,0x10
c001be74:	85 c0                	test   eax,eax
c001be76:	74 50                	je     c001bec8 <sysCallReadDir(regs*)+0x7b>
c001be78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be80:	83 ec 0c             	sub    esp,0xc
c001be83:	8b 10                	mov    edx,DWORD PTR [eax]
c001be85:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001be89:	51                   	push   ecx
c001be8a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be8d:	6a 00                	push   0x0
c001be8f:	68 10 01 00 00       	push   0x110
c001be94:	50                   	push   eax
c001be95:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be98:	83 c4 20             	add    esp,0x20
c001be9b:	85 c0                	test   eax,eax
c001be9d:	74 38                	je     c001bed7 <sysCallReadDir(regs*)+0x8a>
c001be9f:	83 f8 07             	cmp    eax,0x7
c001bea2:	74 0c                	je     c001beb0 <sysCallReadDir(regs*)+0x63>
c001bea4:	b8 02 00 00 00       	mov    eax,0x2
c001bea9:	31 d2                	xor    edx,edx
c001beab:	83 c4 18             	add    esp,0x18
c001beae:	5b                   	pop    ebx
c001beaf:	c3                   	ret    
c001beb0:	b8 01 00 00 00       	mov    eax,0x1
c001beb5:	eb f2                	jmp    c001bea9 <sysCallReadDir(regs*)+0x5c>
c001beb7:	83 ec 08             	sub    esp,0x8
c001beba:	52                   	push   edx
c001bebb:	68 64 ce 02 c0       	push   0xc002ce64
c001bec0:	e8 22 6f ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001bec5:	83 c4 10             	add    esp,0x10
c001bec8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001becd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bed2:	83 c4 18             	add    esp,0x18
c001bed5:	5b                   	pop    ebx
c001bed6:	c3                   	ret    
c001bed7:	31 c0                	xor    eax,eax
c001bed9:	eb ce                	jmp    c001bea9 <sysCallReadDir(regs*)+0x5c>

c001bedb <sysCallIsATTY(regs*)>:
c001bedb:	83 ec 0c             	sub    esp,0xc
c001bede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bee2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bee5:	83 f8 02             	cmp    eax,0x2
c001bee8:	76 07                	jbe    c001bef1 <sysCallIsATTY(regs*)+0x16>
c001beea:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001beef:	75 26                	jne    c001bf17 <sysCallIsATTY(regs*)+0x3c>
c001bef1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bef9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001beff:	85 c0                	test   eax,eax
c001bf01:	74 24                	je     c001bf27 <sysCallIsATTY(regs*)+0x4c>
c001bf03:	83 ec 0c             	sub    esp,0xc
c001bf06:	8b 10                	mov    edx,DWORD PTR [eax]
c001bf08:	50                   	push   eax
c001bf09:	ff 12                	call   DWORD PTR [edx]
c001bf0b:	31 d2                	xor    edx,edx
c001bf0d:	0f b6 c0             	movzx  eax,al
c001bf10:	83 c4 10             	add    esp,0x10
c001bf13:	83 c4 0c             	add    esp,0xc
c001bf16:	c3                   	ret    
c001bf17:	83 ec 0c             	sub    esp,0xc
c001bf1a:	50                   	push   eax
c001bf1b:	e8 6b 59 ff ff       	call   c001188b <getFromFileDescriptor(int)>
c001bf20:	83 c4 10             	add    esp,0x10
c001bf23:	85 c0                	test   eax,eax
c001bf25:	75 dc                	jne    c001bf03 <sysCallIsATTY(regs*)+0x28>
c001bf27:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf2c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf31:	83 c4 0c             	add    esp,0xc
c001bf34:	c3                   	ret    

c001bf35 <sysCallSeek(regs*)>:
c001bf35:	53                   	push   ebx
c001bf36:	83 ec 08             	sub    esp,0x8
c001bf39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf3d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf40:	83 f8 02             	cmp    eax,0x2
c001bf43:	76 4a                	jbe    c001bf8f <sysCallSeek(regs*)+0x5a>
c001bf45:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf4a:	77 32                	ja     c001bf7e <sysCallSeek(regs*)+0x49>
c001bf4c:	83 ec 0c             	sub    esp,0xc
c001bf4f:	50                   	push   eax
c001bf50:	e8 36 59 ff ff       	call   c001188b <getFromFileDescriptor(int)>
c001bf55:	83 c4 0c             	add    esp,0xc
c001bf58:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bf5b:	31 db                	xor    ebx,ebx
c001bf5d:	53                   	push   ebx
c001bf5e:	51                   	push   ecx
c001bf5f:	50                   	push   eax
c001bf60:	e8 03 75 ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001bf65:	83 c4 10             	add    esp,0x10
c001bf68:	85 c0                	test   eax,eax
c001bf6a:	0f 95 c0             	setne  al
c001bf6d:	31 d2                	xor    edx,edx
c001bf6f:	0f b6 c0             	movzx  eax,al
c001bf72:	f7 d8                	neg    eax
c001bf74:	83 d2 00             	adc    edx,0x0
c001bf77:	83 c4 08             	add    esp,0x8
c001bf7a:	f7 da                	neg    edx
c001bf7c:	5b                   	pop    ebx
c001bf7d:	c3                   	ret    
c001bf7e:	83 ec 08             	sub    esp,0x8
c001bf81:	50                   	push   eax
c001bf82:	68 4b cd 02 c0       	push   0xc002cd4b
c001bf87:	e8 5b 6e ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001bf8c:	83 c4 10             	add    esp,0x10
c001bf8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf94:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf99:	83 c4 08             	add    esp,0x8
c001bf9c:	5b                   	pop    ebx
c001bf9d:	c3                   	ret    

c001bf9e <sysCallTell(regs*)>:
c001bf9e:	53                   	push   ebx
c001bf9f:	83 ec 08             	sub    esp,0x8
c001bfa2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfa6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bfa9:	83 f8 02             	cmp    eax,0x2
c001bfac:	76 5e                	jbe    c001c00c <sysCallTell(regs*)+0x6e>
c001bfae:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bfb3:	77 2d                	ja     c001bfe2 <sysCallTell(regs*)+0x44>
c001bfb5:	83 ec 0c             	sub    esp,0xc
c001bfb8:	50                   	push   eax
c001bfb9:	e8 cd 58 ff ff       	call   c001188b <getFromFileDescriptor(int)>
c001bfbe:	5a                   	pop    edx
c001bfbf:	59                   	pop    ecx
c001bfc0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bfc3:	50                   	push   eax
c001bfc4:	e8 f5 74 ff ff       	call   c00134be <File::tell(unsigned long long*)>
c001bfc9:	83 c4 10             	add    esp,0x10
c001bfcc:	85 c0                	test   eax,eax
c001bfce:	0f 95 c0             	setne  al
c001bfd1:	31 d2                	xor    edx,edx
c001bfd3:	0f b6 c0             	movzx  eax,al
c001bfd6:	f7 d8                	neg    eax
c001bfd8:	83 d2 00             	adc    edx,0x0
c001bfdb:	83 c4 08             	add    esp,0x8
c001bfde:	f7 da                	neg    edx
c001bfe0:	5b                   	pop    ebx
c001bfe1:	c3                   	ret    
c001bfe2:	83 ec 08             	sub    esp,0x8
c001bfe5:	50                   	push   eax
c001bfe6:	68 65 cd 02 c0       	push   0xc002cd65
c001bfeb:	e8 f7 6d ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001bff0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bff3:	83 c4 10             	add    esp,0x10
c001bff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bffc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c003:	31 d2                	xor    edx,edx
c001c005:	31 c0                	xor    eax,eax
c001c007:	83 c4 08             	add    esp,0x8
c001c00a:	5b                   	pop    ebx
c001c00b:	c3                   	ret    
c001c00c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c011:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c016:	83 c4 08             	add    esp,0x8
c001c019:	5b                   	pop    ebx
c001c01a:	c3                   	ret    

c001c01b <sysCallSize(regs*)>:
c001c01b:	53                   	push   ebx
c001c01c:	83 ec 18             	sub    esp,0x18
c001c01f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c023:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c026:	83 f8 02             	cmp    eax,0x2
c001c029:	76 64                	jbe    c001c08f <sysCallSize(regs*)+0x74>
c001c02b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c030:	77 33                	ja     c001c065 <sysCallSize(regs*)+0x4a>
c001c032:	83 ec 0c             	sub    esp,0xc
c001c035:	50                   	push   eax
c001c036:	e8 50 58 ff ff       	call   c001188b <getFromFileDescriptor(int)>
c001c03b:	83 c4 0c             	add    esp,0xc
c001c03e:	8d 54 24 13          	lea    edx,[esp+0x13]
c001c042:	52                   	push   edx
c001c043:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c046:	50                   	push   eax
c001c047:	e8 0a 76 ff ff       	call   c0013656 <File::stat(unsigned long long*, bool*)>
c001c04c:	83 c4 10             	add    esp,0x10
c001c04f:	85 c0                	test   eax,eax
c001c051:	0f 95 c0             	setne  al
c001c054:	31 d2                	xor    edx,edx
c001c056:	0f b6 c0             	movzx  eax,al
c001c059:	f7 d8                	neg    eax
c001c05b:	83 d2 00             	adc    edx,0x0
c001c05e:	83 c4 18             	add    esp,0x18
c001c061:	f7 da                	neg    edx
c001c063:	5b                   	pop    ebx
c001c064:	c3                   	ret    
c001c065:	83 ec 08             	sub    esp,0x8
c001c068:	50                   	push   eax
c001c069:	68 7f cd 02 c0       	push   0xc002cd7f
c001c06e:	e8 74 6d ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c073:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001c076:	83 c4 10             	add    esp,0x10
c001c079:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c07f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c086:	31 d2                	xor    edx,edx
c001c088:	31 c0                	xor    eax,eax
c001c08a:	83 c4 18             	add    esp,0x18
c001c08d:	5b                   	pop    ebx
c001c08e:	c3                   	ret    
c001c08f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c094:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c099:	83 c4 18             	add    esp,0x18
c001c09c:	5b                   	pop    ebx
c001c09d:	c3                   	ret    

c001c09e <sysCallSizeFromFilename(regs*)>:
c001c09e:	57                   	push   edi
c001c09f:	56                   	push   esi
c001c0a0:	53                   	push   ebx
c001c0a1:	83 ec 20             	sub    esp,0x20
c001c0a4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c0a8:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001c0ab:	83 fb 02             	cmp    ebx,0x2
c001c0ae:	0f 86 99 00 00 00    	jbe    c001c14d <sysCallSizeFromFilename(regs*)+0xaf>
c001c0b4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001c0ba:	77 65                	ja     c001c121 <sysCallSizeFromFilename(regs*)+0x83>
c001c0bc:	83 ec 0c             	sub    esp,0xc
c001c0bf:	68 14 01 00 00       	push   0x114
c001c0c4:	e8 c3 37 ff ff       	call   c000f88c <malloc>
c001c0c9:	83 c4 0c             	add    esp,0xc
c001c0cc:	89 c6                	mov    esi,eax
c001c0ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0d3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0d6:	53                   	push   ebx
c001c0d7:	56                   	push   esi
c001c0d8:	e8 69 72 ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001c0dd:	83 c4 0c             	add    esp,0xc
c001c0e0:	8d 44 24 23          	lea    eax,[esp+0x23]
c001c0e4:	50                   	push   eax
c001c0e5:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001c0e8:	56                   	push   esi
c001c0e9:	e8 68 75 ff ff       	call   c0013656 <File::stat(unsigned long long*, bool*)>
c001c0ee:	83 c4 10             	add    esp,0x10
c001c0f1:	85 f6                	test   esi,esi
c001c0f3:	74 14                	je     c001c109 <sysCallSizeFromFilename(regs*)+0x6b>
c001c0f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0f9:	8b 16                	mov    edx,DWORD PTR [esi]
c001c0fb:	83 ec 0c             	sub    esp,0xc
c001c0fe:	56                   	push   esi
c001c0ff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c102:	83 c4 10             	add    esp,0x10
c001c105:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c109:	85 c0                	test   eax,eax
c001c10b:	0f 95 c0             	setne  al
c001c10e:	31 d2                	xor    edx,edx
c001c110:	0f b6 c0             	movzx  eax,al
c001c113:	f7 d8                	neg    eax
c001c115:	83 d2 00             	adc    edx,0x0
c001c118:	83 c4 20             	add    esp,0x20
c001c11b:	f7 da                	neg    edx
c001c11d:	5b                   	pop    ebx
c001c11e:	5e                   	pop    esi
c001c11f:	5f                   	pop    edi
c001c120:	c3                   	ret    
c001c121:	83 ec 08             	sub    esp,0x8
c001c124:	53                   	push   ebx
c001c125:	68 7f cd 02 c0       	push   0xc002cd7f
c001c12a:	e8 b8 6c ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c12f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001c132:	83 c4 10             	add    esp,0x10
c001c135:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c13b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c142:	31 d2                	xor    edx,edx
c001c144:	83 c4 20             	add    esp,0x20
c001c147:	31 c0                	xor    eax,eax
c001c149:	5b                   	pop    ebx
c001c14a:	5e                   	pop    esi
c001c14b:	5f                   	pop    edi
c001c14c:	c3                   	ret    
c001c14d:	83 c4 20             	add    esp,0x20
c001c150:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c155:	5b                   	pop    ebx
c001c156:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c15b:	5e                   	pop    esi
c001c15c:	5f                   	pop    edi
c001c15d:	c3                   	ret    

c001c15e <sysCallClose(regs*)>:
c001c15e:	53                   	push   ebx
c001c15f:	83 ec 08             	sub    esp,0x8
c001c162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c166:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c169:	83 f8 02             	cmp    eax,0x2
c001c16c:	76 50                	jbe    c001c1be <sysCallClose(regs*)+0x60>
c001c16e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c173:	74 58                	je     c001c1cd <sysCallClose(regs*)+0x6f>
c001c175:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c17a:	74 60                	je     c001c1dc <sysCallClose(regs*)+0x7e>
c001c17c:	77 2f                	ja     c001c1ad <sysCallClose(regs*)+0x4f>
c001c17e:	83 ec 0c             	sub    esp,0xc
c001c181:	50                   	push   eax
c001c182:	e8 04 57 ff ff       	call   c001188b <getFromFileDescriptor(int)>
c001c187:	89 c3                	mov    ebx,eax
c001c189:	89 04 24             	mov    DWORD PTR [esp],eax
c001c18c:	e8 77 72 ff ff       	call   c0013408 <File::close()>
c001c191:	83 c4 10             	add    esp,0x10
c001c194:	85 db                	test   ebx,ebx
c001c196:	74 0c                	je     c001c1a4 <sysCallClose(regs*)+0x46>
c001c198:	83 ec 0c             	sub    esp,0xc
c001c19b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c19d:	53                   	push   ebx
c001c19e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c1a1:	83 c4 10             	add    esp,0x10
c001c1a4:	31 c0                	xor    eax,eax
c001c1a6:	31 d2                	xor    edx,edx
c001c1a8:	83 c4 08             	add    esp,0x8
c001c1ab:	5b                   	pop    ebx
c001c1ac:	c3                   	ret    
c001c1ad:	83 ec 08             	sub    esp,0x8
c001c1b0:	50                   	push   eax
c001c1b1:	68 88 ce 02 c0       	push   0xc002ce88
c001c1b6:	e8 2c 6c ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c1bb:	83 c4 10             	add    esp,0x10
c001c1be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1c8:	83 c4 08             	add    esp,0x8
c001c1cb:	5b                   	pop    ebx
c001c1cc:	c3                   	ret    
c001c1cd:	83 ec 0c             	sub    esp,0xc
c001c1d0:	68 9a cd 02 c0       	push   0xc002cd9a
c001c1d5:	e8 0d 6c ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c1da:	eb c5                	jmp    c001c1a1 <sysCallClose(regs*)+0x43>
c001c1dc:	83 ec 0c             	sub    esp,0xc
c001c1df:	68 a8 cd 02 c0       	push   0xc002cda8
c001c1e4:	eb ef                	jmp    c001c1d5 <sysCallClose(regs*)+0x77>

c001c1e6 <sysCallOpenDir(regs*)>:
c001c1e6:	56                   	push   esi
c001c1e7:	53                   	push   ebx
c001c1e8:	53                   	push   ebx
c001c1e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1ed:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c1f0:	85 f6                	test   esi,esi
c001c1f2:	74 59                	je     c001c24d <sysCallOpenDir(regs*)+0x67>
c001c1f4:	83 ec 0c             	sub    esp,0xc
c001c1f7:	68 14 01 00 00       	push   0x114
c001c1fc:	e8 8b 36 ff ff       	call   c000f88c <malloc>
c001c201:	83 c4 0c             	add    esp,0xc
c001c204:	89 c6                	mov    esi,eax
c001c206:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c20b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c20e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c211:	56                   	push   esi
c001c212:	e8 db 75 ff ff       	call   c00137f2 <Directory::Directory(char const*, Process*)>
c001c217:	83 c4 10             	add    esp,0x10
c001c21a:	85 f6                	test   esi,esi
c001c21c:	74 2f                	je     c001c24d <sysCallOpenDir(regs*)+0x67>
c001c21e:	83 ec 0c             	sub    esp,0xc
c001c221:	56                   	push   esi
c001c222:	e8 2f 76 ff ff       	call   c0013856 <Directory::open()>
c001c227:	83 c4 10             	add    esp,0x10
c001c22a:	85 c0                	test   eax,eax
c001c22c:	75 1f                	jne    c001c24d <sysCallOpenDir(regs*)+0x67>
c001c22e:	83 ec 0c             	sub    esp,0xc
c001c231:	56                   	push   esi
c001c232:	e8 5f 53 ff ff       	call   c0011596 <UnixFile::getFileDescriptor()>
c001c237:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c23a:	83 c4 10             	add    esp,0x10
c001c23d:	89 02                	mov    DWORD PTR [edx],eax
c001c23f:	c1 f8 1f             	sar    eax,0x1f
c001c242:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c245:	31 c0                	xor    eax,eax
c001c247:	59                   	pop    ecx
c001c248:	31 d2                	xor    edx,edx
c001c24a:	5b                   	pop    ebx
c001c24b:	5e                   	pop    esi
c001c24c:	c3                   	ret    
c001c24d:	59                   	pop    ecx
c001c24e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c253:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c258:	5b                   	pop    ebx
c001c259:	5e                   	pop    esi
c001c25a:	c3                   	ret    

c001c25b <sysCallCloseDir(regs*)>:
c001c25b:	53                   	push   ebx
c001c25c:	83 ec 08             	sub    esp,0x8
c001c25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c263:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c266:	83 f8 02             	cmp    eax,0x2
c001c269:	76 47                	jbe    c001c2b2 <sysCallCloseDir(regs*)+0x57>
c001c26b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c270:	77 2f                	ja     c001c2a1 <sysCallCloseDir(regs*)+0x46>
c001c272:	83 ec 0c             	sub    esp,0xc
c001c275:	50                   	push   eax
c001c276:	e8 10 56 ff ff       	call   c001188b <getFromFileDescriptor(int)>
c001c27b:	89 c3                	mov    ebx,eax
c001c27d:	89 04 24             	mov    DWORD PTR [esp],eax
c001c280:	e8 2d 76 ff ff       	call   c00138b2 <Directory::close()>
c001c285:	83 c4 10             	add    esp,0x10
c001c288:	85 db                	test   ebx,ebx
c001c28a:	74 0c                	je     c001c298 <sysCallCloseDir(regs*)+0x3d>
c001c28c:	83 ec 0c             	sub    esp,0xc
c001c28f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c291:	53                   	push   ebx
c001c292:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c295:	83 c4 10             	add    esp,0x10
c001c298:	31 c0                	xor    eax,eax
c001c29a:	31 d2                	xor    edx,edx
c001c29c:	83 c4 08             	add    esp,0x8
c001c29f:	5b                   	pop    ebx
c001c2a0:	c3                   	ret    
c001c2a1:	83 ec 08             	sub    esp,0x8
c001c2a4:	50                   	push   eax
c001c2a5:	68 b0 ce 02 c0       	push   0xc002ceb0
c001c2aa:	e8 38 6b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c2af:	83 c4 10             	add    esp,0x10
c001c2b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2bc:	83 c4 08             	add    esp,0x8
c001c2bf:	5b                   	pop    ebx
c001c2c0:	c3                   	ret    

c001c2c1 <sysCallMakeDir(regs*)>:
c001c2c1:	56                   	push   esi
c001c2c2:	53                   	push   ebx
c001c2c3:	83 ec 10             	sub    esp,0x10
c001c2c6:	68 14 01 00 00       	push   0x114
c001c2cb:	e8 bc 35 ff ff       	call   c000f88c <malloc>
c001c2d0:	83 c4 0c             	add    esp,0xc
c001c2d3:	89 c3                	mov    ebx,eax
c001c2d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2da:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2e1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c2e4:	53                   	push   ebx
c001c2e5:	e8 08 75 ff ff       	call   c00137f2 <Directory::Directory(char const*, Process*)>
c001c2ea:	83 c4 10             	add    esp,0x10
c001c2ed:	85 db                	test   ebx,ebx
c001c2ef:	74 32                	je     c001c323 <sysCallMakeDir(regs*)+0x62>
c001c2f1:	83 ec 0c             	sub    esp,0xc
c001c2f4:	53                   	push   ebx
c001c2f5:	e8 3c 77 ff ff       	call   c0013a36 <Directory::create()>
c001c2fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2fd:	89 c6                	mov    esi,eax
c001c2ff:	e8 ae 75 ff ff       	call   c00138b2 <Directory::close()>
c001c304:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c306:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c309:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	31 c0                	xor    eax,eax
c001c311:	59                   	pop    ecx
c001c312:	85 f6                	test   esi,esi
c001c314:	5b                   	pop    ebx
c001c315:	0f 95 c0             	setne  al
c001c318:	5e                   	pop    esi
c001c319:	31 d2                	xor    edx,edx
c001c31b:	f7 d8                	neg    eax
c001c31d:	83 d2 00             	adc    edx,0x0
c001c320:	f7 da                	neg    edx
c001c322:	c3                   	ret    
c001c323:	59                   	pop    ecx
c001c324:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c329:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c32e:	5b                   	pop    ebx
c001c32f:	5e                   	pop    esi
c001c330:	c3                   	ret    

c001c331 <sysCallWait(regs*)>:
c001c331:	83 ec 10             	sub    esp,0x10
c001c334:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c338:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c33b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c33e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c341:	e8 c8 25 00 00       	call   c001e90e <waitTask(int, int*, int)>
c001c346:	83 c4 1c             	add    esp,0x1c
c001c349:	99                   	cdq    
c001c34a:	c3                   	ret    

c001c34b <sysCallNotImpl(regs*)>:
c001c34b:	83 ec 18             	sub    esp,0x18
c001c34e:	68 b6 cd 02 c0       	push   0xc002cdb6
c001c353:	e8 d7 e5 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001c358:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c35d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c362:	83 c4 1c             	add    esp,0x1c
c001c365:	c3                   	ret    

c001c366 <sysPanic(regs*)>:
c001c366:	83 ec 18             	sub    esp,0x18
c001c369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c36d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c370:	e8 ba e5 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001c375:	c7 04 24 d0 cd 02 c0 	mov    DWORD PTR [esp],0xc002cdd0
c001c37c:	e8 ae e5 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001c381:	b8 01 00 00 00       	mov    eax,0x1
c001c386:	31 d2                	xor    edx,edx
c001c388:	83 c4 1c             	add    esp,0x1c
c001c38b:	c3                   	ret    

c001c38c <sysCallRmdir(regs*)>:
c001c38c:	56                   	push   esi
c001c38d:	53                   	push   ebx
c001c38e:	83 ec 20             	sub    esp,0x20
c001c391:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c395:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c398:	68 14 01 00 00       	push   0x114
c001c39d:	e8 ea 34 ff ff       	call   c000f88c <malloc>
c001c3a2:	83 c4 0c             	add    esp,0xc
c001c3a5:	89 c3                	mov    ebx,eax
c001c3a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3ac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3af:	56                   	push   esi
c001c3b0:	53                   	push   ebx
c001c3b1:	e8 90 6f ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001c3b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3b9:	e8 64 71 ff ff       	call   c0013522 <File::unlink()>
c001c3be:	83 c4 10             	add    esp,0x10
c001c3c1:	85 db                	test   ebx,ebx
c001c3c3:	74 14                	je     c001c3d9 <sysCallRmdir(regs*)+0x4d>
c001c3c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3cb:	83 ec 0c             	sub    esp,0xc
c001c3ce:	53                   	push   ebx
c001c3cf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c3d2:	83 c4 10             	add    esp,0x10
c001c3d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3d9:	85 c0                	test   eax,eax
c001c3db:	0f 95 c0             	setne  al
c001c3de:	31 d2                	xor    edx,edx
c001c3e0:	0f b6 c0             	movzx  eax,al
c001c3e3:	f7 d8                	neg    eax
c001c3e5:	83 d2 00             	adc    edx,0x0
c001c3e8:	83 c4 14             	add    esp,0x14
c001c3eb:	f7 da                	neg    edx
c001c3ed:	5b                   	pop    ebx
c001c3ee:	5e                   	pop    esi
c001c3ef:	c3                   	ret    

c001c3f0 <sysCallUnlink(regs*)>:
c001c3f0:	56                   	push   esi
c001c3f1:	53                   	push   ebx
c001c3f2:	83 ec 20             	sub    esp,0x20
c001c3f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c3f9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c3fc:	68 14 01 00 00       	push   0x114
c001c401:	e8 86 34 ff ff       	call   c000f88c <malloc>
c001c406:	83 c4 0c             	add    esp,0xc
c001c409:	89 c3                	mov    ebx,eax
c001c40b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c410:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c413:	56                   	push   esi
c001c414:	53                   	push   ebx
c001c415:	e8 2c 6f ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001c41a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c41d:	e8 00 71 ff ff       	call   c0013522 <File::unlink()>
c001c422:	83 c4 10             	add    esp,0x10
c001c425:	85 db                	test   ebx,ebx
c001c427:	74 14                	je     c001c43d <sysCallUnlink(regs*)+0x4d>
c001c429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c42d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c42f:	83 ec 0c             	sub    esp,0xc
c001c432:	53                   	push   ebx
c001c433:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c436:	83 c4 10             	add    esp,0x10
c001c439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c43d:	85 c0                	test   eax,eax
c001c43f:	0f 95 c0             	setne  al
c001c442:	31 d2                	xor    edx,edx
c001c444:	0f b6 c0             	movzx  eax,al
c001c447:	f7 d8                	neg    eax
c001c449:	83 d2 00             	adc    edx,0x0
c001c44c:	83 c4 14             	add    esp,0x14
c001c44f:	f7 da                	neg    edx
c001c451:	5b                   	pop    ebx
c001c452:	5e                   	pop    esi
c001c453:	c3                   	ret    

c001c454 <sysCallGetArgv(regs*)>:
c001c454:	83 ec 0c             	sub    esp,0xc
c001c457:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c45b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c45e:	85 c0                	test   eax,eax
c001c460:	78 2b                	js     c001c48d <sysCallGetArgv(regs*)+0x39>
c001c462:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c468:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c46b:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c471:	7d 1a                	jge    c001c48d <sysCallGetArgv(regs*)+0x39>
c001c473:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c47a:	85 c0                	test   eax,eax
c001c47c:	74 17                	je     c001c495 <sysCallGetArgv(regs*)+0x41>
c001c47e:	83 ec 08             	sub    esp,0x8
c001c481:	50                   	push   eax
c001c482:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c485:	e8 82 43 fe ff       	call   c000080c <strcpy>
c001c48a:	83 c4 10             	add    esp,0x10
c001c48d:	31 c0                	xor    eax,eax
c001c48f:	31 d2                	xor    edx,edx
c001c491:	83 c4 0c             	add    esp,0xc
c001c494:	c3                   	ret    
c001c495:	b8 01 00 00 00       	mov    eax,0x1
c001c49a:	31 d2                	xor    edx,edx
c001c49c:	83 c4 0c             	add    esp,0xc
c001c49f:	c3                   	ret    

c001c4a0 <sysCallTTYName(regs*)>:
c001c4a0:	56                   	push   esi
c001c4a1:	53                   	push   ebx
c001c4a2:	53                   	push   ebx
c001c4a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c4a7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c4aa:	85 c0                	test   eax,eax
c001c4ac:	74 5f                	je     c001c50d <sysCallTTYName(regs*)+0x6d>
c001c4ae:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c4b1:	83 f8 02             	cmp    eax,0x2
c001c4b4:	77 3e                	ja     c001c4f4 <sysCallTTYName(regs*)+0x54>
c001c4b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4be:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c4c4:	85 db                	test   ebx,ebx
c001c4c6:	74 45                	je     c001c50d <sysCallTTYName(regs*)+0x6d>
c001c4c8:	83 ec 0c             	sub    esp,0xc
c001c4cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4cd:	53                   	push   ebx
c001c4ce:	ff 10                	call   DWORD PTR [eax]
c001c4d0:	83 c4 10             	add    esp,0x10
c001c4d3:	84 c0                	test   al,al
c001c4d5:	74 41                	je     c001c518 <sysCallTTYName(regs*)+0x78>
c001c4d7:	83 ec 08             	sub    esp,0x8
c001c4da:	81 c3 82 00 00 00    	add    ebx,0x82
c001c4e0:	53                   	push   ebx
c001c4e1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c4e4:	e8 23 43 fe ff       	call   c000080c <strcpy>
c001c4e9:	83 c4 10             	add    esp,0x10
c001c4ec:	31 c0                	xor    eax,eax
c001c4ee:	59                   	pop    ecx
c001c4ef:	31 d2                	xor    edx,edx
c001c4f1:	5b                   	pop    ebx
c001c4f2:	5e                   	pop    esi
c001c4f3:	c3                   	ret    
c001c4f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c4f9:	74 bb                	je     c001c4b6 <sysCallTTYName(regs*)+0x16>
c001c4fb:	83 ec 0c             	sub    esp,0xc
c001c4fe:	50                   	push   eax
c001c4ff:	e8 87 53 ff ff       	call   c001188b <getFromFileDescriptor(int)>
c001c504:	83 c4 10             	add    esp,0x10
c001c507:	89 c3                	mov    ebx,eax
c001c509:	85 db                	test   ebx,ebx
c001c50b:	75 bb                	jne    c001c4c8 <sysCallTTYName(regs*)+0x28>
c001c50d:	59                   	pop    ecx
c001c50e:	b8 01 00 00 00       	mov    eax,0x1
c001c513:	31 d2                	xor    edx,edx
c001c515:	5b                   	pop    ebx
c001c516:	5e                   	pop    esi
c001c517:	c3                   	ret    
c001c518:	59                   	pop    ecx
c001c519:	b8 02 00 00 00       	mov    eax,0x2
c001c51e:	31 d2                	xor    edx,edx
c001c520:	5b                   	pop    ebx
c001c521:	5e                   	pop    esi
c001c522:	c3                   	ret    

c001c523 <sysCallUSleep(regs*)>:
c001c523:	83 ec 14             	sub    esp,0x14
c001c526:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c52b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c52f:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c536:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c539:	01 ca                	add    edx,ecx
c001c53b:	52                   	push   edx
c001c53c:	50                   	push   eax
c001c53d:	e8 a3 24 00 00       	call   c001e9e5 <nanoSleep(unsigned long long)>
c001c542:	31 c0                	xor    eax,eax
c001c544:	31 d2                	xor    edx,edx
c001c546:	83 c4 1c             	add    esp,0x1c
c001c549:	c3                   	ret    

c001c54a <sysCallSpawn(regs*)>:
c001c54a:	56                   	push   esi
c001c54b:	53                   	push   ebx
c001c54c:	50                   	push   eax
c001c54d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c551:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c554:	85 c0                	test   eax,eax
c001c556:	75 08                	jne    c001c560 <sysCallSpawn(regs*)+0x16>
c001c558:	59                   	pop    ecx
c001c559:	31 c0                	xor    eax,eax
c001c55b:	31 d2                	xor    edx,edx
c001c55d:	5b                   	pop    ebx
c001c55e:	5e                   	pop    esi
c001c55f:	c3                   	ret    
c001c560:	83 ec 08             	sub    esp,0x8
c001c563:	50                   	push   eax
c001c564:	68 df cd 02 c0       	push   0xc002cddf
c001c569:	e8 79 68 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c56e:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c575:	e8 12 33 ff ff       	call   c000f88c <malloc>
c001c57a:	83 c4 10             	add    esp,0x10
c001c57d:	89 c6                	mov    esi,eax
c001c57f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c582:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c585:	85 c0                	test   eax,eax
c001c587:	75 32                	jne    c001c5bb <sysCallSpawn(regs*)+0x71>
c001c589:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c58e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c591:	52                   	push   edx
c001c592:	50                   	push   eax
c001c593:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c596:	56                   	push   esi
c001c597:	e8 26 1b 00 00       	call   c001e0c2 <Process::Process(char const*, Process*, char**)>
c001c59c:	83 c4 10             	add    esp,0x10
c001c59f:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c5a6:	75 b0                	jne    c001c558 <sysCallSpawn(regs*)+0xe>
c001c5a8:	83 ec 0c             	sub    esp,0xc
c001c5ab:	56                   	push   esi
c001c5ac:	e8 f3 1f 00 00       	call   c001e5a4 <Process::createUserThread()>
c001c5b1:	8b 06                	mov    eax,DWORD PTR [esi]
c001c5b3:	83 c4 10             	add    esp,0x10
c001c5b6:	99                   	cdq    
c001c5b7:	59                   	pop    ecx
c001c5b8:	5b                   	pop    ebx
c001c5b9:	5e                   	pop    esi
c001c5ba:	c3                   	ret    
c001c5bb:	31 c0                	xor    eax,eax
c001c5bd:	eb d2                	jmp    c001c591 <sysCallSpawn(regs*)+0x47>

c001c5bf <sysCallGetEnv(regs*)>:
c001c5bf:	55                   	push   ebp
c001c5c0:	57                   	push   edi
c001c5c1:	56                   	push   esi
c001c5c2:	53                   	push   ebx
c001c5c3:	83 ec 28             	sub    esp,0x28
c001c5c6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c5ca:	68 ed cd 02 c0       	push   0xc002cded
c001c5cf:	e8 13 68 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c5d4:	5f                   	pop    edi
c001c5d5:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c5d8:	5d                   	pop    ebp
c001c5d9:	53                   	push   ebx
c001c5da:	68 1a d1 02 c0       	push   0xc002d11a
c001c5df:	e8 03 68 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c5e4:	58                   	pop    eax
c001c5e5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c5e8:	5a                   	pop    edx
c001c5e9:	57                   	push   edi
c001c5ea:	68 f6 cd 02 c0       	push   0xc002cdf6
c001c5ef:	e8 f3 67 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c5f4:	59                   	pop    ecx
c001c5f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5fa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5fd:	e8 49 e2 ff ff       	call   c001a84b <Krnl::getProcessTotalEnvCount(Process*)>
c001c602:	5a                   	pop    edx
c001c603:	89 c5                	mov    ebp,eax
c001c605:	59                   	pop    ecx
c001c606:	50                   	push   eax
c001c607:	68 00 ce 02 c0       	push   0xc002ce00
c001c60c:	e8 d6 67 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	39 ef                	cmp    edi,ebp
c001c616:	7c 15                	jl     c001c62d <sysCallGetEnv(regs*)+0x6e>
c001c618:	85 db                	test   ebx,ebx
c001c61a:	75 0c                	jne    c001c628 <sysCallGetEnv(regs*)+0x69>
c001c61c:	83 c4 1c             	add    esp,0x1c
c001c61f:	31 c0                	xor    eax,eax
c001c621:	5b                   	pop    ebx
c001c622:	31 d2                	xor    edx,edx
c001c624:	5e                   	pop    esi
c001c625:	5f                   	pop    edi
c001c626:	5d                   	pop    ebp
c001c627:	c3                   	ret    
c001c628:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c62b:	eb ef                	jmp    c001c61c <sysCallGetEnv(regs*)+0x5d>
c001c62d:	83 ec 0c             	sub    esp,0xc
c001c630:	68 0c ce 02 c0       	push   0xc002ce0c
c001c635:	e8 ad 67 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c63a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c63e:	83 c4 0c             	add    esp,0xc
c001c641:	57                   	push   edi
c001c642:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c648:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c64b:	50                   	push   eax
c001c64c:	e8 1a e2 ff ff       	call   c001a86b <Krnl::getProcessEnvPair(Process*, int)>
c001c651:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c655:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c659:	68 cb d1 02 c0       	push   0xc002d1cb
c001c65e:	e8 84 67 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c663:	83 c4 10             	add    esp,0x10
c001c666:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c669:	85 f6                	test   esi,esi
c001c66b:	75 47                	jne    c001c6b4 <sysCallGetEnv(regs*)+0xf5>
c001c66d:	83 ec 0c             	sub    esp,0xc
c001c670:	55                   	push   ebp
c001c671:	e8 f6 40 fe ff       	call   c000076c <strlen>
c001c676:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c679:	89 c3                	mov    ebx,eax
c001c67b:	e8 ec 40 fe ff       	call   c000076c <strlen>
c001c680:	5a                   	pop    edx
c001c681:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c685:	59                   	pop    ecx
c001c686:	50                   	push   eax
c001c687:	68 0f ce 02 c0       	push   0xc002ce0f
c001c68c:	e8 56 67 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c691:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c694:	e8 d3 40 fe ff       	call   c000076c <strlen>
c001c699:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c69c:	89 c3                	mov    ebx,eax
c001c69e:	e8 c9 40 fe ff       	call   c000076c <strlen>
c001c6a3:	83 c4 10             	add    esp,0x10
c001c6a6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c6aa:	83 c4 1c             	add    esp,0x1c
c001c6ad:	31 d2                	xor    edx,edx
c001c6af:	5b                   	pop    ebx
c001c6b0:	5e                   	pop    esi
c001c6b1:	5f                   	pop    edi
c001c6b2:	5d                   	pop    ebp
c001c6b3:	c3                   	ret    
c001c6b4:	83 ec 0c             	sub    esp,0xc
c001c6b7:	68 e5 d1 02 c0       	push   0xc002d1e5
c001c6bc:	e8 26 67 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c6c1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c6c4:	58                   	pop    eax
c001c6c5:	5a                   	pop    edx
c001c6c6:	55                   	push   ebp
c001c6c7:	53                   	push   ebx
c001c6c8:	e8 3f 41 fe ff       	call   c000080c <strcpy>
c001c6cd:	59                   	pop    ecx
c001c6ce:	5e                   	pop    esi
c001c6cf:	68 19 ce 02 c0       	push   0xc002ce19
c001c6d4:	53                   	push   ebx
c001c6d5:	e8 72 42 fe ff       	call   c000094c <strcat>
c001c6da:	5d                   	pop    ebp
c001c6db:	58                   	pop    eax
c001c6dc:	57                   	push   edi
c001c6dd:	53                   	push   ebx
c001c6de:	e8 69 42 fe ff       	call   c000094c <strcat>
c001c6e3:	c7 04 24 ff d1 02 c0 	mov    DWORD PTR [esp],0xc002d1ff
c001c6ea:	e8 f8 66 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c6ef:	83 c4 10             	add    esp,0x10
c001c6f2:	e9 25 ff ff ff       	jmp    c001c61c <sysCallGetEnv(regs*)+0x5d>

c001c6f7 <sysAppSettings(regs*)>:
c001c6f7:	57                   	push   edi
c001c6f8:	56                   	push   esi
c001c6f9:	56                   	push   esi
c001c6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fe:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c701:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c707:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c70c:	66 3d c0 09          	cmp    ax,0x9c0
c001c710:	75 2e                	jne    c001c740 <sysAppSettings(regs*)+0x49>
c001c712:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c718:	83 e0 1f             	and    eax,0x1f
c001c71b:	3c 01                	cmp    al,0x1
c001c71d:	74 2c                	je     c001c74b <sysAppSettings(regs*)+0x54>
c001c71f:	3c 07                	cmp    al,0x7
c001c721:	0f 84 b3 00 00 00    	je     c001c7da <sysAppSettings(regs*)+0xe3>
c001c727:	84 c0                	test   al,al
c001c729:	0f 84 d2 00 00 00    	je     c001c801 <sysAppSettings(regs*)+0x10a>
c001c72f:	3c 08                	cmp    al,0x8
c001c731:	74 63                	je     c001c796 <sysAppSettings(regs*)+0x9f>
c001c733:	59                   	pop    ecx
c001c734:	0f b6 c0             	movzx  eax,al
c001c737:	5e                   	pop    esi
c001c738:	05 e8 03 00 00       	add    eax,0x3e8
c001c73d:	5f                   	pop    edi
c001c73e:	99                   	cdq    
c001c73f:	c3                   	ret    
c001c740:	b8 01 00 00 00       	mov    eax,0x1
c001c745:	59                   	pop    ecx
c001c746:	31 d2                	xor    edx,edx
c001c748:	5e                   	pop    esi
c001c749:	5f                   	pop    edi
c001c74a:	c3                   	ret    
c001c74b:	50                   	push   eax
c001c74c:	68 00 01 00 00       	push   0x100
c001c751:	6a 00                	push   0x0
c001c753:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c758:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c75b:	83 c0 0c             	add    eax,0xc
c001c75e:	50                   	push   eax
c001c75f:	e8 ec 3f fe ff       	call   c0000750 <memset>
c001c764:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c769:	b9 ff 00 00 00       	mov    ecx,0xff
c001c76e:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c771:	83 c7 0c             	add    edi,0xc
c001c774:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c776:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c77b:	5a                   	pop    edx
c001c77c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c77f:	59                   	pop    ecx
c001c780:	8d 50 0c             	lea    edx,[eax+0xc]
c001c783:	52                   	push   edx
c001c784:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c78a:	e8 27 43 ff ff       	call   c0010ab6 <VgaText::setTitle(char*)>
c001c78f:	83 c4 10             	add    esp,0x10
c001c792:	31 c0                	xor    eax,eax
c001c794:	eb af                	jmp    c001c745 <sysAppSettings(regs*)+0x4e>
c001c796:	83 ec 08             	sub    esp,0x8
c001c799:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c79f:	83 e0 0f             	and    eax,0xf
c001c7a2:	50                   	push   eax
c001c7a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c7b1:	e8 f2 42 ff ff       	call   c0010aa8 <VgaText::setTitleColour(VgaColour)>
c001c7b6:	5f                   	pop    edi
c001c7b7:	58                   	pop    eax
c001c7b8:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c7be:	c1 e8 04             	shr    eax,0x4
c001c7c1:	83 e0 0f             	and    eax,0xf
c001c7c4:	50                   	push   eax
c001c7c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c7d3:	e8 c2 42 ff ff       	call   c0010a9a <VgaText::setTitleTextColour(VgaColour)>
c001c7d8:	eb b5                	jmp    c001c78f <sysAppSettings(regs*)+0x98>
c001c7da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7e2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c7e8:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c7ee:	c0 e8 06             	shr    al,0x6
c001c7f1:	83 e0 01             	and    eax,0x1
c001c7f4:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c7fa:	31 c0                	xor    eax,eax
c001c7fc:	e9 44 ff ff ff       	jmp    c001c745 <sysAppSettings(regs*)+0x4e>
c001c801:	b8 02 00 00 00       	mov    eax,0x2
c001c806:	e9 3a ff ff ff       	jmp    c001c745 <sysAppSettings(regs*)+0x4e>

c001c80b <sysSetFatAttrib(regs*)>:
c001c80b:	57                   	push   edi
c001c80c:	56                   	push   esi
c001c80d:	53                   	push   ebx
c001c80e:	83 ec 1c             	sub    esp,0x1c
c001c811:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c815:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c818:	68 14 01 00 00       	push   0x114
c001c81d:	e8 6a 30 ff ff       	call   c000f88c <malloc>
c001c822:	83 c4 0c             	add    esp,0xc
c001c825:	89 c3                	mov    ebx,eax
c001c827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c82c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c82f:	57                   	push   edi
c001c830:	53                   	push   ebx
c001c831:	e8 10 6b ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001c836:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c839:	83 c4 0c             	add    esp,0xc
c001c83c:	0f b6 d4             	movzx  edx,ah
c001c83f:	0f b6 c0             	movzx  eax,al
c001c842:	52                   	push   edx
c001c843:	50                   	push   eax
c001c844:	53                   	push   ebx
c001c845:	e8 72 6d ff ff       	call   c00135bc <File::chfatattr(unsigned char, unsigned char)>
c001c84a:	83 c4 10             	add    esp,0x10
c001c84d:	85 db                	test   ebx,ebx
c001c84f:	74 14                	je     c001c865 <sysSetFatAttrib(regs*)+0x5a>
c001c851:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c855:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c857:	83 ec 0c             	sub    esp,0xc
c001c85a:	53                   	push   ebx
c001c85b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c85e:	83 c4 10             	add    esp,0x10
c001c861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c865:	85 c0                	test   eax,eax
c001c867:	0f 95 c0             	setne  al
c001c86a:	31 d2                	xor    edx,edx
c001c86c:	0f b6 c0             	movzx  eax,al
c001c86f:	f7 d8                	neg    eax
c001c871:	83 d2 00             	adc    edx,0x0
c001c874:	83 c4 10             	add    esp,0x10
c001c877:	f7 da                	neg    edx
c001c879:	5b                   	pop    ebx
c001c87a:	5e                   	pop    esi
c001c87b:	5f                   	pop    edi
c001c87c:	c3                   	ret    

c001c87d <sysPipe(regs*)>:
c001c87d:	57                   	push   edi
c001c87e:	56                   	push   esi
c001c87f:	53                   	push   ebx
c001c880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c884:	83 ec 0c             	sub    esp,0xc
c001c887:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c88a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c88d:	6a 20                	push   0x20
c001c88f:	e8 f8 2f ff ff       	call   c000f88c <malloc>
c001c894:	89 c3                	mov    ebx,eax
c001c896:	58                   	pop    eax
c001c897:	5a                   	pop    edx
c001c898:	68 00 50 00 00       	push   0x5000
c001c89d:	53                   	push   ebx
c001c89e:	e8 bb 3b ff ff       	call   c001045e <Pipe::Pipe(int)>
c001c8a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8a6:	e8 eb 4c ff ff       	call   c0011596 <UnixFile::getFileDescriptor()>
c001c8ab:	89 07                	mov    DWORD PTR [edi],eax
c001c8ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8b0:	e8 e1 4c ff ff       	call   c0011596 <UnixFile::getFileDescriptor()>
c001c8b5:	83 c4 10             	add    esp,0x10
c001c8b8:	89 06                	mov    DWORD PTR [esi],eax
c001c8ba:	31 d2                	xor    edx,edx
c001c8bc:	5b                   	pop    ebx
c001c8bd:	31 c0                	xor    eax,eax
c001c8bf:	5e                   	pop    esi
c001c8c0:	5f                   	pop    edi
c001c8c1:	c3                   	ret    

c001c8c2 <sysGetUnixTime(regs*)>:
c001c8c2:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001c8c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c8cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8d1:	e9 62 74 ff ff       	jmp    c0013d38 <Clock::timeInSecondsLocal()>

c001c8d6 <string_ends_with(char const*, char const*)>:
c001c8d6:	57                   	push   edi
c001c8d7:	56                   	push   esi
c001c8d8:	53                   	push   ebx
c001c8d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8dd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c8e1:	83 ec 0c             	sub    esp,0xc
c001c8e4:	53                   	push   ebx
c001c8e5:	e8 82 3e fe ff       	call   c000076c <strlen>
c001c8ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8ed:	89 c6                	mov    esi,eax
c001c8ef:	e8 78 3e fe ff       	call   c000076c <strlen>
c001c8f4:	83 c4 10             	add    esp,0x10
c001c8f7:	39 c6                	cmp    esi,eax
c001c8f9:	7d 06                	jge    c001c901 <string_ends_with(char const*, char const*)+0x2b>
c001c8fb:	5b                   	pop    ebx
c001c8fc:	31 c0                	xor    eax,eax
c001c8fe:	5e                   	pop    esi
c001c8ff:	5f                   	pop    edi
c001c900:	c3                   	ret    
c001c901:	83 ec 08             	sub    esp,0x8
c001c904:	29 c6                	sub    esi,eax
c001c906:	57                   	push   edi
c001c907:	01 f3                	add    ebx,esi
c001c909:	53                   	push   ebx
c001c90a:	e8 89 3f fe ff       	call   c0000898 <strcmp>
c001c90f:	83 c4 10             	add    esp,0x10
c001c912:	85 c0                	test   eax,eax
c001c914:	5b                   	pop    ebx
c001c915:	0f 94 c0             	sete   al
c001c918:	5e                   	pop    esi
c001c919:	0f b6 c0             	movzx  eax,al
c001c91c:	5f                   	pop    edi
c001c91d:	c3                   	ret    

c001c91e <sysCallOpen(regs*)>:
c001c91e:	56                   	push   esi
c001c91f:	53                   	push   ebx
c001c920:	81 ec 04 01 00 00    	sub    esp,0x104
c001c926:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c92d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c930:	85 c9                	test   ecx,ecx
c001c932:	0f 84 b3 00 00 00    	je     c001c9eb <sysCallOpen(regs*)+0xcd>
c001c938:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c93b:	85 c0                	test   eax,eax
c001c93d:	0f 84 a8 00 00 00    	je     c001c9eb <sysCallOpen(regs*)+0xcd>
c001c943:	52                   	push   edx
c001c944:	68 1b ce 02 c0       	push   0xc002ce1b
c001c949:	50                   	push   eax
c001c94a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c94e:	56                   	push   esi
c001c94f:	e8 48 68 ff ff       	call   c001319c <Fs::standardiseFiles(char*, char const*, char const*)>
c001c954:	89 34 24             	mov    DWORD PTR [esp],esi
c001c957:	e8 10 3e fe ff       	call   c000076c <strlen>
c001c95c:	83 c4 10             	add    esp,0x10
c001c95f:	48                   	dec    eax
c001c960:	74 1d                	je     c001c97f <sysCallOpen(regs*)+0x61>
c001c962:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c965:	eb 0f                	jmp    c001c976 <sysCallOpen(regs*)+0x58>
c001c967:	80 fa 3a             	cmp    dl,0x3a
c001c96a:	74 0f                	je     c001c97b <sysCallOpen(regs*)+0x5d>
c001c96c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c970:	48                   	dec    eax
c001c971:	74 0c                	je     c001c97f <sysCallOpen(regs*)+0x61>
c001c973:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c976:	80 fa 2e             	cmp    dl,0x2e
c001c979:	75 ec                	jne    c001c967 <sysCallOpen(regs*)+0x49>
c001c97b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c97f:	83 ec 08             	sub    esp,0x8
c001c982:	68 1f ce 02 c0       	push   0xc002ce1f
c001c987:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c98a:	e8 47 ff ff ff       	call   c001c8d6 <string_ends_with(char const*, char const*)>
c001c98f:	83 c4 10             	add    esp,0x10
c001c992:	85 c0                	test   eax,eax
c001c994:	75 17                	jne    c001c9ad <sysCallOpen(regs*)+0x8f>
c001c996:	83 ec 08             	sub    esp,0x8
c001c999:	68 40 ce 02 c0       	push   0xc002ce40
c001c99e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9a1:	e8 30 ff ff ff       	call   c001c8d6 <string_ends_with(char const*, char const*)>
c001c9a6:	83 c4 10             	add    esp,0x10
c001c9a9:	85 c0                	test   eax,eax
c001c9ab:	74 51                	je     c001c9fe <sysCallOpen(regs*)+0xe0>
c001c9ad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c9b0:	83 ec 08             	sub    esp,0x8
c001c9b3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c9b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c9c3:	ff 30                	push   DWORD PTR [eax]
c001c9c5:	68 24 ce 02 c0       	push   0xc002ce24
c001c9ca:	e8 18 64 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c9cf:	c7 04 24 33 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce33
c001c9d6:	e8 0c 64 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	81 c4 04 01 00 00    	add    esp,0x104
c001c9e4:	31 c0                	xor    eax,eax
c001c9e6:	31 d2                	xor    edx,edx
c001c9e8:	5b                   	pop    ebx
c001c9e9:	5e                   	pop    esi
c001c9ea:	c3                   	ret    
c001c9eb:	81 c4 04 01 00 00    	add    esp,0x104
c001c9f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c9f6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c9fb:	5b                   	pop    ebx
c001c9fc:	5e                   	pop    esi
c001c9fd:	c3                   	ret    
c001c9fe:	83 ec 08             	sub    esp,0x8
c001ca01:	68 20 ce 02 c0       	push   0xc002ce20
c001ca06:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca09:	e8 8a 3e fe ff       	call   c0000898 <strcmp>
c001ca0e:	83 c4 10             	add    esp,0x10
c001ca11:	85 c0                	test   eax,eax
c001ca13:	74 98                	je     c001c9ad <sysCallOpen(regs*)+0x8f>
c001ca15:	83 ec 08             	sub    esp,0x8
c001ca18:	68 1f ce 02 c0       	push   0xc002ce1f
c001ca1d:	56                   	push   esi
c001ca1e:	e8 b3 fe ff ff       	call   c001c8d6 <string_ends_with(char const*, char const*)>
c001ca23:	83 c4 10             	add    esp,0x10
c001ca26:	85 c0                	test   eax,eax
c001ca28:	75 83                	jne    c001c9ad <sysCallOpen(regs*)+0x8f>
c001ca2a:	83 ec 08             	sub    esp,0x8
c001ca2d:	68 45 ce 02 c0       	push   0xc002ce45
c001ca32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca35:	e8 9c fe ff ff       	call   c001c8d6 <string_ends_with(char const*, char const*)>
c001ca3a:	83 c4 10             	add    esp,0x10
c001ca3d:	85 c0                	test   eax,eax
c001ca3f:	0f 85 d9 00 00 00    	jne    c001cb1e <sysCallOpen(regs*)+0x200>
c001ca45:	83 ec 08             	sub    esp,0x8
c001ca48:	68 4a ce 02 c0       	push   0xc002ce4a
c001ca4d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca50:	e8 81 fe ff ff       	call   c001c8d6 <string_ends_with(char const*, char const*)>
c001ca55:	83 c4 10             	add    esp,0x10
c001ca58:	85 c0                	test   eax,eax
c001ca5a:	0f 85 be 00 00 00    	jne    c001cb1e <sysCallOpen(regs*)+0x200>
c001ca60:	83 ec 08             	sub    esp,0x8
c001ca63:	68 46 ce 02 c0       	push   0xc002ce46
c001ca68:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca6b:	e8 28 3e fe ff       	call   c0000898 <strcmp>
c001ca70:	83 c4 10             	add    esp,0x10
c001ca73:	85 c0                	test   eax,eax
c001ca75:	0f 84 a3 00 00 00    	je     c001cb1e <sysCallOpen(regs*)+0x200>
c001ca7b:	83 ec 08             	sub    esp,0x8
c001ca7e:	68 45 ce 02 c0       	push   0xc002ce45
c001ca83:	56                   	push   esi
c001ca84:	e8 4d fe ff ff       	call   c001c8d6 <string_ends_with(char const*, char const*)>
c001ca89:	83 c4 10             	add    esp,0x10
c001ca8c:	85 c0                	test   eax,eax
c001ca8e:	0f 85 8a 00 00 00    	jne    c001cb1e <sysCallOpen(regs*)+0x200>
c001ca94:	83 ec 0c             	sub    esp,0xc
c001ca97:	68 14 01 00 00       	push   0x114
c001ca9c:	e8 eb 2d ff ff       	call   c000f88c <malloc>
c001caa1:	83 c4 0c             	add    esp,0xc
c001caa4:	89 c6                	mov    esi,eax
c001caa6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caab:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001caae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cab1:	56                   	push   esi
c001cab2:	e8 8f 68 ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001cab7:	83 c4 10             	add    esp,0x10
c001caba:	85 f6                	test   esi,esi
c001cabc:	0f 84 29 ff ff ff    	je     c001c9eb <sysCallOpen(regs*)+0xcd>
c001cac2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001cac5:	0f b6 c2             	movzx  eax,dl
c001cac8:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001cacb:	89 d0                	mov    eax,edx
c001cacd:	83 e0 01             	and    eax,0x1
c001cad0:	f6 c2 02             	test   dl,0x2
c001cad3:	74 03                	je     c001cad8 <sysCallOpen(regs*)+0x1ba>
c001cad5:	83 c8 02             	or     eax,0x2
c001cad8:	f6 c2 04             	test   dl,0x4
c001cadb:	74 03                	je     c001cae0 <sysCallOpen(regs*)+0x1c2>
c001cadd:	83 c8 04             	or     eax,0x4
c001cae0:	f6 c2 08             	test   dl,0x8
c001cae3:	74 03                	je     c001cae8 <sysCallOpen(regs*)+0x1ca>
c001cae5:	83 c8 0a             	or     eax,0xa
c001cae8:	83 e2 10             	and    edx,0x10
c001caeb:	74 03                	je     c001caf0 <sysCallOpen(regs*)+0x1d2>
c001caed:	83 c8 12             	or     eax,0x12
c001caf0:	83 ec 08             	sub    esp,0x8
c001caf3:	50                   	push   eax
c001caf4:	56                   	push   esi
c001caf5:	e8 b0 68 ff ff       	call   c00133aa <File::open(FileOpenMode)>
c001cafa:	83 c4 10             	add    esp,0x10
c001cafd:	85 c0                	test   eax,eax
c001caff:	0f 85 e6 fe ff ff    	jne    c001c9eb <sysCallOpen(regs*)+0xcd>
c001cb05:	83 ec 0c             	sub    esp,0xc
c001cb08:	56                   	push   esi
c001cb09:	e8 88 4a ff ff       	call   c0011596 <UnixFile::getFileDescriptor()>
c001cb0e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001cb11:	89 02                	mov    DWORD PTR [edx],eax
c001cb13:	c1 f8 1f             	sar    eax,0x1f
c001cb16:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cb19:	e9 bd fe ff ff       	jmp    c001c9db <sysCallOpen(regs*)+0xbd>
c001cb1e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb21:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001cb27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb2e:	e9 ab fe ff ff       	jmp    c001c9de <sysCallOpen(regs*)+0xc0>

c001cb33 <Sys::loadSyscalls()>:
c001cb33:	c7 05 60 1f 03 c0 23 bc 01 c0 	mov    DWORD PTR ds:0xc0031f60,0xc001bc23
c001cb3d:	c7 05 64 1f 03 c0 88 b7 01 c0 	mov    DWORD PTR ds:0xc0031f64,0xc001b788
c001cb47:	c7 05 68 1f 03 c0 76 b9 01 c0 	mov    DWORD PTR ds:0xc0031f68,0xc001b976
c001cb51:	c7 05 6c 1f 03 c0 59 bb 01 c0 	mov    DWORD PTR ds:0xc0031f6c,0xc001bb59
c001cb5b:	c7 05 70 1f 03 c0 0e b9 01 c0 	mov    DWORD PTR ds:0xc0031f70,0xc001b90e
c001cb65:	c7 05 74 1f 03 c0 bf b7 01 c0 	mov    DWORD PTR ds:0xc0031f74,0xc001b7bf
c001cb6f:	c7 05 78 1f 03 c0 a0 b7 01 c0 	mov    DWORD PTR ds:0xc0031f78,0xc001b7a0
c001cb79:	c7 05 7c 1f 03 c0 cb b9 01 c0 	mov    DWORD PTR ds:0xc0031f7c,0xc001b9cb
c001cb83:	c7 05 84 1f 03 c0 5e c1 01 c0 	mov    DWORD PTR ds:0xc0031f84,0xc001c15e
c001cb8d:	c7 05 80 1f 03 c0 1e c9 01 c0 	mov    DWORD PTR ds:0xc0031f80,0xc001c91e
c001cb97:	c7 05 88 1f 03 c0 e6 c1 01 c0 	mov    DWORD PTR ds:0xc0031f88,0xc001c1e6
c001cba1:	c7 05 8c 1f 03 c0 4d be 01 c0 	mov    DWORD PTR ds:0xc0031f8c,0xc001be4d
c001cbab:	c7 05 90 1f 03 c0 69 bc 01 c0 	mov    DWORD PTR ds:0xc0031f90,0xc001bc69
c001cbb5:	c7 05 94 1f 03 c0 6e bc 01 c0 	mov    DWORD PTR ds:0xc0031f94,0xc001bc6e
c001cbbf:	c7 05 98 1f 03 c0 c1 c2 01 c0 	mov    DWORD PTR ds:0xc0031f98,0xc001c2c1
c001cbc9:	c7 05 9c 1f 03 c0 5b c2 01 c0 	mov    DWORD PTR ds:0xc0031f9c,0xc001c25b
c001cbd3:	c7 05 a0 1f 03 c0 35 bf 01 c0 	mov    DWORD PTR ds:0xc0031fa0,0xc001bf35
c001cbdd:	c7 05 a4 1f 03 c0 9e bf 01 c0 	mov    DWORD PTR ds:0xc0031fa4,0xc001bf9e
c001cbe7:	c7 05 a8 1f 03 c0 1b c0 01 c0 	mov    DWORD PTR ds:0xc0031fa8,0xc001c01b
c001cbf1:	c7 05 ac 1f 03 c0 73 bc 01 c0 	mov    DWORD PTR ds:0xc0031fac,0xc001bc73
c001cbfb:	c7 05 b0 1f 03 c0 31 c3 01 c0 	mov    DWORD PTR ds:0xc0031fb0,0xc001c331
c001cc05:	c7 05 b4 1f 03 c0 4b c3 01 c0 	mov    DWORD PTR ds:0xc0031fb4,0xc001c34b
c001cc0f:	c7 05 b8 1f 03 c0 4b c3 01 c0 	mov    DWORD PTR ds:0xc0031fb8,0xc001c34b
c001cc19:	c7 05 bc 1f 03 c0 8c c3 01 c0 	mov    DWORD PTR ds:0xc0031fbc,0xc001c38c
c001cc23:	c7 05 c0 1f 03 c0 f0 c3 01 c0 	mov    DWORD PTR ds:0xc0031fc0,0xc001c3f0
c001cc2d:	c7 05 c4 1f 03 c0 1f be 01 c0 	mov    DWORD PTR ds:0xc0031fc4,0xc001be1f
c001cc37:	c7 05 c8 1f 03 c0 54 c4 01 c0 	mov    DWORD PTR ds:0xc0031fc8,0xc001c454
c001cc41:	c7 05 cc 1f 03 c0 dc bd 01 c0 	mov    DWORD PTR ds:0xc0031fcc,0xc001bddc
c001cc4b:	c7 05 d0 1f 03 c0 a0 c4 01 c0 	mov    DWORD PTR ds:0xc0031fd0,0xc001c4a0
c001cc55:	c7 05 d4 1f 03 c0 db be 01 c0 	mov    DWORD PTR ds:0xc0031fd4,0xc001bedb
c001cc5f:	c7 05 d8 1f 03 c0 23 c5 01 c0 	mov    DWORD PTR ds:0xc0031fd8,0xc001c523
c001cc69:	c7 05 dc 1f 03 c0 9e c0 01 c0 	mov    DWORD PTR ds:0xc0031fdc,0xc001c09e
c001cc73:	c7 05 e0 1f 03 c0 4a c5 01 c0 	mov    DWORD PTR ds:0xc0031fe0,0xc001c54a
c001cc7d:	c7 05 e4 1f 03 c0 bf c5 01 c0 	mov    DWORD PTR ds:0xc0031fe4,0xc001c5bf
c001cc87:	c7 05 e8 1f 03 c0 f7 c6 01 c0 	mov    DWORD PTR ds:0xc0031fe8,0xc001c6f7
c001cc91:	c7 05 ec 1f 03 c0 7d bc 01 c0 	mov    DWORD PTR ds:0xc0031fec,0xc001bc7d
c001cc9b:	c7 05 f0 1f 03 c0 e7 bc 01 c0 	mov    DWORD PTR ds:0xc0031ff0,0xc001bce7
c001cca5:	c7 05 f4 1f 03 c0 2d bd 01 c0 	mov    DWORD PTR ds:0xc0031ff4,0xc001bd2d
c001ccaf:	c7 05 f8 1f 03 c0 0b c8 01 c0 	mov    DWORD PTR ds:0xc0031ff8,0xc001c80b
c001ccb9:	c7 05 fc 1f 03 c0 66 c3 01 c0 	mov    DWORD PTR ds:0xc0031ffc,0xc001c366
c001ccc3:	c7 05 00 20 03 c0 7e bd 01 c0 	mov    DWORD PTR ds:0xc0032000,0xc001bd7e
c001cccd:	c7 05 04 20 03 c0 7d c8 01 c0 	mov    DWORD PTR ds:0xc0032004,0xc001c87d
c001ccd7:	c7 05 08 20 03 c0 c2 c8 01 c0 	mov    DWORD PTR ds:0xc0032008,0xc001c8c2
c001cce1:	c7 05 0c 20 03 c0 66 b8 01 c0 	mov    DWORD PTR ds:0xc003200c,0xc001b866
c001cceb:	c7 05 10 20 03 c0 e7 b9 01 c0 	mov    DWORD PTR ds:0xc0032010,0xc001b9e7
c001ccf5:	c7 05 14 20 03 c0 0f bb 01 c0 	mov    DWORD PTR ds:0xc0032014,0xc001bb0f
c001ccff:	c7 05 18 20 03 c0 52 b7 01 c0 	mov    DWORD PTR ds:0xc0032018,0xc001b752
c001cd09:	c7 05 1c 20 03 c0 c1 bb 01 c0 	mov    DWORD PTR ds:0xc003201c,0xc001bbc1
c001cd13:	c7 05 20 20 03 c0 cb b7 01 c0 	mov    DWORD PTR ds:0xc0032020,0xc001b7cb
c001cd1d:	c7 05 24 20 03 c0 e2 b7 01 c0 	mov    DWORD PTR ds:0xc0032024,0xc001b7e2
c001cd27:	c3                   	ret    

c001cd28 <Sys::systemCall(regs*, void*)>:
c001cd28:	53                   	push   ebx
c001cd29:	83 ec 08             	sub    esp,0x8
c001cd2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd30:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd33:	83 f8 7f             	cmp    eax,0x7f
c001cd36:	77 16                	ja     c001cd4e <Sys::systemCall(regs*, void*)+0x26>
c001cd38:	8b 14 85 60 1f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce0a0]
c001cd3f:	85 d2                	test   edx,edx
c001cd41:	74 0b                	je     c001cd4e <Sys::systemCall(regs*, void*)+0x26>
c001cd43:	83 ec 0c             	sub    esp,0xc
c001cd46:	53                   	push   ebx
c001cd47:	ff d2                	call   edx
c001cd49:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd4c:	eb 0d                	jmp    c001cd5b <Sys::systemCall(regs*, void*)+0x33>
c001cd4e:	52                   	push   edx
c001cd4f:	52                   	push   edx
c001cd50:	50                   	push   eax
c001cd51:	68 4f ce 02 c0       	push   0xc002ce4f
c001cd56:	e8 8c 60 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001cd5b:	83 c4 10             	add    esp,0x10
c001cd5e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cd63:	31 d2                	xor    edx,edx
c001cd65:	83 c4 08             	add    esp,0x8
c001cd68:	5b                   	pop    ebx
c001cd69:	c3                   	ret    

c001cd6a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cd6a:	55                   	push   ebp
c001cd6b:	57                   	push   edi
c001cd6c:	56                   	push   esi
c001cd6d:	53                   	push   ebx
c001cd6e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cd74:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cd7b:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cd82:	85 c0                	test   eax,eax
c001cd84:	0f 95 c1             	setne  cl
c001cd87:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cd8f:	0f 94 c2             	sete   dl
c001cd92:	84 d1                	test   cl,dl
c001cd94:	74 23                	je     c001cdb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cd96:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cd9c:	74 1b                	je     c001cdb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cd9e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cda4:	89 da                	mov    edx,ebx
c001cda6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cdac:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cdb2:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cdb9:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cdc0:	05 ff 0f 00 00       	add    eax,0xfff
c001cdc5:	83 ec 0c             	sub    esp,0xc
c001cdc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdcc:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001cdd2:	c1 e8 0c             	shr    eax,0xc
c001cdd5:	89 fe                	mov    esi,edi
c001cdd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cddb:	c1 ee 0c             	shr    esi,0xc
c001cdde:	6a 01                	push   0x1
c001cde0:	e8 fc 4b ff ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c001cde5:	89 c5                	mov    ebp,eax
c001cde7:	58                   	pop    eax
c001cde8:	5a                   	pop    edx
c001cde9:	56                   	push   esi
c001cdea:	68 d3 ce 02 c0       	push   0xc002ced3
c001cdef:	e8 f3 5f ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001cdf4:	59                   	pop    ecx
c001cdf5:	58                   	pop    eax
c001cdf6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cdfa:	68 e5 ce 02 c0       	push   0xc002cee5
c001cdff:	e8 e3 5f ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ce04:	83 c4 10             	add    esp,0x10
c001ce07:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001ce0d:	0f 86 31 01 00 00    	jbe    c001cf44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001ce13:	c1 e6 0c             	shl    esi,0xc
c001ce16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce19:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001ce1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce20:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001ce27:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ce2a:	01 df                	add    edi,ebx
c001ce2c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001ce2f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001ce33:	0f 84 08 01 00 00    	je     c001cf41 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001ce39:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001ce3f:	76 05                	jbe    c001ce46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001ce41:	bf 00 10 00 00       	mov    edi,0x1000
c001ce46:	83 ec 0c             	sub    esp,0xc
c001ce49:	31 d2                	xor    edx,edx
c001ce4b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001ce52:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ce54:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ce58:	50                   	push   eax
c001ce59:	8d 74 24 30          	lea    esi,[esp+0x30]
c001ce5d:	56                   	push   esi
c001ce5e:	52                   	push   edx
c001ce5f:	57                   	push   edi
c001ce60:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001ce67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce6a:	83 c4 20             	add    esp,0x20
c001ce6d:	85 c0                	test   eax,eax
c001ce6f:	74 0a                	je     c001ce7b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001ce71:	53                   	push   ebx
c001ce72:	53                   	push   ebx
c001ce73:	50                   	push   eax
c001ce74:	68 f7 ce 02 c0       	push   0xc002cef7
c001ce79:	eb 0f                	jmp    c001ce8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001ce7b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001ce7f:	74 20                	je     c001cea1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001ce81:	51                   	push   ecx
c001ce82:	51                   	push   ecx
c001ce83:	6a 00                	push   0x0
c001ce85:	68 22 cf 02 c0       	push   0xc002cf22
c001ce8a:	e8 58 5f ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ce8f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce92:	e8 0a 50 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c001ce97:	83 c4 10             	add    esp,0x10
c001ce9a:	31 c0                	xor    eax,eax
c001ce9c:	e9 68 01 00 00       	jmp    c001d009 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cea1:	fa                   	cli    
c001cea2:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001cea8:	e8 fc 2f ff ff       	call   c000fea9 <Phys::allocatePage()>
c001cead:	6a 07                	push   0x7
c001ceaf:	89 c7                	mov    edi,eax
c001ceb1:	55                   	push   ebp
c001ceb2:	50                   	push   eax
c001ceb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ceb8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cebb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cec1:	e8 52 53 ff ff       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cec6:	83 c4 0c             	add    esp,0xc
c001cec9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ced0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ced6:	6a 00                	push   0x0
c001ced8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cedd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cee0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cee6:	e8 87 51 ff ff       	call   c0012072 <VAS::mapOtherVASIn(bool, VAS*)>
c001ceeb:	58                   	pop    eax
c001ceec:	5a                   	pop    edx
c001ceed:	68 07 0c 00 00       	push   0xc07
c001cef2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cef6:	57                   	push   edi
c001cef7:	89 ef                	mov    edi,ebp
c001cef9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cf00:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf06:	6a 00                	push   0x0
c001cf08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf0d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf10:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf16:	e8 b9 56 ff ff       	call   c00125d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cf1b:	b9 00 10 00 00       	mov    ecx,0x1000
c001cf20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cf22:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001cf27:	83 c4 20             	add    esp,0x20
c001cf2a:	48                   	dec    eax
c001cf2b:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001cf30:	85 c0                	test   eax,eax
c001cf32:	75 01                	jne    c001cf35 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001cf34:	fb                   	sti    
c001cf35:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cf3c:	e9 df fe ff ff       	jmp    c001ce20 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001cf41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001cf44:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cf4c:	0f 86 a9 00 00 00    	jbe    c001cffb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cf52:	fa                   	cli    
c001cf53:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001cf59:	51                   	push   ecx
c001cf5a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cf61:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf67:	6a 00                	push   0x0
c001cf69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf6e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf71:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf77:	e8 f6 50 ff ff       	call   c0012072 <VAS::mapOtherVASIn(bool, VAS*)>
c001cf7c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cf80:	c1 e6 0c             	shl    esi,0xc
c001cf83:	01 de                	add    esi,ebx
c001cf85:	83 c4 10             	add    esp,0x10
c001cf88:	39 de                	cmp    esi,ebx
c001cf8a:	74 61                	je     c001cfed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cf8c:	e8 18 2f ff ff       	call   c000fea9 <Phys::allocatePage()>
c001cf91:	6a 07                	push   0x7
c001cf93:	89 c7                	mov    edi,eax
c001cf95:	55                   	push   ebp
c001cf96:	50                   	push   eax
c001cf97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf9c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf9f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfa5:	e8 6e 52 ff ff       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cfaa:	58                   	pop    eax
c001cfab:	5a                   	pop    edx
c001cfac:	68 07 0c 00 00       	push   0xc07
c001cfb1:	53                   	push   ebx
c001cfb2:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cfb8:	57                   	push   edi
c001cfb9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cfc0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfc6:	6a 00                	push   0x0
c001cfc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cfcd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cfd0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfd6:	e8 f9 55 ff ff       	call   c00125d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cfdb:	83 c4 1c             	add    esp,0x1c
c001cfde:	68 00 10 00 00       	push   0x1000
c001cfe3:	6a 00                	push   0x0
c001cfe5:	55                   	push   ebp
c001cfe6:	e8 65 37 fe ff       	call   c0000750 <memset>
c001cfeb:	eb 98                	jmp    c001cf85 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cfed:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001cff2:	48                   	dec    eax
c001cff3:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001cff8:	75 01                	jne    c001cffb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cffa:	fb                   	sti    
c001cffb:	83 ec 0c             	sub    esp,0xc
c001cffe:	55                   	push   ebp
c001cfff:	e8 9d 4e ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c001d004:	83 c4 10             	add    esp,0x10
c001d007:	b0 01                	mov    al,0x1
c001d009:	81 c4 2c 10 00 00    	add    esp,0x102c
c001d00f:	5b                   	pop    ebx
c001d010:	5e                   	pop    esi
c001d011:	5f                   	pop    edi
c001d012:	5d                   	pop    ebp
c001d013:	c3                   	ret    

c001d014 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001d014:	55                   	push   ebp
c001d015:	57                   	push   edi
c001d016:	56                   	push   esi
c001d017:	53                   	push   ebx
c001d018:	83 ec 48             	sub    esp,0x48
c001d01b:	68 14 01 00 00       	push   0x114
c001d020:	e8 67 28 ff ff       	call   c000f88c <malloc>
c001d025:	83 c4 0c             	add    esp,0xc
c001d028:	89 c6                	mov    esi,eax
c001d02a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d02e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001d032:	50                   	push   eax
c001d033:	e8 0e 63 ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001d038:	58                   	pop    eax
c001d039:	5a                   	pop    edx
c001d03a:	6a 01                	push   0x1
c001d03c:	56                   	push   esi
c001d03d:	e8 68 63 ff ff       	call   c00133aa <File::open(FileOpenMode)>
c001d042:	83 c4 10             	add    esp,0x10
c001d045:	85 c0                	test   eax,eax
c001d047:	0f 85 47 01 00 00    	jne    c001d194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d04d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001d055:	83 ec 0c             	sub    esp,0xc
c001d058:	6a 34                	push   0x34
c001d05a:	e8 2d 28 ff ff       	call   c000f88c <malloc>
c001d05f:	89 c3                	mov    ebx,eax
c001d061:	58                   	pop    eax
c001d062:	8b 06                	mov    eax,DWORD PTR [esi]
c001d064:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d068:	57                   	push   edi
c001d069:	53                   	push   ebx
c001d06a:	6a 00                	push   0x0
c001d06c:	6a 34                	push   0x34
c001d06e:	56                   	push   esi
c001d06f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d072:	83 c4 20             	add    esp,0x20
c001d075:	85 c0                	test   eax,eax
c001d077:	0f 85 17 01 00 00    	jne    c001d194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d07d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001d083:	0f 85 0b 01 00 00    	jne    c001d194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d089:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001d08c:	85 c0                	test   eax,eax
c001d08e:	0f 84 00 01 00 00    	je     c001d194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d094:	31 d2                	xor    edx,edx
c001d096:	55                   	push   ebp
c001d097:	52                   	push   edx
c001d098:	50                   	push   eax
c001d099:	56                   	push   esi
c001d09a:	e8 c9 63 ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d09f:	83 c4 10             	add    esp,0x10
c001d0a2:	85 c0                	test   eax,eax
c001d0a4:	0f 85 ea 00 00 00    	jne    c001d194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0aa:	83 ec 0c             	sub    esp,0xc
c001d0ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d0b0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d0b4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d0b8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d0bc:	0f af c2             	imul   eax,edx
c001d0bf:	50                   	push   eax
c001d0c0:	e8 c7 27 ff ff       	call   c000f88c <malloc>
c001d0c5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d0c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0d2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d0d6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d0da:	0f af c2             	imul   eax,edx
c001d0dd:	99                   	cdq    
c001d0de:	52                   	push   edx
c001d0df:	50                   	push   eax
c001d0e0:	56                   	push   esi
c001d0e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0e4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001d0e7:	83 c4 20             	add    esp,0x20
c001d0ea:	85 c0                	test   eax,eax
c001d0ec:	0f 84 a2 00 00 00    	je     c001d194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0f2:	31 d2                	xor    edx,edx
c001d0f4:	51                   	push   ecx
c001d0f5:	52                   	push   edx
c001d0f6:	50                   	push   eax
c001d0f7:	56                   	push   esi
c001d0f8:	e8 6b 63 ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d0fd:	83 c4 10             	add    esp,0x10
c001d100:	85 c0                	test   eax,eax
c001d102:	0f 85 8c 00 00 00    	jne    c001d194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d108:	83 ec 0c             	sub    esp,0xc
c001d10b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d10f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d113:	31 ed                	xor    ebp,ebp
c001d115:	0f af c2             	imul   eax,edx
c001d118:	50                   	push   eax
c001d119:	e8 6e 27 ff ff       	call   c000f88c <malloc>
c001d11e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d120:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d124:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d12b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d12f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d133:	0f af c2             	imul   eax,edx
c001d136:	99                   	cdq    
c001d137:	52                   	push   edx
c001d138:	50                   	push   eax
c001d139:	56                   	push   esi
c001d13a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d13d:	83 c4 20             	add    esp,0x20
c001d140:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d148:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001d14c:	0f 86 80 00 00 00    	jbe    c001d1d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001d152:	0f b7 fd             	movzx  edi,bp
c001d155:	c1 e7 05             	shl    edi,0x5
c001d158:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001d15c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001d15f:	75 6b                	jne    c001d1cc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d161:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001d164:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d168:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d16b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d16f:	52                   	push   edx
c001d170:	31 d2                	xor    edx,edx
c001d172:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001d175:	52                   	push   edx
c001d176:	50                   	push   eax
c001d177:	56                   	push   esi
c001d178:	e8 eb 62 ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d17d:	83 c4 10             	add    esp,0x10
c001d180:	85 c0                	test   eax,eax
c001d182:	74 17                	je     c001d19b <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001d184:	83 ec 0c             	sub    esp,0xc
c001d187:	68 4e cf 02 c0       	push   0xc002cf4e
c001d18c:	e8 56 5c ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001d191:	83 c4 10             	add    esp,0x10
c001d194:	31 c0                	xor    eax,eax
c001d196:	e9 87 00 00 00       	jmp    c001d222 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001d19b:	83 ec 0c             	sub    esp,0xc
c001d19e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d1a1:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001d1a4:	50                   	push   eax
c001d1a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d1a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d1ad:	56                   	push   esi
c001d1ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001d1b2:	e8 b3 fb ff ff       	call   c001cd6a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001d1b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1bb:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d1bf:	83 c4 20             	add    esp,0x20
c001d1c2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d1c6:	73 04                	jae    c001d1cc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d1c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d1cc:	45                   	inc    ebp
c001d1cd:	e9 76 ff ff ff       	jmp    c001d148 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d1d2:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d1d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1de:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d1e4:	83 ec 0c             	sub    esp,0xc
c001d1e7:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d1ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d1f2:	05 00 10 00 00       	add    eax,0x1000
c001d1f7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d1fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1fe:	e8 99 26 ff ff       	call   c000f89c <free>
c001d203:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d206:	e8 91 26 ff ff       	call   c000f89c <free>
c001d20b:	58                   	pop    eax
c001d20c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d210:	e8 87 26 ff ff       	call   c000f89c <free>
c001d215:	89 34 24             	mov    DWORD PTR [esp],esi
c001d218:	e8 eb 61 ff ff       	call   c0013408 <File::close()>
c001d21d:	83 c4 10             	add    esp,0x10
c001d220:	b0 01                	mov    al,0x1
c001d222:	83 c4 3c             	add    esp,0x3c
c001d225:	5b                   	pop    ebx
c001d226:	5e                   	pop    esi
c001d227:	5f                   	pop    edi
c001d228:	5d                   	pop    ebp
c001d229:	c3                   	ret    

c001d22a <Thr::runtimeReferenceHelper()>:
c001d22a:	83 ec 18             	sub    esp,0x18
c001d22d:	68 56 cf 02 c0       	push   0xc002cf56
c001d232:	e8 b0 5b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001d237:	fa                   	cli    
c001d238:	83 c4 10             	add    esp,0x10
c001d23b:	eb fe                	jmp    c001d23b <Thr::runtimeReferenceHelper()+0x11>

c001d23d <Thr::getAddressOfKernelSymbol(char const*)>:
c001d23d:	57                   	push   edi
c001d23e:	56                   	push   esi
c001d23f:	53                   	push   ebx
c001d240:	31 db                	xor    ebx,ebx
c001d242:	39 1d 00 29 03 c0    	cmp    DWORD PTR ds:0xc0032900,ebx
c001d248:	7e 3c                	jle    c001d286 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d24a:	8b 34 9d 80 28 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd780]
c001d251:	31 ff                	xor    edi,edi
c001d253:	39 3c 9d 80 27 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcd880],edi
c001d25a:	7e 27                	jle    c001d283 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d25c:	50                   	push   eax
c001d25d:	50                   	push   eax
c001d25e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d262:	8b 06                	mov    eax,DWORD PTR [esi]
c001d264:	03 04 9d 00 28 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcd800]
c001d26b:	50                   	push   eax
c001d26c:	e8 27 36 fe ff       	call   c0000898 <strcmp>
c001d271:	83 c4 10             	add    esp,0x10
c001d274:	85 c0                	test   eax,eax
c001d276:	75 05                	jne    c001d27d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d278:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d27b:	eb 0b                	jmp    c001d288 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d27d:	83 c6 10             	add    esi,0x10
c001d280:	47                   	inc    edi
c001d281:	eb d0                	jmp    c001d253 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d283:	43                   	inc    ebx
c001d284:	eb bc                	jmp    c001d242 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d286:	31 c0                	xor    eax,eax
c001d288:	5b                   	pop    ebx
c001d289:	5e                   	pop    esi
c001d28a:	5f                   	pop    edi
c001d28b:	c3                   	ret    

c001d28c <Thr::loadKernelSymbolTable(char const*)>:
c001d28c:	55                   	push   ebp
c001d28d:	57                   	push   edi
c001d28e:	56                   	push   esi
c001d28f:	53                   	push   ebx
c001d290:	83 ec 68             	sub    esp,0x68
c001d293:	8b 35 50 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032950
c001d299:	68 14 01 00 00       	push   0x114
c001d29e:	e8 e9 25 ff ff       	call   c000f88c <malloc>
c001d2a3:	83 c4 0c             	add    esp,0xc
c001d2a6:	89 c3                	mov    ebx,eax
c001d2a8:	56                   	push   esi
c001d2a9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d2ad:	50                   	push   eax
c001d2ae:	e8 93 60 ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001d2b3:	5e                   	pop    esi
c001d2b4:	5f                   	pop    edi
c001d2b5:	6a 01                	push   0x1
c001d2b7:	53                   	push   ebx
c001d2b8:	e8 ed 60 ff ff       	call   c00133aa <File::open(FileOpenMode)>
c001d2bd:	83 c4 10             	add    esp,0x10
c001d2c0:	85 c0                	test   eax,eax
c001d2c2:	74 0a                	je     c001d2ce <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d2c4:	83 ec 0c             	sub    esp,0xc
c001d2c7:	68 78 cf 02 c0       	push   0xc002cf78
c001d2cc:	eb 34                	jmp    c001d302 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d2ce:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d2d6:	83 ec 0c             	sub    esp,0xc
c001d2d9:	6a 34                	push   0x34
c001d2db:	e8 ac 25 ff ff       	call   c000f88c <malloc>
c001d2e0:	59                   	pop    ecx
c001d2e1:	89 c7                	mov    edi,eax
c001d2e3:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d2e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d2e9:	56                   	push   esi
c001d2ea:	57                   	push   edi
c001d2eb:	6a 00                	push   0x0
c001d2ed:	6a 34                	push   0x34
c001d2ef:	53                   	push   ebx
c001d2f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2f3:	83 c4 20             	add    esp,0x20
c001d2f6:	85 c0                	test   eax,eax
c001d2f8:	74 17                	je     c001d311 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d2fa:	83 ec 0c             	sub    esp,0xc
c001d2fd:	68 8f cf 02 c0       	push   0xc002cf8f
c001d302:	e8 28 d6 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001d307:	83 c4 10             	add    esp,0x10
c001d30a:	31 c0                	xor    eax,eax
c001d30c:	e9 31 02 00 00       	jmp    c001d542 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d311:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d317:	75 e1                	jne    c001d2fa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d319:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d31c:	85 c0                	test   eax,eax
c001d31e:	74 da                	je     c001d2fa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d320:	52                   	push   edx
c001d321:	31 d2                	xor    edx,edx
c001d323:	52                   	push   edx
c001d324:	50                   	push   eax
c001d325:	53                   	push   ebx
c001d326:	e8 3d 61 ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d32b:	83 c4 10             	add    esp,0x10
c001d32e:	85 c0                	test   eax,eax
c001d330:	75 c8                	jne    c001d2fa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d332:	83 ec 0c             	sub    esp,0xc
c001d335:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d339:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d33d:	31 ed                	xor    ebp,ebp
c001d33f:	0f af c2             	imul   eax,edx
c001d342:	50                   	push   eax
c001d343:	e8 44 25 ff ff       	call   c000f88c <malloc>
c001d348:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d34a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d34e:	89 34 24             	mov    DWORD PTR [esp],esi
c001d351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d355:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d359:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d35d:	0f af c2             	imul   eax,edx
c001d360:	99                   	cdq    
c001d361:	52                   	push   edx
c001d362:	50                   	push   eax
c001d363:	53                   	push   ebx
c001d364:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d367:	83 c4 20             	add    esp,0x20
c001d36a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d372:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d37a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d382:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d38a:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d38e:	0f 86 aa 00 00 00    	jbe    c001d43e <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d394:	0f b7 f5             	movzx  esi,bp
c001d397:	6b f6 28             	imul   esi,esi,0x28
c001d39a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d39e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d3a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3a5:	50                   	push   eax
c001d3a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d3aa:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d3ae:	8b 16                	mov    edx,DWORD PTR [esi]
c001d3b0:	6b c0 28             	imul   eax,eax,0x28
c001d3b3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d3b7:	89 d0                	mov    eax,edx
c001d3b9:	31 d2                	xor    edx,edx
c001d3bb:	52                   	push   edx
c001d3bc:	50                   	push   eax
c001d3bd:	53                   	push   ebx
c001d3be:	e8 a5 60 ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d3c3:	83 c4 0c             	add    esp,0xc
c001d3c6:	6a 20                	push   0x20
c001d3c8:	6a 00                	push   0x0
c001d3ca:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d3ce:	52                   	push   edx
c001d3cf:	e8 7c 33 fe ff       	call   c0000750 <memset>
c001d3d4:	58                   	pop    eax
c001d3d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3d7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d3db:	51                   	push   ecx
c001d3dc:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d3e0:	52                   	push   edx
c001d3e1:	6a 00                	push   0x0
c001d3e3:	6a 1f                	push   0x1f
c001d3e5:	53                   	push   ebx
c001d3e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d3e9:	83 c4 18             	add    esp,0x18
c001d3ec:	68 a6 cf 02 c0       	push   0xc002cfa6
c001d3f1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d3f5:	52                   	push   edx
c001d3f6:	e8 9d 34 fe ff       	call   c0000898 <strcmp>
c001d3fb:	83 c4 10             	add    esp,0x10
c001d3fe:	85 c0                	test   eax,eax
c001d400:	75 0f                	jne    c001d411 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d402:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d405:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d409:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d40d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d411:	50                   	push   eax
c001d412:	50                   	push   eax
c001d413:	68 ae cf 02 c0       	push   0xc002cfae
c001d418:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d41c:	50                   	push   eax
c001d41d:	e8 76 34 fe ff       	call   c0000898 <strcmp>
c001d422:	83 c4 10             	add    esp,0x10
c001d425:	85 c0                	test   eax,eax
c001d427:	75 0f                	jne    c001d438 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d429:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d42c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d430:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d434:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d438:	45                   	inc    ebp
c001d439:	e9 4c ff ff ff       	jmp    c001d38a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d43e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d443:	75 10                	jne    c001d455 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d445:	83 ec 0c             	sub    esp,0xc
c001d448:	68 b6 cf 02 c0       	push   0xc002cfb6
c001d44d:	e8 dd d4 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001d452:	83 c4 10             	add    esp,0x10
c001d455:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d45a:	75 10                	jne    c001d46c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d45c:	83 ec 0c             	sub    esp,0xc
c001d45f:	68 b6 cf 02 c0       	push   0xc002cfb6
c001d464:	e8 c6 d4 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001d469:	83 c4 10             	add    esp,0x10
c001d46c:	31 d2                	xor    edx,edx
c001d46e:	50                   	push   eax
c001d46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d473:	52                   	push   edx
c001d474:	50                   	push   eax
c001d475:	53                   	push   ebx
c001d476:	e8 ed 5f ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d47b:	5a                   	pop    edx
c001d47c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d480:	e8 07 24 ff ff       	call   c000f88c <malloc>
c001d485:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d489:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d48d:	31 c9                	xor    ecx,ecx
c001d48f:	5e                   	pop    esi
c001d490:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d492:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d496:	55                   	push   ebp
c001d497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d49b:	51                   	push   ecx
c001d49c:	52                   	push   edx
c001d49d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d4a1:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d4a5:	53                   	push   ebx
c001d4a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d4a9:	83 c4 14             	add    esp,0x14
c001d4ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d4b0:	e8 d7 23 ff ff       	call   c000f88c <malloc>
c001d4b5:	89 c6                	mov    esi,eax
c001d4b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4bc:	56                   	push   esi
c001d4bd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d4c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d4c5:	51                   	push   ecx
c001d4c6:	52                   	push   edx
c001d4c7:	53                   	push   ebx
c001d4c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d4cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4cf:	8b 15 00 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032900
c001d4d5:	83 c4 1c             	add    esp,0x1c
c001d4d8:	c1 e8 04             	shr    eax,0x4
c001d4db:	89 04 95 80 27 03 c0 	mov    DWORD PTR [edx*4-0x3ffcd880],eax
c001d4e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4e6:	31 d2                	xor    edx,edx
c001d4e8:	52                   	push   edx
c001d4e9:	50                   	push   eax
c001d4ea:	53                   	push   ebx
c001d4eb:	e8 78 5f ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d4f0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d4f2:	31 d2                	xor    edx,edx
c001d4f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4f7:	56                   	push   esi
c001d4f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4fc:	52                   	push   edx
c001d4fd:	50                   	push   eax
c001d4fe:	53                   	push   ebx
c001d4ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d502:	83 c4 14             	add    esp,0x14
c001d505:	53                   	push   ebx
c001d506:	e8 fd 5e ff ff       	call   c0013408 <File::close()>
c001d50b:	5d                   	pop    ebp
c001d50c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d510:	e8 87 23 ff ff       	call   c000f89c <free>
c001d515:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d518:	e8 7f 23 ff ff       	call   c000f89c <free>
c001d51d:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c001d522:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d526:	8d 50 01             	lea    edx,[eax+0x1]
c001d529:	89 0c 85 80 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd780],ecx
c001d530:	89 34 85 00 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd800],esi
c001d537:	89 15 00 29 03 c0    	mov    DWORD PTR ds:0xc0032900,edx
c001d53d:	83 c4 10             	add    esp,0x10
c001d540:	b0 01                	mov    al,0x1
c001d542:	83 c4 5c             	add    esp,0x5c
c001d545:	5b                   	pop    ebx
c001d546:	5e                   	pop    esi
c001d547:	5f                   	pop    edi
c001d548:	5d                   	pop    ebp
c001d549:	c3                   	ret    

c001d54a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d54a:	55                   	push   ebp
c001d54b:	57                   	push   edi
c001d54c:	56                   	push   esi
c001d54d:	53                   	push   ebx
c001d54e:	81 ec 68 03 00 00    	sub    esp,0x368
c001d554:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d55b:	8b 1d 50 29 03 c0    	mov    ebx,DWORD PTR ds:0xc0032950
c001d561:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d565:	68 14 01 00 00       	push   0x114
c001d56a:	e8 1d 23 ff ff       	call   c000f88c <malloc>
c001d56f:	83 c4 0c             	add    esp,0xc
c001d572:	89 c5                	mov    ebp,eax
c001d574:	53                   	push   ebx
c001d575:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d57c:	50                   	push   eax
c001d57d:	e8 c4 5d ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001d582:	5e                   	pop    esi
c001d583:	5f                   	pop    edi
c001d584:	6a 01                	push   0x1
c001d586:	55                   	push   ebp
c001d587:	e8 1e 5e ff ff       	call   c00133aa <File::open(FileOpenMode)>
c001d58c:	83 c4 10             	add    esp,0x10
c001d58f:	85 c0                	test   eax,eax
c001d591:	0f 85 a7 06 00 00    	jne    c001dc3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d597:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d59f:	83 ec 0c             	sub    esp,0xc
c001d5a2:	6a 34                	push   0x34
c001d5a4:	e8 e3 22 ff ff       	call   c000f88c <malloc>
c001d5a9:	5b                   	pop    ebx
c001d5aa:	89 c7                	mov    edi,eax
c001d5ac:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d5b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5b3:	53                   	push   ebx
c001d5b4:	57                   	push   edi
c001d5b5:	6a 00                	push   0x0
c001d5b7:	6a 34                	push   0x34
c001d5b9:	55                   	push   ebp
c001d5ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d5bd:	83 c4 20             	add    esp,0x20
c001d5c0:	85 c0                	test   eax,eax
c001d5c2:	0f 85 76 06 00 00    	jne    c001dc3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5c8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d5ce:	0f 85 6a 06 00 00    	jne    c001dc3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5d4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d5d7:	85 c0                	test   eax,eax
c001d5d9:	0f 84 5f 06 00 00    	je     c001dc3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5df:	31 d2                	xor    edx,edx
c001d5e1:	51                   	push   ecx
c001d5e2:	52                   	push   edx
c001d5e3:	50                   	push   eax
c001d5e4:	55                   	push   ebp
c001d5e5:	e8 7e 5e ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d5ea:	83 c4 10             	add    esp,0x10
c001d5ed:	85 c0                	test   eax,eax
c001d5ef:	0f 85 49 06 00 00    	jne    c001dc3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5f5:	83 ec 0c             	sub    esp,0xc
c001d5f8:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d5fb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d5ff:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d603:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d607:	0f af c2             	imul   eax,edx
c001d60a:	50                   	push   eax
c001d60b:	e8 7c 22 ff ff       	call   c000f88c <malloc>
c001d610:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d613:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d61a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d61e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d622:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d626:	0f af c2             	imul   eax,edx
c001d629:	99                   	cdq    
c001d62a:	52                   	push   edx
c001d62b:	50                   	push   eax
c001d62c:	55                   	push   ebp
c001d62d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d630:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d633:	83 c4 20             	add    esp,0x20
c001d636:	85 c0                	test   eax,eax
c001d638:	0f 84 00 06 00 00    	je     c001dc3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d63e:	52                   	push   edx
c001d63f:	31 d2                	xor    edx,edx
c001d641:	52                   	push   edx
c001d642:	50                   	push   eax
c001d643:	55                   	push   ebp
c001d644:	e8 1f 5e ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d649:	83 c4 10             	add    esp,0x10
c001d64c:	85 c0                	test   eax,eax
c001d64e:	0f 85 ea 05 00 00    	jne    c001dc3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d654:	83 ec 0c             	sub    esp,0xc
c001d657:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d65b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d65f:	31 f6                	xor    esi,esi
c001d661:	0f af c2             	imul   eax,edx
c001d664:	50                   	push   eax
c001d665:	e8 22 22 ff ff       	call   c000f88c <malloc>
c001d66a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d66d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d671:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d674:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d678:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d67c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d680:	0f af c2             	imul   eax,edx
c001d683:	99                   	cdq    
c001d684:	52                   	push   edx
c001d685:	50                   	push   eax
c001d686:	55                   	push   ebp
c001d687:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d68a:	83 c4 20             	add    esp,0x20
c001d68d:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d691:	0f 86 8a 00 00 00    	jbe    c001d721 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d697:	0f b7 de             	movzx  ebx,si
c001d69a:	c1 e3 05             	shl    ebx,0x5
c001d69d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d6a1:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d6a4:	75 75                	jne    c001d71b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d6a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d6a9:	31 d2                	xor    edx,edx
c001d6ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d6b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6b6:	50                   	push   eax
c001d6b7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d6ba:	52                   	push   edx
c001d6bb:	50                   	push   eax
c001d6bc:	55                   	push   ebp
c001d6bd:	e8 a6 5d ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d6c2:	83 c4 10             	add    esp,0x10
c001d6c5:	85 c0                	test   eax,eax
c001d6c7:	0f 85 71 05 00 00    	jne    c001dc3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d6cd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d6d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6d7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d6db:	31 d2                	xor    edx,edx
c001d6dd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d6e1:	83 ec 0c             	sub    esp,0xc
c001d6e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6e8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d6ef:	50                   	push   eax
c001d6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6f8:	52                   	push   edx
c001d6f9:	50                   	push   eax
c001d6fa:	55                   	push   ebp
c001d6fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6fe:	83 c4 1c             	add    esp,0x1c
c001d701:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d704:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d707:	50                   	push   eax
c001d708:	6a 00                	push   0x0
c001d70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d70e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d712:	50                   	push   eax
c001d713:	e8 38 30 fe ff       	call   c0000750 <memset>
c001d718:	83 c4 10             	add    esp,0x10
c001d71b:	46                   	inc    esi
c001d71c:	e9 6c ff ff ff       	jmp    c001d68d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d721:	53                   	push   ebx
c001d722:	31 db                	xor    ebx,ebx
c001d724:	68 00 01 00 00       	push   0x100
c001d729:	6a 00                	push   0x0
c001d72b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d72f:	50                   	push   eax
c001d730:	e8 1b 30 fe ff       	call   c0000750 <memset>
c001d735:	83 c4 0c             	add    esp,0xc
c001d738:	68 00 01 00 00       	push   0x100
c001d73d:	6a 00                	push   0x0
c001d73f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d746:	50                   	push   eax
c001d747:	e8 04 30 fe ff       	call   c0000750 <memset>
c001d74c:	83 c4 10             	add    esp,0x10
c001d74f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d757:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d75f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d767:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d76f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d777:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d77b:	0f 86 30 01 00 00    	jbe    c001d8b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d781:	0f b7 f3             	movzx  esi,bx
c001d784:	6b f6 28             	imul   esi,esi,0x28
c001d787:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d78b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d78e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d792:	52                   	push   edx
c001d793:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d797:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d79b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d79d:	6b d2 28             	imul   edx,edx,0x28
c001d7a0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d7a4:	31 d2                	xor    edx,edx
c001d7a6:	52                   	push   edx
c001d7a7:	50                   	push   eax
c001d7a8:	55                   	push   ebp
c001d7a9:	e8 ba 5c ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d7ae:	83 c4 0c             	add    esp,0xc
c001d7b1:	6a 20                	push   0x20
c001d7b3:	6a 00                	push   0x0
c001d7b5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d7bc:	51                   	push   ecx
c001d7bd:	e8 8e 2f fe ff       	call   c0000750 <memset>
c001d7c2:	59                   	pop    ecx
c001d7c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d7c6:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d7ca:	52                   	push   edx
c001d7cb:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d7d2:	51                   	push   ecx
c001d7d3:	6a 00                	push   0x0
c001d7d5:	6a 1f                	push   0x1f
c001d7d7:	55                   	push   ebp
c001d7d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d7db:	83 c4 1c             	add    esp,0x1c
c001d7de:	6a 09                	push   0x9
c001d7e0:	68 d0 cf 02 c0       	push   0xc002cfd0
c001d7e5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d7ec:	51                   	push   ecx
c001d7ed:	e8 5a 2e fe ff       	call   c000064c <memcmp>
c001d7f2:	83 c4 10             	add    esp,0x10
c001d7f5:	85 c0                	test   eax,eax
c001d7f7:	75 21                	jne    c001d81a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d7f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d801:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d805:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d809:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d80c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d813:	89 d0                	mov    eax,edx
c001d815:	40                   	inc    eax
c001d816:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d81a:	50                   	push   eax
c001d81b:	6a 09                	push   0x9
c001d81d:	68 da cf 02 c0       	push   0xc002cfda
c001d822:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d829:	50                   	push   eax
c001d82a:	e8 1d 2e fe ff       	call   c000064c <memcmp>
c001d82f:	83 c4 10             	add    esp,0x10
c001d832:	85 c0                	test   eax,eax
c001d834:	75 21                	jne    c001d857 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d83a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d83e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d842:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d846:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d849:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d850:	89 d0                	mov    eax,edx
c001d852:	40                   	inc    eax
c001d853:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d857:	50                   	push   eax
c001d858:	50                   	push   eax
c001d859:	68 a6 cf 02 c0       	push   0xc002cfa6
c001d85e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d865:	50                   	push   eax
c001d866:	e8 2d 30 fe ff       	call   c0000898 <strcmp>
c001d86b:	83 c4 10             	add    esp,0x10
c001d86e:	85 c0                	test   eax,eax
c001d870:	75 0f                	jne    c001d881 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d872:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d875:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d87d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d881:	50                   	push   eax
c001d882:	50                   	push   eax
c001d883:	68 ae cf 02 c0       	push   0xc002cfae
c001d888:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d88f:	50                   	push   eax
c001d890:	e8 03 30 fe ff       	call   c0000898 <strcmp>
c001d895:	83 c4 10             	add    esp,0x10
c001d898:	85 c0                	test   eax,eax
c001d89a:	75 0f                	jne    c001d8ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d89c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d89f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d8a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d8ab:	43                   	inc    ebx
c001d8ac:	e9 c6 fe ff ff       	jmp    c001d777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d8b1:	31 d2                	xor    edx,edx
c001d8b3:	50                   	push   eax
c001d8b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8b8:	52                   	push   edx
c001d8b9:	50                   	push   eax
c001d8ba:	55                   	push   ebp
c001d8bb:	e8 a8 5b ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d8c0:	58                   	pop    eax
c001d8c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d8c5:	e8 c2 1f ff ff       	call   c000f88c <malloc>
c001d8ca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d8cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d8d1:	31 d2                	xor    edx,edx
c001d8d3:	58                   	pop    eax
c001d8d4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d8d8:	53                   	push   ebx
c001d8d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d8dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8e1:	52                   	push   edx
c001d8e2:	50                   	push   eax
c001d8e3:	55                   	push   ebp
c001d8e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d8e7:	83 c4 14             	add    esp,0x14
c001d8ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8ee:	e8 99 1f ff ff       	call   c000f88c <malloc>
c001d8f3:	31 d2                	xor    edx,edx
c001d8f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d8f9:	83 c4 0c             	add    esp,0xc
c001d8fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d900:	52                   	push   edx
c001d901:	50                   	push   eax
c001d902:	55                   	push   ebp
c001d903:	e8 60 5b ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d908:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d90b:	31 d2                	xor    edx,edx
c001d90d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d910:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d914:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d918:	52                   	push   edx
c001d919:	50                   	push   eax
c001d91a:	55                   	push   ebp
c001d91b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d91e:	83 c4 20             	add    esp,0x20
c001d921:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d929:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d92d:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d931:	0f 84 0b 03 00 00    	je     c001dc42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d937:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d93e:	31 d2                	xor    edx,edx
c001d940:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d944:	c1 e8 03             	shr    eax,0x3
c001d947:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d94b:	51                   	push   ecx
c001d94c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d950:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d954:	52                   	push   edx
c001d955:	50                   	push   eax
c001d956:	55                   	push   ebp
c001d957:	e8 0c 5b ff ff       	call   c0013468 <File::seek(unsigned long long)>
c001d95c:	5b                   	pop    ebx
c001d95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d961:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d968:	e8 1f 1f ff ff       	call   c000f88c <malloc>
c001d96d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d970:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d974:	31 d2                	xor    edx,edx
c001d976:	5e                   	pop    esi
c001d977:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d97b:	50                   	push   eax
c001d97c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d980:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d984:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d98b:	52                   	push   edx
c001d98c:	50                   	push   eax
c001d98d:	55                   	push   ebp
c001d98e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d991:	83 c4 20             	add    esp,0x20
c001d994:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d99c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d9a0:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d9a4:	0f 8d 7c 02 00 00    	jge    c001dc26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d9aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9b2:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d9b7:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d9ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d9be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9c2:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d9c6:	89 d8                	mov    eax,ebx
c001d9c8:	c1 e8 08             	shr    eax,0x8
c001d9cb:	89 c6                	mov    esi,eax
c001d9cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d9d1:	c1 e6 04             	shl    esi,0x4
c001d9d4:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d9d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d9db:	85 d2                	test   edx,edx
c001d9dd:	0f 85 bf 00 00 00    	jne    c001daa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d9e3:	83 ec 0c             	sub    esp,0xc
c001d9e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9ea:	03 06                	add    eax,DWORD PTR [esi]
c001d9ec:	50                   	push   eax
c001d9ed:	e8 4b f8 ff ff       	call   c001d23d <Thr::getAddressOfKernelSymbol(char const*)>
c001d9f2:	83 c4 10             	add    esp,0x10
c001d9f5:	89 c2                	mov    edx,eax
c001d9f7:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d9fc:	85 c0                	test   eax,eax
c001d9fe:	0f 85 9e 00 00 00    	jne    c001daa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001da04:	83 ec 0c             	sub    esp,0xc
c001da07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da0b:	03 06                	add    eax,DWORD PTR [esi]
c001da0d:	50                   	push   eax
c001da0e:	e8 2c 0b ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001da13:	83 c4 10             	add    esp,0x10
c001da16:	89 c2                	mov    edx,eax
c001da18:	85 c0                	test   eax,eax
c001da1a:	0f 85 82 00 00 00    	jne    c001daa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001da20:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001da24:	50                   	push   eax
c001da25:	50                   	push   eax
c001da26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da2a:	03 06                	add    eax,DWORD PTR [esi]
c001da2c:	50                   	push   eax
c001da2d:	68 e4 cf 02 c0       	push   0xc002cfe4
c001da32:	e8 b0 53 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001da37:	58                   	pop    eax
c001da38:	5a                   	pop    edx
c001da39:	68 fe cf 02 c0       	push   0xc002cffe
c001da3e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da45:	50                   	push   eax
c001da46:	e8 c1 2d fe ff       	call   c000080c <strcpy>
c001da4b:	59                   	pop    ecx
c001da4c:	58                   	pop    eax
c001da4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da51:	03 06                	add    eax,DWORD PTR [esi]
c001da53:	50                   	push   eax
c001da54:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da5b:	50                   	push   eax
c001da5c:	e8 eb 2e fe ff       	call   c000094c <strcat>
c001da61:	58                   	pop    eax
c001da62:	5a                   	pop    edx
c001da63:	68 94 d0 02 c0       	push   0xc002d094
c001da68:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da6f:	50                   	push   eax
c001da70:	e8 d7 2e fe ff       	call   c000094c <strcat>
c001da75:	83 c4 10             	add    esp,0x10
c001da78:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001da7d:	0f 84 5d 01 00 00    	je     c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001da83:	83 ec 0c             	sub    esp,0xc
c001da86:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da8d:	50                   	push   eax
c001da8e:	e8 9c ce ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001da93:	83 c4 10             	add    esp,0x10
c001da96:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001da9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001da9e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001daa2:	80 fb 01             	cmp    bl,0x1
c001daa5:	0f 85 88 00 00 00    	jne    c001db33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001daab:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001dab2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dab6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001daba:	01 ce                	add    esi,ecx
c001dabc:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001dac2:	0f 94 c0             	sete   al
c001dac5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001dacb:	0f 94 c3             	sete   bl
c001dace:	09 c3                	or     ebx,eax
c001dad0:	8b 06                	mov    eax,DWORD PTR [esi]
c001dad2:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001dad7:	74 41                	je     c001db1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001dad9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001dadc:	84 db                	test   bl,bl
c001dade:	75 15                	jne    c001daf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001dae0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001dae4:	66 83 f8 0c          	cmp    ax,0xc
c001dae8:	76 05                	jbe    c001daef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001daea:	b8 0c 00 00 00       	mov    eax,0xc
c001daef:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001daf3:	76 37                	jbe    c001db2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001daf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001daf9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dafe:	0f 84 dc 00 00 00    	je     c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db04:	83 ec 0c             	sub    esp,0xc
c001db07:	68 15 d0 02 c0       	push   0xc002d015
c001db0c:	e8 1e ce ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001db11:	83 c4 10             	add    esp,0x10
c001db14:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001db18:	eb 12                	jmp    c001db2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db1a:	01 c1                	add    ecx,eax
c001db1c:	84 db                	test   bl,bl
c001db1e:	75 0c                	jne    c001db2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db20:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001db24:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001db28:	77 02                	ja     c001db2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001db2a:	01 d1                	add    ecx,edx
c001db2c:	89 0e                	mov    DWORD PTR [esi],ecx
c001db2e:	e9 ea 00 00 00       	jmp    c001dc1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db33:	80 fb 02             	cmp    bl,0x2
c001db36:	75 7c                	jne    c001dbb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001db38:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001db3f:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001db43:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001db47:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001db4d:	74 20                	je     c001db6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001db4f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001db55:	74 18                	je     c001db6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001db57:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001db5b:	b9 0a 00 00 00       	mov    ecx,0xa
c001db60:	66 83 f8 0e          	cmp    ax,0xe
c001db64:	77 03                	ja     c001db69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001db66:	8d 48 fc             	lea    ecx,[eax-0x4]
c001db69:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001db6d:	76 1f                	jbe    c001db8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001db6f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001db73:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db78:	74 66                	je     c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db7a:	83 ec 0c             	sub    esp,0xc
c001db7d:	68 31 d0 02 c0       	push   0xc002d031
c001db82:	e8 a8 cd ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001db87:	83 c4 10             	add    esp,0x10
c001db8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db8e:	8b 06                	mov    eax,DWORD PTR [esi]
c001db90:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001db95:	74 13                	je     c001dbaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001db97:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db9b:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001dba2:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001dba6:	01 c8                	add    eax,ecx
c001dba8:	eb 04                	jmp    c001dbae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001dbaa:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001dbae:	01 c2                	add    edx,eax
c001dbb0:	89 16                	mov    DWORD PTR [esi],edx
c001dbb2:	eb 69                	jmp    c001dc1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dbb4:	0f b6 db             	movzx  ebx,bl
c001dbb7:	50                   	push   eax
c001dbb8:	50                   	push   eax
c001dbb9:	53                   	push   ebx
c001dbba:	68 4d d0 02 c0       	push   0xc002d04d
c001dbbf:	e8 23 52 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001dbc4:	83 c4 10             	add    esp,0x10
c001dbc7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dbcc:	74 12                	je     c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001dbce:	83 ec 0c             	sub    esp,0xc
c001dbd1:	68 58 d0 02 c0       	push   0xc002d058
c001dbd6:	e8 54 cd ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001dbdb:	83 c4 10             	add    esp,0x10
c001dbde:	eb 3d                	jmp    c001dc1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dbe0:	83 ec 0c             	sub    esp,0xc
c001dbe3:	55                   	push   ebp
c001dbe4:	e8 1f 58 ff ff       	call   c0013408 <File::close()>
c001dbe9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dbec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dbef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dbf2:	59                   	pop    ecx
c001dbf3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbf7:	e8 a0 1c ff ff       	call   c000f89c <free>
c001dbfc:	5b                   	pop    ebx
c001dbfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc01:	e8 96 1c ff ff       	call   c000f89c <free>
c001dc06:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc09:	e8 8e 1c ff ff       	call   c000f89c <free>
c001dc0e:	5e                   	pop    esi
c001dc0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc13:	e8 84 1c ff ff       	call   c000f89c <free>
c001dc18:	83 c4 10             	add    esp,0x10
c001dc1b:	eb 21                	jmp    c001dc3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001dc1d:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001dc21:	e9 76 fd ff ff       	jmp    c001d99c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001dc26:	83 ec 0c             	sub    esp,0xc
c001dc29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dc2d:	e8 6a 1c ff ff       	call   c000f89c <free>
c001dc32:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001dc36:	83 c4 10             	add    esp,0x10
c001dc39:	e9 eb fc ff ff       	jmp    c001d929 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001dc3e:	31 c0                	xor    eax,eax
c001dc40:	eb 33                	jmp    c001dc75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001dc42:	83 ec 0c             	sub    esp,0xc
c001dc45:	55                   	push   ebp
c001dc46:	e8 bd 57 ff ff       	call   c0013408 <File::close()>
c001dc4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dc4e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dc51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dc54:	58                   	pop    eax
c001dc55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc59:	e8 3e 1c ff ff       	call   c000f89c <free>
c001dc5e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc61:	e8 36 1c ff ff       	call   c000f89c <free>
c001dc66:	5a                   	pop    edx
c001dc67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc6b:	e8 2c 1c ff ff       	call   c000f89c <free>
c001dc70:	83 c4 10             	add    esp,0x10
c001dc73:	b0 01                	mov    al,0x1
c001dc75:	81 c4 5c 03 00 00    	add    esp,0x35c
c001dc7b:	5b                   	pop    ebx
c001dc7c:	5e                   	pop    esi
c001dc7d:	5f                   	pop    edi
c001dc7e:	5d                   	pop    ebp
c001dc7f:	c3                   	ret    

c001dc80 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001dc80:	56                   	push   esi
c001dc81:	31 d2                	xor    edx,edx
c001dc83:	53                   	push   ebx
c001dc84:	8b 1d 60 21 03 c0    	mov    ebx,DWORD PTR ds:0xc0032160
c001dc8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc8e:	39 d3                	cmp    ebx,edx
c001dc90:	7e 1b                	jle    c001dcad <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001dc92:	8b 04 95 80 23 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdc80]
c001dc99:	39 c8                	cmp    eax,ecx
c001dc9b:	77 0d                	ja     c001dcaa <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001dc9d:	8b 34 95 80 21 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcde80]
c001dca4:	01 c6                	add    esi,eax
c001dca6:	39 ce                	cmp    esi,ecx
c001dca8:	77 05                	ja     c001dcaf <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001dcaa:	42                   	inc    edx
c001dcab:	eb e1                	jmp    c001dc8e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001dcad:	31 c0                	xor    eax,eax
c001dcaf:	5b                   	pop    ebx
c001dcb0:	5e                   	pop    esi
c001dcb1:	c3                   	ret    

c001dcb2 <Thr::getDriverNameFromAddress(unsigned long)>:
c001dcb2:	53                   	push   ebx
c001dcb3:	31 c0                	xor    eax,eax
c001dcb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dcb9:	8b 1d 60 21 03 c0    	mov    ebx,DWORD PTR ds:0xc0032160
c001dcbf:	39 c3                	cmp    ebx,eax
c001dcc1:	7e 22                	jle    c001dce5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001dcc3:	8b 14 85 80 23 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdc80]
c001dcca:	39 ca                	cmp    edx,ecx
c001dccc:	77 14                	ja     c001dce2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dcce:	03 14 85 80 21 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcde80]
c001dcd5:	39 ca                	cmp    edx,ecx
c001dcd7:	76 09                	jbe    c001dce2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dcd9:	8b 04 85 80 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda80]
c001dce0:	eb 05                	jmp    c001dce7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001dce2:	40                   	inc    eax
c001dce3:	eb da                	jmp    c001dcbf <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001dce5:	31 c0                	xor    eax,eax
c001dce7:	5b                   	pop    ebx
c001dce8:	c3                   	ret    

c001dce9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dce9:	53                   	push   ebx
c001dcea:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dcee:	53                   	push   ebx
c001dcef:	e8 8c ff ff ff       	call   c001dc80 <Thr::getDriverBaseFromAddress(unsigned long)>
c001dcf4:	5a                   	pop    edx
c001dcf5:	31 d2                	xor    edx,edx
c001dcf7:	85 c0                	test   eax,eax
c001dcf9:	74 04                	je     c001dcff <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dcfb:	89 da                	mov    edx,ebx
c001dcfd:	29 c2                	sub    edx,eax
c001dcff:	89 d0                	mov    eax,edx
c001dd01:	5b                   	pop    ebx
c001dd02:	c3                   	ret    

c001dd03 <Thr::loadDLL(char const*, bool)>:
c001dd03:	55                   	push   ebp
c001dd04:	57                   	push   edi
c001dd05:	56                   	push   esi
c001dd06:	53                   	push   ebx
c001dd07:	81 ec 34 01 00 00    	sub    esp,0x134
c001dd0d:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dd14:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dd1b:	56                   	push   esi
c001dd1c:	68 70 d0 02 c0       	push   0xc002d070
c001dd21:	e8 c1 50 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001dd26:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dd2d:	e8 5a 1b ff ff       	call   c000f88c <malloc>
c001dd32:	83 c4 0c             	add    esp,0xc
c001dd35:	89 c3                	mov    ebx,eax
c001dd37:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c001dd3d:	56                   	push   esi
c001dd3e:	50                   	push   eax
c001dd3f:	e8 02 56 ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001dd44:	83 c4 10             	add    esp,0x10
c001dd47:	85 db                	test   ebx,ebx
c001dd49:	75 3c                	jne    c001dd87 <Thr::loadDLL(char const*, bool)+0x84>
c001dd4b:	89 f8                	mov    eax,edi
c001dd4d:	84 c0                	test   al,al
c001dd4f:	0f 84 cc 01 00 00    	je     c001df21 <Thr::loadDLL(char const*, bool)+0x21e>
c001dd55:	55                   	push   ebp
c001dd56:	55                   	push   ebp
c001dd57:	68 81 d0 02 c0       	push   0xc002d081
c001dd5c:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dd60:	55                   	push   ebp
c001dd61:	e8 a6 2a fe ff       	call   c000080c <strcpy>
c001dd66:	58                   	pop    eax
c001dd67:	5a                   	pop    edx
c001dd68:	56                   	push   esi
c001dd69:	55                   	push   ebp
c001dd6a:	e8 dd 2b fe ff       	call   c000094c <strcat>
c001dd6f:	59                   	pop    ecx
c001dd70:	58                   	pop    eax
c001dd71:	68 94 d0 02 c0       	push   0xc002d094
c001dd76:	55                   	push   ebp
c001dd77:	e8 d0 2b fe ff       	call   c000094c <strcat>
c001dd7c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dd7f:	e8 ab cb ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001dd84:	83 c4 10             	add    esp,0x10
c001dd87:	51                   	push   ecx
c001dd88:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001dd8c:	50                   	push   eax
c001dd8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dd91:	50                   	push   eax
c001dd92:	53                   	push   ebx
c001dd93:	e8 be 58 ff ff       	call   c0013656 <File::stat(unsigned long long*, bool*)>
c001dd98:	83 c4 10             	add    esp,0x10
c001dd9b:	85 db                	test   ebx,ebx
c001dd9d:	74 0c                	je     c001ddab <Thr::loadDLL(char const*, bool)+0xa8>
c001dd9f:	83 ec 0c             	sub    esp,0xc
c001dda2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dda4:	53                   	push   ebx
c001dda5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dda8:	83 c4 10             	add    esp,0x10
c001ddab:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001ddb0:	75 0a                	jne    c001ddbc <Thr::loadDLL(char const*, bool)+0xb9>
c001ddb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ddb6:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001ddba:	75 3c                	jne    c001ddf8 <Thr::loadDLL(char const*, bool)+0xf5>
c001ddbc:	89 f8                	mov    eax,edi
c001ddbe:	84 c0                	test   al,al
c001ddc0:	0f 84 43 01 00 00    	je     c001df09 <Thr::loadDLL(char const*, bool)+0x206>
c001ddc6:	51                   	push   ecx
c001ddc7:	51                   	push   ecx
c001ddc8:	68 81 d0 02 c0       	push   0xc002d081
c001ddcd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001ddd1:	53                   	push   ebx
c001ddd2:	e8 35 2a fe ff       	call   c000080c <strcpy>
c001ddd7:	5d                   	pop    ebp
c001ddd8:	58                   	pop    eax
c001ddd9:	56                   	push   esi
c001ddda:	53                   	push   ebx
c001dddb:	e8 6c 2b fe ff       	call   c000094c <strcat>
c001dde0:	58                   	pop    eax
c001dde1:	5a                   	pop    edx
c001dde2:	68 94 d0 02 c0       	push   0xc002d094
c001dde7:	53                   	push   ebx
c001dde8:	e8 5f 2b fe ff       	call   c000094c <strcat>
c001dded:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ddf0:	e8 3a cb ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001ddf5:	83 c4 10             	add    esp,0x10
c001ddf8:	52                   	push   edx
c001ddf9:	6a 03                	push   0x3
c001ddfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001de03:	05 ff 0f 00 00       	add    eax,0xfff
c001de08:	83 d2 00             	adc    edx,0x0
c001de0b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001de0f:	50                   	push   eax
c001de10:	ff 35 70 f5 02 c0    	push   DWORD PTR ds:0xc002f570
c001de16:	e8 ff 44 ff ff       	call   c001231a <VAS::allocatePages(int, int)>
c001de1b:	59                   	pop    ecx
c001de1c:	89 c3                	mov    ebx,eax
c001de1e:	5d                   	pop    ebp
c001de1f:	50                   	push   eax
c001de20:	68 96 d0 02 c0       	push   0xc002d096
c001de25:	e8 bd 4f ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001de2a:	89 34 24             	mov    DWORD PTR [esp],esi
c001de2d:	e8 3a 29 fe ff       	call   c000076c <strlen>
c001de32:	8b 2d 60 21 03 c0    	mov    ebp,DWORD PTR ds:0xc0032160
c001de38:	40                   	inc    eax
c001de39:	89 04 24             	mov    DWORD PTR [esp],eax
c001de3c:	e8 4b 1a ff ff       	call   c000f88c <malloc>
c001de41:	89 04 ad 80 25 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcda80],eax
c001de48:	58                   	pop    eax
c001de49:	a1 60 21 03 c0       	mov    eax,ds:0xc0032160
c001de4e:	5a                   	pop    edx
c001de4f:	56                   	push   esi
c001de50:	ff 34 85 80 25 03 c0 	push   DWORD PTR [eax*4-0x3ffcda80]
c001de57:	e8 b0 29 fe ff       	call   c000080c <strcpy>
c001de5c:	a1 60 21 03 c0       	mov    eax,ds:0xc0032160
c001de61:	8d 50 01             	lea    edx,[eax+0x1]
c001de64:	89 1c 85 80 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc80],ebx
c001de6b:	89 15 60 21 03 c0    	mov    DWORD PTR ds:0xc0032160,edx
c001de71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de75:	83 c4 0c             	add    esp,0xc
c001de78:	89 14 85 80 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde80],edx
c001de7f:	6a 01                	push   0x1
c001de81:	53                   	push   ebx
c001de82:	56                   	push   esi
c001de83:	e8 c2 f6 ff ff       	call   c001d54a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001de88:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001de8c:	83 c4 10             	add    esp,0x10
c001de8f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001de94:	0f 85 83 00 00 00    	jne    c001df1d <Thr::loadDLL(char const*, bool)+0x21a>
c001de9a:	89 f8                	mov    eax,edi
c001de9c:	84 c0                	test   al,al
c001de9e:	74 6d                	je     c001df0d <Thr::loadDLL(char const*, bool)+0x20a>
c001dea0:	83 ec 0c             	sub    esp,0xc
c001dea3:	68 a3 d0 02 c0       	push   0xc002d0a3
c001dea8:	e8 82 ca ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001dead:	83 c4 10             	add    esp,0x10
c001deb0:	eb 5b                	jmp    c001df0d <Thr::loadDLL(char const*, bool)+0x20a>
c001deb2:	89 ee                	mov    esi,ebp
c001deb4:	50                   	push   eax
c001deb5:	c1 e6 0c             	shl    esi,0xc
c001deb8:	50                   	push   eax
c001deb9:	01 de                	add    esi,ebx
c001debb:	56                   	push   esi
c001debc:	ff 35 70 f5 02 c0    	push   DWORD PTR ds:0xc002f570
c001dec2:	e8 bb 3f ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c001dec7:	83 c4 10             	add    esp,0x10
c001deca:	f6 00 60             	test   BYTE PTR [eax],0x60
c001decd:	75 0c                	jne    c001dedb <Thr::loadDLL(char const*, bool)+0x1d8>
c001decf:	83 ec 0c             	sub    esp,0xc
c001ded2:	56                   	push   esi
c001ded3:	e8 47 1f ff ff       	call   c000fe1f <Phys::freePage(unsigned long)>
c001ded8:	83 c4 10             	add    esp,0x10
c001dedb:	45                   	inc    ebp
c001dedc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dee0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dee4:	05 ff 0f 00 00       	add    eax,0xfff
c001dee9:	bf 00 00 00 00       	mov    edi,0x0
c001deee:	83 d2 00             	adc    edx,0x0
c001def1:	0f ac d0 0c          	shrd   eax,edx,0xc
c001def5:	c1 ea 0c             	shr    edx,0xc
c001def8:	39 c5                	cmp    ebp,eax
c001defa:	89 d1                	mov    ecx,edx
c001defc:	89 f8                	mov    eax,edi
c001defe:	19 c8                	sbb    eax,ecx
c001df00:	72 b0                	jb     c001deb2 <Thr::loadDLL(char const*, bool)+0x1af>
c001df02:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001df07:	75 18                	jne    c001df21 <Thr::loadDLL(char const*, bool)+0x21e>
c001df09:	31 db                	xor    ebx,ebx
c001df0b:	eb 14                	jmp    c001df21 <Thr::loadDLL(char const*, bool)+0x21e>
c001df0d:	83 ec 0c             	sub    esp,0xc
c001df10:	68 c2 d0 02 c0       	push   0xc002d0c2
c001df15:	e8 15 ca ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001df1a:	83 c4 10             	add    esp,0x10
c001df1d:	31 ed                	xor    ebp,ebp
c001df1f:	eb bb                	jmp    c001dedc <Thr::loadDLL(char const*, bool)+0x1d9>
c001df21:	81 c4 2c 01 00 00    	add    esp,0x12c
c001df27:	89 d8                	mov    eax,ebx
c001df29:	5b                   	pop    ebx
c001df2a:	5e                   	pop    esi
c001df2b:	5f                   	pop    edi
c001df2c:	5d                   	pop    ebp
c001df2d:	c3                   	ret    

c001df2e <Thr::executeDLL(unsigned long, void*)>:
c001df2e:	56                   	push   esi
c001df2f:	53                   	push   ebx
c001df30:	52                   	push   edx
c001df31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001df39:	85 db                	test   ebx,ebx
c001df3b:	75 10                	jne    c001df4d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001df3d:	83 ec 0c             	sub    esp,0xc
c001df40:	68 de d0 02 c0       	push   0xc002d0de
c001df45:	e8 e5 c9 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001df4a:	83 c4 10             	add    esp,0x10
c001df4d:	50                   	push   eax
c001df4e:	50                   	push   eax
c001df4f:	53                   	push   ebx
c001df50:	68 08 d1 02 c0       	push   0xc002d108
c001df55:	e8 8d 4e ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001df5a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df5e:	89 d8                	mov    eax,ebx
c001df60:	83 c4 14             	add    esp,0x14
c001df63:	5b                   	pop    ebx
c001df64:	5e                   	pop    esi
c001df65:	ff e0                	jmp    eax
c001df67:	90                   	nop

c001df68 <userModeEntryPoint(void*)>:
c001df68:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001df6d:	48                   	dec    eax
c001df6e:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001df73:	75 01                	jne    c001df76 <userModeEntryPoint(void*)+0xe>
c001df75:	fb                   	sti    
c001df76:	fb                   	sti    
c001df77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df7c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001df7f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001df85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001df89:	e9 9c 23 fe ff       	jmp    c000032a <goToUsermode>

c001df8e <changeTSS>:
c001df8e:	83 ec 14             	sub    esp,0x14
c001df91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df96:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001df99:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001df9e:	c1 e2 15             	shl    edx,0x15
c001dfa1:	29 d0                	sub    eax,edx
c001dfa3:	50                   	push   eax
c001dfa4:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001dfa9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dfaf:	05 7c 11 00 00       	add    eax,0x117c
c001dfb4:	50                   	push   eax
c001dfb5:	e8 66 33 ff ff       	call   c0011320 <TSS::setESP(unsigned long)>
c001dfba:	83 c4 1c             	add    esp,0x1c
c001dfbd:	c3                   	ret    

c001dfbe <switchToThread(ThreadControlBlock*)>:
c001dfbe:	57                   	push   edi
c001dfbf:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001dfc4:	56                   	push   esi
c001dfc5:	85 c0                	test   eax,eax
c001dfc7:	53                   	push   ebx
c001dfc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfcc:	0f 85 88 00 00 00    	jne    c001e05a <switchToThread(ThreadControlBlock*)+0x9c>
c001dfd2:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dfd5:	3c ff                	cmp    al,0xff
c001dfd7:	74 7d                	je     c001e056 <switchToThread(ThreadControlBlock*)+0x98>
c001dfd9:	0f b6 d0             	movzx  edx,al
c001dfdc:	b8 84 03 00 00       	mov    eax,0x384
c001dfe1:	29 d0                	sub    eax,edx
c001dfe3:	c1 e0 10             	shl    eax,0x10
c001dfe6:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dfe9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dfec:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001dff1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dff7:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dffe:	74 4a                	je     c001e04a <switchToThread(ThreadControlBlock*)+0x8c>
c001e000:	0f 31                	rdtsc  
c001e002:	a3 68 29 03 c0       	mov    ds:0xc0032968,eax
c001e007:	89 c6                	mov    esi,eax
c001e009:	89 d7                	mov    edi,edx
c001e00b:	2b 35 58 29 03 c0    	sub    esi,DWORD PTR ds:0xc0032958
c001e011:	89 15 6c 29 03 c0    	mov    DWORD PTR ds:0xc003296c,edx
c001e017:	1b 3d 5c 29 03 c0    	sbb    edi,DWORD PTR ds:0xc003295c
c001e01d:	89 35 60 29 03 c0    	mov    DWORD PTR ds:0xc0032960,esi
c001e023:	a3 58 29 03 c0       	mov    ds:0xc0032958,eax
c001e028:	89 3d 64 29 03 c0    	mov    DWORD PTR ds:0xc0032964,edi
c001e02e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001e034:	89 15 5c 29 03 c0    	mov    DWORD PTR ds:0xc003295c,edx
c001e03a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001e03d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001e040:	01 c6                	add    esi,eax
c001e042:	11 d7                	adc    edi,edx
c001e044:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001e047:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001e04a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001e04e:	5b                   	pop    ebx
c001e04f:	5e                   	pop    esi
c001e050:	5f                   	pop    edi
c001e051:	e9 0c 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001e056:	31 c0                	xor    eax,eax
c001e058:	eb 8f                	jmp    c001dfe9 <switchToThread(ThreadControlBlock*)+0x2b>
c001e05a:	5b                   	pop    ebx
c001e05b:	c7 05 20 29 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x1
c001e065:	5e                   	pop    esi
c001e066:	5f                   	pop    edi
c001e067:	c3                   	ret    

c001e068 <Process::addArgs(char**)>:
c001e068:	57                   	push   edi
c001e069:	56                   	push   esi
c001e06a:	53                   	push   ebx
c001e06b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e06f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e073:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001e07d:	85 ff                	test   edi,edi
c001e07f:	74 3d                	je     c001e0be <Process::addArgs(char**)+0x56>
c001e081:	8b 07                	mov    eax,DWORD PTR [edi]
c001e083:	85 c0                	test   eax,eax
c001e085:	74 37                	je     c001e0be <Process::addArgs(char**)+0x56>
c001e087:	31 db                	xor    ebx,ebx
c001e089:	83 ec 0c             	sub    esp,0xc
c001e08c:	50                   	push   eax
c001e08d:	e8 da 26 fe ff       	call   c000076c <strlen>
c001e092:	40                   	inc    eax
c001e093:	89 04 24             	mov    DWORD PTR [esp],eax
c001e096:	e8 f1 17 ff ff       	call   c000f88c <malloc>
c001e09b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001e0a2:	5a                   	pop    edx
c001e0a3:	59                   	pop    ecx
c001e0a4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001e0a7:	43                   	inc    ebx
c001e0a8:	50                   	push   eax
c001e0a9:	e8 5e 27 fe ff       	call   c000080c <strcpy>
c001e0ae:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001e0b4:	83 c4 10             	add    esp,0x10
c001e0b7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e0ba:	85 c0                	test   eax,eax
c001e0bc:	75 cb                	jne    c001e089 <Process::addArgs(char**)+0x21>
c001e0be:	5b                   	pop    ebx
c001e0bf:	5e                   	pop    esi
c001e0c0:	5f                   	pop    edi
c001e0c1:	c3                   	ret    

c001e0c2 <Process::Process(char const*, Process*, char**)>:
c001e0c2:	56                   	push   esi
c001e0c3:	53                   	push   ebx
c001e0c4:	83 ec 14             	sub    esp,0x14
c001e0c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0cb:	05 0c 02 00 00       	add    eax,0x20c
c001e0d0:	bb 07 00 00 00       	mov    ebx,0x7
c001e0d5:	89 c6                	mov    esi,eax
c001e0d7:	85 db                	test   ebx,ebx
c001e0d9:	78 12                	js     c001e0ed <Process::Process(char const*, Process*, char**)+0x2b>
c001e0db:	83 ec 0c             	sub    esp,0xc
c001e0de:	56                   	push   esi
c001e0df:	e8 be b9 00 00       	call   c0029aa2 <ThreadControlBlock::ThreadControlBlock()>
c001e0e4:	83 c4 10             	add    esp,0x10
c001e0e7:	83 c6 63             	add    esi,0x63
c001e0ea:	4b                   	dec    ebx
c001e0eb:	eb ea                	jmp    c001e0d7 <Process::Process(char const*, Process*, char**)+0x15>
c001e0ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0f1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e0f8:	83 ec 0c             	sub    esp,0xc
c001e0fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0ff:	e8 84 c6 ff ff       	call   c001a788 <Krnl::newProcessEnv(Process*)>
c001e104:	83 c4 10             	add    esp,0x10
c001e107:	89 c2                	mov    edx,eax
c001e109:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e10d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e113:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e117:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e120:	a1 70 e9 02 c0       	mov    eax,ds:0xc002e970
c001e125:	8d 50 01             	lea    edx,[eax+0x1]
c001e128:	89 15 70 e9 02 c0    	mov    DWORD PTR ds:0xc002e970,edx
c001e12e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e132:	89 02                	mov    DWORD PTR [edx],eax
c001e134:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001e13c:	83 ec 0c             	sub    esp,0xc
c001e13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e143:	e8 44 17 ff ff       	call   c000f88c <malloc>
c001e148:	83 c4 10             	add    esp,0x10
c001e14b:	89 c3                	mov    ebx,eax
c001e14d:	83 ec 08             	sub    esp,0x8
c001e150:	6a 00                	push   0x0
c001e152:	53                   	push   ebx
c001e153:	e8 6a 45 ff ff       	call   c00126c2 <VAS::VAS(bool)>
c001e158:	83 c4 10             	add    esp,0x10
c001e15b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e15f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e169:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e177:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e17b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e185:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e18b:	85 c0                	test   eax,eax
c001e18d:	74 42                	je     c001e1d1 <Process::Process(char const*, Process*, char**)+0x10f>
c001e18f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e193:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e199:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e19f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1a3:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e1a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1ad:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e1b3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e1b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1bd:	05 0c 01 00 00       	add    eax,0x10c
c001e1c2:	83 ec 08             	sub    esp,0x8
c001e1c5:	52                   	push   edx
c001e1c6:	50                   	push   eax
c001e1c7:	e8 40 26 fe ff       	call   c000080c <strcpy>
c001e1cc:	83 c4 10             	add    esp,0x10
c001e1cf:	eb 63                	jmp    c001e234 <Process::Process(char const*, Process*, char**)+0x172>
c001e1d1:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e1d9:	83 ec 0c             	sub    esp,0xc
c001e1dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e1e0:	e8 a7 16 ff ff       	call   c000f88c <malloc>
c001e1e5:	83 c4 10             	add    esp,0x10
c001e1e8:	89 c3                	mov    ebx,eax
c001e1ea:	83 ec 08             	sub    esp,0x8
c001e1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1f1:	53                   	push   ebx
c001e1f2:	e8 0b 2e ff ff       	call   c0011002 <VgaText::VgaText(char const*)>
c001e1f7:	83 c4 10             	add    esp,0x10
c001e1fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1fe:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e208:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e20e:	83 ec 0c             	sub    esp,0xc
c001e211:	50                   	push   eax
c001e212:	e8 22 23 ff ff       	call   c0010539 <addToTerminalCycle(VgaText*)>
c001e217:	83 c4 10             	add    esp,0x10
c001e21a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e21e:	05 0c 01 00 00       	add    eax,0x10c
c001e223:	83 ec 08             	sub    esp,0x8
c001e226:	68 27 d1 02 c0       	push   0xc002d127
c001e22b:	50                   	push   eax
c001e22c:	e8 db 25 fe ff       	call   c000080c <strcpy>
c001e231:	83 c4 10             	add    esp,0x10
c001e234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e238:	83 c0 0c             	add    eax,0xc
c001e23b:	83 ec 08             	sub    esp,0x8
c001e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e242:	50                   	push   eax
c001e243:	e8 c4 25 fe ff       	call   c000080c <strcpy>
c001e248:	83 c4 10             	add    esp,0x10
c001e24b:	83 ec 08             	sub    esp,0x8
c001e24e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e252:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e256:	e8 0d fe ff ff       	call   c001e068 <Process::addArgs(char**)>
c001e25b:	83 c4 10             	add    esp,0x10
c001e25e:	83 ec 08             	sub    esp,0x8
c001e261:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e265:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e269:	e8 a6 ed ff ff       	call   c001d014 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e26e:	83 c4 10             	add    esp,0x10
c001e271:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e275:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e279:	83 f0 01             	xor    eax,0x1
c001e27c:	88 c2                	mov    dl,al
c001e27e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e282:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e288:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e28d:	83 ec 08             	sub    esp,0x8
c001e290:	50                   	push   eax
c001e291:	68 54 d2 02 c0       	push   0xc002d254
c001e296:	e8 4c 4b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001e29b:	83 c4 10             	add    esp,0x10
c001e29e:	90                   	nop
c001e29f:	83 c4 14             	add    esp,0x14
c001e2a2:	5b                   	pop    ebx
c001e2a3:	5e                   	pop    esi
c001e2a4:	c3                   	ret    
c001e2a5:	90                   	nop

c001e2a6 <Process::Process(bool, char const*, Process*, char**)>:
c001e2a6:	56                   	push   esi
c001e2a7:	53                   	push   ebx
c001e2a8:	83 ec 24             	sub    esp,0x24
c001e2ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e2af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e2b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2b7:	05 0c 02 00 00       	add    eax,0x20c
c001e2bc:	bb 07 00 00 00       	mov    ebx,0x7
c001e2c1:	89 c6                	mov    esi,eax
c001e2c3:	85 db                	test   ebx,ebx
c001e2c5:	78 12                	js     c001e2d9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e2c7:	83 ec 0c             	sub    esp,0xc
c001e2ca:	56                   	push   esi
c001e2cb:	e8 d2 b7 00 00       	call   c0029aa2 <ThreadControlBlock::ThreadControlBlock()>
c001e2d0:	83 c4 10             	add    esp,0x10
c001e2d3:	83 c6 63             	add    esi,0x63
c001e2d6:	4b                   	dec    ebx
c001e2d7:	eb ea                	jmp    c001e2c3 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e2d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2dd:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e2e4:	83 ec 0c             	sub    esp,0xc
c001e2e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e2eb:	e8 98 c4 ff ff       	call   c001a788 <Krnl::newProcessEnv(Process*)>
c001e2f0:	83 c4 10             	add    esp,0x10
c001e2f3:	89 c2                	mov    edx,eax
c001e2f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2f9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e2ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e303:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e30c:	a1 70 e9 02 c0       	mov    eax,ds:0xc002e970
c001e311:	8d 50 01             	lea    edx,[eax+0x1]
c001e314:	89 15 70 e9 02 c0    	mov    DWORD PTR ds:0xc002e970,edx
c001e31a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e31e:	89 02                	mov    DWORD PTR [edx],eax
c001e320:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e32f:	e8 58 15 ff ff       	call   c000f88c <malloc>
c001e334:	83 c4 10             	add    esp,0x10
c001e337:	89 c3                	mov    ebx,eax
c001e339:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e33e:	83 ec 08             	sub    esp,0x8
c001e341:	50                   	push   eax
c001e342:	53                   	push   ebx
c001e343:	e8 7a 43 ff ff       	call   c00126c2 <VAS::VAS(bool)>
c001e348:	83 c4 10             	add    esp,0x10
c001e34b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e34f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e355:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e359:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e363:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e367:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e36b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e371:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e375:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e37b:	85 c0                	test   eax,eax
c001e37d:	74 42                	je     c001e3c1 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e37f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e383:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e389:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e38f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e393:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e399:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e39d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e3a3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e3a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3ad:	05 0c 01 00 00       	add    eax,0x10c
c001e3b2:	83 ec 08             	sub    esp,0x8
c001e3b5:	52                   	push   edx
c001e3b6:	50                   	push   eax
c001e3b7:	e8 50 24 fe ff       	call   c000080c <strcpy>
c001e3bc:	83 c4 10             	add    esp,0x10
c001e3bf:	eb 63                	jmp    c001e424 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e3c1:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e3c9:	83 ec 0c             	sub    esp,0xc
c001e3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e3d0:	e8 b7 14 ff ff       	call   c000f88c <malloc>
c001e3d5:	83 c4 10             	add    esp,0x10
c001e3d8:	89 c3                	mov    ebx,eax
c001e3da:	83 ec 08             	sub    esp,0x8
c001e3dd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e3e1:	53                   	push   ebx
c001e3e2:	e8 1b 2c ff ff       	call   c0011002 <VgaText::VgaText(char const*)>
c001e3e7:	83 c4 10             	add    esp,0x10
c001e3ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3ee:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e3f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3f8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e3fe:	83 ec 0c             	sub    esp,0xc
c001e401:	50                   	push   eax
c001e402:	e8 32 21 ff ff       	call   c0010539 <addToTerminalCycle(VgaText*)>
c001e407:	83 c4 10             	add    esp,0x10
c001e40a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e40e:	05 0c 01 00 00       	add    eax,0x10c
c001e413:	83 ec 08             	sub    esp,0x8
c001e416:	68 27 d1 02 c0       	push   0xc002d127
c001e41b:	50                   	push   eax
c001e41c:	e8 eb 23 fe ff       	call   c000080c <strcpy>
c001e421:	83 c4 10             	add    esp,0x10
c001e424:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e428:	83 c0 0c             	add    eax,0xc
c001e42b:	83 ec 08             	sub    esp,0x8
c001e42e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e432:	50                   	push   eax
c001e433:	e8 d4 23 fe ff       	call   c000080c <strcpy>
c001e438:	83 c4 10             	add    esp,0x10
c001e43b:	83 ec 08             	sub    esp,0x8
c001e43e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e442:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e446:	e8 1d fc ff ff       	call   c001e068 <Process::addArgs(char**)>
c001e44b:	83 c4 10             	add    esp,0x10
c001e44e:	90                   	nop
c001e44f:	83 c4 24             	add    esp,0x24
c001e452:	5b                   	pop    ebx
c001e453:	5e                   	pop    esi
c001e454:	c3                   	ret    

c001e455 <taskStartupFunction>:
c001e455:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e45a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e45d:	c3                   	ret    

c001e45e <Semaphore::Semaphore(int)>:
c001e45e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e462:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e466:	89 10                	mov    DWORD PTR [eax],edx
c001e468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e46c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e473:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e477:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e482:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e489:	90                   	nop
c001e48a:	c3                   	ret    
c001e48b:	90                   	nop

c001e48c <Mutex::Mutex()>:
c001e48c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e490:	6a 01                	push   0x1
c001e492:	50                   	push   eax
c001e493:	e8 c6 ff ff ff       	call   c001e45e <Semaphore::Semaphore(int)>
c001e498:	83 c4 08             	add    esp,0x8
c001e49b:	90                   	nop
c001e49c:	c3                   	ret    
c001e49d:	90                   	nop

c001e49e <Process::createThread(void (*)(void*), void*, int)>:
c001e49e:	55                   	push   ebp
c001e49f:	31 c9                	xor    ecx,ecx
c001e4a1:	57                   	push   edi
c001e4a2:	56                   	push   esi
c001e4a3:	53                   	push   ebx
c001e4a4:	83 ec 1c             	sub    esp,0x1c
c001e4a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4ab:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e4b2:	89 f2                	mov    edx,esi
c001e4b4:	0f b7 c2             	movzx  eax,dx
c001e4b7:	83 e2 01             	and    edx,0x1
c001e4ba:	74 16                	je     c001e4d2 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e4bc:	d1 f8                	sar    eax,1
c001e4be:	41                   	inc    ecx
c001e4bf:	89 c2                	mov    edx,eax
c001e4c1:	83 f9 10             	cmp    ecx,0x10
c001e4c4:	75 ee                	jne    c001e4b4 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e4c6:	83 c4 1c             	add    esp,0x1c
c001e4c9:	31 db                	xor    ebx,ebx
c001e4cb:	89 d8                	mov    eax,ebx
c001e4cd:	5b                   	pop    ebx
c001e4ce:	5e                   	pop    esi
c001e4cf:	5f                   	pop    edi
c001e4d0:	5d                   	pop    ebp
c001e4d1:	c3                   	ret    
c001e4d2:	b8 01 00 00 00       	mov    eax,0x1
c001e4d7:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e4da:	d3 e0                	shl    eax,cl
c001e4dc:	09 c6                	or     esi,eax
c001e4de:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e4e1:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e4e8:	89 c6                	mov    esi,eax
c001e4ea:	c1 e6 05             	shl    esi,0x5
c001e4ed:	01 f0                	add    eax,esi
c001e4ef:	01 d8                	add    eax,ebx
c001e4f1:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e4f8:	75 0a                	jne    c001e504 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e4fa:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e504:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e50a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e50e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e511:	01 ca                	add    edx,ecx
c001e513:	83 ec 08             	sub    esp,0x8
c001e516:	89 d0                	mov    eax,edx
c001e518:	c1 e0 05             	shl    eax,0x5
c001e51b:	01 d0                	add    eax,edx
c001e51d:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e521:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e525:	01 d8                	add    eax,ebx
c001e527:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e52d:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e533:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e539:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e53f:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e545:	89 cd                	mov    ebp,ecx
c001e547:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e54b:	f7 dd                	neg    ebp
c001e54d:	c1 e5 15             	shl    ebp,0x15
c001e550:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e556:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e55c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e566:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e56c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e576:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e580:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e584:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e58b:	53                   	push   ebx
c001e58c:	68 44 29 03 c0       	push   0xc0032944
c001e591:	e8 c6 b2 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e596:	89 d8                	mov    eax,ebx
c001e598:	83 c4 10             	add    esp,0x10
c001e59b:	83 c4 1c             	add    esp,0x1c
c001e59e:	5b                   	pop    ebx
c001e59f:	5e                   	pop    esi
c001e5a0:	5f                   	pop    edi
c001e5a1:	5d                   	pop    ebp
c001e5a2:	c3                   	ret    
c001e5a3:	90                   	nop

c001e5a4 <Process::createUserThread()>:
c001e5a4:	83 ec 0c             	sub    esp,0xc
c001e5a7:	68 80 00 00 00       	push   0x80
c001e5ac:	6a 00                	push   0x0
c001e5ae:	68 68 df 01 c0       	push   0xc001df68
c001e5b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5b7:	e8 e2 fe ff ff       	call   c001e49e <Process::createThread(void (*)(void*), void*, int)>
c001e5bc:	83 c4 1c             	add    esp,0x1c
c001e5bf:	c3                   	ret    

c001e5c0 <setupMultitasking(void (*)())>:
c001e5c0:	56                   	push   esi
c001e5c1:	53                   	push   ebx
c001e5c2:	51                   	push   ecx
c001e5c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5c7:	eb 10                	jmp    c001e5d9 <setupMultitasking(void (*)())+0x19>
c001e5c9:	83 ec 0c             	sub    esp,0xc
c001e5cc:	68 44 29 03 c0       	push   0xc0032944
c001e5d1:	e8 d8 b1 00 00       	call   c00297ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5d6:	83 c4 10             	add    esp,0x10
c001e5d9:	83 ec 0c             	sub    esp,0xc
c001e5dc:	68 44 29 03 c0       	push   0xc0032944
c001e5e1:	e8 a4 b1 00 00       	call   c002978a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5e6:	83 c4 10             	add    esp,0x10
c001e5e9:	84 c0                	test   al,al
c001e5eb:	74 dc                	je     c001e5c9 <setupMultitasking(void (*)())+0x9>
c001e5ed:	83 ec 0c             	sub    esp,0xc
c001e5f0:	68 3f 07 00 00       	push   0x73f
c001e5f5:	e8 92 12 ff ff       	call   c000f88c <malloc>
c001e5fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e601:	89 c3                	mov    ebx,eax
c001e603:	6a 00                	push   0x0
c001e605:	68 2b d1 02 c0       	push   0xc002d12b
c001e60a:	6a 01                	push   0x1
c001e60c:	50                   	push   eax
c001e60d:	e8 94 fc ff ff       	call   c001e2a6 <Process::Process(bool, char const*, Process*, char**)>
c001e612:	83 c4 18             	add    esp,0x18
c001e615:	89 1d 50 29 03 c0    	mov    DWORD PTR ds:0xc0032950,ebx
c001e61b:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e621:	68 7c d2 02 c0       	push   0xc002d27c
c001e626:	e8 bc 47 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001e62b:	58                   	pop    eax
c001e62c:	5a                   	pop    edx
c001e62d:	6a 63                	push   0x63
c001e62f:	68 b0 d2 02 c0       	push   0xc002d2b0
c001e634:	e8 ae 47 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001e639:	59                   	pop    ecx
c001e63a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e640:	e8 c5 25 ff ff       	call   c0010c0a <setActiveTerminal(VgaText*)>
c001e645:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e64d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e657:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e65d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e660:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e66a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e670:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e676:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e680:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e68a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e694:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e69a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e6a4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e6aa:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e6b4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e6ba:	58                   	pop    eax
c001e6bb:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e6c1:	5a                   	pop    edx
c001e6c2:	68 27 d1 02 c0       	push   0xc002d127
c001e6c7:	50                   	push   eax
c001e6c8:	e8 3f 21 fe ff       	call   c000080c <strcpy>
c001e6cd:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e6d4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e6d8:	83 c4 14             	add    esp,0x14
c001e6db:	5b                   	pop    ebx
c001e6dc:	5e                   	pop    esi
c001e6dd:	e9 72 1c fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e6e2 <schedule()>:
c001e6e2:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001e6e7:	85 c0                	test   eax,eax
c001e6e9:	74 0b                	je     c001e6f6 <schedule()+0x14>
c001e6eb:	c7 05 20 29 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x1
c001e6f5:	c3                   	ret    
c001e6f6:	53                   	push   ebx
c001e6f7:	83 ec 14             	sub    esp,0x14
c001e6fa:	68 44 29 03 c0       	push   0xc0032944
c001e6ff:	e8 86 b0 00 00       	call   c002978a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e704:	83 c4 10             	add    esp,0x10
c001e707:	84 c0                	test   al,al
c001e709:	75 38                	jne    c001e743 <schedule()+0x61>
c001e70b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e710:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e713:	4a                   	dec    edx
c001e714:	74 32                	je     c001e748 <schedule()+0x66>
c001e716:	83 ec 0c             	sub    esp,0xc
c001e719:	68 44 29 03 c0       	push   0xc0032944
c001e71e:	e8 83 b0 00 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e723:	c7 04 24 44 29 03 c0 	mov    DWORD PTR [esp],0xc0032944
c001e72a:	89 c3                	mov    ebx,eax
c001e72c:	e8 7d b0 00 00       	call   c00297ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e731:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e738:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e73b:	e8 7e f8 ff ff       	call   c001dfbe <switchToThread(ThreadControlBlock*)>
c001e740:	83 c4 10             	add    esp,0x10
c001e743:	83 c4 08             	add    esp,0x8
c001e746:	5b                   	pop    ebx
c001e747:	c3                   	ret    
c001e748:	83 ec 08             	sub    esp,0x8
c001e74b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e752:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e758:	68 44 29 03 c0       	push   0xc0032944
c001e75d:	e8 fa b0 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e762:	83 c4 10             	add    esp,0x10
c001e765:	eb af                	jmp    c001e716 <schedule()+0x34>
c001e767:	90                   	nop

c001e768 <Semaphore::tryAcquire()>:
c001e768:	53                   	push   ebx
c001e769:	83 ec 08             	sub    esp,0x8
c001e76c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e770:	fa                   	cli    
c001e771:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001e776:	8d 50 01             	lea    edx,[eax+0x1]
c001e779:	89 15 28 29 03 c0    	mov    DWORD PTR ds:0xc0032928,edx
c001e77f:	8b 15 24 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032924
c001e785:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e788:	89 1d 24 29 03 c0    	mov    DWORD PTR ds:0xc0032924,ebx
c001e78e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e791:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e793:	7c 2a                	jl     c001e7bf <Semaphore::tryAcquire()+0x57>
c001e795:	89 15 24 29 03 c0    	mov    DWORD PTR ds:0xc0032924,edx
c001e79b:	85 d2                	test   edx,edx
c001e79d:	75 0a                	jne    c001e7a9 <Semaphore::tryAcquire()+0x41>
c001e79f:	8b 15 20 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032920
c001e7a5:	85 d2                	test   edx,edx
c001e7a7:	75 5b                	jne    c001e804 <Semaphore::tryAcquire()+0x9c>
c001e7a9:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001e7ae:	85 c0                	test   eax,eax
c001e7b0:	74 07                	je     c001e7b9 <Semaphore::tryAcquire()+0x51>
c001e7b2:	31 c0                	xor    eax,eax
c001e7b4:	83 c4 08             	add    esp,0x8
c001e7b7:	5b                   	pop    ebx
c001e7b8:	c3                   	ret    
c001e7b9:	fb                   	sti    
c001e7ba:	83 c4 08             	add    esp,0x8
c001e7bd:	5b                   	pop    ebx
c001e7be:	c3                   	ret    
c001e7bf:	43                   	inc    ebx
c001e7c0:	89 15 24 29 03 c0    	mov    DWORD PTR ds:0xc0032924,edx
c001e7c6:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e7c9:	85 d2                	test   edx,edx
c001e7cb:	75 1f                	jne    c001e7ec <Semaphore::tryAcquire()+0x84>
c001e7cd:	8b 0d 20 29 03 c0    	mov    ecx,DWORD PTR ds:0xc0032920
c001e7d3:	85 c9                	test   ecx,ecx
c001e7d5:	74 15                	je     c001e7ec <Semaphore::tryAcquire()+0x84>
c001e7d7:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c001e7e1:	e8 fc fe ff ff       	call   c001e6e2 <schedule()>
c001e7e6:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001e7eb:	48                   	dec    eax
c001e7ec:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001e7f1:	85 c0                	test   eax,eax
c001e7f3:	75 08                	jne    c001e7fd <Semaphore::tryAcquire()+0x95>
c001e7f5:	fb                   	sti    
c001e7f6:	b0 01                	mov    al,0x1
c001e7f8:	83 c4 08             	add    esp,0x8
c001e7fb:	5b                   	pop    ebx
c001e7fc:	c3                   	ret    
c001e7fd:	b0 01                	mov    al,0x1
c001e7ff:	83 c4 08             	add    esp,0x8
c001e802:	5b                   	pop    ebx
c001e803:	c3                   	ret    
c001e804:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c001e80e:	e8 cf fe ff ff       	call   c001e6e2 <schedule()>
c001e813:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001e818:	48                   	dec    eax
c001e819:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001e81e:	85 c0                	test   eax,eax
c001e820:	75 90                	jne    c001e7b2 <Semaphore::tryAcquire()+0x4a>
c001e822:	eb 95                	jmp    c001e7b9 <Semaphore::tryAcquire()+0x51>

c001e824 <Semaphore::assertLocked(char const*)>:
c001e824:	83 ec 0c             	sub    esp,0xc
c001e827:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e82b:	fa                   	cli    
c001e82c:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001e832:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001e837:	8d 48 01             	lea    ecx,[eax+0x1]
c001e83a:	89 0d 24 29 03 c0    	mov    DWORD PTR ds:0xc0032924,ecx
c001e840:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e842:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e845:	7c 24                	jl     c001e86b <Semaphore::assertLocked(char const*)+0x47>
c001e847:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c001e84c:	85 c0                	test   eax,eax
c001e84e:	75 09                	jne    c001e859 <Semaphore::assertLocked(char const*)+0x35>
c001e850:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c001e855:	85 c0                	test   eax,eax
c001e857:	75 29                	jne    c001e882 <Semaphore::assertLocked(char const*)+0x5e>
c001e859:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001e85e:	48                   	dec    eax
c001e85f:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001e864:	75 01                	jne    c001e867 <Semaphore::assertLocked(char const*)+0x43>
c001e866:	fb                   	sti    
c001e867:	83 c4 0c             	add    esp,0xc
c001e86a:	c3                   	ret    
c001e86b:	83 ec 0c             	sub    esp,0xc
c001e86e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e872:	e8 b8 c0 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001e877:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001e87c:	83 c4 10             	add    esp,0x10
c001e87f:	48                   	dec    eax
c001e880:	eb c5                	jmp    c001e847 <Semaphore::assertLocked(char const*)+0x23>
c001e882:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c001e88c:	e8 51 fe ff ff       	call   c001e6e2 <schedule()>
c001e891:	eb c6                	jmp    c001e859 <Semaphore::assertLocked(char const*)+0x35>

c001e893 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e893:	83 ec 14             	sub    esp,0x14
c001e896:	ff 35 28 29 03 c0    	push   DWORD PTR ds:0xc0032928
c001e89c:	68 d4 d2 02 c0       	push   0xc002d2d4
c001e8a1:	e8 41 45 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001e8a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8af:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e8b2:	e8 2b fe ff ff       	call   c001e6e2 <schedule()>
c001e8b7:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001e8bc:	83 c4 10             	add    esp,0x10
c001e8bf:	48                   	dec    eax
c001e8c0:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001e8c5:	85 c0                	test   eax,eax
c001e8c7:	75 06                	jne    c001e8cf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e8c9:	fb                   	sti    
c001e8ca:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001e8cf:	83 ec 08             	sub    esp,0x8
c001e8d2:	50                   	push   eax
c001e8d3:	68 08 d3 02 c0       	push   0xc002d308
c001e8d8:	e8 0a 45 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001e8dd:	83 c4 1c             	add    esp,0x1c
c001e8e0:	c3                   	ret    

c001e8e1 <blockTask(TaskState)>:
c001e8e1:	83 ec 0c             	sub    esp,0xc
c001e8e4:	fa                   	cli    
c001e8e5:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001e8eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e8f7:	e8 e6 fd ff ff       	call   c001e6e2 <schedule()>
c001e8fc:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001e901:	48                   	dec    eax
c001e902:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001e907:	75 01                	jne    c001e90a <blockTask(TaskState)+0x29>
c001e909:	fb                   	sti    
c001e90a:	83 c4 0c             	add    esp,0xc
c001e90d:	c3                   	ret    

c001e90e <waitTask(int, int*, int)>:
c001e90e:	83 ec 18             	sub    esp,0x18
c001e911:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e916:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e91a:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e91d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e921:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e926:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e929:	6a 07                	push   0x7
c001e92b:	e8 b1 ff ff ff       	call   c001e8e1 <blockTask(TaskState)>
c001e930:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e935:	83 c4 10             	add    esp,0x10
c001e938:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e93b:	85 d2                	test   edx,edx
c001e93d:	74 0a                	je     c001e949 <waitTask(int, int*, int)+0x3b>
c001e93f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e942:	89 02                	mov    DWORD PTR [edx],eax
c001e944:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e949:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e94c:	83 c4 0c             	add    esp,0xc
c001e94f:	c3                   	ret    

c001e950 <nanoSleepUntil(unsigned long long)>:
c001e950:	83 ec 0c             	sub    esp,0xc
c001e953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e957:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e95b:	3b 05 70 fa 02 c0    	cmp    eax,DWORD PTR ds:0xc002fa70
c001e961:	89 d1                	mov    ecx,edx
c001e963:	1b 0d 74 fa 02 c0    	sbb    ecx,DWORD PTR ds:0xc002fa74
c001e969:	73 04                	jae    c001e96f <nanoSleepUntil(unsigned long long)+0x1f>
c001e96b:	83 c4 0c             	add    esp,0xc
c001e96e:	c3                   	ret    
c001e96f:	fa                   	cli    
c001e970:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001e976:	83 ec 08             	sub    esp,0x8
c001e979:	ff 05 24 29 03 c0    	inc    DWORD PTR ds:0xc0032924
c001e97f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e985:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e988:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e98b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e991:	68 38 29 03 c0       	push   0xc0032938
c001e996:	e8 c1 ae 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e99b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e9a2:	e8 3a ff ff ff       	call   c001e8e1 <blockTask(TaskState)>
c001e9a7:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001e9ac:	83 c4 10             	add    esp,0x10
c001e9af:	48                   	dec    eax
c001e9b0:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c001e9b5:	85 c0                	test   eax,eax
c001e9b7:	75 09                	jne    c001e9c2 <nanoSleepUntil(unsigned long long)+0x72>
c001e9b9:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c001e9be:	85 c0                	test   eax,eax
c001e9c0:	75 12                	jne    c001e9d4 <nanoSleepUntil(unsigned long long)+0x84>
c001e9c2:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001e9c7:	48                   	dec    eax
c001e9c8:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001e9cd:	75 9c                	jne    c001e96b <nanoSleepUntil(unsigned long long)+0x1b>
c001e9cf:	fb                   	sti    
c001e9d0:	83 c4 0c             	add    esp,0xc
c001e9d3:	c3                   	ret    
c001e9d4:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c001e9de:	e8 ff fc ff ff       	call   c001e6e2 <schedule()>
c001e9e3:	eb dd                	jmp    c001e9c2 <nanoSleepUntil(unsigned long long)+0x72>

c001e9e5 <nanoSleep(unsigned long long)>:
c001e9e5:	a1 70 fa 02 c0       	mov    eax,ds:0xc002fa70
c001e9ea:	8b 15 74 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa74
c001e9f0:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e9f4:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e9f8:	e9 53 ff ff ff       	jmp    c001e950 <nanoSleepUntil(unsigned long long)>

c001e9fd <sleep(unsigned long long)>:
c001e9fd:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001ea05:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001ea0a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001ea0e:	01 ca                	add    edx,ecx
c001ea10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ea14:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ea18:	eb cb                	jmp    c001e9e5 <nanoSleep(unsigned long long)>

c001ea1a <Semaphore::acquire()>:
c001ea1a:	83 ec 0c             	sub    esp,0xc
c001ea1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea21:	fa                   	cli    
c001ea22:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001ea27:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001ea2d:	8d 48 01             	lea    ecx,[eax+0x1]
c001ea30:	89 0d 24 29 03 c0    	mov    DWORD PTR ds:0xc0032924,ecx
c001ea36:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ea39:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001ea3b:	7d 28                	jge    c001ea65 <Semaphore::acquire()+0x4b>
c001ea3d:	41                   	inc    ecx
c001ea3e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001ea41:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c001ea46:	85 c0                	test   eax,eax
c001ea48:	75 09                	jne    c001ea53 <Semaphore::acquire()+0x39>
c001ea4a:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c001ea4f:	85 c0                	test   eax,eax
c001ea51:	75 4e                	jne    c001eaa1 <Semaphore::acquire()+0x87>
c001ea53:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001ea58:	48                   	dec    eax
c001ea59:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001ea5e:	75 01                	jne    c001ea61 <Semaphore::acquire()+0x47>
c001ea60:	fb                   	sti    
c001ea61:	83 c4 0c             	add    esp,0xc
c001ea64:	c3                   	ret    
c001ea65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea6a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea71:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ea74:	85 c9                	test   ecx,ecx
c001ea76:	74 3a                	je     c001eab2 <Semaphore::acquire()+0x98>
c001ea78:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ea7b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea81:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001ea84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea89:	83 ec 0c             	sub    esp,0xc
c001ea8c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001ea8f:	6a 05                	push   0x5
c001ea91:	e8 4b fe ff ff       	call   c001e8e1 <blockTask(TaskState)>
c001ea96:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001ea9b:	83 c4 10             	add    esp,0x10
c001ea9e:	48                   	dec    eax
c001ea9f:	eb a0                	jmp    c001ea41 <Semaphore::acquire()+0x27>
c001eaa1:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c001eaab:	e8 32 fc ff ff       	call   c001e6e2 <schedule()>
c001eab0:	eb a1                	jmp    c001ea53 <Semaphore::acquire()+0x39>
c001eab2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eab7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eaba:	eb c8                	jmp    c001ea84 <Semaphore::acquire()+0x6a>

c001eabc <taskReturned>:
c001eabc:	83 ec 18             	sub    esp,0x18
c001eabf:	68 3c d3 02 c0       	push   0xc002d33c
c001eac4:	e8 66 be ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001eac9:	83 c4 10             	add    esp,0x10
c001eacc:	83 ec 0c             	sub    esp,0xc
c001eacf:	6a 02                	push   0x2
c001ead1:	e8 0b fe ff ff       	call   c001e8e1 <blockTask(TaskState)>
c001ead6:	fa                   	cli    
c001ead7:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001eadd:	e8 00 fc ff ff       	call   c001e6e2 <schedule()>
c001eae2:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001eae7:	83 c4 10             	add    esp,0x10
c001eaea:	48                   	dec    eax
c001eaeb:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001eaf0:	85 c0                	test   eax,eax
c001eaf2:	75 d8                	jne    c001eacc <taskReturned+0x10>
c001eaf4:	fb                   	sti    
c001eaf5:	eb d5                	jmp    c001eacc <taskReturned+0x10>

c001eaf7 <Thr::processFromPID(int)>:
c001eaf7:	57                   	push   edi
c001eaf8:	56                   	push   esi
c001eaf9:	53                   	push   ebx
c001eafa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eafe:	83 ec 0c             	sub    esp,0xc
c001eb01:	68 32 d1 02 c0       	push   0xc002d132
c001eb06:	e8 dc 42 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001eb0b:	fa                   	cli    
c001eb0c:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001eb12:	c7 04 24 44 29 03 c0 	mov    DWORD PTR [esp],0xc0032944
c001eb19:	e8 88 ac 00 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb1e:	83 c4 10             	add    esp,0x10
c001eb21:	89 c7                	mov    edi,eax
c001eb23:	eb 14                	jmp    c001eb39 <Thr::processFromPID(int)+0x42>
c001eb25:	83 ec 0c             	sub    esp,0xc
c001eb28:	68 44 29 03 c0       	push   0xc0032944
c001eb2d:	e8 74 ac 00 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb32:	83 c4 10             	add    esp,0x10
c001eb35:	39 f8                	cmp    eax,edi
c001eb37:	74 49                	je     c001eb82 <Thr::processFromPID(int)+0x8b>
c001eb39:	83 ec 0c             	sub    esp,0xc
c001eb3c:	68 44 29 03 c0       	push   0xc0032944
c001eb41:	e8 60 ac 00 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb46:	c7 04 24 44 29 03 c0 	mov    DWORD PTR [esp],0xc0032944
c001eb4d:	89 c3                	mov    ebx,eax
c001eb4f:	e8 5a ac 00 00       	call   c00297ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eb54:	58                   	pop    eax
c001eb55:	5a                   	pop    edx
c001eb56:	53                   	push   ebx
c001eb57:	68 44 29 03 c0       	push   0xc0032944
c001eb5c:	e8 fb ac 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eb61:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb64:	83 c4 10             	add    esp,0x10
c001eb67:	39 30                	cmp    DWORD PTR [eax],esi
c001eb69:	75 ba                	jne    c001eb25 <Thr::processFromPID(int)+0x2e>
c001eb6b:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001eb70:	48                   	dec    eax
c001eb71:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001eb76:	74 07                	je     c001eb7f <Thr::processFromPID(int)+0x88>
c001eb78:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb7b:	5b                   	pop    ebx
c001eb7c:	5e                   	pop    esi
c001eb7d:	5f                   	pop    edi
c001eb7e:	c3                   	ret    
c001eb7f:	fb                   	sti    
c001eb80:	eb f6                	jmp    c001eb78 <Thr::processFromPID(int)+0x81>
c001eb82:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001eb87:	48                   	dec    eax
c001eb88:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001eb8d:	75 01                	jne    c001eb90 <Thr::processFromPID(int)+0x99>
c001eb8f:	fb                   	sti    
c001eb90:	83 ec 0c             	sub    esp,0xc
c001eb93:	68 4d d1 02 c0       	push   0xc002d14d
c001eb98:	e8 4a 42 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001eb9d:	83 c4 10             	add    esp,0x10
c001eba0:	31 c0                	xor    eax,eax
c001eba2:	5b                   	pop    ebx
c001eba3:	5e                   	pop    esi
c001eba4:	5f                   	pop    edi
c001eba5:	c3                   	ret    

c001eba6 <unblockTask(ThreadControlBlock*)>:
c001eba6:	53                   	push   ebx
c001eba7:	83 ec 08             	sub    esp,0x8
c001ebaa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebae:	fa                   	cli    
c001ebaf:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001ebb5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ebb8:	85 c0                	test   eax,eax
c001ebba:	74 66                	je     c001ec22 <unblockTask(ThreadControlBlock*)+0x7c>
c001ebbc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ebbf:	48                   	dec    eax
c001ebc0:	74 31                	je     c001ebf3 <unblockTask(ThreadControlBlock*)+0x4d>
c001ebc2:	83 ec 0c             	sub    esp,0xc
c001ebc5:	68 44 29 03 c0       	push   0xc0032944
c001ebca:	e8 d7 ab 00 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ebcf:	83 c4 10             	add    esp,0x10
c001ebd2:	85 c0                	test   eax,eax
c001ebd4:	75 17                	jne    c001ebed <unblockTask(ThreadControlBlock*)+0x47>
c001ebd6:	eb 68                	jmp    c001ec40 <unblockTask(ThreadControlBlock*)+0x9a>
c001ebd8:	83 ec 08             	sub    esp,0x8
c001ebdb:	50                   	push   eax
c001ebdc:	68 44 29 03 c0       	push   0xc0032944
c001ebe1:	e8 5e af 00 00       	call   c0029b44 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001ebe6:	83 c4 10             	add    esp,0x10
c001ebe9:	85 c0                	test   eax,eax
c001ebeb:	74 53                	je     c001ec40 <unblockTask(ThreadControlBlock*)+0x9a>
c001ebed:	39 c3                	cmp    ebx,eax
c001ebef:	75 e7                	jne    c001ebd8 <unblockTask(ThreadControlBlock*)+0x32>
c001ebf1:	eb 1c                	jmp    c001ec0f <unblockTask(ThreadControlBlock*)+0x69>
c001ebf3:	83 ec 0c             	sub    esp,0xc
c001ebf6:	68 2c d4 02 c0       	push   0xc002d42c
c001ebfb:	e8 e7 41 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ec00:	c7 04 24 b8 d3 02 c0 	mov    DWORD PTR [esp],0xc002d3b8
c001ec07:	e8 db 41 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ec0c:	83 c4 10             	add    esp,0x10
c001ec0f:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001ec14:	48                   	dec    eax
c001ec15:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001ec1a:	75 01                	jne    c001ec1d <unblockTask(ThreadControlBlock*)+0x77>
c001ec1c:	fb                   	sti    
c001ec1d:	83 c4 08             	add    esp,0x8
c001ec20:	5b                   	pop    ebx
c001ec21:	c3                   	ret    
c001ec22:	83 ec 0c             	sub    esp,0xc
c001ec25:	68 70 d3 02 c0       	push   0xc002d370
c001ec2a:	e8 b8 41 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ec2f:	c7 04 24 b8 d3 02 c0 	mov    DWORD PTR [esp],0xc002d3b8
c001ec36:	e8 ac 41 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ec3b:	83 c4 10             	add    esp,0x10
c001ec3e:	eb cf                	jmp    c001ec0f <unblockTask(ThreadControlBlock*)+0x69>
c001ec40:	83 ec 08             	sub    esp,0x8
c001ec43:	53                   	push   ebx
c001ec44:	68 44 29 03 c0       	push   0xc0032944
c001ec49:	e8 0e ac 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec4e:	83 c4 10             	add    esp,0x10
c001ec51:	eb bc                	jmp    c001ec0f <unblockTask(ThreadControlBlock*)+0x69>

c001ec53 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ec53:	55                   	push   ebp
c001ec54:	57                   	push   edi
c001ec55:	56                   	push   esi
c001ec56:	53                   	push   ebx
c001ec57:	83 ec 1c             	sub    esp,0x1c
c001ec5a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec5e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec61:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ec67:	85 ff                	test   edi,edi
c001ec69:	7e 20                	jle    c001ec8b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ec6b:	31 f6                	xor    esi,esi
c001ec6d:	83 ec 0c             	sub    esp,0xc
c001ec70:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ec77:	46                   	inc    esi
c001ec78:	e8 1f 0c ff ff       	call   c000f89c <free>
c001ec7d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec80:	83 c4 10             	add    esp,0x10
c001ec83:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ec89:	7f e2                	jg     c001ec6d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ec8b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ec95:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ec9a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ec9d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eca0:	d3 c0                	rol    eax,cl
c001eca2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001eca9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ecac:	89 f7                	mov    edi,esi
c001ecae:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ecb6:	0f 85 74 01 00 00    	jne    c001ee30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ecbc:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ecc2:	85 ed                	test   ebp,ebp
c001ecc4:	74 1b                	je     c001ece1 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ecc6:	83 ec 0c             	sub    esp,0xc
c001ecc9:	55                   	push   ebp
c001ecca:	e8 d5 b9 ff ff       	call   c001a6a4 <EnvVarContainer::~EnvVarContainer()>
c001eccf:	59                   	pop    ecx
c001ecd0:	5e                   	pop    esi
c001ecd1:	6a 0c                	push   0xc
c001ecd3:	55                   	push   ebp
c001ecd4:	e8 2e 40 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c001ecd9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ecdc:	83 c4 10             	add    esp,0x10
c001ecdf:	89 f7                	mov    edi,esi
c001ece1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ece7:	85 c0                	test   eax,eax
c001ece9:	0f 84 aa 00 00 00    	je     c001ed99 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ecef:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ecf2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ecf6:	31 c9                	xor    ecx,ecx
c001ecf8:	eb 10                	jmp    c001ed0a <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ecfa:	41                   	inc    ecx
c001ecfb:	83 f9 10             	cmp    ecx,0x10
c001ecfe:	0f 84 95 00 00 00    	je     c001ed99 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ed04:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ed0a:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ed11:	d3 fa                	sar    edx,cl
c001ed13:	83 e2 01             	and    edx,0x1
c001ed16:	74 e2                	je     c001ecfa <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed18:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ed1b:	01 ca                	add    edx,ecx
c001ed1d:	89 d5                	mov    ebp,edx
c001ed1f:	c1 e5 05             	shl    ebp,0x5
c001ed22:	01 ea                	add    edx,ebp
c001ed24:	01 d0                	add    eax,edx
c001ed26:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ed2c:	83 fd 07             	cmp    ebp,0x7
c001ed2f:	75 c9                	jne    c001ecfa <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed31:	05 40 02 00 00       	add    eax,0x240
c001ed36:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ed39:	83 fd ff             	cmp    ebp,0xffffffff
c001ed3c:	0f 8c 08 01 00 00    	jl     c001ee4a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001ed42:	0f 84 b9 01 00 00    	je     c001ef01 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001ed48:	85 ed                	test   ebp,ebp
c001ed4a:	0f 84 a0 01 00 00    	je     c001eef0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001ed50:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ed52:	75 a6                	jne    c001ecfa <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed54:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ed5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed5e:	01 d0                	add    eax,edx
c001ed60:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001ed64:	83 ec 0c             	sub    esp,0xc
c001ed67:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ed6d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed70:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ed76:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001ed7d:	50                   	push   eax
c001ed7e:	e8 23 fe ff ff       	call   c001eba6 <unblockTask(ThreadControlBlock*)>
c001ed83:	83 c4 10             	add    esp,0x10
c001ed86:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed8d:	89 f7                	mov    edi,esi
c001ed8f:	41                   	inc    ecx
c001ed90:	83 f9 10             	cmp    ecx,0x10
c001ed93:	0f 85 6b ff ff ff    	jne    c001ed04 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ed99:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ed9f:	85 c0                	test   eax,eax
c001eda1:	74 5d                	je     c001ee00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eda3:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001eda9:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001edaf:	74 4f                	je     c001ee00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001edb1:	83 ec 0c             	sub    esp,0xc
c001edb4:	68 44 29 03 c0       	push   0xc0032944
c001edb9:	e8 e8 a9 00 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001edbe:	c7 04 24 44 29 03 c0 	mov    DWORD PTR [esp],0xc0032944
c001edc5:	89 c7                	mov    edi,eax
c001edc7:	e8 be a9 00 00       	call   c002978a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001edcc:	83 c4 10             	add    esp,0x10
c001edcf:	84 c0                	test   al,al
c001edd1:	0f 84 e4 00 00 00    	je     c001eebb <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001edd7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001edda:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ede0:	85 d2                	test   edx,edx
c001ede2:	74 0f                	je     c001edf3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ede4:	83 ec 0c             	sub    esp,0xc
c001ede7:	8b 02                	mov    eax,DWORD PTR [edx]
c001ede9:	52                   	push   edx
c001edea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eded:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001edf0:	83 c4 10             	add    esp,0x10
c001edf3:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001edfd:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ee00:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ee06:	85 db                	test   ebx,ebx
c001ee08:	74 16                	je     c001ee20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ee0a:	83 ec 0c             	sub    esp,0xc
c001ee0d:	53                   	push   ebx
c001ee0e:	e8 89 32 ff ff       	call   c001209c <VAS::~VAS()>
c001ee13:	58                   	pop    eax
c001ee14:	5a                   	pop    edx
c001ee15:	6a 14                	push   0x14
c001ee17:	53                   	push   ebx
c001ee18:	e8 ea 3e ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c001ee1d:	83 c4 10             	add    esp,0x10
c001ee20:	83 ec 0c             	sub    esp,0xc
c001ee23:	68 64 d1 02 c0       	push   0xc002d164
c001ee28:	e8 ba 3f ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ee2d:	83 c4 10             	add    esp,0x10
c001ee30:	83 ec 08             	sub    esp,0x8
c001ee33:	68 3f 07 00 00       	push   0x73f
c001ee38:	68 72 d1 02 c0       	push   0xc002d172
c001ee3d:	e8 a5 3f ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ee42:	83 c4 2c             	add    esp,0x2c
c001ee45:	5b                   	pop    ebx
c001ee46:	5e                   	pop    esi
c001ee47:	5f                   	pop    edi
c001ee48:	5d                   	pop    ebp
c001ee49:	c3                   	ret    
c001ee4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee4e:	83 ec 0c             	sub    esp,0xc
c001ee51:	68 70 d4 02 c0       	push   0xc002d470
c001ee56:	e8 d4 ba ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001ee5b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ee5e:	83 c4 10             	add    esp,0x10
c001ee61:	89 f7                	mov    edi,esi
c001ee63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee67:	e9 8e fe ff ff       	jmp    c001ecfa <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ee6c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ee72:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ee78:	75 1c                	jne    c001ee96 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee7a:	83 ec 0c             	sub    esp,0xc
c001ee7d:	68 d8 d4 02 c0       	push   0xc002d4d8
c001ee82:	e8 60 3f ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ee87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ee8e:	e8 4e fa ff ff       	call   c001e8e1 <blockTask(TaskState)>
c001ee93:	83 c4 10             	add    esp,0x10
c001ee96:	83 ec 08             	sub    esp,0x8
c001ee99:	56                   	push   esi
c001ee9a:	68 44 29 03 c0       	push   0xc0032944
c001ee9f:	e8 b8 a9 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eea4:	c7 04 24 44 29 03 c0 	mov    DWORD PTR [esp],0xc0032944
c001eeab:	e8 f6 a8 00 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eeb0:	83 c4 10             	add    esp,0x10
c001eeb3:	39 f8                	cmp    eax,edi
c001eeb5:	0f 84 1c ff ff ff    	je     c001edd7 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001eebb:	83 ec 0c             	sub    esp,0xc
c001eebe:	68 44 29 03 c0       	push   0xc0032944
c001eec3:	e8 de a8 00 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eec8:	c7 04 24 44 29 03 c0 	mov    DWORD PTR [esp],0xc0032944
c001eecf:	89 c6                	mov    esi,eax
c001eed1:	e8 d8 a8 00 00       	call   c00297ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eed6:	83 c4 10             	add    esp,0x10
c001eed9:	39 f3                	cmp    ebx,esi
c001eedb:	74 b9                	je     c001ee96 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eedd:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001eee0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eee3:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001eee9:	75 ab                	jne    c001ee96 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eeeb:	e9 7c ff ff ff       	jmp    c001ee6c <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001eef0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eef4:	83 ec 0c             	sub    esp,0xc
c001eef7:	68 a4 d4 02 c0       	push   0xc002d4a4
c001eefc:	e9 55 ff ff ff       	jmp    c001ee56 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ef01:	8b 36                	mov    esi,DWORD PTR [esi]
c001ef03:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ef07:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ef0a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ef0d:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ef13:	01 d7                	add    edi,edx
c001ef15:	89 f8                	mov    eax,edi
c001ef17:	e9 44 fe ff ff       	jmp    c001ed60 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ef1c <cleanerTaskFunction(void*)>:
c001ef1c:	53                   	push   ebx
c001ef1d:	83 ec 08             	sub    esp,0x8
c001ef20:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001ef25:	48                   	dec    eax
c001ef26:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001ef2b:	75 01                	jne    c001ef2e <cleanerTaskFunction(void*)+0x12>
c001ef2d:	fb                   	sti    
c001ef2e:	fa                   	cli    
c001ef2f:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001ef34:	80 3d 0c 29 03 c0 00 	cmp    BYTE PTR ds:0xc003290c,0x0
c001ef3b:	8d 50 01             	lea    edx,[eax+0x1]
c001ef3e:	89 15 28 29 03 c0    	mov    DWORD PTR ds:0xc0032928,edx
c001ef44:	0f 84 b9 00 00 00    	je     c001f003 <cleanerTaskFunction(void*)+0xe7>
c001ef4a:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001ef4f:	85 c0                	test   eax,eax
c001ef51:	75 01                	jne    c001ef54 <cleanerTaskFunction(void*)+0x38>
c001ef53:	fb                   	sti    
c001ef54:	c6 05 0c 29 03 c0 00 	mov    BYTE PTR ds:0xc003290c,0x0
c001ef5b:	fa                   	cli    
c001ef5c:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001ef62:	ff 05 24 29 03 c0    	inc    DWORD PTR ds:0xc0032924
c001ef68:	fa                   	cli    
c001ef69:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001ef6f:	eb 3e                	jmp    c001efaf <cleanerTaskFunction(void*)+0x93>
c001ef71:	83 ec 0c             	sub    esp,0xc
c001ef74:	68 2c 29 03 c0       	push   0xc003292c
c001ef79:	e8 28 a8 00 00       	call   c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ef7e:	c7 04 24 2c 29 03 c0 	mov    DWORD PTR [esp],0xc003292c
c001ef85:	89 c3                	mov    ebx,eax
c001ef87:	e8 22 a8 00 00       	call   c00297ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ef8c:	c7 04 24 88 d1 02 c0 	mov    DWORD PTR [esp],0xc002d188
c001ef93:	e8 4f 3e ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001ef98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef9b:	e8 b3 fc ff ff       	call   c001ec53 <cleanupTerminatedTask(ThreadControlBlock*)>
c001efa0:	c7 04 24 a1 d1 02 c0 	mov    DWORD PTR [esp],0xc002d1a1
c001efa7:	e8 3b 3e ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001efac:	83 c4 10             	add    esp,0x10
c001efaf:	83 ec 0c             	sub    esp,0xc
c001efb2:	68 2c 29 03 c0       	push   0xc003292c
c001efb7:	e8 ce a7 00 00       	call   c002978a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001efbc:	83 c4 10             	add    esp,0x10
c001efbf:	84 c0                	test   al,al
c001efc1:	74 ae                	je     c001ef71 <cleanerTaskFunction(void*)+0x55>
c001efc3:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001efc8:	48                   	dec    eax
c001efc9:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001efce:	75 01                	jne    c001efd1 <cleanerTaskFunction(void*)+0xb5>
c001efd0:	fb                   	sti    
c001efd1:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001efd6:	48                   	dec    eax
c001efd7:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c001efdc:	0f 85 3e ff ff ff    	jne    c001ef20 <cleanerTaskFunction(void*)+0x4>
c001efe2:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c001efe7:	85 c0                	test   eax,eax
c001efe9:	0f 84 31 ff ff ff    	je     c001ef20 <cleanerTaskFunction(void*)+0x4>
c001efef:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c001eff9:	e8 e4 f6 ff ff       	call   c001e6e2 <schedule()>
c001effe:	e9 1d ff ff ff       	jmp    c001ef20 <cleanerTaskFunction(void*)+0x4>
c001f003:	83 ec 0c             	sub    esp,0xc
c001f006:	6a 02                	push   0x2
c001f008:	e8 86 f8 ff ff       	call   c001e893 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f00d:	83 c4 10             	add    esp,0x10
c001f010:	e9 3f ff ff ff       	jmp    c001ef54 <cleanerTaskFunction(void*)+0x38>

c001f015 <terminateTask(int)>:
c001f015:	83 ec 14             	sub    esp,0x14
c001f018:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f01d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001f020:	83 c0 0c             	add    eax,0xc
c001f023:	50                   	push   eax
c001f024:	68 00 d5 02 c0       	push   0xc002d500
c001f029:	e8 b9 3d ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001f02e:	fa                   	cli    
c001f02f:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001f035:	ff 05 24 29 03 c0    	inc    DWORD PTR ds:0xc0032924
c001f03b:	fa                   	cli    
c001f03c:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001f042:	c7 04 24 b4 d1 02 c0 	mov    DWORD PTR [esp],0xc002d1b4
c001f049:	e8 99 3d ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001f04e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f052:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f057:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001f05a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f05f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f062:	5a                   	pop    edx
c001f063:	59                   	pop    ecx
c001f064:	50                   	push   eax
c001f065:	68 2c 29 03 c0       	push   0xc003292c
c001f06a:	e8 ed a7 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001f06f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f074:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001f07b:	c7 04 24 ce d1 02 c0 	mov    DWORD PTR [esp],0xc002d1ce
c001f082:	e8 60 3d ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001f087:	83 c4 10             	add    esp,0x10
c001f08a:	a1 08 29 03 c0       	mov    eax,ds:0xc0032908
c001f08f:	85 c0                	test   eax,eax
c001f091:	0f 84 8d 00 00 00    	je     c001f124 <terminateTask(int)+0x10f>
c001f097:	83 ec 0c             	sub    esp,0xc
c001f09a:	68 e8 d1 02 c0       	push   0xc002d1e8
c001f09f:	e8 43 3d ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001f0a4:	58                   	pop    eax
c001f0a5:	c6 05 0c 29 03 c0 01 	mov    BYTE PTR ds:0xc003290c,0x1
c001f0ac:	ff 35 08 29 03 c0    	push   DWORD PTR ds:0xc0032908
c001f0b2:	e8 ef fa ff ff       	call   c001eba6 <unblockTask(ThreadControlBlock*)>
c001f0b7:	c7 04 24 02 d2 02 c0 	mov    DWORD PTR [esp],0xc002d202
c001f0be:	e8 24 3d ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001f0c3:	83 c4 10             	add    esp,0x10
c001f0c6:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f0cb:	48                   	dec    eax
c001f0cc:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001f0d1:	75 01                	jne    c001f0d4 <terminateTask(int)+0xbf>
c001f0d3:	fb                   	sti    
c001f0d4:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001f0d9:	48                   	dec    eax
c001f0da:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c001f0df:	75 09                	jne    c001f0ea <terminateTask(int)+0xd5>
c001f0e1:	83 3d 20 29 03 c0 00 	cmp    DWORD PTR ds:0xc0032920,0x0
c001f0e8:	75 4c                	jne    c001f136 <terminateTask(int)+0x121>
c001f0ea:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f0ef:	48                   	dec    eax
c001f0f0:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001f0f5:	75 01                	jne    c001f0f8 <terminateTask(int)+0xe3>
c001f0f7:	fb                   	sti    
c001f0f8:	83 ec 0c             	sub    esp,0xc
c001f0fb:	68 3a d2 02 c0       	push   0xc002d23a
c001f100:	e8 e2 3c ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001f105:	83 c4 10             	add    esp,0x10
c001f108:	fa                   	cli    
c001f109:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001f10f:	e8 ce f5 ff ff       	call   c001e6e2 <schedule()>
c001f114:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f119:	48                   	dec    eax
c001f11a:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001f11f:	75 e7                	jne    c001f108 <terminateTask(int)+0xf3>
c001f121:	fb                   	sti    
c001f122:	eb e4                	jmp    c001f108 <terminateTask(int)+0xf3>
c001f124:	83 ec 0c             	sub    esp,0xc
c001f127:	68 1c d2 02 c0       	push   0xc002d21c
c001f12c:	e8 b6 3c ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001f131:	83 c4 10             	add    esp,0x10
c001f134:	eb 90                	jmp    c001f0c6 <terminateTask(int)+0xb1>
c001f136:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c001f140:	e8 9d f5 ff ff       	call   c001e6e2 <schedule()>
c001f145:	eb a3                	jmp    c001f0ea <terminateTask(int)+0xd5>

c001f147 <Thr::terminateFromIRQ(int)>:
c001f147:	83 ec 18             	sub    esp,0x18
c001f14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14e:	e8 c2 fe ff ff       	call   c001f015 <terminateTask(int)>
c001f153:	90                   	nop

c001f154 <Semaphore::release()>:
c001f154:	83 ec 0c             	sub    esp,0xc
c001f157:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f15b:	fa                   	cli    
c001f15c:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001f161:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001f167:	8d 48 01             	lea    ecx,[eax+0x1]
c001f16a:	89 0d 24 29 03 c0    	mov    DWORD PTR ds:0xc0032924,ecx
c001f170:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001f173:	85 c9                	test   ecx,ecx
c001f175:	74 3c                	je     c001f1b3 <Semaphore::release()+0x5f>
c001f177:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001f17a:	83 ec 0c             	sub    esp,0xc
c001f17d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001f180:	51                   	push   ecx
c001f181:	e8 20 fa ff ff       	call   c001eba6 <unblockTask(ThreadControlBlock*)>
c001f186:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c001f18b:	83 c4 10             	add    esp,0x10
c001f18e:	48                   	dec    eax
c001f18f:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c001f194:	85 c0                	test   eax,eax
c001f196:	75 09                	jne    c001f1a1 <Semaphore::release()+0x4d>
c001f198:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c001f19d:	85 c0                	test   eax,eax
c001f19f:	75 17                	jne    c001f1b8 <Semaphore::release()+0x64>
c001f1a1:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f1a6:	48                   	dec    eax
c001f1a7:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001f1ac:	75 01                	jne    c001f1af <Semaphore::release()+0x5b>
c001f1ae:	fb                   	sti    
c001f1af:	83 c4 0c             	add    esp,0xc
c001f1b2:	c3                   	ret    
c001f1b3:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001f1b6:	eb d7                	jmp    c001f18f <Semaphore::release()+0x3b>
c001f1b8:	c7 05 20 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032920,0x0
c001f1c2:	e8 1b f5 ff ff       	call   c001e6e2 <schedule()>
c001f1c7:	eb d8                	jmp    c001f1a1 <Semaphore::release()+0x4d>

c001f1c9 <__static_initialization_and_destruction_0(int, int)>:
c001f1c9:	83 ec 0c             	sub    esp,0xc
c001f1cc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f1d1:	0f 85 88 00 00 00    	jne    c001f25f <__static_initialization_and_destruction_0(int, int)+0x96>
c001f1d7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f1df:	75 7e                	jne    c001f25f <__static_initialization_and_destruction_0(int, int)+0x96>
c001f1e1:	83 ec 0c             	sub    esp,0xc
c001f1e4:	68 44 29 03 c0       	push   0xc0032944
c001f1e9:	e8 fe a8 00 00       	call   c0029aec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f1ee:	83 c4 10             	add    esp,0x10
c001f1f1:	83 ec 04             	sub    esp,0x4
c001f1f4:	68 10 e3 02 c0       	push   0xc002e310
c001f1f9:	68 44 29 03 c0       	push   0xc0032944
c001f1fe:	68 a0 9a 02 c0       	push   0xc0029aa0
c001f203:	e8 79 3a ff ff       	call   c0012c81 <__cxa_atexit>
c001f208:	83 c4 10             	add    esp,0x10
c001f20b:	83 ec 0c             	sub    esp,0xc
c001f20e:	68 38 29 03 c0       	push   0xc0032938
c001f213:	e8 d4 a8 00 00       	call   c0029aec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f218:	83 c4 10             	add    esp,0x10
c001f21b:	83 ec 04             	sub    esp,0x4
c001f21e:	68 10 e3 02 c0       	push   0xc002e310
c001f223:	68 38 29 03 c0       	push   0xc0032938
c001f228:	68 a0 9a 02 c0       	push   0xc0029aa0
c001f22d:	e8 4f 3a ff ff       	call   c0012c81 <__cxa_atexit>
c001f232:	83 c4 10             	add    esp,0x10
c001f235:	83 ec 0c             	sub    esp,0xc
c001f238:	68 2c 29 03 c0       	push   0xc003292c
c001f23d:	e8 aa a8 00 00       	call   c0029aec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f242:	83 c4 10             	add    esp,0x10
c001f245:	83 ec 04             	sub    esp,0x4
c001f248:	68 10 e3 02 c0       	push   0xc002e310
c001f24d:	68 2c 29 03 c0       	push   0xc003292c
c001f252:	68 a0 9a 02 c0       	push   0xc0029aa0
c001f257:	e8 25 3a ff ff       	call   c0012c81 <__cxa_atexit>
c001f25c:	83 c4 10             	add    esp,0x10
c001f25f:	90                   	nop
c001f260:	83 c4 0c             	add    esp,0xc
c001f263:	c3                   	ret    

c001f264 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f264:	83 ec 0c             	sub    esp,0xc
c001f267:	83 ec 08             	sub    esp,0x8
c001f26a:	68 ff ff 00 00       	push   0xffff
c001f26f:	6a 01                	push   0x1
c001f271:	e8 53 ff ff ff       	call   c001f1c9 <__static_initialization_and_destruction_0(int, int)>
c001f276:	83 c4 10             	add    esp,0x10
c001f279:	83 c4 0c             	add    esp,0xc
c001f27c:	c3                   	ret    

c001f27d <Vm::inbv(unsigned short)>:
c001f27d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f281:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f286:	75 06                	jne    c001f28e <Vm::inbv(unsigned short)+0x11>
c001f288:	a0 8c 29 03 c0       	mov    al,ds:0xc003298c
c001f28d:	c3                   	ret    
c001f28e:	ec                   	in     al,dx
c001f28f:	c3                   	ret    

c001f290 <Vm::outbv(unsigned short, unsigned char)>:
c001f290:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f298:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f29d:	75 25                	jne    c001f2c4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001f29f:	8b 0d 8c 29 03 c0    	mov    ecx,DWORD PTR ds:0xc003298c
c001f2a5:	8d 51 01             	lea    edx,[ecx+0x1]
c001f2a8:	88 81 a0 29 03 c0    	mov    BYTE PTR [ecx-0x3ffcd660],al
c001f2ae:	89 15 8c 29 03 c0    	mov    DWORD PTR ds:0xc003298c,edx
c001f2b4:	83 fa 20             	cmp    edx,0x20
c001f2b7:	75 0c                	jne    c001f2c5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001f2b9:	c7 05 8c 29 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003298c,0x1f
c001f2c3:	c3                   	ret    
c001f2c4:	ee                   	out    dx,al
c001f2c5:	c3                   	ret    

c001f2c6 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f2c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f2cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f2d0:	c1 e0 04             	shl    eax,0x4
c001f2d3:	01 d0                	add    eax,edx
c001f2d5:	c3                   	ret    

c001f2d6 <Vm::getSegment(unsigned int)>:
c001f2d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2da:	c1 e8 10             	shr    eax,0x10
c001f2dd:	c3                   	ret    

c001f2de <Vm::getOffset(unsigned int)>:
c001f2de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2e2:	c3                   	ret    

c001f2e3 <Vm::mainloop2()>:
c001f2e3:	83 ec 18             	sub    esp,0x18
c001f2e6:	fa                   	cli    
c001f2e7:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001f2ed:	6a 02                	push   0x2
c001f2ef:	c6 05 85 29 03 c0 01 	mov    BYTE PTR ds:0xc0032985,0x1
c001f2f6:	e8 98 f5 ff ff       	call   c001e893 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f2fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f300:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f304:	52                   	push   edx
c001f305:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f309:	52                   	push   edx
c001f30a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f30e:	52                   	push   edx
c001f30f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f313:	50                   	push   eax
c001f314:	e8 e1 0f fe ff       	call   c00002fa <goToVM86>
c001f319:	83 c4 2c             	add    esp,0x2c
c001f31c:	c3                   	ret    

c001f31d <Vm::mainVm8086Loop(void*)>:
c001f31d:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f322:	48                   	dec    eax
c001f323:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001f328:	75 01                	jne    c001f32b <Vm::mainVm8086Loop(void*)+0xe>
c001f32a:	fb                   	sti    
c001f32b:	eb b6                	jmp    c001f2e3 <Vm::mainloop2()>

c001f32d <Vm::mainloop3(unsigned long)>:
c001f32d:	83 ec 18             	sub    esp,0x18
c001f330:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f334:	fa                   	cli    
c001f335:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001f33b:	6a 02                	push   0x2
c001f33d:	c6 05 84 29 03 c0 01 	mov    BYTE PTR ds:0xc0032984,0x1
c001f344:	a3 80 29 03 c0       	mov    ds:0xc0032980,eax
c001f349:	e8 45 f5 ff ff       	call   c001e893 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f34e:	83 c4 1c             	add    esp,0x1c
c001f351:	eb 90                	jmp    c001f2e3 <Vm::mainloop2()>

c001f353 <Vm::initialise8086()>:
c001f353:	83 ec 0c             	sub    esp,0xc
c001f356:	68 80 00 00 00       	push   0x80
c001f35b:	6a 00                	push   0x0
c001f35d:	68 1d f3 01 c0       	push   0xc001f31d
c001f362:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c001f368:	e8 31 f1 ff ff       	call   c001e49e <Process::createThread(void (*)(void*), void*, int)>
c001f36d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f374:	a3 88 29 03 c0       	mov    ds:0xc0032988,eax
c001f379:	68 00 01 00 00       	push   0x100
c001f37e:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c001f383:	6a 00                	push   0x0
c001f385:	6a 00                	push   0x0
c001f387:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f38d:	e8 7c 31 ff ff       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f392:	83 c4 2c             	add    esp,0x2c
c001f395:	c3                   	ret    

c001f396 <Vm::finish8086()>:
c001f396:	53                   	push   ebx
c001f397:	83 ec 08             	sub    esp,0x8
c001f39a:	fa                   	cli    
c001f39b:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001f3a1:	80 3d 84 29 03 c0 00 	cmp    BYTE PTR ds:0xc0032984,0x0
c001f3a8:	75 15                	jne    c001f3bf <Vm::finish8086()+0x29>
c001f3aa:	e8 33 f3 ff ff       	call   c001e6e2 <schedule()>
c001f3af:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f3b4:	48                   	dec    eax
c001f3b5:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001f3ba:	75 de                	jne    c001f39a <Vm::finish8086()+0x4>
c001f3bc:	fb                   	sti    
c001f3bd:	eb db                	jmp    c001f39a <Vm::finish8086()+0x4>
c001f3bf:	83 ec 0c             	sub    esp,0xc
c001f3c2:	8b 1d 80 29 03 c0    	mov    ebx,DWORD PTR ds:0xc0032980
c001f3c8:	ff 35 88 29 03 c0    	push   DWORD PTR ds:0xc0032988
c001f3ce:	c6 05 84 29 03 c0 00 	mov    BYTE PTR ds:0xc0032984,0x0
c001f3d5:	e8 cc f7 ff ff       	call   c001eba6 <unblockTask(ThreadControlBlock*)>
c001f3da:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f3df:	83 c4 10             	add    esp,0x10
c001f3e2:	8d 50 ff             	lea    edx,[eax-0x1]
c001f3e5:	89 15 28 29 03 c0    	mov    DWORD PTR ds:0xc0032928,edx
c001f3eb:	85 d2                	test   edx,edx
c001f3ed:	75 01                	jne    c001f3f0 <Vm::finish8086()+0x5a>
c001f3ef:	fb                   	sti    
c001f3f0:	89 d8                	mov    eax,ebx
c001f3f2:	83 c4 08             	add    esp,0x8
c001f3f5:	5b                   	pop    ebx
c001f3f6:	c3                   	ret    

c001f3f7 <Vm::getOutput8086(unsigned char*)>:
c001f3f7:	57                   	push   edi
c001f3f8:	8b 0d 8c 29 03 c0    	mov    ecx,DWORD PTR ds:0xc003298c
c001f3fe:	56                   	push   esi
c001f3ff:	be a0 29 03 c0       	mov    esi,0xc00329a0
c001f404:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f408:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f40a:	a1 8c 29 03 c0       	mov    eax,ds:0xc003298c
c001f40f:	5e                   	pop    esi
c001f410:	c7 05 8c 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003298c,0x0
c001f41a:	5f                   	pop    edi
c001f41b:	c3                   	ret    

c001f41c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f41c:	55                   	push   ebp
c001f41d:	57                   	push   edi
c001f41e:	56                   	push   esi
c001f41f:	53                   	push   ebx
c001f420:	83 ec 2c             	sub    esp,0x2c
c001f423:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f427:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f42b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f42f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f433:	fa                   	cli    
c001f434:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c001f43a:	0f b6 35 85 29 03 c0 	movzx  esi,BYTE PTR ds:0xc0032985
c001f441:	89 f0                	mov    eax,esi
c001f443:	84 c0                	test   al,al
c001f445:	75 1d                	jne    c001f464 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f447:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f44b:	e8 92 f2 ff ff       	call   c001e6e2 <schedule()>
c001f450:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f455:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f459:	48                   	dec    eax
c001f45a:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001f45f:	75 d2                	jne    c001f433 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f461:	fb                   	sti    
c001f462:	eb cf                	jmp    c001f433 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f464:	a1 88 29 03 c0       	mov    eax,ds:0xc0032988
c001f469:	c7 05 8c 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003298c,0x0
c001f473:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f477:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f47b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f47f:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f483:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f487:	50                   	push   eax
c001f488:	6a 20                	push   0x20
c001f48a:	6a 00                	push   0x0
c001f48c:	68 a0 29 03 c0       	push   0xc00329a0
c001f491:	e8 ba 12 fe ff       	call   c0000750 <memset>
c001f496:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f49d:	e8 ea 03 ff ff       	call   c000f88c <malloc>
c001f4a2:	83 c4 0c             	add    esp,0xc
c001f4a5:	89 c3                	mov    ebx,eax
c001f4a7:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c001f4ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f4b1:	50                   	push   eax
c001f4b2:	e8 8f 3e ff ff       	call   c0013346 <File::File(char const*, Process*)>
c001f4b7:	83 c4 10             	add    esp,0x10
c001f4ba:	85 db                	test   ebx,ebx
c001f4bc:	75 0a                	jne    c001f4c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f4be:	83 ec 0c             	sub    esp,0xc
c001f4c1:	68 1f d5 02 c0       	push   0xc002d51f
c001f4c6:	eb 3e                	jmp    c001f506 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f4c8:	50                   	push   eax
c001f4c9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f4cd:	50                   	push   eax
c001f4ce:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f4d2:	50                   	push   eax
c001f4d3:	53                   	push   ebx
c001f4d4:	e8 7d 41 ff ff       	call   c0013656 <File::stat(unsigned long long*, bool*)>
c001f4d9:	83 c4 10             	add    esp,0x10
c001f4dc:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f4e1:	74 0a                	je     c001f4ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f4e3:	83 ec 0c             	sub    esp,0xc
c001f4e6:	68 33 d5 02 c0       	push   0xc002d533
c001f4eb:	eb 19                	jmp    c001f506 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f4ed:	51                   	push   ecx
c001f4ee:	51                   	push   ecx
c001f4ef:	6a 01                	push   0x1
c001f4f1:	53                   	push   ebx
c001f4f2:	e8 b3 3e ff ff       	call   c00133aa <File::open(FileOpenMode)>
c001f4f7:	83 c4 10             	add    esp,0x10
c001f4fa:	85 c0                	test   eax,eax
c001f4fc:	74 24                	je     c001f522 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f4fe:	83 ec 0c             	sub    esp,0xc
c001f501:	68 4c d5 02 c0       	push   0xc002d54c
c001f506:	e8 24 b4 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001f50b:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f510:	83 c4 10             	add    esp,0x10
c001f513:	48                   	dec    eax
c001f514:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001f519:	85 c0                	test   eax,eax
c001f51b:	75 01                	jne    c001f51e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f51d:	fb                   	sti    
c001f51e:	31 f6                	xor    esi,esi
c001f520:	eb 58                	jmp    c001f57a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f522:	0f b7 ed             	movzx  ebp,bp
c001f525:	50                   	push   eax
c001f526:	0f b7 ff             	movzx  edi,di
c001f529:	50                   	push   eax
c001f52a:	55                   	push   ebp
c001f52b:	57                   	push   edi
c001f52c:	e8 95 fd ff ff       	call   c001f2c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001f531:	5a                   	pop    edx
c001f532:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f534:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f538:	51                   	push   ecx
c001f539:	50                   	push   eax
c001f53a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f53e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f542:	53                   	push   ebx
c001f543:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f546:	83 c4 14             	add    esp,0x14
c001f549:	53                   	push   ebx
c001f54a:	e8 b9 3e ff ff       	call   c0013408 <File::close()>
c001f54f:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c001f554:	83 c4 10             	add    esp,0x10
c001f557:	48                   	dec    eax
c001f558:	c6 05 85 29 03 c0 00 	mov    BYTE PTR ds:0xc0032985,0x0
c001f55f:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c001f564:	85 c0                	test   eax,eax
c001f566:	75 01                	jne    c001f569 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f568:	fb                   	sti    
c001f569:	83 ec 0c             	sub    esp,0xc
c001f56c:	ff 35 88 29 03 c0    	push   DWORD PTR ds:0xc0032988
c001f572:	e8 2f f6 ff ff       	call   c001eba6 <unblockTask(ThreadControlBlock*)>
c001f577:	83 c4 10             	add    esp,0x10
c001f57a:	83 c4 2c             	add    esp,0x2c
c001f57d:	89 f0                	mov    eax,esi
c001f57f:	5b                   	pop    ebx
c001f580:	5e                   	pop    esi
c001f581:	5f                   	pop    edi
c001f582:	5d                   	pop    ebp
c001f583:	c3                   	ret    

c001f584 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f584:	57                   	push   edi
c001f585:	56                   	push   esi
c001f586:	53                   	push   ebx
c001f587:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f58b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f58f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f593:	83 e8 06             	sub    eax,0x6
c001f596:	0f b7 c0             	movzx  eax,ax
c001f599:	50                   	push   eax
c001f59a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f59f:	50                   	push   eax
c001f5a0:	e8 21 fd ff ff       	call   c001f2c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001f5a5:	5a                   	pop    edx
c001f5a6:	5e                   	pop    esi
c001f5a7:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f5aa:	8d 56 fa             	lea    edx,[esi-0x6]
c001f5ad:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f5b3:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f5b6:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f5b9:	83 c2 02             	add    edx,0x2
c001f5bc:	66 89 10             	mov    WORD PTR [eax],dx
c001f5bf:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f5c2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f5c6:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f5c9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f5cd:	89 d6                	mov    esi,edx
c001f5cf:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f5d5:	66 81 e6 ff fd       	and    si,0xfdff
c001f5da:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f5de:	74 07                	je     c001f5e7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f5e0:	89 d6                	mov    esi,edx
c001f5e2:	66 81 ce 00 02       	or     si,0x200
c001f5e7:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f5eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f5f0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f5f4:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f5fc:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f5ff:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f607:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f60a:	5b                   	pop    ebx
c001f60b:	5e                   	pop    esi
c001f60c:	5f                   	pop    edi
c001f60d:	c3                   	ret    

c001f60e <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f60e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f613:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f618:	c1 e0 04             	shl    eax,0x4
c001f61b:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f61e:	c3                   	ret    

c001f61f <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f61f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f624:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f629:	c1 e0 04             	shl    eax,0x4
c001f62c:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f630:	c3                   	ret    

c001f631 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f631:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f636:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f63b:	c1 e0 04             	shl    eax,0x4
c001f63e:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f641:	c3                   	ret    

c001f642 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f642:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f647:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f64c:	c1 e0 04             	shl    eax,0x4
c001f64f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f653:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f656:	c3                   	ret    

c001f657 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f657:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f65c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f661:	c1 e0 04             	shl    eax,0x4
c001f664:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f668:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f66c:	c3                   	ret    

c001f66d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f66d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f672:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f677:	c1 e0 04             	shl    eax,0x4
c001f67a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f67e:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f681:	c3                   	ret    

c001f682 <Vm::faultHandler(regs*)>:
c001f682:	55                   	push   ebp
c001f683:	57                   	push   edi
c001f684:	56                   	push   esi
c001f685:	53                   	push   ebx
c001f686:	83 ec 1c             	sub    esp,0x1c
c001f689:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f68d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f690:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f694:	0f b7 f8             	movzx  edi,ax
c001f697:	52                   	push   edx
c001f698:	0f b7 c0             	movzx  eax,ax
c001f69b:	50                   	push   eax
c001f69c:	e8 25 fc ff ff       	call   c001f2c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001f6a1:	5a                   	pop    edx
c001f6a2:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f6a5:	59                   	pop    ecx
c001f6a6:	89 c1                	mov    ecx,eax
c001f6a8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f6ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f6af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f6b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f6b8:	0f b7 c5             	movzx  eax,bp
c001f6bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f6c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f6c7:	e8 fa fb ff ff       	call   c001f2c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001f6cc:	5e                   	pop    esi
c001f6cd:	be 06 00 00 00       	mov    esi,0x6
c001f6d2:	5a                   	pop    edx
c001f6d3:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f6d8:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f6dd:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f6e0:	80 fa 9d             	cmp    dl,0x9d
c001f6e3:	0f 84 2c 02 00 00    	je     c001f915 <Vm::faultHandler(regs*)+0x293>
c001f6e9:	0f 87 91 00 00 00    	ja     c001f780 <Vm::faultHandler(regs*)+0xfe>
c001f6ef:	80 fa 66             	cmp    dl,0x66
c001f6f2:	0f 84 98 01 00 00    	je     c001f890 <Vm::faultHandler(regs*)+0x20e>
c001f6f8:	77 47                	ja     c001f741 <Vm::faultHandler(regs*)+0xbf>
c001f6fa:	80 fa 36             	cmp    dl,0x36
c001f6fd:	0f 84 80 01 00 00    	je     c001f883 <Vm::faultHandler(regs*)+0x201>
c001f703:	77 1a                	ja     c001f71f <Vm::faultHandler(regs*)+0x9d>
c001f705:	80 fa 26             	cmp    dl,0x26
c001f708:	0f 84 4e 01 00 00    	je     c001f85c <Vm::faultHandler(regs*)+0x1da>
c001f70e:	80 fa 2e             	cmp    dl,0x2e
c001f711:	0f 85 e2 05 00 00    	jne    c001fcf9 <Vm::faultHandler(regs*)+0x677>
c001f717:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f71a:	31 f6                	xor    esi,esi
c001f71c:	41                   	inc    ecx
c001f71d:	eb be                	jmp    c001f6dd <Vm::faultHandler(regs*)+0x5b>
c001f71f:	80 fa 64             	cmp    dl,0x64
c001f722:	0f 84 41 01 00 00    	je     c001f869 <Vm::faultHandler(regs*)+0x1e7>
c001f728:	0f 87 48 01 00 00    	ja     c001f876 <Vm::faultHandler(regs*)+0x1f4>
c001f72e:	80 fa 3e             	cmp    dl,0x3e
c001f731:	0f 85 c2 05 00 00    	jne    c001fcf9 <Vm::faultHandler(regs*)+0x677>
c001f737:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f73a:	be 01 00 00 00       	mov    esi,0x1
c001f73f:	eb db                	jmp    c001f71c <Vm::faultHandler(regs*)+0x9a>
c001f741:	80 fa 6d             	cmp    dl,0x6d
c001f744:	0f 84 ec 02 00 00    	je     c001fa36 <Vm::faultHandler(regs*)+0x3b4>
c001f74a:	77 17                	ja     c001f763 <Vm::faultHandler(regs*)+0xe1>
c001f74c:	80 fa 67             	cmp    dl,0x67
c001f74f:	0f 84 48 01 00 00    	je     c001f89d <Vm::faultHandler(regs*)+0x21b>
c001f755:	80 fa 6c             	cmp    dl,0x6c
c001f758:	0f 84 69 02 00 00    	je     c001f9c7 <Vm::faultHandler(regs*)+0x345>
c001f75e:	e9 96 05 00 00       	jmp    c001fcf9 <Vm::faultHandler(regs*)+0x677>
c001f763:	80 fa 6f             	cmp    dl,0x6f
c001f766:	0f 84 f4 03 00 00    	je     c001fb60 <Vm::faultHandler(regs*)+0x4de>
c001f76c:	0f 82 59 03 00 00    	jb     c001facb <Vm::faultHandler(regs*)+0x449>
c001f772:	80 fa 9c             	cmp    dl,0x9c
c001f775:	0f 84 2f 01 00 00    	je     c001f8aa <Vm::faultHandler(regs*)+0x228>
c001f77b:	e9 79 05 00 00       	jmp    c001fcf9 <Vm::faultHandler(regs*)+0x677>
c001f780:	80 fa ec             	cmp    dl,0xec
c001f783:	0f 84 14 05 00 00    	je     c001fc9d <Vm::faultHandler(regs*)+0x61b>
c001f789:	77 7b                	ja     c001f806 <Vm::faultHandler(regs*)+0x184>
c001f78b:	80 fa e4             	cmp    dl,0xe4
c001f78e:	0f 84 93 04 00 00    	je     c001fc27 <Vm::faultHandler(regs*)+0x5a5>
c001f794:	77 53                	ja     c001f7e9 <Vm::faultHandler(regs*)+0x167>
c001f796:	80 fa cd             	cmp    dl,0xcd
c001f799:	0f 84 d9 01 00 00    	je     c001f978 <Vm::faultHandler(regs*)+0x2f6>
c001f79f:	80 fa cf             	cmp    dl,0xcf
c001f7a2:	0f 85 51 05 00 00    	jne    c001fcf9 <Vm::faultHandler(regs*)+0x677>
c001f7a8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f7ab:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f7ae:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f7b2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f7b5:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f7b9:	81 ca 00 02 02 00    	or     edx,0x20200
c001f7bf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f7c2:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f7c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7cc:	66 c1 e8 09          	shr    ax,0x9
c001f7d0:	83 e0 01             	and    eax,0x1
c001f7d3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7d6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f7d9:	83 c0 06             	add    eax,0x6
c001f7dc:	25 ff ff 00 00       	and    eax,0xffff
c001f7e1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f7e4:	e9 0c 05 00 00       	jmp    c001fcf5 <Vm::faultHandler(regs*)+0x673>
c001f7e9:	80 fa e6             	cmp    dl,0xe6
c001f7ec:	0f 84 7f 04 00 00    	je     c001fc71 <Vm::faultHandler(regs*)+0x5ef>
c001f7f2:	0f 82 4b 04 00 00    	jb     c001fc43 <Vm::faultHandler(regs*)+0x5c1>
c001f7f8:	80 fa e7             	cmp    dl,0xe7
c001f7fb:	0f 84 87 04 00 00    	je     c001fc88 <Vm::faultHandler(regs*)+0x606>
c001f801:	e9 f3 04 00 00       	jmp    c001fcf9 <Vm::faultHandler(regs*)+0x677>
c001f806:	80 fa ef             	cmp    dl,0xef
c001f809:	0f 84 d1 04 00 00    	je     c001fce0 <Vm::faultHandler(regs*)+0x65e>
c001f80f:	77 28                	ja     c001f839 <Vm::faultHandler(regs*)+0x1b7>
c001f811:	80 fa ed             	cmp    dl,0xed
c001f814:	0f 84 9f 04 00 00    	je     c001fcb9 <Vm::faultHandler(regs*)+0x637>
c001f81a:	80 fa ee             	cmp    dl,0xee
c001f81d:	0f 85 d6 04 00 00    	jne    c001fcf9 <Vm::faultHandler(regs*)+0x677>
c001f823:	50                   	push   eax
c001f824:	50                   	push   eax
c001f825:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f829:	50                   	push   eax
c001f82a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f82e:	50                   	push   eax
c001f82f:	e8 5c fa ff ff       	call   c001f290 <Vm::outbv(unsigned short, unsigned char)>
c001f834:	e9 9f 04 00 00       	jmp    c001fcd8 <Vm::faultHandler(regs*)+0x656>
c001f839:	80 fa fa             	cmp    dl,0xfa
c001f83c:	0f 84 69 01 00 00    	je     c001f9ab <Vm::faultHandler(regs*)+0x329>
c001f842:	80 fa fb             	cmp    dl,0xfb
c001f845:	0f 84 6e 01 00 00    	je     c001f9b9 <Vm::faultHandler(regs*)+0x337>
c001f84b:	80 fa f3             	cmp    dl,0xf3
c001f84e:	0f 85 a5 04 00 00    	jne    c001fcf9 <Vm::faultHandler(regs*)+0x677>
c001f854:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f857:	e9 c0 fe ff ff       	jmp    c001f71c <Vm::faultHandler(regs*)+0x9a>
c001f85c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f85f:	be 02 00 00 00       	mov    esi,0x2
c001f864:	e9 b3 fe ff ff       	jmp    c001f71c <Vm::faultHandler(regs*)+0x9a>
c001f869:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f86c:	be 03 00 00 00       	mov    esi,0x3
c001f871:	e9 a6 fe ff ff       	jmp    c001f71c <Vm::faultHandler(regs*)+0x9a>
c001f876:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f879:	be 04 00 00 00       	mov    esi,0x4
c001f87e:	e9 99 fe ff ff       	jmp    c001f71c <Vm::faultHandler(regs*)+0x9a>
c001f883:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f886:	be 05 00 00 00       	mov    esi,0x5
c001f88b:	e9 8c fe ff ff       	jmp    c001f71c <Vm::faultHandler(regs*)+0x9a>
c001f890:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f893:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f898:	e9 7f fe ff ff       	jmp    c001f71c <Vm::faultHandler(regs*)+0x9a>
c001f89d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f8a0:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f8a5:	e9 72 fe ff ff       	jmp    c001f71c <Vm::faultHandler(regs*)+0x9a>
c001f8aa:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f8ad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f8b1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f8b6:	74 30                	je     c001f8e8 <Vm::faultHandler(regs*)+0x266>
c001f8b8:	83 e9 04             	sub    ecx,0x4
c001f8bb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f8c1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f8c7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f8ca:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f8cd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f8d3:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f8d7:	0f 84 15 04 00 00    	je     c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001f8dd:	80 ce 02             	or     dh,0x2
c001f8e0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f8e3:	e9 0a 04 00 00       	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001f8e8:	83 e9 02             	sub    ecx,0x2
c001f8eb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f8f1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f8f4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f8f8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f8fe:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f902:	74 05                	je     c001f909 <Vm::faultHandler(regs*)+0x287>
c001f904:	80 ce 02             	or     dh,0x2
c001f907:	eb 03                	jmp    c001f90c <Vm::faultHandler(regs*)+0x28a>
c001f909:	80 e6 fd             	and    dh,0xfd
c001f90c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f910:	e9 dd 03 00 00       	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001f915:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f91a:	74 2a                	je     c001f946 <Vm::faultHandler(regs*)+0x2c4>
c001f91c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f91e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f924:	81 ca 00 02 02 00    	or     edx,0x20200
c001f92a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f92d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f92f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f935:	c1 e8 09             	shr    eax,0x9
c001f938:	83 e0 01             	and    eax,0x1
c001f93b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f93e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f941:	83 c0 04             	add    eax,0x4
c001f944:	eb 25                	jmp    c001f96b <Vm::faultHandler(regs*)+0x2e9>
c001f946:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f949:	81 ca 00 02 02 00    	or     edx,0x20200
c001f94f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f952:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f955:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f95b:	66 c1 e8 09          	shr    ax,0x9
c001f95f:	83 e0 01             	and    eax,0x1
c001f962:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f965:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f968:	83 c0 02             	add    eax,0x2
c001f96b:	25 ff ff 00 00       	and    eax,0xffff
c001f970:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f973:	e9 7a 03 00 00       	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001f978:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f97c:	3c ee                	cmp    al,0xee
c001f97e:	75 10                	jne    c001f990 <Vm::faultHandler(regs*)+0x30e>
c001f980:	83 ec 0c             	sub    esp,0xc
c001f983:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f986:	e8 a2 f9 ff ff       	call   c001f32d <Vm::mainloop3(unsigned long)>
c001f98b:	e9 4b 03 00 00       	jmp    c001fcdb <Vm::faultHandler(regs*)+0x659>
c001f990:	83 ec 0c             	sub    esp,0xc
c001f993:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f99b:	51                   	push   ecx
c001f99c:	50                   	push   eax
c001f99d:	53                   	push   ebx
c001f99e:	e8 e1 fb ff ff       	call   c001f584 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f9a3:	83 c4 20             	add    esp,0x20
c001f9a6:	e9 4a 03 00 00       	jmp    c001fcf5 <Vm::faultHandler(regs*)+0x673>
c001f9ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f9b0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f9b4:	e9 39 03 00 00       	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001f9b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f9be:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f9c2:	e9 2b 03 00 00       	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001f9c7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f9ca:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f9cf:	74 2b                	je     c001f9fc <Vm::faultHandler(regs*)+0x37a>
c001f9d1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f9d8:	76 22                	jbe    c001f9fc <Vm::faultHandler(regs*)+0x37a>
c001f9da:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f9de:	50                   	push   eax
c001f9df:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f9e3:	50                   	push   eax
c001f9e4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f9e8:	50                   	push   eax
c001f9e9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f9ed:	50                   	push   eax
c001f9ee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f9f2:	50                   	push   eax
c001f9f3:	6a 6c                	push   0x6c
c001f9f5:	6a 6c                	push   0x6c
c001f9f7:	e9 b9 01 00 00       	jmp    c001fbb5 <Vm::faultHandler(regs*)+0x533>
c001f9fc:	83 ec 0c             	sub    esp,0xc
c001f9ff:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001fa03:	0f b7 f6             	movzx  esi,si
c001fa06:	50                   	push   eax
c001fa07:	e8 71 f8 ff ff       	call   c001f27d <Vm::inbv(unsigned short)>
c001fa0c:	83 c4 0c             	add    esp,0xc
c001fa0f:	0f b6 c0             	movzx  eax,al
c001fa12:	50                   	push   eax
c001fa13:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001fa17:	50                   	push   eax
c001fa18:	56                   	push   esi
c001fa19:	e8 24 fc ff ff       	call   c001f642 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001fa1e:	83 c4 10             	add    esp,0x10
c001fa21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fa24:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001fa28:	74 03                	je     c001fa2d <Vm::faultHandler(regs*)+0x3ab>
c001fa2a:	48                   	dec    eax
c001fa2b:	eb 01                	jmp    c001fa2e <Vm::faultHandler(regs*)+0x3ac>
c001fa2d:	40                   	inc    eax
c001fa2e:	0f b7 c0             	movzx  eax,ax
c001fa31:	e9 8d 00 00 00       	jmp    c001fac3 <Vm::faultHandler(regs*)+0x441>
c001fa36:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001fa39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fa3c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001fa41:	74 29                	je     c001fa6c <Vm::faultHandler(regs*)+0x3ea>
c001fa43:	3d ff ff 00 00       	cmp    eax,0xffff
c001fa48:	76 22                	jbe    c001fa6c <Vm::faultHandler(regs*)+0x3ea>
c001fa4a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001fa4e:	50                   	push   eax
c001fa4f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001fa53:	50                   	push   eax
c001fa54:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001fa58:	50                   	push   eax
c001fa59:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001fa5d:	50                   	push   eax
c001fa5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001fa62:	50                   	push   eax
c001fa63:	6a 6d                	push   0x6d
c001fa65:	6a 6d                	push   0x6d
c001fa67:	e9 49 01 00 00       	jmp    c001fbb5 <Vm::faultHandler(regs*)+0x533>
c001fa6c:	0f b7 c8             	movzx  ecx,ax
c001fa6f:	0f b7 f6             	movzx  esi,si
c001fa72:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001fa75:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001fa7a:	74 20                	je     c001fa9c <Vm::faultHandler(regs*)+0x41a>
c001fa7c:	ed                   	in     eax,dx
c001fa7d:	55                   	push   ebp
c001fa7e:	50                   	push   eax
c001fa7f:	51                   	push   ecx
c001fa80:	56                   	push   esi
c001fa81:	e8 e7 fb ff ff       	call   c001f66d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001fa86:	83 c4 10             	add    esp,0x10
c001fa89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fa8c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001fa90:	74 05                	je     c001fa97 <Vm::faultHandler(regs*)+0x415>
c001fa92:	83 e8 04             	sub    eax,0x4
c001fa95:	eb 27                	jmp    c001fabe <Vm::faultHandler(regs*)+0x43c>
c001fa97:	83 c0 04             	add    eax,0x4
c001fa9a:	eb 22                	jmp    c001fabe <Vm::faultHandler(regs*)+0x43c>
c001fa9c:	66 ed                	in     ax,dx
c001fa9e:	0f b7 c0             	movzx  eax,ax
c001faa1:	57                   	push   edi
c001faa2:	50                   	push   eax
c001faa3:	51                   	push   ecx
c001faa4:	56                   	push   esi
c001faa5:	e8 ad fb ff ff       	call   c001f657 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001faaa:	83 c4 10             	add    esp,0x10
c001faad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fab0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001fab4:	74 05                	je     c001fabb <Vm::faultHandler(regs*)+0x439>
c001fab6:	83 e8 02             	sub    eax,0x2
c001fab9:	eb 03                	jmp    c001fabe <Vm::faultHandler(regs*)+0x43c>
c001fabb:	83 c0 02             	add    eax,0x2
c001fabe:	25 ff ff 00 00       	and    eax,0xffff
c001fac3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001fac6:	e9 27 02 00 00       	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001facb:	8d 46 ff             	lea    eax,[esi-0x1]
c001face:	3c 05                	cmp    al,0x5
c001fad0:	77 24                	ja     c001faf6 <Vm::faultHandler(regs*)+0x474>
c001fad2:	0f b6 c0             	movzx  eax,al
c001fad5:	ff 24 85 c0 d5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2a40]
c001fadc:	0f b7 fd             	movzx  edi,bp
c001fadf:	eb 15                	jmp    c001faf6 <Vm::faultHandler(regs*)+0x474>
c001fae1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001fae5:	eb 0f                	jmp    c001faf6 <Vm::faultHandler(regs*)+0x474>
c001fae7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001faeb:	eb 09                	jmp    c001faf6 <Vm::faultHandler(regs*)+0x474>
c001faed:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001faf1:	eb 03                	jmp    c001faf6 <Vm::faultHandler(regs*)+0x474>
c001faf3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001faf6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001faf9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001fafe:	74 29                	je     c001fb29 <Vm::faultHandler(regs*)+0x4a7>
c001fb00:	3d ff ff 00 00       	cmp    eax,0xffff
c001fb05:	76 22                	jbe    c001fb29 <Vm::faultHandler(regs*)+0x4a7>
c001fb07:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001fb0b:	50                   	push   eax
c001fb0c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001fb10:	50                   	push   eax
c001fb11:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001fb15:	50                   	push   eax
c001fb16:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001fb1a:	50                   	push   eax
c001fb1b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001fb1f:	50                   	push   eax
c001fb20:	6a 6e                	push   0x6e
c001fb22:	6a 6e                	push   0x6e
c001fb24:	e9 8c 00 00 00       	jmp    c001fbb5 <Vm::faultHandler(regs*)+0x533>
c001fb29:	0f b7 c0             	movzx  eax,ax
c001fb2c:	52                   	push   edx
c001fb2d:	52                   	push   edx
c001fb2e:	50                   	push   eax
c001fb2f:	57                   	push   edi
c001fb30:	e8 d9 fa ff ff       	call   c001f60e <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fb35:	59                   	pop    ecx
c001fb36:	0f b6 c0             	movzx  eax,al
c001fb39:	5e                   	pop    esi
c001fb3a:	50                   	push   eax
c001fb3b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001fb3f:	50                   	push   eax
c001fb40:	e8 4b f7 ff ff       	call   c001f290 <Vm::outbv(unsigned short, unsigned char)>
c001fb45:	83 c4 10             	add    esp,0x10
c001fb48:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fb4b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001fb4f:	74 03                	je     c001fb54 <Vm::faultHandler(regs*)+0x4d2>
c001fb51:	48                   	dec    eax
c001fb52:	eb 01                	jmp    c001fb55 <Vm::faultHandler(regs*)+0x4d3>
c001fb54:	40                   	inc    eax
c001fb55:	0f b7 c0             	movzx  eax,ax
c001fb58:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001fb5b:	e9 92 01 00 00       	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001fb60:	8d 46 ff             	lea    eax,[esi-0x1]
c001fb63:	3c 05                	cmp    al,0x5
c001fb65:	77 1f                	ja     c001fb86 <Vm::faultHandler(regs*)+0x504>
c001fb67:	0f b6 c0             	movzx  eax,al
c001fb6a:	ff 24 85 d8 d5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2a28]
c001fb71:	89 ef                	mov    edi,ebp
c001fb73:	eb 11                	jmp    c001fb86 <Vm::faultHandler(regs*)+0x504>
c001fb75:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001fb78:	eb 0c                	jmp    c001fb86 <Vm::faultHandler(regs*)+0x504>
c001fb7a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001fb7d:	eb 07                	jmp    c001fb86 <Vm::faultHandler(regs*)+0x504>
c001fb7f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001fb82:	eb 02                	jmp    c001fb86 <Vm::faultHandler(regs*)+0x504>
c001fb84:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001fb86:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001fb89:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001fb8e:	74 37                	je     c001fbc7 <Vm::faultHandler(regs*)+0x545>
c001fb90:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001fb96:	76 2f                	jbe    c001fbc7 <Vm::faultHandler(regs*)+0x545>
c001fb98:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001fb9c:	50                   	push   eax
c001fb9d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001fba1:	50                   	push   eax
c001fba2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001fba6:	50                   	push   eax
c001fba7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001fbab:	50                   	push   eax
c001fbac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001fbb0:	50                   	push   eax
c001fbb1:	6a 6f                	push   0x6f
c001fbb3:	6a 6f                	push   0x6f
c001fbb5:	68 65 d5 02 c0       	push   0xc002d565
c001fbba:	e8 28 32 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001fbbf:	83 c4 20             	add    esp,0x20
c001fbc2:	e9 86 01 00 00       	jmp    c001fd4d <Vm::faultHandler(regs*)+0x6cb>
c001fbc7:	0f b7 d7             	movzx  edx,di
c001fbca:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001fbcd:	0f b7 c6             	movzx  eax,si
c001fbd0:	81 e1 00 04 00 00    	and    ecx,0x400
c001fbd6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001fbd9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001fbde:	74 1d                	je     c001fbfd <Vm::faultHandler(regs*)+0x57b>
c001fbe0:	55                   	push   ebp
c001fbe1:	55                   	push   ebp
c001fbe2:	50                   	push   eax
c001fbe3:	52                   	push   edx
c001fbe4:	e8 48 fa ff ff       	call   c001f631 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fbe9:	83 c4 10             	add    esp,0x10
c001fbec:	89 fa                	mov    edx,edi
c001fbee:	ef                   	out    dx,eax
c001fbef:	85 c9                	test   ecx,ecx
c001fbf1:	74 05                	je     c001fbf8 <Vm::faultHandler(regs*)+0x576>
c001fbf3:	83 ee 04             	sub    esi,0x4
c001fbf6:	eb 21                	jmp    c001fc19 <Vm::faultHandler(regs*)+0x597>
c001fbf8:	83 c6 04             	add    esi,0x4
c001fbfb:	eb 1c                	jmp    c001fc19 <Vm::faultHandler(regs*)+0x597>
c001fbfd:	55                   	push   ebp
c001fbfe:	55                   	push   ebp
c001fbff:	50                   	push   eax
c001fc00:	52                   	push   edx
c001fc01:	e8 19 fa ff ff       	call   c001f61f <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fc06:	83 c4 10             	add    esp,0x10
c001fc09:	89 fa                	mov    edx,edi
c001fc0b:	66 ef                	out    dx,ax
c001fc0d:	85 c9                	test   ecx,ecx
c001fc0f:	74 05                	je     c001fc16 <Vm::faultHandler(regs*)+0x594>
c001fc11:	83 ee 02             	sub    esi,0x2
c001fc14:	eb 03                	jmp    c001fc19 <Vm::faultHandler(regs*)+0x597>
c001fc16:	83 c6 02             	add    esi,0x2
c001fc19:	81 e6 ff ff 00 00    	and    esi,0xffff
c001fc1f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001fc22:	e9 cb 00 00 00       	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001fc27:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001fc2e:	83 ec 0c             	sub    esp,0xc
c001fc31:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001fc35:	50                   	push   eax
c001fc36:	e8 42 f6 ff ff       	call   c001f27d <Vm::inbv(unsigned short)>
c001fc3b:	0f b6 c0             	movzx  eax,al
c001fc3e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001fc41:	eb 3f                	jmp    c001fc82 <Vm::faultHandler(regs*)+0x600>
c001fc43:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001fc48:	74 07                	je     c001fc51 <Vm::faultHandler(regs*)+0x5cf>
c001fc4a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001fc4e:	ed                   	in     eax,dx
c001fc4f:	eb 14                	jmp    c001fc65 <Vm::faultHandler(regs*)+0x5e3>
c001fc51:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001fc54:	66 31 f6             	xor    si,si
c001fc57:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001fc5a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001fc5e:	66 ed                	in     ax,dx
c001fc60:	0f b7 c0             	movzx  eax,ax
c001fc63:	09 f0                	or     eax,esi
c001fc65:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001fc68:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc6c:	e9 84 00 00 00       	jmp    c001fcf5 <Vm::faultHandler(regs*)+0x673>
c001fc71:	52                   	push   edx
c001fc72:	52                   	push   edx
c001fc73:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001fc77:	50                   	push   eax
c001fc78:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001fc7c:	50                   	push   eax
c001fc7d:	e8 0e f6 ff ff       	call   c001f290 <Vm::outbv(unsigned short, unsigned char)>
c001fc82:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc86:	eb 53                	jmp    c001fcdb <Vm::faultHandler(regs*)+0x659>
c001fc88:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001fc8b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001fc8f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001fc94:	74 03                	je     c001fc99 <Vm::faultHandler(regs*)+0x617>
c001fc96:	ef                   	out    dx,eax
c001fc97:	eb cf                	jmp    c001fc68 <Vm::faultHandler(regs*)+0x5e6>
c001fc99:	66 ef                	out    dx,ax
c001fc9b:	eb cb                	jmp    c001fc68 <Vm::faultHandler(regs*)+0x5e6>
c001fc9d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001fca4:	83 ec 0c             	sub    esp,0xc
c001fca7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001fcab:	50                   	push   eax
c001fcac:	e8 cc f5 ff ff       	call   c001f27d <Vm::inbv(unsigned short)>
c001fcb1:	0f b6 c0             	movzx  eax,al
c001fcb4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001fcb7:	eb 1f                	jmp    c001fcd8 <Vm::faultHandler(regs*)+0x656>
c001fcb9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001fcbc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001fcc1:	74 03                	je     c001fcc6 <Vm::faultHandler(regs*)+0x644>
c001fcc3:	ed                   	in     eax,dx
c001fcc4:	eb 0d                	jmp    c001fcd3 <Vm::faultHandler(regs*)+0x651>
c001fcc6:	66 ed                	in     ax,dx
c001fcc8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001fccb:	0f b7 c0             	movzx  eax,ax
c001fcce:	66 31 d2             	xor    dx,dx
c001fcd1:	09 d0                	or     eax,edx
c001fcd3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001fcd6:	eb 1a                	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001fcd8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001fcdb:	83 c4 10             	add    esp,0x10
c001fcde:	eb 15                	jmp    c001fcf5 <Vm::faultHandler(regs*)+0x673>
c001fce0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001fce3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001fce6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001fceb:	74 03                	je     c001fcf0 <Vm::faultHandler(regs*)+0x66e>
c001fced:	ef                   	out    dx,eax
c001fcee:	eb 02                	jmp    c001fcf2 <Vm::faultHandler(regs*)+0x670>
c001fcf0:	66 ef                	out    dx,ax
c001fcf2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001fcf5:	b0 01                	mov    al,0x1
c001fcf7:	eb 56                	jmp    c001fd4f <Vm::faultHandler(regs*)+0x6cd>
c001fcf9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001fcfd:	50                   	push   eax
c001fcfe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001fd02:	50                   	push   eax
c001fd03:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001fd07:	50                   	push   eax
c001fd08:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001fd0c:	50                   	push   eax
c001fd0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001fd11:	50                   	push   eax
c001fd12:	52                   	push   edx
c001fd13:	52                   	push   edx
c001fd14:	68 92 d5 02 c0       	push   0xc002d592
c001fd19:	e8 c9 30 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c001fd1e:	83 c4 20             	add    esp,0x20
c001fd21:	83 ec 0c             	sub    esp,0xc
c001fd24:	6a 60                	push   0x60
c001fd26:	e8 52 f5 ff ff       	call   c001f27d <Vm::inbv(unsigned short)>
c001fd2b:	83 c4 10             	add    esp,0x10
c001fd2e:	3c 1c                	cmp    al,0x1c
c001fd30:	74 04                	je     c001fd36 <Vm::faultHandler(regs*)+0x6b4>
c001fd32:	3c 5a                	cmp    al,0x5a
c001fd34:	75 eb                	jne    c001fd21 <Vm::faultHandler(regs*)+0x69f>
c001fd36:	3c 5a                	cmp    al,0x5a
c001fd38:	74 04                	je     c001fd3e <Vm::faultHandler(regs*)+0x6bc>
c001fd3a:	3c 1c                	cmp    al,0x1c
c001fd3c:	75 0f                	jne    c001fd4d <Vm::faultHandler(regs*)+0x6cb>
c001fd3e:	83 ec 0c             	sub    esp,0xc
c001fd41:	6a 60                	push   0x60
c001fd43:	e8 35 f5 ff ff       	call   c001f27d <Vm::inbv(unsigned short)>
c001fd48:	83 c4 10             	add    esp,0x10
c001fd4b:	eb e9                	jmp    c001fd36 <Vm::faultHandler(regs*)+0x6b4>
c001fd4d:	31 c0                	xor    eax,eax
c001fd4f:	83 c4 1c             	add    esp,0x1c
c001fd52:	5b                   	pop    ebx
c001fd53:	5e                   	pop    esi
c001fd54:	5f                   	pop    edi
c001fd55:	5d                   	pop    ebp
c001fd56:	c3                   	ret    

c001fd57 <Vm::fpuInternalTo32(unsigned long long)>:
c001fd57:	57                   	push   edi
c001fd58:	56                   	push   esi
c001fd59:	53                   	push   ebx
c001fd5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd62:	89 d6                	mov    esi,edx
c001fd64:	89 d7                	mov    edi,edx
c001fd66:	89 c1                	mov    ecx,eax
c001fd68:	c1 ef 14             	shr    edi,0x14
c001fd6b:	89 d3                	mov    ebx,edx
c001fd6d:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fd73:	31 d2                	xor    edx,edx
c001fd75:	89 f8                	mov    eax,edi
c001fd77:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fd7d:	bf ff 00 00 00       	mov    edi,0xff
c001fd82:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fd87:	83 d2 ff             	adc    edx,0xffffffff
c001fd8a:	39 c7                	cmp    edi,eax
c001fd8c:	bf 00 00 00 00       	mov    edi,0x0
c001fd91:	19 d7                	sbb    edi,edx
c001fd93:	72 15                	jb     c001fdaa <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fd95:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fd99:	c1 e0 17             	shl    eax,0x17
c001fd9c:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fda2:	09 f1                	or     ecx,esi
c001fda4:	09 c1                	or     ecx,eax
c001fda6:	89 cf                	mov    edi,ecx
c001fda8:	eb 02                	jmp    c001fdac <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fdaa:	31 ff                	xor    edi,edi
c001fdac:	89 f8                	mov    eax,edi
c001fdae:	5b                   	pop    ebx
c001fdaf:	5e                   	pop    esi
c001fdb0:	5f                   	pop    edi
c001fdb1:	c3                   	ret    

c001fdb2 <Vm::fpuInternalTo64(unsigned long long)>:
c001fdb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fdba:	c3                   	ret    

c001fdbb <Vm::fpu32ToInternal(unsigned int)>:
c001fdbb:	57                   	push   edi
c001fdbc:	31 ff                	xor    edi,edi
c001fdbe:	56                   	push   esi
c001fdbf:	53                   	push   ebx
c001fdc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fdc4:	89 cb                	mov    ebx,ecx
c001fdc6:	89 ce                	mov    esi,ecx
c001fdc8:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fdce:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fdd4:	c1 e9 17             	shr    ecx,0x17
c001fdd7:	89 f0                	mov    eax,esi
c001fdd9:	0f b6 d1             	movzx  edx,cl
c001fddc:	81 c2 80 03 00 00    	add    edx,0x380
c001fde2:	89 d1                	mov    ecx,edx
c001fde4:	89 fa                	mov    edx,edi
c001fde6:	c1 e1 14             	shl    ecx,0x14
c001fde9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fded:	c1 e0 1d             	shl    eax,0x1d
c001fdf0:	89 d7                	mov    edi,edx
c001fdf2:	89 c6                	mov    esi,eax
c001fdf4:	89 ca                	mov    edx,ecx
c001fdf6:	89 f0                	mov    eax,esi
c001fdf8:	09 fa                	or     edx,edi
c001fdfa:	09 da                	or     edx,ebx
c001fdfc:	5b                   	pop    ebx
c001fdfd:	5e                   	pop    esi
c001fdfe:	5f                   	pop    edi
c001fdff:	c3                   	ret    

c001fe00 <Vm::fpu64ToInternal(unsigned long long)>:
c001fe00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe08:	c3                   	ret    

c001fe09 <Vm::fpuFloatToLong(unsigned long long)>:
c001fe09:	57                   	push   edi
c001fe0a:	31 c0                	xor    eax,eax
c001fe0c:	56                   	push   esi
c001fe0d:	31 d2                	xor    edx,edx
c001fe0f:	53                   	push   ebx
c001fe10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fe14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fe18:	89 d9                	mov    ecx,ebx
c001fe1a:	c1 e9 14             	shr    ecx,0x14
c001fe1d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fe23:	89 cf                	mov    edi,ecx
c001fe25:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fe2b:	78 33                	js     c001fe60 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fe2d:	89 d9                	mov    ecx,ebx
c001fe2f:	89 f0                	mov    eax,esi
c001fe31:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fe37:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fe3d:	89 ca                	mov    edx,ecx
c001fe3f:	b9 34 00 00 00       	mov    ecx,0x34
c001fe44:	29 f9                	sub    ecx,edi
c001fe46:	0f ad d0             	shrd   eax,edx,cl
c001fe49:	d3 fa                	sar    edx,cl
c001fe4b:	f6 c1 20             	test   cl,0x20
c001fe4e:	74 05                	je     c001fe55 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fe50:	89 d0                	mov    eax,edx
c001fe52:	c1 fa 1f             	sar    edx,0x1f
c001fe55:	85 db                	test   ebx,ebx
c001fe57:	79 07                	jns    c001fe60 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fe59:	f7 d8                	neg    eax
c001fe5b:	83 d2 00             	adc    edx,0x0
c001fe5e:	f7 da                	neg    edx
c001fe60:	5b                   	pop    ebx
c001fe61:	5e                   	pop    esi
c001fe62:	5f                   	pop    edi
c001fe63:	c3                   	ret    

c001fe64 <Vm::fpuULongToFloat(unsigned long long)>:
c001fe64:	57                   	push   edi
c001fe65:	31 c9                	xor    ecx,ecx
c001fe67:	56                   	push   esi
c001fe68:	53                   	push   ebx
c001fe69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fe6d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fe71:	0f ba e7 14          	bt     edi,0x14
c001fe75:	72 07                	jb     c001fe7e <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fe77:	01 f6                	add    esi,esi
c001fe79:	11 ff                	adc    edi,edi
c001fe7b:	41                   	inc    ecx
c001fe7c:	eb f3                	jmp    c001fe71 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fe7e:	89 fa                	mov    edx,edi
c001fe80:	89 f0                	mov    eax,esi
c001fe82:	bb 33 04 00 00       	mov    ebx,0x433
c001fe87:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fe8d:	29 cb                	sub    ebx,ecx
c001fe8f:	89 d9                	mov    ecx,ebx
c001fe91:	5b                   	pop    ebx
c001fe92:	c1 e1 14             	shl    ecx,0x14
c001fe95:	5e                   	pop    esi
c001fe96:	09 ca                	or     edx,ecx
c001fe98:	5f                   	pop    edi
c001fe99:	c3                   	ret    

c001fe9a <Vm::fpuLongToFloat(long long)>:
c001fe9a:	56                   	push   esi
c001fe9b:	31 c0                	xor    eax,eax
c001fe9d:	53                   	push   ebx
c001fe9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fea2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fea6:	39 c8                	cmp    eax,ecx
c001fea8:	19 d8                	sbb    eax,ebx
c001feaa:	7d 04                	jge    c001feb0 <Vm::fpuLongToFloat(long long)+0x16>
c001feac:	31 f6                	xor    esi,esi
c001feae:	eb 0c                	jmp    c001febc <Vm::fpuLongToFloat(long long)+0x22>
c001feb0:	f7 d9                	neg    ecx
c001feb2:	be 01 00 00 00       	mov    esi,0x1
c001feb7:	83 d3 00             	adc    ebx,0x0
c001feba:	f7 db                	neg    ebx
c001febc:	31 c0                	xor    eax,eax
c001febe:	0f ba e3 14          	bt     ebx,0x14
c001fec2:	72 07                	jb     c001fecb <Vm::fpuLongToFloat(long long)+0x31>
c001fec4:	01 c9                	add    ecx,ecx
c001fec6:	11 db                	adc    ebx,ebx
c001fec8:	40                   	inc    eax
c001fec9:	eb f3                	jmp    c001febe <Vm::fpuLongToFloat(long long)+0x24>
c001fecb:	ba 33 04 00 00       	mov    edx,0x433
c001fed0:	29 c2                	sub    edx,eax
c001fed2:	89 c8                	mov    eax,ecx
c001fed4:	c1 e2 14             	shl    edx,0x14
c001fed7:	89 d9                	mov    ecx,ebx
c001fed9:	89 f3                	mov    ebx,esi
c001fedb:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fee1:	09 ca                	or     edx,ecx
c001fee3:	84 db                	test   bl,bl
c001fee5:	74 06                	je     c001feed <Vm::fpuLongToFloat(long long)+0x53>
c001fee7:	81 ca 00 00 00 80    	or     edx,0x80000000
c001feed:	5b                   	pop    ebx
c001feee:	5e                   	pop    esi
c001feef:	c3                   	ret    

c001fef0 <Vm::fpuGet0()>:
c001fef0:	31 c0                	xor    eax,eax
c001fef2:	31 d2                	xor    edx,edx
c001fef4:	c3                   	ret    

c001fef5 <Vm::fpuGet1()>:
c001fef5:	b8 01 00 00 00       	mov    eax,0x1
c001fefa:	31 d2                	xor    edx,edx
c001fefc:	c3                   	ret    

c001fefd <Vm::fpuGetPi()>:
c001fefd:	b8 03 00 00 00       	mov    eax,0x3
c001ff02:	31 d2                	xor    edx,edx
c001ff04:	c3                   	ret    

c001ff05 <Vm::fpuGetLog2E()>:
c001ff05:	83 ec 18             	sub    esp,0x18
c001ff08:	68 f0 d5 02 c0       	push   0xc002d5f0
c001ff0d:	e8 1d aa ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001ff12:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ff17:	31 d2                	xor    edx,edx
c001ff19:	83 c4 1c             	add    esp,0x1c
c001ff1c:	c3                   	ret    

c001ff1d <Vm::fpuGetLogE2()>:
c001ff1d:	83 ec 18             	sub    esp,0x18
c001ff20:	68 fc d5 02 c0       	push   0xc002d5fc
c001ff25:	e8 05 aa ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001ff2a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ff2f:	31 d2                	xor    edx,edx
c001ff31:	83 c4 1c             	add    esp,0x1c
c001ff34:	c3                   	ret    

c001ff35 <Vm::fpuGetLog210()>:
c001ff35:	83 ec 18             	sub    esp,0x18
c001ff38:	68 08 d6 02 c0       	push   0xc002d608
c001ff3d:	e8 ed a9 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001ff42:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ff47:	31 d2                	xor    edx,edx
c001ff49:	83 c4 1c             	add    esp,0x1c
c001ff4c:	c3                   	ret    

c001ff4d <Vm::fpuGetLog102()>:
c001ff4d:	83 ec 18             	sub    esp,0x18
c001ff50:	68 15 d6 02 c0       	push   0xc002d615
c001ff55:	e8 d5 a9 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c001ff5a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ff5f:	31 d2                	xor    edx,edx
c001ff61:	83 c4 1c             	add    esp,0x1c
c001ff64:	c3                   	ret    

c001ff65 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ff65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff69:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ff6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff71:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ff75:	0f 92 c0             	setb   al
c001ff78:	c3                   	ret    

c001ff79 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ff79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ff7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff81:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ff85:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ff89:	09 c2                	or     edx,eax
c001ff8b:	0f 94 c0             	sete   al
c001ff8e:	c3                   	ret    

c001ff8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ff8f:	57                   	push   edi
c001ff90:	56                   	push   esi
c001ff91:	53                   	push   ebx
c001ff92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ff96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff9a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ff9e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ffa2:	57                   	push   edi
c001ffa3:	56                   	push   esi
c001ffa4:	53                   	push   ebx
c001ffa5:	51                   	push   ecx
c001ffa6:	e8 ce ff ff ff       	call   c001ff79 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ffab:	83 c4 10             	add    esp,0x10
c001ffae:	88 c2                	mov    dl,al
c001ffb0:	31 c0                	xor    eax,eax
c001ffb2:	84 d2                	test   dl,dl
c001ffb4:	75 0c                	jne    c001ffc2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ffb6:	57                   	push   edi
c001ffb7:	56                   	push   esi
c001ffb8:	53                   	push   ebx
c001ffb9:	51                   	push   ecx
c001ffba:	e8 a6 ff ff ff       	call   c001ff65 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	83 e0 01             	and    eax,0x1
c001ffc5:	5b                   	pop    ebx
c001ffc6:	88 c1                	mov    cl,al
c001ffc8:	83 e2 01             	and    edx,0x1
c001ffcb:	a0 c1 29 03 c0       	mov    al,ds:0xc00329c1
c001ffd0:	c1 e2 06             	shl    edx,0x6
c001ffd3:	83 e0 ba             	and    eax,0xffffffba
c001ffd6:	5e                   	pop    esi
c001ffd7:	09 c8                	or     eax,ecx
c001ffd9:	5f                   	pop    edi
c001ffda:	09 d0                	or     eax,edx
c001ffdc:	a2 c1 29 03 c0       	mov    ds:0xc00329c1,al
c001ffe1:	c3                   	ret    

c001ffe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ffe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ffe6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ffea:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ffee:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001fff2:	c3                   	ret    

c001fff3 <Vm::fpuAbs(unsigned long long)>:
c001fff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fff7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fffb:	c3                   	ret    

c001fffc <Vm::fpuChs(unsigned long long)>:
c001fffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020000:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020004:	f7 d8                	neg    eax
c0020006:	83 d2 00             	adc    edx,0x0
c0020009:	f7 da                	neg    edx
c002000b:	c3                   	ret    

c002000c <Vm::fpuSub(unsigned long long, unsigned long long)>:
c002000c:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0020010:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0020015:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0020019:	eb c7                	jmp    c001ffe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c002001b <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c002001b:	53                   	push   ebx
c002001c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020020:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020024:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020028:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002002c:	0f af ca             	imul   ecx,edx
c002002f:	0f af d8             	imul   ebx,eax
c0020032:	f7 e2                	mul    edx
c0020034:	01 d9                	add    ecx,ebx
c0020036:	5b                   	pop    ebx
c0020037:	01 ca                	add    edx,ecx
c0020039:	c3                   	ret    

c002003a <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c002003a:	83 ec 0c             	sub    esp,0xc
c002003d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002004d:	e8 b2 76 00 00       	call   c0027704 <__udivdi3>
c0020052:	83 c4 1c             	add    esp,0x1c
c0020055:	c3                   	ret    

c0020056 <Vm::fpuSquare(unsigned long long)>:
c0020056:	50                   	push   eax
c0020057:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002005b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002005f:	52                   	push   edx
c0020060:	50                   	push   eax
c0020061:	52                   	push   edx
c0020062:	50                   	push   eax
c0020063:	e8 b3 ff ff ff       	call   c002001b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020068:	83 c4 14             	add    esp,0x14
c002006b:	c3                   	ret    

c002006c <Vm::fpuGetReg(int)>:
c002006c:	83 ec 0c             	sub    esp,0xc
c002006f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0020074:	76 10                	jbe    c0020086 <Vm::fpuGetReg(int)+0x1a>
c0020076:	83 ec 0c             	sub    esp,0xc
c0020079:	68 22 d6 02 c0       	push   0xc002d622
c002007e:	e8 ac a8 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0020083:	83 c4 10             	add    esp,0x10
c0020086:	a0 c1 29 03 c0       	mov    al,ds:0xc00329c1
c002008b:	b9 08 00 00 00       	mov    ecx,0x8
c0020090:	c0 e8 03             	shr    al,0x3
c0020093:	83 e0 07             	and    eax,0x7
c0020096:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002009a:	99                   	cdq    
c002009b:	f7 f9                	idiv   ecx
c002009d:	8b 04 d5 c4 29 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd63c]
c00200a4:	8b 14 d5 c8 29 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd638]
c00200ab:	83 c4 0c             	add    esp,0xc
c00200ae:	c3                   	ret    

c00200af <Vm::fpuSetReg(int, unsigned long long)>:
c00200af:	57                   	push   edi
c00200b0:	56                   	push   esi
c00200b1:	52                   	push   edx
c00200b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00200b6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00200ba:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00200bf:	76 10                	jbe    c00200d1 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c00200c1:	83 ec 0c             	sub    esp,0xc
c00200c4:	68 35 d6 02 c0       	push   0xc002d635
c00200c9:	e8 61 a8 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c00200ce:	83 c4 10             	add    esp,0x10
c00200d1:	a0 c1 29 03 c0       	mov    al,ds:0xc00329c1
c00200d6:	b9 08 00 00 00       	mov    ecx,0x8
c00200db:	c0 e8 03             	shr    al,0x3
c00200de:	83 e0 07             	and    eax,0x7
c00200e1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00200e5:	99                   	cdq    
c00200e6:	f7 f9                	idiv   ecx
c00200e8:	89 34 d5 c4 29 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd63c],esi
c00200ef:	89 3c d5 c8 29 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd638],edi
c00200f6:	58                   	pop    eax
c00200f7:	5e                   	pop    esi
c00200f8:	5f                   	pop    edi
c00200f9:	c3                   	ret    

c00200fa <Vm::fpuPush(unsigned long long)>:
c00200fa:	a0 c1 29 03 c0       	mov    al,ds:0xc00329c1
c00200ff:	c0 e8 03             	shr    al,0x3
c0020102:	83 e0 07             	and    eax,0x7
c0020105:	83 c0 07             	add    eax,0x7
c0020108:	88 c2                	mov    dl,al
c002010a:	83 e0 07             	and    eax,0x7
c002010d:	83 e2 07             	and    edx,0x7
c0020110:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0020117:	8a 15 c1 29 03 c0    	mov    dl,BYTE PTR ds:0xc00329c1
c002011d:	83 e2 c7             	and    edx,0xffffffc7
c0020120:	09 ca                	or     edx,ecx
c0020122:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020126:	88 15 c1 29 03 c0    	mov    BYTE PTR ds:0xc00329c1,dl
c002012c:	89 0c c5 c8 29 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd638],ecx
c0020133:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020137:	89 14 c5 c4 29 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd63c],edx
c002013e:	a1 04 2a 03 c0       	mov    eax,ds:0xc0032a04
c0020143:	83 f8 08             	cmp    eax,0x8
c0020146:	75 08                	jne    c0020150 <Vm::fpuPush(unsigned long long)+0x56>
c0020148:	80 0d c0 29 03 c0 40 	or     BYTE PTR ds:0xc00329c0,0x40
c002014f:	c3                   	ret    
c0020150:	40                   	inc    eax
c0020151:	a3 04 2a 03 c0       	mov    ds:0xc0032a04,eax
c0020156:	c3                   	ret    

c0020157 <Vm::fpuPop()>:
c0020157:	8a 0d c1 29 03 c0    	mov    cl,BYTE PTR ds:0xc00329c1
c002015d:	53                   	push   ebx
c002015e:	c0 e9 03             	shr    cl,0x3
c0020161:	8a 1d c1 29 03 c0    	mov    bl,BYTE PTR ds:0xc00329c1
c0020167:	83 e1 07             	and    ecx,0x7
c002016a:	83 e3 c7             	and    ebx,0xffffffc7
c002016d:	8b 04 cd c4 29 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd63c]
c0020174:	8b 14 cd c8 29 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd638]
c002017b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0020182:	83 e1 38             	and    ecx,0x38
c0020185:	09 d9                	or     ecx,ebx
c0020187:	88 0d c1 29 03 c0    	mov    BYTE PTR ds:0xc00329c1,cl
c002018d:	8b 0d 04 2a 03 c0    	mov    ecx,DWORD PTR ds:0xc0032a04
c0020193:	85 c9                	test   ecx,ecx
c0020195:	74 09                	je     c00201a0 <Vm::fpuPop()+0x49>
c0020197:	49                   	dec    ecx
c0020198:	89 0d 04 2a 03 c0    	mov    DWORD PTR ds:0xc0032a04,ecx
c002019e:	eb 07                	jmp    c00201a7 <Vm::fpuPop()+0x50>
c00201a0:	80 0d c0 29 03 c0 40 	or     BYTE PTR ds:0xc00329c0,0x40
c00201a7:	5b                   	pop    ebx
c00201a8:	c3                   	ret    

c00201a9 <Vm::x87Handler(regs*)>:
c00201a9:	55                   	push   ebp
c00201aa:	57                   	push   edi
c00201ab:	56                   	push   esi
c00201ac:	53                   	push   ebx
c00201ad:	83 ec 1c             	sub    esp,0x1c
c00201b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00201b4:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00201b9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00201bc:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00201c4:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00201c8:	50                   	push   eax
c00201c9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00201cd:	50                   	push   eax
c00201ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00201d2:	50                   	push   eax
c00201d3:	53                   	push   ebx
c00201d4:	e8 23 9e ff ff       	call   c0019ffc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00201d9:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00201dc:	83 c4 10             	add    esp,0x10
c00201df:	89 c6                	mov    esi,eax
c00201e1:	80 fa d9             	cmp    dl,0xd9
c00201e4:	0f 85 52 01 00 00    	jne    c002033c <Vm::x87Handler(regs*)+0x193>
c00201ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201ee:	8d 50 20             	lea    edx,[eax+0x20]
c00201f1:	80 fa 0e             	cmp    dl,0xe
c00201f4:	0f 87 86 00 00 00    	ja     c0020280 <Vm::x87Handler(regs*)+0xd7>
c00201fa:	0f b6 d2             	movzx  edx,dl
c00201fd:	ff 24 95 48 d6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd29b8]
c0020204:	e8 e7 fc ff ff       	call   c001fef0 <Vm::fpuGet0()>
c0020209:	eb 05                	jmp    c0020210 <Vm::x87Handler(regs*)+0x67>
c002020b:	e8 e5 fc ff ff       	call   c001fef5 <Vm::fpuGet1()>
c0020210:	57                   	push   edi
c0020211:	57                   	push   edi
c0020212:	52                   	push   edx
c0020213:	50                   	push   eax
c0020214:	e8 e1 fe ff ff       	call   c00200fa <Vm::fpuPush(unsigned long long)>
c0020219:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002021d:	83 c4 10             	add    esp,0x10
c0020220:	b0 01                	mov    al,0x1
c0020222:	e9 e3 09 00 00       	jmp    c0020c0a <Vm::x87Handler(regs*)+0xa61>
c0020227:	83 ec 0c             	sub    esp,0xc
c002022a:	6a 00                	push   0x0
c002022c:	e8 3b fe ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020231:	59                   	pop    ecx
c0020232:	5e                   	pop    esi
c0020233:	52                   	push   edx
c0020234:	50                   	push   eax
c0020235:	e8 c2 fd ff ff       	call   c001fffc <Vm::fpuChs(unsigned long long)>
c002023a:	eb 13                	jmp    c002024f <Vm::x87Handler(regs*)+0xa6>
c002023c:	83 ec 0c             	sub    esp,0xc
c002023f:	6a 00                	push   0x0
c0020241:	e8 26 fe ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020246:	5f                   	pop    edi
c0020247:	5d                   	pop    ebp
c0020248:	52                   	push   edx
c0020249:	50                   	push   eax
c002024a:	e8 a4 fd ff ff       	call   c001fff3 <Vm::fpuAbs(unsigned long long)>
c002024f:	83 c4 0c             	add    esp,0xc
c0020252:	52                   	push   edx
c0020253:	50                   	push   eax
c0020254:	6a 00                	push   0x0
c0020256:	e8 54 fe ff ff       	call   c00200af <Vm::fpuSetReg(int, unsigned long long)>
c002025b:	eb bc                	jmp    c0020219 <Vm::x87Handler(regs*)+0x70>
c002025d:	e8 d3 fc ff ff       	call   c001ff35 <Vm::fpuGetLog210()>
c0020262:	eb ac                	jmp    c0020210 <Vm::x87Handler(regs*)+0x67>
c0020264:	e8 9c fc ff ff       	call   c001ff05 <Vm::fpuGetLog2E()>
c0020269:	eb a5                	jmp    c0020210 <Vm::x87Handler(regs*)+0x67>
c002026b:	e8 8d fc ff ff       	call   c001fefd <Vm::fpuGetPi()>
c0020270:	eb 9e                	jmp    c0020210 <Vm::x87Handler(regs*)+0x67>
c0020272:	e8 d6 fc ff ff       	call   c001ff4d <Vm::fpuGetLog102()>
c0020277:	eb 97                	jmp    c0020210 <Vm::x87Handler(regs*)+0x67>
c0020279:	e8 9f fc ff ff       	call   c001ff1d <Vm::fpuGetLogE2()>
c002027e:	eb 90                	jmp    c0020210 <Vm::x87Handler(regs*)+0x67>
c0020280:	8d 50 40             	lea    edx,[eax+0x40]
c0020283:	80 fa 07             	cmp    dl,0x7
c0020286:	77 15                	ja     c002029d <Vm::x87Handler(regs*)+0xf4>
c0020288:	83 ec 0c             	sub    esp,0xc
c002028b:	2d c0 00 00 00       	sub    eax,0xc0
c0020290:	50                   	push   eax
c0020291:	e8 d6 fd ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020296:	59                   	pop    ecx
c0020297:	5e                   	pop    esi
c0020298:	e9 75 ff ff ff       	jmp    c0020212 <Vm::x87Handler(regs*)+0x69>
c002029d:	8d 50 38             	lea    edx,[eax+0x38]
c00202a0:	80 fa 07             	cmp    dl,0x7
c00202a3:	77 3c                	ja     c00202e1 <Vm::x87Handler(regs*)+0x138>
c00202a5:	83 ec 0c             	sub    esp,0xc
c00202a8:	2d c8 00 00 00       	sub    eax,0xc8
c00202ad:	50                   	push   eax
c00202ae:	e8 b9 fd ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00202b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202ba:	89 c6                	mov    esi,eax
c00202bc:	89 d7                	mov    edi,edx
c00202be:	e8 a9 fd ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00202c3:	83 c4 0c             	add    esp,0xc
c00202c6:	52                   	push   edx
c00202c7:	50                   	push   eax
c00202c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202cc:	2d c8 00 00 00       	sub    eax,0xc8
c00202d1:	50                   	push   eax
c00202d2:	e8 d8 fd ff ff       	call   c00200af <Vm::fpuSetReg(int, unsigned long long)>
c00202d7:	83 c4 0c             	add    esp,0xc
c00202da:	57                   	push   edi
c00202db:	56                   	push   esi
c00202dc:	e9 73 ff ff ff       	jmp    c0020254 <Vm::x87Handler(regs*)+0xab>
c00202e1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202e5:	84 d2                	test   dl,dl
c00202e7:	75 0f                	jne    c00202f8 <Vm::x87Handler(regs*)+0x14f>
c00202e9:	83 ec 0c             	sub    esp,0xc
c00202ec:	ff 36                	push   DWORD PTR [esi]
c00202ee:	e8 c8 fa ff ff       	call   c001fdbb <Vm::fpu32ToInternal(unsigned int)>
c00202f3:	e9 bf 00 00 00       	jmp    c00203b7 <Vm::x87Handler(regs*)+0x20e>
c00202f8:	80 fa 03             	cmp    dl,0x3
c00202fb:	75 13                	jne    c0020310 <Vm::x87Handler(regs*)+0x167>
c00202fd:	e8 55 fe ff ff       	call   c0020157 <Vm::fpuPop()>
c0020302:	55                   	push   ebp
c0020303:	55                   	push   ebp
c0020304:	52                   	push   edx
c0020305:	50                   	push   eax
c0020306:	e8 4c fa ff ff       	call   c001fd57 <Vm::fpuInternalTo32(unsigned long long)>
c002030b:	e9 88 00 00 00       	jmp    c0020398 <Vm::x87Handler(regs*)+0x1ef>
c0020310:	80 fa 05             	cmp    dl,0x5
c0020313:	75 0e                	jne    c0020323 <Vm::x87Handler(regs*)+0x17a>
c0020315:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020318:	66 a3 c2 29 03 c0    	mov    ds:0xc00329c2,ax
c002031e:	e9 df 00 00 00       	jmp    c0020402 <Vm::x87Handler(regs*)+0x259>
c0020323:	31 c0                	xor    eax,eax
c0020325:	80 fa 07             	cmp    dl,0x7
c0020328:	0f 85 dc 08 00 00    	jne    c0020c0a <Vm::x87Handler(regs*)+0xa61>
c002032e:	66 a1 c2 29 03 c0    	mov    ax,ds:0xc00329c2
c0020334:	66 89 06             	mov    WORD PTR [esi],ax
c0020337:	e9 c6 00 00 00       	jmp    c0020402 <Vm::x87Handler(regs*)+0x259>
c002033c:	80 fa d8             	cmp    dl,0xd8
c002033f:	0f 84 c9 00 00 00    	je     c002040e <Vm::x87Handler(regs*)+0x265>
c0020345:	80 fa dc             	cmp    dl,0xdc
c0020348:	0f 84 0d 02 00 00    	je     c002055b <Vm::x87Handler(regs*)+0x3b2>
c002034e:	80 fa de             	cmp    dl,0xde
c0020351:	0f 84 cd 02 00 00    	je     c0020624 <Vm::x87Handler(regs*)+0x47b>
c0020357:	80 fa dd             	cmp    dl,0xdd
c002035a:	0f 84 5f 04 00 00    	je     c00207bf <Vm::x87Handler(regs*)+0x616>
c0020360:	80 fa da             	cmp    dl,0xda
c0020363:	0f 84 24 05 00 00    	je     c002088d <Vm::x87Handler(regs*)+0x6e4>
c0020369:	80 fa df             	cmp    dl,0xdf
c002036c:	0f 84 68 05 00 00    	je     c00208da <Vm::x87Handler(regs*)+0x731>
c0020372:	31 c0                	xor    eax,eax
c0020374:	80 fa db             	cmp    dl,0xdb
c0020377:	0f 85 8d 08 00 00    	jne    c0020c0a <Vm::x87Handler(regs*)+0xa61>
c002037d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020381:	80 fa 03             	cmp    dl,0x3
c0020384:	0f 85 70 06 00 00    	jne    c00209fa <Vm::x87Handler(regs*)+0x851>
c002038a:	e8 c8 fd ff ff       	call   c0020157 <Vm::fpuPop()>
c002038f:	55                   	push   ebp
c0020390:	55                   	push   ebp
c0020391:	52                   	push   edx
c0020392:	50                   	push   eax
c0020393:	e8 71 fa ff ff       	call   c001fe09 <Vm::fpuFloatToLong(unsigned long long)>
c0020398:	83 c4 10             	add    esp,0x10
c002039b:	89 06                	mov    DWORD PTR [esi],eax
c002039d:	eb 63                	jmp    c0020402 <Vm::x87Handler(regs*)+0x259>
c002039f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203a3:	84 d2                	test   dl,dl
c00203a5:	0f 85 e6 05 00 00    	jne    c0020991 <Vm::x87Handler(regs*)+0x7e8>
c00203ab:	57                   	push   edi
c00203ac:	57                   	push   edi
c00203ad:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b0:	ff 36                	push   DWORD PTR [esi]
c00203b2:	e8 49 fa ff ff       	call   c001fe00 <Vm::fpu64ToInternal(unsigned long long)>
c00203b7:	5e                   	pop    esi
c00203b8:	5f                   	pop    edi
c00203b9:	52                   	push   edx
c00203ba:	50                   	push   eax
c00203bb:	e8 3a fd ff ff       	call   c00200fa <Vm::fpuPush(unsigned long long)>
c00203c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00203c4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203c7:	e9 51 fe ff ff       	jmp    c002021d <Vm::x87Handler(regs*)+0x74>
c00203cc:	80 fa 03             	cmp    dl,0x3
c00203cf:	0f 85 d7 06 00 00    	jne    c0020aac <Vm::x87Handler(regs*)+0x903>
c00203d5:	57                   	push   edi
c00203d6:	57                   	push   edi
c00203d7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203da:	ff 36                	push   DWORD PTR [esi]
c00203dc:	e8 1f fa ff ff       	call   c001fe00 <Vm::fpu64ToInternal(unsigned long long)>
c00203e1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203e8:	89 c6                	mov    esi,eax
c00203ea:	89 d7                	mov    edi,edx
c00203ec:	e8 7b fc ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00203f1:	57                   	push   edi
c00203f2:	56                   	push   esi
c00203f3:	52                   	push   edx
c00203f4:	50                   	push   eax
c00203f5:	e8 95 fb ff ff       	call   c001ff8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203fa:	83 c4 20             	add    esp,0x20
c00203fd:	e8 55 fd ff ff       	call   c0020157 <Vm::fpuPop()>
c0020402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020406:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020409:	e9 12 fe ff ff       	jmp    c0020220 <Vm::x87Handler(regs*)+0x77>
c002040e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020412:	8d 50 40             	lea    edx,[eax+0x40]
c0020415:	80 fa 07             	cmp    dl,0x7
c0020418:	77 29                	ja     c0020443 <Vm::x87Handler(regs*)+0x29a>
c002041a:	83 ec 0c             	sub    esp,0xc
c002041d:	2d c0 00 00 00       	sub    eax,0xc0
c0020422:	50                   	push   eax
c0020423:	e8 44 fc ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020428:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002042f:	89 c6                	mov    esi,eax
c0020431:	89 d7                	mov    edi,edx
c0020433:	e8 34 fc ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020438:	57                   	push   edi
c0020439:	56                   	push   esi
c002043a:	52                   	push   edx
c002043b:	50                   	push   eax
c002043c:	e8 a1 fb ff ff       	call   c001ffe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020441:	eb 2f                	jmp    c0020472 <Vm::x87Handler(regs*)+0x2c9>
c0020443:	8d 50 38             	lea    edx,[eax+0x38]
c0020446:	80 fa 07             	cmp    dl,0x7
c0020449:	77 2f                	ja     c002047a <Vm::x87Handler(regs*)+0x2d1>
c002044b:	83 ec 0c             	sub    esp,0xc
c002044e:	2d c8 00 00 00       	sub    eax,0xc8
c0020453:	50                   	push   eax
c0020454:	e8 13 fc ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020459:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020460:	89 c6                	mov    esi,eax
c0020462:	89 d7                	mov    edi,edx
c0020464:	e8 03 fc ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020469:	57                   	push   edi
c002046a:	56                   	push   esi
c002046b:	52                   	push   edx
c002046c:	50                   	push   eax
c002046d:	e8 a9 fb ff ff       	call   c002001b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020472:	83 c4 1c             	add    esp,0x1c
c0020475:	e9 d8 fd ff ff       	jmp    c0020252 <Vm::x87Handler(regs*)+0xa9>
c002047a:	8d 50 30             	lea    edx,[eax+0x30]
c002047d:	80 fa 07             	cmp    dl,0x7
c0020480:	77 0d                	ja     c002048f <Vm::x87Handler(regs*)+0x2e6>
c0020482:	83 ec 0c             	sub    esp,0xc
c0020485:	2d d0 00 00 00       	sub    eax,0xd0
c002048a:	e9 99 03 00 00       	jmp    c0020828 <Vm::x87Handler(regs*)+0x67f>
c002048f:	8d 50 28             	lea    edx,[eax+0x28]
c0020492:	80 fa 07             	cmp    dl,0x7
c0020495:	77 0d                	ja     c00204a4 <Vm::x87Handler(regs*)+0x2fb>
c0020497:	83 ec 0c             	sub    esp,0xc
c002049a:	2d d8 00 00 00       	sub    eax,0xd8
c002049f:	e9 c0 03 00 00       	jmp    c0020864 <Vm::x87Handler(regs*)+0x6bb>
c00204a4:	8d 50 20             	lea    edx,[eax+0x20]
c00204a7:	80 fa 07             	cmp    dl,0x7
c00204aa:	77 1b                	ja     c00204c7 <Vm::x87Handler(regs*)+0x31e>
c00204ac:	83 ec 0c             	sub    esp,0xc
c00204af:	2d e0 00 00 00       	sub    eax,0xe0
c00204b4:	50                   	push   eax
c00204b5:	e8 b2 fb ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00204ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204c1:	89 c6                	mov    esi,eax
c00204c3:	89 d7                	mov    edi,edx
c00204c5:	eb 22                	jmp    c00204e9 <Vm::x87Handler(regs*)+0x340>
c00204c7:	8d 50 18             	lea    edx,[eax+0x18]
c00204ca:	80 fa 07             	cmp    dl,0x7
c00204cd:	77 2d                	ja     c00204fc <Vm::x87Handler(regs*)+0x353>
c00204cf:	83 ec 0c             	sub    esp,0xc
c00204d2:	6a 00                	push   0x0
c00204d4:	e8 93 fb ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00204d9:	89 c6                	mov    esi,eax
c00204db:	89 d7                	mov    edi,edx
c00204dd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204e1:	2d e8 00 00 00       	sub    eax,0xe8
c00204e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00204e9:	e8 7e fb ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00204ee:	57                   	push   edi
c00204ef:	56                   	push   esi
c00204f0:	52                   	push   edx
c00204f1:	50                   	push   eax
c00204f2:	e8 15 fb ff ff       	call   c002000c <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204f7:	e9 76 ff ff ff       	jmp    c0020472 <Vm::x87Handler(regs*)+0x2c9>
c00204fc:	8d 50 10             	lea    edx,[eax+0x10]
c00204ff:	80 fa 07             	cmp    dl,0x7
c0020502:	77 1b                	ja     c002051f <Vm::x87Handler(regs*)+0x376>
c0020504:	83 ec 0c             	sub    esp,0xc
c0020507:	2d f0 00 00 00       	sub    eax,0xf0
c002050c:	50                   	push   eax
c002050d:	e8 5a fb ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020512:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020519:	89 c6                	mov    esi,eax
c002051b:	89 d7                	mov    edi,edx
c002051d:	eb 22                	jmp    c0020541 <Vm::x87Handler(regs*)+0x398>
c002051f:	3c f7                	cmp    al,0xf7
c0020521:	0f 86 d1 03 00 00    	jbe    c00208f8 <Vm::x87Handler(regs*)+0x74f>
c0020527:	83 ec 0c             	sub    esp,0xc
c002052a:	6a 00                	push   0x0
c002052c:	e8 3b fb ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020531:	89 c6                	mov    esi,eax
c0020533:	89 d7                	mov    edi,edx
c0020535:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020539:	2d f8 00 00 00       	sub    eax,0xf8
c002053e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020541:	e8 26 fb ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020546:	57                   	push   edi
c0020547:	56                   	push   esi
c0020548:	52                   	push   edx
c0020549:	50                   	push   eax
c002054a:	e8 eb fa ff ff       	call   c002003a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002054f:	83 c4 1c             	add    esp,0x1c
c0020552:	52                   	push   edx
c0020553:	50                   	push   eax
c0020554:	6a 00                	push   0x0
c0020556:	e9 51 02 00 00       	jmp    c00207ac <Vm::x87Handler(regs*)+0x603>
c002055b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002055f:	8d 50 40             	lea    edx,[eax+0x40]
c0020562:	80 fa 07             	cmp    dl,0x7
c0020565:	77 37                	ja     c002059e <Vm::x87Handler(regs*)+0x3f5>
c0020567:	83 ec 0c             	sub    esp,0xc
c002056a:	2d c0 00 00 00       	sub    eax,0xc0
c002056f:	50                   	push   eax
c0020570:	e8 f7 fa ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020575:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002057c:	89 c6                	mov    esi,eax
c002057e:	89 d7                	mov    edi,edx
c0020580:	e8 e7 fa ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020585:	57                   	push   edi
c0020586:	56                   	push   esi
c0020587:	52                   	push   edx
c0020588:	50                   	push   eax
c0020589:	e8 54 fa ff ff       	call   c001ffe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002058e:	83 c4 1c             	add    esp,0x1c
c0020591:	52                   	push   edx
c0020592:	50                   	push   eax
c0020593:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020597:	2d c0 00 00 00       	sub    eax,0xc0
c002059c:	eb 3d                	jmp    c00205db <Vm::x87Handler(regs*)+0x432>
c002059e:	8d 50 38             	lea    edx,[eax+0x38]
c00205a1:	80 fa 07             	cmp    dl,0x7
c00205a4:	77 3b                	ja     c00205e1 <Vm::x87Handler(regs*)+0x438>
c00205a6:	83 ec 0c             	sub    esp,0xc
c00205a9:	2d c8 00 00 00       	sub    eax,0xc8
c00205ae:	50                   	push   eax
c00205af:	e8 b8 fa ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00205b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205bb:	89 c6                	mov    esi,eax
c00205bd:	89 d7                	mov    edi,edx
c00205bf:	e8 a8 fa ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00205c4:	57                   	push   edi
c00205c5:	56                   	push   esi
c00205c6:	52                   	push   edx
c00205c7:	50                   	push   eax
c00205c8:	e8 4e fa ff ff       	call   c002001b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00205cd:	83 c4 1c             	add    esp,0x1c
c00205d0:	52                   	push   edx
c00205d1:	50                   	push   eax
c00205d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205d6:	2d c8 00 00 00       	sub    eax,0xc8
c00205db:	50                   	push   eax
c00205dc:	e9 75 fc ff ff       	jmp    c0020256 <Vm::x87Handler(regs*)+0xad>
c00205e1:	83 c0 18             	add    eax,0x18
c00205e4:	3c 07                	cmp    al,0x7
c00205e6:	0f 87 3b 04 00 00    	ja     c0020a27 <Vm::x87Handler(regs*)+0x87e>
c00205ec:	83 ec 0c             	sub    esp,0xc
c00205ef:	6a 00                	push   0x0
c00205f1:	e8 76 fa ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00205f6:	89 c6                	mov    esi,eax
c00205f8:	89 d7                	mov    edi,edx
c00205fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205fe:	2d e8 00 00 00       	sub    eax,0xe8
c0020603:	89 04 24             	mov    DWORD PTR [esp],eax
c0020606:	e8 61 fa ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c002060b:	57                   	push   edi
c002060c:	56                   	push   esi
c002060d:	52                   	push   edx
c002060e:	50                   	push   eax
c002060f:	e8 f8 f9 ff ff       	call   c002000c <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020614:	83 c4 1c             	add    esp,0x1c
c0020617:	52                   	push   edx
c0020618:	50                   	push   eax
c0020619:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002061d:	2d e8 00 00 00       	sub    eax,0xe8
c0020622:	eb b7                	jmp    c00205db <Vm::x87Handler(regs*)+0x432>
c0020624:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020628:	8d 50 40             	lea    edx,[eax+0x40]
c002062b:	80 fa 07             	cmp    dl,0x7
c002062e:	77 3a                	ja     c002066a <Vm::x87Handler(regs*)+0x4c1>
c0020630:	83 ec 0c             	sub    esp,0xc
c0020633:	2d c0 00 00 00       	sub    eax,0xc0
c0020638:	50                   	push   eax
c0020639:	e8 2e fa ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c002063e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020645:	89 c6                	mov    esi,eax
c0020647:	89 d7                	mov    edi,edx
c0020649:	e8 1e fa ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c002064e:	57                   	push   edi
c002064f:	56                   	push   esi
c0020650:	52                   	push   edx
c0020651:	50                   	push   eax
c0020652:	e8 8b f9 ff ff       	call   c001ffe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020657:	83 c4 1c             	add    esp,0x1c
c002065a:	52                   	push   edx
c002065b:	50                   	push   eax
c002065c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020660:	2d c0 00 00 00       	sub    eax,0xc0
c0020665:	e9 9e 01 00 00       	jmp    c0020808 <Vm::x87Handler(regs*)+0x65f>
c002066a:	8d 50 20             	lea    edx,[eax+0x20]
c002066d:	80 fa 07             	cmp    dl,0x7
c0020670:	77 3a                	ja     c00206ac <Vm::x87Handler(regs*)+0x503>
c0020672:	83 ec 0c             	sub    esp,0xc
c0020675:	2d e0 00 00 00       	sub    eax,0xe0
c002067a:	50                   	push   eax
c002067b:	e8 ec f9 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020680:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020687:	89 c6                	mov    esi,eax
c0020689:	89 d7                	mov    edi,edx
c002068b:	e8 dc f9 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020690:	57                   	push   edi
c0020691:	56                   	push   esi
c0020692:	52                   	push   edx
c0020693:	50                   	push   eax
c0020694:	e8 73 f9 ff ff       	call   c002000c <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020699:	83 c4 1c             	add    esp,0x1c
c002069c:	52                   	push   edx
c002069d:	50                   	push   eax
c002069e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206a2:	2d e0 00 00 00       	sub    eax,0xe0
c00206a7:	e9 5c 01 00 00       	jmp    c0020808 <Vm::x87Handler(regs*)+0x65f>
c00206ac:	8d 50 18             	lea    edx,[eax+0x18]
c00206af:	80 fa 07             	cmp    dl,0x7
c00206b2:	77 3b                	ja     c00206ef <Vm::x87Handler(regs*)+0x546>
c00206b4:	83 ec 0c             	sub    esp,0xc
c00206b7:	6a 00                	push   0x0
c00206b9:	e8 ae f9 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00206be:	89 c6                	mov    esi,eax
c00206c0:	89 d7                	mov    edi,edx
c00206c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206c6:	2d e8 00 00 00       	sub    eax,0xe8
c00206cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00206ce:	e8 99 f9 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00206d3:	57                   	push   edi
c00206d4:	56                   	push   esi
c00206d5:	52                   	push   edx
c00206d6:	50                   	push   eax
c00206d7:	e8 30 f9 ff ff       	call   c002000c <Vm::fpuSub(unsigned long long, unsigned long long)>
c00206dc:	83 c4 1c             	add    esp,0x1c
c00206df:	52                   	push   edx
c00206e0:	50                   	push   eax
c00206e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206e5:	2d e8 00 00 00       	sub    eax,0xe8
c00206ea:	e9 19 01 00 00       	jmp    c0020808 <Vm::x87Handler(regs*)+0x65f>
c00206ef:	8d 50 38             	lea    edx,[eax+0x38]
c00206f2:	80 fa 07             	cmp    dl,0x7
c00206f5:	77 37                	ja     c002072e <Vm::x87Handler(regs*)+0x585>
c00206f7:	83 ec 0c             	sub    esp,0xc
c00206fa:	2d c8 00 00 00       	sub    eax,0xc8
c00206ff:	50                   	push   eax
c0020700:	e8 67 f9 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020705:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002070c:	89 c6                	mov    esi,eax
c002070e:	89 d7                	mov    edi,edx
c0020710:	e8 57 f9 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020715:	57                   	push   edi
c0020716:	56                   	push   esi
c0020717:	52                   	push   edx
c0020718:	50                   	push   eax
c0020719:	e8 fd f8 ff ff       	call   c002001b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002071e:	83 c4 1c             	add    esp,0x1c
c0020721:	52                   	push   edx
c0020722:	50                   	push   eax
c0020723:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020727:	2d c8 00 00 00       	sub    eax,0xc8
c002072c:	eb 7d                	jmp    c00207ab <Vm::x87Handler(regs*)+0x602>
c002072e:	3c f7                	cmp    al,0xf7
c0020730:	76 38                	jbe    c002076a <Vm::x87Handler(regs*)+0x5c1>
c0020732:	83 ec 0c             	sub    esp,0xc
c0020735:	6a 00                	push   0x0
c0020737:	e8 30 f9 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c002073c:	89 c6                	mov    esi,eax
c002073e:	89 d7                	mov    edi,edx
c0020740:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020744:	2d f8 00 00 00       	sub    eax,0xf8
c0020749:	89 04 24             	mov    DWORD PTR [esp],eax
c002074c:	e8 1b f9 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020751:	57                   	push   edi
c0020752:	56                   	push   esi
c0020753:	52                   	push   edx
c0020754:	50                   	push   eax
c0020755:	e8 e0 f8 ff ff       	call   c002003a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002075a:	83 c4 1c             	add    esp,0x1c
c002075d:	52                   	push   edx
c002075e:	50                   	push   eax
c002075f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020763:	2d f8 00 00 00       	sub    eax,0xf8
c0020768:	eb 41                	jmp    c00207ab <Vm::x87Handler(regs*)+0x602>
c002076a:	8d 50 10             	lea    edx,[eax+0x10]
c002076d:	80 fa 07             	cmp    dl,0x7
c0020770:	0f 87 5a 01 00 00    	ja     c00208d0 <Vm::x87Handler(regs*)+0x727>
c0020776:	83 ec 0c             	sub    esp,0xc
c0020779:	2d f0 00 00 00       	sub    eax,0xf0
c002077e:	50                   	push   eax
c002077f:	e8 e8 f8 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020784:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002078b:	89 c6                	mov    esi,eax
c002078d:	89 d7                	mov    edi,edx
c002078f:	e8 d8 f8 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020794:	57                   	push   edi
c0020795:	56                   	push   esi
c0020796:	52                   	push   edx
c0020797:	50                   	push   eax
c0020798:	e8 9d f8 ff ff       	call   c002003a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002079d:	83 c4 1c             	add    esp,0x1c
c00207a0:	52                   	push   edx
c00207a1:	50                   	push   eax
c00207a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207a6:	2d f0 00 00 00       	sub    eax,0xf0
c00207ab:	50                   	push   eax
c00207ac:	e8 fe f8 ff ff       	call   c00200af <Vm::fpuSetReg(int, unsigned long long)>
c00207b1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00207b5:	e8 9d f9 ff ff       	call   c0020157 <Vm::fpuPop()>
c00207ba:	e9 5e fa ff ff       	jmp    c002021d <Vm::x87Handler(regs*)+0x74>
c00207bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207c3:	8d 50 30             	lea    edx,[eax+0x30]
c00207c6:	80 fa 07             	cmp    dl,0x7
c00207c9:	77 1d                	ja     c00207e8 <Vm::x87Handler(regs*)+0x63f>
c00207cb:	83 ec 0c             	sub    esp,0xc
c00207ce:	6a 00                	push   0x0
c00207d0:	e8 97 f8 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00207d5:	83 c4 0c             	add    esp,0xc
c00207d8:	52                   	push   edx
c00207d9:	50                   	push   eax
c00207da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207de:	2d d0 00 00 00       	sub    eax,0xd0
c00207e3:	e9 f3 fd ff ff       	jmp    c00205db <Vm::x87Handler(regs*)+0x432>
c00207e8:	8d 50 28             	lea    edx,[eax+0x28]
c00207eb:	80 fa 07             	cmp    dl,0x7
c00207ee:	77 28                	ja     c0020818 <Vm::x87Handler(regs*)+0x66f>
c00207f0:	83 ec 0c             	sub    esp,0xc
c00207f3:	6a 00                	push   0x0
c00207f5:	e8 72 f8 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00207fa:	83 c4 0c             	add    esp,0xc
c00207fd:	52                   	push   edx
c00207fe:	50                   	push   eax
c00207ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020803:	2d d8 00 00 00       	sub    eax,0xd8
c0020808:	50                   	push   eax
c0020809:	e8 a1 f8 ff ff       	call   c00200af <Vm::fpuSetReg(int, unsigned long long)>
c002080e:	e8 44 f9 ff ff       	call   c0020157 <Vm::fpuPop()>
c0020813:	e9 01 fa ff ff       	jmp    c0020219 <Vm::x87Handler(regs*)+0x70>
c0020818:	8d 50 20             	lea    edx,[eax+0x20]
c002081b:	80 fa 07             	cmp    dl,0x7
c002081e:	77 30                	ja     c0020850 <Vm::x87Handler(regs*)+0x6a7>
c0020820:	83 ec 0c             	sub    esp,0xc
c0020823:	2d e0 00 00 00       	sub    eax,0xe0
c0020828:	50                   	push   eax
c0020829:	e8 3e f8 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c002082e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020835:	89 c6                	mov    esi,eax
c0020837:	89 d7                	mov    edi,edx
c0020839:	e8 2e f8 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c002083e:	57                   	push   edi
c002083f:	56                   	push   esi
c0020840:	52                   	push   edx
c0020841:	50                   	push   eax
c0020842:	e8 48 f7 ff ff       	call   c001ff8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020847:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002084b:	e9 54 02 00 00       	jmp    c0020aa4 <Vm::x87Handler(regs*)+0x8fb>
c0020850:	8d 50 18             	lea    edx,[eax+0x18]
c0020853:	80 fa 07             	cmp    dl,0x7
c0020856:	0f 87 43 fb ff ff    	ja     c002039f <Vm::x87Handler(regs*)+0x1f6>
c002085c:	83 ec 0c             	sub    esp,0xc
c002085f:	2d e8 00 00 00       	sub    eax,0xe8
c0020864:	50                   	push   eax
c0020865:	e8 02 f8 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c002086a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020871:	89 c6                	mov    esi,eax
c0020873:	89 d7                	mov    edi,edx
c0020875:	e8 f2 f7 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c002087a:	57                   	push   edi
c002087b:	56                   	push   esi
c002087c:	52                   	push   edx
c002087d:	50                   	push   eax
c002087e:	e8 0c f7 ff ff       	call   c001ff8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020883:	83 c4 20             	add    esp,0x20
c0020886:	e8 cc f8 ff ff       	call   c0020157 <Vm::fpuPop()>
c002088b:	eb 62                	jmp    c00208ef <Vm::x87Handler(regs*)+0x746>
c002088d:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020891:	0f 85 0f 01 00 00    	jne    c00209a6 <Vm::x87Handler(regs*)+0x7fd>
c0020897:	83 ec 0c             	sub    esp,0xc
c002089a:	6a 01                	push   0x1
c002089c:	e8 cb f7 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00208a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00208a8:	89 c6                	mov    esi,eax
c00208aa:	89 d7                	mov    edi,edx
c00208ac:	e8 bb f7 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00208b1:	57                   	push   edi
c00208b2:	56                   	push   esi
c00208b3:	52                   	push   edx
c00208b4:	50                   	push   eax
c00208b5:	e8 d5 f6 ff ff       	call   c001ff8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00208ba:	83 c4 20             	add    esp,0x20
c00208bd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00208c1:	e8 91 f8 ff ff       	call   c0020157 <Vm::fpuPop()>
c00208c6:	e8 8c f8 ff ff       	call   c0020157 <Vm::fpuPop()>
c00208cb:	e9 50 f9 ff ff       	jmp    c0020220 <Vm::x87Handler(regs*)+0x77>
c00208d0:	3c d9                	cmp    al,0xd9
c00208d2:	0f 85 b5 02 00 00    	jne    c0020b8d <Vm::x87Handler(regs*)+0x9e4>
c00208d8:	eb bd                	jmp    c0020897 <Vm::x87Handler(regs*)+0x6ee>
c00208da:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00208de:	0f 85 ea 02 00 00    	jne    c0020bce <Vm::x87Handler(regs*)+0xa25>
c00208e4:	0f b7 05 c0 29 03 c0 	movzx  eax,WORD PTR ds:0xc00329c0
c00208eb:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00208ef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00208f3:	e9 28 f9 ff ff       	jmp    c0020220 <Vm::x87Handler(regs*)+0x77>
c00208f8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00208fc:	84 d2                	test   dl,dl
c00208fe:	75 0f                	jne    c002090f <Vm::x87Handler(regs*)+0x766>
c0020900:	83 ec 0c             	sub    esp,0xc
c0020903:	ff 36                	push   DWORD PTR [esi]
c0020905:	e8 b1 f4 ff ff       	call   c001fdbb <Vm::fpu32ToInternal(unsigned int)>
c002090a:	e9 2c 01 00 00       	jmp    c0020a3b <Vm::x87Handler(regs*)+0x892>
c002090f:	80 fa 01             	cmp    dl,0x1
c0020912:	75 0f                	jne    c0020923 <Vm::x87Handler(regs*)+0x77a>
c0020914:	83 ec 0c             	sub    esp,0xc
c0020917:	ff 36                	push   DWORD PTR [esi]
c0020919:	e8 9d f4 ff ff       	call   c001fdbb <Vm::fpu32ToInternal(unsigned int)>
c002091e:	e9 81 02 00 00       	jmp    c0020ba4 <Vm::x87Handler(regs*)+0x9fb>
c0020923:	80 fa 04             	cmp    dl,0x4
c0020926:	75 0f                	jne    c0020937 <Vm::x87Handler(regs*)+0x78e>
c0020928:	83 ec 0c             	sub    esp,0xc
c002092b:	ff 36                	push   DWORD PTR [esi]
c002092d:	e8 89 f4 ff ff       	call   c001fdbb <Vm::fpu32ToInternal(unsigned int)>
c0020932:	e9 86 01 00 00       	jmp    c0020abd <Vm::x87Handler(regs*)+0x914>
c0020937:	80 fa 05             	cmp    dl,0x5
c002093a:	75 1b                	jne    c0020957 <Vm::x87Handler(regs*)+0x7ae>
c002093c:	83 ec 0c             	sub    esp,0xc
c002093f:	6a 00                	push   0x0
c0020941:	e8 26 f7 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020946:	89 c7                	mov    edi,eax
c0020948:	89 d5                	mov    ebp,edx
c002094a:	58                   	pop    eax
c002094b:	ff 36                	push   DWORD PTR [esi]
c002094d:	e8 69 f4 ff ff       	call   c001fdbb <Vm::fpu32ToInternal(unsigned int)>
c0020952:	e9 a3 01 00 00       	jmp    c0020afa <Vm::x87Handler(regs*)+0x951>
c0020957:	80 fa 06             	cmp    dl,0x6
c002095a:	75 0f                	jne    c002096b <Vm::x87Handler(regs*)+0x7c2>
c002095c:	83 ec 0c             	sub    esp,0xc
c002095f:	ff 36                	push   DWORD PTR [esi]
c0020961:	e8 55 f4 ff ff       	call   c001fdbb <Vm::fpu32ToInternal(unsigned int)>
c0020966:	e9 ae 01 00 00       	jmp    c0020b19 <Vm::x87Handler(regs*)+0x970>
c002096b:	31 c0                	xor    eax,eax
c002096d:	80 fa 07             	cmp    dl,0x7
c0020970:	0f 85 94 02 00 00    	jne    c0020c0a <Vm::x87Handler(regs*)+0xa61>
c0020976:	83 ec 0c             	sub    esp,0xc
c0020979:	6a 00                	push   0x0
c002097b:	e8 ec f6 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020980:	89 c7                	mov    edi,eax
c0020982:	89 d5                	mov    ebp,edx
c0020984:	58                   	pop    eax
c0020985:	ff 36                	push   DWORD PTR [esi]
c0020987:	e8 2f f4 ff ff       	call   c001fdbb <Vm::fpu32ToInternal(unsigned int)>
c002098c:	e9 cb 01 00 00       	jmp    c0020b5c <Vm::x87Handler(regs*)+0x9b3>
c0020991:	80 fa 03             	cmp    dl,0x3
c0020994:	0f 85 d3 01 00 00    	jne    c0020b6d <Vm::x87Handler(regs*)+0x9c4>
c002099a:	e8 b8 f7 ff ff       	call   c0020157 <Vm::fpuPop()>
c002099f:	51                   	push   ecx
c00209a0:	51                   	push   ecx
c00209a1:	e9 de 01 00 00       	jmp    c0020b84 <Vm::x87Handler(regs*)+0x9db>
c00209a6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00209aa:	80 fa 01             	cmp    dl,0x1
c00209ad:	75 09                	jne    c00209b8 <Vm::x87Handler(regs*)+0x80f>
c00209af:	57                   	push   edi
c00209b0:	57                   	push   edi
c00209b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00209b3:	e9 e3 01 00 00       	jmp    c0020b9b <Vm::x87Handler(regs*)+0x9f2>
c00209b8:	80 fa 04             	cmp    dl,0x4
c00209bb:	75 12                	jne    c00209cf <Vm::x87Handler(regs*)+0x826>
c00209bd:	31 d2                	xor    edx,edx
c00209bf:	51                   	push   ecx
c00209c0:	51                   	push   ecx
c00209c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00209c3:	52                   	push   edx
c00209c4:	50                   	push   eax
c00209c5:	e8 d0 f4 ff ff       	call   c001fe9a <Vm::fpuLongToFloat(long long)>
c00209ca:	e9 ee 00 00 00       	jmp    c0020abd <Vm::x87Handler(regs*)+0x914>
c00209cf:	31 c0                	xor    eax,eax
c00209d1:	80 fa 07             	cmp    dl,0x7
c00209d4:	0f 85 30 02 00 00    	jne    c0020c0a <Vm::x87Handler(regs*)+0xa61>
c00209da:	83 ec 0c             	sub    esp,0xc
c00209dd:	6a 00                	push   0x0
c00209df:	e8 88 f6 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c00209e4:	89 c7                	mov    edi,eax
c00209e6:	89 d5                	mov    ebp,edx
c00209e8:	58                   	pop    eax
c00209e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00209eb:	5a                   	pop    edx
c00209ec:	31 d2                	xor    edx,edx
c00209ee:	52                   	push   edx
c00209ef:	50                   	push   eax
c00209f0:	e8 a5 f4 ff ff       	call   c001fe9a <Vm::fpuLongToFloat(long long)>
c00209f5:	e9 62 01 00 00       	jmp    c0020b5c <Vm::x87Handler(regs*)+0x9b3>
c00209fa:	84 d2                	test   dl,dl
c00209fc:	75 0d                	jne    c0020a0b <Vm::x87Handler(regs*)+0x862>
c00209fe:	31 d2                	xor    edx,edx
c0020a00:	55                   	push   ebp
c0020a01:	55                   	push   ebp
c0020a02:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a04:	52                   	push   edx
c0020a05:	50                   	push   eax
c0020a06:	e9 d3 01 00 00       	jmp    c0020bde <Vm::x87Handler(regs*)+0xa35>
c0020a0b:	31 c0                	xor    eax,eax
c0020a0d:	80 fa 02             	cmp    dl,0x2
c0020a10:	0f 85 f4 01 00 00    	jne    c0020c0a <Vm::x87Handler(regs*)+0xa61>
c0020a16:	83 ec 0c             	sub    esp,0xc
c0020a19:	6a 00                	push   0x0
c0020a1b:	e8 4c f6 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020a20:	59                   	pop    ecx
c0020a21:	5f                   	pop    edi
c0020a22:	e9 6a f9 ff ff       	jmp    c0020391 <Vm::x87Handler(regs*)+0x1e8>
c0020a27:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020a2b:	84 d2                	test   dl,dl
c0020a2d:	75 2a                	jne    c0020a59 <Vm::x87Handler(regs*)+0x8b0>
c0020a2f:	50                   	push   eax
c0020a30:	50                   	push   eax
c0020a31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a34:	ff 36                	push   DWORD PTR [esi]
c0020a36:	e8 c5 f3 ff ff       	call   c001fe00 <Vm::fpu64ToInternal(unsigned long long)>
c0020a3b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a42:	89 c6                	mov    esi,eax
c0020a44:	89 d7                	mov    edi,edx
c0020a46:	e8 21 f6 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020a4b:	57                   	push   edi
c0020a4c:	56                   	push   esi
c0020a4d:	52                   	push   edx
c0020a4e:	50                   	push   eax
c0020a4f:	e8 8e f5 ff ff       	call   c001ffe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020a54:	e9 64 01 00 00       	jmp    c0020bbd <Vm::x87Handler(regs*)+0xa14>
c0020a59:	80 fa 01             	cmp    dl,0x1
c0020a5c:	75 11                	jne    c0020a6f <Vm::x87Handler(regs*)+0x8c6>
c0020a5e:	50                   	push   eax
c0020a5f:	50                   	push   eax
c0020a60:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a63:	ff 36                	push   DWORD PTR [esi]
c0020a65:	e8 96 f3 ff ff       	call   c001fe00 <Vm::fpu64ToInternal(unsigned long long)>
c0020a6a:	e9 35 01 00 00       	jmp    c0020ba4 <Vm::x87Handler(regs*)+0x9fb>
c0020a6f:	80 fa 02             	cmp    dl,0x2
c0020a72:	0f 85 54 f9 ff ff    	jne    c00203cc <Vm::x87Handler(regs*)+0x223>
c0020a78:	55                   	push   ebp
c0020a79:	55                   	push   ebp
c0020a7a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a7d:	ff 36                	push   DWORD PTR [esi]
c0020a7f:	e8 7c f3 ff ff       	call   c001fe00 <Vm::fpu64ToInternal(unsigned long long)>
c0020a84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a8b:	89 c6                	mov    esi,eax
c0020a8d:	89 d7                	mov    edi,edx
c0020a8f:	e8 d8 f5 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020a94:	57                   	push   edi
c0020a95:	56                   	push   esi
c0020a96:	52                   	push   edx
c0020a97:	50                   	push   eax
c0020a98:	e8 f2 f4 ff ff       	call   c001ff8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020a9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020aa1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020aa4:	83 c4 20             	add    esp,0x20
c0020aa7:	e9 74 f7 ff ff       	jmp    c0020220 <Vm::x87Handler(regs*)+0x77>
c0020aac:	80 fa 04             	cmp    dl,0x4
c0020aaf:	75 2a                	jne    c0020adb <Vm::x87Handler(regs*)+0x932>
c0020ab1:	51                   	push   ecx
c0020ab2:	51                   	push   ecx
c0020ab3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020ab6:	ff 36                	push   DWORD PTR [esi]
c0020ab8:	e8 43 f3 ff ff       	call   c001fe00 <Vm::fpu64ToInternal(unsigned long long)>
c0020abd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020ac4:	89 c6                	mov    esi,eax
c0020ac6:	89 d7                	mov    edi,edx
c0020ac8:	e8 9f f5 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020acd:	57                   	push   edi
c0020ace:	56                   	push   esi
c0020acf:	52                   	push   edx
c0020ad0:	50                   	push   eax
c0020ad1:	e8 36 f5 ff ff       	call   c002000c <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020ad6:	e9 e2 00 00 00       	jmp    c0020bbd <Vm::x87Handler(regs*)+0xa14>
c0020adb:	80 fa 05             	cmp    dl,0x5
c0020ade:	75 28                	jne    c0020b08 <Vm::x87Handler(regs*)+0x95f>
c0020ae0:	83 ec 0c             	sub    esp,0xc
c0020ae3:	6a 00                	push   0x0
c0020ae5:	e8 82 f5 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020aea:	89 c7                	mov    edi,eax
c0020aec:	89 d5                	mov    ebp,edx
c0020aee:	58                   	pop    eax
c0020aef:	5a                   	pop    edx
c0020af0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020af3:	ff 36                	push   DWORD PTR [esi]
c0020af5:	e8 06 f3 ff ff       	call   c001fe00 <Vm::fpu64ToInternal(unsigned long long)>
c0020afa:	83 c4 10             	add    esp,0x10
c0020afd:	55                   	push   ebp
c0020afe:	57                   	push   edi
c0020aff:	52                   	push   edx
c0020b00:	50                   	push   eax
c0020b01:	e8 06 f5 ff ff       	call   c002000c <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020b06:	eb 60                	jmp    c0020b68 <Vm::x87Handler(regs*)+0x9bf>
c0020b08:	80 fa 06             	cmp    dl,0x6
c0020b0b:	75 2a                	jne    c0020b37 <Vm::x87Handler(regs*)+0x98e>
c0020b0d:	51                   	push   ecx
c0020b0e:	51                   	push   ecx
c0020b0f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b12:	ff 36                	push   DWORD PTR [esi]
c0020b14:	e8 e7 f2 ff ff       	call   c001fe00 <Vm::fpu64ToInternal(unsigned long long)>
c0020b19:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b20:	89 c6                	mov    esi,eax
c0020b22:	89 d7                	mov    edi,edx
c0020b24:	e8 43 f5 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020b29:	57                   	push   edi
c0020b2a:	56                   	push   esi
c0020b2b:	52                   	push   edx
c0020b2c:	50                   	push   eax
c0020b2d:	e8 08 f5 ff ff       	call   c002003a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020b32:	e9 86 00 00 00       	jmp    c0020bbd <Vm::x87Handler(regs*)+0xa14>
c0020b37:	31 c0                	xor    eax,eax
c0020b39:	80 fa 07             	cmp    dl,0x7
c0020b3c:	0f 85 c8 00 00 00    	jne    c0020c0a <Vm::x87Handler(regs*)+0xa61>
c0020b42:	83 ec 0c             	sub    esp,0xc
c0020b45:	6a 00                	push   0x0
c0020b47:	e8 20 f5 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020b4c:	89 c7                	mov    edi,eax
c0020b4e:	89 d5                	mov    ebp,edx
c0020b50:	58                   	pop    eax
c0020b51:	5a                   	pop    edx
c0020b52:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b55:	ff 36                	push   DWORD PTR [esi]
c0020b57:	e8 a4 f2 ff ff       	call   c001fe00 <Vm::fpu64ToInternal(unsigned long long)>
c0020b5c:	83 c4 10             	add    esp,0x10
c0020b5f:	55                   	push   ebp
c0020b60:	57                   	push   edi
c0020b61:	52                   	push   edx
c0020b62:	50                   	push   eax
c0020b63:	e8 d2 f4 ff ff       	call   c002003a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020b68:	83 c4 0c             	add    esp,0xc
c0020b6b:	eb 53                	jmp    c0020bc0 <Vm::x87Handler(regs*)+0xa17>
c0020b6d:	31 c0                	xor    eax,eax
c0020b6f:	80 fa 02             	cmp    dl,0x2
c0020b72:	0f 85 92 00 00 00    	jne    c0020c0a <Vm::x87Handler(regs*)+0xa61>
c0020b78:	83 ec 0c             	sub    esp,0xc
c0020b7b:	6a 00                	push   0x0
c0020b7d:	e8 ea f4 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020b82:	59                   	pop    ecx
c0020b83:	5f                   	pop    edi
c0020b84:	52                   	push   edx
c0020b85:	50                   	push   eax
c0020b86:	e8 27 f2 ff ff       	call   c001fdb2 <Vm::fpuInternalTo64(unsigned long long)>
c0020b8b:	eb 70                	jmp    c0020bfd <Vm::x87Handler(regs*)+0xa54>
c0020b8d:	31 c0                	xor    eax,eax
c0020b8f:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020b94:	75 74                	jne    c0020c0a <Vm::x87Handler(regs*)+0xa61>
c0020b96:	50                   	push   eax
c0020b97:	50                   	push   eax
c0020b98:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020b9b:	31 d2                	xor    edx,edx
c0020b9d:	52                   	push   edx
c0020b9e:	50                   	push   eax
c0020b9f:	e8 f6 f2 ff ff       	call   c001fe9a <Vm::fpuLongToFloat(long long)>
c0020ba4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020bab:	89 c6                	mov    esi,eax
c0020bad:	89 d7                	mov    edi,edx
c0020baf:	e8 b8 f4 ff ff       	call   c002006c <Vm::fpuGetReg(int)>
c0020bb4:	57                   	push   edi
c0020bb5:	56                   	push   esi
c0020bb6:	52                   	push   edx
c0020bb7:	50                   	push   eax
c0020bb8:	e8 5e f4 ff ff       	call   c002001b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020bbd:	83 c4 1c             	add    esp,0x1c
c0020bc0:	52                   	push   edx
c0020bc1:	50                   	push   eax
c0020bc2:	6a 00                	push   0x0
c0020bc4:	e8 e6 f4 ff ff       	call   c00200af <Vm::fpuSetReg(int, unsigned long long)>
c0020bc9:	e9 f2 f7 ff ff       	jmp    c00203c0 <Vm::x87Handler(regs*)+0x217>
c0020bce:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020bd2:	80 fa 05             	cmp    dl,0x5
c0020bd5:	75 11                	jne    c0020be8 <Vm::x87Handler(regs*)+0xa3f>
c0020bd7:	55                   	push   ebp
c0020bd8:	55                   	push   ebp
c0020bd9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020bdc:	ff 36                	push   DWORD PTR [esi]
c0020bde:	e8 81 f2 ff ff       	call   c001fe64 <Vm::fpuULongToFloat(unsigned long long)>
c0020be3:	e9 cf f7 ff ff       	jmp    c00203b7 <Vm::x87Handler(regs*)+0x20e>
c0020be8:	31 c0                	xor    eax,eax
c0020bea:	80 fa 07             	cmp    dl,0x7
c0020bed:	75 1b                	jne    c0020c0a <Vm::x87Handler(regs*)+0xa61>
c0020bef:	e8 63 f5 ff ff       	call   c0020157 <Vm::fpuPop()>
c0020bf4:	51                   	push   ecx
c0020bf5:	51                   	push   ecx
c0020bf6:	52                   	push   edx
c0020bf7:	50                   	push   eax
c0020bf8:	e8 0c f2 ff ff       	call   c001fe09 <Vm::fpuFloatToLong(unsigned long long)>
c0020bfd:	83 c4 10             	add    esp,0x10
c0020c00:	89 06                	mov    DWORD PTR [esi],eax
c0020c02:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020c05:	e9 f8 f7 ff ff       	jmp    c0020402 <Vm::x87Handler(regs*)+0x259>
c0020c0a:	83 c4 1c             	add    esp,0x1c
c0020c0d:	5b                   	pop    ebx
c0020c0e:	5e                   	pop    esi
c0020c0f:	5f                   	pop    edi
c0020c10:	5d                   	pop    ebp
c0020c11:	c3                   	ret    

c0020c12 <__static_initialization_and_destruction_0(int, int)>:
c0020c12:	83 ec 0c             	sub    esp,0xc
c0020c15:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020c1a:	75 1a                	jne    c0020c36 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020c1c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020c24:	75 10                	jne    c0020c36 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020c26:	83 ec 0c             	sub    esp,0xc
c0020c29:	68 c0 29 03 c0       	push   0xc00329c0
c0020c2e:	e8 19 8f 00 00       	call   c0029b4c <Vm::_FPUState::_FPUState()>
c0020c33:	83 c4 10             	add    esp,0x10
c0020c36:	90                   	nop
c0020c37:	83 c4 0c             	add    esp,0xc
c0020c3a:	c3                   	ret    

c0020c3b <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020c3b:	83 ec 0c             	sub    esp,0xc
c0020c3e:	83 ec 08             	sub    esp,0x8
c0020c41:	68 ff ff 00 00       	push   0xffff
c0020c46:	6a 01                	push   0x1
c0020c48:	e8 c5 ff ff ff       	call   c0020c12 <__static_initialization_and_destruction_0(int, int)>
c0020c4d:	83 c4 10             	add    esp,0x10
c0020c50:	83 c4 0c             	add    esp,0xc
c0020c53:	c3                   	ret    

c0020c54 <FAT::getName()>:
c0020c54:	b8 84 d6 02 c0       	mov    eax,0xc002d684
c0020c59:	c3                   	ret    

c0020c5a <FAT::tell(void*, unsigned long long*)>:
c0020c5a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020c5f:	75 06                	jne    c0020c67 <FAT::tell(void*, unsigned long long*)+0xd>
c0020c61:	b8 04 00 00 00       	mov    eax,0x4
c0020c66:	c3                   	ret    
c0020c67:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020c6c:	75 06                	jne    c0020c74 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020c6e:	b8 04 00 00 00       	mov    eax,0x4
c0020c73:	c3                   	ret    
c0020c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c78:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020c7b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020c82:	89 01                	mov    DWORD PTR [ecx],eax
c0020c84:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c87:	b8 00 00 00 00       	mov    eax,0x0
c0020c8c:	c3                   	ret    
c0020c8d:	90                   	nop

c0020c8e <FAT::stat(void*, unsigned long long*)>:
c0020c8e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020c93:	75 06                	jne    c0020c9b <FAT::stat(void*, unsigned long long*)+0xd>
c0020c95:	b8 04 00 00 00       	mov    eax,0x4
c0020c9a:	c3                   	ret    
c0020c9b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020ca0:	75 06                	jne    c0020ca8 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020ca2:	b8 04 00 00 00       	mov    eax,0x4
c0020ca7:	c3                   	ret    
c0020ca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cac:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020caf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020cb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020cb6:	89 01                	mov    DWORD PTR [ecx],eax
c0020cb8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020cbb:	b8 00 00 00 00       	mov    eax,0x0
c0020cc0:	c3                   	ret    
c0020cc1:	90                   	nop

c0020cc2 <FAT::~FAT()>:
c0020cc2:	83 ec 0c             	sub    esp,0xc
c0020cc5:	ba 14 d7 02 c0       	mov    edx,0xc002d714
c0020cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cce:	89 10                	mov    DWORD PTR [eax],edx
c0020cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cd4:	83 ec 0c             	sub    esp,0xc
c0020cd7:	50                   	push   eax
c0020cd8:	e8 39 24 ff ff       	call   c0013116 <Filesystem::~Filesystem()>
c0020cdd:	83 c4 10             	add    esp,0x10
c0020ce0:	90                   	nop
c0020ce1:	83 c4 0c             	add    esp,0xc
c0020ce4:	c3                   	ret    
c0020ce5:	90                   	nop

c0020ce6 <FAT::~FAT()>:
c0020ce6:	83 ec 0c             	sub    esp,0xc
c0020ce9:	83 ec 0c             	sub    esp,0xc
c0020cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cf0:	e8 cd ff ff ff       	call   c0020cc2 <FAT::~FAT()>
c0020cf5:	83 c4 10             	add    esp,0x10
c0020cf8:	83 ec 08             	sub    esp,0x8
c0020cfb:	6a 08                	push   0x8
c0020cfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d01:	e8 01 20 ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0020d06:	83 c4 10             	add    esp,0x10
c0020d09:	83 c4 0c             	add    esp,0xc
c0020d0c:	c3                   	ret    
c0020d0d:	90                   	nop

c0020d0e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020d0e:	83 ec 1c             	sub    esp,0x1c
c0020d11:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020d18:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020d1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d21:	8b 04 85 40 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5c0]
c0020d28:	83 f8 ff             	cmp    eax,0xffffffff
c0020d2b:	75 34                	jne    c0020d61 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020d2d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020d31:	88 c2                	mov    dl,al
c0020d33:	a1 20 2a 03 c0       	mov    eax,ds:0xc0032a20
c0020d38:	01 d0                	add    eax,edx
c0020d3a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020d3e:	8b 15 20 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032a20
c0020d44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d48:	89 14 85 40 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd5c0],edx
c0020d4f:	a1 20 2a 03 c0       	mov    eax,ds:0xc0032a20
c0020d54:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020d58:	89 14 85 c0 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd540],edx
c0020d5f:	eb 17                	jmp    c0020d78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020d61:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020d65:	88 c2                	mov    dl,al
c0020d67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d6b:	8b 04 85 40 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5c0]
c0020d72:	01 d0                	add    eax,edx
c0020d74:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020d78:	83 ec 04             	sub    esp,0x4
c0020d7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d83:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020d87:	50                   	push   eax
c0020d88:	e8 71 5f fe ff       	call   c0006cfe <f_getlabel>
c0020d8d:	83 c4 10             	add    esp,0x10
c0020d90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d94:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020d99:	75 07                	jne    c0020da2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020d9b:	b8 00 00 00 00       	mov    eax,0x0
c0020da0:	eb 05                	jmp    c0020da7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020da2:	b8 01 00 00 00       	mov    eax,0x1
c0020da7:	83 c4 1c             	add    esp,0x1c
c0020daa:	c3                   	ret    
c0020dab:	90                   	nop

c0020dac <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020dac:	57                   	push   edi
c0020dad:	83 ec 58             	sub    esp,0x58
c0020db0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020db8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020dbc:	b9 0f 00 00 00       	mov    ecx,0xf
c0020dc1:	b8 00 00 00 00       	mov    eax,0x0
c0020dc6:	fc                   	cld    
c0020dc7:	89 d7                	mov    edi,edx
c0020dc9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020dcb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020dcf:	8b 04 85 40 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5c0]
c0020dd6:	83 f8 ff             	cmp    eax,0xffffffff
c0020dd9:	75 34                	jne    c0020e0f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020ddb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020ddf:	88 c2                	mov    dl,al
c0020de1:	a1 20 2a 03 c0       	mov    eax,ds:0xc0032a20
c0020de6:	01 d0                	add    eax,edx
c0020de8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dec:	8b 15 20 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032a20
c0020df2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020df6:	89 14 85 40 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd5c0],edx
c0020dfd:	a1 20 2a 03 c0       	mov    eax,ds:0xc0032a20
c0020e02:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020e06:	89 14 85 c0 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd540],edx
c0020e0d:	eb 17                	jmp    c0020e26 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020e0f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020e13:	88 c2                	mov    dl,al
c0020e15:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020e19:	8b 04 85 40 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5c0]
c0020e20:	01 d0                	add    eax,edx
c0020e22:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e26:	83 ec 08             	sub    esp,0x8
c0020e29:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020e2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e31:	50                   	push   eax
c0020e32:	e8 15 fb fd ff       	call   c000094c <strcat>
c0020e37:	83 c4 10             	add    esp,0x10
c0020e3a:	83 ec 0c             	sub    esp,0xc
c0020e3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e41:	50                   	push   eax
c0020e42:	e8 a5 60 fe ff       	call   c0006eec <f_setlabel>
c0020e47:	83 c4 10             	add    esp,0x10
c0020e4a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020e4e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020e53:	75 07                	jne    c0020e5c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020e55:	b8 00 00 00 00       	mov    eax,0x0
c0020e5a:	eb 05                	jmp    c0020e61 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020e5c:	b8 01 00 00 00       	mov    eax,0x1
c0020e61:	83 c4 58             	add    esp,0x58
c0020e64:	5f                   	pop    edi
c0020e65:	c3                   	ret    

c0020e66 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020e66:	83 ec 2c             	sub    esp,0x2c
c0020e69:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020e71:	83 ec 08             	sub    esp,0x8
c0020e74:	68 a8 d6 02 c0       	push   0xc002d6a8
c0020e79:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e7d:	e8 16 fa fd ff       	call   c0000898 <strcmp>
c0020e82:	83 c4 10             	add    esp,0x10
c0020e85:	85 c0                	test   eax,eax
c0020e87:	0f 94 c0             	sete   al
c0020e8a:	84 c0                	test   al,al
c0020e8c:	74 0d                	je     c0020e9b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020e8e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e96:	e9 a6 00 00 00       	jmp    c0020f41 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e9b:	83 ec 08             	sub    esp,0x8
c0020e9e:	68 9a d6 02 c0       	push   0xc002d69a
c0020ea3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020ea7:	e8 ec f9 fd ff       	call   c0000898 <strcmp>
c0020eac:	83 c4 10             	add    esp,0x10
c0020eaf:	85 c0                	test   eax,eax
c0020eb1:	0f 94 c0             	sete   al
c0020eb4:	84 c0                	test   al,al
c0020eb6:	74 0a                	je     c0020ec2 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020eb8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020ec0:	eb 7f                	jmp    c0020f41 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ec2:	83 ec 08             	sub    esp,0x8
c0020ec5:	68 a0 d6 02 c0       	push   0xc002d6a0
c0020eca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020ece:	e8 c5 f9 fd ff       	call   c0000898 <strcmp>
c0020ed3:	83 c4 10             	add    esp,0x10
c0020ed6:	85 c0                	test   eax,eax
c0020ed8:	0f 94 c0             	sete   al
c0020edb:	84 c0                	test   al,al
c0020edd:	74 0a                	je     c0020ee9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020edf:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020ee7:	eb 58                	jmp    c0020f41 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ee9:	83 ec 08             	sub    esp,0x8
c0020eec:	68 ac a2 02 c0       	push   0xc002a2ac
c0020ef1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020ef5:	e8 9e f9 fd ff       	call   c0000898 <strcmp>
c0020efa:	83 c4 10             	add    esp,0x10
c0020efd:	85 c0                	test   eax,eax
c0020eff:	0f 94 c0             	sete   al
c0020f02:	84 c0                	test   al,al
c0020f04:	74 0a                	je     c0020f10 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020f06:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020f0e:	eb 31                	jmp    c0020f41 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020f10:	83 ec 08             	sub    esp,0x8
c0020f13:	68 a6 d6 02 c0       	push   0xc002d6a6
c0020f18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f1c:	e8 77 f9 fd ff       	call   c0000898 <strcmp>
c0020f21:	83 c4 10             	add    esp,0x10
c0020f24:	85 c0                	test   eax,eax
c0020f26:	0f 94 c0             	sete   al
c0020f29:	84 c0                	test   al,al
c0020f2b:	74 0a                	je     c0020f37 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020f2d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020f35:	eb 0a                	jmp    c0020f41 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020f37:	b8 08 00 00 00       	mov    eax,0x8
c0020f3c:	e9 04 01 00 00       	jmp    c0021045 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f41:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020f48:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020f4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f51:	8b 04 85 40 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5c0]
c0020f58:	83 f8 ff             	cmp    eax,0xffffffff
c0020f5b:	75 34                	jne    c0020f91 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020f5d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020f61:	88 c2                	mov    dl,al
c0020f63:	a1 20 2a 03 c0       	mov    eax,ds:0xc0032a20
c0020f68:	01 d0                	add    eax,edx
c0020f6a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020f6e:	8b 15 20 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032a20
c0020f74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f78:	89 14 85 40 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd5c0],edx
c0020f7f:	a1 20 2a 03 c0       	mov    eax,ds:0xc0032a20
c0020f84:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020f88:	89 14 85 c0 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd540],edx
c0020f8f:	eb 17                	jmp    c0020fa8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020f91:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020f95:	88 c2                	mov    dl,al
c0020f97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f9b:	8b 04 85 40 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5c0]
c0020fa2:	01 d0                	add    eax,edx
c0020fa4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020fa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fac:	88 04 24             	mov    BYTE PTR [esp],al
c0020faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020fb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fb7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020fbf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020fc4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020fcc:	83 ec 0c             	sub    esp,0xc
c0020fcf:	68 00 20 00 00       	push   0x2000
c0020fd4:	e8 b3 e8 fe ff       	call   c000f88c <malloc>
c0020fd9:	83 c4 10             	add    esp,0x10
c0020fdc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020fe0:	68 00 20 00 00       	push   0x2000
c0020fe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fe9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fed:	50                   	push   eax
c0020fee:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020ff2:	50                   	push   eax
c0020ff3:	e8 3f 63 fe ff       	call   c0007337 <f_mkfs>
c0020ff8:	83 c4 10             	add    esp,0x10
c0020ffb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020fff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021004:	75 07                	jne    c002100d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0021006:	b8 00 00 00 00       	mov    eax,0x0
c002100b:	eb 38                	jmp    c0021045 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002100d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0021012:	75 17                	jne    c002102b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0021014:	83 ec 0c             	sub    esp,0xc
c0021017:	68 e4 d6 02 c0       	push   0xc002d6e4
c002101c:	e8 c6 1d ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0021021:	83 c4 10             	add    esp,0x10
c0021024:	b8 09 00 00 00       	mov    eax,0x9
c0021029:	eb 1a                	jmp    c0021045 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002102b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002102f:	83 ec 08             	sub    esp,0x8
c0021032:	50                   	push   eax
c0021033:	68 ac d6 02 c0       	push   0xc002d6ac
c0021038:	e8 aa 1d ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c002103d:	83 c4 10             	add    esp,0x10
c0021040:	b8 01 00 00 00       	mov    eax,0x1
c0021045:	83 c4 2c             	add    esp,0x2c
c0021048:	c3                   	ret    
c0021049:	90                   	nop

c002104a <FAT::tryMount(LogicalDisk*, int)>:
c002104a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0021050:	a1 20 2a 03 c0       	mov    eax,ds:0xc0032a20
c0021055:	83 f8 14             	cmp    eax,0x14
c0021058:	75 17                	jne    c0021071 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002105a:	83 ec 0c             	sub    esp,0xc
c002105d:	68 be d6 02 c0       	push   0xc002d6be
c0021062:	e8 c8 98 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0021067:	83 c4 10             	add    esp,0x10
c002106a:	b0 00                	mov    al,0x0
c002106c:	e9 d7 01 00 00       	jmp    c0021248 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021071:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0021078:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002107e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021084:	3d 00 02 00 00       	cmp    eax,0x200
c0021089:	74 07                	je     c0021092 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002108b:	b0 00                	mov    al,0x0
c002108d:	e9 b6 01 00 00       	jmp    c0021248 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021092:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002109a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00210a1:	8b 04 85 40 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5c0]
c00210a8:	83 f8 ff             	cmp    eax,0xffffffff
c00210ab:	74 07                	je     c00210b4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00210ad:	b0 01                	mov    al,0x1
c00210af:	e9 94 01 00 00       	jmp    c0021248 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00210b4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00210be:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00210c6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00210cd:	88 c2                	mov    dl,al
c00210cf:	a1 20 2a 03 c0       	mov    eax,ds:0xc0032a20
c00210d4:	01 d0                	add    eax,edx
c00210d6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00210dd:	8b 15 20 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032a20
c00210e3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00210ea:	89 14 85 40 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd5c0],edx
c00210f1:	a1 20 2a 03 c0       	mov    eax,ds:0xc0032a20
c00210f6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00210fd:	89 14 85 c0 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd540],edx
c0021104:	83 ec 0c             	sub    esp,0xc
c0021107:	68 54 02 00 00       	push   0x254
c002110c:	e8 7b e7 fe ff       	call   c000f88c <malloc>
c0021111:	83 c4 10             	add    esp,0x10
c0021114:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002111b:	83 ec 04             	sub    esp,0x4
c002111e:	6a 00                	push   0x0
c0021120:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021127:	50                   	push   eax
c0021128:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002112f:	e8 c1 3d fe ff       	call   c0004ef5 <f_mount>
c0021134:	83 c4 10             	add    esp,0x10
c0021137:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002113e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0021146:	74 19                	je     c0021161 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021148:	83 ec 0c             	sub    esp,0xc
c002114b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021152:	e8 55 e7 fe ff       	call   c000f8ac <rfree>
c0021157:	83 c4 10             	add    esp,0x10
c002115a:	b0 00                	mov    al,0x0
c002115c:	e9 e7 00 00 00       	jmp    c0021248 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021161:	83 ec 04             	sub    esp,0x4
c0021164:	68 00 01 00 00       	push   0x100
c0021169:	6a 00                	push   0x0
c002116b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021172:	50                   	push   eax
c0021173:	e8 d8 f5 fd ff       	call   c0000750 <memset>
c0021178:	83 c4 10             	add    esp,0x10
c002117b:	83 ec 08             	sub    esp,0x8
c002117e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021185:	50                   	push   eax
c0021186:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002118d:	50                   	push   eax
c002118e:	e8 b9 f7 fd ff       	call   c000094c <strcat>
c0021193:	83 c4 10             	add    esp,0x10
c0021196:	83 ec 08             	sub    esp,0x8
c0021199:	68 cc d6 02 c0       	push   0xc002d6cc
c002119e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00211a5:	50                   	push   eax
c00211a6:	e8 a1 f7 fd ff       	call   c000094c <strcat>
c00211ab:	83 c4 10             	add    esp,0x10
c00211ae:	83 ec 04             	sub    esp,0x4
c00211b1:	6a 01                	push   0x1
c00211b3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00211ba:	50                   	push   eax
c00211bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00211bf:	50                   	push   eax
c00211c0:	e8 92 3d fe ff       	call   c0004f57 <f_open>
c00211c5:	83 c4 10             	add    esp,0x10
c00211c8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00211cf:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00211d6:	85 c0                	test   eax,eax
c00211d8:	74 0a                	je     c00211e4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00211da:	78 2d                	js     c0021209 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00211dc:	83 e8 04             	sub    eax,0x4
c00211df:	83 f8 01             	cmp    eax,0x1
c00211e2:	77 25                	ja     c0021209 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00211e4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00211ec:	83 ec 0c             	sub    esp,0xc
c00211ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00211f3:	50                   	push   eax
c00211f4:	e8 b0 48 fe ff       	call   c0005aa9 <f_close>
c00211f9:	83 c4 10             	add    esp,0x10
c00211fc:	90                   	nop
c00211fd:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0021205:	74 3a                	je     c0021241 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0021207:	eb 2d                	jmp    c0021236 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0021209:	83 ec 0c             	sub    esp,0xc
c002120c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021213:	e8 94 e6 fe ff       	call   c000f8ac <rfree>
c0021218:	83 c4 10             	add    esp,0x10
c002121b:	83 ec 04             	sub    esp,0x4
c002121e:	6a 00                	push   0x0
c0021220:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021227:	50                   	push   eax
c0021228:	6a 00                	push   0x0
c002122a:	e8 c6 3c fe ff       	call   c0004ef5 <f_mount>
c002122f:	83 c4 10             	add    esp,0x10
c0021232:	b0 00                	mov    al,0x0
c0021234:	eb 12                	jmp    c0021248 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021236:	a1 20 2a 03 c0       	mov    eax,ds:0xc0032a20
c002123b:	40                   	inc    eax
c002123c:	a3 20 2a 03 c0       	mov    ds:0xc0032a20,eax
c0021241:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021248:	81 c4 6c 03 00 00    	add    esp,0x36c
c002124e:	c3                   	ret    
c002124f:	90                   	nop

c0021250 <FAT::getFileFirstSector(char const*)>:
c0021250:	53                   	push   ebx
c0021251:	83 ec 28             	sub    esp,0x28
c0021254:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002125c:	83 ec 0c             	sub    esp,0xc
c002125f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021263:	e8 24 e6 fe ff       	call   c000f88c <malloc>
c0021268:	83 c4 10             	add    esp,0x10
c002126b:	89 c3                	mov    ebx,eax
c002126d:	a1 50 29 03 c0       	mov    eax,ds:0xc0032950
c0021272:	83 ec 04             	sub    esp,0x4
c0021275:	50                   	push   eax
c0021276:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002127a:	53                   	push   ebx
c002127b:	e8 c6 20 ff ff       	call   c0013346 <File::File(char const*, Process*)>
c0021280:	83 c4 10             	add    esp,0x10
c0021283:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0021287:	83 ec 08             	sub    esp,0x8
c002128a:	6a 01                	push   0x1
c002128c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021290:	e8 15 21 ff ff       	call   c00133aa <File::open(FileOpenMode)>
c0021295:	83 c4 10             	add    esp,0x10
c0021298:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002129c:	8b 00                	mov    eax,DWORD PTR [eax]
c002129e:	83 c0 0c             	add    eax,0xc
c00212a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00212a3:	83 ec 0c             	sub    esp,0xc
c00212a6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00212aa:	52                   	push   edx
c00212ab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00212af:	52                   	push   edx
c00212b0:	6a 00                	push   0x0
c00212b2:	6a 04                	push   0x4
c00212b4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00212b8:	ff d0                	call   eax
c00212ba:	83 c4 20             	add    esp,0x20
c00212bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00212c1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00212c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00212cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00212cf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00212d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00212d5:	83 ec 04             	sub    esp,0x4
c00212d8:	52                   	push   edx
c00212d9:	50                   	push   eax
c00212da:	68 d7 d6 02 c0       	push   0xc002d6d7
c00212df:	e8 03 1b ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00212e4:	83 c4 10             	add    esp,0x10
c00212e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00212eb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00212ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00212f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00212f5:	83 ec 0c             	sub    esp,0xc
c00212f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00212fc:	e8 07 21 ff ff       	call   c0013408 <File::close()>
c0021301:	83 c4 10             	add    esp,0x10
c0021304:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021308:	ba 00 00 00 00       	mov    edx,0x0
c002130d:	83 c4 28             	add    esp,0x28
c0021310:	5b                   	pop    ebx
c0021311:	c3                   	ret    

c0021312 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0021312:	57                   	push   edi
c0021313:	56                   	push   esi
c0021314:	53                   	push   ebx
c0021315:	81 ec 50 02 00 00    	sub    esp,0x250
c002131b:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0021323:	74 0a                	je     c002132f <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0021325:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c002132d:	75 0a                	jne    c0021339 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002132f:	b8 04 00 00 00       	mov    eax,0x4
c0021334:	e9 29 01 00 00       	jmp    c0021462 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021339:	83 ec 08             	sub    esp,0x8
c002133c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021343:	50                   	push   eax
c0021344:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002134b:	e8 63 4d fe ff       	call   c00060b3 <f_readdir>
c0021350:	83 c4 10             	add    esp,0x10
c0021353:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002135a:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0021361:	83 ec 0c             	sub    esp,0xc
c0021364:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002136b:	83 c0 1a             	add    eax,0x1a
c002136e:	50                   	push   eax
c002136f:	e8 f8 f3 fd ff       	call   c000076c <strlen>
c0021374:	83 c4 10             	add    esp,0x10
c0021377:	ba 00 00 00 00       	mov    edx,0x0
c002137c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021380:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021384:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002138b:	0f b6 c0             	movzx  eax,al
c002138e:	83 e0 10             	and    eax,0x10
c0021391:	74 07                	je     c002139a <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0021393:	b8 02 00 00 00       	mov    eax,0x2
c0021398:	eb 05                	jmp    c002139f <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002139a:	b8 01 00 00 00       	mov    eax,0x1
c002139f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00213a3:	83 ec 08             	sub    esp,0x8
c00213a6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00213ad:	83 c0 1a             	add    eax,0x1a
c00213b0:	50                   	push   eax
c00213b1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00213b5:	83 c0 10             	add    eax,0x10
c00213b8:	50                   	push   eax
c00213b9:	e8 4e f4 fd ff       	call   c000080c <strcpy>
c00213be:	83 c4 10             	add    esp,0x10
c00213c1:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00213c8:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00213cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00213d3:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00213da:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00213e1:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00213e8:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00213ef:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00213f6:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00213fd:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0021404:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002140b:	89 c6                	mov    esi,eax
c002140d:	89 d7                	mov    edi,edx
c002140f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021411:	89 c8                	mov    eax,ecx
c0021413:	89 fa                	mov    edx,edi
c0021415:	89 f3                	mov    ebx,esi
c0021417:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002141e:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0021425:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c002142c:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0021433:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021439:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0021440:	84 c0                	test   al,al
c0021442:	75 07                	jne    c002144b <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0021444:	b8 07 00 00 00       	mov    eax,0x7
c0021449:	eb 17                	jmp    c0021462 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002144b:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0021452:	85 c0                	test   eax,eax
c0021454:	75 07                	jne    c002145d <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0021456:	b8 00 00 00 00       	mov    eax,0x0
c002145b:	eb 05                	jmp    c0021462 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002145d:	b8 01 00 00 00       	mov    eax,0x1
c0021462:	81 c4 50 02 00 00    	add    esp,0x250
c0021468:	5b                   	pop    ebx
c0021469:	5e                   	pop    esi
c002146a:	5f                   	pop    edi
c002146b:	c3                   	ret    

c002146c <FAT::read(void*, unsigned long, void*, int*)>:
c002146c:	83 ec 1c             	sub    esp,0x1c
c002146f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021474:	74 07                	je     c002147d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021476:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002147b:	75 07                	jne    c0021484 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002147d:	b8 04 00 00 00       	mov    eax,0x4
c0021482:	eb 3d                	jmp    c00214c1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021484:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021488:	50                   	push   eax
c0021489:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002148d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021491:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021495:	e8 f9 3e fe ff       	call   c0005393 <f_read>
c002149a:	83 c4 10             	add    esp,0x10
c002149d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00214a5:	89 c2                	mov    edx,eax
c00214a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00214ab:	89 10                	mov    DWORD PTR [eax],edx
c00214ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214b1:	85 c0                	test   eax,eax
c00214b3:	75 07                	jne    c00214bc <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00214b5:	b8 00 00 00 00       	mov    eax,0x0
c00214ba:	eb 05                	jmp    c00214c1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00214bc:	b8 01 00 00 00       	mov    eax,0x1
c00214c1:	83 c4 1c             	add    esp,0x1c
c00214c4:	c3                   	ret    
c00214c5:	90                   	nop

c00214c6 <FAT::write(void*, unsigned long, void*, int*)>:
c00214c6:	83 ec 1c             	sub    esp,0x1c
c00214c9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00214ce:	74 07                	je     c00214d7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00214d0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00214d5:	75 07                	jne    c00214de <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00214d7:	b8 04 00 00 00       	mov    eax,0x4
c00214dc:	eb 3d                	jmp    c002151b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00214de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00214e2:	50                   	push   eax
c00214e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00214e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00214eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214ef:	e8 1f 41 fe ff       	call   c0005613 <f_write>
c00214f4:	83 c4 10             	add    esp,0x10
c00214f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00214ff:	89 c2                	mov    edx,eax
c0021501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021505:	89 10                	mov    DWORD PTR [eax],edx
c0021507:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002150b:	85 c0                	test   eax,eax
c002150d:	75 07                	jne    c0021516 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002150f:	b8 00 00 00 00       	mov    eax,0x0
c0021514:	eb 05                	jmp    c002151b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021516:	b8 01 00 00 00       	mov    eax,0x1
c002151b:	83 c4 1c             	add    esp,0x1c
c002151e:	c3                   	ret    
c002151f:	90                   	nop

c0021520 <FAT::close(void*)>:
c0021520:	83 ec 1c             	sub    esp,0x1c
c0021523:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021528:	75 07                	jne    c0021531 <FAT::close(void*)+0x11>
c002152a:	b8 04 00 00 00       	mov    eax,0x4
c002152f:	eb 36                	jmp    c0021567 <FAT::close(void*)+0x47>
c0021531:	83 ec 0c             	sub    esp,0xc
c0021534:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021538:	e8 6c 45 fe ff       	call   c0005aa9 <f_close>
c002153d:	83 c4 10             	add    esp,0x10
c0021540:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021544:	83 ec 0c             	sub    esp,0xc
c0021547:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002154b:	e8 4c e3 fe ff       	call   c000f89c <free>
c0021550:	83 c4 10             	add    esp,0x10
c0021553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021557:	85 c0                	test   eax,eax
c0021559:	75 07                	jne    c0021562 <FAT::close(void*)+0x42>
c002155b:	b8 00 00 00 00       	mov    eax,0x0
c0021560:	eb 05                	jmp    c0021567 <FAT::close(void*)+0x47>
c0021562:	b8 01 00 00 00       	mov    eax,0x1
c0021567:	83 c4 1c             	add    esp,0x1c
c002156a:	c3                   	ret    
c002156b:	90                   	nop

c002156c <FAT::closeDir(void*)>:
c002156c:	83 ec 1c             	sub    esp,0x1c
c002156f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021574:	75 07                	jne    c002157d <FAT::closeDir(void*)+0x11>
c0021576:	b8 04 00 00 00       	mov    eax,0x4
c002157b:	eb 36                	jmp    c00215b3 <FAT::closeDir(void*)+0x47>
c002157d:	83 ec 0c             	sub    esp,0xc
c0021580:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021584:	e8 08 4b fe ff       	call   c0006091 <f_closedir>
c0021589:	83 c4 10             	add    esp,0x10
c002158c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021590:	83 ec 0c             	sub    esp,0xc
c0021593:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021597:	e8 00 e3 fe ff       	call   c000f89c <free>
c002159c:	83 c4 10             	add    esp,0x10
c002159f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215a3:	85 c0                	test   eax,eax
c00215a5:	75 07                	jne    c00215ae <FAT::closeDir(void*)+0x42>
c00215a7:	b8 00 00 00 00       	mov    eax,0x0
c00215ac:	eb 05                	jmp    c00215b3 <FAT::closeDir(void*)+0x47>
c00215ae:	b8 01 00 00 00       	mov    eax,0x1
c00215b3:	83 c4 1c             	add    esp,0x1c
c00215b6:	c3                   	ret    
c00215b7:	90                   	nop

c00215b8 <FAT::seek(void*, unsigned long long)>:
c00215b8:	83 ec 2c             	sub    esp,0x2c
c00215bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00215c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215cb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00215d0:	75 07                	jne    c00215d9 <FAT::seek(void*, unsigned long long)+0x21>
c00215d2:	b8 04 00 00 00       	mov    eax,0x4
c00215d7:	eb 2f                	jmp    c0021608 <FAT::seek(void*, unsigned long long)+0x50>
c00215d9:	83 ec 04             	sub    esp,0x4
c00215dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00215e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00215e4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00215e8:	e8 eb 44 fe ff       	call   c0005ad8 <f_lseek>
c00215ed:	83 c4 10             	add    esp,0x10
c00215f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00215f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215f8:	85 c0                	test   eax,eax
c00215fa:	75 07                	jne    c0021603 <FAT::seek(void*, unsigned long long)+0x4b>
c00215fc:	b8 00 00 00 00       	mov    eax,0x0
c0021601:	eb 05                	jmp    c0021608 <FAT::seek(void*, unsigned long long)+0x50>
c0021603:	b8 01 00 00 00       	mov    eax,0x1
c0021608:	83 c4 2c             	add    esp,0x2c
c002160b:	c3                   	ret    

c002160c <fatWrapperReadDisk>:
c002160c:	83 ec 1c             	sub    esp,0x1c
c002160f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021613:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002161b:	89 04 24             	mov    DWORD PTR [esp],eax
c002161e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021622:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021626:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002162b:	8b 04 85 00 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0600]
c0021632:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021636:	83 ec 0c             	sub    esp,0xc
c0021639:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002163d:	52                   	push   edx
c002163e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021642:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021646:	50                   	push   eax
c0021647:	e8 18 51 ff ff       	call   c0016764 <LogicalDisk::read(unsigned long long, int, void*)>
c002164c:	83 c4 20             	add    esp,0x20
c002164f:	83 c4 1c             	add    esp,0x1c
c0021652:	c3                   	ret    

c0021653 <fatWrapperWriteDisk>:
c0021653:	83 ec 1c             	sub    esp,0x1c
c0021656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002165a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002165e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021662:	89 04 24             	mov    DWORD PTR [esp],eax
c0021665:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021669:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002166d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021672:	8b 04 85 00 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0600]
c0021679:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002167d:	83 ec 0c             	sub    esp,0xc
c0021680:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021684:	52                   	push   edx
c0021685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021689:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002168d:	50                   	push   eax
c002168e:	e8 3d 51 ff ff       	call   c00167d0 <LogicalDisk::write(unsigned long long, int, void*)>
c0021693:	83 c4 20             	add    esp,0x20
c0021696:	83 c4 1c             	add    esp,0x1c
c0021699:	c3                   	ret    

c002169a <fatWrapperIoctl>:
c002169a:	53                   	push   ebx
c002169b:	83 ec 28             	sub    esp,0x28
c002169e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00216a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00216a6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00216aa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00216ae:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00216b3:	75 31                	jne    c00216e6 <fatWrapperIoctl+0x4c>
c00216b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00216b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00216bd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216c2:	8b 04 85 00 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0600]
c00216c9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00216cf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00216d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00216d9:	66 89 02             	mov    WORD PTR [edx],ax
c00216dc:	b8 00 00 00 00       	mov    eax,0x0
c00216e1:	e9 b2 00 00 00       	jmp    c0021798 <fatWrapperIoctl+0xfe>
c00216e6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00216eb:	75 6a                	jne    c0021757 <fatWrapperIoctl+0xbd>
c00216ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00216f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00216f5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216fa:	8b 04 85 00 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0600]
c0021701:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021707:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002170d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021713:	89 c8                	mov    eax,ecx
c0021715:	89 da                	mov    edx,ebx
c0021717:	0f a4 c2 0a          	shld   edx,eax,0xa
c002171b:	c1 e0 0a             	shl    eax,0xa
c002171e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021723:	8b 0c 8d 00 fa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0600]
c002172a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021730:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021736:	89 cb                	mov    ebx,ecx
c0021738:	c1 fb 1f             	sar    ebx,0x1f
c002173b:	53                   	push   ebx
c002173c:	51                   	push   ecx
c002173d:	52                   	push   edx
c002173e:	50                   	push   eax
c002173f:	e8 c0 5f 00 00       	call   c0027704 <__udivdi3>
c0021744:	83 c4 10             	add    esp,0x10
c0021747:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002174b:	89 01                	mov    DWORD PTR [ecx],eax
c002174d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021750:	b8 00 00 00 00       	mov    eax,0x0
c0021755:	eb 41                	jmp    c0021798 <fatWrapperIoctl+0xfe>
c0021757:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002175c:	75 07                	jne    c0021765 <fatWrapperIoctl+0xcb>
c002175e:	b8 00 00 00 00       	mov    eax,0x0
c0021763:	eb 33                	jmp    c0021798 <fatWrapperIoctl+0xfe>
c0021765:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002176a:	75 19                	jne    c0021785 <fatWrapperIoctl+0xeb>
c002176c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021770:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021778:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002177e:	b8 00 00 00 00       	mov    eax,0x0
c0021783:	eb 13                	jmp    c0021798 <fatWrapperIoctl+0xfe>
c0021785:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002178a:	75 07                	jne    c0021793 <fatWrapperIoctl+0xf9>
c002178c:	b8 00 00 00 00       	mov    eax,0x0
c0021791:	eb 05                	jmp    c0021798 <fatWrapperIoctl+0xfe>
c0021793:	b8 04 00 00 00       	mov    eax,0x4
c0021798:	83 c4 28             	add    esp,0x28
c002179b:	5b                   	pop    ebx
c002179c:	c3                   	ret    
c002179d:	90                   	nop

c002179e <FAT::FAT()>:
c002179e:	83 ec 1c             	sub    esp,0x1c
c00217a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217a5:	83 ec 0c             	sub    esp,0xc
c00217a8:	50                   	push   eax
c00217a9:	e8 44 19 ff ff       	call   c00130f2 <Filesystem::Filesystem()>
c00217ae:	83 c4 10             	add    esp,0x10
c00217b1:	ba 14 d7 02 c0       	mov    edx,0xc002d714
c00217b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217ba:	89 10                	mov    DWORD PTR [eax],edx
c00217bc:	c7 05 20 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032a20,0x0
c00217c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00217ce:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00217d3:	7f 15                	jg     c00217ea <FAT::FAT()+0x4c>
c00217d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217d9:	c7 04 85 40 2a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd5c0],0xffffffff
c00217e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00217e8:	eb e4                	jmp    c00217ce <FAT::FAT()+0x30>
c00217ea:	90                   	nop
c00217eb:	83 c4 1c             	add    esp,0x1c
c00217ee:	c3                   	ret    
c00217ef:	90                   	nop

c00217f0 <FAT::fixFilepath(char*)>:
c00217f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217f4:	8a 00                	mov    al,BYTE PTR [eax]
c00217f6:	3c 40                	cmp    al,0x40
c00217f8:	7e 2c                	jle    c0021826 <FAT::fixFilepath(char*)+0x36>
c00217fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217fe:	8a 00                	mov    al,BYTE PTR [eax]
c0021800:	83 e8 41             	sub    eax,0x41
c0021803:	88 c2                	mov    dl,al
c0021805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021809:	88 10                	mov    BYTE PTR [eax],dl
c002180b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002180f:	8a 00                	mov    al,BYTE PTR [eax]
c0021811:	0f be c0             	movsx  eax,al
c0021814:	8b 04 85 40 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd5c0]
c002181b:	83 c0 30             	add    eax,0x30
c002181e:	88 c2                	mov    dl,al
c0021820:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021824:	88 10                	mov    BYTE PTR [eax],dl
c0021826:	90                   	nop
c0021827:	c3                   	ret    

c0021828 <FAT::open(char const*, void**, FileOpenMode)>:
c0021828:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002182e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021836:	74 0a                	je     c0021842 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021838:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021840:	75 0a                	jne    c002184c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021842:	b8 04 00 00 00       	mov    eax,0x4
c0021847:	e9 fd 00 00 00       	jmp    c0021949 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002184c:	83 ec 08             	sub    esp,0x8
c002184f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021856:	8d 44 24 14          	lea    eax,[esp+0x14]
c002185a:	50                   	push   eax
c002185b:	e8 ac ef fd ff       	call   c000080c <strcpy>
c0021860:	83 c4 10             	add    esp,0x10
c0021863:	83 ec 08             	sub    esp,0x8
c0021866:	8d 44 24 10          	lea    eax,[esp+0x10]
c002186a:	50                   	push   eax
c002186b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021872:	e8 79 ff ff ff       	call   c00217f0 <FAT::fixFilepath(char*)>
c0021877:	83 c4 10             	add    esp,0x10
c002187a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021882:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021889:	83 e0 01             	and    eax,0x1
c002188c:	74 08                	je     c0021896 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002188e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021896:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002189d:	83 e0 04             	and    eax,0x4
c00218a0:	74 10                	je     c00218b2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00218a2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00218aa:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00218b2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00218b9:	83 e0 02             	and    eax,0x2
c00218bc:	74 08                	je     c00218c6 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00218be:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00218c6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00218cd:	83 e0 08             	and    eax,0x8
c00218d0:	74 08                	je     c00218da <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00218d2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00218da:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00218e1:	83 e0 10             	and    eax,0x10
c00218e4:	74 08                	je     c00218ee <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00218e6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00218ee:	83 ec 0c             	sub    esp,0xc
c00218f1:	68 50 02 00 00       	push   0x250
c00218f6:	e8 91 df fe ff       	call   c000f88c <malloc>
c00218fb:	83 c4 10             	add    esp,0x10
c00218fe:	89 c2                	mov    edx,eax
c0021900:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021907:	89 10                	mov    DWORD PTR [eax],edx
c0021909:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021911:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021918:	8b 00                	mov    eax,DWORD PTR [eax]
c002191a:	83 ec 04             	sub    esp,0x4
c002191d:	52                   	push   edx
c002191e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021922:	52                   	push   edx
c0021923:	50                   	push   eax
c0021924:	e8 2e 36 fe ff       	call   c0004f57 <f_open>
c0021929:	83 c4 10             	add    esp,0x10
c002192c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021933:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002193b:	74 07                	je     c0021944 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002193d:	b8 01 00 00 00       	mov    eax,0x1
c0021942:	eb 05                	jmp    c0021949 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021944:	b8 00 00 00 00       	mov    eax,0x0
c0021949:	81 c4 1c 01 00 00    	add    esp,0x11c
c002194f:	c3                   	ret    

c0021950 <FAT::openDir(char const*, void**)>:
c0021950:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021956:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002195e:	74 0a                	je     c002196a <FAT::openDir(char const*, void**)+0x1a>
c0021960:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021968:	75 07                	jne    c0021971 <FAT::openDir(char const*, void**)+0x21>
c002196a:	b8 04 00 00 00       	mov    eax,0x4
c002196f:	eb 7d                	jmp    c00219ee <FAT::openDir(char const*, void**)+0x9e>
c0021971:	83 ec 08             	sub    esp,0x8
c0021974:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002197b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002197f:	50                   	push   eax
c0021980:	e8 87 ee fd ff       	call   c000080c <strcpy>
c0021985:	83 c4 10             	add    esp,0x10
c0021988:	83 ec 08             	sub    esp,0x8
c002198b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002198f:	50                   	push   eax
c0021990:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021997:	e8 54 fe ff ff       	call   c00217f0 <FAT::fixFilepath(char*)>
c002199c:	83 c4 10             	add    esp,0x10
c002199f:	83 ec 0c             	sub    esp,0xc
c00219a2:	6a 4c                	push   0x4c
c00219a4:	e8 e3 de fe ff       	call   c000f88c <malloc>
c00219a9:	83 c4 10             	add    esp,0x10
c00219ac:	89 c2                	mov    edx,eax
c00219ae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00219b5:	89 10                	mov    DWORD PTR [eax],edx
c00219b7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00219be:	8b 00                	mov    eax,DWORD PTR [eax]
c00219c0:	83 ec 08             	sub    esp,0x8
c00219c3:	8d 54 24 14          	lea    edx,[esp+0x14]
c00219c7:	52                   	push   edx
c00219c8:	50                   	push   eax
c00219c9:	e8 c1 45 fe ff       	call   c0005f8f <f_opendir>
c00219ce:	83 c4 10             	add    esp,0x10
c00219d1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00219d8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00219e0:	74 07                	je     c00219e9 <FAT::openDir(char const*, void**)+0x99>
c00219e2:	b8 01 00 00 00       	mov    eax,0x1
c00219e7:	eb 05                	jmp    c00219ee <FAT::openDir(char const*, void**)+0x9e>
c00219e9:	b8 00 00 00 00       	mov    eax,0x0
c00219ee:	81 c4 1c 01 00 00    	add    esp,0x11c
c00219f4:	c3                   	ret    
c00219f5:	90                   	nop

c00219f6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00219f6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00219fc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021a04:	75 0a                	jne    c0021a10 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021a06:	b8 04 00 00 00       	mov    eax,0x4
c0021a0b:	e9 c9 00 00 00       	jmp    c0021ad9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021a10:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021a18:	75 0a                	jne    c0021a24 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021a1a:	b8 04 00 00 00       	mov    eax,0x4
c0021a1f:	e9 b5 00 00 00       	jmp    c0021ad9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021a24:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021a2c:	75 0a                	jne    c0021a38 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021a2e:	b8 04 00 00 00       	mov    eax,0x4
c0021a33:	e9 a1 00 00 00       	jmp    c0021ad9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021a38:	83 ec 08             	sub    esp,0x8
c0021a3b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021a42:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021a49:	50                   	push   eax
c0021a4a:	e8 bd ed fd ff       	call   c000080c <strcpy>
c0021a4f:	83 c4 10             	add    esp,0x10
c0021a52:	83 ec 08             	sub    esp,0x8
c0021a55:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021a5c:	50                   	push   eax
c0021a5d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021a64:	e8 87 fd ff ff       	call   c00217f0 <FAT::fixFilepath(char*)>
c0021a69:	83 c4 10             	add    esp,0x10
c0021a6c:	83 ec 08             	sub    esp,0x8
c0021a6f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a73:	50                   	push   eax
c0021a74:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021a7b:	50                   	push   eax
c0021a7c:	e8 cd 46 fe ff       	call   c000614e <f_stat>
c0021a81:	83 c4 10             	add    esp,0x10
c0021a84:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021a8b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021a92:	85 c0                	test   eax,eax
c0021a94:	74 07                	je     c0021a9d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021a96:	83 f8 04             	cmp    eax,0x4
c0021a99:	74 32                	je     c0021acd <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021a9b:	eb 37                	jmp    c0021ad4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021a9d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021aa1:	0f b6 c0             	movzx  eax,al
c0021aa4:	83 e0 10             	and    eax,0x10
c0021aa7:	0f 95 c2             	setne  dl
c0021aaa:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021ab1:	88 10                	mov    BYTE PTR [eax],dl
c0021ab3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021ab6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021aba:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021ac1:	89 01                	mov    DWORD PTR [ecx],eax
c0021ac3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021ac6:	b8 00 00 00 00       	mov    eax,0x0
c0021acb:	eb 0c                	jmp    c0021ad9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021acd:	b8 02 00 00 00       	mov    eax,0x2
c0021ad2:	eb 05                	jmp    c0021ad9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021ad4:	b8 01 00 00 00       	mov    eax,0x1
c0021ad9:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021adf:	c3                   	ret    

c0021ae0 <FAT::unlink(char const*)>:
c0021ae0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ae6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021aee:	75 07                	jne    c0021af7 <FAT::unlink(char const*)+0x17>
c0021af0:	b8 04 00 00 00       	mov    eax,0x4
c0021af5:	eb 5c                	jmp    c0021b53 <FAT::unlink(char const*)+0x73>
c0021af7:	83 ec 08             	sub    esp,0x8
c0021afa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b01:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b05:	50                   	push   eax
c0021b06:	e8 01 ed fd ff       	call   c000080c <strcpy>
c0021b0b:	83 c4 10             	add    esp,0x10
c0021b0e:	83 ec 08             	sub    esp,0x8
c0021b11:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b15:	50                   	push   eax
c0021b16:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b1d:	e8 ce fc ff ff       	call   c00217f0 <FAT::fixFilepath(char*)>
c0021b22:	83 c4 10             	add    esp,0x10
c0021b25:	83 ec 0c             	sub    esp,0xc
c0021b28:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b2c:	50                   	push   eax
c0021b2d:	e8 6e 49 fe ff       	call   c00064a0 <f_unlink>
c0021b32:	83 c4 10             	add    esp,0x10
c0021b35:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021b3c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021b43:	85 c0                	test   eax,eax
c0021b45:	75 07                	jne    c0021b4e <FAT::unlink(char const*)+0x6e>
c0021b47:	b8 00 00 00 00       	mov    eax,0x0
c0021b4c:	eb 05                	jmp    c0021b53 <FAT::unlink(char const*)+0x73>
c0021b4e:	b8 01 00 00 00       	mov    eax,0x1
c0021b53:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b59:	c3                   	ret    

c0021b5a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021b5a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021b60:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021b67:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021b6e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021b72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021b76:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021b7e:	75 0a                	jne    c0021b8a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021b80:	b8 04 00 00 00       	mov    eax,0x4
c0021b85:	e9 1c 01 00 00       	jmp    c0021ca6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021b8a:	83 ec 08             	sub    esp,0x8
c0021b8d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021b94:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b98:	50                   	push   eax
c0021b99:	e8 6e ec fd ff       	call   c000080c <strcpy>
c0021b9e:	83 c4 10             	add    esp,0x10
c0021ba1:	83 ec 08             	sub    esp,0x8
c0021ba4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021ba8:	50                   	push   eax
c0021ba9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021bb0:	e8 3b fc ff ff       	call   c00217f0 <FAT::fixFilepath(char*)>
c0021bb5:	83 c4 10             	add    esp,0x10
c0021bb8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021bc0:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021bc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021bcd:	83 e0 01             	and    eax,0x1
c0021bd0:	74 08                	je     c0021bda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021bd2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021bda:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021bdf:	83 e0 02             	and    eax,0x2
c0021be2:	74 08                	je     c0021bec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021be4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021bec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021bf1:	83 e0 04             	and    eax,0x4
c0021bf4:	74 08                	je     c0021bfe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021bf6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021bfe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021c03:	83 e0 08             	and    eax,0x8
c0021c06:	74 08                	je     c0021c10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021c08:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021c10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021c15:	83 e0 01             	and    eax,0x1
c0021c18:	74 08                	je     c0021c22 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021c1a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021c22:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021c27:	83 e0 02             	and    eax,0x2
c0021c2a:	74 08                	je     c0021c34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021c2c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021c34:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021c39:	83 e0 04             	and    eax,0x4
c0021c3c:	74 08                	je     c0021c46 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021c3e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021c46:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021c4b:	83 e0 08             	and    eax,0x8
c0021c4e:	74 08                	je     c0021c58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021c50:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021c58:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021c5f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021c66:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021c6e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021c76:	83 ec 04             	sub    esp,0x4
c0021c79:	52                   	push   edx
c0021c7a:	50                   	push   eax
c0021c7b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021c7f:	50                   	push   eax
c0021c80:	e8 bd 4e fe ff       	call   c0006b42 <f_chmod>
c0021c85:	83 c4 10             	add    esp,0x10
c0021c88:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021c8f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021c96:	85 c0                	test   eax,eax
c0021c98:	75 07                	jne    c0021ca1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021c9a:	b8 00 00 00 00       	mov    eax,0x0
c0021c9f:	eb 05                	jmp    c0021ca6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021ca1:	b8 01 00 00 00       	mov    eax,0x1
c0021ca6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021cac:	c3                   	ret    
c0021cad:	90                   	nop

c0021cae <FAT::rename(char const*, char const*)>:
c0021cae:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021cb4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021cbc:	74 0a                	je     c0021cc8 <FAT::rename(char const*, char const*)+0x1a>
c0021cbe:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021cc6:	75 0a                	jne    c0021cd2 <FAT::rename(char const*, char const*)+0x24>
c0021cc8:	b8 04 00 00 00       	mov    eax,0x4
c0021ccd:	e9 98 00 00 00       	jmp    c0021d6a <FAT::rename(char const*, char const*)+0xbc>
c0021cd2:	83 ec 08             	sub    esp,0x8
c0021cd5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021cdc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021ce3:	50                   	push   eax
c0021ce4:	e8 23 eb fd ff       	call   c000080c <strcpy>
c0021ce9:	83 c4 10             	add    esp,0x10
c0021cec:	83 ec 08             	sub    esp,0x8
c0021cef:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021cf6:	50                   	push   eax
c0021cf7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021cfe:	e8 ed fa ff ff       	call   c00217f0 <FAT::fixFilepath(char*)>
c0021d03:	83 c4 10             	add    esp,0x10
c0021d06:	83 ec 08             	sub    esp,0x8
c0021d09:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021d10:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d14:	50                   	push   eax
c0021d15:	e8 f2 ea fd ff       	call   c000080c <strcpy>
c0021d1a:	83 c4 10             	add    esp,0x10
c0021d1d:	83 ec 08             	sub    esp,0x8
c0021d20:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d24:	50                   	push   eax
c0021d25:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021d2c:	e8 bf fa ff ff       	call   c00217f0 <FAT::fixFilepath(char*)>
c0021d31:	83 c4 10             	add    esp,0x10
c0021d34:	83 ec 08             	sub    esp,0x8
c0021d37:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d3b:	50                   	push   eax
c0021d3c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021d43:	50                   	push   eax
c0021d44:	e8 06 4b fe ff       	call   c000684f <f_rename>
c0021d49:	83 c4 10             	add    esp,0x10
c0021d4c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021d53:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021d5a:	85 c0                	test   eax,eax
c0021d5c:	75 07                	jne    c0021d65 <FAT::rename(char const*, char const*)+0xb7>
c0021d5e:	b8 00 00 00 00       	mov    eax,0x0
c0021d63:	eb 05                	jmp    c0021d6a <FAT::rename(char const*, char const*)+0xbc>
c0021d65:	b8 01 00 00 00       	mov    eax,0x1
c0021d6a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021d70:	c3                   	ret    
c0021d71:	90                   	nop

c0021d72 <FAT::mkdir(char const*)>:
c0021d72:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d78:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021d80:	75 07                	jne    c0021d89 <FAT::mkdir(char const*)+0x17>
c0021d82:	b8 04 00 00 00       	mov    eax,0x4
c0021d87:	eb 5c                	jmp    c0021de5 <FAT::mkdir(char const*)+0x73>
c0021d89:	83 ec 08             	sub    esp,0x8
c0021d8c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021d93:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d97:	50                   	push   eax
c0021d98:	e8 6f ea fd ff       	call   c000080c <strcpy>
c0021d9d:	83 c4 10             	add    esp,0x10
c0021da0:	83 ec 08             	sub    esp,0x8
c0021da3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021da7:	50                   	push   eax
c0021da8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021daf:	e8 3c fa ff ff       	call   c00217f0 <FAT::fixFilepath(char*)>
c0021db4:	83 c4 10             	add    esp,0x10
c0021db7:	83 ec 0c             	sub    esp,0xc
c0021dba:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021dbe:	50                   	push   eax
c0021dbf:	e8 5f 48 fe ff       	call   c0006623 <f_mkdir>
c0021dc4:	83 c4 10             	add    esp,0x10
c0021dc7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021dce:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021dd5:	85 c0                	test   eax,eax
c0021dd7:	75 07                	jne    c0021de0 <FAT::mkdir(char const*)+0x6e>
c0021dd9:	b8 00 00 00 00       	mov    eax,0x0
c0021dde:	eb 05                	jmp    c0021de5 <FAT::mkdir(char const*)+0x73>
c0021de0:	b8 01 00 00 00       	mov    eax,0x1
c0021de5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021deb:	c3                   	ret    

c0021dec <FAT::exists(char const*)>:
c0021dec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021df2:	83 ec 08             	sub    esp,0x8
c0021df5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021dfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021e00:	50                   	push   eax
c0021e01:	e8 06 ea fd ff       	call   c000080c <strcpy>
c0021e06:	83 c4 10             	add    esp,0x10
c0021e09:	83 ec 08             	sub    esp,0x8
c0021e0c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021e10:	50                   	push   eax
c0021e11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021e18:	e8 d3 f9 ff ff       	call   c00217f0 <FAT::fixFilepath(char*)>
c0021e1d:	83 c4 10             	add    esp,0x10
c0021e20:	83 ec 08             	sub    esp,0x8
c0021e23:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021e2a:	50                   	push   eax
c0021e2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021e2f:	50                   	push   eax
c0021e30:	e8 19 43 fe ff       	call   c000614e <f_stat>
c0021e35:	83 c4 10             	add    esp,0x10
c0021e38:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021e3f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021e46:	85 c0                	test   eax,eax
c0021e48:	75 04                	jne    c0021e4e <FAT::exists(char const*)+0x62>
c0021e4a:	b0 01                	mov    al,0x1
c0021e4c:	eb 02                	jmp    c0021e50 <FAT::exists(char const*)+0x64>
c0021e4e:	b0 00                	mov    al,0x0
c0021e50:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021e56:	c3                   	ret    
c0021e57:	90                   	nop

c0021e58 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021e58:	b8 08 00 00 00       	mov    eax,0x8
c0021e5d:	c3                   	ret    

c0021e5e <ISO9660::seek(void*, unsigned long long)>:
c0021e5e:	53                   	push   ebx
c0021e5f:	b8 04 00 00 00       	mov    eax,0x4
c0021e64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e6c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021e70:	85 d2                	test   edx,edx
c0021e72:	74 17                	je     c0021e8b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021e74:	89 c8                	mov    eax,ecx
c0021e76:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021e79:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021e7c:	b8 01 00 00 00       	mov    eax,0x1
c0021e81:	73 08                	jae    c0021e8b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021e83:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021e86:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021e89:	31 c0                	xor    eax,eax
c0021e8b:	5b                   	pop    ebx
c0021e8c:	c3                   	ret    
c0021e8d:	90                   	nop

c0021e8e <ISO9660::tell(void*, unsigned long long*)>:
c0021e8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e96:	85 d2                	test   edx,edx
c0021e98:	74 12                	je     c0021eac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021e9a:	85 c0                	test   eax,eax
c0021e9c:	74 0e                	je     c0021eac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021e9e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021ea1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021ea4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021ea7:	89 10                	mov    DWORD PTR [eax],edx
c0021ea9:	31 c0                	xor    eax,eax
c0021eab:	c3                   	ret    
c0021eac:	b8 04 00 00 00       	mov    eax,0x4
c0021eb1:	c3                   	ret    

c0021eb2 <ISO9660::getName()>:
c0021eb2:	b8 74 d7 02 c0       	mov    eax,0xc002d774
c0021eb7:	c3                   	ret    

c0021eb8 <ISO9660::stat(void*, unsigned long long*)>:
c0021eb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ec0:	85 d2                	test   edx,edx
c0021ec2:	74 12                	je     c0021ed6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021ec4:	85 c0                	test   eax,eax
c0021ec6:	74 0e                	je     c0021ed6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021ec8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021ecb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021ece:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021ed1:	89 10                	mov    DWORD PTR [eax],edx
c0021ed3:	31 c0                	xor    eax,eax
c0021ed5:	c3                   	ret    
c0021ed6:	b8 04 00 00 00       	mov    eax,0x4
c0021edb:	c3                   	ret    

c0021edc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021edc:	b8 01 00 00 00       	mov    eax,0x1
c0021ee1:	c3                   	ret    

c0021ee2 <ISO9660::unlink(char const*)>:
c0021ee2:	b8 01 00 00 00       	mov    eax,0x1
c0021ee7:	c3                   	ret    

c0021ee8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021ee8:	b8 01 00 00 00       	mov    eax,0x1
c0021eed:	c3                   	ret    

c0021eee <ISO9660::rename(char const*, char const*)>:
c0021eee:	b8 01 00 00 00       	mov    eax,0x1
c0021ef3:	c3                   	ret    

c0021ef4 <ISO9660::mkdir(char const*)>:
c0021ef4:	b8 01 00 00 00       	mov    eax,0x1
c0021ef9:	c3                   	ret    

c0021efa <ISO9660::close(void*)>:
c0021efa:	83 ec 0c             	sub    esp,0xc
c0021efd:	b8 04 00 00 00       	mov    eax,0x4
c0021f02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f06:	85 d2                	test   edx,edx
c0021f08:	74 0e                	je     c0021f18 <ISO9660::close(void*)+0x1e>
c0021f0a:	83 ec 0c             	sub    esp,0xc
c0021f0d:	52                   	push   edx
c0021f0e:	e8 89 d9 fe ff       	call   c000f89c <free>
c0021f13:	83 c4 10             	add    esp,0x10
c0021f16:	31 c0                	xor    eax,eax
c0021f18:	83 c4 0c             	add    esp,0xc
c0021f1b:	c3                   	ret    

c0021f1c <ISO9660::closeDir(void*)>:
c0021f1c:	83 ec 0c             	sub    esp,0xc
c0021f1f:	b8 04 00 00 00       	mov    eax,0x4
c0021f24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f28:	85 d2                	test   edx,edx
c0021f2a:	74 0e                	je     c0021f3a <ISO9660::closeDir(void*)+0x1e>
c0021f2c:	83 ec 0c             	sub    esp,0xc
c0021f2f:	52                   	push   edx
c0021f30:	e8 67 d9 fe ff       	call   c000f89c <free>
c0021f35:	83 c4 10             	add    esp,0x10
c0021f38:	31 c0                	xor    eax,eax
c0021f3a:	83 c4 0c             	add    esp,0xc
c0021f3d:	c3                   	ret    

c0021f3e <ISO9660::~ISO9660()>:
c0021f3e:	83 ec 0c             	sub    esp,0xc
c0021f41:	ba d8 d7 02 c0       	mov    edx,0xc002d7d8
c0021f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4a:	89 10                	mov    DWORD PTR [eax],edx
c0021f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f50:	83 ec 0c             	sub    esp,0xc
c0021f53:	50                   	push   eax
c0021f54:	e8 bd 11 ff ff       	call   c0013116 <Filesystem::~Filesystem()>
c0021f59:	83 c4 10             	add    esp,0x10
c0021f5c:	90                   	nop
c0021f5d:	83 c4 0c             	add    esp,0xc
c0021f60:	c3                   	ret    
c0021f61:	90                   	nop

c0021f62 <ISO9660::~ISO9660()>:
c0021f62:	83 ec 0c             	sub    esp,0xc
c0021f65:	83 ec 0c             	sub    esp,0xc
c0021f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f6c:	e8 cd ff ff ff       	call   c0021f3e <ISO9660::~ISO9660()>
c0021f71:	83 c4 10             	add    esp,0x10
c0021f74:	83 ec 08             	sub    esp,0x8
c0021f77:	6a 08                	push   0x8
c0021f79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f7d:	e8 85 0d ff ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0021f82:	83 c4 10             	add    esp,0x10
c0021f85:	83 c4 0c             	add    esp,0xc
c0021f88:	c3                   	ret    

c0021f89 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021f89:	55                   	push   ebp
c0021f8a:	31 c9                	xor    ecx,ecx
c0021f8c:	57                   	push   edi
c0021f8d:	56                   	push   esi
c0021f8e:	53                   	push   ebx
c0021f8f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021f93:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021f97:	89 eb                	mov    ebx,ebp
c0021f99:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021f9d:	39 ce                	cmp    esi,ecx
c0021f9f:	7e 17                	jle    c0021fb8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021fa1:	31 d2                	xor    edx,edx
c0021fa3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021fa7:	7d 13                	jge    c0021fbc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021fa9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021fad:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021fb0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021fb3:	75 0d                	jne    c0021fc2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021fb5:	42                   	inc    edx
c0021fb6:	eb eb                	jmp    c0021fa3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021fb8:	31 c0                	xor    eax,eax
c0021fba:	eb 0a                	jmp    c0021fc6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021fbc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021fc0:	eb 04                	jmp    c0021fc6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021fc2:	41                   	inc    ecx
c0021fc3:	43                   	inc    ebx
c0021fc4:	eb d7                	jmp    c0021f9d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021fc6:	5b                   	pop    ebx
c0021fc7:	5e                   	pop    esi
c0021fc8:	5f                   	pop    edi
c0021fc9:	5d                   	pop    ebp
c0021fca:	c3                   	ret    

c0021fcb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021fcb:	57                   	push   edi
c0021fcc:	56                   	push   esi
c0021fcd:	53                   	push   ebx
c0021fce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021fd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021fd6:	39 0d 20 2b 03 c0    	cmp    DWORD PTR ds:0xc0032b20,ecx
c0021fdc:	75 08                	jne    c0021fe6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021fde:	38 05 74 e9 02 c0    	cmp    BYTE PTR ds:0xc002e974,al
c0021fe4:	74 2b                	je     c0022011 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021fe6:	83 ec 0c             	sub    esp,0xc
c0021fe9:	a2 74 e9 02 c0       	mov    ds:0xc002e974,al
c0021fee:	68 40 2b 03 c0       	push   0xc0032b40
c0021ff3:	0f be c0             	movsx  eax,al
c0021ff6:	6a 01                	push   0x1
c0021ff8:	89 0d 20 2b 03 c0    	mov    DWORD PTR ds:0xc0032b20,ecx
c0021ffe:	31 db                	xor    ebx,ebx
c0022000:	53                   	push   ebx
c0022001:	51                   	push   ecx
c0022002:	ff 34 85 fc f8 02 c0 	push   DWORD PTR [eax*4-0x3ffd0704]
c0022009:	e8 56 47 ff ff       	call   c0016764 <LogicalDisk::read(unsigned long long, int, void*)>
c002200e:	83 c4 20             	add    esp,0x20
c0022011:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022015:	be 40 2b 03 c0       	mov    esi,0xc0032b40
c002201a:	b9 00 08 00 00       	mov    ecx,0x800
c002201f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022021:	5b                   	pop    ebx
c0022022:	5e                   	pop    esi
c0022023:	5f                   	pop    edi
c0022024:	c3                   	ret    
c0022025:	90                   	nop

c0022026 <ISO9660::tryMount(LogicalDisk*, int)>:
c0022026:	81 ec 10 08 00 00    	sub    esp,0x810
c002202c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0022033:	83 c0 41             	add    eax,0x41
c0022036:	0f be c0             	movsx  eax,al
c0022039:	50                   	push   eax
c002203a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002203e:	50                   	push   eax
c002203f:	6a 10                	push   0x10
c0022041:	e8 85 ff ff ff       	call   c0021fcb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022046:	83 c4 10             	add    esp,0x10
c0022049:	31 c0                	xor    eax,eax
c002204b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0022050:	75 1d                	jne    c002206f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022052:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0022057:	75 16                	jne    c002206f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022059:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002205e:	75 0f                	jne    c002206f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022060:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0022065:	75 08                	jne    c002206f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022067:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002206c:	0f 94 c0             	sete   al
c002206f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0022075:	c3                   	ret    

c0022076 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0022076:	55                   	push   ebp
c0022077:	57                   	push   edi
c0022078:	56                   	push   esi
c0022079:	53                   	push   ebx
c002207a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0022080:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0022087:	85 ed                	test   ebp,ebp
c0022089:	0f 84 da 01 00 00    	je     c0022269 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002208f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0022097:	0f 84 cc 01 00 00    	je     c0022269 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002209d:	b8 01 00 00 00       	mov    eax,0x1
c00220a2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00220a6:	0f 85 c2 01 00 00    	jne    c002226e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00220ac:	31 d2                	xor    edx,edx
c00220ae:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00220b5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00220b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00220bb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00220be:	89 04 24             	mov    DWORD PTR [esp],eax
c00220c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00220c5:	01 c8                	add    eax,ecx
c00220c7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00220ca:	11 da                	adc    edx,ebx
c00220cc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00220d0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00220d4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00220d8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00220dc:	19 d7                	sbb    edi,edx
c00220de:	72 11                	jb     c00220f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00220e0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00220e3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00220e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220ef:	eb 0c                	jmp    c00220fd <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00220f1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00220f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00220f9:	29 ce                	sub    esi,ecx
c00220fb:	19 df                	sbb    edi,ebx
c00220fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022100:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0022103:	0f a4 c2 0b          	shld   edx,eax,0xb
c0022107:	c1 e0 0b             	shl    eax,0xb
c002210a:	01 c8                	add    eax,ecx
c002210c:	11 da                	adc    edx,ebx
c002210e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022111:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022115:	51                   	push   ecx
c0022116:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002211a:	50                   	push   eax
c002211b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002211f:	53                   	push   ebx
c0022120:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022124:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022128:	0f ac d0 0b          	shrd   eax,edx,0xb
c002212c:	50                   	push   eax
c002212d:	e8 99 fe ff ff       	call   c0021fcb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022132:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022135:	b8 00 08 00 00       	mov    eax,0x800
c002213a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0022140:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0022144:	29 d0                	sub    eax,edx
c0022146:	83 c4 10             	add    esp,0x10
c0022149:	89 f9                	mov    ecx,edi
c002214b:	39 c6                	cmp    esi,eax
c002214d:	83 d9 00             	sbb    ecx,0x0
c0022150:	7d 1b                	jge    c002216d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0022152:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022157:	75 12                	jne    c002216b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0022159:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022160:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022166:	e9 fa 00 00 00       	jmp    c0022265 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002216b:	89 f0                	mov    eax,esi
c002216d:	01 d3                	add    ebx,edx
c002216f:	31 d2                	xor    edx,edx
c0022171:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0022175:	39 c2                	cmp    edx,eax
c0022177:	7d 14                	jge    c002218d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0022179:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0022180:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022184:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0022187:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002218a:	42                   	inc    edx
c002218b:	eb e8                	jmp    c0022175 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002218d:	89 c2                	mov    edx,eax
c002218f:	85 c0                	test   eax,eax
c0022191:	79 02                	jns    c0022195 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0022193:	31 d2                	xor    edx,edx
c0022195:	01 c2                	add    edx,eax
c0022197:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002219a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00221a1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00221a5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00221a9:	99                   	cdq    
c00221aa:	01 c1                	add    ecx,eax
c00221ac:	11 d3                	adc    ebx,edx
c00221ae:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00221b2:	29 c6                	sub    esi,eax
c00221b4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00221b8:	19 d7                	sbb    edi,edx
c00221ba:	89 34 24             	mov    DWORD PTR [esp],esi
c00221bd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00221c1:	b8 ff 07 00 00       	mov    eax,0x7ff
c00221c6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00221c9:	b8 00 00 00 00       	mov    eax,0x0
c00221ce:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00221d2:	7d 43                	jge    c0022217 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00221d4:	52                   	push   edx
c00221d5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00221d9:	50                   	push   eax
c00221da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00221de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00221e2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00221e6:	0f ac d0 0b          	shrd   eax,edx,0xb
c00221ea:	50                   	push   eax
c00221eb:	e8 db fd ff ff       	call   c0021fcb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221f0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00221f8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00221fd:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0022205:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002220d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0022212:	83 c4 10             	add    esp,0x10
c0022215:	eb aa                	jmp    c00221c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0022217:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002221b:	0b 04 24             	or     eax,DWORD PTR [esp]
c002221e:	74 2a                	je     c002224a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0022220:	50                   	push   eax
c0022221:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022225:	50                   	push   eax
c0022226:	8d 74 24 28          	lea    esi,[esp+0x28]
c002222a:	56                   	push   esi
c002222b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002222f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022233:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0022237:	51                   	push   ecx
c0022238:	e8 8e fd ff ff       	call   c0021fcb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002223d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022241:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022245:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022247:	83 c4 10             	add    esp,0x10
c002224a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022251:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022255:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022259:	89 18                	mov    DWORD PTR [eax],ebx
c002225b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002225f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022262:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022265:	31 c0                	xor    eax,eax
c0022267:	eb 05                	jmp    c002226e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0022269:	b8 04 00 00 00       	mov    eax,0x4
c002226e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022274:	5b                   	pop    ebx
c0022275:	5e                   	pop    esi
c0022276:	5f                   	pop    edi
c0022277:	5d                   	pop    ebp
c0022278:	c3                   	ret    
c0022279:	90                   	nop

c002227a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002227a:	55                   	push   ebp
c002227b:	57                   	push   edi
c002227c:	56                   	push   esi
c002227d:	53                   	push   ebx
c002227e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0022284:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002228b:	85 ed                	test   ebp,ebp
c002228d:	0f 84 51 02 00 00    	je     c00224e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0022293:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002229b:	0f 84 43 02 00 00    	je     c00224e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00222a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00222a4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00222a7:	75 0a                	jne    c00222b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00222a9:	b8 07 00 00 00       	mov    eax,0x7
c00222ae:	e9 36 02 00 00       	jmp    c00224e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00222b3:	50                   	push   eax
c00222b4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00222b8:	50                   	push   eax
c00222b9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00222c0:	53                   	push   ebx
c00222c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00222c4:	c1 e0 0b             	shl    eax,0xb
c00222c7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00222ca:	c1 e8 0b             	shr    eax,0xb
c00222cd:	50                   	push   eax
c00222ce:	e8 f8 fc ff ff       	call   c0021fcb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00222d3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00222d6:	83 c4 10             	add    esp,0x10
c00222d9:	89 c1                	mov    ecx,eax
c00222db:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00222de:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00222e4:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00222e7:	84 db                	test   bl,bl
c00222e9:	0f 85 8b 00 00 00    	jne    c002237a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00222ef:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00222f5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00222f8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00222fe:	29 c6                	sub    esi,eax
c0022300:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0022304:	89 f3                	mov    ebx,esi
c0022306:	89 f1                	mov    ecx,esi
c0022308:	c1 fb 1f             	sar    ebx,0x1f
c002230b:	01 f0                	add    eax,esi
c002230d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0022310:	11 da                	adc    edx,ebx
c0022312:	89 04 24             	mov    DWORD PTR [esp],eax
c0022315:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022319:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002231c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002231f:	89 d8                	mov    eax,ebx
c0022321:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0022325:	ba 00 00 00 00       	mov    edx,0x0
c002232a:	19 f8                	sbb    eax,edi
c002232c:	b8 00 00 00 00       	mov    eax,0x0
c0022331:	73 08                	jae    c002233b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0022333:	89 f0                	mov    eax,esi
c0022335:	89 fa                	mov    edx,edi
c0022337:	29 c8                	sub    eax,ecx
c0022339:	19 da                	sbb    edx,ebx
c002233b:	89 d7                	mov    edi,edx
c002233d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022340:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022343:	09 c7                	or     edi,eax
c0022345:	0f 84 5e ff ff ff    	je     c00222a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002234b:	57                   	push   edi
c002234c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022350:	50                   	push   eax
c0022351:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022358:	53                   	push   ebx
c0022359:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002235c:	c1 e0 0b             	shl    eax,0xb
c002235f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0022363:	c1 e8 0b             	shr    eax,0xb
c0022366:	50                   	push   eax
c0022367:	e8 5f fc ff ff       	call   c0021fcb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002236c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002236f:	83 c4 10             	add    esp,0x10
c0022372:	25 ff 07 00 00       	and    eax,0x7ff
c0022377:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002237a:	31 ff                	xor    edi,edi
c002237c:	56                   	push   esi
c002237d:	6a 28                	push   0x28
c002237f:	6a 00                	push   0x0
c0022381:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022385:	50                   	push   eax
c0022386:	e8 c5 e3 fd ff       	call   c0000750 <memset>
c002238b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002238e:	25 ff 07 00 00       	and    eax,0x7ff
c0022393:	89 c6                	mov    esi,eax
c0022395:	83 c6 21             	add    esi,0x21
c0022398:	83 d7 00             	adc    edi,0x0
c002239b:	83 c4 10             	add    esp,0x10
c002239e:	31 c9                	xor    ecx,ecx
c00223a0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00223a7:	83 f9 28             	cmp    ecx,0x28
c00223aa:	88 04 24             	mov    BYTE PTR [esp],al
c00223ad:	0f 94 c2             	sete   dl
c00223b0:	88 d0                	mov    al,dl
c00223b2:	ba ff 07 00 00       	mov    edx,0x7ff
c00223b7:	39 f2                	cmp    edx,esi
c00223b9:	ba 00 00 00 00       	mov    edx,0x0
c00223be:	19 fa                	sbb    edx,edi
c00223c0:	0f 92 c2             	setb   dl
c00223c3:	09 c2                	or     edx,eax
c00223c5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00223c9:	0f 94 c0             	sete   al
c00223cc:	08 d0                	or     al,dl
c00223ce:	75 16                	jne    c00223e6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00223d0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00223d4:	74 10                	je     c00223e6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00223d6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00223d9:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00223dd:	41                   	inc    ecx
c00223de:	83 c6 01             	add    esi,0x1
c00223e1:	83 d7 00             	adc    edi,0x0
c00223e4:	eb ba                	jmp    c00223a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00223e6:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00223ed:	83 ec 0c             	sub    esp,0xc
c00223f0:	8d 74 24 24          	lea    esi,[esp+0x24]
c00223f4:	56                   	push   esi
c00223f5:	e8 72 e3 fd ff       	call   c000076c <strlen>
c00223fa:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0022401:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022405:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002240d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022410:	5a                   	pop    edx
c0022411:	25 ff 07 00 00       	and    eax,0x7ff
c0022416:	59                   	pop    ecx
c0022417:	01 f8                	add    eax,edi
c0022419:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002241f:	83 e0 02             	and    eax,0x2
c0022422:	3c 01                	cmp    al,0x1
c0022424:	19 c0                	sbb    eax,eax
c0022426:	83 c0 02             	add    eax,0x2
c0022429:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002242d:	56                   	push   esi
c002242e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022432:	50                   	push   eax
c0022433:	e8 d4 e3 fd ff       	call   c000080c <strcpy>
c0022438:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002243c:	83 c4 10             	add    esp,0x10
c002243f:	84 c0                	test   al,al
c0022441:	75 21                	jne    c0022464 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0022443:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002244b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022453:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002245b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022462:	eb 28                	jmp    c002248c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022464:	fe c8                	dec    al
c0022466:	75 24                	jne    c002248c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022468:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022470:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022478:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022480:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0022487:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002248c:	8d 74 24 40          	lea    esi,[esp+0x40]
c0022490:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0022497:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002249e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00224a0:	0f b6 f3             	movzx  esi,bl
c00224a3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00224aa:	31 db                	xor    ebx,ebx
c00224ac:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00224b2:	89 df                	mov    edi,ebx
c00224b4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00224b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224ba:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00224bd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00224c0:	39 c6                	cmp    esi,eax
c00224c2:	19 d7                	sbb    edi,edx
c00224c4:	72 10                	jb     c00224d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00224c6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00224cd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00224d4:	eb 0a                	jmp    c00224e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00224d6:	29 f0                	sub    eax,esi
c00224d8:	19 da                	sbb    edx,ebx
c00224da:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00224dd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00224e0:	31 c0                	xor    eax,eax
c00224e2:	eb 05                	jmp    c00224e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00224e4:	b8 04 00 00 00       	mov    eax,0x4
c00224e9:	81 c4 5c 09 00 00    	add    esp,0x95c
c00224ef:	5b                   	pop    ebx
c00224f0:	5e                   	pop    esi
c00224f1:	5f                   	pop    edi
c00224f2:	5d                   	pop    ebp
c00224f3:	c3                   	ret    

c00224f4 <readRoot(unsigned int*, unsigned int*, char)>:
c00224f4:	57                   	push   edi
c00224f5:	56                   	push   esi
c00224f6:	81 ec 38 08 00 00    	sub    esp,0x838
c00224fc:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0022504:	50                   	push   eax
c0022505:	8d 44 24 38          	lea    eax,[esp+0x38]
c0022509:	50                   	push   eax
c002250a:	6a 10                	push   0x10
c002250c:	e8 ba fa ff ff       	call   c0021fcb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022511:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0022518:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c002251c:	b9 22 00 00 00       	mov    ecx,0x22
c0022521:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022523:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002252a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002252e:	89 10                	mov    DWORD PTR [eax],edx
c0022530:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0022537:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002253b:	89 10                	mov    DWORD PTR [eax],edx
c002253d:	81 c4 44 08 00 00    	add    esp,0x844
c0022543:	b0 01                	mov    al,0x1
c0022545:	5e                   	pop    esi
c0022546:	5f                   	pop    edi
c0022547:	c3                   	ret    

c0022548 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0022548:	55                   	push   ebp
c0022549:	57                   	push   edi
c002254a:	56                   	push   esi
c002254b:	53                   	push   ebx
c002254c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0022552:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0022559:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022560:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022564:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0022568:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002256c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022570:	75 03                	jne    c0022575 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022572:	83 c3 02             	add    ebx,0x2
c0022575:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0022578:	75 03                	jne    c002257d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002257a:	43                   	inc    ebx
c002257b:	eb f8                	jmp    c0022575 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002257d:	51                   	push   ecx
c002257e:	68 00 01 00 00       	push   0x100
c0022583:	6a 00                	push   0x0
c0022585:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022589:	50                   	push   eax
c002258a:	e8 c1 e1 fd ff       	call   c0000750 <memset>
c002258f:	83 c4 10             	add    esp,0x10
c0022592:	31 d2                	xor    edx,edx
c0022594:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022597:	84 c0                	test   al,al
c0022599:	74 21                	je     c00225bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002259b:	3c 2f                	cmp    al,0x2f
c002259d:	75 0b                	jne    c00225aa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002259f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00225a3:	bd 01 00 00 00       	mov    ebp,0x1
c00225a8:	eb 14                	jmp    c00225be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00225aa:	8d 48 9f             	lea    ecx,[eax-0x61]
c00225ad:	80 f9 19             	cmp    cl,0x19
c00225b0:	77 03                	ja     c00225b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00225b2:	83 e8 20             	sub    eax,0x20
c00225b5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00225b9:	42                   	inc    edx
c00225ba:	eb d8                	jmp    c0022594 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00225bc:	31 ed                	xor    ebp,ebp
c00225be:	83 ec 0c             	sub    esp,0xc
c00225c1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00225c8:	e8 bf d2 fe ff       	call   c000f88c <malloc>
c00225cd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00225d4:	89 c6                	mov    esi,eax
c00225d6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00225dc:	c1 ef 0b             	shr    edi,0xb
c00225df:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00225e6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00225ea:	83 c4 10             	add    esp,0x10
c00225ed:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00225f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00225f6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00225fd:	74 28                	je     c0022627 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00225ff:	52                   	push   edx
c0022600:	57                   	push   edi
c0022601:	50                   	push   eax
c0022602:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022606:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002260d:	e8 b9 f9 ff ff       	call   c0021fcb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022612:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022616:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002261d:	05 00 08 00 00       	add    eax,0x800
c0022622:	83 c4 10             	add    esp,0x10
c0022625:	eb cb                	jmp    c00225f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022627:	83 ec 0c             	sub    esp,0xc
c002262a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002262e:	57                   	push   edi
c002262f:	e8 38 e1 fd ff       	call   c000076c <strlen>
c0022634:	50                   	push   eax
c0022635:	57                   	push   edi
c0022636:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002263d:	56                   	push   esi
c002263e:	e8 46 f9 ff ff       	call   c0021f89 <__memmem(unsigned char*, int, unsigned char*, int)>
c0022643:	83 c4 20             	add    esp,0x20
c0022646:	85 c0                	test   eax,eax
c0022648:	75 13                	jne    c002265d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002264a:	83 ec 0c             	sub    esp,0xc
c002264d:	56                   	push   esi
c002264e:	e8 49 d2 fe ff       	call   c000f89c <free>
c0022653:	83 c4 10             	add    esp,0x10
c0022656:	31 c0                	xor    eax,eax
c0022658:	e9 b3 00 00 00       	jmp    c0022710 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002265d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022661:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022665:	c1 e7 08             	shl    edi,0x8
c0022668:	c1 e2 10             	shl    edx,0x10
c002266b:	09 d7                	or     edi,edx
c002266d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022671:	09 d7                	or     edi,edx
c0022673:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022677:	c1 e2 18             	shl    edx,0x18
c002267a:	09 d7                	or     edi,edx
c002267c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022680:	89 d1                	mov    ecx,edx
c0022682:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022686:	c1 e1 08             	shl    ecx,0x8
c0022689:	c1 e2 10             	shl    edx,0x10
c002268c:	09 ca                	or     edx,ecx
c002268e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022692:	09 ca                	or     edx,ecx
c0022694:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022698:	c1 e1 18             	shl    ecx,0x18
c002269b:	09 ca                	or     edx,ecx
c002269d:	89 e9                	mov    ecx,ebp
c002269f:	84 c9                	test   cl,cl
c00226a1:	74 3c                	je     c00226df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00226a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00226a7:	83 ec 0c             	sub    esp,0xc
c00226aa:	56                   	push   esi
c00226ab:	e8 ec d1 fe ff       	call   c000f89c <free>
c00226b0:	83 c4 0c             	add    esp,0xc
c00226b3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00226ba:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00226bf:	50                   	push   eax
c00226c0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00226c7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00226ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00226d2:	52                   	push   edx
c00226d3:	57                   	push   edi
c00226d4:	53                   	push   ebx
c00226d5:	e8 6e fe ff ff       	call   c0022548 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00226da:	83 c4 20             	add    esp,0x20
c00226dd:	eb 31                	jmp    c0022710 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00226df:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00226e2:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00226e9:	d0 e8                	shr    al,1
c00226eb:	89 3b                	mov    DWORD PTR [ebx],edi
c00226ed:	83 e0 01             	and    eax,0x1
c00226f0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00226f7:	83 ec 0c             	sub    esp,0xc
c00226fa:	89 13                	mov    DWORD PTR [ebx],edx
c00226fc:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0022703:	89 03                	mov    DWORD PTR [ebx],eax
c0022705:	56                   	push   esi
c0022706:	e8 91 d1 fe ff       	call   c000f89c <free>
c002270b:	83 c4 10             	add    esp,0x10
c002270e:	b0 01                	mov    al,0x1
c0022710:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022716:	5b                   	pop    ebx
c0022717:	5e                   	pop    esi
c0022718:	5f                   	pop    edi
c0022719:	5d                   	pop    ebp
c002271a:	c3                   	ret    

c002271b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002271b:	55                   	push   ebp
c002271c:	57                   	push   edi
c002271d:	56                   	push   esi
c002271e:	53                   	push   ebx
c002271f:	83 ec 20             	sub    esp,0x20
c0022722:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022726:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002272a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002272e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022736:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002273e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022743:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022749:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002274f:	57                   	push   edi
c0022750:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022754:	50                   	push   eax
c0022755:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022759:	50                   	push   eax
c002275a:	e8 95 fd ff ff       	call   c00224f4 <readRoot(unsigned int*, unsigned int*, char)>
c002275f:	5a                   	pop    edx
c0022760:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022764:	e8 03 e0 fd ff       	call   c000076c <strlen>
c0022769:	83 c4 10             	add    esp,0x10
c002276c:	83 f8 03             	cmp    eax,0x3
c002276f:	77 17                	ja     c0022788 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022771:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022775:	89 03                	mov    DWORD PTR [ebx],eax
c0022777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002277b:	89 06                	mov    DWORD PTR [esi],eax
c002277d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022784:	b0 01                	mov    al,0x1
c0022786:	eb 19                	jmp    c00227a1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022788:	50                   	push   eax
c0022789:	55                   	push   ebp
c002278a:	57                   	push   edi
c002278b:	56                   	push   esi
c002278c:	53                   	push   ebx
c002278d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022791:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022795:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022799:	e8 aa fd ff ff       	call   c0022548 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002279e:	83 c4 20             	add    esp,0x20
c00227a1:	83 c4 1c             	add    esp,0x1c
c00227a4:	5b                   	pop    ebx
c00227a5:	5e                   	pop    esi
c00227a6:	5f                   	pop    edi
c00227a7:	5d                   	pop    ebp
c00227a8:	c3                   	ret    
c00227a9:	90                   	nop

c00227aa <ISO9660::open(char const*, void**, FileOpenMode)>:
c00227aa:	57                   	push   edi
c00227ab:	56                   	push   esi
c00227ac:	53                   	push   ebx
c00227ad:	83 ec 10             	sub    esp,0x10
c00227b0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00227b4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00227b8:	85 ff                	test   edi,edi
c00227ba:	0f 84 9d 00 00 00    	je     c002285d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00227c0:	85 f6                	test   esi,esi
c00227c2:	0f 84 95 00 00 00    	je     c002285d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00227c8:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00227cd:	74 17                	je     c00227e6 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00227cf:	83 ec 0c             	sub    esp,0xc
c00227d2:	68 8f d7 02 c0       	push   0xc002d78f
c00227d7:	e8 0b 06 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00227dc:	83 c4 10             	add    esp,0x10
c00227df:	b8 03 00 00 00       	mov    eax,0x3
c00227e4:	eb 7c                	jmp    c0022862 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00227e6:	83 ec 0c             	sub    esp,0xc
c00227e9:	6a 1c                	push   0x1c
c00227eb:	e8 9c d0 fe ff       	call   c000f88c <malloc>
c00227f0:	89 07                	mov    DWORD PTR [edi],eax
c00227f2:	89 c3                	mov    ebx,eax
c00227f4:	58                   	pop    eax
c00227f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00227f9:	50                   	push   eax
c00227fa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00227fd:	50                   	push   eax
c00227fe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022802:	50                   	push   eax
c0022803:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022807:	50                   	push   eax
c0022808:	56                   	push   esi
c0022809:	e8 0d ff ff ff       	call   c002271b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002280e:	83 c4 20             	add    esp,0x20
c0022811:	84 c0                	test   al,al
c0022813:	74 07                	je     c002281c <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022815:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002281a:	74 0b                	je     c0022827 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002281c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022820:	b8 01 00 00 00       	mov    eax,0x1
c0022825:	eb 3b                	jmp    c0022862 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022827:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002282b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002282f:	89 03                	mov    DWORD PTR [ebx],eax
c0022831:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002283c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022843:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002284a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002284d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022854:	8a 06                	mov    al,BYTE PTR [esi]
c0022856:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022859:	31 c0                	xor    eax,eax
c002285b:	eb 05                	jmp    c0022862 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002285d:	b8 04 00 00 00       	mov    eax,0x4
c0022862:	83 c4 10             	add    esp,0x10
c0022865:	5b                   	pop    ebx
c0022866:	5e                   	pop    esi
c0022867:	5f                   	pop    edi
c0022868:	c3                   	ret    
c0022869:	90                   	nop

c002286a <ISO9660::exists(char const*)>:
c002286a:	83 ec 28             	sub    esp,0x28
c002286d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022871:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022875:	52                   	push   edx
c0022876:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022879:	52                   	push   edx
c002287a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002287e:	52                   	push   edx
c002287f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022883:	52                   	push   edx
c0022884:	50                   	push   eax
c0022885:	e8 91 fe ff ff       	call   c002271b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002288a:	83 c4 3c             	add    esp,0x3c
c002288d:	c3                   	ret    

c002288e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002288e:	56                   	push   esi
c002288f:	53                   	push   ebx
c0022890:	83 ec 14             	sub    esp,0x14
c0022893:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022897:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002289b:	85 db                	test   ebx,ebx
c002289d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00228a1:	0f 94 c2             	sete   dl
c00228a4:	85 f6                	test   esi,esi
c00228a6:	0f 94 c0             	sete   al
c00228a9:	08 c2                	or     dl,al
c00228ab:	75 68                	jne    c0022915 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00228ad:	85 c9                	test   ecx,ecx
c00228af:	74 64                	je     c0022915 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00228b1:	83 ec 0c             	sub    esp,0xc
c00228b4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00228b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00228bb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00228c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00228c8:	50                   	push   eax
c00228c9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00228cc:	50                   	push   eax
c00228cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228d1:	50                   	push   eax
c00228d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228d6:	50                   	push   eax
c00228d7:	51                   	push   ecx
c00228d8:	e8 3e fe ff ff       	call   c002271b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00228dd:	83 c4 20             	add    esp,0x20
c00228e0:	ba 01 00 00 00       	mov    edx,0x1
c00228e5:	84 c0                	test   al,al
c00228e7:	74 31                	je     c002291a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00228e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00228f4:	89 03                	mov    DWORD PTR [ebx],eax
c00228f6:	ba 00 00 00 00       	mov    edx,0x0
c00228fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228ff:	85 c0                	test   eax,eax
c0022901:	0f 95 06             	setne  BYTE PTR [esi]
c0022904:	74 14                	je     c002291a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022906:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002290c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022913:	eb 05                	jmp    c002291a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022915:	ba 04 00 00 00       	mov    edx,0x4
c002291a:	83 c4 14             	add    esp,0x14
c002291d:	89 d0                	mov    eax,edx
c002291f:	5b                   	pop    ebx
c0022920:	5e                   	pop    esi
c0022921:	c3                   	ret    

c0022922 <ISO9660::openDir(char const*, void**)>:
c0022922:	57                   	push   edi
c0022923:	56                   	push   esi
c0022924:	53                   	push   ebx
c0022925:	83 ec 10             	sub    esp,0x10
c0022928:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002292c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022930:	85 ff                	test   edi,edi
c0022932:	0f 84 95 00 00 00    	je     c00229cd <ISO9660::openDir(char const*, void**)+0xab>
c0022938:	85 f6                	test   esi,esi
c002293a:	0f 84 8d 00 00 00    	je     c00229cd <ISO9660::openDir(char const*, void**)+0xab>
c0022940:	83 ec 0c             	sub    esp,0xc
c0022943:	6a 1c                	push   0x1c
c0022945:	e8 42 cf fe ff       	call   c000f88c <malloc>
c002294a:	89 07                	mov    DWORD PTR [edi],eax
c002294c:	89 c3                	mov    ebx,eax
c002294e:	59                   	pop    ecx
c002294f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022953:	50                   	push   eax
c0022954:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022957:	50                   	push   eax
c0022958:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002295c:	50                   	push   eax
c002295d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022961:	50                   	push   eax
c0022962:	56                   	push   esi
c0022963:	e8 b3 fd ff ff       	call   c002271b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022968:	83 c4 20             	add    esp,0x20
c002296b:	84 c0                	test   al,al
c002296d:	74 07                	je     c0022976 <ISO9660::openDir(char const*, void**)+0x54>
c002296f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022974:	75 21                	jne    c0022997 <ISO9660::openDir(char const*, void**)+0x75>
c0022976:	0f b6 c0             	movzx  eax,al
c0022979:	52                   	push   edx
c002297a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002297e:	50                   	push   eax
c002297f:	68 b5 d7 02 c0       	push   0xc002d7b5
c0022984:	e8 5e 04 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0022989:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002298d:	83 c4 10             	add    esp,0x10
c0022990:	b8 01 00 00 00       	mov    eax,0x1
c0022995:	eb 3b                	jmp    c00229d2 <ISO9660::openDir(char const*, void**)+0xb0>
c0022997:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002299b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002299f:	89 03                	mov    DWORD PTR [ebx],eax
c00229a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00229a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00229b3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00229ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00229bd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00229c4:	8a 06                	mov    al,BYTE PTR [esi]
c00229c6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00229c9:	31 c0                	xor    eax,eax
c00229cb:	eb 05                	jmp    c00229d2 <ISO9660::openDir(char const*, void**)+0xb0>
c00229cd:	b8 04 00 00 00       	mov    eax,0x4
c00229d2:	83 c4 10             	add    esp,0x10
c00229d5:	5b                   	pop    ebx
c00229d6:	5e                   	pop    esi
c00229d7:	5f                   	pop    edi
c00229d8:	c3                   	ret    
c00229d9:	90                   	nop

c00229da <ISO9660::ISO9660()>:
c00229da:	83 ec 0c             	sub    esp,0xc
c00229dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e1:	83 ec 0c             	sub    esp,0xc
c00229e4:	50                   	push   eax
c00229e5:	e8 08 07 ff ff       	call   c00130f2 <Filesystem::Filesystem()>
c00229ea:	83 c4 10             	add    esp,0x10
c00229ed:	ba d8 d7 02 c0       	mov    edx,0xc002d7d8
c00229f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f6:	89 10                	mov    DWORD PTR [eax],edx
c00229f8:	90                   	nop
c00229f9:	83 c4 0c             	add    esp,0xc
c00229fc:	c3                   	ret    
c00229fd:	90                   	nop

c00229fe <SoundChannel::SoundChannel(int, int, int, int)>:
c00229fe:	83 ec 1c             	sub    esp,0x1c
c0022a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a05:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022a09:	89 10                	mov    DWORD PTR [eax],edx
c0022a0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a0f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022a13:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022a1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a21:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022a26:	75 23                	jne    c0022a4b <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0022a28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a2c:	8b 10                	mov    edx,DWORD PTR [eax]
c0022a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a35:	0f af c2             	imul   eax,edx
c0022a38:	85 c0                	test   eax,eax
c0022a3a:	79 03                	jns    c0022a3f <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0022a3c:	83 c0 03             	add    eax,0x3
c0022a3f:	c1 f8 02             	sar    eax,0x2
c0022a42:	05 a0 0f 00 00       	add    eax,0xfa0
c0022a47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022a4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022a53:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022a56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a5a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a65:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a70:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022a73:	c1 e0 02             	shl    eax,0x2
c0022a76:	83 ec 0c             	sub    esp,0xc
c0022a79:	50                   	push   eax
c0022a7a:	e8 0d ce fe ff       	call   c000f88c <malloc>
c0022a7f:	83 c4 10             	add    esp,0x10
c0022a82:	89 c2                	mov    edx,eax
c0022a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a88:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022a8b:	83 ec 04             	sub    esp,0x4
c0022a8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022a92:	50                   	push   eax
c0022a93:	6a 01                	push   0x1
c0022a95:	6a 04                	push   0x4
c0022a97:	e8 c9 60 fe ff       	call   c0008b65 <src_new>
c0022a9c:	83 c4 10             	add    esp,0x10
c0022a9f:	89 c2                	mov    edx,eax
c0022aa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022aa5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022aa8:	83 ec 0c             	sub    esp,0xc
c0022aab:	68 38 d8 02 c0       	push   0xc002d838
c0022ab0:	e8 32 03 ff ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0022ab5:	83 c4 10             	add    esp,0x10
c0022ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022abc:	85 c0                	test   eax,eax
c0022abe:	74 10                	je     c0022ad0 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c0022ac0:	83 ec 0c             	sub    esp,0xc
c0022ac3:	68 4e d8 02 c0       	push   0xc002d84e
c0022ac8:	e8 62 7e ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0022acd:	83 c4 10             	add    esp,0x10
c0022ad0:	a0 40 37 03 c0       	mov    al,ds:0xc0033740
c0022ad5:	83 f0 01             	xor    eax,0x1
c0022ad8:	84 c0                	test   al,al
c0022ada:	74 57                	je     c0022b33 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c0022adc:	a1 68 d8 02 c0       	mov    eax,ds:0xc002d868
c0022ae1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ae5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022aed:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022af5:	7f 35                	jg     c0022b2c <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c0022af7:	83 ec 0c             	sub    esp,0xc
c0022afa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022afe:	e8 2c 55 00 00       	call   c002802f <__floatsisf>
c0022b03:	83 c4 10             	add    esp,0x10
c0022b06:	8b 15 68 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d868
c0022b0c:	83 ec 08             	sub    esp,0x8
c0022b0f:	52                   	push   edx
c0022b10:	50                   	push   eax
c0022b11:	e8 2b 51 00 00       	call   c0027c41 <__mulsf3>
c0022b16:	83 c4 10             	add    esp,0x10
c0022b19:	89 c2                	mov    edx,eax
c0022b1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b1f:	89 14 85 40 33 03 c0 	mov    DWORD PTR [eax*4-0x3ffcccc0],edx
c0022b26:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022b2a:	eb c1                	jmp    c0022aed <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c0022b2c:	c6 05 40 37 03 c0 01 	mov    BYTE PTR ds:0xc0033740,0x1
c0022b33:	90                   	nop
c0022b34:	83 c4 1c             	add    esp,0x1c
c0022b37:	c3                   	ret    

c0022b38 <SoundChannel::~SoundChannel()>:
c0022b38:	83 ec 0c             	sub    esp,0xc
c0022b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b3f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022b42:	83 ec 0c             	sub    esp,0xc
c0022b45:	50                   	push   eax
c0022b46:	e8 51 cd fe ff       	call   c000f89c <free>
c0022b4b:	83 c4 10             	add    esp,0x10
c0022b4e:	90                   	nop
c0022b4f:	83 c4 0c             	add    esp,0xc
c0022b52:	c3                   	ret    
c0022b53:	90                   	nop

c0022b54 <SoundChannel::getSampleRate()>:
c0022b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b5a:	c3                   	ret    
c0022b5b:	90                   	nop

c0022b5c <SoundChannel::getBits()>:
c0022b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b63:	c3                   	ret    

c0022b64 <SoundChannel::getBufferUsed()>:
c0022b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b68:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022b6b:	c3                   	ret    

c0022b6c <SoundChannel::getBufferSize()>:
c0022b6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b70:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022b73:	c3                   	ret    

c0022b74 <SoundChannel::unbuffer(float*, int, int)>:
c0022b74:	56                   	push   esi
c0022b75:	53                   	push   ebx
c0022b76:	83 ec 40             	sub    esp,0x40
c0022b79:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022b7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022b80:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022b84:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022b87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022b8b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022b8f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022b93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022b97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022b9b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022b9f:	e8 8b 54 00 00       	call   c002802f <__floatsisf>
c0022ba4:	5a                   	pop    edx
c0022ba5:	89 c6                	mov    esi,eax
c0022ba7:	ff 33                	push   DWORD PTR [ebx]
c0022ba9:	e8 81 54 00 00       	call   c002802f <__floatsisf>
c0022bae:	59                   	pop    ecx
c0022baf:	5a                   	pop    edx
c0022bb0:	50                   	push   eax
c0022bb1:	56                   	push   esi
c0022bb2:	e8 4d 52 00 00       	call   c0027e04 <__divsf3>
c0022bb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bba:	e8 40 67 00 00       	call   c00292ff <__extendsfdf2>
c0022bbf:	59                   	pop    ecx
c0022bc0:	5e                   	pop    esi
c0022bc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022bc5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022bc9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022bd1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022bd5:	50                   	push   eax
c0022bd6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022bd9:	e8 7c 5b fe ff       	call   c000875a <src_process>
c0022bde:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022be2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022be5:	83 c4 0c             	add    esp,0xc
c0022be8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022beb:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022bee:	29 d0                	sub    eax,edx
c0022bf0:	c1 e0 02             	shl    eax,0x2
c0022bf3:	50                   	push   eax
c0022bf4:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022bf7:	50                   	push   eax
c0022bf8:	51                   	push   ecx
c0022bf9:	e8 8a da fd ff       	call   c0000688 <memmove>
c0022bfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022c02:	83 c4 44             	add    esp,0x44
c0022c05:	5b                   	pop    ebx
c0022c06:	5e                   	pop    esi
c0022c07:	c3                   	ret    

c0022c08 <SoundChannel::buffer16(short*, int)>:
c0022c08:	55                   	push   ebp
c0022c09:	57                   	push   edi
c0022c0a:	56                   	push   esi
c0022c0b:	53                   	push   ebx
c0022c0c:	83 ec 1c             	sub    esp,0x1c
c0022c0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022c13:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022c16:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022c19:	0f 84 d2 00 00 00    	je     c0022cf1 <SoundChannel::buffer16(short*, int)+0xe9>
c0022c1f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022c23:	85 ed                	test   ebp,ebp
c0022c25:	0f 8e c6 00 00 00    	jle    c0022cf1 <SoundChannel::buffer16(short*, int)+0xe9>
c0022c2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022c2f:	bd 00 00 00 38       	mov    ebp,0x38000000
c0022c34:	83 ec 0c             	sub    esp,0xc
c0022c37:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0022c3a:	50                   	push   eax
c0022c3b:	e8 ef 53 00 00       	call   c002802f <__floatsisf>
c0022c40:	59                   	pop    ecx
c0022c41:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022c44:	5f                   	pop    edi
c0022c45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022c48:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022c4b:	55                   	push   ebp
c0022c4c:	50                   	push   eax
c0022c4d:	e8 ef 4f 00 00       	call   c0027c41 <__mulsf3>
c0022c52:	83 c4 10             	add    esp,0x10
c0022c55:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022c58:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022c5b:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022c5e:	0f 84 99 00 00 00    	je     c0022cfd <SoundChannel::buffer16(short*, int)+0xf5>
c0022c64:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0022c69:	74 78                	je     c0022ce3 <SoundChannel::buffer16(short*, int)+0xdb>
c0022c6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022c6f:	83 ec 0c             	sub    esp,0xc
c0022c72:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0022c76:	50                   	push   eax
c0022c77:	e8 b3 53 00 00       	call   c002802f <__floatsisf>
c0022c7c:	5f                   	pop    edi
c0022c7d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022c80:	5a                   	pop    edx
c0022c81:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022c84:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022c87:	55                   	push   ebp
c0022c88:	50                   	push   eax
c0022c89:	e8 b3 4f 00 00       	call   c0027c41 <__mulsf3>
c0022c8e:	83 c4 10             	add    esp,0x10
c0022c91:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022c94:	be 02 00 00 00       	mov    esi,0x2
c0022c99:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022c9c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022c9f:	74 46                	je     c0022ce7 <SoundChannel::buffer16(short*, int)+0xdf>
c0022ca1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022ca5:	eb 36                	jmp    c0022cdd <SoundChannel::buffer16(short*, int)+0xd5>
c0022ca7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022cab:	83 ec 0c             	sub    esp,0xc
c0022cae:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022cb2:	46                   	inc    esi
c0022cb3:	50                   	push   eax
c0022cb4:	e8 76 53 00 00       	call   c002802f <__floatsisf>
c0022cb9:	5a                   	pop    edx
c0022cba:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022cbd:	59                   	pop    ecx
c0022cbe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022cc1:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022cc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022cc8:	50                   	push   eax
c0022cc9:	e8 73 4f 00 00       	call   c0027c41 <__mulsf3>
c0022cce:	83 c4 10             	add    esp,0x10
c0022cd1:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0022cd5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022cd8:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022cdb:	74 0a                	je     c0022ce7 <SoundChannel::buffer16(short*, int)+0xdf>
c0022cdd:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022ce1:	75 c4                	jne    c0022ca7 <SoundChannel::buffer16(short*, int)+0x9f>
c0022ce3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022ce7:	83 c4 1c             	add    esp,0x1c
c0022cea:	89 f0                	mov    eax,esi
c0022cec:	5b                   	pop    ebx
c0022ced:	5e                   	pop    esi
c0022cee:	5f                   	pop    edi
c0022cef:	5d                   	pop    ebp
c0022cf0:	c3                   	ret    
c0022cf1:	83 c4 1c             	add    esp,0x1c
c0022cf4:	31 f6                	xor    esi,esi
c0022cf6:	5b                   	pop    ebx
c0022cf7:	89 f0                	mov    eax,esi
c0022cf9:	5e                   	pop    esi
c0022cfa:	5f                   	pop    edi
c0022cfb:	5d                   	pop    ebp
c0022cfc:	c3                   	ret    
c0022cfd:	be 01 00 00 00       	mov    esi,0x1
c0022d02:	eb e3                	jmp    c0022ce7 <SoundChannel::buffer16(short*, int)+0xdf>

c0022d04 <SoundChannel::buffer8(unsigned char*, int)>:
c0022d04:	55                   	push   ebp
c0022d05:	57                   	push   edi
c0022d06:	56                   	push   esi
c0022d07:	53                   	push   ebx
c0022d08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d0c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022d10:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022d13:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022d17:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022d1a:	74 7a                	je     c0022d96 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022d1c:	85 ff                	test   edi,edi
c0022d1e:	7e 76                	jle    c0022d96 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022d20:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022d24:	8d 70 01             	lea    esi,[eax+0x1]
c0022d27:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022d2a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022d2d:	8b 1c 9d 40 33 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcccc0]
c0022d34:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022d37:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022d3a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022d3d:	74 5e                	je     c0022d9d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022d3f:	83 ff 01             	cmp    edi,0x1
c0022d42:	74 4b                	je     c0022d8f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022d44:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022d48:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022d4b:	8d 70 01             	lea    esi,[eax+0x1]
c0022d4e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022d51:	8b 1c 9d 40 33 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcccc0]
c0022d58:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022d5b:	b8 02 00 00 00       	mov    eax,0x2
c0022d60:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022d63:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022d66:	75 23                	jne    c0022d8b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022d68:	eb 27                	jmp    c0022d91 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022d6a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022d6f:	8d 71 01             	lea    esi,[ecx+0x1]
c0022d72:	40                   	inc    eax
c0022d73:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022d76:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022d79:	8b 1c 9d 40 33 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcccc0]
c0022d80:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022d83:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022d86:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022d89:	74 06                	je     c0022d91 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022d8b:	39 c7                	cmp    edi,eax
c0022d8d:	75 db                	jne    c0022d6a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022d8f:	89 f8                	mov    eax,edi
c0022d91:	5b                   	pop    ebx
c0022d92:	5e                   	pop    esi
c0022d93:	5f                   	pop    edi
c0022d94:	5d                   	pop    ebp
c0022d95:	c3                   	ret    
c0022d96:	5b                   	pop    ebx
c0022d97:	31 c0                	xor    eax,eax
c0022d99:	5e                   	pop    esi
c0022d9a:	5f                   	pop    edi
c0022d9b:	5d                   	pop    ebp
c0022d9c:	c3                   	ret    
c0022d9d:	b8 01 00 00 00       	mov    eax,0x1
c0022da2:	eb ed                	jmp    c0022d91 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022da4 <SoundDevice::SoundDevice(char const*)>:
c0022da4:	83 ec 1c             	sub    esp,0x1c
c0022da7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022dab:	83 ec 08             	sub    esp,0x8
c0022dae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022db2:	50                   	push   eax
c0022db3:	e8 6c 16 ff ff       	call   c0014424 <Device::Device(char const*)>
c0022db8:	83 c4 10             	add    esp,0x10
c0022dbb:	ba 68 d9 02 c0       	mov    edx,0xc002d968
c0022dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022dc4:	89 10                	mov    DWORD PTR [eax],edx
c0022dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022dca:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022dd8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022de2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022dea:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022def:	7f 19                	jg     c0022e0a <SoundDevice::SoundDevice(char const*)+0x66>
c0022df1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022df5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022df9:	83 c2 54             	add    edx,0x54
c0022dfc:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022e04:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022e08:	eb e0                	jmp    c0022dea <SoundDevice::SoundDevice(char const*)+0x46>
c0022e0a:	90                   	nop
c0022e0b:	83 c4 1c             	add    esp,0x1c
c0022e0e:	c3                   	ret    
c0022e0f:	90                   	nop

c0022e10 <SoundDevice::~SoundDevice()>:
c0022e10:	53                   	push   ebx
c0022e11:	83 ec 18             	sub    esp,0x18
c0022e14:	ba 68 d9 02 c0       	mov    edx,0xc002d968
c0022e19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e1d:	89 10                	mov    DWORD PTR [eax],edx
c0022e1f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022e27:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022e2c:	7f 46                	jg     c0022e74 <SoundDevice::~SoundDevice()+0x64>
c0022e2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e36:	83 c2 54             	add    edx,0x54
c0022e39:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022e3d:	85 c0                	test   eax,eax
c0022e3f:	74 2d                	je     c0022e6e <SoundDevice::~SoundDevice()+0x5e>
c0022e41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e49:	83 c2 54             	add    edx,0x54
c0022e4c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022e50:	85 db                	test   ebx,ebx
c0022e52:	74 1a                	je     c0022e6e <SoundDevice::~SoundDevice()+0x5e>
c0022e54:	83 ec 0c             	sub    esp,0xc
c0022e57:	53                   	push   ebx
c0022e58:	e8 db fc ff ff       	call   c0022b38 <SoundChannel::~SoundChannel()>
c0022e5d:	83 c4 10             	add    esp,0x10
c0022e60:	83 ec 08             	sub    esp,0x8
c0022e63:	6a 2c                	push   0x2c
c0022e65:	53                   	push   ebx
c0022e66:	e8 9c fe fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0022e6b:	83 c4 10             	add    esp,0x10
c0022e6e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022e72:	eb b3                	jmp    c0022e27 <SoundDevice::~SoundDevice()+0x17>
c0022e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e78:	83 ec 0c             	sub    esp,0xc
c0022e7b:	50                   	push   eax
c0022e7c:	e8 6d 12 ff ff       	call   c00140ee <Device::~Device()>
c0022e81:	83 c4 10             	add    esp,0x10
c0022e84:	90                   	nop
c0022e85:	83 c4 18             	add    esp,0x18
c0022e88:	5b                   	pop    ebx
c0022e89:	c3                   	ret    

c0022e8a <SoundDevice::~SoundDevice()>:
c0022e8a:	83 ec 0c             	sub    esp,0xc
c0022e8d:	83 ec 0c             	sub    esp,0xc
c0022e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e94:	e8 77 ff ff ff       	call   c0022e10 <SoundDevice::~SoundDevice()>
c0022e99:	83 c4 10             	add    esp,0x10
c0022e9c:	83 ec 08             	sub    esp,0x8
c0022e9f:	68 e4 01 00 00       	push   0x1e4
c0022ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ea8:	e8 5a fe fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0022ead:	83 c4 10             	add    esp,0x10
c0022eb0:	83 c4 0c             	add    esp,0xc
c0022eb3:	c3                   	ret    

c0022eb4 <SoundDevice::getFreeChannelNum()>:
c0022eb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022eb8:	31 c0                	xor    eax,eax
c0022eba:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022ec2:	74 09                	je     c0022ecd <SoundDevice::getFreeChannelNum()+0x19>
c0022ec4:	40                   	inc    eax
c0022ec5:	83 f8 20             	cmp    eax,0x20
c0022ec8:	75 f0                	jne    c0022eba <SoundDevice::getFreeChannelNum()+0x6>
c0022eca:	83 c8 ff             	or     eax,0xffffffff
c0022ecd:	c3                   	ret    

c0022ece <SoundDevice::addChannel(SoundChannel*)>:
c0022ece:	56                   	push   esi
c0022ecf:	53                   	push   ebx
c0022ed0:	51                   	push   ecx
c0022ed1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022ed5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022ed9:	53                   	push   ebx
c0022eda:	e8 d5 ff ff ff       	call   c0022eb4 <SoundDevice::getFreeChannelNum()>
c0022edf:	5a                   	pop    edx
c0022ee0:	83 f8 ff             	cmp    eax,0xffffffff
c0022ee3:	74 51                	je     c0022f36 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022ee5:	85 f6                	test   esi,esi
c0022ee7:	74 4d                	je     c0022f36 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022ee9:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022ef0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022ef7:	75 30                	jne    c0022f29 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022ef9:	83 ec 0c             	sub    esp,0xc
c0022efc:	56                   	push   esi
c0022efd:	e8 52 fc ff ff       	call   c0022b54 <SoundChannel::getSampleRate()>
c0022f02:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022f08:	89 34 24             	mov    DWORD PTR [esp],esi
c0022f0b:	e8 4c fc ff ff       	call   c0022b5c <SoundChannel::getBits()>
c0022f10:	83 c4 0c             	add    esp,0xc
c0022f13:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022f19:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022f1b:	50                   	push   eax
c0022f1c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022f22:	53                   	push   ebx
c0022f23:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022f26:	83 c4 10             	add    esp,0x10
c0022f29:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022f2f:	b8 01 00 00 00       	mov    eax,0x1
c0022f34:	eb 03                	jmp    c0022f39 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022f36:	83 c8 ff             	or     eax,0xffffffff
c0022f39:	5a                   	pop    edx
c0022f3a:	5b                   	pop    ebx
c0022f3b:	5e                   	pop    esi
c0022f3c:	c3                   	ret    
c0022f3d:	90                   	nop

c0022f3e <SoundDevice::removeChannel(int)>:
c0022f3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f46:	83 fa 1f             	cmp    edx,0x1f
c0022f49:	77 23                	ja     c0022f6e <SoundDevice::removeChannel(int)+0x30>
c0022f4b:	8d 14 90             	lea    edx,[eax+edx*4]
c0022f4e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022f55:	74 17                	je     c0022f6e <SoundDevice::removeChannel(int)+0x30>
c0022f57:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022f61:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022f67:	75 05                	jne    c0022f6e <SoundDevice::removeChannel(int)+0x30>
c0022f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f6b:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022f6e:	c3                   	ret    
c0022f6f:	90                   	nop

c0022f70 <SoundDevice::floatTo16(float*, short*, int)>:
c0022f70:	57                   	push   edi
c0022f71:	56                   	push   esi
c0022f72:	53                   	push   ebx
c0022f73:	31 db                	xor    ebx,ebx
c0022f75:	83 ec 10             	sub    esp,0x10
c0022f78:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022f7c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022f80:	0f 8d d0 00 00 00    	jge    c0023056 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022f86:	83 ec 0c             	sub    esp,0xc
c0022f89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022f8d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022f90:	e8 6a 63 00 00       	call   c00292ff <__extendsfdf2>
c0022f95:	83 c4 10             	add    esp,0x10
c0022f98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022f9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022fa0:	68 00 00 f0 3f       	push   0x3ff00000
c0022fa5:	6a 00                	push   0x0
c0022fa7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022faf:	e8 d7 52 00 00       	call   c002828b <__adddf3>
c0022fb4:	83 c4 10             	add    esp,0x10
c0022fb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022fbf:	68 00 00 e0 3f       	push   0x3fe00000
c0022fc4:	6a 00                	push   0x0
c0022fc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fce:	e8 35 59 00 00       	call   c0028908 <__muldf3>
c0022fd3:	83 c4 10             	add    esp,0x10
c0022fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022fda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022fde:	68 c0 ff df 40       	push   0x40dfffc0
c0022fe3:	6a 00                	push   0x0
c0022fe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fed:	e8 16 59 00 00       	call   c0028908 <__muldf3>
c0022ff2:	59                   	pop    ecx
c0022ff3:	5f                   	pop    edi
c0022ff4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ff8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022ffc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023000:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023004:	e8 d2 61 00 00       	call   c00291db <__truncdfsf2>
c0023009:	5a                   	pop    edx
c002300a:	89 c7                	mov    edi,eax
c002300c:	59                   	pop    ecx
c002300d:	68 00 fe ff 46       	push   0x46fffe00
c0023012:	50                   	push   eax
c0023013:	e8 6d 52 00 00       	call   c0028285 <__gesf2>
c0023018:	83 c4 10             	add    esp,0x10
c002301b:	85 c0                	test   eax,eax
c002301d:	78 08                	js     c0023027 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002301f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0023025:	eb 29                	jmp    c0023050 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0023027:	50                   	push   eax
c0023028:	50                   	push   eax
c0023029:	6a 00                	push   0x0
c002302b:	57                   	push   edi
c002302c:	e8 58 52 00 00       	call   c0028289 <__lesf2>
c0023031:	83 c4 10             	add    esp,0x10
c0023034:	85 c0                	test   eax,eax
c0023036:	7f 08                	jg     c0023040 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0023038:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002303e:	eb 10                	jmp    c0023050 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0023040:	83 ec 0c             	sub    esp,0xc
c0023043:	57                   	push   edi
c0023044:	e8 53 63 00 00       	call   c002939c <lrintf>
c0023049:	83 c4 10             	add    esp,0x10
c002304c:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0023050:	43                   	inc    ebx
c0023051:	e9 26 ff ff ff       	jmp    c0022f7c <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0023056:	83 c4 10             	add    esp,0x10
c0023059:	5b                   	pop    ebx
c002305a:	5e                   	pop    esi
c002305b:	5f                   	pop    edi
c002305c:	c3                   	ret    
c002305d:	90                   	nop

c002305e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002305e:	57                   	push   edi
c002305f:	56                   	push   esi
c0023060:	53                   	push   ebx
c0023061:	31 db                	xor    ebx,ebx
c0023063:	83 ec 10             	sub    esp,0x10
c0023066:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002306a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002306e:	0f 8d cb 00 00 00    	jge    c002313f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0023074:	83 ec 0c             	sub    esp,0xc
c0023077:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002307b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002307e:	e8 7c 62 00 00       	call   c00292ff <__extendsfdf2>
c0023083:	83 c4 10             	add    esp,0x10
c0023086:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002308a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002308e:	68 00 00 f0 3f       	push   0x3ff00000
c0023093:	6a 00                	push   0x0
c0023095:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023099:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002309d:	e8 e9 51 00 00       	call   c002828b <__adddf3>
c00230a2:	83 c4 10             	add    esp,0x10
c00230a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00230a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00230ad:	68 00 00 e0 3f       	push   0x3fe00000
c00230b2:	6a 00                	push   0x0
c00230b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230bc:	e8 47 58 00 00       	call   c0028908 <__muldf3>
c00230c1:	83 c4 10             	add    esp,0x10
c00230c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00230c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00230cc:	68 00 00 60 40       	push   0x40600000
c00230d1:	6a 00                	push   0x0
c00230d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230db:	e8 28 58 00 00       	call   c0028908 <__muldf3>
c00230e0:	59                   	pop    ecx
c00230e1:	5f                   	pop    edi
c00230e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00230e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00230ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230f2:	e8 e4 60 00 00       	call   c00291db <__truncdfsf2>
c00230f7:	5a                   	pop    edx
c00230f8:	89 c7                	mov    edi,eax
c00230fa:	59                   	pop    ecx
c00230fb:	68 00 00 fe 42       	push   0x42fe0000
c0023100:	50                   	push   eax
c0023101:	e8 7f 51 00 00       	call   c0028285 <__gesf2>
c0023106:	83 c4 10             	add    esp,0x10
c0023109:	85 c0                	test   eax,eax
c002310b:	78 06                	js     c0023113 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002310d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0023111:	eb 26                	jmp    c0023139 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0023113:	50                   	push   eax
c0023114:	50                   	push   eax
c0023115:	6a 00                	push   0x0
c0023117:	57                   	push   edi
c0023118:	e8 6c 51 00 00       	call   c0028289 <__lesf2>
c002311d:	83 c4 10             	add    esp,0x10
c0023120:	85 c0                	test   eax,eax
c0023122:	7f 06                	jg     c002312a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0023124:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0023128:	eb 0f                	jmp    c0023139 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002312a:	83 ec 0c             	sub    esp,0xc
c002312d:	57                   	push   edi
c002312e:	e8 69 62 00 00       	call   c002939c <lrintf>
c0023133:	83 c4 10             	add    esp,0x10
c0023136:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0023139:	43                   	inc    ebx
c002313a:	e9 2b ff ff ff       	jmp    c002306a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002313f:	83 c4 10             	add    esp,0x10
c0023142:	5b                   	pop    ebx
c0023143:	5e                   	pop    esi
c0023144:	5f                   	pop    edi
c0023145:	c3                   	ret    

c0023146 <SoundDevice::getAudio(int, float*, float*)>:
c0023146:	55                   	push   ebp
c0023147:	57                   	push   edi
c0023148:	56                   	push   esi
c0023149:	53                   	push   ebx
c002314a:	83 ec 28             	sub    esp,0x28
c002314d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023151:	68 6c d8 02 c0       	push   0xc002d86c
c0023156:	e8 8c fc fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c002315b:	59                   	pop    ecx
c002315c:	5e                   	pop    esi
c002315d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0023161:	68 83 d8 02 c0       	push   0xc002d883
c0023166:	e8 7c fc fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c002316b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002316f:	83 c4 0c             	add    esp,0xc
c0023172:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0023179:	56                   	push   esi
c002317a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002317e:	68 a5 d8 02 c0       	push   0xc002d8a5
c0023183:	e8 5f fc fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0023188:	83 c4 0c             	add    esp,0xc
c002318b:	56                   	push   esi
c002318c:	31 f6                	xor    esi,esi
c002318e:	6a 00                	push   0x0
c0023190:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0023194:	e8 b7 d5 fd ff       	call   c0000750 <memset>
c0023199:	83 c4 10             	add    esp,0x10
c002319c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00231a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00231ac:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c00231b3:	85 c0                	test   eax,eax
c00231b5:	0f 84 d7 00 00 00    	je     c0023292 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c00231bb:	83 ec 0c             	sub    esp,0xc
c00231be:	50                   	push   eax
c00231bf:	e8 a8 f9 ff ff       	call   c0022b6c <SoundChannel::getBufferSize()>
c00231c4:	5f                   	pop    edi
c00231c5:	5d                   	pop    ebp
c00231c6:	50                   	push   eax
c00231c7:	68 c9 d8 02 c0       	push   0xc002d8c9
c00231cc:	e8 16 fc fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00231d1:	58                   	pop    eax
c00231d2:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c00231d9:	e8 86 f9 ff ff       	call   c0022b64 <SoundChannel::getBufferUsed()>
c00231de:	5a                   	pop    edx
c00231df:	59                   	pop    ecx
c00231e0:	50                   	push   eax
c00231e1:	68 dc d8 02 c0       	push   0xc002d8dc
c00231e6:	e8 fc fb fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00231eb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00231ef:	99                   	cdq    
c00231f0:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00231f6:	50                   	push   eax
c00231f7:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00231fd:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0023201:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0023208:	e8 67 f9 ff ff       	call   c0022b74 <SoundChannel::unbuffer(float*, int, int)>
c002320d:	83 c4 14             	add    esp,0x14
c0023210:	89 c5                	mov    ebp,eax
c0023212:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0023219:	e8 46 f9 ff ff       	call   c0022b64 <SoundChannel::getBufferUsed()>
c002321e:	5f                   	pop    edi
c002321f:	5a                   	pop    edx
c0023220:	50                   	push   eax
c0023221:	68 f4 d8 02 c0       	push   0xc002d8f4
c0023226:	e8 bc fb fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c002322b:	56                   	push   esi
c002322c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0023230:	99                   	cdq    
c0023231:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0023237:	50                   	push   eax
c0023238:	55                   	push   ebp
c0023239:	68 0c d9 02 c0       	push   0xc002d90c
c002323e:	e8 a4 fb fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0023243:	83 c4 20             	add    esp,0x20
c0023246:	31 c0                	xor    eax,eax
c0023248:	39 e8                	cmp    eax,ebp
c002324a:	7d 1e                	jge    c002326a <SoundDevice::getAudio(int, float*, float*)+0x124>
c002324c:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0023252:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0023256:	0f af d0             	imul   edx,eax
c0023259:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c002325c:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0023260:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023264:	40                   	inc    eax
c0023265:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0023268:	eb de                	jmp    c0023248 <SoundDevice::getAudio(int, float*, float*)+0x102>
c002326a:	50                   	push   eax
c002326b:	50                   	push   eax
c002326c:	55                   	push   ebp
c002326d:	68 39 d9 02 c0       	push   0xc002d939
c0023272:	e8 70 fb fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0023277:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c002327b:	5a                   	pop    edx
c002327c:	59                   	pop    ecx
c002327d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023281:	68 4a d9 02 c0       	push   0xc002d94a
c0023286:	e8 5c fb fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c002328b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c002328f:	83 c4 10             	add    esp,0x10
c0023292:	46                   	inc    esi
c0023293:	83 fe 20             	cmp    esi,0x20
c0023296:	0f 85 10 ff ff ff    	jne    c00231ac <SoundDevice::getAudio(int, float*, float*)+0x66>
c002329c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00232a0:	83 c4 1c             	add    esp,0x1c
c00232a3:	5b                   	pop    ebx
c00232a4:	5e                   	pop    esi
c00232a5:	5f                   	pop    edi
c00232a6:	5d                   	pop    ebp
c00232a7:	c3                   	ret    

c00232a8 <PCI::open(int, int, void*)>:
c00232a8:	83 ec 18             	sub    esp,0x18
c00232ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232af:	8b 10                	mov    edx,DWORD PTR [eax]
c00232b1:	50                   	push   eax
c00232b2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00232b5:	31 c0                	xor    eax,eax
c00232b7:	83 c4 1c             	add    esp,0x1c
c00232ba:	c3                   	ret    
c00232bb:	90                   	nop

c00232bc <PCI::close(int, int, void*)>:
c00232bc:	31 c0                	xor    eax,eax
c00232be:	c3                   	ret    
c00232bf:	90                   	nop

c00232c0 <PCI::PCI()>:
c00232c0:	83 ec 0c             	sub    esp,0xc
c00232c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232c7:	83 ec 08             	sub    esp,0x8
c00232ca:	68 98 d9 02 c0       	push   0xc002d998
c00232cf:	50                   	push   eax
c00232d0:	e8 b3 07 ff ff       	call   c0013a88 <Bus::Bus(char const*)>
c00232d5:	83 c4 10             	add    esp,0x10
c00232d8:	ba 44 da 02 c0       	mov    edx,0xc002da44
c00232dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e1:	89 10                	mov    DWORD PTR [eax],edx
c00232e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e7:	a3 44 37 03 c0       	mov    ds:0xc0033744,eax
c00232ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00232f6:	0f b6 d0             	movzx  edx,al
c00232f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232fd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023308:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002330e:	0f b6 d0             	movzx  edx,al
c0023311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023315:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002331a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002331e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023324:	8d 50 01             	lea    edx,[eax+0x1]
c0023327:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002332b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023331:	0f b6 d0             	movzx  edx,al
c0023334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023338:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002333c:	83 c9 c0             	or     ecx,0xffffffc0
c002333f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023343:	90                   	nop
c0023344:	83 c4 0c             	add    esp,0xc
c0023347:	c3                   	ret    

c0023348 <PCI::readBAR8(unsigned int, int)>:
c0023348:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002334c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023350:	f6 c2 01             	test   dl,0x1
c0023353:	74 07                	je     c002335c <PCI::readBAR8(unsigned int, int)+0x14>
c0023355:	83 e2 fc             	and    edx,0xfffffffc
c0023358:	01 c2                	add    edx,eax
c002335a:	ec                   	in     al,dx
c002335b:	c3                   	ret    
c002335c:	83 e2 f0             	and    edx,0xfffffff0
c002335f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0023362:	c3                   	ret    
c0023363:	90                   	nop

c0023364 <PCI::readBAR16(unsigned int, int)>:
c0023364:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002336c:	f6 c2 01             	test   dl,0x1
c002336f:	74 08                	je     c0023379 <PCI::readBAR16(unsigned int, int)+0x15>
c0023371:	83 e2 fc             	and    edx,0xfffffffc
c0023374:	01 c2                	add    edx,eax
c0023376:	66 ed                	in     ax,dx
c0023378:	c3                   	ret    
c0023379:	83 e2 f0             	and    edx,0xfffffff0
c002337c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0023380:	c3                   	ret    
c0023381:	90                   	nop

c0023382 <PCI::readBAR32(unsigned int, int)>:
c0023382:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002338a:	f6 c2 01             	test   dl,0x1
c002338d:	74 07                	je     c0023396 <PCI::readBAR32(unsigned int, int)+0x14>
c002338f:	83 e2 fc             	and    edx,0xfffffffc
c0023392:	01 c2                	add    edx,eax
c0023394:	ed                   	in     eax,dx
c0023395:	c3                   	ret    
c0023396:	83 e2 f0             	and    edx,0xfffffff0
c0023399:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002339c:	c3                   	ret    
c002339d:	90                   	nop

c002339e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002339e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00233a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00233aa:	f6 c2 01             	test   dl,0x1
c00233ad:	74 07                	je     c00233b6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00233af:	83 e2 fc             	and    edx,0xfffffffc
c00233b2:	01 ca                	add    edx,ecx
c00233b4:	ee                   	out    dx,al
c00233b5:	c3                   	ret    
c00233b6:	83 e2 f0             	and    edx,0xfffffff0
c00233b9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00233bc:	c3                   	ret    
c00233bd:	90                   	nop

c00233be <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00233be:	57                   	push   edi
c00233bf:	56                   	push   esi
c00233c0:	53                   	push   ebx
c00233c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233c5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00233c9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00233cd:	f6 c2 01             	test   dl,0x1
c00233d0:	74 24                	je     c00233f6 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c00233d2:	89 d3                	mov    ebx,edx
c00233d4:	83 e3 fc             	and    ebx,0xfffffffc
c00233d7:	50                   	push   eax
c00233d8:	0f b7 c7             	movzx  eax,di
c00233db:	50                   	push   eax
c00233dc:	8d 04 33             	lea    eax,[ebx+esi*1]
c00233df:	50                   	push   eax
c00233e0:	68 a0 d9 02 c0       	push   0xc002d9a0
c00233e5:	e8 fd f9 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00233ea:	8d 14 33             	lea    edx,[ebx+esi*1]
c00233ed:	89 f8                	mov    eax,edi
c00233ef:	66 ef                	out    dx,ax
c00233f1:	83 c4 10             	add    esp,0x10
c00233f4:	eb 07                	jmp    c00233fd <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c00233f6:	83 e2 f0             	and    edx,0xfffffff0
c00233f9:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c00233fd:	5b                   	pop    ebx
c00233fe:	5e                   	pop    esi
c00233ff:	5f                   	pop    edi
c0023400:	c3                   	ret    
c0023401:	90                   	nop

c0023402 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0023402:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023406:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002340a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002340e:	f6 c2 01             	test   dl,0x1
c0023411:	74 07                	je     c002341a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0023413:	83 e2 fc             	and    edx,0xfffffffc
c0023416:	01 ca                	add    edx,ecx
c0023418:	ef                   	out    dx,eax
c0023419:	c3                   	ret    
c002341a:	83 e2 f0             	and    edx,0xfffffff0
c002341d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023420:	c3                   	ret    
c0023421:	90                   	nop

c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023422:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023426:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002342b:	89 ca                	mov    edx,ecx
c002342d:	c1 e0 10             	shl    eax,0x10
c0023430:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023436:	09 d0                	or     eax,edx
c0023438:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002343d:	c1 e2 08             	shl    edx,0x8
c0023440:	09 d0                	or     eax,edx
c0023442:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023447:	c1 e2 0b             	shl    edx,0xb
c002344a:	09 d0                	or     eax,edx
c002344c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023451:	0d 00 00 00 80       	or     eax,0x80000000
c0023456:	ef                   	out    dx,eax
c0023457:	ba fc 0c 00 00       	mov    edx,0xcfc
c002345c:	ed                   	in     eax,dx
c002345d:	83 e1 02             	and    ecx,0x2
c0023460:	0f b6 c9             	movzx  ecx,cl
c0023463:	c1 e1 03             	shl    ecx,0x3
c0023466:	d3 e8                	shr    eax,cl
c0023468:	c3                   	ret    
c0023469:	90                   	nop

c002346a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002346a:	6a 00                	push   0x0
c002346c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023471:	50                   	push   eax
c0023472:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023477:	50                   	push   eax
c0023478:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002347d:	50                   	push   eax
c002347e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023482:	e8 9b ff ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023487:	83 c4 14             	add    esp,0x14
c002348a:	c3                   	ret    
c002348b:	90                   	nop

c002348c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002348c:	6a 0e                	push   0xe
c002348e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023493:	50                   	push   eax
c0023494:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023499:	50                   	push   eax
c002349a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002349f:	50                   	push   eax
c00234a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234a4:	e8 79 ff ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234a9:	83 c4 14             	add    esp,0x14
c00234ac:	0f b6 c0             	movzx  eax,al
c00234af:	c3                   	ret    

c00234b0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00234b0:	55                   	push   ebp
c00234b1:	57                   	push   edi
c00234b2:	56                   	push   esi
c00234b3:	53                   	push   ebx
c00234b4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00234b9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00234be:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00234c3:	6a 0a                	push   0xa
c00234c5:	56                   	push   esi
c00234c6:	55                   	push   ebp
c00234c7:	57                   	push   edi
c00234c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00234cc:	e8 51 ff ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234d1:	6a 0a                	push   0xa
c00234d3:	89 c3                	mov    ebx,eax
c00234d5:	56                   	push   esi
c00234d6:	0f b6 db             	movzx  ebx,bl
c00234d9:	55                   	push   ebp
c00234da:	57                   	push   edi
c00234db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00234df:	e8 3e ff ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234e4:	83 c4 28             	add    esp,0x28
c00234e7:	25 00 ff 00 00       	and    eax,0xff00
c00234ec:	09 d8                	or     eax,ebx
c00234ee:	5b                   	pop    ebx
c00234ef:	5e                   	pop    esi
c00234f0:	5f                   	pop    edi
c00234f1:	5d                   	pop    ebp
c00234f2:	c3                   	ret    
c00234f3:	90                   	nop

c00234f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00234f4:	6a 08                	push   0x8
c00234f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234fb:	50                   	push   eax
c00234fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023501:	50                   	push   eax
c0023502:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023507:	50                   	push   eax
c0023508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002350c:	e8 11 ff ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023511:	83 c4 14             	add    esp,0x14
c0023514:	0f b6 c4             	movzx  eax,ah
c0023517:	c3                   	ret    

c0023518 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023518:	6a 08                	push   0x8
c002351a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002351f:	50                   	push   eax
c0023520:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023525:	50                   	push   eax
c0023526:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002352b:	50                   	push   eax
c002352c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023530:	e8 ed fe ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023535:	83 c4 14             	add    esp,0x14
c0023538:	c3                   	ret    
c0023539:	90                   	nop

c002353a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002353a:	6a 3c                	push   0x3c
c002353c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023541:	50                   	push   eax
c0023542:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023547:	50                   	push   eax
c0023548:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002354d:	50                   	push   eax
c002354e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023552:	e8 cb fe ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023557:	83 c4 14             	add    esp,0x14
c002355a:	c3                   	ret    
c002355b:	90                   	nop

c002355c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002355c:	6a 18                	push   0x18
c002355e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023563:	50                   	push   eax
c0023564:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023569:	50                   	push   eax
c002356a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002356f:	50                   	push   eax
c0023570:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023574:	e8 a9 fe ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023579:	83 c4 14             	add    esp,0x14
c002357c:	0f b6 c4             	movzx  eax,ah
c002357f:	c3                   	ret    

c0023580 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023580:	55                   	push   ebp
c0023581:	57                   	push   edi
c0023582:	56                   	push   esi
c0023583:	53                   	push   ebx
c0023584:	50                   	push   eax
c0023585:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0023589:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002358e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023593:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0023598:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002359f:	8d 43 12             	lea    eax,[ebx+0x12]
c00235a2:	83 c3 10             	add    ebx,0x10
c00235a5:	0f b6 c0             	movzx  eax,al
c00235a8:	0f b6 db             	movzx  ebx,bl
c00235ab:	50                   	push   eax
c00235ac:	51                   	push   ecx
c00235ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00235b1:	57                   	push   edi
c00235b2:	55                   	push   ebp
c00235b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00235b7:	e8 66 fe ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235bc:	53                   	push   ebx
c00235bd:	89 c6                	mov    esi,eax
c00235bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00235c3:	c1 e6 10             	shl    esi,0x10
c00235c6:	51                   	push   ecx
c00235c7:	57                   	push   edi
c00235c8:	55                   	push   ebp
c00235c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00235cd:	e8 50 fe ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235d2:	83 c4 2c             	add    esp,0x2c
c00235d5:	0f b7 c0             	movzx  eax,ax
c00235d8:	5b                   	pop    ebx
c00235d9:	09 f0                	or     eax,esi
c00235db:	5e                   	pop    esi
c00235dc:	5f                   	pop    edi
c00235dd:	5d                   	pop    ebp
c00235de:	c3                   	ret    
c00235df:	90                   	nop

c00235e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00235e0:	53                   	push   ebx
c00235e1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00235e6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00235eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235ef:	c1 e1 10             	shl    ecx,0x10
c00235f2:	25 fc 00 00 00       	and    eax,0xfc
c00235f7:	09 c1                	or     ecx,eax
c00235f9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00235fe:	c1 e0 08             	shl    eax,0x8
c0023601:	09 c1                	or     ecx,eax
c0023603:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023608:	c1 e0 0b             	shl    eax,0xb
c002360b:	09 c1                	or     ecx,eax
c002360d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023613:	89 c8                	mov    eax,ecx
c0023615:	ef                   	out    dx,eax
c0023616:	ba fc 0c 00 00       	mov    edx,0xcfc
c002361b:	ed                   	in     eax,dx
c002361c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023621:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023626:	74 0a                	je     c0023632 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023628:	0f b7 d8             	movzx  ebx,ax
c002362b:	89 d0                	mov    eax,edx
c002362d:	c1 e0 10             	shl    eax,0x10
c0023630:	eb 05                	jmp    c0023637 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0023632:	66 31 c0             	xor    ax,ax
c0023635:	89 d3                	mov    ebx,edx
c0023637:	09 c3                	or     ebx,eax
c0023639:	ba f8 0c 00 00       	mov    edx,0xcf8
c002363e:	89 c8                	mov    eax,ecx
c0023640:	ef                   	out    dx,eax
c0023641:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023646:	89 d8                	mov    eax,ebx
c0023648:	ef                   	out    dx,eax
c0023649:	5b                   	pop    ebx
c002364a:	c3                   	ret    
c002364b:	90                   	nop

c002364c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002364c:	55                   	push   ebp
c002364d:	57                   	push   edi
c002364e:	56                   	push   esi
c002364f:	53                   	push   ebx
c0023650:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0023656:	80 3d 50 37 03 c0 00 	cmp    BYTE PTR ds:0xc0033750,0x0
c002365d:	0f 85 96 00 00 00    	jne    c00236f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c0023663:	83 ec 0c             	sub    esp,0xc
c0023666:	68 14 01 00 00       	push   0x114
c002366b:	e8 1c c2 fe ff       	call   c000f88c <malloc>
c0023670:	83 c4 0c             	add    esp,0xc
c0023673:	89 c3                	mov    ebx,eax
c0023675:	ff 35 50 29 03 c0    	push   DWORD PTR ds:0xc0032950
c002367b:	68 b7 d9 02 c0       	push   0xc002d9b7
c0023680:	50                   	push   eax
c0023681:	e8 c0 fc fe ff       	call   c0013346 <File::File(char const*, Process*)>
c0023686:	5a                   	pop    edx
c0023687:	59                   	pop    ecx
c0023688:	6a 01                	push   0x1
c002368a:	53                   	push   ebx
c002368b:	e8 1a fd fe ff       	call   c00133aa <File::open(FileOpenMode)>
c0023690:	83 c4 0c             	add    esp,0xc
c0023693:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0023697:	50                   	push   eax
c0023698:	8d 44 24 28          	lea    eax,[esp+0x28]
c002369c:	50                   	push   eax
c002369d:	53                   	push   ebx
c002369e:	e8 b3 ff fe ff       	call   c0013656 <File::stat(unsigned long long*, bool*)>
c00236a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00236a7:	40                   	inc    eax
c00236a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00236ab:	e8 dc c1 fe ff       	call   c000f88c <malloc>
c00236b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00236b4:	a3 4c 37 03 c0       	mov    ds:0xc003374c,eax
c00236b9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00236bd:	5e                   	pop    esi
c00236be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00236c0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00236c4:	51                   	push   ecx
c00236c5:	50                   	push   eax
c00236c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00236ca:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00236ce:	53                   	push   ebx
c00236cf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00236d2:	83 c4 14             	add    esp,0x14
c00236d5:	53                   	push   ebx
c00236d6:	e8 2d fd fe ff       	call   c0013408 <File::close()>
c00236db:	5f                   	pop    edi
c00236dc:	5d                   	pop    ebp
c00236dd:	ff 35 4c 37 03 c0    	push   DWORD PTR ds:0xc003374c
c00236e3:	68 d0 d9 02 c0       	push   0xc002d9d0
c00236e8:	e8 fa f6 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00236ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00236f1:	83 c4 10             	add    esp,0x10
c00236f4:	a3 48 37 03 c0       	mov    ds:0xc0033748,eax
c00236f9:	a1 48 37 03 c0       	mov    eax,ds:0xc0033748
c00236fe:	8b 15 4c 37 03 c0    	mov    edx,DWORD PTR ds:0xc003374c
c0023704:	89 04 24             	mov    DWORD PTR [esp],eax
c0023707:	31 ff                	xor    edi,edi
c0023709:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023711:	31 f6                	xor    esi,esi
c0023713:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0023718:	31 db                	xor    ebx,ebx
c002371a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0023722:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0023727:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c002372e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0023732:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0023739:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002373d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023740:	0f 8e 6b 01 00 00    	jle    c00238b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c0023746:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023749:	d4 40                	aam    0x40
c002374b:	d5 39                	aad    0x39
c002374d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0023751:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0023755:	d4 40                	aam    0x40
c0023757:	d5 39                	aad    0x39
c0023759:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002375d:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0023761:	d4 40                	aam    0x40
c0023763:	d5 39                	aad    0x39
c0023765:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0023769:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002376d:	d4 40                	aam    0x40
c002376f:	d5 39                	aad    0x39
c0023771:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023775:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0023779:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002377d:	3c 56                	cmp    al,0x56
c002377f:	74 45                	je     c00237c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c0023781:	d4 40                	aam    0x40
c0023783:	d5 39                	aad    0x39
c0023785:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023788:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002378c:	0f b6 c9             	movzx  ecx,cl
c002378f:	c1 e1 04             	shl    ecx,0x4
c0023792:	d4 40                	aam    0x40
c0023794:	d5 39                	aad    0x39
c0023796:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023799:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c002379d:	0f b6 db             	movzx  ebx,bl
c00237a0:	09 cb                	or     ebx,ecx
c00237a2:	c1 e3 04             	shl    ebx,0x4
c00237a5:	d4 40                	aam    0x40
c00237a7:	d5 39                	aad    0x39
c00237a9:	8d 48 d0             	lea    ecx,[eax-0x30]
c00237ac:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00237b0:	0f b6 c9             	movzx  ecx,cl
c00237b3:	09 cb                	or     ebx,ecx
c00237b5:	c1 e3 04             	shl    ebx,0x4
c00237b8:	89 d9                	mov    ecx,ebx
c00237ba:	d4 40                	aam    0x40
c00237bc:	d5 39                	aad    0x39
c00237be:	8d 58 d0             	lea    ebx,[eax-0x30]
c00237c1:	0f b6 db             	movzx  ebx,bl
c00237c4:	09 cb                	or     ebx,ecx
c00237c6:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00237ca:	80 f9 44             	cmp    cl,0x44
c00237cd:	74 47                	je     c0023816 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c00237cf:	88 c8                	mov    al,cl
c00237d1:	d4 40                	aam    0x40
c00237d3:	d5 39                	aad    0x39
c00237d5:	83 e8 30             	sub    eax,0x30
c00237d8:	0f b6 e8             	movzx  ebp,al
c00237db:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00237df:	c1 e5 04             	shl    ebp,0x4
c00237e2:	d4 40                	aam    0x40
c00237e4:	d5 39                	aad    0x39
c00237e6:	83 e8 30             	sub    eax,0x30
c00237e9:	0f b6 f0             	movzx  esi,al
c00237ec:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00237f0:	09 ee                	or     esi,ebp
c00237f2:	c1 e6 04             	shl    esi,0x4
c00237f5:	d4 40                	aam    0x40
c00237f7:	d5 39                	aad    0x39
c00237f9:	83 e8 30             	sub    eax,0x30
c00237fc:	0f b6 e8             	movzx  ebp,al
c00237ff:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0023803:	09 ee                	or     esi,ebp
c0023805:	c1 e6 04             	shl    esi,0x4
c0023808:	89 f5                	mov    ebp,esi
c002380a:	d4 40                	aam    0x40
c002380c:	d5 39                	aad    0x39
c002380e:	83 e8 30             	sub    eax,0x30
c0023811:	0f b6 f0             	movzx  esi,al
c0023814:	09 ee                	or     esi,ebp
c0023816:	83 c7 10             	add    edi,0x10
c0023819:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c002381d:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023820:	3c 0a                	cmp    al,0xa
c0023822:	74 09                	je     c002382d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c0023824:	45                   	inc    ebp
c0023825:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023828:	75 16                	jne    c0023840 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c002382a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002382d:	3c 0a                	cmp    al,0xa
c002382f:	0f 94 c0             	sete   al
c0023832:	0f b6 c0             	movzx  eax,al
c0023835:	01 c7                	add    edi,eax
c0023837:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002383c:	75 0c                	jne    c002384a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c002383e:	eb 15                	jmp    c0023855 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0023840:	47                   	inc    edi
c0023841:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023844:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023848:	eb d3                	jmp    c002381d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c002384a:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c002384f:	0f 85 e8 fe ff ff    	jne    c002373d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023855:	80 f9 44             	cmp    cl,0x44
c0023858:	74 0b                	je     c0023865 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c002385a:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c002385f:	0f 85 d8 fe ff ff    	jne    c002373d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023865:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0023869:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002386d:	c1 e1 04             	shl    ecx,0x4
c0023870:	83 e8 30             	sub    eax,0x30
c0023873:	09 c8                	or     eax,ecx
c0023875:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0023879:	0f 85 be fe ff ff    	jne    c002373d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c002387f:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0023883:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023887:	c1 e1 04             	shl    ecx,0x4
c002388a:	83 e8 30             	sub    eax,0x30
c002388d:	09 c8                	or     eax,ecx
c002388f:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0023893:	0f 85 a4 fe ff ff    	jne    c002373d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023899:	50                   	push   eax
c002389a:	50                   	push   eax
c002389b:	8d 44 24 28          	lea    eax,[esp+0x28]
c002389f:	50                   	push   eax
c00238a0:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00238a7:	e8 60 cf fd ff       	call   c000080c <strcpy>
c00238ac:	83 c4 10             	add    esp,0x10
c00238af:	eb 15                	jmp    c00238c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c00238b1:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00238b8:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00238c3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00238c6:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00238cd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00238d3:	5b                   	pop    ebx
c00238d4:	5e                   	pop    esi
c00238d5:	5f                   	pop    edi
c00238d6:	5d                   	pop    ebp
c00238d7:	c3                   	ret    

c00238d8 <PCI::checkBus(unsigned char)>:
c00238d8:	56                   	push   esi
c00238d9:	53                   	push   ebx
c00238da:	31 db                	xor    ebx,ebx
c00238dc:	51                   	push   ecx
c00238dd:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00238e2:	52                   	push   edx
c00238e3:	53                   	push   ebx
c00238e4:	43                   	inc    ebx
c00238e5:	56                   	push   esi
c00238e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238ea:	e8 2b 03 00 00       	call   c0023c1a <PCI::checkDevice(unsigned char, unsigned char)>
c00238ef:	83 c4 10             	add    esp,0x10
c00238f2:	83 fb 20             	cmp    ebx,0x20
c00238f5:	75 eb                	jne    c00238e2 <PCI::checkBus(unsigned char)+0xa>
c00238f7:	58                   	pop    eax
c00238f8:	5b                   	pop    ebx
c00238f9:	5e                   	pop    esi
c00238fa:	c3                   	ret    
c00238fb:	90                   	nop

c00238fc <PCI::foundDevice(PCIDeviceInfo)>:
c00238fc:	55                   	push   ebp
c00238fd:	57                   	push   edi
c00238fe:	56                   	push   esi
c00238ff:	53                   	push   ebx
c0023900:	83 ec 1c             	sub    esp,0x1c
c0023903:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023907:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002390d:	0f 84 52 01 00 00    	je     c0023a65 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023913:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023917:	66 81 f9 06 04       	cmp    cx,0x406
c002391c:	75 2c                	jne    c002394a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002391e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023923:	50                   	push   eax
c0023924:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023929:	50                   	push   eax
c002392a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002392f:	50                   	push   eax
c0023930:	56                   	push   esi
c0023931:	e8 26 fc ff ff       	call   c002355c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023936:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002393a:	0f b6 c0             	movzx  eax,al
c002393d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023941:	83 c4 2c             	add    esp,0x2c
c0023944:	5b                   	pop    ebx
c0023945:	5e                   	pop    esi
c0023946:	5f                   	pop    edi
c0023947:	5d                   	pop    ebp
c0023948:	eb 8e                	jmp    c00238d8 <PCI::checkBus(unsigned char)>
c002394a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002394e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023954:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023958:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002395c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023960:	88 d3                	mov    bl,dl
c0023962:	85 c0                	test   eax,eax
c0023964:	74 33                	je     c0023999 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023966:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023969:	85 d2                	test   edx,edx
c002396b:	74 28                	je     c0023995 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002396d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023973:	31 ef                	xor    edi,ebp
c0023975:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002397b:	75 18                	jne    c0023995 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002397d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023981:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023987:	75 0c                	jne    c0023995 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023989:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002398f:	0f 84 d0 00 00 00    	je     c0023a65 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023995:	8b 00                	mov    eax,DWORD PTR [eax]
c0023997:	eb c9                	jmp    c0023962 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023999:	66 81 f9 01 06       	cmp    cx,0x601
c002399e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00239a2:	75 19                	jne    c00239bd <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00239a4:	83 ec 0c             	sub    esp,0xc
c00239a7:	68 64 01 00 00       	push   0x164
c00239ac:	e8 db be fe ff       	call   c000f88c <malloc>
c00239b1:	89 c5                	mov    ebp,eax
c00239b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00239b6:	e8 95 0f 00 00       	call   c0024950 <SATABus::SATABus()>
c00239bb:	eb 1e                	jmp    c00239db <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00239bd:	66 81 f9 01 01       	cmp    cx,0x101
c00239c2:	75 60                	jne    c0023a24 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00239c4:	83 ec 0c             	sub    esp,0xc
c00239c7:	68 70 02 00 00       	push   0x270
c00239cc:	e8 bb be fe ff       	call   c000f88c <malloc>
c00239d1:	89 c5                	mov    ebp,eax
c00239d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00239d6:	e8 03 03 00 00       	call   c0023cde <IDE::IDE()>
c00239db:	58                   	pop    eax
c00239dc:	5a                   	pop    edx
c00239dd:	55                   	push   ebp
c00239de:	56                   	push   esi
c00239df:	e8 3c 08 ff ff       	call   c0014220 <Device::addChild(Device*)>
c00239e4:	83 ec 1c             	sub    esp,0x1c
c00239e7:	b9 09 00 00 00       	mov    ecx,0x9
c00239ec:	fc                   	cld    
c00239ed:	89 e7                	mov    edi,esp
c00239ef:	89 de                	mov    esi,ebx
c00239f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00239f3:	55                   	push   ebp
c00239f4:	e8 39 07 ff ff       	call   c0014132 <Device::preOpenPCI(PCIDeviceInfo)>
c00239f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00239fc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023a00:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023a08:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023a10:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023a18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023a1b:	83 c4 4c             	add    esp,0x4c
c0023a1e:	5b                   	pop    ebx
c0023a1f:	5e                   	pop    esi
c0023a20:	5f                   	pop    edi
c0023a21:	5d                   	pop    ebp
c0023a22:	ff e0                	jmp    eax
c0023a24:	83 ec 0c             	sub    esp,0xc
c0023a27:	68 58 01 00 00       	push   0x158
c0023a2c:	e8 5b be fe ff       	call   c000f88c <malloc>
c0023a31:	89 c5                	mov    ebp,eax
c0023a33:	58                   	pop    eax
c0023a34:	5a                   	pop    edx
c0023a35:	68 e2 d9 02 c0       	push   0xc002d9e2
c0023a3a:	55                   	push   ebp
c0023a3b:	e8 ea 0a ff ff       	call   c001452a <DriverlessDevice::DriverlessDevice(char const*)>
c0023a40:	59                   	pop    ecx
c0023a41:	5f                   	pop    edi
c0023a42:	55                   	push   ebp
c0023a43:	56                   	push   esi
c0023a44:	e8 d7 07 ff ff       	call   c0014220 <Device::addChild(Device*)>
c0023a49:	b9 09 00 00 00       	mov    ecx,0x9
c0023a4e:	fc                   	cld    
c0023a4f:	89 df                	mov    edi,ebx
c0023a51:	89 de                	mov    esi,ebx
c0023a53:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023a55:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023a59:	83 c4 2c             	add    esp,0x2c
c0023a5c:	5b                   	pop    ebx
c0023a5d:	5e                   	pop    esi
c0023a5e:	5f                   	pop    edi
c0023a5f:	5d                   	pop    ebp
c0023a60:	e9 cd 06 ff ff       	jmp    c0014132 <Device::preOpenPCI(PCIDeviceInfo)>
c0023a65:	83 c4 1c             	add    esp,0x1c
c0023a68:	5b                   	pop    ebx
c0023a69:	5e                   	pop    esi
c0023a6a:	5f                   	pop    edi
c0023a6b:	5d                   	pop    ebp
c0023a6c:	c3                   	ret    
c0023a6d:	90                   	nop

c0023a6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023a6e:	55                   	push   ebp
c0023a6f:	57                   	push   edi
c0023a70:	56                   	push   esi
c0023a71:	53                   	push   ebx
c0023a72:	83 ec 5c             	sub    esp,0x5c
c0023a75:	8b 6c 24 70          	mov    ebp,DWORD PTR [esp+0x70]
c0023a79:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023a7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a81:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023a85:	0f b6 74 24 0c       	movzx  esi,BYTE PTR [esp+0xc]
c0023a8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023a8e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0023a92:	0f b6 5c 24 10       	movzx  ebx,BYTE PTR [esp+0x10]
c0023a97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023a9b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023aa0:	6a 0c                	push   0xc
c0023aa2:	57                   	push   edi
c0023aa3:	53                   	push   ebx
c0023aa4:	56                   	push   esi
c0023aa5:	55                   	push   ebp
c0023aa6:	e8 77 f9 ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023aab:	57                   	push   edi
c0023aac:	53                   	push   ebx
c0023aad:	56                   	push   esi
c0023aae:	55                   	push   ebp
c0023aaf:	e8 fc f9 ff ff       	call   c00234b0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023ab4:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c0023ab9:	83 c4 24             	add    esp,0x24
c0023abc:	57                   	push   edi
c0023abd:	53                   	push   ebx
c0023abe:	56                   	push   esi
c0023abf:	55                   	push   ebp
c0023ac0:	e8 75 fa ff ff       	call   c002353a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023ac5:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0023ac9:	6a 3c                	push   0x3c
c0023acb:	57                   	push   edi
c0023acc:	53                   	push   ebx
c0023acd:	56                   	push   esi
c0023ace:	55                   	push   ebp
c0023acf:	e8 4e f9 ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023ad4:	0f b6 c4             	movzx  eax,ah
c0023ad7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023adb:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023adf:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0023ae3:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0023ae8:	83 c4 24             	add    esp,0x24
c0023aeb:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023af1:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023af8:	74 7c                	je     c0023b76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x108>
c0023afa:	31 c0                	xor    eax,eax
c0023afc:	8b 15 e8 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3e8
c0023b02:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023b08:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023b0e:	7e 66                	jle    c0023b76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x108>
c0023b10:	8d 14 c2             	lea    edx,[edx+eax*8]
c0023b13:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023b1a:	39 cb                	cmp    ebx,ecx
c0023b1c:	75 55                	jne    c0023b73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x105>
c0023b1e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023b25:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023b29:	75 48                	jne    c0023b73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x105>
c0023b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023b2f:	83 ec 0c             	sub    esp,0xc
c0023b32:	68 fc d9 02 c0       	push   0xc002d9fc
c0023b37:	e8 ab f2 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0023b3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b40:	8b 15 e8 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3e8
c0023b46:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023b4a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023b50:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023b58:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0023b5c:	52                   	push   edx
c0023b5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b61:	53                   	push   ebx
c0023b62:	68 21 da 02 c0       	push   0xc002da21
c0023b67:	e8 7b f2 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0023b6c:	83 c4 20             	add    esp,0x20
c0023b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023b73:	40                   	inc    eax
c0023b74:	eb 86                	jmp    c0023afc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x8e>
c0023b76:	31 d2                	xor    edx,edx
c0023b78:	83 ec 0c             	sub    esp,0xc
c0023b7b:	57                   	push   edi
c0023b7c:	53                   	push   ebx
c0023b7d:	56                   	push   esi
c0023b7e:	52                   	push   edx
c0023b7f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0023b83:	55                   	push   ebp
c0023b84:	e8 f7 f9 ff ff       	call   c0023580 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023b89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023b8d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023b91:	42                   	inc    edx
c0023b92:	83 c4 20             	add    esp,0x20
c0023b95:	83 fa 06             	cmp    edx,0x6
c0023b98:	75 de                	jne    c0023b78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10a>
c0023b9a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0023b9f:	83 ec 0c             	sub    esp,0xc
c0023ba2:	86 e0                	xchg   al,ah
c0023ba4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023ba9:	6a 02                	push   0x2
c0023bab:	57                   	push   edi
c0023bac:	53                   	push   ebx
c0023bad:	56                   	push   esi
c0023bae:	55                   	push   ebp
c0023baf:	e8 6e f8 ff ff       	call   c0023422 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023bb4:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023bb9:	83 c4 20             	add    esp,0x20
c0023bbc:	57                   	push   edi
c0023bbd:	53                   	push   ebx
c0023bbe:	56                   	push   esi
c0023bbf:	55                   	push   ebp
c0023bc0:	e8 2f f9 ff ff       	call   c00234f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023bc5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023bc9:	57                   	push   edi
c0023bca:	53                   	push   ebx
c0023bcb:	56                   	push   esi
c0023bcc:	55                   	push   ebp
c0023bcd:	e8 98 f8 ff ff       	call   c002346a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023bd2:	b9 09 00 00 00       	mov    ecx,0x9
c0023bd7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023bdc:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0023be0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0023be4:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023be8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023bec:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023bf0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0023bf4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023bf8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023bfc:	83 ec 0c             	sub    esp,0xc
c0023bff:	fc                   	cld    
c0023c00:	89 e7                	mov    edi,esp
c0023c02:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023c06:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023c08:	55                   	push   ebp
c0023c09:	e8 ee fc ff ff       	call   c00238fc <PCI::foundDevice(PCIDeviceInfo)>
c0023c0e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023c14:	5b                   	pop    ebx
c0023c15:	5e                   	pop    esi
c0023c16:	5f                   	pop    edi
c0023c17:	5d                   	pop    ebp
c0023c18:	c3                   	ret    
c0023c19:	90                   	nop

c0023c1a <PCI::checkDevice(unsigned char, unsigned char)>:
c0023c1a:	55                   	push   ebp
c0023c1b:	57                   	push   edi
c0023c1c:	56                   	push   esi
c0023c1d:	53                   	push   ebx
c0023c1e:	83 ec 0c             	sub    esp,0xc
c0023c21:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023c25:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023c2a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023c2f:	6a 00                	push   0x0
c0023c31:	56                   	push   esi
c0023c32:	57                   	push   edi
c0023c33:	55                   	push   ebp
c0023c34:	e8 31 f8 ff ff       	call   c002346a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023c39:	6a 00                	push   0x0
c0023c3b:	56                   	push   esi
c0023c3c:	57                   	push   edi
c0023c3d:	55                   	push   ebp
c0023c3e:	e8 2b fe ff ff       	call   c0023a6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023c43:	83 c4 20             	add    esp,0x20
c0023c46:	6a 00                	push   0x0
c0023c48:	56                   	push   esi
c0023c49:	57                   	push   edi
c0023c4a:	55                   	push   ebp
c0023c4b:	e8 3c f8 ff ff       	call   c002348c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023c50:	83 c4 10             	add    esp,0x10
c0023c53:	84 c0                	test   al,al
c0023c55:	79 27                	jns    c0023c7e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023c57:	bb 01 00 00 00       	mov    ebx,0x1
c0023c5c:	53                   	push   ebx
c0023c5d:	56                   	push   esi
c0023c5e:	57                   	push   edi
c0023c5f:	55                   	push   ebp
c0023c60:	e8 05 f8 ff ff       	call   c002346a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023c65:	83 c4 10             	add    esp,0x10
c0023c68:	66 40                	inc    ax
c0023c6a:	74 0c                	je     c0023c78 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023c6c:	53                   	push   ebx
c0023c6d:	56                   	push   esi
c0023c6e:	57                   	push   edi
c0023c6f:	55                   	push   ebp
c0023c70:	e8 f9 fd ff ff       	call   c0023a6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023c75:	83 c4 10             	add    esp,0x10
c0023c78:	43                   	inc    ebx
c0023c79:	83 fb 08             	cmp    ebx,0x8
c0023c7c:	75 de                	jne    c0023c5c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023c7e:	83 c4 0c             	add    esp,0xc
c0023c81:	5b                   	pop    ebx
c0023c82:	5e                   	pop    esi
c0023c83:	5f                   	pop    edi
c0023c84:	5d                   	pop    ebp
c0023c85:	c3                   	ret    

c0023c86 <PCI::detect()>:
c0023c86:	56                   	push   esi
c0023c87:	53                   	push   ebx
c0023c88:	53                   	push   ebx
c0023c89:	31 db                	xor    ebx,ebx
c0023c8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023c8f:	6a 00                	push   0x0
c0023c91:	6a 00                	push   0x0
c0023c93:	6a 00                	push   0x0
c0023c95:	56                   	push   esi
c0023c96:	e8 f1 f7 ff ff       	call   c002348c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023c9b:	83 c4 10             	add    esp,0x10
c0023c9e:	a8 80                	test   al,0x80
c0023ca0:	75 21                	jne    c0023cc3 <PCI::detect()+0x3d>
c0023ca2:	51                   	push   ecx
c0023ca3:	51                   	push   ecx
c0023ca4:	6a 00                	push   0x0
c0023ca6:	56                   	push   esi
c0023ca7:	e8 2c fc ff ff       	call   c00238d8 <PCI::checkBus(unsigned char)>
c0023cac:	83 c4 10             	add    esp,0x10
c0023caf:	eb 24                	jmp    c0023cd5 <PCI::detect()+0x4f>
c0023cb1:	52                   	push   edx
c0023cb2:	52                   	push   edx
c0023cb3:	53                   	push   ebx
c0023cb4:	43                   	inc    ebx
c0023cb5:	56                   	push   esi
c0023cb6:	e8 1d fc ff ff       	call   c00238d8 <PCI::checkBus(unsigned char)>
c0023cbb:	83 c4 10             	add    esp,0x10
c0023cbe:	83 fb 08             	cmp    ebx,0x8
c0023cc1:	74 12                	je     c0023cd5 <PCI::detect()+0x4f>
c0023cc3:	53                   	push   ebx
c0023cc4:	6a 00                	push   0x0
c0023cc6:	6a 00                	push   0x0
c0023cc8:	56                   	push   esi
c0023cc9:	e8 9c f7 ff ff       	call   c002346a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023cce:	83 c4 10             	add    esp,0x10
c0023cd1:	66 40                	inc    ax
c0023cd3:	74 dc                	je     c0023cb1 <PCI::detect()+0x2b>
c0023cd5:	58                   	pop    eax
c0023cd6:	5b                   	pop    ebx
c0023cd7:	5e                   	pop    esi
c0023cd8:	c3                   	ret    
c0023cd9:	90                   	nop

c0023cda <IDE::close(int, int, void*)>:
c0023cda:	83 c8 ff             	or     eax,0xffffffff
c0023cdd:	c3                   	ret    

c0023cde <IDE::IDE()>:
c0023cde:	83 ec 0c             	sub    esp,0xc
c0023ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ce5:	83 ec 08             	sub    esp,0x8
c0023ce8:	68 68 da 02 c0       	push   0xc002da68
c0023ced:	50                   	push   eax
c0023cee:	e8 db 08 ff ff       	call   c00145ce <HardDiskController::HardDiskController(char const*)>
c0023cf3:	83 c4 10             	add    esp,0x10
c0023cf6:	ba a8 dc 02 c0       	mov    edx,0xc002dca8
c0023cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cff:	89 10                	mov    DWORD PTR [eax],edx
c0023d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d05:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023d0c:	90                   	nop
c0023d0d:	83 c4 0c             	add    esp,0xc
c0023d10:	c3                   	ret    
c0023d11:	90                   	nop

c0023d12 <IDE::prepareInterrupt(unsigned char)>:
c0023d12:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023d17:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023d1b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023d23:	c3                   	ret    

c0023d24 <selectDrive(unsigned char, unsigned char)>:
c0023d24:	c3                   	ret    
c0023d25:	90                   	nop

c0023d26 <IDE::getBase(unsigned char)>:
c0023d26:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023d2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023d2f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023d37:	c3                   	ret    

c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023d38:	55                   	push   ebp
c0023d39:	57                   	push   edi
c0023d3a:	56                   	push   esi
c0023d3b:	53                   	push   ebx
c0023d3c:	83 ec 1c             	sub    esp,0x1c
c0023d3f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023d43:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023d47:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023d4a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023d4e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023d52:	80 f9 03             	cmp    cl,0x3
c0023d55:	77 51                	ja     c0023da8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023d57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d5b:	0f b6 f2             	movzx  esi,dl
c0023d5e:	0f b6 db             	movzx  ebx,bl
c0023d61:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023d64:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023d68:	83 ca 80             	or     edx,0xffffff80
c0023d6b:	0f b6 d2             	movzx  edx,dl
c0023d6e:	52                   	push   edx
c0023d6f:	6a 0c                	push   0xc
c0023d71:	56                   	push   esi
c0023d72:	57                   	push   edi
c0023d73:	e8 c0 ff ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d78:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023d7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023d81:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023d85:	ee                   	out    dx,al
c0023d86:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023d8b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023d8f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023d93:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023d97:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023d9f:	83 c4 2c             	add    esp,0x2c
c0023da2:	5b                   	pop    ebx
c0023da3:	5e                   	pop    esi
c0023da4:	5f                   	pop    edi
c0023da5:	5d                   	pop    ebp
c0023da6:	eb 90                	jmp    c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023da8:	80 fb 07             	cmp    bl,0x7
c0023dab:	77 12                	ja     c0023dbf <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023dad:	0f b6 d2             	movzx  edx,dl
c0023db0:	0f b6 db             	movzx  ebx,bl
c0023db3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023dbb:	89 da                	mov    edx,ebx
c0023dbd:	eb 2f                	jmp    c0023dee <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023dbf:	80 fb 0d             	cmp    bl,0xd
c0023dc2:	77 13                	ja     c0023dd7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023dc4:	0f b6 d2             	movzx  edx,dl
c0023dc7:	0f b6 db             	movzx  ebx,bl
c0023dca:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023dd1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023dd5:	eb 17                	jmp    c0023dee <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023dd7:	80 fb 15             	cmp    bl,0x15
c0023dda:	77 13                	ja     c0023def <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023ddc:	0f b6 d2             	movzx  edx,dl
c0023ddf:	0f b6 db             	movzx  ebx,bl
c0023de2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023dea:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023dee:	ee                   	out    dx,al
c0023def:	83 c4 1c             	add    esp,0x1c
c0023df2:	5b                   	pop    ebx
c0023df3:	5e                   	pop    esi
c0023df4:	5f                   	pop    edi
c0023df5:	5d                   	pop    ebp
c0023df6:	c3                   	ret    
c0023df7:	90                   	nop

c0023df8 <IDE::read(unsigned char, unsigned char)>:
c0023df8:	55                   	push   ebp
c0023df9:	57                   	push   edi
c0023dfa:	56                   	push   esi
c0023dfb:	53                   	push   ebx
c0023dfc:	83 ec 1c             	sub    esp,0x1c
c0023dff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023e03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023e07:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023e0a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023e0e:	3c 03                	cmp    al,0x3
c0023e10:	77 43                	ja     c0023e55 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023e12:	0f b6 f2             	movzx  esi,dl
c0023e15:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023e18:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023e1c:	83 c8 80             	or     eax,0xffffff80
c0023e1f:	0f b6 c0             	movzx  eax,al
c0023e22:	50                   	push   eax
c0023e23:	6a 0c                	push   0xc
c0023e25:	56                   	push   esi
c0023e26:	57                   	push   edi
c0023e27:	e8 0c ff ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e2c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023e31:	0f b6 c3             	movzx  eax,bl
c0023e34:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023e38:	ec                   	in     al,dx
c0023e39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023e3d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023e42:	52                   	push   edx
c0023e43:	6a 0c                	push   0xc
c0023e45:	56                   	push   esi
c0023e46:	57                   	push   edi
c0023e47:	e8 ec fe ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e4c:	83 c4 20             	add    esp,0x20
c0023e4f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023e53:	eb 49                	jmp    c0023e9e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023e55:	80 fb 07             	cmp    bl,0x7
c0023e58:	77 12                	ja     c0023e6c <IDE::read(unsigned char, unsigned char)+0x74>
c0023e5a:	0f b6 d2             	movzx  edx,dl
c0023e5d:	0f b6 c3             	movzx  eax,bl
c0023e60:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023e68:	89 c2                	mov    edx,eax
c0023e6a:	eb 31                	jmp    c0023e9d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023e6c:	80 fb 0d             	cmp    bl,0xd
c0023e6f:	77 13                	ja     c0023e84 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023e71:	0f b6 d2             	movzx  edx,dl
c0023e74:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023e7b:	0f b6 d3             	movzx  edx,bl
c0023e7e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023e82:	eb 19                	jmp    c0023e9d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023e84:	31 c0                	xor    eax,eax
c0023e86:	80 fb 15             	cmp    bl,0x15
c0023e89:	77 13                	ja     c0023e9e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023e8b:	0f b6 d2             	movzx  edx,dl
c0023e8e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023e96:	0f b6 d3             	movzx  edx,bl
c0023e99:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023e9d:	ec                   	in     al,dx
c0023e9e:	83 c4 1c             	add    esp,0x1c
c0023ea1:	5b                   	pop    ebx
c0023ea2:	5e                   	pop    esi
c0023ea3:	5f                   	pop    edi
c0023ea4:	5d                   	pop    ebp
c0023ea5:	c3                   	ret    

c0023ea6 <IDE::waitInterrupt(unsigned char)>:
c0023ea6:	55                   	push   ebp
c0023ea7:	57                   	push   edi
c0023ea8:	56                   	push   esi
c0023ea9:	53                   	push   ebx
c0023eaa:	31 db                	xor    ebx,ebx
c0023eac:	83 ec 0c             	sub    esp,0xc
c0023eaf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023eb3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023eb8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023ec0:	89 e8                	mov    eax,ebp
c0023ec2:	84 c0                	test   al,al
c0023ec4:	75 34                	jne    c0023efa <IDE::waitInterrupt(unsigned char)+0x54>
c0023ec6:	52                   	push   edx
c0023ec7:	6a 0c                	push   0xc
c0023ec9:	56                   	push   esi
c0023eca:	57                   	push   edi
c0023ecb:	e8 28 ff ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0023ed0:	83 c4 10             	add    esp,0x10
c0023ed3:	a8 01                	test   al,0x1
c0023ed5:	75 2b                	jne    c0023f02 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023ed7:	f6 c3 04             	test   bl,0x4
c0023eda:	75 16                	jne    c0023ef2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023edc:	83 fb 32             	cmp    ebx,0x32
c0023edf:	7e 11                	jle    c0023ef2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023ee1:	50                   	push   eax
c0023ee2:	50                   	push   eax
c0023ee3:	6a 00                	push   0x0
c0023ee5:	68 80 96 98 00       	push   0x989680
c0023eea:	e8 f6 aa ff ff       	call   c001e9e5 <nanoSleep(unsigned long long)>
c0023eef:	83 c4 10             	add    esp,0x10
c0023ef2:	83 fb 3c             	cmp    ebx,0x3c
c0023ef5:	74 0b                	je     c0023f02 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023ef7:	43                   	inc    ebx
c0023ef8:	eb be                	jmp    c0023eb8 <IDE::waitInterrupt(unsigned char)+0x12>
c0023efa:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023f02:	83 c4 0c             	add    esp,0xc
c0023f05:	89 e8                	mov    eax,ebp
c0023f07:	5b                   	pop    ebx
c0023f08:	5e                   	pop    esi
c0023f09:	5f                   	pop    edi
c0023f0a:	5d                   	pop    ebp
c0023f0b:	c3                   	ret    

c0023f0c <ideChannel0IRQHandler(regs*, void*)>:
c0023f0c:	83 ec 10             	sub    esp,0x10
c0023f0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f13:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023f1a:	6a 07                	push   0x7
c0023f1c:	6a 00                	push   0x0
c0023f1e:	50                   	push   eax
c0023f1f:	e8 d4 fe ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0023f24:	83 c4 1c             	add    esp,0x1c
c0023f27:	c3                   	ret    

c0023f28 <ideChannel1IRQHandler(regs*, void*)>:
c0023f28:	83 ec 10             	sub    esp,0x10
c0023f2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f2f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023f36:	6a 07                	push   0x7
c0023f38:	6a 01                	push   0x1
c0023f3a:	50                   	push   eax
c0023f3b:	e8 b8 fe ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0023f40:	83 c4 1c             	add    esp,0x1c
c0023f43:	c3                   	ret    

c0023f44 <IDE::enableIRQs(unsigned char, bool)>:
c0023f44:	57                   	push   edi
c0023f45:	56                   	push   esi
c0023f46:	be 04 00 00 00       	mov    esi,0x4
c0023f4b:	53                   	push   ebx
c0023f4c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023f51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f55:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023f5a:	0f 94 c0             	sete   al
c0023f5d:	d1 e0                	shl    eax,1
c0023f5f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023f66:	0f b6 c0             	movzx  eax,al
c0023f69:	50                   	push   eax
c0023f6a:	6a 0c                	push   0xc
c0023f6c:	57                   	push   edi
c0023f6d:	53                   	push   ebx
c0023f6e:	e8 c5 fd ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f73:	83 c4 10             	add    esp,0x10
c0023f76:	50                   	push   eax
c0023f77:	6a 0c                	push   0xc
c0023f79:	57                   	push   edi
c0023f7a:	53                   	push   ebx
c0023f7b:	e8 78 fe ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0023f80:	83 c4 10             	add    esp,0x10
c0023f83:	4e                   	dec    esi
c0023f84:	75 f0                	jne    c0023f76 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023f86:	5b                   	pop    ebx
c0023f87:	5e                   	pop    esi
c0023f88:	5f                   	pop    edi
c0023f89:	c3                   	ret    

c0023f8a <IDE::open(int, int, void*)>:
c0023f8a:	55                   	push   ebp
c0023f8b:	57                   	push   edi
c0023f8c:	56                   	push   esi
c0023f8d:	53                   	push   ebx
c0023f8e:	83 ec 1c             	sub    esp,0x1c
c0023f91:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023f95:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023f9e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023fa7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023fae:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023fb5:	0f 85 b0 02 00 00    	jne    c002426b <IDE::open(int, int, void*)+0x2e1>
c0023fbb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023fc1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023fc5:	83 e0 7f             	and    eax,0x7f
c0023fc8:	3c 05                	cmp    al,0x5
c0023fca:	74 04                	je     c0023fd0 <IDE::open(int, int, void*)+0x46>
c0023fcc:	3c 0f                	cmp    al,0xf
c0023fce:	75 32                	jne    c0024002 <IDE::open(int, int, void*)+0x78>
c0023fd0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023fd6:	83 e0 fc             	and    eax,0xfffffffc
c0023fd9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023fe0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023fe6:	83 e0 fc             	and    eax,0xfffffffc
c0023fe9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023ff0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023ff6:	83 e0 fc             	and    eax,0xfffffffc
c0023ff9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0024000:	eb 14                	jmp    c0024016 <IDE::open(int, int, void*)+0x8c>
c0024002:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002400c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0024016:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002401d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0024024:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024028:	89 c6                	mov    esi,eax
c002402a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002402f:	c1 e6 10             	shl    esi,0x10
c0024032:	89 e8                	mov    eax,ebp
c0024034:	89 fa                	mov    edx,edi
c0024036:	c1 e0 0b             	shl    eax,0xb
c0024039:	09 f0                	or     eax,esi
c002403b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0024042:	c1 e6 08             	shl    esi,0x8
c0024045:	09 c6                	or     esi,eax
c0024047:	89 f0                	mov    eax,esi
c0024049:	0d 08 00 00 80       	or     eax,0x80000008
c002404e:	ef                   	out    dx,eax
c002404f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0024054:	89 ca                	mov    edx,ecx
c0024056:	ed                   	in     eax,dx
c0024057:	c1 e8 10             	shr    eax,0x10
c002405a:	3d ff ff 00 00       	cmp    eax,0xffff
c002405f:	0f 84 f5 00 00 00    	je     c002415a <IDE::open(int, int, void*)+0x1d0>
c0024065:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002406b:	89 fa                	mov    edx,edi
c002406d:	89 f0                	mov    eax,esi
c002406f:	ef                   	out    dx,eax
c0024070:	b0 fe                	mov    al,0xfe
c0024072:	89 ca                	mov    edx,ecx
c0024074:	ee                   	out    dx,al
c0024075:	89 f0                	mov    eax,esi
c0024077:	89 fa                	mov    edx,edi
c0024079:	ef                   	out    dx,eax
c002407a:	89 ca                	mov    edx,ecx
c002407c:	ed                   	in     eax,dx
c002407d:	3c fe                	cmp    al,0xfe
c002407f:	0f 85 a9 00 00 00    	jne    c002412e <IDE::open(int, int, void*)+0x1a4>
c0024085:	8b 15 e8 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3e8
c002408b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0024092:	74 33                	je     c00240c7 <IDE::open(int, int, void*)+0x13d>
c0024094:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002409a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002409e:	40                   	inc    eax
c002409f:	83 ec 0c             	sub    esp,0xc
c00240a2:	0f b6 c0             	movzx  eax,al
c00240a5:	50                   	push   eax
c00240a6:	55                   	push   ebp
c00240a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00240ab:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00240b1:	51                   	push   ecx
c00240b2:	e8 2f 42 ff ff       	call   c00182e6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00240b7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00240bc:	83 c4 1c             	add    esp,0x1c
c00240bf:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00240c5:	eb 0a                	jmp    c00240d1 <IDE::open(int, int, void*)+0x147>
c00240c7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00240d1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00240d8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00240df:	c1 e1 10             	shl    ecx,0x10
c00240e2:	c1 e0 08             	shl    eax,0x8
c00240e5:	bf f8 0c 00 00       	mov    edi,0xcf8
c00240ea:	09 c1                	or     ecx,eax
c00240ec:	89 fa                	mov    edx,edi
c00240ee:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00240f5:	c1 e0 0b             	shl    eax,0xb
c00240f8:	09 c1                	or     ecx,eax
c00240fa:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0024100:	89 c8                	mov    eax,ecx
c0024102:	ef                   	out    dx,eax
c0024103:	be fc 0c 00 00       	mov    esi,0xcfc
c0024108:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002410e:	89 f2                	mov    edx,esi
c0024110:	ee                   	out    dx,al
c0024111:	89 c8                	mov    eax,ecx
c0024113:	89 fa                	mov    edx,edi
c0024115:	ef                   	out    dx,eax
c0024116:	89 f2                	mov    edx,esi
c0024118:	ed                   	in     eax,dx
c0024119:	0f b6 c0             	movzx  eax,al
c002411c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0024122:	74 46                	je     c002416a <IDE::open(int, int, void*)+0x1e0>
c0024124:	83 ec 0c             	sub    esp,0xc
c0024127:	68 80 da 02 c0       	push   0xc002da80
c002412c:	eb 34                	jmp    c0024162 <IDE::open(int, int, void*)+0x1d8>
c002412e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0024137:	75 17                	jne    c0024150 <IDE::open(int, int, void*)+0x1c6>
c0024139:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002413e:	74 07                	je     c0024147 <IDE::open(int, int, void*)+0x1bd>
c0024140:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0024145:	75 09                	jne    c0024150 <IDE::open(int, int, void*)+0x1c6>
c0024147:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002414e:	eb 1a                	jmp    c002416a <IDE::open(int, int, void*)+0x1e0>
c0024150:	83 ec 0c             	sub    esp,0xc
c0024153:	68 88 da 02 c0       	push   0xc002da88
c0024158:	eb 08                	jmp    c0024162 <IDE::open(int, int, void*)+0x1d8>
c002415a:	83 ec 0c             	sub    esp,0xc
c002415d:	68 b9 da 02 c0       	push   0xc002dab9
c0024162:	e8 c8 67 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0024167:	83 c4 10             	add    esp,0x10
c002416a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0024171:	79 1a                	jns    c002418d <IDE::open(int, int, void*)+0x203>
c0024173:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0024179:	83 e0 fc             	and    eax,0xfffffffc
c002417c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0024183:	83 c0 08             	add    eax,0x8
c0024186:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002418d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0024193:	89 c2                	mov    edx,eax
c0024195:	83 e2 0f             	and    edx,0xf
c0024198:	66 83 fa 08          	cmp    dx,0x8
c002419c:	75 0a                	jne    c00241a8 <IDE::open(int, int, void*)+0x21e>
c002419e:	83 e8 02             	sub    eax,0x2
c00241a1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00241a8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00241ae:	89 c2                	mov    edx,eax
c00241b0:	83 e2 0f             	and    edx,0xf
c00241b3:	66 83 fa 08          	cmp    dx,0x8
c00241b7:	75 0a                	jne    c00241c3 <IDE::open(int, int, void*)+0x239>
c00241b9:	83 e8 02             	sub    eax,0x2
c00241bc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00241c3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00241ca:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00241d1:	89 d0                	mov    eax,edx
c00241d3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00241d6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00241da:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00241de:	8d 4a 01             	lea    ecx,[edx+0x1]
c00241e1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00241e6:	0f b6 c9             	movzx  ecx,cl
c00241e9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00241f0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00241f3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00241f7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00241fb:	8d 50 02             	lea    edx,[eax+0x2]
c00241fe:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0024203:	0f b6 d2             	movzx  edx,dl
c0024206:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002420c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002420f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0024213:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0024217:	8d 48 03             	lea    ecx,[eax+0x3]
c002421a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002421f:	0f b6 c9             	movzx  ecx,cl
c0024222:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0024228:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002422b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002422f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0024233:	8d 50 04             	lea    edx,[eax+0x4]
c0024236:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002423c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0024241:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0024248:	66 85 f6             	test   si,si
c002424b:	74 3e                	je     c002428b <IDE::open(int, int, void*)+0x301>
c002424d:	0f b6 d2             	movzx  edx,dl
c0024250:	83 c0 05             	add    eax,0x5
c0024253:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0024256:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002425a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002425e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0024264:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0024269:	eb 20                	jmp    c002428b <IDE::open(int, int, void*)+0x301>
c002426b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0024275:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002427f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0024286:	e9 02 ff ff ff       	jmp    c002418d <IDE::open(int, int, void*)+0x203>
c002428b:	52                   	push   edx
c002428c:	52                   	push   edx
c002428d:	6a 00                	push   0x0
c002428f:	53                   	push   ebx
c0024290:	e8 7d fa ff ff       	call   c0023d12 <IDE::prepareInterrupt(unsigned char)>
c0024295:	59                   	pop    ecx
c0024296:	5e                   	pop    esi
c0024297:	6a 01                	push   0x1
c0024299:	53                   	push   ebx
c002429a:	e8 73 fa ff ff       	call   c0023d12 <IDE::prepareInterrupt(unsigned char)>
c002429f:	83 c4 0c             	add    esp,0xc
c00242a2:	6a 00                	push   0x0
c00242a4:	6a 00                	push   0x0
c00242a6:	53                   	push   ebx
c00242a7:	e8 98 fc ff ff       	call   c0023f44 <IDE::enableIRQs(unsigned char, bool)>
c00242ac:	83 c4 0c             	add    esp,0xc
c00242af:	6a 00                	push   0x0
c00242b1:	6a 01                	push   0x1
c00242b3:	53                   	push   ebx
c00242b4:	e8 8b fc ff ff       	call   c0023f44 <IDE::enableIRQs(unsigned char, bool)>
c00242b9:	83 c4 10             	add    esp,0x10
c00242bc:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00242c3:	74 40                	je     c0024305 <IDE::open(int, int, void*)+0x37b>
c00242c5:	83 ec 0c             	sub    esp,0xc
c00242c8:	68 e3 da 02 c0       	push   0xc002dae3
c00242cd:	e8 15 eb fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00242d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00242d5:	6a 01                	push   0x1
c00242d7:	68 0c 3f 02 c0       	push   0xc0023f0c
c00242dc:	6a 0e                	push   0xe
c00242de:	53                   	push   ebx
c00242df:	e8 b4 fe fe ff       	call   c0014198 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00242e4:	83 c4 14             	add    esp,0x14
c00242e7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00242ed:	53                   	push   ebx
c00242ee:	6a 01                	push   0x1
c00242f0:	68 28 3f 02 c0       	push   0xc0023f28
c00242f5:	6a 0f                	push   0xf
c00242f7:	53                   	push   ebx
c00242f8:	e8 9b fe fe ff       	call   c0014198 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00242fd:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0024303:	eb 4a                	jmp    c002434f <IDE::open(int, int, void*)+0x3c5>
c0024305:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002430f:	50                   	push   eax
c0024310:	6a 0f                	push   0xf
c0024312:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024318:	68 ff da 02 c0       	push   0xc002daff
c002431d:	e8 c5 ea fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024322:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024325:	6a 00                	push   0x0
c0024327:	68 0c 3f 02 c0       	push   0xc0023f0c
c002432c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024332:	53                   	push   ebx
c0024333:	e8 60 fe fe ff       	call   c0014198 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024338:	83 c4 14             	add    esp,0x14
c002433b:	53                   	push   ebx
c002433c:	6a 00                	push   0x0
c002433e:	68 28 3f 02 c0       	push   0xc0023f28
c0024343:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0024349:	53                   	push   ebx
c002434a:	e8 49 fe fe ff       	call   c0014198 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002434f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024351:	83 c4 20             	add    esp,0x20
c0024354:	83 ec 0c             	sub    esp,0xc
c0024357:	53                   	push   ebx
c0024358:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002435b:	83 c4 0c             	add    esp,0xc
c002435e:	6a 07                	push   0x7
c0024360:	6a 00                	push   0x0
c0024362:	53                   	push   ebx
c0024363:	e8 90 fa ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0024368:	83 c4 0c             	add    esp,0xc
c002436b:	6a 07                	push   0x7
c002436d:	6a 01                	push   0x1
c002436f:	53                   	push   ebx
c0024370:	e8 83 fa ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0024375:	83 c4 0c             	add    esp,0xc
c0024378:	6a 01                	push   0x1
c002437a:	6a 00                	push   0x0
c002437c:	53                   	push   ebx
c002437d:	e8 c2 fb ff ff       	call   c0023f44 <IDE::enableIRQs(unsigned char, bool)>
c0024382:	83 c4 0c             	add    esp,0xc
c0024385:	6a 01                	push   0x1
c0024387:	6a 01                	push   0x1
c0024389:	53                   	push   ebx
c002438a:	e8 b5 fb ff ff       	call   c0023f44 <IDE::enableIRQs(unsigned char, bool)>
c002438f:	83 c4 2c             	add    esp,0x2c
c0024392:	31 c0                	xor    eax,eax
c0024394:	5b                   	pop    ebx
c0024395:	5e                   	pop    esi
c0024396:	5f                   	pop    edi
c0024397:	5d                   	pop    ebp
c0024398:	c3                   	ret    
c0024399:	90                   	nop

c002439a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002439a:	55                   	push   ebp
c002439b:	57                   	push   edi
c002439c:	56                   	push   esi
c002439d:	53                   	push   ebx
c002439e:	83 ec 1c             	sub    esp,0x1c
c00243a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00243a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00243a9:	8d 50 f8             	lea    edx,[eax-0x8]
c00243ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00243b0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00243b4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00243b8:	80 fa 03             	cmp    dl,0x3
c00243bb:	77 5d                	ja     c002441a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00243bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00243c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00243c5:	0f b6 db             	movzx  ebx,bl
c00243c8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00243cb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00243cf:	83 ca 80             	or     edx,0xffffff80
c00243d2:	0f b6 d2             	movzx  edx,dl
c00243d5:	52                   	push   edx
c00243d6:	6a 0c                	push   0xc
c00243d8:	53                   	push   ebx
c00243d9:	56                   	push   esi
c00243da:	e8 59 f9 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243df:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00243e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00243ec:	0f b6 c0             	movzx  eax,al
c00243ef:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00243f3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00243f5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00243fa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00243fe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0024402:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0024406:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002440e:	83 c4 2c             	add    esp,0x2c
c0024411:	5b                   	pop    ebx
c0024412:	5e                   	pop    esi
c0024413:	5f                   	pop    edi
c0024414:	5d                   	pop    ebp
c0024415:	e9 1e f9 ff ff       	jmp    c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002441a:	3c 07                	cmp    al,0x7
c002441c:	77 10                	ja     c002442e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002441e:	0f b6 db             	movzx  ebx,bl
c0024421:	0f b6 d0             	movzx  edx,al
c0024424:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002442c:	eb 2d                	jmp    c002445b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002442e:	3c 0d                	cmp    al,0xd
c0024430:	77 13                	ja     c0024445 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0024432:	0f b6 db             	movzx  ebx,bl
c0024435:	0f b6 c0             	movzx  eax,al
c0024438:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002443f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0024443:	eb 16                	jmp    c002445b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024445:	3c 15                	cmp    al,0x15
c0024447:	77 14                	ja     c002445d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0024449:	0f b6 db             	movzx  ebx,bl
c002444c:	0f b6 c0             	movzx  eax,al
c002444f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0024457:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002445b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002445d:	83 c4 1c             	add    esp,0x1c
c0024460:	5b                   	pop    ebx
c0024461:	5e                   	pop    esi
c0024462:	5f                   	pop    edi
c0024463:	5d                   	pop    ebp
c0024464:	c3                   	ret    
c0024465:	90                   	nop

c0024466 <IDE::detect()>:
c0024466:	55                   	push   ebp
c0024467:	57                   	push   edi
c0024468:	56                   	push   esi
c0024469:	53                   	push   ebx
c002446a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0024470:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0024477:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002447e:	0f 85 be 02 00 00    	jne    c0024742 <IDE::detect()+0x2dc>
c0024484:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002448b:	31 f6                	xor    esi,esi
c002448d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024495:	31 ed                	xor    ebp,ebp
c0024497:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002449b:	c1 e0 06             	shl    eax,0x6
c002449e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00244a6:	89 e8                	mov    eax,ebp
c00244a8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00244ac:	c1 e0 04             	shl    eax,0x4
c00244af:	83 c8 a0             	or     eax,0xffffffa0
c00244b2:	0f b6 c0             	movzx  eax,al
c00244b5:	50                   	push   eax
c00244b6:	6a 06                	push   0x6
c00244b8:	56                   	push   esi
c00244b9:	53                   	push   ebx
c00244ba:	e8 79 f8 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244bf:	83 c4 0c             	add    esp,0xc
c00244c2:	6a 0c                	push   0xc
c00244c4:	56                   	push   esi
c00244c5:	53                   	push   ebx
c00244c6:	e8 2d f9 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c00244cb:	83 c4 0c             	add    esp,0xc
c00244ce:	6a 0c                	push   0xc
c00244d0:	56                   	push   esi
c00244d1:	53                   	push   ebx
c00244d2:	e8 21 f9 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c00244d7:	83 c4 0c             	add    esp,0xc
c00244da:	6a 0c                	push   0xc
c00244dc:	56                   	push   esi
c00244dd:	53                   	push   ebx
c00244de:	e8 15 f9 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c00244e3:	83 c4 0c             	add    esp,0xc
c00244e6:	6a 0c                	push   0xc
c00244e8:	56                   	push   esi
c00244e9:	53                   	push   ebx
c00244ea:	e8 09 f9 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c00244ef:	68 ec 00 00 00       	push   0xec
c00244f4:	6a 07                	push   0x7
c00244f6:	56                   	push   esi
c00244f7:	53                   	push   ebx
c00244f8:	e8 3b f8 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244fd:	83 c4 1c             	add    esp,0x1c
c0024500:	6a 0c                	push   0xc
c0024502:	56                   	push   esi
c0024503:	53                   	push   ebx
c0024504:	e8 ef f8 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0024509:	83 c4 0c             	add    esp,0xc
c002450c:	6a 0c                	push   0xc
c002450e:	56                   	push   esi
c002450f:	53                   	push   ebx
c0024510:	e8 e3 f8 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0024515:	83 c4 0c             	add    esp,0xc
c0024518:	6a 0c                	push   0xc
c002451a:	56                   	push   esi
c002451b:	53                   	push   ebx
c002451c:	e8 d7 f8 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0024521:	83 c4 0c             	add    esp,0xc
c0024524:	6a 0c                	push   0xc
c0024526:	56                   	push   esi
c0024527:	53                   	push   ebx
c0024528:	e8 cb f8 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c002452d:	83 c4 0c             	add    esp,0xc
c0024530:	6a 0c                	push   0xc
c0024532:	56                   	push   esi
c0024533:	53                   	push   ebx
c0024534:	e8 bf f8 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0024539:	83 c4 10             	add    esp,0x10
c002453c:	84 c0                	test   al,al
c002453e:	0f 84 8b 01 00 00    	je     c00246cf <IDE::detect()+0x269>
c0024544:	31 ff                	xor    edi,edi
c0024546:	50                   	push   eax
c0024547:	6a 0c                	push   0xc
c0024549:	56                   	push   esi
c002454a:	53                   	push   ebx
c002454b:	e8 a8 f8 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0024550:	83 c4 10             	add    esp,0x10
c0024553:	a8 01                	test   al,0x1
c0024555:	0f 85 8e 01 00 00    	jne    c00246e9 <IDE::detect()+0x283>
c002455b:	84 c0                	test   al,al
c002455d:	78 04                	js     c0024563 <IDE::detect()+0xfd>
c002455f:	a8 08                	test   al,0x8
c0024561:	75 27                	jne    c002458a <IDE::detect()+0x124>
c0024563:	47                   	inc    edi
c0024564:	81 ff 17 01 00 00    	cmp    edi,0x117
c002456a:	7e da                	jle    c0024546 <IDE::detect()+0xe0>
c002456c:	50                   	push   eax
c002456d:	50                   	push   eax
c002456e:	6a 00                	push   0x0
c0024570:	68 40 4b 4c 00       	push   0x4c4b40
c0024575:	e8 6b a4 ff ff       	call   c001e9e5 <nanoSleep(unsigned long long)>
c002457a:	83 c4 10             	add    esp,0x10
c002457d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0024583:	75 c1                	jne    c0024546 <IDE::detect()+0xe0>
c0024585:	e9 5f 01 00 00       	jmp    c00246e9 <IDE::detect()+0x283>
c002458a:	31 c9                	xor    ecx,ecx
c002458c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0024590:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024594:	83 ec 0c             	sub    esp,0xc
c0024597:	68 80 00 00 00       	push   0x80
c002459c:	57                   	push   edi
c002459d:	6a 00                	push   0x0
c002459f:	56                   	push   esi
c00245a0:	53                   	push   ebx
c00245a1:	e8 f4 fd ff ff       	call   c002439a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00245a6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00245ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00245af:	89 d1                	mov    ecx,edx
c00245b1:	c1 e0 06             	shl    eax,0x6
c00245b4:	01 d8                	add    eax,ebx
c00245b6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00245bd:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00245c4:	89 f2                	mov    edx,esi
c00245c6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00245cc:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00245d0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00245d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00245da:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00245e1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00245e9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00245f0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00245f8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00245fe:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024605:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002460b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002460f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024613:	83 c4 20             	add    esp,0x20
c0024616:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024619:	83 c0 02             	add    eax,0x2
c002461c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024622:	83 c7 02             	add    edi,0x2
c0024625:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024628:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002462e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024632:	75 e2                	jne    c0024616 <IDE::detect()+0x1b0>
c0024634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024638:	c1 e0 06             	shl    eax,0x6
c002463b:	01 d8                	add    eax,ebx
c002463d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024643:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002464a:	66 c1 ea 09          	shr    dx,0x9
c002464e:	83 e2 01             	and    edx,0x1
c0024651:	84 c9                	test   cl,cl
c0024653:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024659:	75 2f                	jne    c002468a <IDE::detect()+0x224>
c002465b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0024661:	85 c0                	test   eax,eax
c0024663:	74 66                	je     c00246cb <IDE::detect()+0x265>
c0024665:	50                   	push   eax
c0024666:	55                   	push   ebp
c0024667:	56                   	push   esi
c0024668:	68 1b db 02 c0       	push   0xc002db1b
c002466d:	e8 75 e7 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024672:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024679:	e8 0e b2 fe ff       	call   c000f88c <malloc>
c002467e:	89 c7                	mov    edi,eax
c0024680:	89 04 24             	mov    DWORD PTR [esp],eax
c0024683:	e8 78 06 00 00       	call   c0024d00 <ATA::ATA()>
c0024688:	eb 28                	jmp    c00246b2 <IDE::detect()+0x24c>
c002468a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0024690:	55                   	push   ebp
c0024691:	56                   	push   esi
c0024692:	68 4a db 02 c0       	push   0xc002db4a
c0024697:	e8 4b e7 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c002469c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00246a3:	e8 e4 b1 fe ff       	call   c000f88c <malloc>
c00246a8:	89 c7                	mov    edi,eax
c00246aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00246ad:	e8 8e 0c 00 00       	call   c0025340 <ATAPI::ATAPI()>
c00246b2:	5a                   	pop    edx
c00246b3:	59                   	pop    ecx
c00246b4:	57                   	push   edi
c00246b5:	53                   	push   ebx
c00246b6:	e8 65 fb fe ff       	call   c0014220 <Device::addChild(Device*)>
c00246bb:	8b 07                	mov    eax,DWORD PTR [edi]
c00246bd:	53                   	push   ebx
c00246be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00246c2:	6a 00                	push   0x0
c00246c4:	57                   	push   edi
c00246c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00246c8:	83 c4 20             	add    esp,0x20
c00246cb:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00246cf:	4d                   	dec    ebp
c00246d0:	74 0a                	je     c00246dc <IDE::detect()+0x276>
c00246d2:	bd 01 00 00 00       	mov    ebp,0x1
c00246d7:	e9 bb fd ff ff       	jmp    c0024497 <IDE::detect()+0x31>
c00246dc:	4e                   	dec    esi
c00246dd:	74 63                	je     c0024742 <IDE::detect()+0x2dc>
c00246df:	be 01 00 00 00       	mov    esi,0x1
c00246e4:	e9 ac fd ff ff       	jmp    c0024495 <IDE::detect()+0x2f>
c00246e9:	50                   	push   eax
c00246ea:	6a 04                	push   0x4
c00246ec:	56                   	push   esi
c00246ed:	53                   	push   ebx
c00246ee:	e8 05 f7 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c00246f3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00246f7:	83 c4 0c             	add    esp,0xc
c00246fa:	6a 05                	push   0x5
c00246fc:	56                   	push   esi
c00246fd:	53                   	push   ebx
c00246fe:	e8 f5 f6 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0024703:	83 c4 10             	add    esp,0x10
c0024706:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002470a:	80 fa 14             	cmp    dl,0x14
c002470d:	75 04                	jne    c0024713 <IDE::detect()+0x2ad>
c002470f:	3c eb                	cmp    al,0xeb
c0024711:	eb 07                	jmp    c002471a <IDE::detect()+0x2b4>
c0024713:	3c 96                	cmp    al,0x96
c0024715:	75 b8                	jne    c00246cf <IDE::detect()+0x269>
c0024717:	80 fa 69             	cmp    dl,0x69
c002471a:	75 b3                	jne    c00246cf <IDE::detect()+0x269>
c002471c:	68 a1 00 00 00       	push   0xa1
c0024721:	6a 07                	push   0x7
c0024723:	56                   	push   esi
c0024724:	53                   	push   ebx
c0024725:	e8 0e f6 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002472a:	5f                   	pop    edi
c002472b:	58                   	pop    eax
c002472c:	6a 00                	push   0x0
c002472e:	68 40 42 0f 00       	push   0xf4240
c0024733:	e8 ad a2 ff ff       	call   c001e9e5 <nanoSleep(unsigned long long)>
c0024738:	83 c4 10             	add    esp,0x10
c002473b:	b1 01                	mov    cl,0x1
c002473d:	e9 4a fe ff ff       	jmp    c002458c <IDE::detect()+0x126>
c0024742:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024748:	5b                   	pop    ebx
c0024749:	5e                   	pop    esi
c002474a:	5f                   	pop    edi
c002474b:	5d                   	pop    ebp
c002474c:	c3                   	ret    
c002474d:	90                   	nop

c002474e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002474e:	55                   	push   ebp
c002474f:	57                   	push   edi
c0024750:	56                   	push   esi
c0024751:	53                   	push   ebx
c0024752:	83 ec 1c             	sub    esp,0x1c
c0024755:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024759:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002475d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024761:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024765:	88 c3                	mov    bl,al
c0024767:	84 c0                	test   al,al
c0024769:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002476d:	0f 84 67 01 00 00    	je     c00248da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0024773:	83 ec 0c             	sub    esp,0xc
c0024776:	68 7b db 02 c0       	push   0xc002db7b
c002477b:	e8 67 e6 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024780:	83 c4 10             	add    esp,0x10
c0024783:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024787:	3c 01                	cmp    al,0x1
c0024789:	75 17                	jne    c00247a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002478b:	83 ec 0c             	sub    esp,0xc
c002478e:	b3 13                	mov    bl,0x13
c0024790:	68 87 db 02 c0       	push   0xc002db87
c0024795:	e8 4d e6 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c002479a:	83 c4 10             	add    esp,0x10
c002479d:	e9 25 01 00 00       	jmp    c00248c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00247a2:	3c 02                	cmp    al,0x2
c00247a4:	0f 85 ef 00 00 00    	jne    c0024899 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00247aa:	d1 e6                	shl    esi,1
c00247ac:	09 ee                	or     esi,ebp
c00247ae:	52                   	push   edx
c00247af:	89 f0                	mov    eax,esi
c00247b1:	6a 01                	push   0x1
c00247b3:	0f b6 f0             	movzx  esi,al
c00247b6:	c1 e6 06             	shl    esi,0x6
c00247b9:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00247c1:	50                   	push   eax
c00247c2:	57                   	push   edi
c00247c3:	e8 30 f6 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c00247c8:	83 c4 10             	add    esp,0x10
c00247cb:	89 c6                	mov    esi,eax
c00247cd:	a8 01                	test   al,0x1
c00247cf:	74 12                	je     c00247e3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00247d1:	83 ec 0c             	sub    esp,0xc
c00247d4:	b3 07                	mov    bl,0x7
c00247d6:	68 9c db 02 c0       	push   0xc002db9c
c00247db:	e8 07 e6 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00247e0:	83 c4 10             	add    esp,0x10
c00247e3:	f7 c6 02 00 00 00    	test   esi,0x2
c00247e9:	74 12                	je     c00247fd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00247eb:	83 ec 0c             	sub    esp,0xc
c00247ee:	b3 03                	mov    bl,0x3
c00247f0:	68 ba db 02 c0       	push   0xc002dbba
c00247f5:	e8 ed e5 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00247fa:	83 c4 10             	add    esp,0x10
c00247fd:	f7 c6 04 00 00 00    	test   esi,0x4
c0024803:	74 12                	je     c0024817 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024805:	83 ec 0c             	sub    esp,0xc
c0024808:	b3 14                	mov    bl,0x14
c002480a:	68 da db 02 c0       	push   0xc002dbda
c002480f:	e8 d3 e5 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024814:	83 c4 10             	add    esp,0x10
c0024817:	f7 c6 08 00 00 00    	test   esi,0x8
c002481d:	74 12                	je     c0024831 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002481f:	83 ec 0c             	sub    esp,0xc
c0024822:	b3 03                	mov    bl,0x3
c0024824:	68 ba db 02 c0       	push   0xc002dbba
c0024829:	e8 b9 e5 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c002482e:	83 c4 10             	add    esp,0x10
c0024831:	f7 c6 10 00 00 00    	test   esi,0x10
c0024837:	74 12                	je     c002484b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024839:	83 ec 0c             	sub    esp,0xc
c002483c:	b3 15                	mov    bl,0x15
c002483e:	68 f2 db 02 c0       	push   0xc002dbf2
c0024843:	e8 9f e5 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024848:	83 c4 10             	add    esp,0x10
c002484b:	f7 c6 20 00 00 00    	test   esi,0x20
c0024851:	74 12                	je     c0024865 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024853:	83 ec 0c             	sub    esp,0xc
c0024856:	b3 03                	mov    bl,0x3
c0024858:	68 ba db 02 c0       	push   0xc002dbba
c002485d:	e8 85 e5 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024862:	83 c4 10             	add    esp,0x10
c0024865:	f7 c6 40 00 00 00    	test   esi,0x40
c002486b:	74 12                	je     c002487f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002486d:	83 ec 0c             	sub    esp,0xc
c0024870:	b3 16                	mov    bl,0x16
c0024872:	68 0c dc 02 c0       	push   0xc002dc0c
c0024877:	e8 6b e5 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c002487c:	83 c4 10             	add    esp,0x10
c002487f:	89 f0                	mov    eax,esi
c0024881:	84 c0                	test   al,al
c0024883:	79 42                	jns    c00248c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024885:	83 ec 0c             	sub    esp,0xc
c0024888:	b3 0d                	mov    bl,0xd
c002488a:	68 2d dc 02 c0       	push   0xc002dc2d
c002488f:	e8 53 e5 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024894:	83 c4 10             	add    esp,0x10
c0024897:	eb 2e                	jmp    c00248c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024899:	3c 03                	cmp    al,0x3
c002489b:	75 14                	jne    c00248b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002489d:	83 ec 0c             	sub    esp,0xc
c00248a0:	b3 17                	mov    bl,0x17
c00248a2:	68 41 dc 02 c0       	push   0xc002dc41
c00248a7:	e8 3b e5 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00248ac:	83 c4 10             	add    esp,0x10
c00248af:	eb 16                	jmp    c00248c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00248b1:	3c 04                	cmp    al,0x4
c00248b3:	75 12                	jne    c00248c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00248b5:	83 ec 0c             	sub    esp,0xc
c00248b8:	b3 08                	mov    bl,0x8
c00248ba:	68 57 dc 02 c0       	push   0xc002dc57
c00248bf:	e8 23 e5 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00248c4:	83 c4 10             	add    esp,0x10
c00248c7:	50                   	push   eax
c00248c8:	50                   	push   eax
c00248c9:	0f b6 c3             	movzx  eax,bl
c00248cc:	50                   	push   eax
c00248cd:	68 6f dc 02 c0       	push   0xc002dc6f
c00248d2:	e8 10 e5 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00248d7:	83 c4 10             	add    esp,0x10
c00248da:	83 c4 1c             	add    esp,0x1c
c00248dd:	88 d8                	mov    al,bl
c00248df:	5b                   	pop    ebx
c00248e0:	5e                   	pop    esi
c00248e1:	5f                   	pop    edi
c00248e2:	5d                   	pop    ebp
c00248e3:	c3                   	ret    

c00248e4 <IDE::polling(unsigned char, unsigned int)>:
c00248e4:	57                   	push   edi
c00248e5:	56                   	push   esi
c00248e6:	53                   	push   ebx
c00248e7:	bb 04 00 00 00       	mov    ebx,0x4
c00248ec:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00248f0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00248f5:	52                   	push   edx
c00248f6:	6a 0c                	push   0xc
c00248f8:	56                   	push   esi
c00248f9:	57                   	push   edi
c00248fa:	e8 f9 f4 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c00248ff:	83 c4 10             	add    esp,0x10
c0024902:	4b                   	dec    ebx
c0024903:	75 f0                	jne    c00248f5 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024905:	bb a0 86 01 00       	mov    ebx,0x186a0
c002490a:	50                   	push   eax
c002490b:	6a 0c                	push   0xc
c002490d:	56                   	push   esi
c002490e:	57                   	push   edi
c002490f:	e8 e4 f4 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0024914:	83 c4 10             	add    esp,0x10
c0024917:	a8 01                	test   al,0x1
c0024919:	74 12                	je     c002492d <IDE::polling(unsigned char, unsigned int)+0x49>
c002491b:	83 ec 0c             	sub    esp,0xc
c002491e:	68 89 dc 02 c0       	push   0xc002dc89
c0024923:	e8 bf e4 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024928:	83 c4 10             	add    esp,0x10
c002492b:	eb 17                	jmp    c0024944 <IDE::polling(unsigned char, unsigned int)+0x60>
c002492d:	a8 20                	test   al,0x20
c002492f:	75 0f                	jne    c0024940 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024931:	4b                   	dec    ebx
c0024932:	74 10                	je     c0024944 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024934:	84 c0                	test   al,al
c0024936:	78 d2                	js     c002490a <IDE::polling(unsigned char, unsigned int)+0x26>
c0024938:	a8 08                	test   al,0x8
c002493a:	74 ce                	je     c002490a <IDE::polling(unsigned char, unsigned int)+0x26>
c002493c:	31 c0                	xor    eax,eax
c002493e:	eb 06                	jmp    c0024946 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024940:	b0 01                	mov    al,0x1
c0024942:	eb 02                	jmp    c0024946 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024944:	b0 02                	mov    al,0x2
c0024946:	5b                   	pop    ebx
c0024947:	5e                   	pop    esi
c0024948:	5f                   	pop    edi
c0024949:	c3                   	ret    

c002494a <SATABus::close(int, int, void*)>:
c002494a:	31 c0                	xor    eax,eax
c002494c:	c3                   	ret    
c002494d:	90                   	nop

c002494e <SATABus::detect()>:
c002494e:	c3                   	ret    
c002494f:	90                   	nop

c0024950 <SATABus::SATABus()>:
c0024950:	83 ec 0c             	sub    esp,0xc
c0024953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024957:	83 ec 08             	sub    esp,0x8
c002495a:	68 cc dc 02 c0       	push   0xc002dccc
c002495f:	50                   	push   eax
c0024960:	e8 69 fc fe ff       	call   c00145ce <HardDiskController::HardDiskController(char const*)>
c0024965:	83 c4 10             	add    esp,0x10
c0024968:	ba 88 dd 02 c0       	mov    edx,0xc002dd88
c002496d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024971:	89 10                	mov    DWORD PTR [eax],edx
c0024973:	83 ec 0c             	sub    esp,0xc
c0024976:	6a 50                	push   0x50
c0024978:	e8 11 b6 fe ff       	call   c000ff8e <Phys::allocateContiguousPages(int)>
c002497d:	83 c4 10             	add    esp,0x10
c0024980:	89 c2                	mov    edx,eax
c0024982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024986:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002498c:	83 ec 0c             	sub    esp,0xc
c002498f:	6a 50                	push   0x50
c0024991:	e8 4b d0 fe ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c0024996:	83 c4 10             	add    esp,0x10
c0024999:	89 c2                	mov    edx,eax
c002499b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002499f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00249a5:	a1 70 f5 02 c0       	mov    eax,ds:0xc002f570
c00249aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00249ae:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00249b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00249b8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00249be:	83 ec 0c             	sub    esp,0xc
c00249c1:	6a 03                	push   0x3
c00249c3:	6a 50                	push   0x50
c00249c5:	51                   	push   ecx
c00249c6:	52                   	push   edx
c00249c7:	50                   	push   eax
c00249c8:	e8 41 db fe ff       	call   c001250e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00249cd:	83 c4 20             	add    esp,0x20
c00249d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249d4:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00249da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00249e4:	83 ec 04             	sub    esp,0x4
c00249e7:	52                   	push   edx
c00249e8:	50                   	push   eax
c00249e9:	68 f0 dc 02 c0       	push   0xc002dcf0
c00249ee:	e8 f4 e3 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00249f3:	83 c4 10             	add    esp,0x10
c00249f6:	90                   	nop
c00249f7:	83 c4 0c             	add    esp,0xc
c00249fa:	c3                   	ret    
c00249fb:	90                   	nop

c00249fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00249fc:	83 ec 0c             	sub    esp,0xc
c00249ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024a03:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024a06:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024a09:	09 c2                	or     edx,eax
c0024a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a0f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a15:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024a17:	31 c0                	xor    eax,eax
c0024a19:	c1 e9 08             	shr    ecx,0x8
c0024a1c:	83 e1 0f             	and    ecx,0xf
c0024a1f:	39 c8                	cmp    eax,ecx
c0024a21:	74 0a                	je     c0024a2d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024a23:	f6 c2 01             	test   dl,0x1
c0024a26:	74 18                	je     c0024a40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024a28:	d1 ea                	shr    edx,1
c0024a2a:	40                   	inc    eax
c0024a2b:	eb f2                	jmp    c0024a1f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024a2d:	83 ec 0c             	sub    esp,0xc
c0024a30:	68 14 dd 02 c0       	push   0xc002dd14
c0024a35:	e8 f5 5e ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0024a3a:	83 c4 10             	add    esp,0x10
c0024a3d:	83 c8 ff             	or     eax,0xffffffff
c0024a40:	83 c4 0c             	add    esp,0xc
c0024a43:	c3                   	ret    

c0024a44 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024a44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024a48:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024a4b:	89 c2                	mov    edx,eax
c0024a4d:	c1 ea 08             	shr    edx,0x8
c0024a50:	83 e2 0f             	and    edx,0xf
c0024a53:	fe ca                	dec    dl
c0024a55:	75 31                	jne    c0024a88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024a57:	83 e0 0f             	and    eax,0xf
c0024a5a:	3c 03                	cmp    al,0x3
c0024a5c:	75 2a                	jne    c0024a88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024a5e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024a61:	b8 02 00 00 00       	mov    eax,0x2
c0024a66:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024a6c:	74 1c                	je     c0024a8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024a6e:	b8 04 00 00 00       	mov    eax,0x4
c0024a73:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024a79:	74 0f                	je     c0024a8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024a7b:	31 c0                	xor    eax,eax
c0024a7d:	83 fa 03             	cmp    edx,0x3
c0024a80:	0f 94 c0             	sete   al
c0024a83:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024a87:	c3                   	ret    
c0024a88:	31 c0                	xor    eax,eax
c0024a8a:	c3                   	ret    
c0024a8b:	90                   	nop

c0024a8c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024a90:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024a93:	0f ba e2 0f          	bt     edx,0xf
c0024a97:	72 f7                	jb     c0024a90 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024a99:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024a9c:	83 ca 10             	or     edx,0x10
c0024a9f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024aa2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024aa5:	83 ca 01             	or     edx,0x1
c0024aa8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024aab:	c3                   	ret    

c0024aac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024aac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024ab0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024ab3:	83 e2 fe             	and    edx,0xfffffffe
c0024ab6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024ab9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024abc:	83 e2 ef             	and    edx,0xffffffef
c0024abf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024ac2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024ac5:	0f ba e2 0e          	bt     edx,0xe
c0024ac9:	72 f7                	jb     c0024ac2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024acb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024ace:	0f ba e2 0f          	bt     edx,0xf
c0024ad2:	72 ee                	jb     c0024ac2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024ad4:	c3                   	ret    
c0024ad5:	90                   	nop

c0024ad6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024ad6:	55                   	push   ebp
c0024ad7:	57                   	push   edi
c0024ad8:	56                   	push   esi
c0024ad9:	53                   	push   ebx
c0024ada:	83 ec 1c             	sub    esp,0x1c
c0024add:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ae1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024ae5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024ae9:	53                   	push   ebx
c0024aea:	89 fd                	mov    ebp,edi
c0024aec:	56                   	push   esi
c0024aed:	c1 e5 0a             	shl    ebp,0xa
c0024af0:	e8 b7 ff ff ff       	call   c0024aac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024af5:	83 ec 0c             	sub    esp,0xc
c0024af8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024afe:	01 e8                	add    eax,ebp
c0024b00:	89 03                	mov    DWORD PTR [ebx],eax
c0024b02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024b04:	68 00 04 00 00       	push   0x400
c0024b09:	6a 00                	push   0x0
c0024b0b:	50                   	push   eax
c0024b0c:	e8 3f bc fd ff       	call   c0000750 <memset>
c0024b11:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024b17:	89 fa                	mov    edx,edi
c0024b19:	01 e8                	add    eax,ebp
c0024b1b:	c1 e7 0d             	shl    edi,0xd
c0024b1e:	89 03                	mov    DWORD PTR [ebx],eax
c0024b20:	c1 e2 08             	shl    edx,0x8
c0024b23:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024b2a:	81 c2 00 80 00 00    	add    edx,0x8000
c0024b30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024b34:	89 d0                	mov    eax,edx
c0024b36:	83 c4 1c             	add    esp,0x1c
c0024b39:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024b3f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024b42:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024b45:	68 00 01 00 00       	push   0x100
c0024b4a:	6a 00                	push   0x0
c0024b4c:	50                   	push   eax
c0024b4d:	e8 fe bb fd ff       	call   c0000750 <memset>
c0024b52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b56:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024b5c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024b62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b66:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024b69:	83 c4 10             	add    esp,0x10
c0024b6c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024b73:	31 ff                	xor    edi,edi
c0024b75:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024b7b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024b81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024b85:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024b8b:	83 c5 20             	add    ebp,0x20
c0024b8e:	01 f8                	add    eax,edi
c0024b90:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024b93:	52                   	push   edx
c0024b94:	68 00 01 00 00       	push   0x100
c0024b99:	6a 00                	push   0x0
c0024b9b:	50                   	push   eax
c0024b9c:	e8 af bb fd ff       	call   c0000750 <memset>
c0024ba1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ba5:	83 c4 10             	add    esp,0x10
c0024ba8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024bae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024bb5:	01 f8                	add    eax,edi
c0024bb7:	81 c7 00 01 00 00    	add    edi,0x100
c0024bbd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024bc0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024bc6:	75 b3                	jne    c0024b7b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024bc8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024bcc:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024bd0:	83 c4 1c             	add    esp,0x1c
c0024bd3:	5b                   	pop    ebx
c0024bd4:	5e                   	pop    esi
c0024bd5:	5f                   	pop    edi
c0024bd6:	5d                   	pop    ebp
c0024bd7:	e9 b0 fe ff ff       	jmp    c0024a8c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024bdc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024bdc:	55                   	push   ebp
c0024bdd:	57                   	push   edi
c0024bde:	56                   	push   esi
c0024bdf:	53                   	push   ebx
c0024be0:	31 db                	xor    ebx,ebx
c0024be2:	83 ec 0c             	sub    esp,0xc
c0024be5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024be9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024bed:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024bf0:	f7 c7 01 00 00 00    	test   edi,0x1
c0024bf6:	0f 84 aa 00 00 00    	je     c0024ca6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024bfc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024c00:	89 d8                	mov    eax,ebx
c0024c02:	c1 e0 07             	shl    eax,0x7
c0024c05:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024c0c:	55                   	push   ebp
c0024c0d:	56                   	push   esi
c0024c0e:	e8 31 fe ff ff       	call   c0024a44 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024c13:	5a                   	pop    edx
c0024c14:	83 f8 01             	cmp    eax,0x1
c0024c17:	59                   	pop    ecx
c0024c18:	75 30                	jne    c0024c4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024c1a:	50                   	push   eax
c0024c1b:	50                   	push   eax
c0024c1c:	53                   	push   ebx
c0024c1d:	68 39 dd 02 c0       	push   0xc002dd39
c0024c22:	e8 c0 e1 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024c27:	83 c4 0c             	add    esp,0xc
c0024c2a:	53                   	push   ebx
c0024c2b:	55                   	push   ebp
c0024c2c:	56                   	push   esi
c0024c2d:	e8 a4 fe ff ff       	call   c0024ad6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024c32:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024c39:	e8 4e ac fe ff       	call   c000f88c <malloc>
c0024c3e:	89 c5                	mov    ebp,eax
c0024c40:	89 04 24             	mov    DWORD PTR [esp],eax
c0024c43:	e8 5c 0d 00 00       	call   c00259a4 <SATA::SATA()>
c0024c48:	eb 33                	jmp    c0024c7d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024c4a:	83 f8 04             	cmp    eax,0x4
c0024c4d:	75 47                	jne    c0024c96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024c4f:	50                   	push   eax
c0024c50:	50                   	push   eax
c0024c51:	53                   	push   ebx
c0024c52:	68 50 dd 02 c0       	push   0xc002dd50
c0024c57:	e8 8b e1 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024c5c:	83 c4 0c             	add    esp,0xc
c0024c5f:	53                   	push   ebx
c0024c60:	55                   	push   ebp
c0024c61:	56                   	push   esi
c0024c62:	e8 6f fe ff ff       	call   c0024ad6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024c67:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024c6e:	e8 19 ac fe ff       	call   c000f88c <malloc>
c0024c73:	89 c5                	mov    ebp,eax
c0024c75:	89 04 24             	mov    DWORD PTR [esp],eax
c0024c78:	e8 d3 10 00 00       	call   c0025d50 <SATAPI::SATAPI()>
c0024c7d:	5a                   	pop    edx
c0024c7e:	59                   	pop    ecx
c0024c7f:	55                   	push   ebp
c0024c80:	56                   	push   esi
c0024c81:	e8 9a f5 fe ff       	call   c0014220 <Device::addChild(Device*)>
c0024c86:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024c89:	56                   	push   esi
c0024c8a:	6a 00                	push   0x0
c0024c8c:	53                   	push   ebx
c0024c8d:	55                   	push   ebp
c0024c8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024c91:	83 c4 20             	add    esp,0x20
c0024c94:	eb 10                	jmp    c0024ca6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024c96:	50                   	push   eax
c0024c97:	50                   	push   eax
c0024c98:	53                   	push   ebx
c0024c99:	68 69 dd 02 c0       	push   0xc002dd69
c0024c9e:	e8 44 e1 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0024ca3:	83 c4 10             	add    esp,0x10
c0024ca6:	d1 ef                	shr    edi,1
c0024ca8:	43                   	inc    ebx
c0024ca9:	83 fb 20             	cmp    ebx,0x20
c0024cac:	0f 85 3e ff ff ff    	jne    c0024bf0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024cb2:	83 c4 0c             	add    esp,0xc
c0024cb5:	5b                   	pop    ebx
c0024cb6:	5e                   	pop    esi
c0024cb7:	5f                   	pop    edi
c0024cb8:	5d                   	pop    ebp
c0024cb9:	c3                   	ret    

c0024cba <SATABus::open(int, int, void*)>:
c0024cba:	83 ec 14             	sub    esp,0x14
c0024cbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024cc1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024cc7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024ccd:	52                   	push   edx
c0024cce:	50                   	push   eax
c0024ccf:	e8 08 ff ff ff       	call   c0024bdc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024cd4:	31 c0                	xor    eax,eax
c0024cd6:	83 c4 1c             	add    esp,0x1c
c0024cd9:	c3                   	ret    

c0024cda <ATA::close(int, int, void*)>:
c0024cda:	83 ec 0c             	sub    esp,0xc
c0024cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ce1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024ce7:	85 c0                	test   eax,eax
c0024ce9:	74 0c                	je     c0024cf7 <ATA::close(int, int, void*)+0x1d>
c0024ceb:	83 ec 0c             	sub    esp,0xc
c0024cee:	8b 10                	mov    edx,DWORD PTR [eax]
c0024cf0:	50                   	push   eax
c0024cf1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024cf4:	83 c4 10             	add    esp,0x10
c0024cf7:	31 c0                	xor    eax,eax
c0024cf9:	83 c4 0c             	add    esp,0xc
c0024cfc:	c3                   	ret    
c0024cfd:	90                   	nop

c0024cfe <ATA::powerSaving(PowerSavingLevel)>:
c0024cfe:	c3                   	ret    
c0024cff:	90                   	nop

c0024d00 <ATA::ATA()>:
c0024d00:	83 ec 0c             	sub    esp,0xc
c0024d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d07:	83 ec 04             	sub    esp,0x4
c0024d0a:	68 00 02 00 00       	push   0x200
c0024d0f:	68 51 de 02 c0       	push   0xc002de51
c0024d14:	50                   	push   eax
c0024d15:	e8 4c f9 fe ff       	call   c0014666 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d1a:	83 c4 10             	add    esp,0x10
c0024d1d:	ba d4 dd 02 c0       	mov    edx,0xc002ddd4
c0024d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d26:	89 10                	mov    DWORD PTR [eax],edx
c0024d28:	90                   	nop
c0024d29:	83 c4 0c             	add    esp,0xc
c0024d2c:	c3                   	ret    
c0024d2d:	90                   	nop

c0024d2e <ATA::flush(bool)>:
c0024d2e:	53                   	push   ebx
c0024d2f:	83 ec 08             	sub    esp,0x8
c0024d32:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024d37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d3b:	19 c0                	sbb    eax,eax
c0024d3d:	83 e0 fd             	and    eax,0xfffffffd
c0024d40:	05 ea 00 00 00       	add    eax,0xea
c0024d45:	50                   	push   eax
c0024d46:	6a 07                	push   0x7
c0024d48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d4f:	50                   	push   eax
c0024d50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d56:	e8 dd ef ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d5b:	83 c4 0c             	add    esp,0xc
c0024d5e:	6a 00                	push   0x0
c0024d60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d67:	50                   	push   eax
c0024d68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d6e:	e8 71 fb ff ff       	call   c00248e4 <IDE::polling(unsigned char, unsigned int)>
c0024d73:	83 c4 18             	add    esp,0x18
c0024d76:	5b                   	pop    ebx
c0024d77:	c3                   	ret    

c0024d78 <ATA::readyForCommand()>:
c0024d78:	56                   	push   esi
c0024d79:	53                   	push   ebx
c0024d7a:	31 db                	xor    ebx,ebx
c0024d7c:	50                   	push   eax
c0024d7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024d81:	50                   	push   eax
c0024d82:	6a 0c                	push   0xc
c0024d84:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024d8b:	50                   	push   eax
c0024d8c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024d92:	e8 61 f0 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0024d97:	83 c4 10             	add    esp,0x10
c0024d9a:	a8 88                	test   al,0x88
c0024d9c:	74 23                	je     c0024dc1 <ATA::readyForCommand()+0x49>
c0024d9e:	43                   	inc    ebx
c0024d9f:	83 fb 63             	cmp    ebx,0x63
c0024da2:	7e dd                	jle    c0024d81 <ATA::readyForCommand()+0x9>
c0024da4:	51                   	push   ecx
c0024da5:	51                   	push   ecx
c0024da6:	6a 00                	push   0x0
c0024da8:	68 40 42 0f 00       	push   0xf4240
c0024dad:	e8 33 9c ff ff       	call   c001e9e5 <nanoSleep(unsigned long long)>
c0024db2:	83 c4 10             	add    esp,0x10
c0024db5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024dbb:	75 c4                	jne    c0024d81 <ATA::readyForCommand()+0x9>
c0024dbd:	31 c0                	xor    eax,eax
c0024dbf:	eb 02                	jmp    c0024dc3 <ATA::readyForCommand()+0x4b>
c0024dc1:	b0 01                	mov    al,0x1
c0024dc3:	5a                   	pop    edx
c0024dc4:	5b                   	pop    ebx
c0024dc5:	5e                   	pop    esi
c0024dc6:	c3                   	ret    
c0024dc7:	90                   	nop

c0024dc8 <ATA::access(unsigned long long, int, void*, bool)>:
c0024dc8:	55                   	push   ebp
c0024dc9:	57                   	push   edi
c0024dca:	56                   	push   esi
c0024dcb:	53                   	push   ebx
c0024dcc:	83 ec 2c             	sub    esp,0x2c
c0024dcf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024dd3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024dd7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024ddf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024de3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024de7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024deb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024df1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024df5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024dfb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024dff:	c1 e0 06             	shl    eax,0x6
c0024e02:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024e0a:	74 5d                	je     c0024e69 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024e0c:	89 fa                	mov    edx,edi
c0024e0e:	89 f0                	mov    eax,esi
c0024e10:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024e14:	c1 ea 1c             	shr    edx,0x1c
c0024e17:	89 d1                	mov    ecx,edx
c0024e19:	09 c1                	or     ecx,eax
c0024e1b:	74 25                	je     c0024e42 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024e1d:	31 ed                	xor    ebp,ebp
c0024e1f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024e26:	89 fa                	mov    edx,edi
c0024e28:	89 f0                	mov    eax,esi
c0024e2a:	0f ad d0             	shrd   eax,edx,cl
c0024e2d:	d3 ea                	shr    edx,cl
c0024e2f:	f6 c1 20             	test   cl,0x20
c0024e32:	74 02                	je     c0024e36 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024e34:	89 d0                	mov    eax,edx
c0024e36:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024e3a:	45                   	inc    ebp
c0024e3b:	83 fd 06             	cmp    ebp,0x6
c0024e3e:	75 df                	jne    c0024e1f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024e40:	eb 76                	jmp    c0024eb8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024e42:	89 f0                	mov    eax,esi
c0024e44:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024e49:	89 fa                	mov    edx,edi
c0024e4b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024e52:	0f ac d0 10          	shrd   eax,edx,0x10
c0024e56:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024e5b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024e5f:	c1 ee 18             	shr    esi,0x18
c0024e62:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024e67:	eb 56                	jmp    c0024ebf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024e69:	6a 00                	push   0x0
c0024e6b:	6a 3f                	push   0x3f
c0024e6d:	57                   	push   edi
c0024e6e:	56                   	push   esi
c0024e6f:	e8 90 29 00 00       	call   c0027804 <__umoddi3>
c0024e74:	83 c4 10             	add    esp,0x10
c0024e77:	40                   	inc    eax
c0024e78:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024e7c:	6a 00                	push   0x0
c0024e7e:	68 f0 03 00 00       	push   0x3f0
c0024e83:	57                   	push   edi
c0024e84:	56                   	push   esi
c0024e85:	e8 7a 28 00 00       	call   c0027704 <__udivdi3>
c0024e8a:	83 c4 10             	add    esp,0x10
c0024e8d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024e92:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024e99:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024e9e:	6a 00                	push   0x0
c0024ea0:	6a 3f                	push   0x3f
c0024ea2:	57                   	push   edi
c0024ea3:	56                   	push   esi
c0024ea4:	e8 5b 28 00 00       	call   c0027704 <__udivdi3>
c0024ea9:	83 c4 10             	add    esp,0x10
c0024eac:	89 c6                	mov    esi,eax
c0024eae:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024eb3:	83 e6 0f             	and    esi,0xf
c0024eb6:	eb 07                	jmp    c0024ebf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024eb8:	31 f6                	xor    esi,esi
c0024eba:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024ebf:	bf 01 00 00 00       	mov    edi,0x1
c0024ec4:	50                   	push   eax
c0024ec5:	6a 00                	push   0x0
c0024ec7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ece:	50                   	push   eax
c0024ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024ed3:	e8 6c f0 ff ff       	call   c0023f44 <IDE::enableIRQs(unsigned char, bool)>
c0024ed8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024edb:	e8 98 fe ff ff       	call   c0024d78 <ATA::readyForCommand()>
c0024ee0:	83 c4 10             	add    esp,0x10
c0024ee3:	84 c0                	test   al,al
c0024ee5:	0f 84 5a 02 00 00    	je     c0025145 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024eeb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024ef1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024ef7:	c1 e0 04             	shl    eax,0x4
c0024efa:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024f01:	09 c6                	or     esi,eax
c0024f03:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024f08:	75 05                	jne    c0024f0f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024f0a:	83 ce a0             	or     esi,0xffffffa0
c0024f0d:	eb 03                	jmp    c0024f12 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024f0f:	83 ce e0             	or     esi,0xffffffe0
c0024f12:	89 f0                	mov    eax,esi
c0024f14:	0f b6 f0             	movzx  esi,al
c0024f17:	56                   	push   esi
c0024f18:	6a 06                	push   0x6
c0024f1a:	51                   	push   ecx
c0024f1b:	52                   	push   edx
c0024f1c:	e8 17 ee ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f21:	83 c4 10             	add    esp,0x10
c0024f24:	6a 00                	push   0x0
c0024f26:	6a 01                	push   0x1
c0024f28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f2f:	50                   	push   eax
c0024f30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f36:	e8 fd ed ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f3b:	83 c4 10             	add    esp,0x10
c0024f3e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024f43:	75 6e                	jne    c0024fb3 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024f45:	6a 00                	push   0x0
c0024f47:	6a 08                	push   0x8
c0024f49:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f50:	50                   	push   eax
c0024f51:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f57:	e8 dc ed ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f5c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024f61:	50                   	push   eax
c0024f62:	6a 09                	push   0x9
c0024f64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f6b:	50                   	push   eax
c0024f6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f72:	e8 c1 ed ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f77:	83 c4 20             	add    esp,0x20
c0024f7a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024f7f:	50                   	push   eax
c0024f80:	6a 0a                	push   0xa
c0024f82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f89:	50                   	push   eax
c0024f8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f90:	e8 a3 ed ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f95:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024f9a:	50                   	push   eax
c0024f9b:	6a 0b                	push   0xb
c0024f9d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024fa4:	50                   	push   eax
c0024fa5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fab:	e8 88 ed ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fb0:	83 c4 20             	add    esp,0x20
c0024fb3:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024fb8:	50                   	push   eax
c0024fb9:	6a 02                	push   0x2
c0024fbb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024fc2:	50                   	push   eax
c0024fc3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fc9:	e8 6a ed ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fce:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024fd3:	50                   	push   eax
c0024fd4:	6a 03                	push   0x3
c0024fd6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024fdd:	50                   	push   eax
c0024fde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fe4:	e8 4f ed ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fe9:	83 c4 20             	add    esp,0x20
c0024fec:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024ff1:	50                   	push   eax
c0024ff2:	6a 04                	push   0x4
c0024ff4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ffb:	50                   	push   eax
c0024ffc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025002:	e8 31 ed ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025007:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002500c:	50                   	push   eax
c002500d:	6a 05                	push   0x5
c002500f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025016:	50                   	push   eax
c0025017:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002501d:	e8 16 ed ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025022:	83 c4 20             	add    esp,0x20
c0025025:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002502a:	0f 94 c0             	sete   al
c002502d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0025032:	74 09                	je     c002503d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0025034:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002503b:	eb 07                	jmp    c0025044 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002503d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0025044:	0f b6 c0             	movzx  eax,al
c0025047:	50                   	push   eax
c0025048:	6a 07                	push   0x7
c002504a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025051:	50                   	push   eax
c0025052:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025058:	e8 db ec ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002505d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0025061:	83 c4 10             	add    esp,0x10
c0025064:	85 f6                	test   esi,esi
c0025066:	0f 84 ba 00 00 00    	je     c0025126 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002506c:	50                   	push   eax
c002506d:	6a 01                	push   0x1
c002506f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025076:	50                   	push   eax
c0025077:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002507d:	e8 62 f8 ff ff       	call   c00248e4 <IDE::polling(unsigned char, unsigned int)>
c0025082:	83 c4 10             	add    esp,0x10
c0025085:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002508b:	84 c0                	test   al,al
c002508d:	74 2c                	je     c00250bb <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002508f:	0f b6 f8             	movzx  edi,al
c0025092:	0f b6 d2             	movzx  edx,dl
c0025095:	57                   	push   edi
c0025096:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002509d:	50                   	push   eax
c002509e:	52                   	push   edx
c002509f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00250a5:	e8 a4 f6 ff ff       	call   c002474e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00250aa:	c7 04 24 ac dd 02 c0 	mov    DWORD PTR [esp],0xc002ddac
c00250b1:	e8 31 dd fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00250b6:	e9 87 00 00 00       	jmp    c0025142 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00250bb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00250c0:	74 33                	je     c00250f5 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00250c2:	31 ed                	xor    ebp,ebp
c00250c4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00250c8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00250cc:	50                   	push   eax
c00250cd:	50                   	push   eax
c00250ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00250d5:	50                   	push   eax
c00250d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00250dc:	e8 45 ec ff ff       	call   c0023d26 <IDE::getBase(unsigned char)>
c00250e1:	89 c2                	mov    edx,eax
c00250e3:	89 f8                	mov    eax,edi
c00250e5:	66 ef                	out    dx,ax
c00250e7:	45                   	inc    ebp
c00250e8:	83 c4 10             	add    esp,0x10
c00250eb:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00250f1:	75 d1                	jne    c00250c4 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00250f3:	eb 23                	jmp    c0025118 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00250f5:	0f b6 d2             	movzx  edx,dl
c00250f8:	51                   	push   ecx
c00250f9:	51                   	push   ecx
c00250fa:	52                   	push   edx
c00250fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025101:	e8 20 ec ff ff       	call   c0023d26 <IDE::getBase(unsigned char)>
c0025106:	b9 00 01 00 00       	mov    ecx,0x100
c002510b:	89 c2                	mov    edx,eax
c002510d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0025111:	fc                   	cld    
c0025112:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0025115:	83 c4 10             	add    esp,0x10
c0025118:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0025120:	4e                   	dec    esi
c0025121:	e9 3e ff ff ff       	jmp    c0025064 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0025126:	31 ff                	xor    edi,edi
c0025128:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002512d:	74 16                	je     c0025145 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002512f:	50                   	push   eax
c0025130:	50                   	push   eax
c0025131:	31 c0                	xor    eax,eax
c0025133:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0025138:	0f 94 c0             	sete   al
c002513b:	50                   	push   eax
c002513c:	53                   	push   ebx
c002513d:	e8 ec fb ff ff       	call   c0024d2e <ATA::flush(bool)>
c0025142:	83 c4 10             	add    esp,0x10
c0025145:	83 c4 2c             	add    esp,0x2c
c0025148:	89 f8                	mov    eax,edi
c002514a:	5b                   	pop    ebx
c002514b:	5e                   	pop    esi
c002514c:	5f                   	pop    edi
c002514d:	5d                   	pop    ebp
c002514e:	c3                   	ret    
c002514f:	90                   	nop

c0025150 <ATA::read(unsigned long long, int, void*)>:
c0025150:	57                   	push   edi
c0025151:	b8 04 00 00 00       	mov    eax,0x4
c0025156:	56                   	push   esi
c0025157:	53                   	push   ebx
c0025158:	83 ec 10             	sub    esp,0x10
c002515b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002515f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025163:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025166:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002516a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002516e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025174:	77 3b                	ja     c00251b1 <ATA::read(unsigned long long, int, void*)+0x61>
c0025176:	b8 06 00 00 00       	mov    eax,0x6
c002517b:	85 d2                	test   edx,edx
c002517d:	74 32                	je     c00251b1 <ATA::read(unsigned long long, int, void*)+0x61>
c002517f:	50                   	push   eax
c0025180:	50                   	push   eax
c0025181:	6a 00                	push   0x0
c0025183:	52                   	push   edx
c0025184:	53                   	push   ebx
c0025185:	57                   	push   edi
c0025186:	56                   	push   esi
c0025187:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002518b:	e8 38 fc ff ff       	call   c0024dc8 <ATA::access(unsigned long long, int, void*, bool)>
c0025190:	83 c4 20             	add    esp,0x20
c0025193:	85 c0                	test   eax,eax
c0025195:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025199:	75 11                	jne    c00251ac <ATA::read(unsigned long long, int, void*)+0x5c>
c002519b:	01 1d 58 37 03 c0    	add    DWORD PTR ds:0xc0033758,ebx
c00251a1:	e8 46 b7 fe ff       	call   c00108ec <VgaText::updateDiskUsage()>
c00251a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00251aa:	eb 05                	jmp    c00251b1 <ATA::read(unsigned long long, int, void*)+0x61>
c00251ac:	b8 01 00 00 00       	mov    eax,0x1
c00251b1:	83 c4 10             	add    esp,0x10
c00251b4:	5b                   	pop    ebx
c00251b5:	5e                   	pop    esi
c00251b6:	5f                   	pop    edi
c00251b7:	c3                   	ret    

c00251b8 <ATA::write(unsigned long long, int, void*)>:
c00251b8:	57                   	push   edi
c00251b9:	b8 04 00 00 00       	mov    eax,0x4
c00251be:	56                   	push   esi
c00251bf:	53                   	push   ebx
c00251c0:	83 ec 10             	sub    esp,0x10
c00251c3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00251c7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00251cb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00251ce:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00251d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00251d6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00251dc:	77 3b                	ja     c0025219 <ATA::write(unsigned long long, int, void*)+0x61>
c00251de:	b8 06 00 00 00       	mov    eax,0x6
c00251e3:	85 d2                	test   edx,edx
c00251e5:	74 32                	je     c0025219 <ATA::write(unsigned long long, int, void*)+0x61>
c00251e7:	50                   	push   eax
c00251e8:	50                   	push   eax
c00251e9:	6a 01                	push   0x1
c00251eb:	52                   	push   edx
c00251ec:	53                   	push   ebx
c00251ed:	57                   	push   edi
c00251ee:	56                   	push   esi
c00251ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251f3:	e8 d0 fb ff ff       	call   c0024dc8 <ATA::access(unsigned long long, int, void*, bool)>
c00251f8:	83 c4 20             	add    esp,0x20
c00251fb:	85 c0                	test   eax,eax
c00251fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025201:	75 11                	jne    c0025214 <ATA::write(unsigned long long, int, void*)+0x5c>
c0025203:	01 1d 54 37 03 c0    	add    DWORD PTR ds:0xc0033754,ebx
c0025209:	e8 de b6 fe ff       	call   c00108ec <VgaText::updateDiskUsage()>
c002520e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025212:	eb 05                	jmp    c0025219 <ATA::write(unsigned long long, int, void*)+0x61>
c0025214:	b8 01 00 00 00       	mov    eax,0x1
c0025219:	83 c4 10             	add    esp,0x10
c002521c:	5b                   	pop    ebx
c002521d:	5e                   	pop    esi
c002521e:	5f                   	pop    edi
c002521f:	c3                   	ret    

c0025220 <ATA::detectCHS()>:
c0025220:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025224:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002522a:	c1 e0 06             	shl    eax,0x6
c002522d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0025233:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002523d:	c7 44 24 04 b7 dd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ddb7
c0025245:	e9 e5 56 ff ff       	jmp    c001a92f <Krnl::panic(char const*)>

c002524a <ATA::open(int, int, void*)>:
c002524a:	53                   	push   ebx
c002524b:	83 ec 08             	sub    esp,0x8
c002524e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025252:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025256:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002525a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025260:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025266:	c1 e0 06             	shl    eax,0x6
c0025269:	01 d0                	add    eax,edx
c002526b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0025272:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0025278:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002527f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025289:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002528f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025296:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002529d:	75 0c                	jne    c00252ab <ATA::open(int, int, void*)+0x61>
c002529f:	83 ec 0c             	sub    esp,0xc
c00252a2:	53                   	push   ebx
c00252a3:	e8 78 ff ff ff       	call   c0025220 <ATA::detectCHS()>
c00252a8:	83 c4 10             	add    esp,0x10
c00252ab:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00252b1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00252b7:	c1 e0 06             	shl    eax,0x6
c00252ba:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00252c1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00252cb:	d1 e8                	shr    eax,1
c00252cd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00252d3:	6a 04                	push   0x4
c00252d5:	6a 0c                	push   0xc
c00252d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00252de:	50                   	push   eax
c00252df:	52                   	push   edx
c00252e0:	e8 53 ea ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252e5:	90                   	nop
c00252e6:	90                   	nop
c00252e7:	6a 00                	push   0x0
c00252e9:	6a 0c                	push   0xc
c00252eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00252f2:	50                   	push   eax
c00252f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00252f9:	e8 3a ea ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252fe:	83 c4 14             	add    esp,0x14
c0025301:	53                   	push   ebx
c0025302:	e8 c7 f3 fe ff       	call   c00146ce <PhysicalDisk::startCache()>
c0025307:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002530a:	e8 79 16 ff ff       	call   c0016988 <createPartitionsForDisk(PhysicalDisk*)>
c002530f:	31 c0                	xor    eax,eax
c0025311:	83 c4 18             	add    esp,0x18
c0025314:	5b                   	pop    ebx
c0025315:	c3                   	ret    

c0025316 <ATAPI::write(unsigned long long, int, void*)>:
c0025316:	b8 03 00 00 00       	mov    eax,0x3
c002531b:	c3                   	ret    

c002531c <ATAPI::close(int, int, void*)>:
c002531c:	83 ec 0c             	sub    esp,0xc
c002531f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025323:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025329:	85 c0                	test   eax,eax
c002532b:	74 0c                	je     c0025339 <ATAPI::close(int, int, void*)+0x1d>
c002532d:	83 ec 0c             	sub    esp,0xc
c0025330:	8b 10                	mov    edx,DWORD PTR [eax]
c0025332:	50                   	push   eax
c0025333:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025336:	83 c4 10             	add    esp,0x10
c0025339:	31 c0                	xor    eax,eax
c002533b:	83 c4 0c             	add    esp,0xc
c002533e:	c3                   	ret    
c002533f:	90                   	nop

c0025340 <ATAPI::ATAPI()>:
c0025340:	83 ec 0c             	sub    esp,0xc
c0025343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025347:	83 ec 04             	sub    esp,0x4
c002534a:	68 00 08 00 00       	push   0x800
c002534f:	68 f1 de 02 c0       	push   0xc002def1
c0025354:	50                   	push   eax
c0025355:	e8 0c f3 fe ff       	call   c0014666 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002535a:	83 c4 10             	add    esp,0x10
c002535d:	ba 0c de 02 c0       	mov    edx,0xc002de0c
c0025362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025366:	89 10                	mov    DWORD PTR [eax],edx
c0025368:	90                   	nop
c0025369:	83 c4 0c             	add    esp,0xc
c002536c:	c3                   	ret    
c002536d:	90                   	nop

c002536e <ATAPI::readyForCommand()>:
c002536e:	56                   	push   esi
c002536f:	53                   	push   ebx
c0025370:	31 db                	xor    ebx,ebx
c0025372:	50                   	push   eax
c0025373:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025377:	50                   	push   eax
c0025378:	6a 0c                	push   0xc
c002537a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0025381:	50                   	push   eax
c0025382:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0025388:	e8 6b ea ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c002538d:	83 c4 10             	add    esp,0x10
c0025390:	a8 88                	test   al,0x88
c0025392:	74 23                	je     c00253b7 <ATAPI::readyForCommand()+0x49>
c0025394:	43                   	inc    ebx
c0025395:	83 fb 63             	cmp    ebx,0x63
c0025398:	7e dd                	jle    c0025377 <ATAPI::readyForCommand()+0x9>
c002539a:	51                   	push   ecx
c002539b:	51                   	push   ecx
c002539c:	6a 00                	push   0x0
c002539e:	68 40 42 0f 00       	push   0xf4240
c00253a3:	e8 3d 96 ff ff       	call   c001e9e5 <nanoSleep(unsigned long long)>
c00253a8:	83 c4 10             	add    esp,0x10
c00253ab:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00253b1:	75 c4                	jne    c0025377 <ATAPI::readyForCommand()+0x9>
c00253b3:	31 c0                	xor    eax,eax
c00253b5:	eb 02                	jmp    c00253b9 <ATAPI::readyForCommand()+0x4b>
c00253b7:	b0 01                	mov    al,0x1
c00253b9:	5a                   	pop    edx
c00253ba:	5b                   	pop    ebx
c00253bb:	5e                   	pop    esi
c00253bc:	c3                   	ret    
c00253bd:	90                   	nop

c00253be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00253be:	55                   	push   ebp
c00253bf:	57                   	push   edi
c00253c0:	56                   	push   esi
c00253c1:	53                   	push   ebx
c00253c2:	83 ec 20             	sub    esp,0x20
c00253c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00253c9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00253cd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00253d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00253d5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00253d9:	6a 01                	push   0x1
c00253db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253e2:	50                   	push   eax
c00253e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253e9:	e8 56 eb ff ff       	call   c0023f44 <IDE::enableIRQs(unsigned char, bool)>
c00253ee:	5e                   	pop    esi
c00253ef:	58                   	pop    eax
c00253f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253f7:	50                   	push   eax
c00253f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253fe:	e8 0f e9 ff ff       	call   c0023d12 <IDE::prepareInterrupt(unsigned char)>
c0025403:	89 3c 24             	mov    DWORD PTR [esp],edi
c0025406:	e8 63 ff ff ff       	call   c002536e <ATAPI::readyForCommand()>
c002540b:	83 c4 10             	add    esp,0x10
c002540e:	84 c0                	test   al,al
c0025410:	75 0a                	jne    c002541c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0025412:	bb 01 00 00 00       	mov    ebx,0x1
c0025417:	e9 57 02 00 00       	jmp    c0025673 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002541c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0025422:	c1 e0 04             	shl    eax,0x4
c0025425:	0f b6 c0             	movzx  eax,al
c0025428:	50                   	push   eax
c0025429:	6a 06                	push   0x6
c002542b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025432:	50                   	push   eax
c0025433:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025439:	e8 fa e8 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002543e:	6a 00                	push   0x0
c0025440:	6a 01                	push   0x1
c0025442:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025449:	50                   	push   eax
c002544a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025450:	e8 e3 e8 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025455:	83 c4 20             	add    esp,0x20
c0025458:	0f b6 c3             	movzx  eax,bl
c002545b:	0f b6 df             	movzx  ebx,bh
c002545e:	50                   	push   eax
c002545f:	6a 04                	push   0x4
c0025461:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025468:	50                   	push   eax
c0025469:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002546f:	e8 c4 e8 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025474:	53                   	push   ebx
c0025475:	6a 05                	push   0x5
c0025477:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002547e:	50                   	push   eax
c002547f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025485:	e8 ae e8 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002548a:	83 c4 20             	add    esp,0x20
c002548d:	68 a0 00 00 00       	push   0xa0
c0025492:	6a 07                	push   0x7
c0025494:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002549b:	50                   	push   eax
c002549c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00254a2:	e8 91 e8 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00254a7:	83 c4 0c             	add    esp,0xc
c00254aa:	6a 01                	push   0x1
c00254ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00254b3:	50                   	push   eax
c00254b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00254ba:	e8 25 f4 ff ff       	call   c00248e4 <IDE::polling(unsigned char, unsigned int)>
c00254bf:	83 c4 10             	add    esp,0x10
c00254c2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00254c8:	84 c0                	test   al,al
c00254ca:	74 23                	je     c00254ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00254cc:	0f b6 d8             	movzx  ebx,al
c00254cf:	0f b6 d2             	movzx  edx,dl
c00254d2:	53                   	push   ebx
c00254d3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00254da:	50                   	push   eax
c00254db:	52                   	push   edx
c00254dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00254e2:	e8 67 f2 ff ff       	call   c002474e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00254e7:	83 c4 10             	add    esp,0x10
c00254ea:	e9 84 01 00 00       	jmp    c0025673 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00254ef:	0f b6 d2             	movzx  edx,dl
c00254f2:	53                   	push   ebx
c00254f3:	53                   	push   ebx
c00254f4:	52                   	push   edx
c00254f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00254fb:	e8 26 e8 ff ff       	call   c0023d26 <IDE::getBase(unsigned char)>
c0025500:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025504:	b9 06 00 00 00       	mov    ecx,0x6
c0025509:	89 c2                	mov    edx,eax
c002550b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002550e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0025512:	83 c4 10             	add    esp,0x10
c0025515:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002551b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025522:	85 db                	test   ebx,ebx
c0025524:	0f 84 ec 00 00 00    	je     c0025616 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002552a:	51                   	push   ecx
c002552b:	51                   	push   ecx
c002552c:	52                   	push   edx
c002552d:	50                   	push   eax
c002552e:	e8 73 e9 ff ff       	call   c0023ea6 <IDE::waitInterrupt(unsigned char)>
c0025533:	83 c4 10             	add    esp,0x10
c0025536:	84 c0                	test   al,al
c0025538:	0f 84 d4 fe ff ff    	je     c0025412 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002553e:	56                   	push   esi
c002553f:	56                   	push   esi
c0025540:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025547:	50                   	push   eax
c0025548:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002554e:	e8 bf e7 ff ff       	call   c0023d12 <IDE::prepareInterrupt(unsigned char)>
c0025553:	83 c4 0c             	add    esp,0xc
c0025556:	6a 04                	push   0x4
c0025558:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002555f:	50                   	push   eax
c0025560:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025566:	e8 8d e8 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c002556b:	83 c4 0c             	add    esp,0xc
c002556e:	89 c6                	mov    esi,eax
c0025570:	6a 05                	push   0x5
c0025572:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025579:	50                   	push   eax
c002557a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025580:	e8 73 e8 ff ff       	call   c0023df8 <IDE::read(unsigned char, unsigned char)>
c0025585:	89 f1                	mov    ecx,esi
c0025587:	0f b6 c0             	movzx  eax,al
c002558a:	0f b6 f1             	movzx  esi,cl
c002558d:	c1 e0 08             	shl    eax,0x8
c0025590:	09 c6                	or     esi,eax
c0025592:	d1 fe                	sar    esi,1
c0025594:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025598:	83 c4 10             	add    esp,0x10
c002559b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00255a0:	74 41                	je     c00255e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00255a2:	31 c9                	xor    ecx,ecx
c00255a4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00255aa:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00255b1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00255b5:	75 0a                	jne    c00255c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00255b7:	01 c9                	add    ecx,ecx
c00255b9:	01 cd                	add    ebp,ecx
c00255bb:	4b                   	dec    ebx
c00255bc:	e9 54 ff ff ff       	jmp    c0025515 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00255c1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00255c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00255ca:	51                   	push   ecx
c00255cb:	51                   	push   ecx
c00255cc:	52                   	push   edx
c00255cd:	50                   	push   eax
c00255ce:	e8 53 e7 ff ff       	call   c0023d26 <IDE::getBase(unsigned char)>
c00255d3:	89 c2                	mov    edx,eax
c00255d5:	89 f0                	mov    eax,esi
c00255d7:	66 ef                	out    dx,ax
c00255d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00255dd:	83 c4 10             	add    esp,0x10
c00255e0:	41                   	inc    ecx
c00255e1:	eb c1                	jmp    c00255a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00255e3:	31 f6                	xor    esi,esi
c00255e5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00255eb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00255f2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00255f6:	75 06                	jne    c00255fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00255f8:	01 f6                	add    esi,esi
c00255fa:	01 f5                	add    ebp,esi
c00255fc:	eb bd                	jmp    c00255bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00255fe:	51                   	push   ecx
c00255ff:	51                   	push   ecx
c0025600:	52                   	push   edx
c0025601:	50                   	push   eax
c0025602:	e8 1f e7 ff ff       	call   c0023d26 <IDE::getBase(unsigned char)>
c0025607:	89 c2                	mov    edx,eax
c0025609:	66 ed                	in     ax,dx
c002560b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025610:	83 c4 10             	add    esp,0x10
c0025613:	46                   	inc    esi
c0025614:	eb cf                	jmp    c00255e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0025616:	51                   	push   ecx
c0025617:	51                   	push   ecx
c0025618:	52                   	push   edx
c0025619:	50                   	push   eax
c002561a:	e8 87 e8 ff ff       	call   c0023ea6 <IDE::waitInterrupt(unsigned char)>
c002561f:	83 c4 10             	add    esp,0x10
c0025622:	84 c0                	test   al,al
c0025624:	0f 84 e8 fd ff ff    	je     c0025412 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002562a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002562f:	52                   	push   edx
c0025630:	52                   	push   edx
c0025631:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025638:	50                   	push   eax
c0025639:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002563f:	e8 ce e6 ff ff       	call   c0023d12 <IDE::prepareInterrupt(unsigned char)>
c0025644:	83 c4 10             	add    esp,0x10
c0025647:	50                   	push   eax
c0025648:	50                   	push   eax
c0025649:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025650:	50                   	push   eax
c0025651:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025657:	e8 ca e6 ff ff       	call   c0023d26 <IDE::getBase(unsigned char)>
c002565c:	8d 50 07             	lea    edx,[eax+0x7]
c002565f:	ec                   	in     al,dx
c0025660:	83 c4 10             	add    esp,0x10
c0025663:	a8 88                	test   al,0x88
c0025665:	74 0a                	je     c0025671 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025667:	4b                   	dec    ebx
c0025668:	75 dd                	jne    c0025647 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002566a:	bb 02 00 00 00       	mov    ebx,0x2
c002566f:	eb 02                	jmp    c0025673 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025671:	31 db                	xor    ebx,ebx
c0025673:	83 c4 1c             	add    esp,0x1c
c0025676:	89 d8                	mov    eax,ebx
c0025678:	5b                   	pop    ebx
c0025679:	5e                   	pop    esi
c002567a:	5f                   	pop    edi
c002567b:	5d                   	pop    ebp
c002567c:	c3                   	ret    
c002567d:	90                   	nop

c002567e <ATAPI::diskRemoved()>:
c002567e:	83 ec 18             	sub    esp,0x18
c0025681:	68 fd de 02 c0       	push   0xc002defd
c0025686:	e8 5c d7 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c002568b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002568f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0025696:	83 c4 1c             	add    esp,0x1c
c0025699:	c3                   	ret    

c002569a <ATAPI::eject()>:
c002569a:	57                   	push   edi
c002569b:	b9 03 00 00 00       	mov    ecx,0x3
c00256a0:	53                   	push   ebx
c00256a1:	83 ec 14             	sub    esp,0x14
c00256a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00256a8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00256ac:	fc                   	cld    
c00256ad:	31 c0                	xor    eax,eax
c00256af:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00256b1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00256b6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00256bb:	50                   	push   eax
c00256bc:	50                   	push   eax
c00256bd:	6a 00                	push   0x0
c00256bf:	6a 00                	push   0x0
c00256c1:	6a 00                	push   0x0
c00256c3:	6a 02                	push   0x2
c00256c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00256c9:	50                   	push   eax
c00256ca:	53                   	push   ebx
c00256cb:	e8 ee fc ff ff       	call   c00253be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00256d0:	83 c4 14             	add    esp,0x14
c00256d3:	53                   	push   ebx
c00256d4:	e8 a5 ff ff ff       	call   c002567e <ATAPI::diskRemoved()>
c00256d9:	83 c4 24             	add    esp,0x24
c00256dc:	31 c0                	xor    eax,eax
c00256de:	5b                   	pop    ebx
c00256df:	5f                   	pop    edi
c00256e0:	c3                   	ret    
c00256e1:	90                   	nop

c00256e2 <ATAPI::diskInserted()>:
c00256e2:	53                   	push   ebx
c00256e3:	83 ec 14             	sub    esp,0x14
c00256e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00256ea:	68 14 df 02 c0       	push   0xc002df14
c00256ef:	e8 f3 d6 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00256f4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00256fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00256fe:	e8 cb ef fe ff       	call   c00146ce <PhysicalDisk::startCache()>
c0025703:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025707:	83 c4 18             	add    esp,0x18
c002570a:	5b                   	pop    ebx
c002570b:	e9 78 12 ff ff       	jmp    c0016988 <createPartitionsForDisk(PhysicalDisk*)>

c0025710 <ATAPI::detectMedia()>:
c0025710:	56                   	push   esi
c0025711:	53                   	push   ebx
c0025712:	83 ec 28             	sub    esp,0x28
c0025715:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025719:	6a 0c                	push   0xc
c002571b:	6a 00                	push   0x0
c002571d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025721:	56                   	push   esi
c0025722:	e8 29 b0 fd ff       	call   c0000750 <memset>
c0025727:	58                   	pop    eax
c0025728:	5a                   	pop    edx
c0025729:	6a 00                	push   0x0
c002572b:	6a 00                	push   0x0
c002572d:	6a 00                	push   0x0
c002572f:	6a 00                	push   0x0
c0025731:	56                   	push   esi
c0025732:	53                   	push   ebx
c0025733:	e8 86 fc ff ff       	call   c00253be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025738:	83 c4 1c             	add    esp,0x1c
c002573b:	6a 0c                	push   0xc
c002573d:	6a 00                	push   0x0
c002573f:	56                   	push   esi
c0025740:	e8 0b b0 fd ff       	call   c0000750 <memset>
c0025745:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002574a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002574f:	59                   	pop    ecx
c0025750:	58                   	pop    eax
c0025751:	6a 01                	push   0x1
c0025753:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025757:	50                   	push   eax
c0025758:	6a 00                	push   0x0
c002575a:	6a 12                	push   0x12
c002575c:	56                   	push   esi
c002575d:	53                   	push   ebx
c002575e:	e8 5b fc ff ff       	call   c00253be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025763:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025767:	83 c4 20             	add    esp,0x20
c002576a:	83 e0 7f             	and    eax,0x7f
c002576d:	3c 70                	cmp    al,0x70
c002576f:	74 15                	je     c0025786 <ATAPI::detectMedia()+0x76>
c0025771:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025778:	75 0c                	jne    c0025786 <ATAPI::detectMedia()+0x76>
c002577a:	83 ec 0c             	sub    esp,0xc
c002577d:	53                   	push   ebx
c002577e:	e8 5f ff ff ff       	call   c00256e2 <ATAPI::diskInserted()>
c0025783:	83 c4 10             	add    esp,0x10
c0025786:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002578a:	83 e0 0f             	and    eax,0xf
c002578d:	3c 02                	cmp    al,0x2
c002578f:	75 1b                	jne    c00257ac <ATAPI::detectMedia()+0x9c>
c0025791:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025796:	75 2d                	jne    c00257c5 <ATAPI::detectMedia()+0xb5>
c0025798:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002579f:	74 24                	je     c00257c5 <ATAPI::detectMedia()+0xb5>
c00257a1:	83 ec 0c             	sub    esp,0xc
c00257a4:	53                   	push   ebx
c00257a5:	e8 d4 fe ff ff       	call   c002567e <ATAPI::diskRemoved()>
c00257aa:	eb 16                	jmp    c00257c2 <ATAPI::detectMedia()+0xb2>
c00257ac:	84 c0                	test   al,al
c00257ae:	75 15                	jne    c00257c5 <ATAPI::detectMedia()+0xb5>
c00257b0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00257b7:	75 0c                	jne    c00257c5 <ATAPI::detectMedia()+0xb5>
c00257b9:	83 ec 0c             	sub    esp,0xc
c00257bc:	53                   	push   ebx
c00257bd:	e8 20 ff ff ff       	call   c00256e2 <ATAPI::diskInserted()>
c00257c2:	83 c4 10             	add    esp,0x10
c00257c5:	83 c4 24             	add    esp,0x24
c00257c8:	5b                   	pop    ebx
c00257c9:	5e                   	pop    esi
c00257ca:	c3                   	ret    
c00257cb:	90                   	nop

c00257cc <ATAPI::open(int, int, void*)>:
c00257cc:	53                   	push   ebx
c00257cd:	83 ec 08             	sub    esp,0x8
c00257d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00257d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00257d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00257dc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00257e2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00257e8:	c1 e0 06             	shl    eax,0x6
c00257eb:	01 d0                	add    eax,edx
c00257ed:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00257f4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00257fa:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025801:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002580b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025811:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025818:	6a 04                	push   0x4
c002581a:	6a 0c                	push   0xc
c002581c:	51                   	push   ecx
c002581d:	52                   	push   edx
c002581e:	e8 15 e5 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025823:	90                   	nop
c0025824:	90                   	nop
c0025825:	6a 00                	push   0x0
c0025827:	6a 0c                	push   0xc
c0025829:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025830:	50                   	push   eax
c0025831:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025837:	e8 fc e4 ff ff       	call   c0023d38 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002583c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025843:	83 c4 14             	add    esp,0x14
c0025846:	53                   	push   ebx
c0025847:	e8 c4 fe ff ff       	call   c0025710 <ATAPI::detectMedia()>
c002584c:	31 c0                	xor    eax,eax
c002584e:	83 c4 18             	add    esp,0x18
c0025851:	5b                   	pop    ebx
c0025852:	c3                   	ret    
c0025853:	90                   	nop

c0025854 <ATAPI::read(unsigned long long, int, void*)>:
c0025854:	55                   	push   ebp
c0025855:	57                   	push   edi
c0025856:	56                   	push   esi
c0025857:	53                   	push   ebx
c0025858:	83 ec 1c             	sub    esp,0x1c
c002585b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002585f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025863:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025867:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002586e:	74 41                	je     c00258b1 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025870:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025874:	b9 03 00 00 00       	mov    ecx,0x3
c0025879:	fc                   	cld    
c002587a:	31 c0                	xor    eax,eax
c002587c:	86 fb                	xchg   bl,bh
c002587e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025880:	c1 c3 10             	rol    ebx,0x10
c0025883:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025888:	89 e8                	mov    eax,ebp
c002588a:	86 fb                	xchg   bl,bh
c002588c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025890:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025894:	50                   	push   eax
c0025895:	50                   	push   eax
c0025896:	55                   	push   ebp
c0025897:	c1 e5 0b             	shl    ebp,0xb
c002589a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002589e:	6a 00                	push   0x0
c00258a0:	55                   	push   ebp
c00258a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00258a5:	50                   	push   eax
c00258a6:	56                   	push   esi
c00258a7:	e8 12 fb ff ff       	call   c00253be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00258ac:	83 c4 20             	add    esp,0x20
c00258af:	eb 1a                	jmp    c00258cb <ATAPI::read(unsigned long long, int, void*)+0x77>
c00258b1:	83 ec 0c             	sub    esp,0xc
c00258b4:	56                   	push   esi
c00258b5:	e8 56 fe ff ff       	call   c0025710 <ATAPI::detectMedia()>
c00258ba:	83 c4 10             	add    esp,0x10
c00258bd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00258c4:	75 aa                	jne    c0025870 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00258c6:	b8 02 00 00 00       	mov    eax,0x2
c00258cb:	83 c4 1c             	add    esp,0x1c
c00258ce:	5b                   	pop    ebx
c00258cf:	5e                   	pop    esi
c00258d0:	5f                   	pop    edi
c00258d1:	5d                   	pop    ebp
c00258d2:	c3                   	ret    
c00258d3:	90                   	nop

c00258d4 <SATA::close(int, int, void*)>:
c00258d4:	83 ec 0c             	sub    esp,0xc
c00258d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258db:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00258e1:	85 c0                	test   eax,eax
c00258e3:	74 0c                	je     c00258f1 <SATA::close(int, int, void*)+0x1d>
c00258e5:	83 ec 0c             	sub    esp,0xc
c00258e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00258ea:	50                   	push   eax
c00258eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00258ee:	83 c4 10             	add    esp,0x10
c00258f1:	31 c0                	xor    eax,eax
c00258f3:	83 c4 0c             	add    esp,0xc
c00258f6:	c3                   	ret    
c00258f7:	90                   	nop

c00258f8 <SATA::powerSaving(PowerSavingLevel)>:
c00258f8:	c3                   	ret    
c00258f9:	90                   	nop

c00258fa <SATA::open(int, int, void*)>:
c00258fa:	56                   	push   esi
c00258fb:	53                   	push   ebx
c00258fc:	50                   	push   eax
c00258fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025901:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025905:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002590f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025915:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002591f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025923:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002592d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025933:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002593a:	e8 6a a5 fe ff       	call   c000fea9 <Phys::allocatePage()>
c002593f:	89 c6                	mov    esi,eax
c0025941:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025947:	81 c6 00 10 00 00    	add    esi,0x1000
c002594d:	e8 57 a5 fe ff       	call   c000fea9 <Phys::allocatePage()>
c0025952:	39 c6                	cmp    esi,eax
c0025954:	74 10                	je     c0025966 <SATA::open(int, int, void*)+0x6c>
c0025956:	83 ec 0c             	sub    esp,0xc
c0025959:	68 3c de 02 c0       	push   0xc002de3c
c002595e:	e8 cc 4f ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0025963:	83 c4 10             	add    esp,0x10
c0025966:	83 ec 0c             	sub    esp,0xc
c0025969:	6a 02                	push   0x2
c002596b:	e8 71 c0 fe ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c0025970:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025976:	6a 03                	push   0x3
c0025978:	50                   	push   eax
c0025979:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002597f:	ff 35 70 f5 02 c0    	push   DWORD PTR ds:0xc002f570
c0025985:	e8 8e c8 fe ff       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c002598a:	83 c4 14             	add    esp,0x14
c002598d:	53                   	push   ebx
c002598e:	e8 3b ed fe ff       	call   c00146ce <PhysicalDisk::startCache()>
c0025993:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025996:	e8 ed 0f ff ff       	call   c0016988 <createPartitionsForDisk(PhysicalDisk*)>
c002599b:	83 c4 14             	add    esp,0x14
c002599e:	31 c0                	xor    eax,eax
c00259a0:	5b                   	pop    ebx
c00259a1:	5e                   	pop    esi
c00259a2:	c3                   	ret    
c00259a3:	90                   	nop

c00259a4 <SATA::SATA()>:
c00259a4:	83 ec 0c             	sub    esp,0xc
c00259a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ab:	83 ec 04             	sub    esp,0x4
c00259ae:	68 00 02 00 00       	push   0x200
c00259b3:	68 50 de 02 c0       	push   0xc002de50
c00259b8:	50                   	push   eax
c00259b9:	e8 a8 ec fe ff       	call   c0014666 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00259be:	83 c4 10             	add    esp,0x10
c00259c1:	ba c0 de 02 c0       	mov    edx,0xc002dec0
c00259c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ca:	89 10                	mov    DWORD PTR [eax],edx
c00259cc:	90                   	nop
c00259cd:	83 c4 0c             	add    esp,0xc
c00259d0:	c3                   	ret    
c00259d1:	90                   	nop

c00259d2 <SATA::access(unsigned long long, int, void*, bool)>:
c00259d2:	55                   	push   ebp
c00259d3:	57                   	push   edi
c00259d4:	56                   	push   esi
c00259d5:	53                   	push   ebx
c00259d6:	83 ec 2c             	sub    esp,0x2c
c00259d9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00259dd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00259e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00259e5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00259e9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00259ed:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00259f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00259f6:	7e 10                	jle    c0025a08 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00259f8:	83 ec 0c             	sub    esp,0xc
c00259fb:	68 60 de 02 c0       	push   0xc002de60
c0025a00:	e8 2a 4f ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0025a05:	83 c4 10             	add    esp,0x10
c0025a08:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025a0e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025a14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a1e:	89 d0                	mov    eax,edx
c0025a20:	c1 e0 07             	shl    eax,0x7
c0025a23:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a27:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025a31:	51                   	push   ecx
c0025a32:	8d 42 02             	lea    eax,[edx+0x2]
c0025a35:	51                   	push   ecx
c0025a36:	c1 e0 07             	shl    eax,0x7
c0025a39:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025a3d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025a41:	50                   	push   eax
c0025a42:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025a48:	e8 af ef ff ff       	call   c00249fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025a4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025a51:	83 c4 10             	add    esp,0x10
c0025a54:	b8 01 00 00 00       	mov    eax,0x1
c0025a59:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025a5e:	0f 84 cb 01 00 00    	je     c0025c2f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025a64:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025a68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025a6c:	c1 e0 09             	shl    eax,0x9
c0025a6f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025a74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025a78:	74 0e                	je     c0025a88 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025a7a:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025a80:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025a84:	89 c1                	mov    ecx,eax
c0025a86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025a88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025a8c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025a92:	8d 42 02             	lea    eax,[edx+0x2]
c0025a95:	c1 e0 07             	shl    eax,0x7
c0025a98:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a9e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025aa4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025aaa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025aae:	c1 e1 05             	shl    ecx,0x5
c0025ab1:	01 c8                	add    eax,ecx
c0025ab3:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025ab7:	83 e1 01             	and    ecx,0x1
c0025aba:	89 ce                	mov    esi,ecx
c0025abc:	8a 08                	mov    cl,BYTE PTR [eax]
c0025abe:	c1 e6 06             	shl    esi,0x6
c0025ac1:	83 e1 bf             	and    ecx,0xffffffbf
c0025ac4:	09 f1                	or     ecx,esi
c0025ac6:	88 08                	mov    BYTE PTR [eax],cl
c0025ac8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025aca:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025ad0:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025ad6:	89 08                	mov    DWORD PTR [eax],ecx
c0025ad8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025ade:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025ae4:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025aea:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025aed:	50                   	push   eax
c0025aee:	68 90 00 00 00       	push   0x90
c0025af3:	6a 00                	push   0x0
c0025af5:	56                   	push   esi
c0025af6:	e8 55 ac fd ff       	call   c0000750 <memset>
c0025afb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025b01:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025b05:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025b0b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025b0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025b13:	83 c4 10             	add    esp,0x10
c0025b16:	48                   	dec    eax
c0025b17:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025b1c:	89 c1                	mov    ecx,eax
c0025b1e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025b24:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025b29:	09 c8                	or     eax,ecx
c0025b2b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025b31:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025b34:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025b3b:	66 25 00 7f          	and    ax,0x7f00
c0025b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025b43:	66 0d 27 80          	or     ax,0x8027
c0025b47:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025b4c:	66 89 06             	mov    WORD PTR [esi],ax
c0025b4f:	19 c0                	sbb    eax,eax
c0025b51:	83 e0 f0             	and    eax,0xfffffff0
c0025b54:	83 c0 35             	add    eax,0x35
c0025b57:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025b5a:	89 e8                	mov    eax,ebp
c0025b5c:	c1 e8 10             	shr    eax,0x10
c0025b5f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025b62:	89 e8                	mov    eax,ebp
c0025b64:	c1 e8 18             	shr    eax,0x18
c0025b67:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025b6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025b6e:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025b71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025b75:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025b78:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025b7c:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025b80:	89 d6                	mov    esi,edx
c0025b82:	31 c0                	xor    eax,eax
c0025b84:	c1 e6 07             	shl    esi,0x7
c0025b87:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025b8b:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025b91:	80 e1 88             	and    cl,0x88
c0025b94:	74 0a                	je     c0025ba0 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025b96:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025b9b:	74 0a                	je     c0025ba7 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025b9d:	40                   	inc    eax
c0025b9e:	eb eb                	jmp    c0025b8b <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025ba0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025ba5:	75 0a                	jne    c0025bb1 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025ba7:	83 ec 0c             	sub    esp,0xc
c0025baa:	68 99 de 02 c0       	push   0xc002de99
c0025baf:	eb 56                	jmp    c0025c07 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025bb1:	b8 01 00 00 00       	mov    eax,0x1
c0025bb6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025bba:	c1 e2 07             	shl    edx,0x7
c0025bbd:	d3 e0                	shl    eax,cl
c0025bbf:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025bc3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025bc9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025bcf:	85 c8                	test   eax,ecx
c0025bd1:	74 20                	je     c0025bf3 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025bd3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025bd9:	0f ba e1 1e          	bt     ecx,0x1e
c0025bdd:	73 ea                	jae    c0025bc9 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025bdf:	83 ec 0c             	sub    esp,0xc
c0025be2:	68 a7 de 02 c0       	push   0xc002dea7
c0025be7:	e8 43 4d ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0025bec:	83 c4 10             	add    esp,0x10
c0025bef:	31 c0                	xor    eax,eax
c0025bf1:	eb 3c                	jmp    c0025c2f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025bf3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025bf9:	0f ba e0 1e          	bt     eax,0x1e
c0025bfd:	73 17                	jae    c0025c16 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025bff:	83 ec 0c             	sub    esp,0xc
c0025c02:	68 a7 de 02 c0       	push   0xc002dea7
c0025c07:	e8 23 4d ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0025c0c:	83 c4 10             	add    esp,0x10
c0025c0f:	b8 01 00 00 00       	mov    eax,0x1
c0025c14:	eb 19                	jmp    c0025c2f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025c16:	31 c0                	xor    eax,eax
c0025c18:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025c1d:	75 10                	jne    c0025c2f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025c1f:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025c25:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025c29:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025c2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025c2f:	83 c4 2c             	add    esp,0x2c
c0025c32:	5b                   	pop    ebx
c0025c33:	5e                   	pop    esi
c0025c34:	5f                   	pop    edi
c0025c35:	5d                   	pop    ebp
c0025c36:	c3                   	ret    
c0025c37:	90                   	nop

c0025c38 <SATA::read(unsigned long long, int, void*)>:
c0025c38:	57                   	push   edi
c0025c39:	b8 04 00 00 00       	mov    eax,0x4
c0025c3e:	56                   	push   esi
c0025c3f:	53                   	push   ebx
c0025c40:	83 ec 10             	sub    esp,0x10
c0025c43:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025c47:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025c4b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025c4e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025c52:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025c56:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025c5c:	77 3b                	ja     c0025c99 <SATA::read(unsigned long long, int, void*)+0x61>
c0025c5e:	b8 06 00 00 00       	mov    eax,0x6
c0025c63:	85 d2                	test   edx,edx
c0025c65:	74 32                	je     c0025c99 <SATA::read(unsigned long long, int, void*)+0x61>
c0025c67:	50                   	push   eax
c0025c68:	50                   	push   eax
c0025c69:	6a 00                	push   0x0
c0025c6b:	52                   	push   edx
c0025c6c:	53                   	push   ebx
c0025c6d:	57                   	push   edi
c0025c6e:	56                   	push   esi
c0025c6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025c73:	e8 5a fd ff ff       	call   c00259d2 <SATA::access(unsigned long long, int, void*, bool)>
c0025c78:	83 c4 20             	add    esp,0x20
c0025c7b:	85 c0                	test   eax,eax
c0025c7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025c81:	75 11                	jne    c0025c94 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025c83:	01 1d 58 37 03 c0    	add    DWORD PTR ds:0xc0033758,ebx
c0025c89:	e8 5e ac fe ff       	call   c00108ec <VgaText::updateDiskUsage()>
c0025c8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c92:	eb 05                	jmp    c0025c99 <SATA::read(unsigned long long, int, void*)+0x61>
c0025c94:	b8 01 00 00 00       	mov    eax,0x1
c0025c99:	83 c4 10             	add    esp,0x10
c0025c9c:	5b                   	pop    ebx
c0025c9d:	5e                   	pop    esi
c0025c9e:	5f                   	pop    edi
c0025c9f:	c3                   	ret    

c0025ca0 <SATA::write(unsigned long long, int, void*)>:
c0025ca0:	55                   	push   ebp
c0025ca1:	b8 04 00 00 00       	mov    eax,0x4
c0025ca6:	57                   	push   edi
c0025ca7:	56                   	push   esi
c0025ca8:	53                   	push   ebx
c0025ca9:	83 ec 1c             	sub    esp,0x1c
c0025cac:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025cb0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025cb4:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025cb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025cbb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025cbf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025cc5:	77 56                	ja     c0025d1d <SATA::write(unsigned long long, int, void*)+0x7d>
c0025cc7:	b8 06 00 00 00       	mov    eax,0x6
c0025ccc:	85 ff                	test   edi,edi
c0025cce:	74 4d                	je     c0025d1d <SATA::write(unsigned long long, int, void*)+0x7d>
c0025cd0:	89 ee                	mov    esi,ebp
c0025cd2:	c1 e6 09             	shl    esi,0x9
c0025cd5:	01 fe                	add    esi,edi
c0025cd7:	89 c8                	mov    eax,ecx
c0025cd9:	89 da                	mov    edx,ebx
c0025cdb:	83 c0 01             	add    eax,0x1
c0025cde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025ce2:	83 d2 00             	adc    edx,0x0
c0025ce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025ce9:	50                   	push   eax
c0025cea:	50                   	push   eax
c0025ceb:	6a 01                	push   0x1
c0025ced:	57                   	push   edi
c0025cee:	81 c7 00 02 00 00    	add    edi,0x200
c0025cf4:	6a 01                	push   0x1
c0025cf6:	53                   	push   ebx
c0025cf7:	51                   	push   ecx
c0025cf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025cfc:	e8 d1 fc ff ff       	call   c00259d2 <SATA::access(unsigned long long, int, void*, bool)>
c0025d01:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025d05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025d09:	83 c4 20             	add    esp,0x20
c0025d0c:	39 f7                	cmp    edi,esi
c0025d0e:	75 c7                	jne    c0025cd7 <SATA::write(unsigned long long, int, void*)+0x37>
c0025d10:	01 2d 54 37 03 c0    	add    DWORD PTR ds:0xc0033754,ebp
c0025d16:	e8 d1 ab fe ff       	call   c00108ec <VgaText::updateDiskUsage()>
c0025d1b:	31 c0                	xor    eax,eax
c0025d1d:	83 c4 1c             	add    esp,0x1c
c0025d20:	5b                   	pop    ebx
c0025d21:	5e                   	pop    esi
c0025d22:	5f                   	pop    edi
c0025d23:	5d                   	pop    ebp
c0025d24:	c3                   	ret    
c0025d25:	90                   	nop

c0025d26 <SATAPI::write(unsigned long long, int, void*)>:
c0025d26:	b8 03 00 00 00       	mov    eax,0x3
c0025d2b:	c3                   	ret    

c0025d2c <SATAPI::close(int, int, void*)>:
c0025d2c:	83 ec 0c             	sub    esp,0xc
c0025d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d33:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025d39:	85 c0                	test   eax,eax
c0025d3b:	74 0c                	je     c0025d49 <SATAPI::close(int, int, void*)+0x1d>
c0025d3d:	83 ec 0c             	sub    esp,0xc
c0025d40:	8b 10                	mov    edx,DWORD PTR [eax]
c0025d42:	50                   	push   eax
c0025d43:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025d46:	83 c4 10             	add    esp,0x10
c0025d49:	31 c0                	xor    eax,eax
c0025d4b:	83 c4 0c             	add    esp,0xc
c0025d4e:	c3                   	ret    
c0025d4f:	90                   	nop

c0025d50 <SATAPI::SATAPI()>:
c0025d50:	83 ec 0c             	sub    esp,0xc
c0025d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d57:	83 ec 04             	sub    esp,0x4
c0025d5a:	68 00 08 00 00       	push   0x800
c0025d5f:	68 f0 de 02 c0       	push   0xc002def0
c0025d64:	50                   	push   eax
c0025d65:	e8 fc e8 fe ff       	call   c0014666 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025d6a:	83 c4 10             	add    esp,0x10
c0025d6d:	ba 9c df 02 c0       	mov    edx,0xc002df9c
c0025d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d76:	89 10                	mov    DWORD PTR [eax],edx
c0025d78:	90                   	nop
c0025d79:	83 c4 0c             	add    esp,0xc
c0025d7c:	c3                   	ret    
c0025d7d:	90                   	nop

c0025d7e <SATAPI::diskRemoved()>:
c0025d7e:	83 ec 18             	sub    esp,0x18
c0025d81:	68 fc de 02 c0       	push   0xc002defc
c0025d86:	e8 5c d0 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0025d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d8f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025d96:	83 c4 1c             	add    esp,0x1c
c0025d99:	c3                   	ret    

c0025d9a <SATAPI::diskInserted()>:
c0025d9a:	53                   	push   ebx
c0025d9b:	83 ec 14             	sub    esp,0x14
c0025d9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025da2:	68 13 df 02 c0       	push   0xc002df13
c0025da7:	e8 3b d0 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0025dac:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025db3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025db6:	e8 13 e9 fe ff       	call   c00146ce <PhysicalDisk::startCache()>
c0025dbb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025dbf:	83 c4 18             	add    esp,0x18
c0025dc2:	5b                   	pop    ebx
c0025dc3:	e9 c0 0b ff ff       	jmp    c0016988 <createPartitionsForDisk(PhysicalDisk*)>

c0025dc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025dc8:	55                   	push   ebp
c0025dc9:	57                   	push   edi
c0025dca:	56                   	push   esi
c0025dcb:	53                   	push   ebx
c0025dcc:	83 ec 34             	sub    esp,0x34
c0025dcf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025dd3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025dd7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025ddb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025ddf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025de3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025de9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025def:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025df3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025df9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025dfd:	c1 e0 07             	shl    eax,0x7
c0025e00:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025e04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025e08:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025e12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e16:	8d 58 02             	lea    ebx,[eax+0x2]
c0025e19:	c1 e3 07             	shl    ebx,0x7
c0025e1c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025e20:	53                   	push   ebx
c0025e21:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025e27:	e8 d0 eb ff ff       	call   c00249fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025e2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025e30:	83 c4 10             	add    esp,0x10
c0025e33:	b8 01 00 00 00       	mov    eax,0x1
c0025e38:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025e3d:	0f 84 85 01 00 00    	je     c0025fc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025e43:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025e49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025e4b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025e51:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025e57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e5b:	c1 e1 05             	shl    ecx,0x5
c0025e5e:	01 c8                	add    eax,ecx
c0025e60:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025e62:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025e68:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025e6e:	89 08                	mov    DWORD PTR [eax],ecx
c0025e70:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025e76:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025e7c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025e82:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025e85:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025e88:	50                   	push   eax
c0025e89:	68 90 00 00 00       	push   0x90
c0025e8e:	6a 00                	push   0x0
c0025e90:	53                   	push   ebx
c0025e91:	e8 ba a8 fd ff       	call   c0000750 <memset>
c0025e96:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025e9a:	b9 0c 00 00 00       	mov    ecx,0xc
c0025e9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025ea1:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025ea7:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025eab:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025eb1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025eb5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025eb9:	48                   	dec    eax
c0025eba:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025ebf:	89 c1                	mov    ecx,eax
c0025ec1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025ec7:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025ecc:	09 c8                	or     eax,ecx
c0025ece:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025ed4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025ed7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025ede:	66 25 00 7f          	and    ax,0x7f00
c0025ee2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025ee6:	66 0d 27 80          	or     ax,0x8027
c0025eea:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025eee:	66 89 03             	mov    WORD PTR [ebx],ax
c0025ef1:	89 d0                	mov    eax,edx
c0025ef3:	c1 ea 18             	shr    edx,0x18
c0025ef6:	c1 e8 10             	shr    eax,0x10
c0025ef9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025efc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025eff:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025f03:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025f06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025f0a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025f0d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025f11:	83 c4 10             	add    esp,0x10
c0025f14:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025f18:	31 c0                	xor    eax,eax
c0025f1a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025f1e:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025f24:	80 e2 88             	and    dl,0x88
c0025f27:	74 0a                	je     c0025f33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025f29:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025f2e:	74 0a                	je     c0025f3a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025f30:	40                   	inc    eax
c0025f31:	eb eb                	jmp    c0025f1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025f33:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025f38:	75 0f                	jne    c0025f49 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025f3a:	83 ec 0c             	sub    esp,0xc
c0025f3d:	68 99 de 02 c0       	push   0xc002de99
c0025f42:	e8 e8 49 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0025f47:	eb 3f                	jmp    c0025f88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025f49:	ba 01 00 00 00       	mov    edx,0x1
c0025f4e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025f52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f56:	d3 e2                	shl    edx,cl
c0025f58:	c1 e0 07             	shl    eax,0x7
c0025f5b:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025f61:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025f65:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025f6b:	85 ca                	test   edx,ecx
c0025f6d:	74 23                	je     c0025f92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025f6f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025f75:	0f ba e1 1e          	bt     ecx,0x1e
c0025f79:	73 ea                	jae    c0025f65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025f7b:	83 ec 0c             	sub    esp,0xc
c0025f7e:	68 2b df 02 c0       	push   0xc002df2b
c0025f83:	e8 5f ce fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0025f88:	83 c4 10             	add    esp,0x10
c0025f8b:	b8 01 00 00 00       	mov    eax,0x1
c0025f90:	eb 36                	jmp    c0025fc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025f92:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025f98:	0f ba e0 1e          	bt     eax,0x1e
c0025f9c:	73 0a                	jae    c0025fa8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025f9e:	83 ec 0c             	sub    esp,0xc
c0025fa1:	68 3e df 02 c0       	push   0xc002df3e
c0025fa6:	eb db                	jmp    c0025f83 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025fa8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025fad:	74 17                	je     c0025fc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025faf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025fb4:	74 10                	je     c0025fc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025fb6:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025fbc:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025fc0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025fc4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025fc6:	31 c0                	xor    eax,eax
c0025fc8:	83 c4 2c             	add    esp,0x2c
c0025fcb:	5b                   	pop    ebx
c0025fcc:	5e                   	pop    esi
c0025fcd:	5f                   	pop    edi
c0025fce:	5d                   	pop    ebp
c0025fcf:	c3                   	ret    

c0025fd0 <SATAPI::eject()>:
c0025fd0:	57                   	push   edi
c0025fd1:	b9 03 00 00 00       	mov    ecx,0x3
c0025fd6:	53                   	push   ebx
c0025fd7:	83 ec 14             	sub    esp,0x14
c0025fda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025fde:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025fe2:	fc                   	cld    
c0025fe3:	31 c0                	xor    eax,eax
c0025fe5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025fe7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025fec:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025ff1:	50                   	push   eax
c0025ff2:	6a 00                	push   0x0
c0025ff4:	6a 00                	push   0x0
c0025ff6:	6a 00                	push   0x0
c0025ff8:	6a 00                	push   0x0
c0025ffa:	6a 02                	push   0x2
c0025ffc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026000:	50                   	push   eax
c0026001:	53                   	push   ebx
c0026002:	e8 c1 fd ff ff       	call   c0025dc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0026007:	83 c4 14             	add    esp,0x14
c002600a:	53                   	push   ebx
c002600b:	e8 6e fd ff ff       	call   c0025d7e <SATAPI::diskRemoved()>
c0026010:	83 c4 24             	add    esp,0x24
c0026013:	31 c0                	xor    eax,eax
c0026015:	5b                   	pop    ebx
c0026016:	5f                   	pop    edi
c0026017:	c3                   	ret    

c0026018 <SATAPI::detectMedia()>:
c0026018:	56                   	push   esi
c0026019:	53                   	push   ebx
c002601a:	83 ec 28             	sub    esp,0x28
c002601d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026021:	6a 0c                	push   0xc
c0026023:	6a 00                	push   0x0
c0026025:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0026029:	56                   	push   esi
c002602a:	e8 21 a7 fd ff       	call   c0000750 <memset>
c002602f:	83 c4 0c             	add    esp,0xc
c0026032:	6a 00                	push   0x0
c0026034:	6a 00                	push   0x0
c0026036:	6a 00                	push   0x0
c0026038:	6a 00                	push   0x0
c002603a:	6a 00                	push   0x0
c002603c:	56                   	push   esi
c002603d:	53                   	push   ebx
c002603e:	e8 85 fd ff ff       	call   c0025dc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0026043:	83 c4 1c             	add    esp,0x1c
c0026046:	6a 0c                	push   0xc
c0026048:	6a 00                	push   0x0
c002604a:	56                   	push   esi
c002604b:	e8 00 a7 fd ff       	call   c0000750 <memset>
c0026050:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0026055:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002605a:	83 c4 0c             	add    esp,0xc
c002605d:	6a 01                	push   0x1
c002605f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0026063:	50                   	push   eax
c0026064:	6a 00                	push   0x0
c0026066:	6a 00                	push   0x0
c0026068:	6a 12                	push   0x12
c002606a:	56                   	push   esi
c002606b:	53                   	push   ebx
c002606c:	e8 57 fd ff ff       	call   c0025dc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0026071:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0026075:	83 c4 20             	add    esp,0x20
c0026078:	83 e0 7f             	and    eax,0x7f
c002607b:	3c 70                	cmp    al,0x70
c002607d:	74 15                	je     c0026094 <SATAPI::detectMedia()+0x7c>
c002607f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0026086:	75 0c                	jne    c0026094 <SATAPI::detectMedia()+0x7c>
c0026088:	83 ec 0c             	sub    esp,0xc
c002608b:	53                   	push   ebx
c002608c:	e8 09 fd ff ff       	call   c0025d9a <SATAPI::diskInserted()>
c0026091:	83 c4 10             	add    esp,0x10
c0026094:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0026098:	83 e0 0f             	and    eax,0xf
c002609b:	3c 02                	cmp    al,0x2
c002609d:	75 1b                	jne    c00260ba <SATAPI::detectMedia()+0xa2>
c002609f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00260a4:	75 2d                	jne    c00260d3 <SATAPI::detectMedia()+0xbb>
c00260a6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00260ad:	74 24                	je     c00260d3 <SATAPI::detectMedia()+0xbb>
c00260af:	83 ec 0c             	sub    esp,0xc
c00260b2:	53                   	push   ebx
c00260b3:	e8 c6 fc ff ff       	call   c0025d7e <SATAPI::diskRemoved()>
c00260b8:	eb 16                	jmp    c00260d0 <SATAPI::detectMedia()+0xb8>
c00260ba:	84 c0                	test   al,al
c00260bc:	75 15                	jne    c00260d3 <SATAPI::detectMedia()+0xbb>
c00260be:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00260c5:	75 0c                	jne    c00260d3 <SATAPI::detectMedia()+0xbb>
c00260c7:	83 ec 0c             	sub    esp,0xc
c00260ca:	53                   	push   ebx
c00260cb:	e8 ca fc ff ff       	call   c0025d9a <SATAPI::diskInserted()>
c00260d0:	83 c4 10             	add    esp,0x10
c00260d3:	83 c4 24             	add    esp,0x24
c00260d6:	5b                   	pop    ebx
c00260d7:	5e                   	pop    esi
c00260d8:	c3                   	ret    
c00260d9:	90                   	nop

c00260da <SATAPI::open(int, int, void*)>:
c00260da:	56                   	push   esi
c00260db:	53                   	push   ebx
c00260dc:	50                   	push   eax
c00260dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00260e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260e5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00260ef:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00260f5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00260ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026103:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002610d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0026113:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002611a:	e8 8a 9d fe ff       	call   c000fea9 <Phys::allocatePage()>
c002611f:	89 c6                	mov    esi,eax
c0026121:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0026127:	81 c6 00 10 00 00    	add    esi,0x1000
c002612d:	e8 77 9d fe ff       	call   c000fea9 <Phys::allocatePage()>
c0026132:	39 c6                	cmp    esi,eax
c0026134:	74 10                	je     c0026146 <SATAPI::open(int, int, void*)+0x6c>
c0026136:	83 ec 0c             	sub    esp,0xc
c0026139:	68 53 df 02 c0       	push   0xc002df53
c002613e:	e8 ec 47 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0026143:	83 c4 10             	add    esp,0x10
c0026146:	83 ec 0c             	sub    esp,0xc
c0026149:	6a 02                	push   0x2
c002614b:	e8 91 b8 fe ff       	call   c00119e1 <Virt::allocateKernelVirtualPages(int)>
c0026150:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0026156:	6a 03                	push   0x3
c0026158:	50                   	push   eax
c0026159:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002615f:	ff 35 70 f5 02 c0    	push   DWORD PTR ds:0xc002f570
c0026165:	e8 ae c0 fe ff       	call   c0012218 <VAS::mapPage(unsigned long, unsigned long, int)>
c002616a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0026171:	83 c4 14             	add    esp,0x14
c0026174:	53                   	push   ebx
c0026175:	e8 9e fe ff ff       	call   c0026018 <SATAPI::detectMedia()>
c002617a:	83 c4 14             	add    esp,0x14
c002617d:	31 c0                	xor    eax,eax
c002617f:	5b                   	pop    ebx
c0026180:	5e                   	pop    esi
c0026181:	c3                   	ret    

c0026182 <SATAPI::read(unsigned long long, int, void*)>:
c0026182:	55                   	push   ebp
c0026183:	57                   	push   edi
c0026184:	56                   	push   esi
c0026185:	53                   	push   ebx
c0026186:	83 ec 1c             	sub    esp,0x1c
c0026189:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002618d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026191:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0026195:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002619c:	74 19                	je     c00261b7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002619e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00261a3:	7e 2e                	jle    c00261d3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00261a5:	83 ec 0c             	sub    esp,0xc
c00261a8:	68 69 df 02 c0       	push   0xc002df69
c00261ad:	e8 7d 47 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c00261b2:	83 c4 10             	add    esp,0x10
c00261b5:	eb 1c                	jmp    c00261d3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00261b7:	83 ec 0c             	sub    esp,0xc
c00261ba:	55                   	push   ebp
c00261bb:	e8 58 fe ff ff       	call   c0026018 <SATAPI::detectMedia()>
c00261c0:	83 c4 10             	add    esp,0x10
c00261c3:	b8 02 00 00 00       	mov    eax,0x2
c00261c8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00261cf:	75 cd                	jne    c002619e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00261d1:	eb 49                	jmp    c002621c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00261d3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00261d7:	b9 03 00 00 00       	mov    ecx,0x3
c00261dc:	fc                   	cld    
c00261dd:	31 c0                	xor    eax,eax
c00261df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00261e1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00261e6:	89 d8                	mov    eax,ebx
c00261e8:	86 e0                	xchg   al,ah
c00261ea:	c1 c0 10             	rol    eax,0x10
c00261ed:	86 e0                	xchg   al,ah
c00261ef:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00261f3:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00261f7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00261fb:	50                   	push   eax
c00261fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026200:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026204:	56                   	push   esi
c0026205:	53                   	push   ebx
c0026206:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002620a:	c1 e0 0b             	shl    eax,0xb
c002620d:	50                   	push   eax
c002620e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026212:	50                   	push   eax
c0026213:	55                   	push   ebp
c0026214:	e8 af fb ff ff       	call   c0025dc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0026219:	83 c4 20             	add    esp,0x20
c002621c:	83 c4 1c             	add    esp,0x1c
c002621f:	5b                   	pop    ebx
c0026220:	5e                   	pop    esi
c0026221:	5f                   	pop    edi
c0026222:	5d                   	pop    ebp
c0026223:	c3                   	ret    

c0026224 <AVX::open(int, int, void*)>:
c0026224:	83 ec 0c             	sub    esp,0xc
c0026227:	e8 3c 11 00 00       	call   c0027368 <avxInit>
c002622c:	b8 00 00 00 00       	mov    eax,0x0
c0026231:	83 c4 0c             	add    esp,0xc
c0026234:	c3                   	ret    
c0026235:	90                   	nop

c0026236 <AVX::close(int, int, void*)>:
c0026236:	83 ec 0c             	sub    esp,0xc
c0026239:	e8 2b 11 00 00       	call   c0027369 <avxClose>
c002623e:	b8 00 00 00 00       	mov    eax,0x0
c0026243:	83 c4 0c             	add    esp,0xc
c0026246:	c3                   	ret    
c0026247:	90                   	nop

c0026248 <AVX::available()>:
c0026248:	83 ec 0c             	sub    esp,0xc
c002624b:	e8 10 11 00 00       	call   c0027360 <avxDetect>
c0026250:	85 c0                	test   eax,eax
c0026252:	0f 95 c0             	setne  al
c0026255:	83 c4 0c             	add    esp,0xc
c0026258:	c3                   	ret    
c0026259:	90                   	nop

c002625a <AVX::save(void*)>:
c002625a:	83 ec 0c             	sub    esp,0xc
c002625d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026261:	83 ec 0c             	sub    esp,0xc
c0026264:	50                   	push   eax
c0026265:	e8 fc 10 00 00       	call   c0027366 <avxSave>
c002626a:	83 c4 10             	add    esp,0x10
c002626d:	90                   	nop
c002626e:	83 c4 0c             	add    esp,0xc
c0026271:	c3                   	ret    

c0026272 <AVX::load(void*)>:
c0026272:	83 ec 0c             	sub    esp,0xc
c0026275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026279:	83 ec 0c             	sub    esp,0xc
c002627c:	50                   	push   eax
c002627d:	e8 e5 10 00 00       	call   c0027367 <avxLoad>
c0026282:	83 c4 10             	add    esp,0x10
c0026285:	90                   	nop
c0026286:	83 c4 0c             	add    esp,0xc
c0026289:	c3                   	ret    

c002628a <AVX::AVX()>:
c002628a:	83 ec 0c             	sub    esp,0xc
c002628d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026291:	83 ec 08             	sub    esp,0x8
c0026294:	68 cc df 02 c0       	push   0xc002dfcc
c0026299:	50                   	push   eax
c002629a:	e8 a5 e4 fe ff       	call   c0014744 <FPU::FPU(char const*)>
c002629f:	83 c4 10             	add    esp,0x10
c00262a2:	ba dc df 02 c0       	mov    edx,0xc002dfdc
c00262a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ab:	89 10                	mov    DWORD PTR [eax],edx
c00262ad:	90                   	nop
c00262ae:	83 c4 0c             	add    esp,0xc
c00262b1:	c3                   	ret    

c00262b2 <MMX::available()>:
c00262b2:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00262b7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00262bd:	83 e0 20             	and    eax,0x20
c00262c0:	84 c0                	test   al,al
c00262c2:	0f 95 c0             	setne  al
c00262c5:	c3                   	ret    

c00262c6 <MMX::open(int, int, void*)>:
c00262c6:	83 ec 0c             	sub    esp,0xc
c00262c9:	e8 24 11 00 00       	call   c00273f2 <x87Init>
c00262ce:	b8 00 00 00 00       	mov    eax,0x0
c00262d3:	83 c4 0c             	add    esp,0xc
c00262d6:	c3                   	ret    
c00262d7:	90                   	nop

c00262d8 <MMX::close(int, int, void*)>:
c00262d8:	83 ec 0c             	sub    esp,0xc
c00262db:	e8 2c 11 00 00       	call   c002740c <x87Close>
c00262e0:	b8 00 00 00 00       	mov    eax,0x0
c00262e5:	83 c4 0c             	add    esp,0xc
c00262e8:	c3                   	ret    
c00262e9:	90                   	nop

c00262ea <MMX::save(void*)>:
c00262ea:	83 ec 0c             	sub    esp,0xc
c00262ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262f1:	83 ec 0c             	sub    esp,0xc
c00262f4:	50                   	push   eax
c00262f5:	e8 e7 10 00 00       	call   c00273e1 <x87Save>
c00262fa:	83 c4 10             	add    esp,0x10
c00262fd:	90                   	nop
c00262fe:	83 c4 0c             	add    esp,0xc
c0026301:	c3                   	ret    

c0026302 <MMX::load(void*)>:
c0026302:	83 ec 0c             	sub    esp,0xc
c0026305:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026309:	83 ec 0c             	sub    esp,0xc
c002630c:	50                   	push   eax
c002630d:	e8 d8 10 00 00       	call   c00273ea <x87Load>
c0026312:	83 c4 10             	add    esp,0x10
c0026315:	90                   	nop
c0026316:	83 c4 0c             	add    esp,0xc
c0026319:	c3                   	ret    

c002631a <MMX::MMX()>:
c002631a:	83 ec 0c             	sub    esp,0xc
c002631d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026321:	83 ec 08             	sub    esp,0x8
c0026324:	68 0c e0 02 c0       	push   0xc002e00c
c0026329:	50                   	push   eax
c002632a:	e8 15 e4 fe ff       	call   c0014744 <FPU::FPU(char const*)>
c002632f:	83 c4 10             	add    esp,0x10
c0026332:	ba 1c e0 02 c0       	mov    edx,0xc002e01c
c0026337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002633b:	89 10                	mov    DWORD PTR [eax],edx
c002633d:	90                   	nop
c002633e:	83 c4 0c             	add    esp,0xc
c0026341:	c3                   	ret    

c0026342 <SSE::open(int, int, void*)>:
c0026342:	83 ec 0c             	sub    esp,0xc
c0026345:	e8 5a 10 00 00       	call   c00273a4 <sseInit>
c002634a:	b8 00 00 00 00       	mov    eax,0x0
c002634f:	83 c4 0c             	add    esp,0xc
c0026352:	c3                   	ret    
c0026353:	90                   	nop

c0026354 <SSE::close(int, int, void*)>:
c0026354:	83 ec 0c             	sub    esp,0xc
c0026357:	e8 58 10 00 00       	call   c00273b4 <sseClose>
c002635c:	b8 00 00 00 00       	mov    eax,0x0
c0026361:	83 c4 0c             	add    esp,0xc
c0026364:	c3                   	ret    
c0026365:	90                   	nop

c0026366 <SSE::available()>:
c0026366:	83 ec 1c             	sub    esp,0x1c
c0026369:	e8 12 10 00 00       	call   c0027380 <absolutelyNoChanceInHell>
c002636e:	85 c0                	test   eax,eax
c0026370:	0f 95 c0             	setne  al
c0026373:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026377:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002637b:	83 c4 1c             	add    esp,0x1c
c002637e:	c3                   	ret    
c002637f:	90                   	nop

c0026380 <SSE::save(void*)>:
c0026380:	83 ec 0c             	sub    esp,0xc
c0026383:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026387:	83 ec 0c             	sub    esp,0xc
c002638a:	50                   	push   eax
c002638b:	e8 08 10 00 00       	call   c0027398 <sseSave>
c0026390:	83 c4 10             	add    esp,0x10
c0026393:	90                   	nop
c0026394:	83 c4 0c             	add    esp,0xc
c0026397:	c3                   	ret    

c0026398 <SSE::load(void*)>:
c0026398:	83 ec 0c             	sub    esp,0xc
c002639b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002639f:	83 ec 0c             	sub    esp,0xc
c00263a2:	50                   	push   eax
c00263a3:	e8 f6 0f 00 00       	call   c002739e <sseLoad>
c00263a8:	83 c4 10             	add    esp,0x10
c00263ab:	90                   	nop
c00263ac:	83 c4 0c             	add    esp,0xc
c00263af:	c3                   	ret    

c00263b0 <SSE::SSE()>:
c00263b0:	83 ec 0c             	sub    esp,0xc
c00263b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b7:	83 ec 08             	sub    esp,0x8
c00263ba:	68 4c e0 02 c0       	push   0xc002e04c
c00263bf:	50                   	push   eax
c00263c0:	e8 7f e3 fe ff       	call   c0014744 <FPU::FPU(char const*)>
c00263c5:	83 c4 10             	add    esp,0x10
c00263c8:	ba 5c e0 02 c0       	mov    edx,0xc002e05c
c00263cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d1:	89 10                	mov    DWORD PTR [eax],edx
c00263d3:	90                   	nop
c00263d4:	83 c4 0c             	add    esp,0xc
c00263d7:	c3                   	ret    

c00263d8 <x87::open(int, int, void*)>:
c00263d8:	83 ec 0c             	sub    esp,0xc
c00263db:	e8 12 10 00 00       	call   c00273f2 <x87Init>
c00263e0:	b8 00 00 00 00       	mov    eax,0x0
c00263e5:	83 c4 0c             	add    esp,0xc
c00263e8:	c3                   	ret    
c00263e9:	90                   	nop

c00263ea <x87::close(int, int, void*)>:
c00263ea:	83 ec 0c             	sub    esp,0xc
c00263ed:	e8 1a 10 00 00       	call   c002740c <x87Close>
c00263f2:	b8 00 00 00 00       	mov    eax,0x0
c00263f7:	83 c4 0c             	add    esp,0xc
c00263fa:	c3                   	ret    
c00263fb:	90                   	nop

c00263fc <x87::available()>:
c00263fc:	83 ec 0c             	sub    esp,0xc
c00263ff:	e8 c2 0f 00 00       	call   c00273c6 <x87Detect>
c0026404:	85 c0                	test   eax,eax
c0026406:	0f 95 c0             	setne  al
c0026409:	83 c4 0c             	add    esp,0xc
c002640c:	c3                   	ret    
c002640d:	90                   	nop

c002640e <x87::save(void*)>:
c002640e:	83 ec 0c             	sub    esp,0xc
c0026411:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026415:	83 ec 0c             	sub    esp,0xc
c0026418:	50                   	push   eax
c0026419:	e8 c3 0f 00 00       	call   c00273e1 <x87Save>
c002641e:	83 c4 10             	add    esp,0x10
c0026421:	90                   	nop
c0026422:	83 c4 0c             	add    esp,0xc
c0026425:	c3                   	ret    

c0026426 <x87::load(void*)>:
c0026426:	83 ec 0c             	sub    esp,0xc
c0026429:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002642d:	83 ec 0c             	sub    esp,0xc
c0026430:	50                   	push   eax
c0026431:	e8 b4 0f 00 00       	call   c00273ea <x87Load>
c0026436:	83 c4 10             	add    esp,0x10
c0026439:	90                   	nop
c002643a:	83 c4 0c             	add    esp,0xc
c002643d:	c3                   	ret    

c002643e <x87::x87()>:
c002643e:	83 ec 0c             	sub    esp,0xc
c0026441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026445:	83 ec 08             	sub    esp,0x8
c0026448:	68 8c e0 02 c0       	push   0xc002e08c
c002644d:	50                   	push   eax
c002644e:	e8 f1 e2 fe ff       	call   c0014744 <FPU::FPU(char const*)>
c0026453:	83 c4 10             	add    esp,0x10
c0026456:	ba 9c e0 02 c0       	mov    edx,0xc002e09c
c002645b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002645f:	89 10                	mov    DWORD PTR [eax],edx
c0026461:	90                   	nop
c0026462:	83 c4 0c             	add    esp,0xc
c0026465:	c3                   	ret    

c0026466 <APIC::disable()>:
c0026466:	90                   	nop
c0026467:	c3                   	ret    

c0026468 <APIC::close(int, int, void*)>:
c0026468:	55                   	push   ebp
c0026469:	89 e5                	mov    ebp,esp
c002646b:	83 ec 08             	sub    esp,0x8
c002646e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026471:	8b 00                	mov    eax,DWORD PTR [eax]
c0026473:	83 c0 3c             	add    eax,0x3c
c0026476:	8b 00                	mov    eax,DWORD PTR [eax]
c0026478:	83 ec 0c             	sub    esp,0xc
c002647b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002647e:	ff d0                	call   eax
c0026480:	83 c4 10             	add    esp,0x10
c0026483:	b8 00 00 00 00       	mov    eax,0x0
c0026488:	c9                   	leave  
c0026489:	c3                   	ret    

c002648a <IOAPIC::close(int, int, void*)>:
c002648a:	b8 00 00 00 00       	mov    eax,0x0
c002648f:	c3                   	ret    

c0026490 <APIC::io_wait()>:
c0026490:	eb 00                	jmp    c0026492 <APIC::io_wait()+0x2>
c0026492:	eb 00                	jmp    c0026494 <APIC::io_wait()+0x4>
c0026494:	90                   	nop
c0026495:	c3                   	ret    

c0026496 <APIC::getBase()>:
c0026496:	55                   	push   ebp
c0026497:	89 e5                	mov    ebp,esp
c0026499:	83 ec 18             	sub    esp,0x18
c002649c:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00264a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00264a7:	83 e0 08             	and    eax,0x8
c00264aa:	84 c0                	test   al,al
c00264ac:	75 07                	jne    c00264b5 <APIC::getBase()+0x1f>
c00264ae:	b8 00 00 00 00       	mov    eax,0x0
c00264b3:	eb 21                	jmp    c00264d6 <APIC::getBase()+0x40>
c00264b5:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00264ba:	83 ec 08             	sub    esp,0x8
c00264bd:	6a 1b                	push   0x1b
c00264bf:	50                   	push   eax
c00264c0:	e8 6d 89 fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c00264c5:	83 c4 10             	add    esp,0x10
c00264c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00264cb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00264ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00264d6:	c9                   	leave  
c00264d7:	c3                   	ret    

c00264d8 <APIC::eoi(unsigned char)>:
c00264d8:	55                   	push   ebp
c00264d9:	89 e5                	mov    ebp,esp
c00264db:	83 ec 28             	sub    esp,0x28
c00264de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00264e4:	83 ec 0c             	sub    esp,0xc
c00264e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264ea:	e8 a7 ff ff ff       	call   c0026496 <APIC::getBase()>
c00264ef:	83 c4 10             	add    esp,0x10
c00264f2:	05 b0 00 00 00       	add    eax,0xb0
c00264f7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00264fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00264fd:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0026503:	90                   	nop
c0026504:	c9                   	leave  
c0026505:	c3                   	ret    

c0026506 <APIC::open(int, int, void*)>:
c0026506:	55                   	push   ebp
c0026507:	89 e5                	mov    ebp,esp
c0026509:	57                   	push   edi
c002650a:	56                   	push   esi
c002650b:	53                   	push   ebx
c002650c:	83 ec 2c             	sub    esp,0x2c
c002650f:	83 ec 0c             	sub    esp,0xc
c0026512:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026515:	e8 7c ff ff ff       	call   c0026496 <APIC::getBase()>
c002651a:	83 c4 10             	add    esp,0x10
c002651d:	89 c2                	mov    edx,eax
c002651f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026522:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026528:	0f b6 f8             	movzx  edi,al
c002652b:	89 d0                	mov    eax,edx
c002652d:	ba 00 00 00 00       	mov    edx,0x0
c0026532:	89 c1                	mov    ecx,eax
c0026534:	80 e5 ff             	and    ch,0xff
c0026537:	89 cb                	mov    ebx,ecx
c0026539:	0f b6 f2             	movzx  esi,dl
c002653c:	89 d8                	mov    eax,ebx
c002653e:	89 f2                	mov    edx,esi
c0026540:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026543:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026546:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002654a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002654e:	83 e0 00             	and    eax,0x0
c0026551:	09 d0                	or     eax,edx
c0026553:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002655a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026560:	8d 50 01             	lea    edx,[eax+0x1]
c0026563:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026566:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002656c:	0f b6 d0             	movzx  edx,al
c002656f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026572:	83 c2 08             	add    edx,0x8
c0026575:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026579:	0f b6 c9             	movzx  ecx,cl
c002657c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026582:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026586:	83 ec 0c             	sub    esp,0xc
c0026589:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002658c:	e8 05 ff ff ff       	call   c0026496 <APIC::getBase()>
c0026591:	83 c4 10             	add    esp,0x10
c0026594:	05 f0 00 00 00       	add    eax,0xf0
c0026599:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002659c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002659f:	8b 00                	mov    eax,DWORD PTR [eax]
c00265a1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00265a4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00265ab:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00265b2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00265b5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265b8:	89 10                	mov    DWORD PTR [eax],edx
c00265ba:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00265c1:	a1 d0 1c 03 c0       	mov    eax,ds:0xc0031cd0
c00265c6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00265c9:	7d 7c                	jge    c0026647 <APIC::open(int, int, void*)+0x141>
c00265cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00265ce:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c00265d5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00265d8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00265db:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c00265e2:	c1 e8 08             	shr    eax,0x8
c00265e5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00265e9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00265ec:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c00265f3:	c1 e8 18             	shr    eax,0x18
c00265f6:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00265f9:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00265fd:	75 40                	jne    c002663f <APIC::open(int, int, void*)+0x139>
c00265ff:	83 ec 0c             	sub    esp,0xc
c0026602:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026605:	e8 8c fe ff ff       	call   c0026496 <APIC::getBase()>
c002660a:	83 c4 10             	add    esp,0x10
c002660d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0026611:	75 07                	jne    c002661a <APIC::open(int, int, void*)+0x114>
c0026613:	ba 60 03 00 00       	mov    edx,0x360
c0026618:	eb 05                	jmp    c002661f <APIC::open(int, int, void*)+0x119>
c002661a:	ba 50 03 00 00       	mov    edx,0x350
c002661f:	01 d0                	add    eax,edx
c0026621:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026624:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026627:	8b 00                	mov    eax,DWORD PTR [eax]
c0026629:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002662c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026633:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026637:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002663a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002663d:	89 10                	mov    DWORD PTR [eax],edx
c002663f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026642:	e9 7a ff ff ff       	jmp    c00265c1 <APIC::open(int, int, void*)+0xbb>
c0026647:	b8 00 00 00 00       	mov    eax,0x0
c002664c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002664f:	5b                   	pop    ebx
c0026650:	5e                   	pop    esi
c0026651:	5f                   	pop    edi
c0026652:	5d                   	pop    ebp
c0026653:	c3                   	ret    

c0026654 <IOAPIC::IOAPIC()>:
c0026654:	83 ec 0c             	sub    esp,0xc
c0026657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002665b:	83 ec 08             	sub    esp,0x8
c002665e:	68 cc e0 02 c0       	push   0xc002e0cc
c0026663:	50                   	push   eax
c0026664:	e8 bb dd fe ff       	call   c0014424 <Device::Device(char const*)>
c0026669:	83 c4 10             	add    esp,0x10
c002666c:	ba f4 e1 02 c0       	mov    edx,0xc002e1f4
c0026671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026675:	89 10                	mov    DWORD PTR [eax],edx
c0026677:	90                   	nop
c0026678:	83 c4 0c             	add    esp,0xc
c002667b:	c3                   	ret    

c002667c <APIC::APIC()>:
c002667c:	53                   	push   ebx
c002667d:	83 ec 18             	sub    esp,0x18
c0026680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026684:	83 ec 08             	sub    esp,0x8
c0026687:	68 d4 e0 02 c0       	push   0xc002e0d4
c002668c:	50                   	push   eax
c002668d:	e8 0c e5 fe ff       	call   c0014b9e <InterruptController::InterruptController(char const*)>
c0026692:	83 c4 10             	add    esp,0x10
c0026695:	ba ac e1 02 c0       	mov    edx,0xc002e1ac
c002669a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002669e:	89 10                	mov    DWORD PTR [eax],edx
c00266a0:	a0 a0 37 03 c0       	mov    al,ds:0xc00337a0
c00266a5:	83 f0 01             	xor    eax,0x1
c00266a8:	84 c0                	test   al,al
c00266aa:	0f 84 a1 00 00 00    	je     c0026751 <APIC::APIC()+0xd5>
c00266b0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00266b5:	a0 80 1d 03 c0       	mov    al,ds:0xc0031d80
c00266ba:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00266be:	0f 83 86 00 00 00    	jae    c002674a <APIC::APIC()+0xce>
c00266c4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00266cc:	83 ec 0c             	sub    esp,0xc
c00266cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00266d3:	e8 b4 91 fe ff       	call   c000f88c <malloc>
c00266d8:	83 c4 10             	add    esp,0x10
c00266db:	89 c3                	mov    ebx,eax
c00266dd:	83 ec 0c             	sub    esp,0xc
c00266e0:	53                   	push   ebx
c00266e1:	e8 6e ff ff ff       	call   c0026654 <IOAPIC::IOAPIC()>
c00266e6:	83 c4 10             	add    esp,0x10
c00266e9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00266ed:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00266f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00266f6:	89 14 85 80 37 03 c0 	mov    DWORD PTR [eax*4-0x3ffcc880],edx
c00266fd:	a1 60 37 03 c0       	mov    eax,ds:0xc0033760
c0026702:	40                   	inc    eax
c0026703:	a3 60 37 03 c0       	mov    ds:0xc0033760,eax
c0026708:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c002670d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0026713:	83 ec 08             	sub    esp,0x8
c0026716:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002671a:	50                   	push   eax
c002671b:	e8 00 db fe ff       	call   c0014220 <Device::addChild(Device*)>
c0026720:	83 c4 10             	add    esp,0x10
c0026723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026727:	8b 00                	mov    eax,DWORD PTR [eax]
c0026729:	83 c0 08             	add    eax,0x8
c002672c:	8b 00                	mov    eax,DWORD PTR [eax]
c002672e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026733:	6a 00                	push   0x0
c0026735:	6a 00                	push   0x0
c0026737:	52                   	push   edx
c0026738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002673c:	ff d0                	call   eax
c002673e:	83 c4 10             	add    esp,0x10
c0026741:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026745:	e9 6b ff ff ff       	jmp    c00266b5 <APIC::APIC()+0x39>
c002674a:	c6 05 a0 37 03 c0 01 	mov    BYTE PTR ds:0xc00337a0,0x1
c0026751:	90                   	nop
c0026752:	83 c4 18             	add    esp,0x18
c0026755:	5b                   	pop    ebx
c0026756:	c3                   	ret    
c0026757:	90                   	nop

c0026758 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026758:	55                   	push   ebp
c0026759:	89 e5                	mov    ebp,esp
c002675b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002675e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026764:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026767:	72 1d                	jb     c0026786 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002676c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026775:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002677b:	01 d0                	add    eax,edx
c002677d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026780:	73 04                	jae    c0026786 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026782:	b0 01                	mov    al,0x1
c0026784:	eb 02                	jmp    c0026788 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026786:	b0 00                	mov    al,0x0
c0026788:	5d                   	pop    ebp
c0026789:	c3                   	ret    

c002678a <IOAPIC::read(int)>:
c002678a:	55                   	push   ebp
c002678b:	89 e5                	mov    ebp,esp
c002678d:	83 ec 10             	sub    esp,0x10
c0026790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026793:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026799:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002679c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002679f:	0f b6 d0             	movzx  edx,al
c00267a2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00267a5:	89 10                	mov    DWORD PTR [eax],edx
c00267a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00267aa:	83 c0 10             	add    eax,0x10
c00267ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00267af:	c9                   	leave  
c00267b0:	c3                   	ret    
c00267b1:	90                   	nop

c00267b2 <IOAPIC::open(int, int, void*)>:
c00267b2:	55                   	push   ebp
c00267b3:	89 e5                	mov    ebp,esp
c00267b5:	57                   	push   edi
c00267b6:	56                   	push   esi
c00267b7:	53                   	push   ebx
c00267b8:	83 ec 0c             	sub    esp,0xc
c00267bb:	83 ec 0c             	sub    esp,0xc
c00267be:	68 ff e0 02 c0       	push   0xc002e0ff
c00267c3:	e8 1f c6 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c00267c8:	83 c4 10             	add    esp,0x10
c00267cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267ce:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00267d1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00267d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00267e0:	8b 14 85 c0 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce240]
c00267e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267ea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00267f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00267f9:	8b 14 85 40 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce1c0]
c0026800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026803:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002680c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0026812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026815:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002681b:	0f b6 f8             	movzx  edi,al
c002681e:	89 d0                	mov    eax,edx
c0026820:	ba 00 00 00 00       	mov    edx,0x0
c0026825:	89 c1                	mov    ecx,eax
c0026827:	80 e5 ff             	and    ch,0xff
c002682a:	89 cb                	mov    ebx,ecx
c002682c:	0f b6 f2             	movzx  esi,dl
c002682f:	89 d8                	mov    eax,ebx
c0026831:	89 f2                	mov    edx,esi
c0026833:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026836:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026839:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002683d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026841:	83 e0 00             	and    eax,0x0
c0026844:	09 d0                	or     eax,edx
c0026846:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002684a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002684d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026853:	8d 50 01             	lea    edx,[eax+0x1]
c0026856:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026859:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002685f:	0f b6 d0             	movzx  edx,al
c0026862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026865:	83 c2 08             	add    edx,0x8
c0026868:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002686c:	0f b6 c9             	movzx  ecx,cl
c002686f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026875:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026879:	83 ec 08             	sub    esp,0x8
c002687c:	6a 01                	push   0x1
c002687e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026881:	e8 04 ff ff ff       	call   c002678a <IOAPIC::read(int)>
c0026886:	83 c4 10             	add    esp,0x10
c0026889:	c1 f8 10             	sar    eax,0x10
c002688c:	0f b6 c0             	movzx  eax,al
c002688f:	8d 50 01             	lea    edx,[eax+0x1]
c0026892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026895:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002689b:	b8 00 00 00 00       	mov    eax,0x0
c00268a0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00268a3:	5b                   	pop    ebx
c00268a4:	5e                   	pop    esi
c00268a5:	5f                   	pop    edi
c00268a6:	5d                   	pop    ebp
c00268a7:	c3                   	ret    

c00268a8 <IOAPIC::write(int, int)>:
c00268a8:	55                   	push   ebp
c00268a9:	89 e5                	mov    ebp,esp
c00268ab:	83 ec 10             	sub    esp,0x10
c00268ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00268b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00268b7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00268ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268bd:	0f b6 d0             	movzx  edx,al
c00268c0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00268c3:	89 10                	mov    DWORD PTR [eax],edx
c00268c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00268c8:	8d 50 10             	lea    edx,[eax+0x10]
c00268cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00268ce:	89 02                	mov    DWORD PTR [edx],eax
c00268d0:	90                   	nop
c00268d1:	c9                   	leave  
c00268d2:	c3                   	ret    
c00268d3:	90                   	nop

c00268d4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00268d4:	55                   	push   ebp
c00268d5:	89 e5                	mov    ebp,esp
c00268d7:	53                   	push   ebx
c00268d8:	83 ec 2c             	sub    esp,0x2c
c00268db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268de:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00268e1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00268e4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00268e7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00268ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00268ed:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00268f0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00268f3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00268f6:	88 d8                	mov    al,bl
c00268f8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00268fb:	88 c8                	mov    al,cl
c00268fd:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026900:	88 d0                	mov    al,dl
c0026902:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0026905:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026909:	83 c0 08             	add    eax,0x8
c002690c:	01 c0                	add    eax,eax
c002690e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026911:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026915:	83 c0 08             	add    eax,0x8
c0026918:	01 c0                	add    eax,eax
c002691a:	40                   	inc    eax
c002691b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002691e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026921:	50                   	push   eax
c0026922:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026925:	e8 60 fe ff ff       	call   c002678a <IOAPIC::read(int)>
c002692a:	83 c4 08             	add    esp,0x8
c002692d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026930:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026937:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002693a:	c1 e0 18             	shl    eax,0x18
c002693d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026940:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026943:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026946:	52                   	push   edx
c0026947:	50                   	push   eax
c0026948:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002694b:	e8 58 ff ff ff       	call   c00268a8 <IOAPIC::write(int, int)>
c0026950:	83 c4 0c             	add    esp,0xc
c0026953:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026956:	50                   	push   eax
c0026957:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002695a:	e8 2b fe ff ff       	call   c002678a <IOAPIC::read(int)>
c002695f:	83 c4 08             	add    esp,0x8
c0026962:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026965:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002696c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026973:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002697a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002697e:	74 09                	je     c0026989 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026980:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026987:	eb 07                	jmp    c0026990 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026989:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026990:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026994:	74 09                	je     c002699f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026996:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002699d:	eb 07                	jmp    c00269a6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002699f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00269a6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00269ad:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00269b1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00269b4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00269b7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269ba:	52                   	push   edx
c00269bb:	50                   	push   eax
c00269bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269bf:	e8 e4 fe ff ff       	call   c00268a8 <IOAPIC::write(int, int)>
c00269c4:	83 c4 0c             	add    esp,0xc
c00269c7:	90                   	nop
c00269c8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00269cb:	c9                   	leave  
c00269cc:	c3                   	ret    
c00269cd:	90                   	nop

c00269ce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00269ce:	55                   	push   ebp
c00269cf:	89 e5                	mov    ebp,esp
c00269d1:	57                   	push   edi
c00269d2:	56                   	push   esi
c00269d3:	53                   	push   ebx
c00269d4:	83 ec 2c             	sub    esp,0x2c
c00269d7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00269da:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00269dd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00269e1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00269e5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00269e9:	74 5a                	je     c0026a45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00269eb:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00269ef:	7f 44                	jg     c0026a35 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00269f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269f4:	05 40 e6 02 c0       	add    eax,0xc002e640
c00269f9:	8a 00                	mov    al,BYTE PTR [eax]
c00269fb:	0f b6 c0             	movzx  eax,al
c00269fe:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026a01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a04:	66 8b 84 00 60 1d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce2a0]
c0026a0c:	0f b7 c0             	movzx  eax,ax
c0026a0f:	83 e0 02             	and    eax,0x2
c0026a12:	85 c0                	test   eax,eax
c0026a14:	74 04                	je     c0026a1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026a16:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026a1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a1d:	66 8b 84 00 60 1d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce2a0]
c0026a25:	0f b7 c0             	movzx  eax,ax
c0026a28:	83 e0 08             	and    eax,0x8
c0026a2b:	85 c0                	test   eax,eax
c0026a2d:	74 16                	je     c0026a45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026a2f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026a33:	eb 10                	jmp    c0026a45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026a35:	83 ec 0c             	sub    esp,0xc
c0026a38:	68 10 e1 02 c0       	push   0xc002e110
c0026a3d:	e8 ed 3e ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0026a42:	83 c4 10             	add    esp,0x10
c0026a45:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026a49:	a1 60 37 03 c0       	mov    eax,ds:0xc0033760
c0026a4e:	83 ec 08             	sub    esp,0x8
c0026a51:	50                   	push   eax
c0026a52:	68 48 e1 02 c0       	push   0xc002e148
c0026a57:	e8 8b c3 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0026a5c:	83 c4 10             	add    esp,0x10
c0026a5f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026a66:	a1 60 37 03 c0       	mov    eax,ds:0xc0033760
c0026a6b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026a6e:	7d 67                	jge    c0026ad7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026a70:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026a73:	8b 04 85 80 37 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc880]
c0026a7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026a7d:	83 ec 08             	sub    esp,0x8
c0026a80:	52                   	push   edx
c0026a81:	50                   	push   eax
c0026a82:	e8 d1 fc ff ff       	call   c0026758 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026a87:	83 c4 10             	add    esp,0x10
c0026a8a:	84 c0                	test   al,al
c0026a8c:	74 44                	je     c0026ad2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026a8e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026a91:	8b 1c 85 80 37 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcc880]
c0026a98:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026a9c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026a9f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026aa3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026aa6:	83 c0 20             	add    eax,0x20
c0026aa9:	0f b6 f0             	movzx  esi,al
c0026aac:	b8 00 00 00 00       	mov    eax,0x0
c0026ab1:	99                   	cdq    
c0026ab2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026ab5:	0f b6 c9             	movzx  ecx,cl
c0026ab8:	83 ec 04             	sub    esp,0x4
c0026abb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026abe:	57                   	push   edi
c0026abf:	56                   	push   esi
c0026ac0:	52                   	push   edx
c0026ac1:	50                   	push   eax
c0026ac2:	51                   	push   ecx
c0026ac3:	53                   	push   ebx
c0026ac4:	e8 0b fe ff ff       	call   c00268d4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026ac9:	83 c4 20             	add    esp,0x20
c0026acc:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0026ad0:	eb 05                	jmp    c0026ad7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026ad2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026ad5:	eb 8f                	jmp    c0026a66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026ad7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026ada:	83 f0 01             	xor    eax,0x1
c0026add:	84 c0                	test   al,al
c0026adf:	74 10                	je     c0026af1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026ae1:	83 ec 0c             	sub    esp,0xc
c0026ae4:	68 5f e1 02 c0       	push   0xc002e15f
c0026ae9:	e8 41 3e ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0026aee:	83 c4 10             	add    esp,0x10
c0026af1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026af5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026afc:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026b00:	7f 65                	jg     c0026b67 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b05:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026b08:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026b0f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026b12:	01 ca                	add    edx,ecx
c0026b14:	83 c2 54             	add    edx,0x54
c0026b17:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026b1b:	85 c0                	test   eax,eax
c0026b1d:	75 43                	jne    c0026b62 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026b25:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026b2c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026b2f:	01 ca                	add    edx,ecx
c0026b31:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026b34:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026b37:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026b41:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026b48:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026b4b:	01 ca                	add    edx,ecx
c0026b4d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026b53:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026b56:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026b5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b5d:	83 e8 20             	sub    eax,0x20
c0026b60:	eb 1a                	jmp    c0026b7c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026b62:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026b65:	eb 95                	jmp    c0026afc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026b67:	83 ec 0c             	sub    esp,0xc
c0026b6a:	68 6c e1 02 c0       	push   0xc002e16c
c0026b6f:	e8 bb 3d ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0026b74:	83 c4 10             	add    esp,0x10
c0026b77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026b7c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026b7f:	5b                   	pop    ebx
c0026b80:	5e                   	pop    esi
c0026b81:	5f                   	pop    edi
c0026b82:	5d                   	pop    ebp
c0026b83:	c3                   	ret    

c0026b84 <PIC::disable()>:
c0026b84:	55                   	push   ebp
c0026b85:	89 e5                	mov    ebp,esp
c0026b87:	83 ec 10             	sub    esp,0x10
c0026b8a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026b90:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026b94:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026b97:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026b9b:	ee                   	out    dx,al
c0026b9c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026ba2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026ba6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026ba9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026bad:	ee                   	out    dx,al
c0026bae:	90                   	nop
c0026baf:	c9                   	leave  
c0026bb0:	c3                   	ret    
c0026bb1:	90                   	nop

c0026bb2 <PIC::close(int, int, void*)>:
c0026bb2:	55                   	push   ebp
c0026bb3:	89 e5                	mov    ebp,esp
c0026bb5:	83 ec 08             	sub    esp,0x8
c0026bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026bbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bbd:	83 c0 3c             	add    eax,0x3c
c0026bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bc2:	83 ec 0c             	sub    esp,0xc
c0026bc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bc8:	ff d0                	call   eax
c0026bca:	83 c4 10             	add    esp,0x10
c0026bcd:	b8 00 00 00 00       	mov    eax,0x0
c0026bd2:	c9                   	leave  
c0026bd3:	c3                   	ret    

c0026bd4 <PIC::PIC()>:
c0026bd4:	83 ec 0c             	sub    esp,0xc
c0026bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bdb:	83 ec 08             	sub    esp,0x8
c0026bde:	68 18 e2 02 c0       	push   0xc002e218
c0026be3:	50                   	push   eax
c0026be4:	e8 b5 df fe ff       	call   c0014b9e <InterruptController::InterruptController(char const*)>
c0026be9:	83 c4 10             	add    esp,0x10
c0026bec:	ba 44 e2 02 c0       	mov    edx,0xc002e244
c0026bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bf5:	89 10                	mov    DWORD PTR [eax],edx
c0026bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bfb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026c01:	0f b6 d0             	movzx  edx,al
c0026c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c08:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026c19:	0f b6 d0             	movzx  edx,al
c0026c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c20:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c29:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026c2f:	8d 50 01             	lea    edx,[eax+0x1]
c0026c32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c36:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026c3c:	0f b6 d0             	movzx  edx,al
c0026c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c43:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026c47:	83 e1 3f             	and    ecx,0x3f
c0026c4a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026c58:	0f b6 d0             	movzx  edx,al
c0026c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c5f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026c70:	0f b6 d0             	movzx  edx,al
c0026c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c77:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026c86:	8d 50 01             	lea    edx,[eax+0x1]
c0026c89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c8d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026c93:	0f b6 d0             	movzx  edx,al
c0026c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c9a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026c9e:	83 e1 3f             	and    ecx,0x3f
c0026ca1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026ca5:	90                   	nop
c0026ca6:	83 c4 0c             	add    esp,0xc
c0026ca9:	c3                   	ret    

c0026caa <PIC::ioWait()>:
c0026caa:	eb 00                	jmp    c0026cac <PIC::ioWait()+0x2>
c0026cac:	eb 00                	jmp    c0026cae <PIC::ioWait()+0x4>
c0026cae:	90                   	nop
c0026caf:	c3                   	ret    

c0026cb0 <PIC::getIRQReg(int)>:
c0026cb0:	55                   	push   ebp
c0026cb1:	89 e5                	mov    ebp,esp
c0026cb3:	83 ec 10             	sub    esp,0x10
c0026cb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026cb9:	0f b6 c0             	movzx  eax,al
c0026cbc:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026cc2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026cc5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026cc8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026ccc:	ee                   	out    dx,al
c0026ccd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026cd0:	0f b6 c0             	movzx  eax,al
c0026cd3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026cd9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026cdc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026cdf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026ce3:	ee                   	out    dx,al
c0026ce4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026cea:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026cee:	89 c2                	mov    edx,eax
c0026cf0:	ec                   	in     al,dx
c0026cf1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026cf4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026cf7:	0f b6 c0             	movzx  eax,al
c0026cfa:	c1 e0 08             	shl    eax,0x8
c0026cfd:	89 c1                	mov    ecx,eax
c0026cff:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026d05:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026d09:	89 c2                	mov    edx,eax
c0026d0b:	ec                   	in     al,dx
c0026d0c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026d0f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026d12:	0f b6 c0             	movzx  eax,al
c0026d15:	09 c8                	or     eax,ecx
c0026d17:	c9                   	leave  
c0026d18:	c3                   	ret    
c0026d19:	90                   	nop

c0026d1a <PIC::eoi(unsigned char)>:
c0026d1a:	55                   	push   ebp
c0026d1b:	89 e5                	mov    ebp,esp
c0026d1d:	83 ec 14             	sub    esp,0x14
c0026d20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d23:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026d26:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026d2a:	75 1e                	jne    c0026d4a <PIC::eoi(unsigned char)+0x30>
c0026d2c:	6a 0b                	push   0xb
c0026d2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d31:	e8 7a ff ff ff       	call   c0026cb0 <PIC::getIRQReg(int)>
c0026d36:	83 c4 08             	add    esp,0x8
c0026d39:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026d3d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026d41:	25 80 00 00 00       	and    eax,0x80
c0026d46:	85 c0                	test   eax,eax
c0026d48:	74 5f                	je     c0026da9 <PIC::eoi(unsigned char)+0x8f>
c0026d4a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026d4e:	75 2d                	jne    c0026d7d <PIC::eoi(unsigned char)+0x63>
c0026d50:	6a 0b                	push   0xb
c0026d52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d55:	e8 56 ff ff ff       	call   c0026cb0 <PIC::getIRQReg(int)>
c0026d5a:	83 c4 08             	add    esp,0x8
c0026d5d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026d61:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026d64:	66 85 c0             	test   ax,ax
c0026d67:	78 14                	js     c0026d7d <PIC::eoi(unsigned char)+0x63>
c0026d69:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026d6f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026d73:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026d76:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026d7a:	ee                   	out    dx,al
c0026d7b:	eb 2d                	jmp    c0026daa <PIC::eoi(unsigned char)+0x90>
c0026d7d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026d81:	76 12                	jbe    c0026d95 <PIC::eoi(unsigned char)+0x7b>
c0026d83:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026d89:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026d8d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026d90:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026d94:	ee                   	out    dx,al
c0026d95:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026d9b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026d9f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026da2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026da6:	ee                   	out    dx,al
c0026da7:	eb 01                	jmp    c0026daa <PIC::eoi(unsigned char)+0x90>
c0026da9:	90                   	nop
c0026daa:	c9                   	leave  
c0026dab:	c3                   	ret    

c0026dac <PIC::remap()>:
c0026dac:	55                   	push   ebp
c0026dad:	89 e5                	mov    ebp,esp
c0026daf:	83 ec 48             	sub    esp,0x48
c0026db2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026db9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026dc0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026dc6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026dc9:	89 c2                	mov    edx,eax
c0026dcb:	ec                   	in     al,dx
c0026dcc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026dcf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026dd2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026dd5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026ddb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026dde:	89 c2                	mov    edx,eax
c0026de0:	ec                   	in     al,dx
c0026de1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026de4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026de7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026dea:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026df0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026df4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026df7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026dfa:	ee                   	out    dx,al
c0026dfb:	83 ec 0c             	sub    esp,0xc
c0026dfe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e01:	e8 a4 fe ff ff       	call   c0026caa <PIC::ioWait()>
c0026e06:	83 c4 10             	add    esp,0x10
c0026e09:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026e0f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026e13:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026e16:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026e19:	ee                   	out    dx,al
c0026e1a:	83 ec 0c             	sub    esp,0xc
c0026e1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e20:	e8 85 fe ff ff       	call   c0026caa <PIC::ioWait()>
c0026e25:	83 c4 10             	add    esp,0x10
c0026e28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026e2b:	0f b6 c0             	movzx  eax,al
c0026e2e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026e34:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026e37:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026e3a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026e3d:	ee                   	out    dx,al
c0026e3e:	83 ec 0c             	sub    esp,0xc
c0026e41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e44:	e8 61 fe ff ff       	call   c0026caa <PIC::ioWait()>
c0026e49:	83 c4 10             	add    esp,0x10
c0026e4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e4f:	0f b6 c0             	movzx  eax,al
c0026e52:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026e58:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026e5b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026e5e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026e61:	ee                   	out    dx,al
c0026e62:	83 ec 0c             	sub    esp,0xc
c0026e65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e68:	e8 3d fe ff ff       	call   c0026caa <PIC::ioWait()>
c0026e6d:	83 c4 10             	add    esp,0x10
c0026e70:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026e76:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026e7a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026e7d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026e80:	ee                   	out    dx,al
c0026e81:	83 ec 0c             	sub    esp,0xc
c0026e84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e87:	e8 1e fe ff ff       	call   c0026caa <PIC::ioWait()>
c0026e8c:	83 c4 10             	add    esp,0x10
c0026e8f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026e95:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026e99:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026e9c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026e9f:	ee                   	out    dx,al
c0026ea0:	83 ec 0c             	sub    esp,0xc
c0026ea3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ea6:	e8 ff fd ff ff       	call   c0026caa <PIC::ioWait()>
c0026eab:	83 c4 10             	add    esp,0x10
c0026eae:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026eb4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026eb8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026ebb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026ebe:	ee                   	out    dx,al
c0026ebf:	83 ec 0c             	sub    esp,0xc
c0026ec2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ec5:	e8 e0 fd ff ff       	call   c0026caa <PIC::ioWait()>
c0026eca:	83 c4 10             	add    esp,0x10
c0026ecd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026ed3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026ed7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026eda:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026edd:	ee                   	out    dx,al
c0026ede:	83 ec 0c             	sub    esp,0xc
c0026ee1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ee4:	e8 c1 fd ff ff       	call   c0026caa <PIC::ioWait()>
c0026ee9:	83 c4 10             	add    esp,0x10
c0026eec:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026ef0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026ef6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026ef9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026efc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026eff:	ee                   	out    dx,al
c0026f00:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026f04:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026f0a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026f0d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026f10:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026f13:	ee                   	out    dx,al
c0026f14:	90                   	nop
c0026f15:	c9                   	leave  
c0026f16:	c3                   	ret    
c0026f17:	90                   	nop

c0026f18 <PIC::open(int, int, void*)>:
c0026f18:	55                   	push   ebp
c0026f19:	89 e5                	mov    ebp,esp
c0026f1b:	83 ec 18             	sub    esp,0x18
c0026f1e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026f24:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026f28:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026f2b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026f2f:	ee                   	out    dx,al
c0026f30:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026f36:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026f3a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026f3d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026f41:	ee                   	out    dx,al
c0026f42:	83 ec 0c             	sub    esp,0xc
c0026f45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f48:	e8 5f fe ff ff       	call   c0026dac <PIC::remap()>
c0026f4d:	83 c4 10             	add    esp,0x10
c0026f50:	b8 00 00 00 00       	mov    eax,0x0
c0026f55:	c9                   	leave  
c0026f56:	c3                   	ret    
c0026f57:	90                   	nop

c0026f58 <APICTimer::close(int, int, void*)>:
c0026f58:	b8 00 00 00 00       	mov    eax,0x0
c0026f5d:	c3                   	ret    

c0026f5e <apicTimerHandler(regs*, void*)>:
c0026f5e:	83 ec 0c             	sub    esp,0xc
c0026f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f65:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f67:	99                   	cdq    
c0026f68:	52                   	push   edx
c0026f69:	50                   	push   eax
c0026f6a:	6a 00                	push   0x0
c0026f6c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026f71:	e8 8e 07 00 00       	call   c0027704 <__udivdi3>
c0026f76:	83 c4 10             	add    esp,0x10
c0026f79:	83 ec 08             	sub    esp,0x8
c0026f7c:	52                   	push   edx
c0026f7d:	50                   	push   eax
c0026f7e:	e8 aa fd fe ff       	call   c0016d2d <timerHandler(unsigned long long)>
c0026f83:	83 c4 10             	add    esp,0x10
c0026f86:	90                   	nop
c0026f87:	83 c4 0c             	add    esp,0xc
c0026f8a:	c3                   	ret    
c0026f8b:	90                   	nop

c0026f8c <APICTimer::write(int)>:
c0026f8c:	53                   	push   ebx
c0026f8d:	83 ec 28             	sub    esp,0x28
c0026f90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026f94:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026f98:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026f9e:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0026fa3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026fa9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026faf:	83 ec 0c             	sub    esp,0xc
c0026fb2:	50                   	push   eax
c0026fb3:	e8 de f4 ff ff       	call   c0026496 <APIC::getBase()>
c0026fb8:	83 c4 10             	add    esp,0x10
c0026fbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026fbf:	a1 70 fa 02 c0       	mov    eax,ds:0xc002fa70
c0026fc4:	8b 15 74 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa74
c0026fca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026fce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026fd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026fd6:	05 e0 03 00 00       	add    eax,0x3e0
c0026fdb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026fe5:	05 80 03 00 00       	add    eax,0x380
c0026fea:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026ff0:	fb                   	sti    
c0026ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ff5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026ff9:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026ffe:	83 d2 00             	adc    edx,0x0
c0027001:	89 c1                	mov    ecx,eax
c0027003:	89 d3                	mov    ebx,edx
c0027005:	a1 70 fa 02 c0       	mov    eax,ds:0xc002fa70
c002700a:	8b 15 74 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa74
c0027010:	39 c8                	cmp    eax,ecx
c0027012:	89 d0                	mov    eax,edx
c0027014:	19 d8                	sbb    eax,ebx
c0027016:	73 02                	jae    c002701a <APICTimer::write(int)+0x8e>
c0027018:	eb d7                	jmp    c0026ff1 <APICTimer::write(int)+0x65>
c002701a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002701e:	05 20 03 00 00       	add    eax,0x320
c0027023:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0027029:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002702d:	05 90 03 00 00       	add    eax,0x390
c0027032:	8b 00                	mov    eax,DWORD PTR [eax]
c0027034:	f7 d0                	not    eax
c0027036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002703a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002703e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027042:	ba 00 00 00 00       	mov    edx,0x0
c0027047:	f7 f3                	div    ebx
c0027049:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002704d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0027051:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0027057:	0d 00 00 02 00       	or     eax,0x20000
c002705c:	89 c2                	mov    edx,eax
c002705e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027062:	05 20 03 00 00       	add    eax,0x320
c0027067:	89 10                	mov    DWORD PTR [eax],edx
c0027069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002706d:	05 e0 03 00 00       	add    eax,0x3e0
c0027072:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0027078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002707c:	05 80 03 00 00       	add    eax,0x380
c0027081:	89 c2                	mov    edx,eax
c0027083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027087:	89 02                	mov    DWORD PTR [edx],eax
c0027089:	90                   	nop
c002708a:	83 c4 28             	add    esp,0x28
c002708d:	5b                   	pop    ebx
c002708e:	c3                   	ret    
c002708f:	90                   	nop

c0027090 <APICTimer::open(int, int, void*)>:
c0027090:	57                   	push   edi
c0027091:	56                   	push   esi
c0027092:	53                   	push   ebx
c0027093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027097:	8b 00                	mov    eax,DWORD PTR [eax]
c0027099:	83 c0 24             	add    eax,0x24
c002709c:	8b 00                	mov    eax,DWORD PTR [eax]
c002709e:	83 ec 08             	sub    esp,0x8
c00270a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270a9:	ff d0                	call   eax
c00270ab:	83 c4 10             	add    esp,0x10
c00270ae:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c00270b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00270b9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00270bf:	83 ec 0c             	sub    esp,0xc
c00270c2:	50                   	push   eax
c00270c3:	e8 ce f3 ff ff       	call   c0026496 <APIC::getBase()>
c00270c8:	83 c4 10             	add    esp,0x10
c00270cb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00270d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270d5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00270db:	0f b6 f8             	movzx  edi,al
c00270de:	89 d0                	mov    eax,edx
c00270e0:	ba 00 00 00 00       	mov    edx,0x0
c00270e5:	89 c1                	mov    ecx,eax
c00270e7:	80 e5 ff             	and    ch,0xff
c00270ea:	89 cb                	mov    ebx,ecx
c00270ec:	0f b6 f2             	movzx  esi,dl
c00270ef:	89 d8                	mov    eax,ebx
c00270f1:	89 f2                	mov    edx,esi
c00270f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270f7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00270fa:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00270fe:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0027102:	83 e0 00             	and    eax,0x0
c0027105:	09 d0                	or     eax,edx
c0027107:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002710f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0027115:	8d 50 01             	lea    edx,[eax+0x1]
c0027118:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002711c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0027122:	0f b6 d0             	movzx  edx,al
c0027125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027129:	83 c2 08             	add    edx,0x8
c002712c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0027130:	0f b6 c9             	movzx  ecx,cl
c0027133:	81 c9 00 00 01 00    	or     ecx,0x10000
c0027139:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002713d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027141:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027145:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002714b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002714f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027153:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0027159:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002715d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0027163:	83 ec 0c             	sub    esp,0xc
c0027166:	51                   	push   ecx
c0027167:	6a 01                	push   0x1
c0027169:	68 5e 6f 02 c0       	push   0xc0026f5e
c002716e:	52                   	push   edx
c002716f:	50                   	push   eax
c0027170:	e8 23 d0 fe ff       	call   c0014198 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027175:	83 c4 20             	add    esp,0x20
c0027178:	89 c2                	mov    edx,eax
c002717a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002717e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027184:	b8 00 00 00 00       	mov    eax,0x0
c0027189:	5b                   	pop    ebx
c002718a:	5e                   	pop    esi
c002718b:	5f                   	pop    edi
c002718c:	c3                   	ret    
c002718d:	90                   	nop

c002718e <APICTimer::APICTimer()>:
c002718e:	83 ec 0c             	sub    esp,0xc
c0027191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027195:	83 ec 08             	sub    esp,0x8
c0027198:	68 84 e2 02 c0       	push   0xc002e284
c002719d:	50                   	push   eax
c002719e:	e8 fb fa fe ff       	call   c0016c9e <Timer::Timer(char const*)>
c00271a3:	83 c4 10             	add    esp,0x10
c00271a6:	ba 98 e2 02 c0       	mov    edx,0xc002e298
c00271ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271af:	89 10                	mov    DWORD PTR [eax],edx
c00271b1:	90                   	nop
c00271b2:	83 c4 0c             	add    esp,0xc
c00271b5:	c3                   	ret    

c00271b6 <PIT::write(int)>:
c00271b6:	83 ec 10             	sub    esp,0x10
c00271b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00271bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00271c1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00271c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00271cb:	a3 a4 37 03 c0       	mov    ds:0xc00337a4,eax
c00271d0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00271d5:	99                   	cdq    
c00271d6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00271da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00271de:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00271e5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00271ea:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00271ee:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00271f3:	ee                   	out    dx,al
c00271f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00271f8:	0f b6 c0             	movzx  eax,al
c00271fb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0027202:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027206:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002720a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002720f:	ee                   	out    dx,al
c0027210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027214:	c1 f8 08             	sar    eax,0x8
c0027217:	0f b6 c0             	movzx  eax,al
c002721a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0027221:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027225:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027229:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002722e:	ee                   	out    dx,al
c002722f:	90                   	nop
c0027230:	83 c4 10             	add    esp,0x10
c0027233:	c3                   	ret    

c0027234 <pitHandler(regs*, void*)>:
c0027234:	83 ec 0c             	sub    esp,0xc
c0027237:	a1 a4 37 03 c0       	mov    eax,ds:0xc00337a4
c002723c:	99                   	cdq    
c002723d:	52                   	push   edx
c002723e:	50                   	push   eax
c002723f:	6a 00                	push   0x0
c0027241:	68 00 ca 9a 3b       	push   0x3b9aca00
c0027246:	e8 b9 04 00 00       	call   c0027704 <__udivdi3>
c002724b:	83 c4 10             	add    esp,0x10
c002724e:	83 ec 08             	sub    esp,0x8
c0027251:	52                   	push   edx
c0027252:	50                   	push   eax
c0027253:	e8 d5 fa fe ff       	call   c0016d2d <timerHandler(unsigned long long)>
c0027258:	83 c4 10             	add    esp,0x10
c002725b:	90                   	nop
c002725c:	83 c4 0c             	add    esp,0xc
c002725f:	c3                   	ret    

c0027260 <PIT::open(int, int, void*)>:
c0027260:	83 ec 0c             	sub    esp,0xc
c0027263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027267:	8b 00                	mov    eax,DWORD PTR [eax]
c0027269:	83 c0 24             	add    eax,0x24
c002726c:	8b 00                	mov    eax,DWORD PTR [eax]
c002726e:	83 ec 08             	sub    esp,0x8
c0027271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027279:	ff d0                	call   eax
c002727b:	83 c4 10             	add    esp,0x10
c002727e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027282:	83 ec 0c             	sub    esp,0xc
c0027285:	6a 00                	push   0x0
c0027287:	6a 01                	push   0x1
c0027289:	68 34 72 02 c0       	push   0xc0027234
c002728e:	6a 00                	push   0x0
c0027290:	50                   	push   eax
c0027291:	e8 02 cf fe ff       	call   c0014198 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027296:	83 c4 20             	add    esp,0x20
c0027299:	89 c2                	mov    edx,eax
c002729b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002729f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00272a5:	b8 00 00 00 00       	mov    eax,0x0
c00272aa:	83 c4 0c             	add    esp,0xc
c00272ad:	c3                   	ret    

c00272ae <PIT::close(int, int, void*)>:
c00272ae:	83 ec 0c             	sub    esp,0xc
c00272b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272b5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00272bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272c3:	6a 01                	push   0x1
c00272c5:	68 34 72 02 c0       	push   0xc0027234
c00272ca:	6a 00                	push   0x0
c00272cc:	50                   	push   eax
c00272cd:	e8 10 cf fe ff       	call   c00141e2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00272d2:	83 c4 10             	add    esp,0x10
c00272d5:	b8 00 00 00 00       	mov    eax,0x0
c00272da:	83 c4 0c             	add    esp,0xc
c00272dd:	c3                   	ret    

c00272de <PIT::PIT()>:
c00272de:	83 ec 0c             	sub    esp,0xc
c00272e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272e5:	83 ec 08             	sub    esp,0x8
c00272e8:	68 c0 e2 02 c0       	push   0xc002e2c0
c00272ed:	50                   	push   eax
c00272ee:	e8 ab f9 fe ff       	call   c0016c9e <Timer::Timer(char const*)>
c00272f3:	83 c4 10             	add    esp,0x10
c00272f6:	ba e8 e2 02 c0       	mov    edx,0xc002e2e8
c00272fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272ff:	89 10                	mov    DWORD PTR [eax],edx
c0027301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027305:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002730b:	0f b6 d0             	movzx  edx,al
c002730e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027312:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0027319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002731d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027323:	0f b6 d0             	movzx  edx,al
c0027326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002732a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002732f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027333:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027339:	8d 50 01             	lea    edx,[eax+0x1]
c002733c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027340:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0027346:	0f b6 d0             	movzx  edx,al
c0027349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002734d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0027351:	83 e1 3f             	and    ecx,0x3f
c0027354:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0027358:	90                   	nop
c0027359:	83 c4 0c             	add    esp,0xc
c002735c:	c3                   	ret    
c002735d:	66 90                	xchg   ax,ax
c002735f:	90                   	nop

c0027360 <avxDetect>:
c0027360:	b8 00 00 00 00       	mov    eax,0x0
c0027365:	c3                   	ret    

c0027366 <avxSave>:
c0027366:	c3                   	ret    

c0027367 <avxLoad>:
c0027367:	c3                   	ret    

c0027368 <avxInit>:
c0027368:	c3                   	ret    

c0027369 <avxClose>:
c0027369:	c3                   	ret    

c002736a <wouldSheSayYes>:
c002736a:	c3                   	ret    
c002736b:	49                   	dec    ecx
c002736c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0027370:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0027374:	75 20                	jne    c0027396 <sseDetect.noSSE+0x1>
c0027376:	4e                   	dec    esi
c0027377:	79 61                	jns    c00273da <x87Detect+0x14>
c0027379:	68 2e 2e 2e 00       	push   0x2e2e2e
c002737e:	66 90                	xchg   ax,ax

c0027380 <absolutelyNoChanceInHell>:
c0027380:	b8 01 00 00 00       	mov    eax,0x1
c0027385:	0f a2                	cpuid  
c0027387:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002738d:	74 06                	je     c0027395 <sseDetect.noSSE>
c002738f:	b8 01 00 00 00       	mov    eax,0x1
c0027394:	c3                   	ret    

c0027395 <sseDetect.noSSE>:
c0027395:	31 c0                	xor    eax,eax
c0027397:	c3                   	ret    

c0027398 <sseSave>:
c0027398:	0f ae 44 24 04       	fxsave [esp+0x4]
c002739d:	c3                   	ret    

c002739e <sseLoad>:
c002739e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00273a3:	c3                   	ret    

c00273a4 <sseInit>:
c00273a4:	e8 49 00 00 00       	call   c00273f2 <x87Init>
c00273a9:	0f 20 e0             	mov    eax,cr4
c00273ac:	66 0d 00 06          	or     ax,0x600
c00273b0:	0f 22 e0             	mov    cr4,eax
c00273b3:	c3                   	ret    

c00273b4 <sseClose>:
c00273b4:	c3                   	ret    
c00273b5:	66 90                	xchg   ax,ax
c00273b7:	66 90                	xchg   ax,ax
c00273b9:	66 90                	xchg   ax,ax
c00273bb:	66 90                	xchg   ax,ax
c00273bd:	66 90                	xchg   ax,ax
c00273bf:	90                   	nop

c00273c0 <value_37F>:
c00273c0:	7f 03                	jg     c00273c5 <value_37A+0x1>

c00273c2 <value_37E>:
c00273c2:	7e 03                	jle    c00273c7 <x87Detect+0x1>

c00273c4 <value_37A>:
c00273c4:	7a 03                	jp     c00273c9 <x87Detect+0x3>

c00273c6 <x87Detect>:
c00273c6:	b8 01 00 00 00       	mov    eax,0x1
c00273cb:	0f a2                	cpuid  
c00273cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00273d3:	74 06                	je     c00273db <x87Detect.nox87>
c00273d5:	b8 01 00 00 00       	mov    eax,0x1
c00273da:	c3                   	ret    

c00273db <x87Detect.nox87>:
c00273db:	b8 00 00 00 00       	mov    eax,0x0
c00273e0:	c3                   	ret    

c00273e1 <x87Save>:
c00273e1:	55                   	push   ebp
c00273e2:	89 e5                	mov    ebp,esp
c00273e4:	9b dd 75 08          	fsave  [ebp+0x8]
c00273e8:	c9                   	leave  
c00273e9:	c3                   	ret    

c00273ea <x87Load>:
c00273ea:	55                   	push   ebp
c00273eb:	89 e5                	mov    ebp,esp
c00273ed:	dd 65 08             	frstor [ebp+0x8]
c00273f0:	c9                   	leave  
c00273f1:	c3                   	ret    

c00273f2 <x87Init>:
c00273f2:	9b db e3             	finit  
c00273f5:	0f 20 c0             	mov    eax,cr0
c00273f8:	66 25 fb ff          	and    ax,0xfffb
c00273fc:	66 0d 22 00          	or     ax,0x22
c0027400:	0f 22 c0             	mov    cr0,eax
c0027403:	0f 06                	clts   
c0027405:	d9 2d c4 73 02 c0    	fldcw  WORD PTR ds:0xc00273c4
c002740b:	c3                   	ret    

c002740c <x87Close>:
c002740c:	c3                   	ret    
c002740d:	66 90                	xchg   ax,ax
c002740f:	90                   	nop

c0027410 <__do_global_ctors_aux>:
c0027410:	a1 48 a0 02 c0       	mov    eax,ds:0xc002a048
c0027415:	83 f8 ff             	cmp    eax,0xffffffff
c0027418:	74 1a                	je     c0027434 <__do_global_ctors_aux+0x24>
c002741a:	55                   	push   ebp
c002741b:	89 e5                	mov    ebp,esp
c002741d:	53                   	push   ebx
c002741e:	52                   	push   edx
c002741f:	bb 48 a0 02 c0       	mov    ebx,0xc002a048
c0027424:	ff d0                	call   eax
c0027426:	83 eb 04             	sub    ebx,0x4
c0027429:	8b 03                	mov    eax,DWORD PTR [ebx]
c002742b:	83 f8 ff             	cmp    eax,0xffffffff
c002742e:	75 f4                	jne    c0027424 <__do_global_ctors_aux+0x14>
c0027430:	58                   	pop    eax
c0027431:	5b                   	pop    ebx
c0027432:	5d                   	pop    ebp
c0027433:	c3                   	ret    
c0027434:	c3                   	ret    
c0027435:	66 90                	xchg   ax,ax
c0027437:	90                   	nop

c0027438 <__divdi3>:
c0027438:	55                   	push   ebp
c0027439:	57                   	push   edi
c002743a:	56                   	push   esi
c002743b:	53                   	push   ebx
c002743c:	83 ec 1c             	sub    esp,0x1c
c002743f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027443:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027447:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002744a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002744e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027452:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027456:	85 db                	test   ebx,ebx
c0027458:	0f 88 8e 00 00 00    	js     c00274ec <__divdi3+0xb4>
c002745e:	89 dd                	mov    ebp,ebx
c0027460:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027468:	89 d3                	mov    ebx,edx
c002746a:	85 d2                	test   edx,edx
c002746c:	79 0d                	jns    c002747b <__divdi3+0x43>
c002746e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0027472:	f7 d8                	neg    eax
c0027474:	83 d2 00             	adc    edx,0x0
c0027477:	f7 da                	neg    edx
c0027479:	89 d3                	mov    ebx,edx
c002747b:	89 c7                	mov    edi,eax
c002747d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027480:	85 db                	test   ebx,ebx
c0027482:	75 48                	jne    c00274cc <__divdi3+0x94>
c0027484:	39 ef                	cmp    edi,ebp
c0027486:	76 24                	jbe    c00274ac <__divdi3+0x74>
c0027488:	89 ea                	mov    edx,ebp
c002748a:	f7 f7                	div    edi
c002748c:	89 c1                	mov    ecx,eax
c002748e:	31 f6                	xor    esi,esi
c0027490:	89 c8                	mov    eax,ecx
c0027492:	89 f2                	mov    edx,esi
c0027494:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027498:	85 c9                	test   ecx,ecx
c002749a:	74 07                	je     c00274a3 <__divdi3+0x6b>
c002749c:	f7 d8                	neg    eax
c002749e:	83 d2 00             	adc    edx,0x0
c00274a1:	f7 da                	neg    edx
c00274a3:	83 c4 1c             	add    esp,0x1c
c00274a6:	5b                   	pop    ebx
c00274a7:	5e                   	pop    esi
c00274a8:	5f                   	pop    edi
c00274a9:	5d                   	pop    ebp
c00274aa:	c3                   	ret    
c00274ab:	90                   	nop
c00274ac:	85 ff                	test   edi,edi
c00274ae:	75 0b                	jne    c00274bb <__divdi3+0x83>
c00274b0:	b8 01 00 00 00       	mov    eax,0x1
c00274b5:	31 d2                	xor    edx,edx
c00274b7:	f7 f3                	div    ebx
c00274b9:	89 c7                	mov    edi,eax
c00274bb:	31 d2                	xor    edx,edx
c00274bd:	89 e8                	mov    eax,ebp
c00274bf:	f7 f7                	div    edi
c00274c1:	89 c6                	mov    esi,eax
c00274c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00274c6:	f7 f7                	div    edi
c00274c8:	89 c1                	mov    ecx,eax
c00274ca:	eb c4                	jmp    c0027490 <__divdi3+0x58>
c00274cc:	39 eb                	cmp    ebx,ebp
c00274ce:	77 3c                	ja     c002750c <__divdi3+0xd4>
c00274d0:	0f bd f3             	bsr    esi,ebx
c00274d3:	83 f6 1f             	xor    esi,0x1f
c00274d6:	75 40                	jne    c0027518 <__divdi3+0xe0>
c00274d8:	39 eb                	cmp    ebx,ebp
c00274da:	72 09                	jb     c00274e5 <__divdi3+0xad>
c00274dc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00274df:	0f 87 97 00 00 00    	ja     c002757c <__divdi3+0x144>
c00274e5:	b9 01 00 00 00       	mov    ecx,0x1
c00274ea:	eb a4                	jmp    c0027490 <__divdi3+0x58>
c00274ec:	f7 d9                	neg    ecx
c00274ee:	83 d3 00             	adc    ebx,0x0
c00274f1:	f7 db                	neg    ebx
c00274f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00274f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00274fa:	89 dd                	mov    ebp,ebx
c00274fc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027504:	e9 5f ff ff ff       	jmp    c0027468 <__divdi3+0x30>
c0027509:	8d 76 00             	lea    esi,[esi+0x0]
c002750c:	31 f6                	xor    esi,esi
c002750e:	31 c9                	xor    ecx,ecx
c0027510:	e9 7b ff ff ff       	jmp    c0027490 <__divdi3+0x58>
c0027515:	8d 76 00             	lea    esi,[esi+0x0]
c0027518:	b8 20 00 00 00       	mov    eax,0x20
c002751d:	29 f0                	sub    eax,esi
c002751f:	89 f1                	mov    ecx,esi
c0027521:	d3 e3                	shl    ebx,cl
c0027523:	89 fa                	mov    edx,edi
c0027525:	88 c1                	mov    cl,al
c0027527:	d3 ea                	shr    edx,cl
c0027529:	09 da                	or     edx,ebx
c002752b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002752f:	89 f1                	mov    ecx,esi
c0027531:	d3 e7                	shl    edi,cl
c0027533:	89 eb                	mov    ebx,ebp
c0027535:	88 c1                	mov    cl,al
c0027537:	d3 eb                	shr    ebx,cl
c0027539:	89 f1                	mov    ecx,esi
c002753b:	d3 e5                	shl    ebp,cl
c002753d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027540:	88 c1                	mov    cl,al
c0027542:	d3 ea                	shr    edx,cl
c0027544:	09 d5                	or     ebp,edx
c0027546:	89 e8                	mov    eax,ebp
c0027548:	89 da                	mov    edx,ebx
c002754a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002754e:	89 d3                	mov    ebx,edx
c0027550:	89 c5                	mov    ebp,eax
c0027552:	f7 e7                	mul    edi
c0027554:	39 d3                	cmp    ebx,edx
c0027556:	72 18                	jb     c0027570 <__divdi3+0x138>
c0027558:	74 0a                	je     c0027564 <__divdi3+0x12c>
c002755a:	89 e9                	mov    ecx,ebp
c002755c:	31 f6                	xor    esi,esi
c002755e:	e9 2d ff ff ff       	jmp    c0027490 <__divdi3+0x58>
c0027563:	90                   	nop
c0027564:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027567:	89 f1                	mov    ecx,esi
c0027569:	d3 e7                	shl    edi,cl
c002756b:	39 c7                	cmp    edi,eax
c002756d:	73 eb                	jae    c002755a <__divdi3+0x122>
c002756f:	90                   	nop
c0027570:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027573:	31 f6                	xor    esi,esi
c0027575:	e9 16 ff ff ff       	jmp    c0027490 <__divdi3+0x58>
c002757a:	66 90                	xchg   ax,ax
c002757c:	31 c9                	xor    ecx,ecx
c002757e:	e9 0d ff ff ff       	jmp    c0027490 <__divdi3+0x58>
c0027583:	90                   	nop

c0027584 <__moddi3>:
c0027584:	55                   	push   ebp
c0027585:	57                   	push   edi
c0027586:	56                   	push   esi
c0027587:	53                   	push   ebx
c0027588:	83 ec 2c             	sub    esp,0x2c
c002758b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002758f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027593:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027597:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002759b:	85 db                	test   ebx,ebx
c002759d:	0f 88 85 00 00 00    	js     c0027628 <__moddi3+0xa4>
c00275a3:	89 de                	mov    esi,ebx
c00275a5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00275ad:	89 d7                	mov    edi,edx
c00275af:	85 d2                	test   edx,edx
c00275b1:	79 09                	jns    c00275bc <__moddi3+0x38>
c00275b3:	f7 d8                	neg    eax
c00275b5:	83 d2 00             	adc    edx,0x0
c00275b8:	f7 da                	neg    edx
c00275ba:	89 d7                	mov    edi,edx
c00275bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00275c0:	89 cd                	mov    ebp,ecx
c00275c2:	85 ff                	test   edi,edi
c00275c4:	75 52                	jne    c0027618 <__moddi3+0x94>
c00275c6:	89 c3                	mov    ebx,eax
c00275c8:	39 f0                	cmp    eax,esi
c00275ca:	76 24                	jbe    c00275f0 <__moddi3+0x6c>
c00275cc:	89 c8                	mov    eax,ecx
c00275ce:	89 f2                	mov    edx,esi
c00275d0:	f7 f3                	div    ebx
c00275d2:	89 d6                	mov    esi,edx
c00275d4:	89 f0                	mov    eax,esi
c00275d6:	31 d2                	xor    edx,edx
c00275d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00275dc:	85 c9                	test   ecx,ecx
c00275de:	74 07                	je     c00275e7 <__moddi3+0x63>
c00275e0:	f7 d8                	neg    eax
c00275e2:	83 d2 00             	adc    edx,0x0
c00275e5:	f7 da                	neg    edx
c00275e7:	83 c4 2c             	add    esp,0x2c
c00275ea:	5b                   	pop    ebx
c00275eb:	5e                   	pop    esi
c00275ec:	5f                   	pop    edi
c00275ed:	5d                   	pop    ebp
c00275ee:	c3                   	ret    
c00275ef:	90                   	nop
c00275f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00275f4:	85 db                	test   ebx,ebx
c00275f6:	75 0d                	jne    c0027605 <__moddi3+0x81>
c00275f8:	b8 01 00 00 00       	mov    eax,0x1
c00275fd:	31 d2                	xor    edx,edx
c00275ff:	f7 f7                	div    edi
c0027601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027605:	89 f0                	mov    eax,esi
c0027607:	31 d2                	xor    edx,edx
c0027609:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002760d:	f7 f7                	div    edi
c002760f:	89 e8                	mov    eax,ebp
c0027611:	f7 f7                	div    edi
c0027613:	89 d6                	mov    esi,edx
c0027615:	eb bd                	jmp    c00275d4 <__moddi3+0x50>
c0027617:	90                   	nop
c0027618:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002761c:	39 f7                	cmp    edi,esi
c002761e:	76 20                	jbe    c0027640 <__moddi3+0xbc>
c0027620:	89 c8                	mov    eax,ecx
c0027622:	89 f2                	mov    edx,esi
c0027624:	eb b2                	jmp    c00275d8 <__moddi3+0x54>
c0027626:	66 90                	xchg   ax,ax
c0027628:	f7 d9                	neg    ecx
c002762a:	83 d3 00             	adc    ebx,0x0
c002762d:	f7 db                	neg    ebx
c002762f:	89 de                	mov    esi,ebx
c0027631:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027639:	e9 6f ff ff ff       	jmp    c00275ad <__moddi3+0x29>
c002763e:	66 90                	xchg   ax,ax
c0027640:	0f bd c7             	bsr    eax,edi
c0027643:	83 f0 1f             	xor    eax,0x1f
c0027646:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002764a:	75 24                	jne    c0027670 <__moddi3+0xec>
c002764c:	39 f7                	cmp    edi,esi
c002764e:	72 06                	jb     c0027656 <__moddi3+0xd2>
c0027650:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027654:	77 0c                	ja     c0027662 <__moddi3+0xde>
c0027656:	89 e9                	mov    ecx,ebp
c0027658:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002765c:	19 fe                	sbb    esi,edi
c002765e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027662:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027666:	89 f2                	mov    edx,esi
c0027668:	e9 6b ff ff ff       	jmp    c00275d8 <__moddi3+0x54>
c002766d:	8d 76 00             	lea    esi,[esi+0x0]
c0027670:	b8 20 00 00 00       	mov    eax,0x20
c0027675:	89 c2                	mov    edx,eax
c0027677:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002767b:	29 da                	sub    edx,ebx
c002767d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027681:	88 d9                	mov    cl,bl
c0027683:	d3 e7                	shl    edi,cl
c0027685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027689:	88 d1                	mov    cl,dl
c002768b:	d3 e8                	shr    eax,cl
c002768d:	09 c7                	or     edi,eax
c002768f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027693:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027697:	89 d8                	mov    eax,ebx
c0027699:	88 d9                	mov    cl,bl
c002769b:	d3 e7                	shl    edi,cl
c002769d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00276a1:	89 f3                	mov    ebx,esi
c00276a3:	88 d1                	mov    cl,dl
c00276a5:	d3 eb                	shr    ebx,cl
c00276a7:	89 c7                	mov    edi,eax
c00276a9:	88 c1                	mov    cl,al
c00276ab:	d3 e6                	shl    esi,cl
c00276ad:	89 e8                	mov    eax,ebp
c00276af:	88 d1                	mov    cl,dl
c00276b1:	d3 e8                	shr    eax,cl
c00276b3:	09 f0                	or     eax,esi
c00276b5:	89 f9                	mov    ecx,edi
c00276b7:	d3 e5                	shl    ebp,cl
c00276b9:	89 da                	mov    edx,ebx
c00276bb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00276bf:	89 d3                	mov    ebx,edx
c00276c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00276c5:	89 c6                	mov    esi,eax
c00276c7:	89 d1                	mov    ecx,edx
c00276c9:	39 d3                	cmp    ebx,edx
c00276cb:	72 27                	jb     c00276f4 <__moddi3+0x170>
c00276cd:	74 21                	je     c00276f0 <__moddi3+0x16c>
c00276cf:	29 f5                	sub    ebp,esi
c00276d1:	19 cb                	sbb    ebx,ecx
c00276d3:	89 de                	mov    esi,ebx
c00276d5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00276d9:	d3 e6                	shl    esi,cl
c00276db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00276df:	89 f9                	mov    ecx,edi
c00276e1:	d3 ed                	shr    ebp,cl
c00276e3:	09 ee                	or     esi,ebp
c00276e5:	89 f0                	mov    eax,esi
c00276e7:	d3 eb                	shr    ebx,cl
c00276e9:	89 da                	mov    edx,ebx
c00276eb:	e9 e8 fe ff ff       	jmp    c00275d8 <__moddi3+0x54>
c00276f0:	39 c5                	cmp    ebp,eax
c00276f2:	73 db                	jae    c00276cf <__moddi3+0x14b>
c00276f4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00276f8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00276fc:	89 d1                	mov    ecx,edx
c00276fe:	89 c6                	mov    esi,eax
c0027700:	eb cd                	jmp    c00276cf <__moddi3+0x14b>
c0027702:	66 90                	xchg   ax,ax

c0027704 <__udivdi3>:
c0027704:	55                   	push   ebp
c0027705:	57                   	push   edi
c0027706:	56                   	push   esi
c0027707:	53                   	push   ebx
c0027708:	83 ec 1c             	sub    esp,0x1c
c002770b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002770f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027713:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027717:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002771b:	85 d2                	test   edx,edx
c002771d:	75 41                	jne    c0027760 <__udivdi3+0x5c>
c002771f:	39 f7                	cmp    edi,esi
c0027721:	76 15                	jbe    c0027738 <__udivdi3+0x34>
c0027723:	89 e8                	mov    eax,ebp
c0027725:	89 f2                	mov    edx,esi
c0027727:	f7 f7                	div    edi
c0027729:	31 db                	xor    ebx,ebx
c002772b:	89 da                	mov    edx,ebx
c002772d:	83 c4 1c             	add    esp,0x1c
c0027730:	5b                   	pop    ebx
c0027731:	5e                   	pop    esi
c0027732:	5f                   	pop    edi
c0027733:	5d                   	pop    ebp
c0027734:	c3                   	ret    
c0027735:	8d 76 00             	lea    esi,[esi+0x0]
c0027738:	89 f9                	mov    ecx,edi
c002773a:	85 ff                	test   edi,edi
c002773c:	75 0b                	jne    c0027749 <__udivdi3+0x45>
c002773e:	b8 01 00 00 00       	mov    eax,0x1
c0027743:	31 d2                	xor    edx,edx
c0027745:	f7 f7                	div    edi
c0027747:	89 c1                	mov    ecx,eax
c0027749:	31 d2                	xor    edx,edx
c002774b:	89 f0                	mov    eax,esi
c002774d:	f7 f1                	div    ecx
c002774f:	89 c3                	mov    ebx,eax
c0027751:	89 e8                	mov    eax,ebp
c0027753:	f7 f1                	div    ecx
c0027755:	89 da                	mov    edx,ebx
c0027757:	83 c4 1c             	add    esp,0x1c
c002775a:	5b                   	pop    ebx
c002775b:	5e                   	pop    esi
c002775c:	5f                   	pop    edi
c002775d:	5d                   	pop    ebp
c002775e:	c3                   	ret    
c002775f:	90                   	nop
c0027760:	39 f2                	cmp    edx,esi
c0027762:	77 1c                	ja     c0027780 <__udivdi3+0x7c>
c0027764:	0f bd da             	bsr    ebx,edx
c0027767:	83 f3 1f             	xor    ebx,0x1f
c002776a:	75 24                	jne    c0027790 <__udivdi3+0x8c>
c002776c:	39 f2                	cmp    edx,esi
c002776e:	72 08                	jb     c0027778 <__udivdi3+0x74>
c0027770:	39 ef                	cmp    edi,ebp
c0027772:	0f 87 84 00 00 00    	ja     c00277fc <__udivdi3+0xf8>
c0027778:	b8 01 00 00 00       	mov    eax,0x1
c002777d:	eb ac                	jmp    c002772b <__udivdi3+0x27>
c002777f:	90                   	nop
c0027780:	31 db                	xor    ebx,ebx
c0027782:	31 c0                	xor    eax,eax
c0027784:	89 da                	mov    edx,ebx
c0027786:	83 c4 1c             	add    esp,0x1c
c0027789:	5b                   	pop    ebx
c002778a:	5e                   	pop    esi
c002778b:	5f                   	pop    edi
c002778c:	5d                   	pop    ebp
c002778d:	c3                   	ret    
c002778e:	66 90                	xchg   ax,ax
c0027790:	b8 20 00 00 00       	mov    eax,0x20
c0027795:	29 d8                	sub    eax,ebx
c0027797:	88 d9                	mov    cl,bl
c0027799:	d3 e2                	shl    edx,cl
c002779b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002779f:	89 fa                	mov    edx,edi
c00277a1:	88 c1                	mov    cl,al
c00277a3:	d3 ea                	shr    edx,cl
c00277a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00277a9:	09 d1                	or     ecx,edx
c00277ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00277af:	88 d9                	mov    cl,bl
c00277b1:	d3 e7                	shl    edi,cl
c00277b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00277b7:	89 f7                	mov    edi,esi
c00277b9:	88 c1                	mov    cl,al
c00277bb:	d3 ef                	shr    edi,cl
c00277bd:	88 d9                	mov    cl,bl
c00277bf:	d3 e6                	shl    esi,cl
c00277c1:	89 ea                	mov    edx,ebp
c00277c3:	88 c1                	mov    cl,al
c00277c5:	d3 ea                	shr    edx,cl
c00277c7:	09 d6                	or     esi,edx
c00277c9:	89 f0                	mov    eax,esi
c00277cb:	89 fa                	mov    edx,edi
c00277cd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00277d1:	89 d7                	mov    edi,edx
c00277d3:	89 c6                	mov    esi,eax
c00277d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00277d9:	39 d7                	cmp    edi,edx
c00277db:	72 13                	jb     c00277f0 <__udivdi3+0xec>
c00277dd:	74 09                	je     c00277e8 <__udivdi3+0xe4>
c00277df:	89 f0                	mov    eax,esi
c00277e1:	31 db                	xor    ebx,ebx
c00277e3:	e9 43 ff ff ff       	jmp    c002772b <__udivdi3+0x27>
c00277e8:	88 d9                	mov    cl,bl
c00277ea:	d3 e5                	shl    ebp,cl
c00277ec:	39 c5                	cmp    ebp,eax
c00277ee:	73 ef                	jae    c00277df <__udivdi3+0xdb>
c00277f0:	8d 46 ff             	lea    eax,[esi-0x1]
c00277f3:	31 db                	xor    ebx,ebx
c00277f5:	e9 31 ff ff ff       	jmp    c002772b <__udivdi3+0x27>
c00277fa:	66 90                	xchg   ax,ax
c00277fc:	31 c0                	xor    eax,eax
c00277fe:	e9 28 ff ff ff       	jmp    c002772b <__udivdi3+0x27>
c0027803:	90                   	nop

c0027804 <__umoddi3>:
c0027804:	55                   	push   ebp
c0027805:	57                   	push   edi
c0027806:	56                   	push   esi
c0027807:	53                   	push   ebx
c0027808:	83 ec 1c             	sub    esp,0x1c
c002780b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002780f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027813:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027817:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002781b:	89 da                	mov    edx,ebx
c002781d:	85 c0                	test   eax,eax
c002781f:	75 37                	jne    c0027858 <__umoddi3+0x54>
c0027821:	39 df                	cmp    edi,ebx
c0027823:	76 13                	jbe    c0027838 <__umoddi3+0x34>
c0027825:	89 f0                	mov    eax,esi
c0027827:	f7 f7                	div    edi
c0027829:	89 d0                	mov    eax,edx
c002782b:	31 d2                	xor    edx,edx
c002782d:	83 c4 1c             	add    esp,0x1c
c0027830:	5b                   	pop    ebx
c0027831:	5e                   	pop    esi
c0027832:	5f                   	pop    edi
c0027833:	5d                   	pop    ebp
c0027834:	c3                   	ret    
c0027835:	8d 76 00             	lea    esi,[esi+0x0]
c0027838:	89 fd                	mov    ebp,edi
c002783a:	85 ff                	test   edi,edi
c002783c:	75 0b                	jne    c0027849 <__umoddi3+0x45>
c002783e:	b8 01 00 00 00       	mov    eax,0x1
c0027843:	31 d2                	xor    edx,edx
c0027845:	f7 f7                	div    edi
c0027847:	89 c5                	mov    ebp,eax
c0027849:	89 d8                	mov    eax,ebx
c002784b:	31 d2                	xor    edx,edx
c002784d:	f7 f5                	div    ebp
c002784f:	89 f0                	mov    eax,esi
c0027851:	f7 f5                	div    ebp
c0027853:	89 d0                	mov    eax,edx
c0027855:	eb d4                	jmp    c002782b <__umoddi3+0x27>
c0027857:	90                   	nop
c0027858:	89 f1                	mov    ecx,esi
c002785a:	39 d8                	cmp    eax,ebx
c002785c:	76 0a                	jbe    c0027868 <__umoddi3+0x64>
c002785e:	89 f0                	mov    eax,esi
c0027860:	83 c4 1c             	add    esp,0x1c
c0027863:	5b                   	pop    ebx
c0027864:	5e                   	pop    esi
c0027865:	5f                   	pop    edi
c0027866:	5d                   	pop    ebp
c0027867:	c3                   	ret    
c0027868:	0f bd e8             	bsr    ebp,eax
c002786b:	83 f5 1f             	xor    ebp,0x1f
c002786e:	75 1c                	jne    c002788c <__umoddi3+0x88>
c0027870:	39 d8                	cmp    eax,ebx
c0027872:	72 04                	jb     c0027878 <__umoddi3+0x74>
c0027874:	39 f7                	cmp    edi,esi
c0027876:	77 08                	ja     c0027880 <__umoddi3+0x7c>
c0027878:	89 da                	mov    edx,ebx
c002787a:	29 fe                	sub    esi,edi
c002787c:	19 c2                	sbb    edx,eax
c002787e:	89 f1                	mov    ecx,esi
c0027880:	89 c8                	mov    eax,ecx
c0027882:	83 c4 1c             	add    esp,0x1c
c0027885:	5b                   	pop    ebx
c0027886:	5e                   	pop    esi
c0027887:	5f                   	pop    edi
c0027888:	5d                   	pop    ebp
c0027889:	c3                   	ret    
c002788a:	66 90                	xchg   ax,ax
c002788c:	ba 20 00 00 00       	mov    edx,0x20
c0027891:	29 ea                	sub    edx,ebp
c0027893:	89 e9                	mov    ecx,ebp
c0027895:	d3 e0                	shl    eax,cl
c0027897:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002789b:	89 f8                	mov    eax,edi
c002789d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00278a1:	88 d1                	mov    cl,dl
c00278a3:	d3 e8                	shr    eax,cl
c00278a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00278a9:	09 c1                	or     ecx,eax
c00278ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00278af:	89 e9                	mov    ecx,ebp
c00278b1:	d3 e7                	shl    edi,cl
c00278b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00278b7:	89 d8                	mov    eax,ebx
c00278b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00278bd:	88 d1                	mov    cl,dl
c00278bf:	d3 e8                	shr    eax,cl
c00278c1:	89 c7                	mov    edi,eax
c00278c3:	89 e9                	mov    ecx,ebp
c00278c5:	d3 e3                	shl    ebx,cl
c00278c7:	89 f0                	mov    eax,esi
c00278c9:	88 d1                	mov    cl,dl
c00278cb:	d3 e8                	shr    eax,cl
c00278cd:	09 d8                	or     eax,ebx
c00278cf:	89 e9                	mov    ecx,ebp
c00278d1:	d3 e6                	shl    esi,cl
c00278d3:	89 f3                	mov    ebx,esi
c00278d5:	89 fa                	mov    edx,edi
c00278d7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00278db:	89 d1                	mov    ecx,edx
c00278dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00278e1:	89 c6                	mov    esi,eax
c00278e3:	89 d7                	mov    edi,edx
c00278e5:	39 d1                	cmp    ecx,edx
c00278e7:	72 27                	jb     c0027910 <__umoddi3+0x10c>
c00278e9:	74 21                	je     c002790c <__umoddi3+0x108>
c00278eb:	89 ca                	mov    edx,ecx
c00278ed:	29 f3                	sub    ebx,esi
c00278ef:	19 fa                	sbb    edx,edi
c00278f1:	89 d0                	mov    eax,edx
c00278f3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00278f7:	d3 e0                	shl    eax,cl
c00278f9:	89 e9                	mov    ecx,ebp
c00278fb:	d3 eb                	shr    ebx,cl
c00278fd:	09 d8                	or     eax,ebx
c00278ff:	d3 ea                	shr    edx,cl
c0027901:	83 c4 1c             	add    esp,0x1c
c0027904:	5b                   	pop    ebx
c0027905:	5e                   	pop    esi
c0027906:	5f                   	pop    edi
c0027907:	5d                   	pop    ebp
c0027908:	c3                   	ret    
c0027909:	8d 76 00             	lea    esi,[esi+0x0]
c002790c:	39 c3                	cmp    ebx,eax
c002790e:	73 db                	jae    c00278eb <__umoddi3+0xe7>
c0027910:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027914:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027918:	89 d7                	mov    edi,edx
c002791a:	89 c6                	mov    esi,eax
c002791c:	eb cd                	jmp    c00278eb <__umoddi3+0xe7>

c002791e <__addsf3>:
c002791e:	55                   	push   ebp
c002791f:	89 e5                	mov    ebp,esp
c0027921:	57                   	push   edi
c0027922:	56                   	push   esi
c0027923:	53                   	push   ebx
c0027924:	83 ec 08             	sub    esp,0x8
c0027927:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002792a:	89 fa                	mov    edx,edi
c002792c:	89 f8                	mov    eax,edi
c002792e:	c1 f8 17             	sar    eax,0x17
c0027931:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027934:	c1 e2 08             	shl    edx,0x8
c0027937:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002793d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027940:	89 de                	mov    esi,ebx
c0027942:	c1 fe 17             	sar    esi,0x17
c0027945:	c1 e3 08             	shl    ebx,0x8
c0027948:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002794e:	31 f0                	xor    eax,esi
c0027950:	0f 88 3b 01 00 00    	js     c0027a91 <__addsf3+0x173>
c0027956:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027959:	29 f1                	sub    ecx,esi
c002795b:	85 c9                	test   ecx,ecx
c002795d:	7e 54                	jle    c00279b3 <__addsf3+0x95>
c002795f:	89 f0                	mov    eax,esi
c0027961:	84 c0                	test   al,al
c0027963:	75 10                	jne    c0027975 <__addsf3+0x57>
c0027965:	85 db                	test   ebx,ebx
c0027967:	0f 84 aa 02 00 00    	je     c0027c17 <__addsf3+0x2f9>
c002796d:	49                   	dec    ecx
c002796e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027971:	74 38                	je     c00279ab <__addsf3+0x8d>
c0027973:	eb 13                	jmp    c0027988 <__addsf3+0x6a>
c0027975:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027978:	f7 d0                	not    eax
c002797a:	84 c0                	test   al,al
c002797c:	0f 84 95 02 00 00    	je     c0027c17 <__addsf3+0x2f9>
c0027982:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027988:	83 f9 1f             	cmp    ecx,0x1f
c002798b:	0f 8f 86 02 00 00    	jg     c0027c17 <__addsf3+0x2f9>
c0027991:	89 de                	mov    esi,ebx
c0027993:	d3 ee                	shr    esi,cl
c0027995:	b8 20 00 00 00       	mov    eax,0x20
c002799a:	29 c8                	sub    eax,ecx
c002799c:	89 c1                	mov    ecx,eax
c002799e:	d3 e3                	shl    ebx,cl
c00279a0:	31 c0                	xor    eax,eax
c00279a2:	85 db                	test   ebx,ebx
c00279a4:	0f 95 c0             	setne  al
c00279a7:	09 f0                	or     eax,esi
c00279a9:	01 d0                	add    eax,edx
c00279ab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00279ae:	e9 b6 00 00 00       	jmp    c0027a69 <__addsf3+0x14b>
c00279b3:	74 5c                	je     c0027a11 <__addsf3+0xf3>
c00279b5:	89 f1                	mov    ecx,esi
c00279b7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00279ba:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00279bd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00279c1:	75 14                	jne    c00279d7 <__addsf3+0xb9>
c00279c3:	85 d2                	test   edx,edx
c00279c5:	0f 84 4c 02 00 00    	je     c0027c17 <__addsf3+0x2f9>
c00279cb:	49                   	dec    ecx
c00279cc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00279cf:	0f 84 94 00 00 00    	je     c0027a69 <__addsf3+0x14b>
c00279d5:	eb 12                	jmp    c00279e9 <__addsf3+0xcb>
c00279d7:	89 f0                	mov    eax,esi
c00279d9:	f7 d0                	not    eax
c00279db:	84 c0                	test   al,al
c00279dd:	0f 84 34 02 00 00    	je     c0027c17 <__addsf3+0x2f9>
c00279e3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00279e9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00279ec:	83 f9 1f             	cmp    ecx,0x1f
c00279ef:	0f 8f 22 02 00 00    	jg     c0027c17 <__addsf3+0x2f9>
c00279f5:	89 d7                	mov    edi,edx
c00279f7:	d3 ef                	shr    edi,cl
c00279f9:	b8 20 00 00 00       	mov    eax,0x20
c00279fe:	29 c8                	sub    eax,ecx
c0027a00:	89 c1                	mov    ecx,eax
c0027a02:	d3 e2                	shl    edx,cl
c0027a04:	31 c0                	xor    eax,eax
c0027a06:	85 d2                	test   edx,edx
c0027a08:	0f 95 c0             	setne  al
c0027a0b:	09 f8                	or     eax,edi
c0027a0d:	01 d8                	add    eax,ebx
c0027a0f:	eb 58                	jmp    c0027a69 <__addsf3+0x14b>
c0027a11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027a14:	8d 70 01             	lea    esi,[eax+0x1]
c0027a17:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0027a1d:	75 32                	jne    c0027a51 <__addsf3+0x133>
c0027a1f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027a23:	75 1f                	jne    c0027a44 <__addsf3+0x126>
c0027a25:	85 d2                	test   edx,edx
c0027a27:	0f 84 e0 01 00 00    	je     c0027c0d <__addsf3+0x2ef>
c0027a2d:	85 db                	test   ebx,ebx
c0027a2f:	0f 84 e2 01 00 00    	je     c0027c17 <__addsf3+0x2f9>
c0027a35:	89 d0                	mov    eax,edx
c0027a37:	01 d8                	add    eax,ebx
c0027a39:	0f 89 a9 01 00 00    	jns    c0027be8 <__addsf3+0x2ca>
c0027a3f:	e9 9d 01 00 00       	jmp    c0027be1 <__addsf3+0x2c3>
c0027a44:	85 d2                	test   edx,edx
c0027a46:	0f 85 cb 01 00 00    	jne    c0027c17 <__addsf3+0x2f9>
c0027a4c:	e9 bc 01 00 00       	jmp    c0027c0d <__addsf3+0x2ef>
c0027a51:	31 c0                	xor    eax,eax
c0027a53:	89 f1                	mov    ecx,esi
c0027a55:	f7 d1                	not    ecx
c0027a57:	84 c9                	test   cl,cl
c0027a59:	0f 84 90 01 00 00    	je     c0027bef <__addsf3+0x2d1>
c0027a5f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027a62:	d1 e8                	shr    eax,1
c0027a64:	e9 86 01 00 00       	jmp    c0027bef <__addsf3+0x2d1>
c0027a69:	85 c0                	test   eax,eax
c0027a6b:	0f 89 7e 01 00 00    	jns    c0027bef <__addsf3+0x2d1>
c0027a71:	46                   	inc    esi
c0027a72:	89 f2                	mov    edx,esi
c0027a74:	f7 d2                	not    edx
c0027a76:	84 d2                	test   dl,dl
c0027a78:	0f 84 6f 01 00 00    	je     c0027bed <__addsf3+0x2cf>
c0027a7e:	89 c2                	mov    edx,eax
c0027a80:	83 e2 01             	and    edx,0x1
c0027a83:	d1 e8                	shr    eax,1
c0027a85:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027a8a:	09 d0                	or     eax,edx
c0027a8c:	e9 5e 01 00 00       	jmp    c0027bef <__addsf3+0x2d1>
c0027a91:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027a95:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a98:	89 f0                	mov    eax,esi
c0027a9a:	0f b6 c0             	movzx  eax,al
c0027a9d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027aa0:	29 c1                	sub    ecx,eax
c0027aa2:	85 c9                	test   ecx,ecx
c0027aa4:	7e 55                	jle    c0027afb <__addsf3+0x1dd>
c0027aa6:	85 c0                	test   eax,eax
c0027aa8:	75 11                	jne    c0027abb <__addsf3+0x19d>
c0027aaa:	85 db                	test   ebx,ebx
c0027aac:	0f 84 65 01 00 00    	je     c0027c17 <__addsf3+0x2f9>
c0027ab2:	49                   	dec    ecx
c0027ab3:	75 19                	jne    c0027ace <__addsf3+0x1b0>
c0027ab5:	89 d0                	mov    eax,edx
c0027ab7:	29 d8                	sub    eax,ebx
c0027ab9:	eb 38                	jmp    c0027af3 <__addsf3+0x1d5>
c0027abb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027abe:	f7 d0                	not    eax
c0027ac0:	84 c0                	test   al,al
c0027ac2:	0f 84 4f 01 00 00    	je     c0027c17 <__addsf3+0x2f9>
c0027ac8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027ace:	83 f9 1f             	cmp    ecx,0x1f
c0027ad1:	0f 8f 40 01 00 00    	jg     c0027c17 <__addsf3+0x2f9>
c0027ad7:	89 de                	mov    esi,ebx
c0027ad9:	d3 ee                	shr    esi,cl
c0027adb:	b8 20 00 00 00       	mov    eax,0x20
c0027ae0:	29 c8                	sub    eax,ecx
c0027ae2:	89 c1                	mov    ecx,eax
c0027ae4:	d3 e3                	shl    ebx,cl
c0027ae6:	31 c0                	xor    eax,eax
c0027ae8:	85 db                	test   ebx,ebx
c0027aea:	0f 95 c0             	setne  al
c0027aed:	09 f0                	or     eax,esi
c0027aef:	29 c2                	sub    edx,eax
c0027af1:	89 d0                	mov    eax,edx
c0027af3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027af6:	e9 af 00 00 00       	jmp    c0027baa <__addsf3+0x28c>
c0027afb:	74 5c                	je     c0027b59 <__addsf3+0x23b>
c0027afd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027b00:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027b03:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027b07:	75 14                	jne    c0027b1d <__addsf3+0x1ff>
c0027b09:	85 d2                	test   edx,edx
c0027b0b:	0f 84 06 01 00 00    	je     c0027c17 <__addsf3+0x2f9>
c0027b11:	48                   	dec    eax
c0027b12:	75 1b                	jne    c0027b2f <__addsf3+0x211>
c0027b14:	89 d8                	mov    eax,ebx
c0027b16:	29 d0                	sub    eax,edx
c0027b18:	e9 8d 00 00 00       	jmp    c0027baa <__addsf3+0x28c>
c0027b1d:	89 f1                	mov    ecx,esi
c0027b1f:	f7 d1                	not    ecx
c0027b21:	84 c9                	test   cl,cl
c0027b23:	0f 84 ee 00 00 00    	je     c0027c17 <__addsf3+0x2f9>
c0027b29:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027b2f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027b32:	83 f8 1f             	cmp    eax,0x1f
c0027b35:	0f 8f dc 00 00 00    	jg     c0027c17 <__addsf3+0x2f9>
c0027b3b:	89 d7                	mov    edi,edx
c0027b3d:	88 c1                	mov    cl,al
c0027b3f:	d3 ef                	shr    edi,cl
c0027b41:	b9 20 00 00 00       	mov    ecx,0x20
c0027b46:	29 c1                	sub    ecx,eax
c0027b48:	d3 e2                	shl    edx,cl
c0027b4a:	31 c0                	xor    eax,eax
c0027b4c:	85 d2                	test   edx,edx
c0027b4e:	0f 95 c0             	setne  al
c0027b51:	09 f8                	or     eax,edi
c0027b53:	29 c3                	sub    ebx,eax
c0027b55:	89 d8                	mov    eax,ebx
c0027b57:	eb 51                	jmp    c0027baa <__addsf3+0x28c>
c0027b59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027b5c:	40                   	inc    eax
c0027b5d:	a8 fe                	test   al,0xfe
c0027b5f:	75 3d                	jne    c0027b9e <__addsf3+0x280>
c0027b61:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027b65:	0f 85 a7 00 00 00    	jne    c0027c12 <__addsf3+0x2f4>
c0027b6b:	85 d2                	test   edx,edx
c0027b6d:	75 12                	jne    c0027b81 <__addsf3+0x263>
c0027b6f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027b72:	85 db                	test   ebx,ebx
c0027b74:	0f 85 9d 00 00 00    	jne    c0027c17 <__addsf3+0x2f9>
c0027b7a:	31 ff                	xor    edi,edi
c0027b7c:	e9 96 00 00 00       	jmp    c0027c17 <__addsf3+0x2f9>
c0027b81:	85 db                	test   ebx,ebx
c0027b83:	0f 84 8e 00 00 00    	je     c0027c17 <__addsf3+0x2f9>
c0027b89:	89 d0                	mov    eax,edx
c0027b8b:	29 d8                	sub    eax,ebx
c0027b8d:	79 06                	jns    c0027b95 <__addsf3+0x277>
c0027b8f:	89 d8                	mov    eax,ebx
c0027b91:	29 d0                	sub    eax,edx
c0027b93:	eb 5a                	jmp    c0027bef <__addsf3+0x2d1>
c0027b95:	bf 00 00 00 00       	mov    edi,0x0
c0027b9a:	74 7b                	je     c0027c17 <__addsf3+0x2f9>
c0027b9c:	eb 4a                	jmp    c0027be8 <__addsf3+0x2ca>
c0027b9e:	89 d0                	mov    eax,edx
c0027ba0:	29 d8                	sub    eax,ebx
c0027ba2:	79 12                	jns    c0027bb6 <__addsf3+0x298>
c0027ba4:	89 d8                	mov    eax,ebx
c0027ba6:	29 d0                	sub    eax,edx
c0027ba8:	eb 09                	jmp    c0027bb3 <__addsf3+0x295>
c0027baa:	85 c0                	test   eax,eax
c0027bac:	79 41                	jns    c0027bef <__addsf3+0x2d1>
c0027bae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bb3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027bb6:	31 f6                	xor    esi,esi
c0027bb8:	85 c0                	test   eax,eax
c0027bba:	74 33                	je     c0027bef <__addsf3+0x2d1>
c0027bbc:	0f bd c8             	bsr    ecx,eax
c0027bbf:	83 f1 1f             	xor    ecx,0x1f
c0027bc2:	d3 e0                	shl    eax,cl
c0027bc4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027bc8:	39 ca                	cmp    edx,ecx
c0027bca:	7f 10                	jg     c0027bdc <__addsf3+0x2be>
c0027bcc:	29 d1                	sub    ecx,edx
c0027bce:	41                   	inc    ecx
c0027bcf:	d3 e8                	shr    eax,cl
c0027bd1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027bd4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0027bda:	eb 13                	jmp    c0027bef <__addsf3+0x2d1>
c0027bdc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027bdf:	29 ce                	sub    esi,ecx
c0027be1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027be6:	eb 07                	jmp    c0027bef <__addsf3+0x2d1>
c0027be8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027beb:	eb 02                	jmp    c0027bef <__addsf3+0x2d1>
c0027bed:	31 c0                	xor    eax,eax
c0027bef:	89 c2                	mov    edx,eax
c0027bf1:	c1 ea 08             	shr    edx,0x8
c0027bf4:	a8 7f                	test   al,0x7f
c0027bf6:	0f 95 c1             	setne  cl
c0027bf9:	09 d1                	or     ecx,edx
c0027bfb:	83 e1 01             	and    ecx,0x1
c0027bfe:	c1 e8 07             	shr    eax,0x7
c0027c01:	21 c8                	and    eax,ecx
c0027c03:	c1 e6 17             	shl    esi,0x17
c0027c06:	09 d6                	or     esi,edx
c0027c08:	8d 3c 30             	lea    edi,[eax+esi*1]
c0027c0b:	eb 0a                	jmp    c0027c17 <__addsf3+0x2f9>
c0027c0d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027c10:	eb 05                	jmp    c0027c17 <__addsf3+0x2f9>
c0027c12:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027c17:	89 f8                	mov    eax,edi
c0027c19:	5a                   	pop    edx
c0027c1a:	59                   	pop    ecx
c0027c1b:	5b                   	pop    ebx
c0027c1c:	5e                   	pop    esi
c0027c1d:	5f                   	pop    edi
c0027c1e:	5d                   	pop    ebp
c0027c1f:	c3                   	ret    

c0027c20 <__subsf3>:
c0027c20:	55                   	push   ebp
c0027c21:	89 e5                	mov    ebp,esp
c0027c23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c26:	05 00 00 00 80       	add    eax,0x80000000
c0027c2b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0027c2e:	5d                   	pop    ebp
c0027c2f:	e9 ea fc ff ff       	jmp    c002791e <__addsf3>

c0027c34 <__negsf2>:
c0027c34:	55                   	push   ebp
c0027c35:	89 e5                	mov    ebp,esp
c0027c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c3a:	05 00 00 00 80       	add    eax,0x80000000
c0027c3f:	5d                   	pop    ebp
c0027c40:	c3                   	ret    

c0027c41 <__mulsf3>:
c0027c41:	55                   	push   ebp
c0027c42:	89 e5                	mov    ebp,esp
c0027c44:	57                   	push   edi
c0027c45:	56                   	push   esi
c0027c46:	53                   	push   ebx
c0027c47:	83 ec 1c             	sub    esp,0x1c
c0027c4a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0027c4d:	89 f0                	mov    eax,esi
c0027c4f:	89 f1                	mov    ecx,esi
c0027c51:	c1 f9 17             	sar    ecx,0x17
c0027c54:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027c57:	c1 e0 08             	shl    eax,0x8
c0027c5a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c5f:	89 c1                	mov    ecx,eax
c0027c61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c64:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c67:	89 c7                	mov    edi,eax
c0027c69:	c1 ff 17             	sar    edi,0x17
c0027c6c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027c70:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027c73:	89 f8                	mov    eax,edi
c0027c75:	0f b6 c0             	movzx  eax,al
c0027c78:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027c7b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027c7f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027c82:	42                   	inc    edx
c0027c83:	80 e2 fe             	and    dl,0xfe
c0027c86:	75 7b                	jne    c0027d03 <__mulsf3+0xc2>
c0027c88:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027c8c:	74 54                	je     c0027ce2 <__mulsf3+0xa1>
c0027c8e:	85 c9                	test   ecx,ecx
c0027c90:	0f 85 64 01 00 00    	jne    c0027dfa <__mulsf3+0x1b9>
c0027c96:	8d 57 01             	lea    edx,[edi+0x1]
c0027c99:	80 e2 fe             	and    dl,0xfe
c0027c9c:	75 1f                	jne    c0027cbd <__mulsf3+0x7c>
c0027c9e:	85 c0                	test   eax,eax
c0027ca0:	b8 00 00 00 00       	mov    eax,0x0
c0027ca5:	74 29                	je     c0027cd0 <__mulsf3+0x8f>
c0027ca7:	53                   	push   ebx
c0027ca8:	53                   	push   ebx
c0027ca9:	50                   	push   eax
c0027caa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cad:	e8 96 05 00 00       	call   c0028248 <__nesf2>
c0027cb2:	83 c4 10             	add    esp,0x10
c0027cb5:	85 c0                	test   eax,eax
c0027cb7:	0f 85 3a 01 00 00    	jne    c0027df7 <__mulsf3+0x1b6>
c0027cbd:	85 ff                	test   edi,edi
c0027cbf:	0f 89 35 01 00 00    	jns    c0027dfa <__mulsf3+0x1b9>
c0027cc5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027ccb:	e9 2a 01 00 00       	jmp    c0027dfa <__mulsf3+0x1b9>
c0027cd0:	51                   	push   ecx
c0027cd1:	51                   	push   ecx
c0027cd2:	50                   	push   eax
c0027cd3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cd6:	e8 6d 05 00 00       	call   c0028248 <__nesf2>
c0027cdb:	83 c4 10             	add    esp,0x10
c0027cde:	85 c0                	test   eax,eax
c0027ce0:	eb 15                	jmp    c0027cf7 <__mulsf3+0xb6>
c0027ce2:	85 c9                	test   ecx,ecx
c0027ce4:	74 0b                	je     c0027cf1 <__mulsf3+0xb0>
c0027ce6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027ce9:	01 c9                	add    ecx,ecx
c0027ceb:	78 16                	js     c0027d03 <__mulsf3+0xc2>
c0027ced:	89 d3                	mov    ebx,edx
c0027cef:	eb f5                	jmp    c0027ce6 <__mulsf3+0xa5>
c0027cf1:	89 f8                	mov    eax,edi
c0027cf3:	f7 d0                	not    eax
c0027cf5:	84 c0                	test   al,al
c0027cf7:	75 c4                	jne    c0027cbd <__mulsf3+0x7c>
c0027cf9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027cfe:	e9 f7 00 00 00       	jmp    c0027dfa <__mulsf3+0x1b9>
c0027d03:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027d06:	c1 e6 08             	shl    esi,0x8
c0027d09:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027d0f:	8d 57 01             	lea    edx,[edi+0x1]
c0027d12:	80 e2 fe             	and    dl,0xfe
c0027d15:	75 63                	jne    c0027d7a <__mulsf3+0x139>
c0027d17:	85 c0                	test   eax,eax
c0027d19:	74 2f                	je     c0027d4a <__mulsf3+0x109>
c0027d1b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027d1f:	0f 89 d2 00 00 00    	jns    c0027df7 <__mulsf3+0x1b6>
c0027d25:	52                   	push   edx
c0027d26:	52                   	push   edx
c0027d27:	6a 00                	push   0x0
c0027d29:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d2c:	e8 dc 04 00 00       	call   c002820d <__eqsf2>
c0027d31:	83 c4 10             	add    esp,0x10
c0027d34:	85 c0                	test   eax,eax
c0027d36:	0f 85 bb 00 00 00    	jne    c0027df7 <__mulsf3+0x1b6>
c0027d3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027d3f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027d45:	e9 b0 00 00 00       	jmp    c0027dfa <__mulsf3+0x1b9>
c0027d4a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027d4d:	50                   	push   eax
c0027d4e:	50                   	push   eax
c0027d4f:	6a 00                	push   0x0
c0027d51:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d54:	e8 b4 04 00 00       	call   c002820d <__eqsf2>
c0027d59:	83 c4 10             	add    esp,0x10
c0027d5c:	85 c0                	test   eax,eax
c0027d5e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d61:	75 0c                	jne    c0027d6f <__mulsf3+0x12e>
c0027d63:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027d67:	0f 89 8a 00 00 00    	jns    c0027df7 <__mulsf3+0x1b6>
c0027d6d:	eb cd                	jmp    c0027d3c <__mulsf3+0xfb>
c0027d6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d72:	01 f6                	add    esi,esi
c0027d74:	78 04                	js     c0027d7a <__mulsf3+0x139>
c0027d76:	89 c3                	mov    ebx,eax
c0027d78:	eb f5                	jmp    c0027d6f <__mulsf3+0x12e>
c0027d7a:	89 c8                	mov    eax,ecx
c0027d7c:	0d 00 00 00 80       	or     eax,0x80000000
c0027d81:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d87:	f7 e6                	mul    esi
c0027d89:	85 c0                	test   eax,eax
c0027d8b:	0f 95 c0             	setne  al
c0027d8e:	0f b6 c0             	movzx  eax,al
c0027d91:	09 c2                	or     edx,eax
c0027d93:	78 03                	js     c0027d98 <__mulsf3+0x157>
c0027d95:	01 d2                	add    edx,edx
c0027d97:	4b                   	dec    ebx
c0027d98:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027d9e:	7f 22                	jg     c0027dc2 <__mulsf3+0x181>
c0027da0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027da6:	85 db                	test   ebx,ebx
c0027da8:	7f 23                	jg     c0027dcd <__mulsf3+0x18c>
c0027daa:	83 fb e9             	cmp    ebx,0xffffffe9
c0027dad:	7c 1a                	jl     c0027dc9 <__mulsf3+0x188>
c0027daf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027db5:	b9 01 00 00 00       	mov    ecx,0x1
c0027dba:	29 d9                	sub    ecx,ebx
c0027dbc:	d3 ea                	shr    edx,cl
c0027dbe:	31 db                	xor    ebx,ebx
c0027dc0:	eb 0b                	jmp    c0027dcd <__mulsf3+0x18c>
c0027dc2:	bb ff 00 00 00       	mov    ebx,0xff
c0027dc7:	eb 02                	jmp    c0027dcb <__mulsf3+0x18a>
c0027dc9:	31 db                	xor    ebx,ebx
c0027dcb:	31 d2                	xor    edx,edx
c0027dcd:	89 d0                	mov    eax,edx
c0027dcf:	c1 e8 08             	shr    eax,0x8
c0027dd2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027dd5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027ddb:	09 fb                	or     ebx,edi
c0027ddd:	c1 e3 17             	shl    ebx,0x17
c0027de0:	09 c3                	or     ebx,eax
c0027de2:	f6 c2 7f             	test   dl,0x7f
c0027de5:	0f 95 c1             	setne  cl
c0027de8:	09 c8                	or     eax,ecx
c0027dea:	83 e0 01             	and    eax,0x1
c0027ded:	c1 ea 07             	shr    edx,0x7
c0027df0:	21 c2                	and    edx,eax
c0027df2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027df5:	eb 03                	jmp    c0027dfa <__mulsf3+0x1b9>
c0027df7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027dfa:	89 f0                	mov    eax,esi
c0027dfc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027dff:	5b                   	pop    ebx
c0027e00:	5e                   	pop    esi
c0027e01:	5f                   	pop    edi
c0027e02:	5d                   	pop    ebp
c0027e03:	c3                   	ret    

c0027e04 <__divsf3>:
c0027e04:	55                   	push   ebp
c0027e05:	89 e5                	mov    ebp,esp
c0027e07:	57                   	push   edi
c0027e08:	56                   	push   esi
c0027e09:	53                   	push   ebx
c0027e0a:	83 ec 1c             	sub    esp,0x1c
c0027e0d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e10:	89 d8                	mov    eax,ebx
c0027e12:	89 d9                	mov    ecx,ebx
c0027e14:	c1 f9 17             	sar    ecx,0x17
c0027e17:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027e1a:	c1 e0 08             	shl    eax,0x8
c0027e1d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027e22:	89 c1                	mov    ecx,eax
c0027e24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027e27:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e2a:	89 c7                	mov    edi,eax
c0027e2c:	c1 ff 17             	sar    edi,0x17
c0027e2f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027e33:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027e36:	89 f8                	mov    eax,edi
c0027e38:	0f b6 c0             	movzx  eax,al
c0027e3b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e3e:	29 c6                	sub    esi,eax
c0027e40:	83 c6 7f             	add    esi,0x7f
c0027e43:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027e46:	42                   	inc    edx
c0027e47:	80 e2 fe             	and    dl,0xfe
c0027e4a:	0f 85 9c 00 00 00    	jne    c0027eec <__divsf3+0xe8>
c0027e50:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e54:	74 33                	je     c0027e89 <__divsf3+0x85>
c0027e56:	85 c9                	test   ecx,ecx
c0027e58:	0f 85 c7 01 00 00    	jne    c0028025 <__divsf3+0x221>
c0027e5e:	8d 57 01             	lea    edx,[edi+0x1]
c0027e61:	80 e2 fe             	and    dl,0xfe
c0027e64:	75 2f                	jne    c0027e95 <__divsf3+0x91>
c0027e66:	85 c0                	test   eax,eax
c0027e68:	74 2b                	je     c0027e95 <__divsf3+0x91>
c0027e6a:	51                   	push   ecx
c0027e6b:	51                   	push   ecx
c0027e6c:	6a 00                	push   0x0
c0027e6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e71:	e8 d2 03 00 00       	call   c0028248 <__nesf2>
c0027e76:	83 c4 10             	add    esp,0x10
c0027e79:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027e7c:	85 c0                	test   eax,eax
c0027e7e:	0f 85 a1 01 00 00    	jne    c0028025 <__divsf3+0x221>
c0027e84:	e9 92 01 00 00       	jmp    c002801b <__divsf3+0x217>
c0027e89:	85 c9                	test   ecx,ecx
c0027e8b:	75 1b                	jne    c0027ea8 <__divsf3+0xa4>
c0027e8d:	8d 57 01             	lea    edx,[edi+0x1]
c0027e90:	80 e2 fe             	and    dl,0xfe
c0027e93:	74 1e                	je     c0027eb3 <__divsf3+0xaf>
c0027e95:	85 ff                	test   edi,edi
c0027e97:	0f 89 88 01 00 00    	jns    c0028025 <__divsf3+0x221>
c0027e9d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027ea3:	e9 7d 01 00 00       	jmp    c0028025 <__divsf3+0x221>
c0027ea8:	8d 56 ff             	lea    edx,[esi-0x1]
c0027eab:	01 c9                	add    ecx,ecx
c0027ead:	78 3d                	js     c0027eec <__divsf3+0xe8>
c0027eaf:	89 d6                	mov    esi,edx
c0027eb1:	eb f5                	jmp    c0027ea8 <__divsf3+0xa4>
c0027eb3:	85 c0                	test   eax,eax
c0027eb5:	b8 00 00 00 00       	mov    eax,0x0
c0027eba:	74 18                	je     c0027ed4 <__divsf3+0xd0>
c0027ebc:	52                   	push   edx
c0027ebd:	52                   	push   edx
c0027ebe:	50                   	push   eax
c0027ebf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ec2:	e8 81 03 00 00       	call   c0028248 <__nesf2>
c0027ec7:	83 c4 10             	add    esp,0x10
c0027eca:	85 c0                	test   eax,eax
c0027ecc:	0f 85 50 01 00 00    	jne    c0028022 <__divsf3+0x21e>
c0027ed2:	eb c1                	jmp    c0027e95 <__divsf3+0x91>
c0027ed4:	56                   	push   esi
c0027ed5:	56                   	push   esi
c0027ed6:	50                   	push   eax
c0027ed7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027eda:	e8 69 03 00 00       	call   c0028248 <__nesf2>
c0027edf:	83 c4 10             	add    esp,0x10
c0027ee2:	85 c0                	test   eax,eax
c0027ee4:	0f 84 31 01 00 00    	je     c002801b <__divsf3+0x217>
c0027eea:	eb a9                	jmp    c0027e95 <__divsf3+0x91>
c0027eec:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027eef:	c1 e3 08             	shl    ebx,0x8
c0027ef2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027ef8:	8d 57 01             	lea    edx,[edi+0x1]
c0027efb:	80 e2 fe             	and    dl,0xfe
c0027efe:	75 71                	jne    c0027f71 <__divsf3+0x16d>
c0027f00:	85 c0                	test   eax,eax
c0027f02:	ba 00 00 00 00       	mov    edx,0x0
c0027f07:	74 2f                	je     c0027f38 <__divsf3+0x134>
c0027f09:	51                   	push   ecx
c0027f0a:	51                   	push   ecx
c0027f0b:	52                   	push   edx
c0027f0c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027f0f:	e8 f9 02 00 00       	call   c002820d <__eqsf2>
c0027f14:	83 c4 10             	add    esp,0x10
c0027f17:	85 c0                	test   eax,eax
c0027f19:	0f 85 03 01 00 00    	jne    c0028022 <__divsf3+0x21e>
c0027f1f:	31 d2                	xor    edx,edx
c0027f21:	89 d3                	mov    ebx,edx
c0027f23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f26:	31 f8                	xor    eax,edi
c0027f28:	0f 89 f7 00 00 00    	jns    c0028025 <__divsf3+0x221>
c0027f2e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027f33:	e9 ed 00 00 00       	jmp    c0028025 <__divsf3+0x221>
c0027f38:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027f3b:	50                   	push   eax
c0027f3c:	50                   	push   eax
c0027f3d:	52                   	push   edx
c0027f3e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027f41:	e8 c7 02 00 00       	call   c002820d <__eqsf2>
c0027f46:	83 c4 10             	add    esp,0x10
c0027f49:	85 c0                	test   eax,eax
c0027f4b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027f4e:	75 16                	jne    c0027f66 <__divsf3+0x162>
c0027f50:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f53:	31 fb                	xor    ebx,edi
c0027f55:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027f5b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027f61:	e9 bf 00 00 00       	jmp    c0028025 <__divsf3+0x221>
c0027f66:	8d 46 01             	lea    eax,[esi+0x1]
c0027f69:	01 db                	add    ebx,ebx
c0027f6b:	78 04                	js     c0027f71 <__divsf3+0x16d>
c0027f6d:	89 c6                	mov    esi,eax
c0027f6f:	eb f5                	jmp    c0027f66 <__divsf3+0x162>
c0027f71:	89 c8                	mov    eax,ecx
c0027f73:	0d 00 00 00 80       	or     eax,0x80000000
c0027f78:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027f7e:	31 d2                	xor    edx,edx
c0027f80:	39 d8                	cmp    eax,ebx
c0027f82:	72 07                	jb     c0027f8b <__divsf3+0x187>
c0027f84:	29 d8                	sub    eax,ebx
c0027f86:	ba 01 00 00 00       	mov    edx,0x1
c0027f8b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027f92:	01 d2                	add    edx,edx
c0027f94:	89 c1                	mov    ecx,eax
c0027f96:	01 c0                	add    eax,eax
c0027f98:	85 c9                	test   ecx,ecx
c0027f9a:	78 04                	js     c0027fa0 <__divsf3+0x19c>
c0027f9c:	39 c3                	cmp    ebx,eax
c0027f9e:	77 05                	ja     c0027fa5 <__divsf3+0x1a1>
c0027fa0:	29 d8                	sub    eax,ebx
c0027fa2:	83 ca 01             	or     edx,0x1
c0027fa5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027fa8:	75 e8                	jne    c0027f92 <__divsf3+0x18e>
c0027faa:	85 c0                	test   eax,eax
c0027fac:	0f 95 c0             	setne  al
c0027faf:	0f b6 c0             	movzx  eax,al
c0027fb2:	c1 e2 06             	shl    edx,0x6
c0027fb5:	09 c2                	or     edx,eax
c0027fb7:	78 03                	js     c0027fbc <__divsf3+0x1b8>
c0027fb9:	01 d2                	add    edx,edx
c0027fbb:	4e                   	dec    esi
c0027fbc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027fc2:	7f 22                	jg     c0027fe6 <__divsf3+0x1e2>
c0027fc4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027fca:	85 f6                	test   esi,esi
c0027fcc:	7f 23                	jg     c0027ff1 <__divsf3+0x1ed>
c0027fce:	83 fe e9             	cmp    esi,0xffffffe9
c0027fd1:	7c 1a                	jl     c0027fed <__divsf3+0x1e9>
c0027fd3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0027fde:	29 f1                	sub    ecx,esi
c0027fe0:	d3 ea                	shr    edx,cl
c0027fe2:	31 f6                	xor    esi,esi
c0027fe4:	eb 0b                	jmp    c0027ff1 <__divsf3+0x1ed>
c0027fe6:	be ff 00 00 00       	mov    esi,0xff
c0027feb:	eb 02                	jmp    c0027fef <__divsf3+0x1eb>
c0027fed:	31 f6                	xor    esi,esi
c0027fef:	31 d2                	xor    edx,edx
c0027ff1:	89 d0                	mov    eax,edx
c0027ff3:	c1 e8 08             	shr    eax,0x8
c0027ff6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027ff9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027fff:	09 fe                	or     esi,edi
c0028001:	c1 e6 17             	shl    esi,0x17
c0028004:	09 c6                	or     esi,eax
c0028006:	f6 c2 7f             	test   dl,0x7f
c0028009:	0f 95 c1             	setne  cl
c002800c:	09 c8                	or     eax,ecx
c002800e:	83 e0 01             	and    eax,0x1
c0028011:	c1 ea 07             	shr    edx,0x7
c0028014:	21 c2                	and    edx,eax
c0028016:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0028019:	eb 0a                	jmp    c0028025 <__divsf3+0x221>
c002801b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0028020:	eb 03                	jmp    c0028025 <__divsf3+0x221>
c0028022:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0028025:	89 d8                	mov    eax,ebx
c0028027:	8d 65 f4             	lea    esp,[ebp-0xc]
c002802a:	5b                   	pop    ebx
c002802b:	5e                   	pop    esi
c002802c:	5f                   	pop    edi
c002802d:	5d                   	pop    ebp
c002802e:	c3                   	ret    

c002802f <__floatsisf>:
c002802f:	55                   	push   ebp
c0028030:	89 e5                	mov    ebp,esp
c0028032:	53                   	push   ebx
c0028033:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028036:	85 d2                	test   edx,edx
c0028038:	7e 2b                	jle    c0028065 <__floatsisf+0x36>
c002803a:	0f bd ca             	bsr    ecx,edx
c002803d:	83 f1 1f             	xor    ecx,0x1f
c0028040:	d3 e2                	shl    edx,cl
c0028042:	89 d0                	mov    eax,edx
c0028044:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028049:	89 c3                	mov    ebx,eax
c002804b:	c1 eb 08             	shr    ebx,0x8
c002804e:	80 e2 7f             	and    dl,0x7f
c0028051:	0f 95 c2             	setne  dl
c0028054:	09 da                	or     edx,ebx
c0028056:	83 e2 01             	and    edx,0x1
c0028059:	c1 e8 07             	shr    eax,0x7
c002805c:	21 c2                	and    edx,eax
c002805e:	b8 9e 00 00 00       	mov    eax,0x9e
c0028063:	eb 32                	jmp    c0028097 <__floatsisf+0x68>
c0028065:	b8 00 00 00 00       	mov    eax,0x0
c002806a:	74 34                	je     c00280a0 <__floatsisf+0x71>
c002806c:	f7 da                	neg    edx
c002806e:	0f bd ca             	bsr    ecx,edx
c0028071:	83 f1 1f             	xor    ecx,0x1f
c0028074:	d3 e2                	shl    edx,cl
c0028076:	89 d0                	mov    eax,edx
c0028078:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002807d:	89 c3                	mov    ebx,eax
c002807f:	c1 eb 08             	shr    ebx,0x8
c0028082:	80 e2 7f             	and    dl,0x7f
c0028085:	0f 95 c2             	setne  dl
c0028088:	09 da                	or     edx,ebx
c002808a:	83 e2 01             	and    edx,0x1
c002808d:	c1 e8 07             	shr    eax,0x7
c0028090:	21 c2                	and    edx,eax
c0028092:	b8 9e 01 00 00       	mov    eax,0x19e
c0028097:	29 c8                	sub    eax,ecx
c0028099:	c1 e0 17             	shl    eax,0x17
c002809c:	09 d8                	or     eax,ebx
c002809e:	01 d0                	add    eax,edx
c00280a0:	5b                   	pop    ebx
c00280a1:	5d                   	pop    ebp
c00280a2:	c3                   	ret    

c00280a3 <__floatunsisf>:
c00280a3:	55                   	push   ebp
c00280a4:	89 e5                	mov    ebp,esp
c00280a6:	53                   	push   ebx
c00280a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00280aa:	31 c0                	xor    eax,eax
c00280ac:	85 d2                	test   edx,edx
c00280ae:	74 32                	je     c00280e2 <__floatunsisf+0x3f>
c00280b0:	0f bd ca             	bsr    ecx,edx
c00280b3:	83 f1 1f             	xor    ecx,0x1f
c00280b6:	d3 e2                	shl    edx,cl
c00280b8:	89 d0                	mov    eax,edx
c00280ba:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00280bf:	89 c3                	mov    ebx,eax
c00280c1:	c1 eb 08             	shr    ebx,0x8
c00280c4:	80 e2 7f             	and    dl,0x7f
c00280c7:	0f 95 c2             	setne  dl
c00280ca:	09 da                	or     edx,ebx
c00280cc:	83 e2 01             	and    edx,0x1
c00280cf:	c1 e8 07             	shr    eax,0x7
c00280d2:	21 c2                	and    edx,eax
c00280d4:	b8 9e 00 00 00       	mov    eax,0x9e
c00280d9:	29 c8                	sub    eax,ecx
c00280db:	c1 e0 17             	shl    eax,0x17
c00280de:	09 d8                	or     eax,ebx
c00280e0:	01 d0                	add    eax,edx
c00280e2:	5b                   	pop    ebx
c00280e3:	5d                   	pop    ebp
c00280e4:	c3                   	ret    

c00280e5 <__fixsfsi>:
c00280e5:	55                   	push   ebp
c00280e6:	89 e5                	mov    ebp,esp
c00280e8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00280eb:	89 d1                	mov    ecx,edx
c00280ed:	c1 e1 08             	shl    ecx,0x8
c00280f0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00280f6:	c1 fa 17             	sar    edx,0x17
c00280f9:	78 1c                	js     c0028117 <__fixsfsi+0x32>
c00280fb:	83 ea 7f             	sub    edx,0x7f
c00280fe:	31 c0                	xor    eax,eax
c0028100:	83 fa 1e             	cmp    edx,0x1e
c0028103:	77 40                	ja     c0028145 <__fixsfsi+0x60>
c0028105:	89 c8                	mov    eax,ecx
c0028107:	0d 00 00 00 80       	or     eax,0x80000000
c002810c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028111:	29 d1                	sub    ecx,edx
c0028113:	d3 e8                	shr    eax,cl
c0028115:	eb 2e                	jmp    c0028145 <__fixsfsi+0x60>
c0028117:	31 c0                	xor    eax,eax
c0028119:	81 c2 81 00 00 00    	add    edx,0x81
c002811f:	78 24                	js     c0028145 <__fixsfsi+0x60>
c0028121:	83 fa 1e             	cmp    edx,0x1e
c0028124:	7e 09                	jle    c002812f <__fixsfsi+0x4a>
c0028126:	83 fa 1f             	cmp    edx,0x1f
c0028129:	75 18                	jne    c0028143 <__fixsfsi+0x5e>
c002812b:	85 c9                	test   ecx,ecx
c002812d:	75 14                	jne    c0028143 <__fixsfsi+0x5e>
c002812f:	89 c8                	mov    eax,ecx
c0028131:	0d 00 00 00 80       	or     eax,0x80000000
c0028136:	b9 1f 00 00 00       	mov    ecx,0x1f
c002813b:	29 d1                	sub    ecx,edx
c002813d:	d3 e8                	shr    eax,cl
c002813f:	f7 d8                	neg    eax
c0028141:	eb 02                	jmp    c0028145 <__fixsfsi+0x60>
c0028143:	31 c0                	xor    eax,eax
c0028145:	5d                   	pop    ebp
c0028146:	c3                   	ret    

c0028147 <__fixunssfsi>:
c0028147:	55                   	push   ebp
c0028148:	89 e5                	mov    ebp,esp
c002814a:	53                   	push   ebx
c002814b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002814e:	89 d3                	mov    ebx,edx
c0028150:	c1 fb 17             	sar    ebx,0x17
c0028153:	83 eb 7f             	sub    ebx,0x7f
c0028156:	31 c0                	xor    eax,eax
c0028158:	83 fb 1f             	cmp    ebx,0x1f
c002815b:	77 18                	ja     c0028175 <__fixunssfsi+0x2e>
c002815d:	89 d0                	mov    eax,edx
c002815f:	c1 e0 08             	shl    eax,0x8
c0028162:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0028167:	0d 00 00 00 80       	or     eax,0x80000000
c002816c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028171:	29 d9                	sub    ecx,ebx
c0028173:	d3 e8                	shr    eax,cl
c0028175:	5b                   	pop    ebx
c0028176:	5d                   	pop    ebp
c0028177:	c3                   	ret    

c0028178 <__cmpsf2>:
c0028178:	55                   	push   ebp
c0028179:	89 e5                	mov    ebp,esp
c002817b:	57                   	push   edi
c002817c:	56                   	push   esi
c002817d:	53                   	push   ebx
c002817e:	83 ec 24             	sub    esp,0x24
c0028181:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028184:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028187:	e8 4f 10 00 00       	call   c00291db <__truncdfsf2>
c002818c:	5a                   	pop    edx
c002818d:	59                   	pop    ecx
c002818e:	89 c3                	mov    ebx,eax
c0028190:	c1 e8 17             	shr    eax,0x17
c0028193:	0f b6 f0             	movzx  esi,al
c0028196:	89 d8                	mov    eax,ebx
c0028198:	c1 e8 1f             	shr    eax,0x1f
c002819b:	31 c6                	xor    esi,eax
c002819d:	c1 e3 08             	shl    ebx,0x8
c00281a0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281a3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281a6:	e8 30 10 00 00       	call   c00291db <__truncdfsf2>
c00281ab:	83 c4 10             	add    esp,0x10
c00281ae:	89 c1                	mov    ecx,eax
c00281b0:	c1 e9 17             	shr    ecx,0x17
c00281b3:	0f b6 c9             	movzx  ecx,cl
c00281b6:	89 c7                	mov    edi,eax
c00281b8:	c1 ef 1f             	shr    edi,0x1f
c00281bb:	89 ca                	mov    edx,ecx
c00281bd:	31 fa                	xor    edx,edi
c00281bf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00281c2:	c1 e0 08             	shl    eax,0x8
c00281c5:	89 c2                	mov    edx,eax
c00281c7:	89 d8                	mov    eax,ebx
c00281c9:	09 d0                	or     eax,edx
c00281cb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00281d0:	09 f0                	or     eax,esi
c00281d2:	75 08                	jne    c00281dc <__cmpsf2+0x64>
c00281d4:	31 c0                	xor    eax,eax
c00281d6:	39 f9                	cmp    ecx,edi
c00281d8:	75 0c                	jne    c00281e6 <__cmpsf2+0x6e>
c00281da:	eb 29                	jmp    c0028205 <__cmpsf2+0x8d>
c00281dc:	b8 01 00 00 00       	mov    eax,0x1
c00281e1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00281e4:	7f 1f                	jg     c0028205 <__cmpsf2+0x8d>
c00281e6:	83 c8 ff             	or     eax,0xffffffff
c00281e9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00281ec:	7c 17                	jl     c0028205 <__cmpsf2+0x8d>
c00281ee:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00281f4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00281fa:	b8 01 00 00 00       	mov    eax,0x1
c00281ff:	39 d3                	cmp    ebx,edx
c0028201:	77 02                	ja     c0028205 <__cmpsf2+0x8d>
c0028203:	19 c0                	sbb    eax,eax
c0028205:	8d 65 f4             	lea    esp,[ebp-0xc]
c0028208:	5b                   	pop    ebx
c0028209:	5e                   	pop    esi
c002820a:	5f                   	pop    edi
c002820b:	5d                   	pop    ebp
c002820c:	c3                   	ret    

c002820d <__eqsf2>:
c002820d:	55                   	push   ebp
c002820e:	89 e5                	mov    ebp,esp
c0028210:	83 ec 24             	sub    esp,0x24
c0028213:	6a 01                	push   0x1
c0028215:	83 ec 0c             	sub    esp,0xc
c0028218:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002821b:	e8 df 10 00 00       	call   c00292ff <__extendsfdf2>
c0028220:	83 c4 10             	add    esp,0x10
c0028223:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028226:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028229:	52                   	push   edx
c002822a:	50                   	push   eax
c002822b:	50                   	push   eax
c002822c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002822f:	e8 cb 10 00 00       	call   c00292ff <__extendsfdf2>
c0028234:	59                   	pop    ecx
c0028235:	59                   	pop    ecx
c0028236:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028239:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002823c:	52                   	push   edx
c002823d:	50                   	push   eax
c002823e:	e8 35 ff ff ff       	call   c0028178 <__cmpsf2>
c0028243:	83 c4 20             	add    esp,0x20
c0028246:	c9                   	leave  
c0028247:	c3                   	ret    

c0028248 <__nesf2>:
c0028248:	eb c3                	jmp    c002820d <__eqsf2>

c002824a <__gtsf2>:
c002824a:	55                   	push   ebp
c002824b:	89 e5                	mov    ebp,esp
c002824d:	83 ec 24             	sub    esp,0x24
c0028250:	6a ff                	push   0xffffffff
c0028252:	83 ec 0c             	sub    esp,0xc
c0028255:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028258:	e8 a2 10 00 00       	call   c00292ff <__extendsfdf2>
c002825d:	83 c4 10             	add    esp,0x10
c0028260:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028263:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028266:	52                   	push   edx
c0028267:	50                   	push   eax
c0028268:	50                   	push   eax
c0028269:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002826c:	e8 8e 10 00 00       	call   c00292ff <__extendsfdf2>
c0028271:	59                   	pop    ecx
c0028272:	59                   	pop    ecx
c0028273:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028276:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028279:	52                   	push   edx
c002827a:	50                   	push   eax
c002827b:	e8 f8 fe ff ff       	call   c0028178 <__cmpsf2>
c0028280:	83 c4 20             	add    esp,0x20
c0028283:	c9                   	leave  
c0028284:	c3                   	ret    

c0028285 <__gesf2>:
c0028285:	eb c3                	jmp    c002824a <__gtsf2>

c0028287 <__ltsf2>:
c0028287:	eb 84                	jmp    c002820d <__eqsf2>

c0028289 <__lesf2>:
c0028289:	eb 82                	jmp    c002820d <__eqsf2>

c002828b <__adddf3>:
c002828b:	55                   	push   ebp
c002828c:	89 e5                	mov    ebp,esp
c002828e:	57                   	push   edi
c002828f:	56                   	push   esi
c0028290:	53                   	push   ebx
c0028291:	83 ec 24             	sub    esp,0x24
c0028294:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028297:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002829a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002829d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00282a0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00282a3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00282a6:	89 c8                	mov    eax,ecx
c00282a8:	89 ce                	mov    esi,ecx
c00282aa:	c1 fe 14             	sar    esi,0x14
c00282ad:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00282b0:	89 fb                	mov    ebx,edi
c00282b2:	89 fa                	mov    edx,edi
c00282b4:	c1 e2 0b             	shl    edx,0xb
c00282b7:	c1 e0 0b             	shl    eax,0xb
c00282ba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282bf:	c1 eb 15             	shr    ebx,0x15
c00282c2:	09 d8                	or     eax,ebx
c00282c4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00282c7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00282ca:	c1 fe 14             	sar    esi,0x14
c00282cd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00282d0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00282d3:	89 f3                	mov    ebx,esi
c00282d5:	c1 e3 0b             	shl    ebx,0xb
c00282d8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00282db:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00282de:	c1 e3 0b             	shl    ebx,0xb
c00282e1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00282e7:	c1 ee 15             	shr    esi,0x15
c00282ea:	09 f3                	or     ebx,esi
c00282ec:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00282ef:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00282f2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00282f5:	0f 88 5f 02 00 00    	js     c002855a <__adddf3+0x2cf>
c00282fb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282fe:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0028301:	85 db                	test   ebx,ebx
c0028303:	0f 8e c7 00 00 00    	jle    c00283d0 <__adddf3+0x145>
c0028309:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0028310:	75 1a                	jne    c002832c <__adddf3+0xa1>
c0028312:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028315:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028318:	0f 84 b2 05 00 00    	je     c00288d0 <__adddf3+0x645>
c002831e:	4b                   	dec    ebx
c002831f:	75 23                	jne    c0028344 <__adddf3+0xb9>
c0028321:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0028324:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028327:	e9 99 00 00 00       	jmp    c00283c5 <__adddf3+0x13a>
c002832c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002832f:	f7 d6                	not    esi
c0028331:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028337:	0f 84 93 05 00 00    	je     c00288d0 <__adddf3+0x645>
c002833d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0028344:	83 fb 1f             	cmp    ebx,0x1f
c0028347:	7e 42                	jle    c002838b <__adddf3+0x100>
c0028349:	83 fb 3f             	cmp    ebx,0x3f
c002834c:	0f 8f 7e 05 00 00    	jg     c00288d0 <__adddf3+0x645>
c0028352:	83 e3 1f             	and    ebx,0x1f
c0028355:	89 d9                	mov    ecx,ebx
c0028357:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002835a:	d3 ef                	shr    edi,cl
c002835c:	31 db                	xor    ebx,ebx
c002835e:	85 c9                	test   ecx,ecx
c0028360:	74 15                	je     c0028377 <__adddf3+0xec>
c0028362:	be 20 00 00 00       	mov    esi,0x20
c0028367:	29 ce                	sub    esi,ecx
c0028369:	89 f1                	mov    ecx,esi
c002836b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002836e:	d3 e6                	shl    esi,cl
c0028370:	31 db                	xor    ebx,ebx
c0028372:	85 f6                	test   esi,esi
c0028374:	0f 95 c3             	setne  bl
c0028377:	31 c9                	xor    ecx,ecx
c0028379:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002837d:	0f 95 c1             	setne  cl
c0028380:	09 cf                	or     edi,ecx
c0028382:	09 fb                	or     ebx,edi
c0028384:	01 da                	add    edx,ebx
c0028386:	83 d0 00             	adc    eax,0x0
c0028389:	eb 3a                	jmp    c00283c5 <__adddf3+0x13a>
c002838b:	bf 20 00 00 00       	mov    edi,0x20
c0028390:	29 df                	sub    edi,ebx
c0028392:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028395:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028398:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002839b:	d3 e6                	shl    esi,cl
c002839d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00283a0:	88 d9                	mov    cl,bl
c00283a2:	d3 ef                	shr    edi,cl
c00283a4:	09 fe                	or     esi,edi
c00283a6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00283a9:	88 d9                	mov    cl,bl
c00283ab:	d3 ef                	shr    edi,cl
c00283ad:	89 fb                	mov    ebx,edi
c00283af:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00283b2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00283b5:	d3 e7                	shl    edi,cl
c00283b7:	85 ff                	test   edi,edi
c00283b9:	0f 95 c1             	setne  cl
c00283bc:	0f b6 c9             	movzx  ecx,cl
c00283bf:	09 ce                	or     esi,ecx
c00283c1:	01 f2                	add    edx,esi
c00283c3:	11 d8                	adc    eax,ebx
c00283c5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283cb:	e9 52 01 00 00       	jmp    c0028522 <__adddf3+0x297>
c00283d0:	0f 84 d5 00 00 00    	je     c00284ab <__adddf3+0x220>
c00283d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283d9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00283dc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283df:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283e2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00283e9:	75 20                	jne    c002840b <__adddf3+0x180>
c00283eb:	89 d6                	mov    esi,edx
c00283ed:	09 c6                	or     esi,eax
c00283ef:	0f 84 db 04 00 00    	je     c00288d0 <__adddf3+0x645>
c00283f5:	4b                   	dec    ebx
c00283f6:	75 29                	jne    c0028421 <__adddf3+0x196>
c00283f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00283fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00283fe:	01 d1                	add    ecx,edx
c0028400:	11 c6                	adc    esi,eax
c0028402:	89 f0                	mov    eax,esi
c0028404:	89 ca                	mov    edx,ecx
c0028406:	e9 17 01 00 00       	jmp    c0028522 <__adddf3+0x297>
c002840b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002840e:	f7 d6                	not    esi
c0028410:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028416:	0f 84 b4 04 00 00    	je     c00288d0 <__adddf3+0x645>
c002841c:	0d 00 00 00 80       	or     eax,0x80000000
c0028421:	83 fb 1f             	cmp    ebx,0x1f
c0028424:	7e 48                	jle    c002846e <__adddf3+0x1e3>
c0028426:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028429:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002842c:	83 fb 3f             	cmp    ebx,0x3f
c002842f:	0f 8f 9b 04 00 00    	jg     c00288d0 <__adddf3+0x645>
c0028435:	83 e3 1f             	and    ebx,0x1f
c0028438:	89 d9                	mov    ecx,ebx
c002843a:	89 c7                	mov    edi,eax
c002843c:	d3 ef                	shr    edi,cl
c002843e:	31 db                	xor    ebx,ebx
c0028440:	85 c9                	test   ecx,ecx
c0028442:	74 12                	je     c0028456 <__adddf3+0x1cb>
c0028444:	be 20 00 00 00       	mov    esi,0x20
c0028449:	29 ce                	sub    esi,ecx
c002844b:	89 f1                	mov    ecx,esi
c002844d:	d3 e0                	shl    eax,cl
c002844f:	31 db                	xor    ebx,ebx
c0028451:	85 c0                	test   eax,eax
c0028453:	0f 95 c3             	setne  bl
c0028456:	31 c0                	xor    eax,eax
c0028458:	85 d2                	test   edx,edx
c002845a:	0f 95 c0             	setne  al
c002845d:	09 c7                	or     edi,eax
c002845f:	09 fb                	or     ebx,edi
c0028461:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028464:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028467:	01 da                	add    edx,ebx
c0028469:	83 d6 00             	adc    esi,0x0
c002846c:	eb 39                	jmp    c00284a7 <__adddf3+0x21c>
c002846e:	be 20 00 00 00       	mov    esi,0x20
c0028473:	29 de                	sub    esi,ebx
c0028475:	89 c7                	mov    edi,eax
c0028477:	89 f1                	mov    ecx,esi
c0028479:	d3 e7                	shl    edi,cl
c002847b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002847e:	89 d7                	mov    edi,edx
c0028480:	88 d9                	mov    cl,bl
c0028482:	d3 ef                	shr    edi,cl
c0028484:	89 f9                	mov    ecx,edi
c0028486:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028489:	09 cf                	or     edi,ecx
c002848b:	88 d9                	mov    cl,bl
c002848d:	d3 e8                	shr    eax,cl
c002848f:	89 f1                	mov    ecx,esi
c0028491:	d3 e2                	shl    edx,cl
c0028493:	85 d2                	test   edx,edx
c0028495:	0f 95 c2             	setne  dl
c0028498:	0f b6 d2             	movzx  edx,dl
c002849b:	09 d7                	or     edi,edx
c002849d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00284a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00284a3:	01 fa                	add    edx,edi
c00284a5:	11 c6                	adc    esi,eax
c00284a7:	89 f0                	mov    eax,esi
c00284a9:	eb 77                	jmp    c0028522 <__adddf3+0x297>
c00284ab:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00284ae:	46                   	inc    esi
c00284af:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00284b2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00284b8:	75 41                	jne    c00284fb <__adddf3+0x270>
c00284ba:	89 d3                	mov    ebx,edx
c00284bc:	09 c3                	or     ebx,eax
c00284be:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00284c5:	75 27                	jne    c00284ee <__adddf3+0x263>
c00284c7:	85 db                	test   ebx,ebx
c00284c9:	0f 84 fb 03 00 00    	je     c00288ca <__adddf3+0x63f>
c00284cf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00284d2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00284d5:	0f 84 f5 03 00 00    	je     c00288d0 <__adddf3+0x645>
c00284db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00284de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00284e1:	85 c0                	test   eax,eax
c00284e3:	0f 89 91 03 00 00    	jns    c002887a <__adddf3+0x5ef>
c00284e9:	e9 85 03 00 00       	jmp    c0028873 <__adddf3+0x5e8>
c00284ee:	85 db                	test   ebx,ebx
c00284f0:	0f 85 da 03 00 00    	jne    c00288d0 <__adddf3+0x645>
c00284f6:	e9 cf 03 00 00       	jmp    c00288ca <__adddf3+0x63f>
c00284fb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00284fe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028501:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028504:	f7 d1                	not    ecx
c0028506:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002850c:	0f 84 70 03 00 00    	je     c0028882 <__adddf3+0x5f7>
c0028512:	d1 ea                	shr    edx,1
c0028514:	89 c1                	mov    ecx,eax
c0028516:	c1 e1 1f             	shl    ecx,0x1f
c0028519:	09 ca                	or     edx,ecx
c002851b:	d1 e8                	shr    eax,1
c002851d:	e9 6f 03 00 00       	jmp    c0028891 <__adddf3+0x606>
c0028522:	85 c0                	test   eax,eax
c0028524:	0f 89 67 03 00 00    	jns    c0028891 <__adddf3+0x606>
c002852a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002852d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028530:	f7 d1                	not    ecx
c0028532:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028538:	0f 84 44 03 00 00    	je     c0028882 <__adddf3+0x5f7>
c002853e:	89 d1                	mov    ecx,edx
c0028540:	d1 e9                	shr    ecx,1
c0028542:	83 e2 01             	and    edx,0x1
c0028545:	09 ca                	or     edx,ecx
c0028547:	89 c1                	mov    ecx,eax
c0028549:	c1 e1 1f             	shl    ecx,0x1f
c002854c:	09 ca                	or     edx,ecx
c002854e:	d1 e8                	shr    eax,1
c0028550:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028555:	e9 37 03 00 00       	jmp    c0028891 <__adddf3+0x606>
c002855a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002855d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028563:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028566:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028569:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002856f:	29 de                	sub    esi,ebx
c0028571:	85 f6                	test   esi,esi
c0028573:	0f 8e bd 00 00 00    	jle    c0028636 <__adddf3+0x3ab>
c0028579:	85 db                	test   ebx,ebx
c002857b:	75 17                	jne    c0028594 <__adddf3+0x309>
c002857d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028580:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028583:	0f 84 47 03 00 00    	je     c00288d0 <__adddf3+0x645>
c0028589:	4e                   	dec    esi
c002858a:	75 20                	jne    c00285ac <__adddf3+0x321>
c002858c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002858f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028592:	eb 5b                	jmp    c00285ef <__adddf3+0x364>
c0028594:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028597:	f7 d3                	not    ebx
c0028599:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002859f:	0f 84 2b 03 00 00    	je     c00288d0 <__adddf3+0x645>
c00285a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00285ac:	83 fe 1f             	cmp    esi,0x1f
c00285af:	7e 49                	jle    c00285fa <__adddf3+0x36f>
c00285b1:	83 fe 3f             	cmp    esi,0x3f
c00285b4:	0f 8f 16 03 00 00    	jg     c00288d0 <__adddf3+0x645>
c00285ba:	83 e6 1f             	and    esi,0x1f
c00285bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00285c0:	89 f1                	mov    ecx,esi
c00285c2:	d3 ef                	shr    edi,cl
c00285c4:	31 db                	xor    ebx,ebx
c00285c6:	85 f6                	test   esi,esi
c00285c8:	74 13                	je     c00285dd <__adddf3+0x352>
c00285ca:	b9 20 00 00 00       	mov    ecx,0x20
c00285cf:	29 f1                	sub    ecx,esi
c00285d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00285d4:	d3 e6                	shl    esi,cl
c00285d6:	31 db                	xor    ebx,ebx
c00285d8:	85 f6                	test   esi,esi
c00285da:	0f 95 c3             	setne  bl
c00285dd:	31 c9                	xor    ecx,ecx
c00285df:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00285e3:	0f 95 c1             	setne  cl
c00285e6:	09 cf                	or     edi,ecx
c00285e8:	09 fb                	or     ebx,edi
c00285ea:	29 da                	sub    edx,ebx
c00285ec:	83 d8 00             	sbb    eax,0x0
c00285ef:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285f2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285f5:	e9 aa 01 00 00       	jmp    c00287a4 <__adddf3+0x519>
c00285fa:	bf 20 00 00 00       	mov    edi,0x20
c00285ff:	29 f7                	sub    edi,esi
c0028601:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028604:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028607:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002860a:	d3 e3                	shl    ebx,cl
c002860c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002860f:	89 f1                	mov    ecx,esi
c0028611:	d3 ef                	shr    edi,cl
c0028613:	09 fb                	or     ebx,edi
c0028615:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028618:	89 f1                	mov    ecx,esi
c002861a:	d3 ef                	shr    edi,cl
c002861c:	89 fe                	mov    esi,edi
c002861e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028621:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028624:	d3 e7                	shl    edi,cl
c0028626:	85 ff                	test   edi,edi
c0028628:	0f 95 c1             	setne  cl
c002862b:	0f b6 c9             	movzx  ecx,cl
c002862e:	09 cb                	or     ebx,ecx
c0028630:	29 da                	sub    edx,ebx
c0028632:	19 f0                	sbb    eax,esi
c0028634:	eb b9                	jmp    c00285ef <__adddf3+0x364>
c0028636:	0f 84 cd 00 00 00    	je     c0028709 <__adddf3+0x47e>
c002863c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002863f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028642:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028645:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028649:	75 1b                	jne    c0028666 <__adddf3+0x3db>
c002864b:	89 d6                	mov    esi,edx
c002864d:	09 c6                	or     esi,eax
c002864f:	0f 84 7b 02 00 00    	je     c00288d0 <__adddf3+0x645>
c0028655:	4b                   	dec    ebx
c0028656:	75 24                	jne    c002867c <__adddf3+0x3f1>
c0028658:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002865b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002865e:	29 d1                	sub    ecx,edx
c0028660:	19 c6                	sbb    esi,eax
c0028662:	89 ca                	mov    edx,ecx
c0028664:	eb 61                	jmp    c00286c7 <__adddf3+0x43c>
c0028666:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028669:	f7 d6                	not    esi
c002866b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028671:	0f 84 59 02 00 00    	je     c00288d0 <__adddf3+0x645>
c0028677:	0d 00 00 00 80       	or     eax,0x80000000
c002867c:	83 fb 1f             	cmp    ebx,0x1f
c002867f:	7e 4d                	jle    c00286ce <__adddf3+0x443>
c0028681:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028684:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028687:	83 fb 3f             	cmp    ebx,0x3f
c002868a:	0f 8f 40 02 00 00    	jg     c00288d0 <__adddf3+0x645>
c0028690:	83 e3 1f             	and    ebx,0x1f
c0028693:	89 d9                	mov    ecx,ebx
c0028695:	89 c7                	mov    edi,eax
c0028697:	d3 ef                	shr    edi,cl
c0028699:	31 db                	xor    ebx,ebx
c002869b:	85 c9                	test   ecx,ecx
c002869d:	74 12                	je     c00286b1 <__adddf3+0x426>
c002869f:	be 20 00 00 00       	mov    esi,0x20
c00286a4:	29 ce                	sub    esi,ecx
c00286a6:	89 f1                	mov    ecx,esi
c00286a8:	d3 e0                	shl    eax,cl
c00286aa:	31 db                	xor    ebx,ebx
c00286ac:	85 c0                	test   eax,eax
c00286ae:	0f 95 c3             	setne  bl
c00286b1:	31 c0                	xor    eax,eax
c00286b3:	85 d2                	test   edx,edx
c00286b5:	0f 95 c0             	setne  al
c00286b8:	09 c7                	or     edi,eax
c00286ba:	09 fb                	or     ebx,edi
c00286bc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00286bf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00286c2:	29 da                	sub    edx,ebx
c00286c4:	83 de 00             	sbb    esi,0x0
c00286c7:	89 f0                	mov    eax,esi
c00286c9:	e9 d6 00 00 00       	jmp    c00287a4 <__adddf3+0x519>
c00286ce:	be 20 00 00 00       	mov    esi,0x20
c00286d3:	29 de                	sub    esi,ebx
c00286d5:	89 c7                	mov    edi,eax
c00286d7:	89 f1                	mov    ecx,esi
c00286d9:	d3 e7                	shl    edi,cl
c00286db:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00286de:	89 d7                	mov    edi,edx
c00286e0:	88 d9                	mov    cl,bl
c00286e2:	d3 ef                	shr    edi,cl
c00286e4:	89 f9                	mov    ecx,edi
c00286e6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00286e9:	09 cf                	or     edi,ecx
c00286eb:	88 d9                	mov    cl,bl
c00286ed:	d3 e8                	shr    eax,cl
c00286ef:	89 f1                	mov    ecx,esi
c00286f1:	d3 e2                	shl    edx,cl
c00286f3:	85 d2                	test   edx,edx
c00286f5:	0f 95 c2             	setne  dl
c00286f8:	0f b6 d2             	movzx  edx,dl
c00286fb:	09 d7                	or     edi,edx
c00286fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028700:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028703:	29 fa                	sub    edx,edi
c0028705:	19 c6                	sbb    esi,eax
c0028707:	eb be                	jmp    c00286c7 <__adddf3+0x43c>
c0028709:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002870c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002870f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028715:	75 6a                	jne    c0028781 <__adddf3+0x4f6>
c0028717:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002871b:	75 58                	jne    c0028775 <__adddf3+0x4ea>
c002871d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028720:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028723:	89 d6                	mov    esi,edx
c0028725:	09 c6                	or     esi,eax
c0028727:	75 17                	jne    c0028740 <__adddf3+0x4b5>
c0028729:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002872c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002872f:	85 db                	test   ebx,ebx
c0028731:	0f 85 99 01 00 00    	jne    c00288d0 <__adddf3+0x645>
c0028737:	31 ff                	xor    edi,edi
c0028739:	31 c9                	xor    ecx,ecx
c002873b:	e9 90 01 00 00       	jmp    c00288d0 <__adddf3+0x645>
c0028740:	85 db                	test   ebx,ebx
c0028742:	0f 84 88 01 00 00    	je     c00288d0 <__adddf3+0x645>
c0028748:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002874b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002874e:	85 c0                	test   eax,eax
c0028750:	79 10                	jns    c0028762 <__adddf3+0x4d7>
c0028752:	31 c9                	xor    ecx,ecx
c0028754:	f7 da                	neg    edx
c0028756:	0f 95 c1             	setne  cl
c0028759:	01 c8                	add    eax,ecx
c002875b:	f7 d8                	neg    eax
c002875d:	e9 2f 01 00 00       	jmp    c0028891 <__adddf3+0x606>
c0028762:	31 ff                	xor    edi,edi
c0028764:	31 c9                	xor    ecx,ecx
c0028766:	89 c3                	mov    ebx,eax
c0028768:	09 d3                	or     ebx,edx
c002876a:	0f 84 60 01 00 00    	je     c00288d0 <__adddf3+0x645>
c0028770:	e9 05 01 00 00       	jmp    c002887a <__adddf3+0x5ef>
c0028775:	31 ff                	xor    edi,edi
c0028777:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002877c:	e9 4f 01 00 00       	jmp    c00288d0 <__adddf3+0x645>
c0028781:	89 c1                	mov    ecx,eax
c0028783:	89 d0                	mov    eax,edx
c0028785:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028788:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002878b:	89 ca                	mov    edx,ecx
c002878d:	85 c9                	test   ecx,ecx
c002878f:	79 2c                	jns    c00287bd <__adddf3+0x532>
c0028791:	31 c9                	xor    ecx,ecx
c0028793:	f7 d8                	neg    eax
c0028795:	0f 95 c1             	setne  cl
c0028798:	01 ca                	add    edx,ecx
c002879a:	f7 da                	neg    edx
c002879c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002879f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00287a2:	eb 19                	jmp    c00287bd <__adddf3+0x532>
c00287a4:	85 c0                	test   eax,eax
c00287a6:	0f 89 e5 00 00 00    	jns    c0028891 <__adddf3+0x606>
c00287ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00287b1:	89 c1                	mov    ecx,eax
c00287b3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00287b6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00287b9:	89 d0                	mov    eax,edx
c00287bb:	89 ca                	mov    edx,ecx
c00287bd:	85 d2                	test   edx,edx
c00287bf:	74 59                	je     c002881a <__adddf3+0x58f>
c00287c1:	0f bd da             	bsr    ebx,edx
c00287c4:	83 f3 1f             	xor    ebx,0x1f
c00287c7:	88 d9                	mov    cl,bl
c00287c9:	d3 e2                	shl    edx,cl
c00287cb:	bf 20 00 00 00       	mov    edi,0x20
c00287d0:	89 f9                	mov    ecx,edi
c00287d2:	29 d9                	sub    ecx,ebx
c00287d4:	89 c6                	mov    esi,eax
c00287d6:	d3 ee                	shr    esi,cl
c00287d8:	09 d6                	or     esi,edx
c00287da:	88 d9                	mov    cl,bl
c00287dc:	d3 e0                	shl    eax,cl
c00287de:	89 c2                	mov    edx,eax
c00287e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287e3:	25 ff 07 00 00       	and    eax,0x7ff
c00287e8:	39 d8                	cmp    eax,ebx
c00287ea:	7f 22                	jg     c002880e <__adddf3+0x583>
c00287ec:	29 c3                	sub    ebx,eax
c00287ee:	43                   	inc    ebx
c00287ef:	88 d9                	mov    cl,bl
c00287f1:	d3 ea                	shr    edx,cl
c00287f3:	29 df                	sub    edi,ebx
c00287f5:	89 f9                	mov    ecx,edi
c00287f7:	89 f0                	mov    eax,esi
c00287f9:	d3 e0                	shl    eax,cl
c00287fb:	09 c2                	or     edx,eax
c00287fd:	89 f0                	mov    eax,esi
c00287ff:	88 d9                	mov    cl,bl
c0028801:	d3 e8                	shr    eax,cl
c0028803:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028806:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002880c:	eb 6f                	jmp    c002887d <__adddf3+0x5f2>
c002880e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028811:	29 d8                	sub    eax,ebx
c0028813:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028816:	89 f0                	mov    eax,esi
c0028818:	eb 59                	jmp    c0028873 <__adddf3+0x5e8>
c002881a:	85 c0                	test   eax,eax
c002881c:	74 6a                	je     c0028888 <__adddf3+0x5fd>
c002881e:	0f bd c8             	bsr    ecx,eax
c0028821:	83 f1 1f             	xor    ecx,0x1f
c0028824:	d3 e0                	shl    eax,cl
c0028826:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028829:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002882f:	83 c1 20             	add    ecx,0x20
c0028832:	39 cb                	cmp    ebx,ecx
c0028834:	7f 35                	jg     c002886b <__adddf3+0x5e0>
c0028836:	29 d9                	sub    ecx,ebx
c0028838:	8d 71 01             	lea    esi,[ecx+0x1]
c002883b:	83 fe 1f             	cmp    esi,0x1f
c002883e:	7e 09                	jle    c0028849 <__adddf3+0x5be>
c0028840:	83 e9 1f             	sub    ecx,0x1f
c0028843:	d3 e8                	shr    eax,cl
c0028845:	89 c3                	mov    ebx,eax
c0028847:	eb 11                	jmp    c002885a <__adddf3+0x5cf>
c0028849:	b9 20 00 00 00       	mov    ecx,0x20
c002884e:	29 f1                	sub    ecx,esi
c0028850:	89 c3                	mov    ebx,eax
c0028852:	d3 e3                	shl    ebx,cl
c0028854:	89 f1                	mov    ecx,esi
c0028856:	d3 e8                	shr    eax,cl
c0028858:	89 c2                	mov    edx,eax
c002885a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002885d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028862:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028865:	89 d0                	mov    eax,edx
c0028867:	89 da                	mov    edx,ebx
c0028869:	eb 26                	jmp    c0028891 <__adddf3+0x606>
c002886b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002886e:	29 cf                	sub    edi,ecx
c0028870:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028873:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028878:	eb 17                	jmp    c0028891 <__adddf3+0x606>
c002887a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002887d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028880:	eb 0f                	jmp    c0028891 <__adddf3+0x606>
c0028882:	31 d2                	xor    edx,edx
c0028884:	31 c0                	xor    eax,eax
c0028886:	eb 09                	jmp    c0028891 <__adddf3+0x606>
c0028888:	89 c2                	mov    edx,eax
c002888a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028891:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028894:	c1 e1 14             	shl    ecx,0x14
c0028897:	89 c3                	mov    ebx,eax
c0028899:	c1 eb 0b             	shr    ebx,0xb
c002889c:	09 d9                	or     ecx,ebx
c002889e:	89 d3                	mov    ebx,edx
c00288a0:	c1 eb 0b             	shr    ebx,0xb
c00288a3:	c1 e0 15             	shl    eax,0x15
c00288a6:	09 d8                	or     eax,ebx
c00288a8:	89 c7                	mov    edi,eax
c00288aa:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00288b0:	0f 95 c0             	setne  al
c00288b3:	89 c6                	mov    esi,eax
c00288b5:	09 f3                	or     ebx,esi
c00288b7:	83 e3 01             	and    ebx,0x1
c00288ba:	c1 ea 0a             	shr    edx,0xa
c00288bd:	21 da                	and    edx,ebx
c00288bf:	89 f8                	mov    eax,edi
c00288c1:	01 d0                	add    eax,edx
c00288c3:	83 d1 00             	adc    ecx,0x0
c00288c6:	89 c7                	mov    edi,eax
c00288c8:	eb 06                	jmp    c00288d0 <__adddf3+0x645>
c00288ca:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00288cd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00288d0:	89 f8                	mov    eax,edi
c00288d2:	89 ca                	mov    edx,ecx
c00288d4:	83 c4 24             	add    esp,0x24
c00288d7:	5b                   	pop    ebx
c00288d8:	5e                   	pop    esi
c00288d9:	5f                   	pop    edi
c00288da:	5d                   	pop    ebp
c00288db:	c3                   	ret    

c00288dc <__subdf3>:
c00288dc:	55                   	push   ebp
c00288dd:	89 e5                	mov    ebp,esp
c00288df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00288e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00288e5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00288eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00288ee:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00288f1:	5d                   	pop    ebp
c00288f2:	e9 94 f9 ff ff       	jmp    c002828b <__adddf3>

c00288f7 <__negdf2>:
c00288f7:	55                   	push   ebp
c00288f8:	89 e5                	mov    ebp,esp
c00288fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00288fd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028900:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028906:	5d                   	pop    ebp
c0028907:	c3                   	ret    

c0028908 <__muldf3>:
c0028908:	55                   	push   ebp
c0028909:	89 e5                	mov    ebp,esp
c002890b:	57                   	push   edi
c002890c:	56                   	push   esi
c002890d:	53                   	push   ebx
c002890e:	83 ec 24             	sub    esp,0x24
c0028911:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028914:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028917:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002891a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002891d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028920:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028923:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028926:	89 c8                	mov    eax,ecx
c0028928:	c1 f8 14             	sar    eax,0x14
c002892b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002892e:	89 f8                	mov    eax,edi
c0028930:	89 fb                	mov    ebx,edi
c0028932:	c1 e3 0b             	shl    ebx,0xb
c0028935:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028938:	c1 e1 0b             	shl    ecx,0xb
c002893b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028941:	c1 e8 15             	shr    eax,0x15
c0028944:	09 c1                	or     ecx,eax
c0028946:	89 d6                	mov    esi,edx
c0028948:	89 d0                	mov    eax,edx
c002894a:	c1 f8 14             	sar    eax,0x14
c002894d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028950:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028953:	89 c3                	mov    ebx,eax
c0028955:	c1 e3 0b             	shl    ebx,0xb
c0028958:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002895b:	c1 e6 0b             	shl    esi,0xb
c002895e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028964:	c1 e8 15             	shr    eax,0x15
c0028967:	09 c6                	or     esi,eax
c0028969:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002896c:	25 ff 07 00 00       	and    eax,0x7ff
c0028971:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028974:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028977:	25 ff 07 00 00       	and    eax,0x7ff
c002897c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002897f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028982:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028985:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002898c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002898f:	40                   	inc    eax
c0028990:	a9 fe 07 00 00       	test   eax,0x7fe
c0028995:	0f 85 8d 00 00 00    	jne    c0028a28 <__muldf3+0x120>
c002899b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002899e:	09 c8                	or     eax,ecx
c00289a0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00289a4:	74 44                	je     c00289ea <__muldf3+0xe2>
c00289a6:	85 c0                	test   eax,eax
c00289a8:	0f 85 31 02 00 00    	jne    c0028bdf <__muldf3+0x2d7>
c00289ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00289b1:	40                   	inc    eax
c00289b2:	a9 fe 07 00 00       	test   eax,0x7fe
c00289b7:	75 13                	jne    c00289cc <__muldf3+0xc4>
c00289b9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00289bc:	09 f1                	or     ecx,esi
c00289be:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00289c2:	74 22                	je     c00289e6 <__muldf3+0xde>
c00289c4:	85 c9                	test   ecx,ecx
c00289c6:	0f 85 0d 02 00 00    	jne    c0028bd9 <__muldf3+0x2d1>
c00289cc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00289d0:	0f 89 09 02 00 00    	jns    c0028bdf <__muldf3+0x2d7>
c00289d6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00289d9:	05 00 00 00 80       	add    eax,0x80000000
c00289de:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00289e1:	e9 f9 01 00 00       	jmp    c0028bdf <__muldf3+0x2d7>
c00289e6:	85 c9                	test   ecx,ecx
c00289e8:	eb 2e                	jmp    c0028a18 <__muldf3+0x110>
c00289ea:	85 c0                	test   eax,eax
c00289ec:	74 20                	je     c0028a0e <__muldf3+0x106>
c00289ee:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00289f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00289f4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00289f7:	c1 ef 1f             	shr    edi,0x1f
c00289fa:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00289fd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028a00:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028a03:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028a06:	09 f9                	or     ecx,edi
c0028a08:	78 1e                	js     c0028a28 <__muldf3+0x120>
c0028a0a:	89 c3                	mov    ebx,eax
c0028a0c:	eb e0                	jmp    c00289ee <__muldf3+0xe6>
c0028a0e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a11:	f7 d0                	not    eax
c0028a13:	a9 ff 07 00 00       	test   eax,0x7ff
c0028a18:	75 b2                	jne    c00289cc <__muldf3+0xc4>
c0028a1a:	31 ff                	xor    edi,edi
c0028a1c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028a23:	e9 b7 01 00 00       	jmp    c0028bdf <__muldf3+0x2d7>
c0028a28:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a2b:	40                   	inc    eax
c0028a2c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028a31:	75 57                	jne    c0028a8a <__muldf3+0x182>
c0028a33:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028a36:	09 f0                	or     eax,esi
c0028a38:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028a3c:	74 23                	je     c0028a61 <__muldf3+0x159>
c0028a3e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028a42:	0f 89 91 01 00 00    	jns    c0028bd9 <__muldf3+0x2d1>
c0028a48:	85 c0                	test   eax,eax
c0028a4a:	0f 85 89 01 00 00    	jne    c0028bd9 <__muldf3+0x2d1>
c0028a50:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028a53:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028a59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028a5c:	e9 7e 01 00 00       	jmp    c0028bdf <__muldf3+0x2d7>
c0028a61:	85 c0                	test   eax,eax
c0028a63:	75 0c                	jne    c0028a71 <__muldf3+0x169>
c0028a65:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028a69:	0f 89 6a 01 00 00    	jns    c0028bd9 <__muldf3+0x2d1>
c0028a6f:	eb df                	jmp    c0028a50 <__muldf3+0x148>
c0028a71:	01 f6                	add    esi,esi
c0028a73:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028a76:	c1 ea 1f             	shr    edx,0x1f
c0028a79:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028a7c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0028a7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028a82:	09 d6                	or     esi,edx
c0028a84:	78 04                	js     c0028a8a <__muldf3+0x182>
c0028a86:	89 c3                	mov    ebx,eax
c0028a88:	eb e7                	jmp    c0028a71 <__muldf3+0x169>
c0028a8a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028a90:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028a96:	89 c8                	mov    eax,ecx
c0028a98:	f7 e6                	mul    esi
c0028a9a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0028a9d:	89 c7                	mov    edi,eax
c0028a9f:	89 c8                	mov    eax,ecx
c0028aa1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028aa4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028aa7:	89 c1                	mov    ecx,eax
c0028aa9:	89 f0                	mov    eax,esi
c0028aab:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0028aae:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028ab1:	89 c6                	mov    esi,eax
c0028ab3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028ab6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028ab9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028abc:	31 c0                	xor    eax,eax
c0028abe:	01 f1                	add    ecx,esi
c0028ac0:	0f 92 c0             	setb   al
c0028ac3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028ac6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028ac9:	83 d6 00             	adc    esi,0x0
c0028acc:	01 c7                	add    edi,eax
c0028ace:	83 d6 00             	adc    esi,0x0
c0028ad1:	01 ca                	add    edx,ecx
c0028ad3:	0f 92 c1             	setb   cl
c0028ad6:	0f b6 c9             	movzx  ecx,cl
c0028ad9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0028adc:	83 d6 00             	adc    esi,0x0
c0028adf:	01 cf                	add    edi,ecx
c0028ae1:	83 d6 00             	adc    esi,0x0
c0028ae4:	31 c9                	xor    ecx,ecx
c0028ae6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028ae9:	0f 95 c1             	setne  cl
c0028aec:	09 cf                	or     edi,ecx
c0028aee:	85 f6                	test   esi,esi
c0028af0:	78 0c                	js     c0028afe <__muldf3+0x1f6>
c0028af2:	01 f6                	add    esi,esi
c0028af4:	89 f8                	mov    eax,edi
c0028af6:	c1 e8 1f             	shr    eax,0x1f
c0028af9:	09 c6                	or     esi,eax
c0028afb:	01 ff                	add    edi,edi
c0028afd:	4b                   	dec    ebx
c0028afe:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028b04:	0f 8f 85 00 00 00    	jg     c0028b8f <__muldf3+0x287>
c0028b0a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028b10:	85 db                	test   ebx,ebx
c0028b12:	0f 8f 84 00 00 00    	jg     c0028b9c <__muldf3+0x294>
c0028b18:	83 fb cc             	cmp    ebx,0xffffffcc
c0028b1b:	7c 79                	jl     c0028b96 <__muldf3+0x28e>
c0028b1d:	ba 01 00 00 00       	mov    edx,0x1
c0028b22:	29 da                	sub    edx,ebx
c0028b24:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028b2a:	83 fa 1f             	cmp    edx,0x1f
c0028b2d:	7e 30                	jle    c0028b5f <__muldf3+0x257>
c0028b2f:	83 fa 20             	cmp    edx,0x20
c0028b32:	75 0b                	jne    c0028b3f <__muldf3+0x237>
c0028b34:	31 c0                	xor    eax,eax
c0028b36:	85 ff                	test   edi,edi
c0028b38:	0f 95 c0             	setne  al
c0028b3b:	89 c7                	mov    edi,eax
c0028b3d:	eb 1a                	jmp    c0028b59 <__muldf3+0x251>
c0028b3f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028b42:	89 f0                	mov    eax,esi
c0028b44:	d3 e0                	shl    eax,cl
c0028b46:	09 f8                	or     eax,edi
c0028b48:	0f 95 c0             	setne  al
c0028b4b:	0f b6 c0             	movzx  eax,al
c0028b4e:	89 c7                	mov    edi,eax
c0028b50:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028b55:	29 d9                	sub    ecx,ebx
c0028b57:	d3 ee                	shr    esi,cl
c0028b59:	09 f7                	or     edi,esi
c0028b5b:	31 db                	xor    ebx,ebx
c0028b5d:	eb 3b                	jmp    c0028b9a <__muldf3+0x292>
c0028b5f:	83 c3 1f             	add    ebx,0x1f
c0028b62:	89 f0                	mov    eax,esi
c0028b64:	88 d9                	mov    cl,bl
c0028b66:	d3 e0                	shl    eax,cl
c0028b68:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028b6b:	89 f8                	mov    eax,edi
c0028b6d:	88 d1                	mov    cl,dl
c0028b6f:	d3 e8                	shr    eax,cl
c0028b71:	89 c1                	mov    ecx,eax
c0028b73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028b76:	09 c8                	or     eax,ecx
c0028b78:	88 d9                	mov    cl,bl
c0028b7a:	d3 e7                	shl    edi,cl
c0028b7c:	31 db                	xor    ebx,ebx
c0028b7e:	85 ff                	test   edi,edi
c0028b80:	0f 95 c3             	setne  bl
c0028b83:	89 df                	mov    edi,ebx
c0028b85:	09 c7                	or     edi,eax
c0028b87:	88 d1                	mov    cl,dl
c0028b89:	d3 ee                	shr    esi,cl
c0028b8b:	31 db                	xor    ebx,ebx
c0028b8d:	eb 0d                	jmp    c0028b9c <__muldf3+0x294>
c0028b8f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028b94:	eb 02                	jmp    c0028b98 <__muldf3+0x290>
c0028b96:	31 db                	xor    ebx,ebx
c0028b98:	31 ff                	xor    edi,edi
c0028b9a:	31 f6                	xor    esi,esi
c0028b9c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028b9f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028ba2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028ba7:	09 c3                	or     ebx,eax
c0028ba9:	c1 e3 14             	shl    ebx,0x14
c0028bac:	89 f0                	mov    eax,esi
c0028bae:	c1 e8 0b             	shr    eax,0xb
c0028bb1:	09 c3                	or     ebx,eax
c0028bb3:	89 f8                	mov    eax,edi
c0028bb5:	c1 e8 0b             	shr    eax,0xb
c0028bb8:	c1 e6 15             	shl    esi,0x15
c0028bbb:	09 c6                	or     esi,eax
c0028bbd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028bc3:	0f 95 c1             	setne  cl
c0028bc6:	09 c8                	or     eax,ecx
c0028bc8:	83 e0 01             	and    eax,0x1
c0028bcb:	c1 ef 0a             	shr    edi,0xa
c0028bce:	21 c7                	and    edi,eax
c0028bd0:	01 f7                	add    edi,esi
c0028bd2:	83 d3 00             	adc    ebx,0x0
c0028bd5:	89 da                	mov    edx,ebx
c0028bd7:	eb 03                	jmp    c0028bdc <__muldf3+0x2d4>
c0028bd9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028bdc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028bdf:	89 f8                	mov    eax,edi
c0028be1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028be4:	83 c4 24             	add    esp,0x24
c0028be7:	5b                   	pop    ebx
c0028be8:	5e                   	pop    esi
c0028be9:	5f                   	pop    edi
c0028bea:	5d                   	pop    ebp
c0028beb:	c3                   	ret    

c0028bec <__divdf3>:
c0028bec:	55                   	push   ebp
c0028bed:	89 e5                	mov    ebp,esp
c0028bef:	57                   	push   edi
c0028bf0:	56                   	push   esi
c0028bf1:	53                   	push   ebx
c0028bf2:	83 ec 2c             	sub    esp,0x2c
c0028bf5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028bf8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028bfb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028bfe:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028c01:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028c04:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028c07:	89 ce                	mov    esi,ecx
c0028c09:	89 c8                	mov    eax,ecx
c0028c0b:	c1 f8 14             	sar    eax,0x14
c0028c0e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028c11:	89 f8                	mov    eax,edi
c0028c13:	89 fb                	mov    ebx,edi
c0028c15:	c1 e3 0b             	shl    ebx,0xb
c0028c18:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0028c1b:	c1 e6 0b             	shl    esi,0xb
c0028c1e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028c24:	c1 e8 15             	shr    eax,0x15
c0028c27:	09 c6                	or     esi,eax
c0028c29:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0028c2c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028c2f:	89 c2                	mov    edx,eax
c0028c31:	c1 fa 14             	sar    edx,0x14
c0028c34:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028c37:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028c3a:	89 de                	mov    esi,ebx
c0028c3c:	c1 e6 0b             	shl    esi,0xb
c0028c3f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028c42:	c1 e0 0b             	shl    eax,0xb
c0028c45:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028c4a:	c1 eb 15             	shr    ebx,0x15
c0028c4d:	09 d8                	or     eax,ebx
c0028c4f:	89 c2                	mov    edx,eax
c0028c51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028c54:	25 ff 07 00 00       	and    eax,0x7ff
c0028c59:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0028c5c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028c5f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028c65:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028c68:	29 d8                	sub    eax,ebx
c0028c6a:	05 ff 03 00 00       	add    eax,0x3ff
c0028c6f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028c72:	46                   	inc    esi
c0028c73:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028c79:	0f 85 a5 00 00 00    	jne    c0028d24 <__divdf3+0x138>
c0028c7f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028c82:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028c85:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028c89:	74 2a                	je     c0028cb5 <__divdf3+0xc9>
c0028c8b:	85 f6                	test   esi,esi
c0028c8d:	0f 85 cc 02 00 00    	jne    c0028f5f <__divdf3+0x373>
c0028c93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028c96:	40                   	inc    eax
c0028c97:	a9 fe 07 00 00       	test   eax,0x7fe
c0028c9c:	75 26                	jne    c0028cc4 <__divdf3+0xd8>
c0028c9e:	85 db                	test   ebx,ebx
c0028ca0:	74 22                	je     c0028cc4 <__divdf3+0xd8>
c0028ca2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028ca5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028ca8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028cab:	09 d0                	or     eax,edx
c0028cad:	0f 85 ac 02 00 00    	jne    c0028f5f <__divdf3+0x373>
c0028cb3:	eb 63                	jmp    c0028d18 <__divdf3+0x12c>
c0028cb5:	85 f6                	test   esi,esi
c0028cb7:	75 22                	jne    c0028cdb <__divdf3+0xef>
c0028cb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028cbc:	40                   	inc    eax
c0028cbd:	a9 fe 07 00 00       	test   eax,0x7fe
c0028cc2:	74 36                	je     c0028cfa <__divdf3+0x10e>
c0028cc4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028cc8:	0f 89 91 02 00 00    	jns    c0028f5f <__divdf3+0x373>
c0028cce:	89 f8                	mov    eax,edi
c0028cd0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028cd6:	e9 80 02 00 00       	jmp    c0028f5b <__divdf3+0x36f>
c0028cdb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028cde:	01 f6                	add    esi,esi
c0028ce0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028ce3:	c1 ef 1f             	shr    edi,0x1f
c0028ce6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028ce9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028cec:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028cef:	09 f7                	or     edi,esi
c0028cf1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028cf4:	78 2e                	js     c0028d24 <__divdf3+0x138>
c0028cf6:	89 c8                	mov    eax,ecx
c0028cf8:	eb e1                	jmp    c0028cdb <__divdf3+0xef>
c0028cfa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028cfd:	09 d0                	or     eax,edx
c0028cff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028d03:	74 0f                	je     c0028d14 <__divdf3+0x128>
c0028d05:	85 c0                	test   eax,eax
c0028d07:	74 bb                	je     c0028cc4 <__divdf3+0xd8>
c0028d09:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028d0c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028d0f:	e9 4b 02 00 00       	jmp    c0028f5f <__divdf3+0x373>
c0028d14:	85 c0                	test   eax,eax
c0028d16:	75 ac                	jne    c0028cc4 <__divdf3+0xd8>
c0028d18:	31 ff                	xor    edi,edi
c0028d1a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028d1f:	e9 3b 02 00 00       	jmp    c0028f5f <__divdf3+0x373>
c0028d24:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028d27:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028d2a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028d30:	75 6b                	jne    c0028d9d <__divdf3+0x1b1>
c0028d32:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028d35:	09 d6                	or     esi,edx
c0028d37:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028d3b:	74 28                	je     c0028d65 <__divdf3+0x179>
c0028d3d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028d40:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028d43:	85 f6                	test   esi,esi
c0028d45:	0f 85 14 02 00 00    	jne    c0028f5f <__divdf3+0x373>
c0028d4b:	31 ff                	xor    edi,edi
c0028d4d:	31 c9                	xor    ecx,ecx
c0028d4f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028d52:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028d55:	0f 89 04 02 00 00    	jns    c0028f5f <__divdf3+0x373>
c0028d5b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028d60:	e9 fa 01 00 00       	jmp    c0028f5f <__divdf3+0x373>
c0028d65:	85 f6                	test   esi,esi
c0028d67:	75 1b                	jne    c0028d84 <__divdf3+0x198>
c0028d69:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028d6c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028d6f:	25 00 00 00 80       	and    eax,0x80000000
c0028d74:	31 c9                	xor    ecx,ecx
c0028d76:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028d7b:	89 cf                	mov    edi,ecx
c0028d7d:	89 c1                	mov    ecx,eax
c0028d7f:	e9 db 01 00 00       	jmp    c0028f5f <__divdf3+0x373>
c0028d84:	01 d2                	add    edx,edx
c0028d86:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028d89:	c1 eb 1f             	shr    ebx,0x1f
c0028d8c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028d8f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028d92:	8d 48 01             	lea    ecx,[eax+0x1]
c0028d95:	09 da                	or     edx,ebx
c0028d97:	78 04                	js     c0028d9d <__divdf3+0x1b1>
c0028d99:	89 c8                	mov    eax,ecx
c0028d9b:	eb e7                	jmp    c0028d84 <__divdf3+0x198>
c0028d9d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028da0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028da6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028dac:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028daf:	39 d6                	cmp    esi,edx
c0028db1:	77 0d                	ja     c0028dc0 <__divdf3+0x1d4>
c0028db3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028db6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028db9:	72 1b                	jb     c0028dd6 <__divdf3+0x1ea>
c0028dbb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028dbe:	75 16                	jne    c0028dd6 <__divdf3+0x1ea>
c0028dc0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028dc3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028dc6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028dc9:	83 de 00             	sbb    esi,0x0
c0028dcc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028dcf:	ba 01 00 00 00       	mov    edx,0x1
c0028dd4:	eb 02                	jmp    c0028dd8 <__divdf3+0x1ec>
c0028dd6:	31 d2                	xor    edx,edx
c0028dd8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028ddf:	31 ff                	xor    edi,edi
c0028de1:	01 ff                	add    edi,edi
c0028de3:	89 d1                	mov    ecx,edx
c0028de5:	c1 e9 1f             	shr    ecx,0x1f
c0028de8:	09 cf                	or     edi,ecx
c0028dea:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028ded:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028df0:	89 da                	mov    edx,ebx
c0028df2:	89 f3                	mov    ebx,esi
c0028df4:	8d 34 36             	lea    esi,[esi+esi*1]
c0028df7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028dfa:	c1 e9 1f             	shr    ecx,0x1f
c0028dfd:	09 ce                	or     esi,ecx
c0028dff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028e02:	01 c9                	add    ecx,ecx
c0028e04:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028e07:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028e0a:	85 db                	test   ebx,ebx
c0028e0c:	78 29                	js     c0028e37 <__divdf3+0x24b>
c0028e0e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028e11:	72 07                	jb     c0028e1a <__divdf3+0x22e>
c0028e13:	75 3c                	jne    c0028e51 <__divdf3+0x265>
c0028e15:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028e18:	77 37                	ja     c0028e51 <__divdf3+0x265>
c0028e1a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028e1d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028e20:	31 d2                	xor    edx,edx
c0028e22:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028e25:	0f 97 c2             	seta   dl
c0028e28:	29 d6                	sub    esi,edx
c0028e2a:	89 d9                	mov    ecx,ebx
c0028e2c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028e2f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028e32:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028e35:	eb 17                	jmp    c0028e4e <__divdf3+0x262>
c0028e37:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028e3a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028e3d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028e40:	0f 97 c1             	seta   cl
c0028e43:	0f b6 c9             	movzx  ecx,cl
c0028e46:	29 ce                	sub    esi,ecx
c0028e48:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028e4b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028e4e:	83 ca 01             	or     edx,0x1
c0028e51:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028e54:	75 8b                	jne    c0028de1 <__divdf3+0x1f5>
c0028e56:	c1 e7 09             	shl    edi,0x9
c0028e59:	89 d1                	mov    ecx,edx
c0028e5b:	c1 e9 17             	shr    ecx,0x17
c0028e5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028e61:	09 f3                	or     ebx,esi
c0028e63:	0f 95 c3             	setne  bl
c0028e66:	0f b6 db             	movzx  ebx,bl
c0028e69:	c1 e2 09             	shl    edx,0x9
c0028e6c:	09 d3                	or     ebx,edx
c0028e6e:	89 ca                	mov    edx,ecx
c0028e70:	09 fa                	or     edx,edi
c0028e72:	78 0c                	js     c0028e80 <__divdf3+0x294>
c0028e74:	01 d2                	add    edx,edx
c0028e76:	89 d9                	mov    ecx,ebx
c0028e78:	c1 e9 1f             	shr    ecx,0x1f
c0028e7b:	09 ca                	or     edx,ecx
c0028e7d:	01 db                	add    ebx,ebx
c0028e7f:	48                   	dec    eax
c0028e80:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028e85:	0f 8f 83 00 00 00    	jg     c0028f0e <__divdf3+0x322>
c0028e8b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e91:	85 c0                	test   eax,eax
c0028e93:	0f 8f 82 00 00 00    	jg     c0028f1b <__divdf3+0x32f>
c0028e99:	83 f8 cc             	cmp    eax,0xffffffcc
c0028e9c:	7c 77                	jl     c0028f15 <__divdf3+0x329>
c0028e9e:	be 01 00 00 00       	mov    esi,0x1
c0028ea3:	29 c6                	sub    esi,eax
c0028ea5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028eab:	83 fe 1f             	cmp    esi,0x1f
c0028eae:	7e 2f                	jle    c0028edf <__divdf3+0x2f3>
c0028eb0:	83 fe 20             	cmp    esi,0x20
c0028eb3:	75 0a                	jne    c0028ebf <__divdf3+0x2d3>
c0028eb5:	85 db                	test   ebx,ebx
c0028eb7:	0f 95 c3             	setne  bl
c0028eba:	0f b6 db             	movzx  ebx,bl
c0028ebd:	eb 1a                	jmp    c0028ed9 <__divdf3+0x2ed>
c0028ebf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028ec2:	89 d7                	mov    edi,edx
c0028ec4:	d3 e7                	shl    edi,cl
c0028ec6:	89 f9                	mov    ecx,edi
c0028ec8:	09 d9                	or     ecx,ebx
c0028eca:	0f 95 c3             	setne  bl
c0028ecd:	0f b6 db             	movzx  ebx,bl
c0028ed0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028ed5:	29 c1                	sub    ecx,eax
c0028ed7:	d3 ea                	shr    edx,cl
c0028ed9:	09 d3                	or     ebx,edx
c0028edb:	31 c0                	xor    eax,eax
c0028edd:	eb 3a                	jmp    c0028f19 <__divdf3+0x32d>
c0028edf:	83 c0 1f             	add    eax,0x1f
c0028ee2:	89 d7                	mov    edi,edx
c0028ee4:	88 c1                	mov    cl,al
c0028ee6:	d3 e7                	shl    edi,cl
c0028ee8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028eeb:	89 df                	mov    edi,ebx
c0028eed:	89 f1                	mov    ecx,esi
c0028eef:	d3 ef                	shr    edi,cl
c0028ef1:	89 f9                	mov    ecx,edi
c0028ef3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028ef6:	09 cf                	or     edi,ecx
c0028ef8:	88 c1                	mov    cl,al
c0028efa:	d3 e3                	shl    ebx,cl
c0028efc:	85 db                	test   ebx,ebx
c0028efe:	0f 95 c3             	setne  bl
c0028f01:	0f b6 db             	movzx  ebx,bl
c0028f04:	09 fb                	or     ebx,edi
c0028f06:	89 f1                	mov    ecx,esi
c0028f08:	d3 ea                	shr    edx,cl
c0028f0a:	31 c0                	xor    eax,eax
c0028f0c:	eb 0d                	jmp    c0028f1b <__divdf3+0x32f>
c0028f0e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028f13:	eb 02                	jmp    c0028f17 <__divdf3+0x32b>
c0028f15:	31 c0                	xor    eax,eax
c0028f17:	31 db                	xor    ebx,ebx
c0028f19:	31 d2                	xor    edx,edx
c0028f1b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028f1e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028f21:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028f27:	09 c8                	or     eax,ecx
c0028f29:	c1 e0 14             	shl    eax,0x14
c0028f2c:	89 d1                	mov    ecx,edx
c0028f2e:	c1 e9 0b             	shr    ecx,0xb
c0028f31:	09 c8                	or     eax,ecx
c0028f33:	89 c6                	mov    esi,eax
c0028f35:	89 d9                	mov    ecx,ebx
c0028f37:	c1 e9 0b             	shr    ecx,0xb
c0028f3a:	c1 e2 15             	shl    edx,0x15
c0028f3d:	09 ca                	or     edx,ecx
c0028f3f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028f45:	0f 95 c0             	setne  al
c0028f48:	09 c1                	or     ecx,eax
c0028f4a:	83 e1 01             	and    ecx,0x1
c0028f4d:	c1 eb 0a             	shr    ebx,0xa
c0028f50:	21 cb                	and    ebx,ecx
c0028f52:	01 d3                	add    ebx,edx
c0028f54:	89 d8                	mov    eax,ebx
c0028f56:	83 d6 00             	adc    esi,0x0
c0028f59:	89 f2                	mov    edx,esi
c0028f5b:	89 c7                	mov    edi,eax
c0028f5d:	89 d1                	mov    ecx,edx
c0028f5f:	89 f8                	mov    eax,edi
c0028f61:	89 ca                	mov    edx,ecx
c0028f63:	83 c4 2c             	add    esp,0x2c
c0028f66:	5b                   	pop    ebx
c0028f67:	5e                   	pop    esi
c0028f68:	5f                   	pop    edi
c0028f69:	5d                   	pop    ebp
c0028f6a:	c3                   	ret    

c0028f6b <__floatsidf>:
c0028f6b:	55                   	push   ebp
c0028f6c:	89 e5                	mov    ebp,esp
c0028f6e:	56                   	push   esi
c0028f6f:	53                   	push   ebx
c0028f70:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028f73:	85 db                	test   ebx,ebx
c0028f75:	7e 15                	jle    c0028f8c <__floatsidf+0x21>
c0028f77:	0f bd cb             	bsr    ecx,ebx
c0028f7a:	83 f1 1f             	xor    ecx,0x1f
c0028f7d:	d3 e3                	shl    ebx,cl
c0028f7f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028f85:	b8 1e 04 00 00       	mov    eax,0x41e
c0028f8a:	eb 21                	jmp    c0028fad <__floatsidf+0x42>
c0028f8c:	b8 00 00 00 00       	mov    eax,0x0
c0028f91:	ba 00 00 00 00       	mov    edx,0x0
c0028f96:	74 2a                	je     c0028fc2 <__floatsidf+0x57>
c0028f98:	f7 db                	neg    ebx
c0028f9a:	0f bd cb             	bsr    ecx,ebx
c0028f9d:	83 f1 1f             	xor    ecx,0x1f
c0028fa0:	d3 e3                	shl    ebx,cl
c0028fa2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028fa8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028fad:	29 c8                	sub    eax,ecx
c0028faf:	c1 e0 14             	shl    eax,0x14
c0028fb2:	89 c1                	mov    ecx,eax
c0028fb4:	89 de                	mov    esi,ebx
c0028fb6:	c1 ee 0b             	shr    esi,0xb
c0028fb9:	09 f1                	or     ecx,esi
c0028fbb:	89 ca                	mov    edx,ecx
c0028fbd:	c1 e3 15             	shl    ebx,0x15
c0028fc0:	89 d8                	mov    eax,ebx
c0028fc2:	5b                   	pop    ebx
c0028fc3:	5e                   	pop    esi
c0028fc4:	5d                   	pop    ebp
c0028fc5:	c3                   	ret    

c0028fc6 <__floatunsidf>:
c0028fc6:	55                   	push   ebp
c0028fc7:	89 e5                	mov    ebp,esp
c0028fc9:	56                   	push   esi
c0028fca:	53                   	push   ebx
c0028fcb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028fce:	85 db                	test   ebx,ebx
c0028fd0:	74 2a                	je     c0028ffc <__floatunsidf+0x36>
c0028fd2:	0f bd cb             	bsr    ecx,ebx
c0028fd5:	83 f1 1f             	xor    ecx,0x1f
c0028fd8:	d3 e3                	shl    ebx,cl
c0028fda:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028fe0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028fe5:	29 c8                	sub    eax,ecx
c0028fe7:	c1 e0 14             	shl    eax,0x14
c0028fea:	89 c1                	mov    ecx,eax
c0028fec:	89 de                	mov    esi,ebx
c0028fee:	c1 ee 0b             	shr    esi,0xb
c0028ff1:	09 f1                	or     ecx,esi
c0028ff3:	89 ca                	mov    edx,ecx
c0028ff5:	c1 e3 15             	shl    ebx,0x15
c0028ff8:	89 d8                	mov    eax,ebx
c0028ffa:	eb 04                	jmp    c0029000 <__floatunsidf+0x3a>
c0028ffc:	31 c0                	xor    eax,eax
c0028ffe:	31 d2                	xor    edx,edx
c0029000:	5b                   	pop    ebx
c0029001:	5e                   	pop    esi
c0029002:	5d                   	pop    ebp
c0029003:	c3                   	ret    

c0029004 <__fixdfsi>:
c0029004:	55                   	push   ebp
c0029005:	89 e5                	mov    ebp,esp
c0029007:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002900a:	89 d1                	mov    ecx,edx
c002900c:	c1 e1 0b             	shl    ecx,0xb
c002900f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0029015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0029018:	c1 e8 15             	shr    eax,0x15
c002901b:	09 c1                	or     ecx,eax
c002901d:	c1 fa 14             	sar    edx,0x14
c0029020:	78 1f                	js     c0029041 <__fixdfsi+0x3d>
c0029022:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0029028:	31 c0                	xor    eax,eax
c002902a:	83 fa 1e             	cmp    edx,0x1e
c002902d:	77 40                	ja     c002906f <__fixdfsi+0x6b>
c002902f:	89 c8                	mov    eax,ecx
c0029031:	0d 00 00 00 80       	or     eax,0x80000000
c0029036:	b9 1f 00 00 00       	mov    ecx,0x1f
c002903b:	29 d1                	sub    ecx,edx
c002903d:	d3 e8                	shr    eax,cl
c002903f:	eb 2e                	jmp    c002906f <__fixdfsi+0x6b>
c0029041:	31 c0                	xor    eax,eax
c0029043:	81 c2 01 04 00 00    	add    edx,0x401
c0029049:	78 24                	js     c002906f <__fixdfsi+0x6b>
c002904b:	83 fa 1e             	cmp    edx,0x1e
c002904e:	7e 09                	jle    c0029059 <__fixdfsi+0x55>
c0029050:	83 fa 1f             	cmp    edx,0x1f
c0029053:	75 18                	jne    c002906d <__fixdfsi+0x69>
c0029055:	85 c9                	test   ecx,ecx
c0029057:	75 14                	jne    c002906d <__fixdfsi+0x69>
c0029059:	89 c8                	mov    eax,ecx
c002905b:	0d 00 00 00 80       	or     eax,0x80000000
c0029060:	b9 1f 00 00 00       	mov    ecx,0x1f
c0029065:	29 d1                	sub    ecx,edx
c0029067:	d3 e8                	shr    eax,cl
c0029069:	f7 d8                	neg    eax
c002906b:	eb 02                	jmp    c002906f <__fixdfsi+0x6b>
c002906d:	31 c0                	xor    eax,eax
c002906f:	5d                   	pop    ebp
c0029070:	c3                   	ret    

c0029071 <__fixunsdfsi>:
c0029071:	55                   	push   ebp
c0029072:	89 e5                	mov    ebp,esp
c0029074:	53                   	push   ebx
c0029075:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0029078:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002907b:	89 d3                	mov    ebx,edx
c002907d:	c1 fb 14             	sar    ebx,0x14
c0029080:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0029086:	31 c0                	xor    eax,eax
c0029088:	83 fb 1f             	cmp    ebx,0x1f
c002908b:	77 1d                	ja     c00290aa <__fixunsdfsi+0x39>
c002908d:	89 d0                	mov    eax,edx
c002908f:	c1 e0 0b             	shl    eax,0xb
c0029092:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0029097:	c1 e9 15             	shr    ecx,0x15
c002909a:	09 c8                	or     eax,ecx
c002909c:	0d 00 00 00 80       	or     eax,0x80000000
c00290a1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00290a6:	29 d9                	sub    ecx,ebx
c00290a8:	d3 e8                	shr    eax,cl
c00290aa:	5b                   	pop    ebx
c00290ab:	5d                   	pop    ebp
c00290ac:	c3                   	ret    

c00290ad <__cmpdf2>:
c00290ad:	55                   	push   ebp
c00290ae:	89 e5                	mov    ebp,esp
c00290b0:	57                   	push   edi
c00290b1:	56                   	push   esi
c00290b2:	53                   	push   ebx
c00290b3:	83 ec 0c             	sub    esp,0xc
c00290b6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00290b9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00290bc:	89 ca                	mov    edx,ecx
c00290be:	c1 ea 14             	shr    edx,0x14
c00290c1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00290c7:	89 cb                	mov    ebx,ecx
c00290c9:	c1 fb 1f             	sar    ebx,0x1f
c00290cc:	31 da                	xor    edx,ebx
c00290ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00290d1:	89 df                	mov    edi,ebx
c00290d3:	c1 e7 0b             	shl    edi,0xb
c00290d6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00290d9:	c1 e1 0b             	shl    ecx,0xb
c00290dc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00290e2:	c1 eb 15             	shr    ebx,0x15
c00290e5:	09 d9                	or     ecx,ebx
c00290e7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00290ea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00290ed:	89 ce                	mov    esi,ecx
c00290ef:	c1 ee 14             	shr    esi,0x14
c00290f2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00290f8:	89 cb                	mov    ebx,ecx
c00290fa:	c1 fb 1f             	sar    ebx,0x1f
c00290fd:	31 de                	xor    esi,ebx
c00290ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0029102:	89 df                	mov    edi,ebx
c0029104:	c1 e7 0b             	shl    edi,0xb
c0029107:	c1 e1 0b             	shl    ecx,0xb
c002910a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0029110:	c1 eb 15             	shr    ebx,0x15
c0029113:	09 d9                	or     ecx,ebx
c0029115:	89 d3                	mov    ebx,edx
c0029117:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002911d:	43                   	inc    ebx
c002911e:	83 fb 01             	cmp    ebx,0x1
c0029121:	77 08                	ja     c002912b <__cmpdf2+0x7e>
c0029123:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0029126:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0029129:	75 68                	jne    c0029193 <__cmpdf2+0xe6>
c002912b:	89 f3                	mov    ebx,esi
c002912d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0029133:	43                   	inc    ebx
c0029134:	83 fb 01             	cmp    ebx,0x1
c0029137:	77 06                	ja     c002913f <__cmpdf2+0x92>
c0029139:	89 fb                	mov    ebx,edi
c002913b:	09 cb                	or     ebx,ecx
c002913d:	75 54                	jne    c0029193 <__cmpdf2+0xe6>
c002913f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0029142:	09 f8                	or     eax,edi
c0029144:	09 c8                	or     eax,ecx
c0029146:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0029149:	75 12                	jne    c002915d <__cmpdf2+0xb0>
c002914b:	8d 42 01             	lea    eax,[edx+0x1]
c002914e:	83 f8 01             	cmp    eax,0x1
c0029151:	77 0a                	ja     c002915d <__cmpdf2+0xb0>
c0029153:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029156:	31 c0                	xor    eax,eax
c0029158:	83 fb 01             	cmp    ebx,0x1
c002915b:	76 36                	jbe    c0029193 <__cmpdf2+0xe6>
c002915d:	b8 01 00 00 00       	mov    eax,0x1
c0029162:	39 f2                	cmp    edx,esi
c0029164:	7f 2d                	jg     c0029193 <__cmpdf2+0xe6>
c0029166:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002916b:	7c 26                	jl     c0029193 <__cmpdf2+0xe6>
c002916d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0029170:	77 07                	ja     c0029179 <__cmpdf2+0xcc>
c0029172:	72 16                	jb     c002918a <__cmpdf2+0xdd>
c0029174:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0029177:	76 0a                	jbe    c0029183 <__cmpdf2+0xd6>
c0029179:	89 d0                	mov    eax,edx
c002917b:	c1 f8 1f             	sar    eax,0x1f
c002917e:	83 c8 01             	or     eax,0x1
c0029181:	eb 10                	jmp    c0029193 <__cmpdf2+0xe6>
c0029183:	b8 00 00 00 00       	mov    eax,0x0
c0029188:	73 09                	jae    c0029193 <__cmpdf2+0xe6>
c002918a:	89 d0                	mov    eax,edx
c002918c:	c1 f8 1f             	sar    eax,0x1f
c002918f:	83 e0 02             	and    eax,0x2
c0029192:	48                   	dec    eax
c0029193:	83 c4 0c             	add    esp,0xc
c0029196:	5b                   	pop    ebx
c0029197:	5e                   	pop    esi
c0029198:	5f                   	pop    edi
c0029199:	5d                   	pop    ebp
c002919a:	c3                   	ret    

c002919b <__eqdf2>:
c002919b:	55                   	push   ebp
c002919c:	89 e5                	mov    ebp,esp
c002919e:	50                   	push   eax
c002919f:	6a 01                	push   0x1
c00291a1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00291a4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00291a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00291aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00291ad:	e8 fb fe ff ff       	call   c00290ad <__cmpdf2>
c00291b2:	83 c4 18             	add    esp,0x18
c00291b5:	c9                   	leave  
c00291b6:	c3                   	ret    

c00291b7 <__nedf2>:
c00291b7:	eb e2                	jmp    c002919b <__eqdf2>

c00291b9 <__gtdf2>:
c00291b9:	55                   	push   ebp
c00291ba:	89 e5                	mov    ebp,esp
c00291bc:	50                   	push   eax
c00291bd:	6a ff                	push   0xffffffff
c00291bf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00291c2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00291c5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00291c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00291cb:	e8 dd fe ff ff       	call   c00290ad <__cmpdf2>
c00291d0:	83 c4 18             	add    esp,0x18
c00291d3:	c9                   	leave  
c00291d4:	c3                   	ret    

c00291d5 <__gedf2>:
c00291d5:	eb e2                	jmp    c00291b9 <__gtdf2>

c00291d7 <__ltdf2>:
c00291d7:	eb c2                	jmp    c002919b <__eqdf2>

c00291d9 <__ledf2>:
c00291d9:	eb c0                	jmp    c002919b <__eqdf2>

c00291db <__truncdfsf2>:
c00291db:	55                   	push   ebp
c00291dc:	89 e5                	mov    ebp,esp
c00291de:	57                   	push   edi
c00291df:	56                   	push   esi
c00291e0:	53                   	push   ebx
c00291e1:	83 ec 0c             	sub    esp,0xc
c00291e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00291e7:	89 d1                	mov    ecx,edx
c00291e9:	c1 f9 14             	sar    ecx,0x14
c00291ec:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00291ef:	89 df                	mov    edi,ebx
c00291f1:	c1 e7 0b             	shl    edi,0xb
c00291f4:	89 d0                	mov    eax,edx
c00291f6:	c1 e0 0b             	shl    eax,0xb
c00291f9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00291fe:	c1 eb 15             	shr    ebx,0x15
c0029201:	09 d8                	or     eax,ebx
c0029203:	89 cb                	mov    ebx,ecx
c0029205:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002920b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0029211:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0029217:	0f 86 9e 00 00 00    	jbe    c00292bb <__truncdfsf2+0xe0>
c002921d:	85 db                	test   ebx,ebx
c002921f:	75 0a                	jne    c002922b <__truncdfsf2+0x50>
c0029221:	c1 fa 17             	sar    edx,0x17
c0029224:	30 d2                	xor    dl,dl
c0029226:	e9 84 00 00 00       	jmp    c00292af <__truncdfsf2+0xd4>
c002922b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0029231:	83 fe 83             	cmp    esi,0xffffff83
c0029234:	7d 4b                	jge    c0029281 <__truncdfsf2+0xa6>
c0029236:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002923b:	29 f1                	sub    ecx,esi
c002923d:	83 f9 1f             	cmp    ecx,0x1f
c0029240:	7f 6b                	jg     c00292ad <__truncdfsf2+0xd2>
c0029242:	0d 00 00 00 80       	or     eax,0x80000000
c0029247:	89 c3                	mov    ebx,eax
c0029249:	d3 eb                	shr    ebx,cl
c002924b:	be 01 00 00 00       	mov    esi,0x1
c0029250:	d3 e6                	shl    esi,cl
c0029252:	4e                   	dec    esi
c0029253:	21 f0                	and    eax,esi
c0029255:	09 f8                	or     eax,edi
c0029257:	0f 95 c0             	setne  al
c002925a:	0f b6 c0             	movzx  eax,al
c002925d:	09 c3                	or     ebx,eax
c002925f:	89 d9                	mov    ecx,ebx
c0029261:	c1 e9 08             	shr    ecx,0x8
c0029264:	f6 c3 7f             	test   bl,0x7f
c0029267:	0f 95 c0             	setne  al
c002926a:	09 c8                	or     eax,ecx
c002926c:	83 e0 01             	and    eax,0x1
c002926f:	c1 eb 07             	shr    ebx,0x7
c0029272:	21 c3                	and    ebx,eax
c0029274:	81 e2 00 00 00 80    	and    edx,0x80000000
c002927a:	09 d1                	or     ecx,edx
c002927c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002927f:	eb 76                	jmp    c00292f7 <__truncdfsf2+0x11c>
c0029281:	83 c6 80             	add    esi,0xffffff80
c0029284:	7e 1d                	jle    c00292a3 <__truncdfsf2+0xc8>
c0029286:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002928c:	75 0b                	jne    c0029299 <__truncdfsf2+0xbe>
c002928e:	09 f8                	or     eax,edi
c0029290:	74 09                	je     c002929b <__truncdfsf2+0xc0>
c0029292:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0029297:	eb 02                	jmp    c002929b <__truncdfsf2+0xc0>
c0029299:	31 c0                	xor    eax,eax
c002929b:	c1 fa 17             	sar    edx,0x17
c002929e:	80 ca ff             	or     dl,0xff
c00292a1:	eb 0e                	jmp    c00292b1 <__truncdfsf2+0xd6>
c00292a3:	c1 fa 1f             	sar    edx,0x1f
c00292a6:	c1 e2 08             	shl    edx,0x8
c00292a9:	09 ca                	or     edx,ecx
c00292ab:	eb 04                	jmp    c00292b1 <__truncdfsf2+0xd6>
c00292ad:	31 d2                	xor    edx,edx
c00292af:	31 c0                	xor    eax,eax
c00292b1:	c1 e2 17             	shl    edx,0x17
c00292b4:	c1 e8 08             	shr    eax,0x8
c00292b7:	09 d0                	or     eax,edx
c00292b9:	eb 3c                	jmp    c00292f7 <__truncdfsf2+0x11c>
c00292bb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00292c1:	89 ca                	mov    edx,ecx
c00292c3:	c1 fa 0b             	sar    edx,0xb
c00292c6:	c1 e2 08             	shl    edx,0x8
c00292c9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00292cc:	31 db                	xor    ebx,ebx
c00292ce:	85 ff                	test   edi,edi
c00292d0:	0f 95 c3             	setne  bl
c00292d3:	09 d8                	or     eax,ebx
c00292d5:	89 c3                	mov    ebx,eax
c00292d7:	c1 eb 08             	shr    ebx,0x8
c00292da:	a8 7f                	test   al,0x7f
c00292dc:	0f 95 c2             	setne  dl
c00292df:	89 d6                	mov    esi,edx
c00292e1:	09 de                	or     esi,ebx
c00292e3:	83 e6 01             	and    esi,0x1
c00292e6:	c1 e8 07             	shr    eax,0x7
c00292e9:	21 f0                	and    eax,esi
c00292eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00292ee:	09 ca                	or     edx,ecx
c00292f0:	c1 e2 17             	shl    edx,0x17
c00292f3:	09 da                	or     edx,ebx
c00292f5:	01 d0                	add    eax,edx
c00292f7:	83 c4 0c             	add    esp,0xc
c00292fa:	5b                   	pop    ebx
c00292fb:	5e                   	pop    esi
c00292fc:	5f                   	pop    edi
c00292fd:	5d                   	pop    ebp
c00292fe:	c3                   	ret    

c00292ff <__extendsfdf2>:
c00292ff:	55                   	push   ebp
c0029300:	89 e5                	mov    ebp,esp
c0029302:	57                   	push   edi
c0029303:	56                   	push   esi
c0029304:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0029307:	89 d1                	mov    ecx,edx
c0029309:	c1 f9 17             	sar    ecx,0x17
c002930c:	c1 e2 08             	shl    edx,0x8
c002930f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0029315:	89 c8                	mov    eax,ecx
c0029317:	80 e4 f8             	and    ah,0xf8
c002931a:	8d 71 01             	lea    esi,[ecx+0x1]
c002931d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0029323:	75 27                	jne    c002934c <__extendsfdf2+0x4d>
c0029325:	81 e1 ff 00 00 00    	and    ecx,0xff
c002932b:	75 18                	jne    c0029345 <__extendsfdf2+0x46>
c002932d:	85 d2                	test   edx,edx
c002932f:	74 20                	je     c0029351 <__extendsfdf2+0x52>
c0029331:	41                   	inc    ecx
c0029332:	01 d2                	add    edx,edx
c0029334:	79 fb                	jns    c0029331 <__extendsfdf2+0x32>
c0029336:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002933c:	29 c8                	sub    eax,ecx
c002933e:	05 81 03 00 00       	add    eax,0x381
c0029343:	eb 0c                	jmp    c0029351 <__extendsfdf2+0x52>
c0029345:	05 00 07 00 00       	add    eax,0x700
c002934a:	eb 05                	jmp    c0029351 <__extendsfdf2+0x52>
c002934c:	05 80 03 00 00       	add    eax,0x380
c0029351:	c1 e0 14             	shl    eax,0x14
c0029354:	89 c1                	mov    ecx,eax
c0029356:	89 d0                	mov    eax,edx
c0029358:	c1 e8 0b             	shr    eax,0xb
c002935b:	09 c1                	or     ecx,eax
c002935d:	c1 e2 15             	shl    edx,0x15
c0029360:	89 d0                	mov    eax,edx
c0029362:	89 ca                	mov    edx,ecx
c0029364:	5e                   	pop    esi
c0029365:	5f                   	pop    edi
c0029366:	5d                   	pop    ebp
c0029367:	c3                   	ret    
c0029368:	66 90                	xchg   ax,ax
c002936a:	66 90                	xchg   ax,ax
c002936c:	66 90                	xchg   ax,ax
c002936e:	66 90                	xchg   ax,ax

c0029370 <fabs>:
c0029370:	83 ec 0c             	sub    esp,0xc
c0029373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029377:	89 04 24             	mov    DWORD PTR [esp],eax
c002937a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002937e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0029383:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0029387:	dd 04 24             	fld    QWORD PTR [esp]
c002938a:	83 c4 0c             	add    esp,0xc
c002938d:	c3                   	ret    
c002938e:	66 90                	xchg   ax,ax

c0029390 <lrint>:
c0029390:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0029394:	83 ec 04             	sub    esp,0x4
c0029397:	db 1c 24             	fistp  DWORD PTR [esp]
c002939a:	58                   	pop    eax
c002939b:	c3                   	ret    

c002939c <lrintf>:
c002939c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00293a0:	83 ec 04             	sub    esp,0x4
c00293a3:	db 1c 24             	fistp  DWORD PTR [esp]
c00293a6:	58                   	pop    eax
c00293a7:	c3                   	ret    

Disassembly of section .init:

c00293a8 <_init>:
c00293a8:	55                   	push   ebp
c00293a9:	89 e5                	mov    ebp,esp
c00293ab:	e8 68 6d fd ff       	call   c0000118 <frame_dummy>
c00293b0:	e8 5b e0 ff ff       	call   c0027410 <__do_global_ctors_aux>
c00293b5:	5d                   	pop    ebp
c00293b6:	c3                   	ret    

Disassembly of section .fini:

c00293b7 <_fini>:
c00293b7:	55                   	push   ebp
c00293b8:	89 e5                	mov    ebp,esp
c00293ba:	e8 e9 6c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00293bf:	5d                   	pop    ebp
c00293c0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00293c2 <Computer::~Computer()>:
c00293c2:	83 ec 0c             	sub    esp,0xc
c00293c5:	ba e8 af 02 c0       	mov    edx,0xc002afe8
c00293ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ce:	89 10                	mov    DWORD PTR [eax],edx
c00293d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d4:	83 ec 0c             	sub    esp,0xc
c00293d7:	50                   	push   eax
c00293d8:	e8 11 ad fe ff       	call   c00140ee <Device::~Device()>
c00293dd:	83 c4 10             	add    esp,0x10
c00293e0:	90                   	nop
c00293e1:	83 c4 0c             	add    esp,0xc
c00293e4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00293e6 <Computer::~Computer()>:
c00293e6:	83 ec 0c             	sub    esp,0xc
c00293e9:	83 ec 0c             	sub    esp,0xc
c00293ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293f0:	e8 cd ff ff ff       	call   c00293c2 <Computer::~Computer()>
c00293f5:	83 c4 10             	add    esp,0x10
c00293f8:	83 ec 08             	sub    esp,0x8
c00293fb:	68 ec 01 00 00       	push   0x1ec
c0029400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029404:	e8 fe 98 fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029409:	83 c4 10             	add    esp,0x10
c002940c:	83 c4 0c             	add    esp,0xc
c002940f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029410 <idleCommon()>:
c0029410:	83 ec 0c             	sub    esp,0xc
c0029413:	fa                   	cli    
c0029414:	ff 05 28 29 03 c0    	inc    DWORD PTR ds:0xc0032928
c002941a:	e8 c3 52 ff ff       	call   c001e6e2 <schedule()>
c002941f:	a1 28 29 03 c0       	mov    eax,ds:0xc0032928
c0029424:	48                   	dec    eax
c0029425:	a3 28 29 03 c0       	mov    ds:0xc0032928,eax
c002942a:	75 01                	jne    c002942d <idleCommon()+0x1d>
c002942c:	fb                   	sti    
c002942d:	83 c4 0c             	add    esp,0xc
c0029430:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029432 <LinkedList<UnixFile>::~LinkedList()>:
c0029432:	90                   	nop
c0029433:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029434 <LinkedList<UnixFile>::LinkedList()>:
c0029434:	83 ec 0c             	sub    esp,0xc
c0029437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002943b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029445:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002944c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029450:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029465:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002946c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029470:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029477:	83 ec 0c             	sub    esp,0xc
c002947a:	68 a6 b2 02 c0       	push   0xc002b2a6
c002947f:	e8 63 99 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0029484:	83 c4 10             	add    esp,0x10
c0029487:	90                   	nop
c0029488:	83 c4 0c             	add    esp,0xc
c002948b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002948c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002948c:	83 ec 0c             	sub    esp,0xc
c002948f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029494:	75 10                	jne    c00294a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029496:	83 ec 0c             	sub    esp,0xc
c0029499:	68 c0 b2 02 c0       	push   0xc002b2c0
c002949e:	e8 8c 14 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c00294a3:	83 c4 10             	add    esp,0x10
c00294a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00294ac:	85 c0                	test   eax,eax
c00294ae:	74 34                	je     c00294e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00294b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294b7:	85 c0                	test   eax,eax
c00294b9:	74 29                	je     c00294e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00294bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00294d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294db:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00294e2:	eb 65                	jmp    c0029549 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00294e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00294ea:	85 c0                	test   eax,eax
c00294ec:	75 4b                	jne    c0029539 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00294ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294f5:	85 c0                	test   eax,eax
c00294f7:	75 40                	jne    c0029539 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00294f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029501:	89 10                	mov    DWORD PTR [eax],edx
c0029503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029507:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002950b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029512:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029515:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002951c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029520:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029523:	85 c0                	test   eax,eax
c0029525:	74 22                	je     c0029549 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029527:	83 ec 0c             	sub    esp,0xc
c002952a:	68 e2 b2 02 c0       	push   0xc002b2e2
c002952f:	e8 fb 13 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0029534:	83 c4 10             	add    esp,0x10
c0029537:	eb 10                	jmp    c0029549 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029539:	83 ec 0c             	sub    esp,0xc
c002953c:	68 ec b2 02 c0       	push   0xc002b2ec
c0029541:	e8 e9 13 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0029546:	83 c4 10             	add    esp,0x10
c0029549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029550:	8d 50 01             	lea    edx,[eax+0x1]
c0029553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029557:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002955a:	90                   	nop
c002955b:	83 c4 0c             	add    esp,0xc
c002955e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029560 <LinkedList<UnixFile>::getFirstElement()>:
c0029560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029564:	8b 00                	mov    eax,DWORD PTR [eax]
c0029566:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029568 <LinkedList<UnixFile>::removeFirst()>:
c0029568:	83 ec 0c             	sub    esp,0xc
c002956b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002956f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029571:	85 c0                	test   eax,eax
c0029573:	75 12                	jne    c0029587 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029575:	83 ec 0c             	sub    esp,0xc
c0029578:	68 f8 b2 02 c0       	push   0xc002b2f8
c002957d:	e8 ad 13 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0029582:	83 c4 10             	add    esp,0x10
c0029585:	eb 7e                	jmp    c0029605 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002958e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029591:	85 c0                	test   eax,eax
c0029593:	74 10                	je     c00295a5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029595:	83 ec 0c             	sub    esp,0xc
c0029598:	68 43 b3 02 c0       	push   0xc002b343
c002959d:	e8 8d 13 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c00295a2:	83 c4 10             	add    esp,0x10
c00295a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00295ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295ae:	85 c0                	test   eax,eax
c00295b0:	75 33                	jne    c00295e5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00295b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295ce:	83 f8 01             	cmp    eax,0x1
c00295d1:	74 21                	je     c00295f4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00295d3:	83 ec 0c             	sub    esp,0xc
c00295d6:	68 1c b3 02 c0       	push   0xc002b31c
c00295db:	e8 4f 13 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c00295e0:	83 c4 10             	add    esp,0x10
c00295e3:	eb 0f                	jmp    c00295f4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00295e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00295eb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00295ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f2:	89 10                	mov    DWORD PTR [eax],edx
c00295f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295fb:	8d 50 ff             	lea    edx,[eax-0x1]
c00295fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029602:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029605:	83 c4 0c             	add    esp,0xc
c0029608:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002960a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002960a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002960e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029611:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029612 <DriverlessDevice::~DriverlessDevice()>:
c0029612:	ba fc ba 02 c0       	mov    edx,0xc002bafc
c0029617:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002961b:	89 10                	mov    DWORD PTR [eax],edx
c002961d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029621:	50                   	push   eax
c0029622:	e8 c7 aa fe ff       	call   c00140ee <Device::~Device()>
c0029627:	83 c4 04             	add    esp,0x4
c002962a:	90                   	nop
c002962b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002962c <DriverlessDevice::~DriverlessDevice()>:
c002962c:	83 ec 0c             	sub    esp,0xc
c002962f:	83 ec 0c             	sub    esp,0xc
c0029632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029636:	e8 d7 ff ff ff       	call   c0029612 <DriverlessDevice::~DriverlessDevice()>
c002963b:	83 c4 10             	add    esp,0x10
c002963e:	83 ec 08             	sub    esp,0x8
c0029641:	68 58 01 00 00       	push   0x158
c0029646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002964a:	e8 b8 96 fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c002964f:	83 c4 10             	add    esp,0x10
c0029652:	83 c4 0c             	add    esp,0xc
c0029655:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029656 <LinkedList<Device>::addElement(Device*)>:
c0029656:	83 ec 0c             	sub    esp,0xc
c0029659:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002965e:	75 10                	jne    c0029670 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029660:	83 ec 0c             	sub    esp,0xc
c0029663:	68 c0 b2 02 c0       	push   0xc002b2c0
c0029668:	e8 c2 12 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c002966d:	83 c4 10             	add    esp,0x10
c0029670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029674:	8b 00                	mov    eax,DWORD PTR [eax]
c0029676:	85 c0                	test   eax,eax
c0029678:	74 3a                	je     c00296b4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002967a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002967e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029681:	85 c0                	test   eax,eax
c0029683:	74 2f                	je     c00296b4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029689:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002968c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029690:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002969a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002969e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00296a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296a8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00296b2:	eb 68                	jmp    c002971c <LinkedList<Device>::addElement(Device*)+0xc6>
c00296b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00296ba:	85 c0                	test   eax,eax
c00296bc:	75 4e                	jne    c002970c <LinkedList<Device>::addElement(Device*)+0xb6>
c00296be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296c5:	85 c0                	test   eax,eax
c00296c7:	75 43                	jne    c002970c <LinkedList<Device>::addElement(Device*)+0xb6>
c00296c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00296d1:	89 10                	mov    DWORD PTR [eax],edx
c00296d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00296db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00296de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296e5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00296ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00296f6:	85 c0                	test   eax,eax
c00296f8:	74 22                	je     c002971c <LinkedList<Device>::addElement(Device*)+0xc6>
c00296fa:	83 ec 0c             	sub    esp,0xc
c00296fd:	68 e2 b2 02 c0       	push   0xc002b2e2
c0029702:	e8 28 12 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0029707:	83 c4 10             	add    esp,0x10
c002970a:	eb 10                	jmp    c002971c <LinkedList<Device>::addElement(Device*)+0xc6>
c002970c:	83 ec 0c             	sub    esp,0xc
c002970f:	68 ec b2 02 c0       	push   0xc002b2ec
c0029714:	e8 16 12 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0029719:	83 c4 10             	add    esp,0x10
c002971c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029720:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029723:	8d 50 01             	lea    edx,[eax+0x1]
c0029726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002972a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002972d:	90                   	nop
c002972e:	83 c4 0c             	add    esp,0xc
c0029731:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029732 <LinkedList<Device>::LinkedList()>:
c0029732:	83 ec 0c             	sub    esp,0xc
c0029735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029739:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002973f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029743:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002974a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002974e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029759:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002975f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029763:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002976a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029775:	83 ec 0c             	sub    esp,0xc
c0029778:	68 a6 b2 02 c0       	push   0xc002b2a6
c002977d:	e8 65 96 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0029782:	83 c4 10             	add    esp,0x10
c0029785:	90                   	nop
c0029786:	83 c4 0c             	add    esp,0xc
c0029789:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002978a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002978a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002978e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029790:	85 c0                	test   eax,eax
c0029792:	75 0e                	jne    c00297a2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002979b:	85 c0                	test   eax,eax
c002979d:	75 03                	jne    c00297a2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002979f:	b0 01                	mov    al,0x1
c00297a1:	c3                   	ret    
c00297a2:	b0 00                	mov    al,0x0
c00297a4:	90                   	nop
c00297a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00297a6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00297a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00297ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00297ae <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00297ae:	83 ec 0c             	sub    esp,0xc
c00297b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00297b7:	85 c0                	test   eax,eax
c00297b9:	75 15                	jne    c00297d0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00297bb:	83 ec 0c             	sub    esp,0xc
c00297be:	68 f8 b2 02 c0       	push   0xc002b2f8
c00297c3:	e8 67 11 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c00297c8:	83 c4 10             	add    esp,0x10
c00297cb:	e9 88 00 00 00       	jmp    c0029858 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00297d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00297da:	85 c0                	test   eax,eax
c00297dc:	0f 95 c0             	setne  al
c00297df:	84 c0                	test   al,al
c00297e1:	74 10                	je     c00297f3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00297e3:	83 ec 0c             	sub    esp,0xc
c00297e6:	68 43 b3 02 c0       	push   0xc002b343
c00297eb:	e8 3f 11 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c00297f0:	83 c4 10             	add    esp,0x10
c00297f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00297f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00297fc:	85 c0                	test   eax,eax
c00297fe:	0f 94 c0             	sete   al
c0029801:	84 c0                	test   al,al
c0029803:	74 33                	je     c0029838 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029809:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002980f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029813:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002981a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002981e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029821:	83 f8 01             	cmp    eax,0x1
c0029824:	74 21                	je     c0029847 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029826:	83 ec 0c             	sub    esp,0xc
c0029829:	68 1c b3 02 c0       	push   0xc002b31c
c002982e:	e8 fc 10 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0029833:	83 c4 10             	add    esp,0x10
c0029836:	eb 0f                	jmp    c0029847 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002983c:	8b 00                	mov    eax,DWORD PTR [eax]
c002983e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029845:	89 10                	mov    DWORD PTR [eax],edx
c0029847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002984b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002984e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029855:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029858:	83 c4 0c             	add    esp,0xc
c002985b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002985c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002985c:	83 ec 0c             	sub    esp,0xc
c002985f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029864:	75 10                	jne    c0029876 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029866:	83 ec 0c             	sub    esp,0xc
c0029869:	68 c0 b2 02 c0       	push   0xc002b2c0
c002986e:	e8 bc 10 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0029873:	83 c4 10             	add    esp,0x10
c0029876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987a:	8b 00                	mov    eax,DWORD PTR [eax]
c002987c:	85 c0                	test   eax,eax
c002987e:	74 34                	je     c00298b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029884:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029887:	85 c0                	test   eax,eax
c0029889:	74 29                	je     c00298b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002988b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029892:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029896:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00298a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00298a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298ab:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00298b2:	eb 65                	jmp    c0029919 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00298b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00298ba:	85 c0                	test   eax,eax
c00298bc:	75 4b                	jne    c0029909 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00298be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298c5:	85 c0                	test   eax,eax
c00298c7:	75 40                	jne    c0029909 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00298c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00298d1:	89 10                	mov    DWORD PTR [eax],edx
c00298d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00298db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00298de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298e5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00298ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00298f3:	85 c0                	test   eax,eax
c00298f5:	74 22                	je     c0029919 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00298f7:	83 ec 0c             	sub    esp,0xc
c00298fa:	68 e2 b2 02 c0       	push   0xc002b2e2
c00298ff:	e8 2b 10 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0029904:	83 c4 10             	add    esp,0x10
c0029907:	eb 10                	jmp    c0029919 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029909:	83 ec 0c             	sub    esp,0xc
c002990c:	68 ec b2 02 c0       	push   0xc002b2ec
c0029911:	e8 19 10 ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0029916:	83 c4 10             	add    esp,0x10
c0029919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002991d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029920:	8d 50 01             	lea    edx,[eax+0x1]
c0029923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029927:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002992a:	90                   	nop
c002992b:	83 c4 0c             	add    esp,0xc
c002992e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029930 <ACPI::~ACPI()>:
c0029930:	83 ec 0c             	sub    esp,0xc
c0029933:	ba 28 c5 02 c0       	mov    edx,0xc002c528
c0029938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002993c:	89 10                	mov    DWORD PTR [eax],edx
c002993e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029942:	83 ec 0c             	sub    esp,0xc
c0029945:	50                   	push   eax
c0029946:	e8 a3 a7 fe ff       	call   c00140ee <Device::~Device()>
c002994b:	83 c4 10             	add    esp,0x10
c002994e:	90                   	nop
c002994f:	83 c4 0c             	add    esp,0xc
c0029952:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029954 <ACPI::~ACPI()>:
c0029954:	83 ec 0c             	sub    esp,0xc
c0029957:	83 ec 0c             	sub    esp,0xc
c002995a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002995e:	e8 cd ff ff ff       	call   c0029930 <ACPI::~ACPI()>
c0029963:	83 c4 10             	add    esp,0x10
c0029966:	83 ec 08             	sub    esp,0x8
c0029969:	68 68 12 00 00       	push   0x1268
c002996e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029972:	e8 90 93 fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029977:	83 c4 10             	add    esp,0x10
c002997a:	83 c4 0c             	add    esp,0xc
c002997d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002997e <LinkedList<Device>::~LinkedList()>:
c002997e:	90                   	nop
c002997f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029980 <LinkedList<Device>::isEmpty()>:
c0029980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029984:	8b 00                	mov    eax,DWORD PTR [eax]
c0029986:	85 c0                	test   eax,eax
c0029988:	75 0e                	jne    c0029998 <LinkedList<Device>::isEmpty()+0x18>
c002998a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002998e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029991:	85 c0                	test   eax,eax
c0029993:	75 03                	jne    c0029998 <LinkedList<Device>::isEmpty()+0x18>
c0029995:	b0 01                	mov    al,0x1
c0029997:	c3                   	ret    
c0029998:	b0 00                	mov    al,0x0
c002999a:	90                   	nop
c002999b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002999c <LinkedList<Device>::getFirstElement()>:
c002999c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00299a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00299a4 <LinkedList<Device>::removeFirst()>:
c00299a4:	83 ec 0c             	sub    esp,0xc
c00299a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00299ad:	85 c0                	test   eax,eax
c00299af:	75 15                	jne    c00299c6 <LinkedList<Device>::removeFirst()+0x22>
c00299b1:	83 ec 0c             	sub    esp,0xc
c00299b4:	68 f8 b2 02 c0       	push   0xc002b2f8
c00299b9:	e8 71 0f ff ff       	call   c001a92f <Krnl::panic(char const*)>
c00299be:	83 c4 10             	add    esp,0x10
c00299c1:	e9 87 00 00 00       	jmp    c0029a4d <LinkedList<Device>::removeFirst()+0xa9>
c00299c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00299cd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00299d3:	85 c0                	test   eax,eax
c00299d5:	74 10                	je     c00299e7 <LinkedList<Device>::removeFirst()+0x43>
c00299d7:	83 ec 0c             	sub    esp,0xc
c00299da:	68 43 b3 02 c0       	push   0xc002b343
c00299df:	e8 4b 0f ff ff       	call   c001a92f <Krnl::panic(char const*)>
c00299e4:	83 c4 10             	add    esp,0x10
c00299e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00299ed:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00299f3:	85 c0                	test   eax,eax
c00299f5:	75 33                	jne    c0029a2a <LinkedList<Device>::removeFirst()+0x86>
c00299f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a10:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029a13:	83 f8 01             	cmp    eax,0x1
c0029a16:	74 24                	je     c0029a3c <LinkedList<Device>::removeFirst()+0x98>
c0029a18:	83 ec 0c             	sub    esp,0xc
c0029a1b:	68 1c b3 02 c0       	push   0xc002b31c
c0029a20:	e8 0a 0f ff ff       	call   c001a92f <Krnl::panic(char const*)>
c0029a25:	83 c4 10             	add    esp,0x10
c0029a28:	eb 12                	jmp    c0029a3c <LinkedList<Device>::removeFirst()+0x98>
c0029a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029a30:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a3a:	89 10                	mov    DWORD PTR [eax],edx
c0029a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029a43:	8d 50 ff             	lea    edx,[eax-0x1]
c0029a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029a4d:	83 c4 0c             	add    esp,0xc
c0029a50:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029a52 <CPU::~CPU()>:
c0029a52:	83 ec 0c             	sub    esp,0xc
c0029a55:	ba 18 c9 02 c0       	mov    edx,0xc002c918
c0029a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a5e:	89 10                	mov    DWORD PTR [eax],edx
c0029a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a64:	83 ec 0c             	sub    esp,0xc
c0029a67:	50                   	push   eax
c0029a68:	e8 81 a6 fe ff       	call   c00140ee <Device::~Device()>
c0029a6d:	83 c4 10             	add    esp,0x10
c0029a70:	90                   	nop
c0029a71:	83 c4 0c             	add    esp,0xc
c0029a74:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029a76 <CPU::~CPU()>:
c0029a76:	83 ec 0c             	sub    esp,0xc
c0029a79:	83 ec 0c             	sub    esp,0xc
c0029a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a80:	e8 cd ff ff ff       	call   c0029a52 <CPU::~CPU()>
c0029a85:	83 c4 10             	add    esp,0x10
c0029a88:	83 ec 08             	sub    esp,0x8
c0029a8b:	68 98 11 00 00       	push   0x1198
c0029a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a94:	e8 6e 92 fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029a99:	83 c4 10             	add    esp,0x10
c0029a9c:	83 c4 0c             	add    esp,0xc
c0029a9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029aa0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029aa0:	90                   	nop
c0029aa1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029aa2 <ThreadControlBlock::ThreadControlBlock()>:
c0029aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029aa6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029aad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ab1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029abc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ac7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029ace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ad2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029add:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029ae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ae5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029ae9:	90                   	nop
c0029aea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029aec <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029aec:	83 ec 0c             	sub    esp,0xc
c0029aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029afd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b08:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b13:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b1d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b28:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029b2f:	83 ec 0c             	sub    esp,0xc
c0029b32:	68 a6 b2 02 c0       	push   0xc002b2a6
c0029b37:	e8 ab 92 fe ff       	call   c0012de7 <Dbg::kprintf(char const*, ...)>
c0029b3c:	83 c4 10             	add    esp,0x10
c0029b3f:	90                   	nop
c0029b40:	83 c4 0c             	add    esp,0xc
c0029b43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029b44 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029b44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029b48:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029b4b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0029b4c <Vm::_FPUState::_FPUState()>:
c0029b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029b50:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029b57:	90                   	nop
c0029b58:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029b5a <PCI::~PCI()>:
c0029b5a:	83 ec 0c             	sub    esp,0xc
c0029b5d:	ba 44 da 02 c0       	mov    edx,0xc002da44
c0029b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b66:	89 10                	mov    DWORD PTR [eax],edx
c0029b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b6c:	83 ec 0c             	sub    esp,0xc
c0029b6f:	50                   	push   eax
c0029b70:	e8 49 9f fe ff       	call   c0013abe <Bus::~Bus()>
c0029b75:	83 c4 10             	add    esp,0x10
c0029b78:	90                   	nop
c0029b79:	83 c4 0c             	add    esp,0xc
c0029b7c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0029b7e <PCI::~PCI()>:
c0029b7e:	83 ec 0c             	sub    esp,0xc
c0029b81:	83 ec 0c             	sub    esp,0xc
c0029b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b88:	e8 cd ff ff ff       	call   c0029b5a <PCI::~PCI()>
c0029b8d:	83 c4 10             	add    esp,0x10
c0029b90:	83 ec 08             	sub    esp,0x8
c0029b93:	68 58 01 00 00       	push   0x158
c0029b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b9c:	e8 66 91 fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029ba1:	83 c4 10             	add    esp,0x10
c0029ba4:	83 c4 0c             	add    esp,0xc
c0029ba7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029ba8 <IDE::~IDE()>:
c0029ba8:	83 ec 0c             	sub    esp,0xc
c0029bab:	ba a8 dc 02 c0       	mov    edx,0xc002dca8
c0029bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bb4:	89 10                	mov    DWORD PTR [eax],edx
c0029bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bba:	83 ec 0c             	sub    esp,0xc
c0029bbd:	50                   	push   eax
c0029bbe:	e8 41 aa fe ff       	call   c0014604 <HardDiskController::~HardDiskController()>
c0029bc3:	83 c4 10             	add    esp,0x10
c0029bc6:	90                   	nop
c0029bc7:	83 c4 0c             	add    esp,0xc
c0029bca:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0029bcc <IDE::~IDE()>:
c0029bcc:	83 ec 0c             	sub    esp,0xc
c0029bcf:	83 ec 0c             	sub    esp,0xc
c0029bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bd6:	e8 cd ff ff ff       	call   c0029ba8 <IDE::~IDE()>
c0029bdb:	83 c4 10             	add    esp,0x10
c0029bde:	83 ec 08             	sub    esp,0x8
c0029be1:	68 70 02 00 00       	push   0x270
c0029be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bea:	e8 18 91 fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029bef:	83 c4 10             	add    esp,0x10
c0029bf2:	83 c4 0c             	add    esp,0xc
c0029bf5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029bf6 <SATABus::~SATABus()>:
c0029bf6:	83 ec 0c             	sub    esp,0xc
c0029bf9:	ba 88 dd 02 c0       	mov    edx,0xc002dd88
c0029bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c02:	89 10                	mov    DWORD PTR [eax],edx
c0029c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c08:	83 ec 0c             	sub    esp,0xc
c0029c0b:	50                   	push   eax
c0029c0c:	e8 f3 a9 fe ff       	call   c0014604 <HardDiskController::~HardDiskController()>
c0029c11:	83 c4 10             	add    esp,0x10
c0029c14:	90                   	nop
c0029c15:	83 c4 0c             	add    esp,0xc
c0029c18:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029c1a <SATABus::~SATABus()>:
c0029c1a:	83 ec 0c             	sub    esp,0xc
c0029c1d:	83 ec 0c             	sub    esp,0xc
c0029c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c24:	e8 cd ff ff ff       	call   c0029bf6 <SATABus::~SATABus()>
c0029c29:	83 c4 10             	add    esp,0x10
c0029c2c:	83 ec 08             	sub    esp,0x8
c0029c2f:	68 64 01 00 00       	push   0x164
c0029c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c38:	e8 ca 90 fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029c3d:	83 c4 10             	add    esp,0x10
c0029c40:	83 c4 0c             	add    esp,0xc
c0029c43:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029c44 <ATA::~ATA()>:
c0029c44:	83 ec 0c             	sub    esp,0xc
c0029c47:	ba d4 dd 02 c0       	mov    edx,0xc002ddd4
c0029c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c50:	89 10                	mov    DWORD PTR [eax],edx
c0029c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c56:	83 ec 0c             	sub    esp,0xc
c0029c59:	50                   	push   eax
c0029c5a:	e8 97 aa fe ff       	call   c00146f6 <PhysicalDisk::~PhysicalDisk()>
c0029c5f:	83 c4 10             	add    esp,0x10
c0029c62:	90                   	nop
c0029c63:	83 c4 0c             	add    esp,0xc
c0029c66:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029c68 <ATA::~ATA()>:
c0029c68:	83 ec 0c             	sub    esp,0xc
c0029c6b:	83 ec 0c             	sub    esp,0xc
c0029c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c72:	e8 cd ff ff ff       	call   c0029c44 <ATA::~ATA()>
c0029c77:	83 c4 10             	add    esp,0x10
c0029c7a:	83 ec 08             	sub    esp,0x8
c0029c7d:	68 7c 01 00 00       	push   0x17c
c0029c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c86:	e8 7c 90 fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029c8b:	83 c4 10             	add    esp,0x10
c0029c8e:	83 c4 0c             	add    esp,0xc
c0029c91:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029c92 <ATAPI::~ATAPI()>:
c0029c92:	83 ec 0c             	sub    esp,0xc
c0029c95:	ba 0c de 02 c0       	mov    edx,0xc002de0c
c0029c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c9e:	89 10                	mov    DWORD PTR [eax],edx
c0029ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ca4:	83 ec 0c             	sub    esp,0xc
c0029ca7:	50                   	push   eax
c0029ca8:	e8 49 aa fe ff       	call   c00146f6 <PhysicalDisk::~PhysicalDisk()>
c0029cad:	83 c4 10             	add    esp,0x10
c0029cb0:	90                   	nop
c0029cb1:	83 c4 0c             	add    esp,0xc
c0029cb4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029cb6 <ATAPI::~ATAPI()>:
c0029cb6:	83 ec 0c             	sub    esp,0xc
c0029cb9:	83 ec 0c             	sub    esp,0xc
c0029cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cc0:	e8 cd ff ff ff       	call   c0029c92 <ATAPI::~ATAPI()>
c0029cc5:	83 c4 10             	add    esp,0x10
c0029cc8:	83 ec 08             	sub    esp,0x8
c0029ccb:	68 80 01 00 00       	push   0x180
c0029cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cd4:	e8 2e 90 fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029cd9:	83 c4 10             	add    esp,0x10
c0029cdc:	83 c4 0c             	add    esp,0xc
c0029cdf:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029ce0 <SATA::~SATA()>:
c0029ce0:	83 ec 0c             	sub    esp,0xc
c0029ce3:	ba c0 de 02 c0       	mov    edx,0xc002dec0
c0029ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cec:	89 10                	mov    DWORD PTR [eax],edx
c0029cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cf2:	83 ec 0c             	sub    esp,0xc
c0029cf5:	50                   	push   eax
c0029cf6:	e8 fb a9 fe ff       	call   c00146f6 <PhysicalDisk::~PhysicalDisk()>
c0029cfb:	83 c4 10             	add    esp,0x10
c0029cfe:	90                   	nop
c0029cff:	83 c4 0c             	add    esp,0xc
c0029d02:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029d04 <SATA::~SATA()>:
c0029d04:	83 ec 0c             	sub    esp,0xc
c0029d07:	83 ec 0c             	sub    esp,0xc
c0029d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d0e:	e8 cd ff ff ff       	call   c0029ce0 <SATA::~SATA()>
c0029d13:	83 c4 10             	add    esp,0x10
c0029d16:	83 ec 08             	sub    esp,0x8
c0029d19:	68 7c 01 00 00       	push   0x17c
c0029d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d22:	e8 e0 8f fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029d27:	83 c4 10             	add    esp,0x10
c0029d2a:	83 c4 0c             	add    esp,0xc
c0029d2d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029d2e <SATAPI::~SATAPI()>:
c0029d2e:	83 ec 0c             	sub    esp,0xc
c0029d31:	ba 9c df 02 c0       	mov    edx,0xc002df9c
c0029d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d3a:	89 10                	mov    DWORD PTR [eax],edx
c0029d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d40:	83 ec 0c             	sub    esp,0xc
c0029d43:	50                   	push   eax
c0029d44:	e8 ad a9 fe ff       	call   c00146f6 <PhysicalDisk::~PhysicalDisk()>
c0029d49:	83 c4 10             	add    esp,0x10
c0029d4c:	90                   	nop
c0029d4d:	83 c4 0c             	add    esp,0xc
c0029d50:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029d52 <SATAPI::~SATAPI()>:
c0029d52:	83 ec 0c             	sub    esp,0xc
c0029d55:	83 ec 0c             	sub    esp,0xc
c0029d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d5c:	e8 cd ff ff ff       	call   c0029d2e <SATAPI::~SATAPI()>
c0029d61:	83 c4 10             	add    esp,0x10
c0029d64:	83 ec 08             	sub    esp,0x8
c0029d67:	68 80 01 00 00       	push   0x180
c0029d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d70:	e8 92 8f fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029d75:	83 c4 10             	add    esp,0x10
c0029d78:	83 c4 0c             	add    esp,0xc
c0029d7b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029d7c <AVX::~AVX()>:
c0029d7c:	83 ec 0c             	sub    esp,0xc
c0029d7f:	ba dc df 02 c0       	mov    edx,0xc002dfdc
c0029d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d88:	89 10                	mov    DWORD PTR [eax],edx
c0029d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d8e:	83 ec 0c             	sub    esp,0xc
c0029d91:	50                   	push   eax
c0029d92:	e8 e3 a9 fe ff       	call   c001477a <FPU::~FPU()>
c0029d97:	83 c4 10             	add    esp,0x10
c0029d9a:	90                   	nop
c0029d9b:	83 c4 0c             	add    esp,0xc
c0029d9e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029da0 <AVX::~AVX()>:
c0029da0:	83 ec 0c             	sub    esp,0xc
c0029da3:	83 ec 0c             	sub    esp,0xc
c0029da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029daa:	e8 cd ff ff ff       	call   c0029d7c <AVX::~AVX()>
c0029daf:	83 c4 10             	add    esp,0x10
c0029db2:	83 ec 08             	sub    esp,0x8
c0029db5:	68 58 01 00 00       	push   0x158
c0029dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dbe:	e8 44 8f fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029dc3:	83 c4 10             	add    esp,0x10
c0029dc6:	83 c4 0c             	add    esp,0xc
c0029dc9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029dca <MMX::~MMX()>:
c0029dca:	83 ec 0c             	sub    esp,0xc
c0029dcd:	ba 1c e0 02 c0       	mov    edx,0xc002e01c
c0029dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dd6:	89 10                	mov    DWORD PTR [eax],edx
c0029dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ddc:	83 ec 0c             	sub    esp,0xc
c0029ddf:	50                   	push   eax
c0029de0:	e8 95 a9 fe ff       	call   c001477a <FPU::~FPU()>
c0029de5:	83 c4 10             	add    esp,0x10
c0029de8:	90                   	nop
c0029de9:	83 c4 0c             	add    esp,0xc
c0029dec:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029dee <MMX::~MMX()>:
c0029dee:	83 ec 0c             	sub    esp,0xc
c0029df1:	83 ec 0c             	sub    esp,0xc
c0029df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029df8:	e8 cd ff ff ff       	call   c0029dca <MMX::~MMX()>
c0029dfd:	83 c4 10             	add    esp,0x10
c0029e00:	83 ec 08             	sub    esp,0x8
c0029e03:	68 58 01 00 00       	push   0x158
c0029e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e0c:	e8 f6 8e fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029e11:	83 c4 10             	add    esp,0x10
c0029e14:	83 c4 0c             	add    esp,0xc
c0029e17:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029e18 <SSE::~SSE()>:
c0029e18:	83 ec 0c             	sub    esp,0xc
c0029e1b:	ba 5c e0 02 c0       	mov    edx,0xc002e05c
c0029e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e24:	89 10                	mov    DWORD PTR [eax],edx
c0029e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e2a:	83 ec 0c             	sub    esp,0xc
c0029e2d:	50                   	push   eax
c0029e2e:	e8 47 a9 fe ff       	call   c001477a <FPU::~FPU()>
c0029e33:	83 c4 10             	add    esp,0x10
c0029e36:	90                   	nop
c0029e37:	83 c4 0c             	add    esp,0xc
c0029e3a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029e3c <SSE::~SSE()>:
c0029e3c:	83 ec 0c             	sub    esp,0xc
c0029e3f:	83 ec 0c             	sub    esp,0xc
c0029e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e46:	e8 cd ff ff ff       	call   c0029e18 <SSE::~SSE()>
c0029e4b:	83 c4 10             	add    esp,0x10
c0029e4e:	83 ec 08             	sub    esp,0x8
c0029e51:	68 58 01 00 00       	push   0x158
c0029e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e5a:	e8 a8 8e fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029e5f:	83 c4 10             	add    esp,0x10
c0029e62:	83 c4 0c             	add    esp,0xc
c0029e65:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029e66 <x87::~x87()>:
c0029e66:	83 ec 0c             	sub    esp,0xc
c0029e69:	ba 9c e0 02 c0       	mov    edx,0xc002e09c
c0029e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e72:	89 10                	mov    DWORD PTR [eax],edx
c0029e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e78:	83 ec 0c             	sub    esp,0xc
c0029e7b:	50                   	push   eax
c0029e7c:	e8 f9 a8 fe ff       	call   c001477a <FPU::~FPU()>
c0029e81:	83 c4 10             	add    esp,0x10
c0029e84:	90                   	nop
c0029e85:	83 c4 0c             	add    esp,0xc
c0029e88:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029e8a <x87::~x87()>:
c0029e8a:	83 ec 0c             	sub    esp,0xc
c0029e8d:	83 ec 0c             	sub    esp,0xc
c0029e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e94:	e8 cd ff ff ff       	call   c0029e66 <x87::~x87()>
c0029e99:	83 c4 10             	add    esp,0x10
c0029e9c:	83 ec 08             	sub    esp,0x8
c0029e9f:	68 58 01 00 00       	push   0x158
c0029ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ea8:	e8 5a 8e fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029ead:	83 c4 10             	add    esp,0x10
c0029eb0:	83 c4 0c             	add    esp,0xc
c0029eb3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029eb4 <IOAPIC::~IOAPIC()>:
c0029eb4:	83 ec 0c             	sub    esp,0xc
c0029eb7:	ba f4 e1 02 c0       	mov    edx,0xc002e1f4
c0029ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ec0:	89 10                	mov    DWORD PTR [eax],edx
c0029ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ec6:	83 ec 0c             	sub    esp,0xc
c0029ec9:	50                   	push   eax
c0029eca:	e8 1f a2 fe ff       	call   c00140ee <Device::~Device()>
c0029ecf:	83 c4 10             	add    esp,0x10
c0029ed2:	90                   	nop
c0029ed3:	83 c4 0c             	add    esp,0xc
c0029ed6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029ed8 <IOAPIC::~IOAPIC()>:
c0029ed8:	83 ec 0c             	sub    esp,0xc
c0029edb:	83 ec 0c             	sub    esp,0xc
c0029ede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ee2:	e8 cd ff ff ff       	call   c0029eb4 <IOAPIC::~IOAPIC()>
c0029ee7:	83 c4 10             	add    esp,0x10
c0029eea:	83 ec 08             	sub    esp,0x8
c0029eed:	68 68 01 00 00       	push   0x168
c0029ef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ef6:	e8 0c 8e fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029efb:	83 c4 10             	add    esp,0x10
c0029efe:	83 c4 0c             	add    esp,0xc
c0029f01:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029f02 <APIC::~APIC()>:
c0029f02:	83 ec 0c             	sub    esp,0xc
c0029f05:	ba ac e1 02 c0       	mov    edx,0xc002e1ac
c0029f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f0e:	89 10                	mov    DWORD PTR [eax],edx
c0029f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f14:	83 ec 0c             	sub    esp,0xc
c0029f17:	50                   	push   eax
c0029f18:	e8 27 ad fe ff       	call   c0014c44 <InterruptController::~InterruptController()>
c0029f1d:	83 c4 10             	add    esp,0x10
c0029f20:	90                   	nop
c0029f21:	83 c4 0c             	add    esp,0xc
c0029f24:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029f26 <APIC::~APIC()>:
c0029f26:	83 ec 0c             	sub    esp,0xc
c0029f29:	83 ec 0c             	sub    esp,0xc
c0029f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f30:	e8 cd ff ff ff       	call   c0029f02 <APIC::~APIC()>
c0029f35:	83 c4 10             	add    esp,0x10
c0029f38:	83 ec 08             	sub    esp,0x8
c0029f3b:	68 58 21 00 00       	push   0x2158
c0029f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f44:	e8 be 8d fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029f49:	83 c4 10             	add    esp,0x10
c0029f4c:	83 c4 0c             	add    esp,0xc
c0029f4f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029f50 <PIC::~PIC()>:
c0029f50:	83 ec 0c             	sub    esp,0xc
c0029f53:	ba 44 e2 02 c0       	mov    edx,0xc002e244
c0029f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f5c:	89 10                	mov    DWORD PTR [eax],edx
c0029f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f62:	83 ec 0c             	sub    esp,0xc
c0029f65:	50                   	push   eax
c0029f66:	e8 d9 ac fe ff       	call   c0014c44 <InterruptController::~InterruptController()>
c0029f6b:	83 c4 10             	add    esp,0x10
c0029f6e:	90                   	nop
c0029f6f:	83 c4 0c             	add    esp,0xc
c0029f72:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029f74 <PIC::~PIC()>:
c0029f74:	83 ec 0c             	sub    esp,0xc
c0029f77:	83 ec 0c             	sub    esp,0xc
c0029f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f7e:	e8 cd ff ff ff       	call   c0029f50 <PIC::~PIC()>
c0029f83:	83 c4 10             	add    esp,0x10
c0029f86:	83 ec 08             	sub    esp,0x8
c0029f89:	68 58 21 00 00       	push   0x2158
c0029f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f92:	e8 70 8d fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029f97:	83 c4 10             	add    esp,0x10
c0029f9a:	83 c4 0c             	add    esp,0xc
c0029f9d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029f9e <APICTimer::~APICTimer()>:
c0029f9e:	83 ec 0c             	sub    esp,0xc
c0029fa1:	ba 98 e2 02 c0       	mov    edx,0xc002e298
c0029fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029faa:	89 10                	mov    DWORD PTR [eax],edx
c0029fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fb0:	83 ec 0c             	sub    esp,0xc
c0029fb3:	50                   	push   eax
c0029fb4:	e8 1b cd fe ff       	call   c0016cd4 <Timer::~Timer()>
c0029fb9:	83 c4 10             	add    esp,0x10
c0029fbc:	90                   	nop
c0029fbd:	83 c4 0c             	add    esp,0xc
c0029fc0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029fc2 <APICTimer::~APICTimer()>:
c0029fc2:	83 ec 0c             	sub    esp,0xc
c0029fc5:	83 ec 0c             	sub    esp,0xc
c0029fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029fcc:	e8 cd ff ff ff       	call   c0029f9e <APICTimer::~APICTimer()>
c0029fd1:	83 c4 10             	add    esp,0x10
c0029fd4:	83 ec 08             	sub    esp,0x8
c0029fd7:	68 60 01 00 00       	push   0x160
c0029fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029fe0:	e8 22 8d fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c0029fe5:	83 c4 10             	add    esp,0x10
c0029fe8:	83 c4 0c             	add    esp,0xc
c0029feb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029fec <PIT::~PIT()>:
c0029fec:	83 ec 0c             	sub    esp,0xc
c0029fef:	ba e8 e2 02 c0       	mov    edx,0xc002e2e8
c0029ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ff8:	89 10                	mov    DWORD PTR [eax],edx
c0029ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ffe:	83 ec 0c             	sub    esp,0xc
c002a001:	50                   	push   eax
c002a002:	e8 cd cc fe ff       	call   c0016cd4 <Timer::~Timer()>
c002a007:	83 c4 10             	add    esp,0x10
c002a00a:	90                   	nop
c002a00b:	83 c4 0c             	add    esp,0xc
c002a00e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002a010 <PIT::~PIT()>:
c002a010:	83 ec 0c             	sub    esp,0xc
c002a013:	83 ec 0c             	sub    esp,0xc
c002a016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a01a:	e8 cd ff ff ff       	call   c0029fec <PIT::~PIT()>
c002a01f:	83 c4 10             	add    esp,0x10
c002a022:	83 ec 08             	sub    esp,0x8
c002a025:	68 5c 01 00 00       	push   0x15c
c002a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a02e:	e8 d4 8c fe ff       	call   c0012d07 <operator delete(void*, unsigned long)>
c002a033:	83 c4 10             	add    esp,0x10
c002a036:	83 c4 0c             	add    esp,0xc
c002a039:	c3                   	ret    
