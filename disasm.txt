
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 85 02 00       	call   c0028588 <_init>
c0000025:	c3                   	ret    
c0000026:	bb dc 91 02 c0       	mov    ebx,0xc00291dc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb e8 91 02 c0    	cmp    ebx,0xc00291e8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 d3 02 c0       	mov    eax,0xc002d318
c0000049:	3d 18 d3 02 c0       	cmp    eax,0xc002d318
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 d3 02 c0       	push   0xc002d318
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 d3 02 c0       	mov    eax,0xc002d318
c0000075:	2d 18 d3 02 c0       	sub    eax,0xc002d318
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 d3 02 c0       	push   0xc002d318
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d948,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f0 91 02 c0       	mov    ebx,0xc00291f0
c00000bb:	81 eb ec 91 02 c0    	sub    ebx,0xc00291ec
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be ec 91 02 c0       	mov    esi,0xc00291ec
c00000ca:	a1 4c d9 02 c0       	mov    eax,ds:0xc002d94c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c d9 02 c0       	mov    ds:0xc002d94c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c d9 02 c0       	mov    eax,ds:0xc002d94c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 d3 02 c0       	push   0xc002d318
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 d9 02 c0 01 	mov    BYTE PTR ds:0xc002d948,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 d9 02 c0       	push   0xc002d950
c000012c:	68 18 d3 02 c0       	push   0xc002d318
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 33 d0 01 00       	call   c001d3d6 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 58 21 01 00       	call   c0012513 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 11 d0 01 00       	call   c001d3d6 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 b9 d4 01 00       	call   c001d89d <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 de da 01 00       	call   c001decb <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 90 dd 02 c0 	lgdtd  ds:0xc002dd90
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 c1 3e 01 00       	call   c00144a3 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 68 d9 02 c0       	mov    ds:0xc002d968,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 68 d9 02 c0    	mov    DWORD PTR ds:0xc002d968,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 00 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6e00],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 00 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e00],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 00 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6e00],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 00 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6e00],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 00 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e00],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 80 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d980
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 80 d9 02 c0    	mov    DWORD PTR ds:0xc002d980,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 84 d9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd267c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 84 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd267c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 80 d9 02 c0    	mov    DWORD PTR ds:0xc002d980,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ac d9 02 c0    	cmp    DWORD PTR ds:0xc002d9ac,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d bc d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d9bc
c0000e38:	c7 42 0c b4 d9 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d9b4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 bc d9 02 c0    	mov    DWORD PTR ds:0xc002d9bc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ac d9 02 c0    	mov    DWORD PTR ds:0xc002d9ac,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 80 d9 02 c0 02 	test   BYTE PTR ds:0xc002d980,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 80 d9 02 c0    	mov    edi,DWORD PTR ds:0xc002d980
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 84 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd267c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 84 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd267c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 b4 d9 02 c0 	lea    edx,[eax*8-0x3ffd264c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d c0 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c0
c00011ba:	81 fb b4 d9 02 c0    	cmp    ebx,0xc002d9b4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d b4 d9 02 c0       	cmp    eax,0xc002d9b4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d b0 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9b0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 bc d9 02 c0       	mov    ds:0xc002d9bc,eax
c00011f6:	a3 c0 d9 02 c0       	mov    ds:0xc002d9c0,eax
c00011fb:	a3 b0 d9 02 c0       	mov    ds:0xc002d9b0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 b4 d9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d9b4
c0001209:	c7 40 0c b4 d9 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d9b4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 c0 d9 02 c0       	mov    ds:0xc002d9c0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 b4 d9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d9b4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 78 d9 02 c0 	lea    ebp,[edx*4-0x3ffd2688]
c000125a:	8b 14 95 80 d9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2680]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 80 d9 02 c0 	lea    ecx,[edx*4-0x3ffd2680]
c0001275:	8b 14 95 80 d9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2680]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd b4 dc 02 c0 	or     DWORD PTR [edi*4-0x3ffd234c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 b4 d9 02 c0 	lea    eax,[eax*8-0x3ffd264c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d bc d9 02 c0    	mov    DWORD PTR ds:0xc002d9bc,ecx
c000132f:	89 0d c0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9c0,ecx
c0001335:	c7 41 08 b4 d9 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d9b4
c000133c:	c7 41 0c b4 d9 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d9b4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ac d9 02 c0 	lea    edx,[ecx*8-0x3ffd2654]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d b4 dc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd234c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d b4 dc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd234c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ac d9 02 c0 	lea    edx,[eax*4-0x3ffd2654]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d b4 dc 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd234c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d bc d9 02 c0    	mov    DWORD PTR ds:0xc002d9bc,edi
c0001402:	89 3d c0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9c0,edi
c0001408:	c7 47 08 b4 d9 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d9b4
c000140f:	c7 47 0c b4 d9 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d9b4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d b0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9b0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ac d9 02 c0       	mov    eax,ds:0xc002d9ac
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ac d9 02 c0    	mov    DWORD PTR ds:0xc002d9ac,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 80 d9 02 c0       	mov    edx,0xc002d980
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 80 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d980,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d d4 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dcd4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 d4 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dcd4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d d4 dc 02 c0    	mov    DWORD PTR ds:0xc002dcd4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ac d9 02 c0    	cmp    DWORD PTR ds:0xc002d9ac,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ac d9 02 c0    	mov    DWORD PTR ds:0xc002d9ac,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 80 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d980,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 dc dc 02 c0    	push   DWORD PTR ds:0xc002dcdc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 80 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d980,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 dc dc 02 c0       	mov    eax,ds:0xc002dcdc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ac d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d9ac,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ac d9 02 c0       	mov    eax,ds:0xc002d9ac
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 84 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd267c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 b4 d9 02 c0       	mov    eax,0xc002d9b4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ac dc 02 c0       	cmp    eax,0xc002dcac
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 e8 dc 02 c0       	mov    eax,ds:0xc002dce8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 d0 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dcd0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 e4 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dce4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 f4 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dcf4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 04 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cfc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 80 d9 02 c0       	mov    eax,ds:0xc002d980
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 80 d9 02 c0       	mov    ds:0xc002d980,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d c4 dc 02 c0    	mov    DWORD PTR ds:0xc002dcc4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d c8 dc 02 c0    	mov    DWORD PTR ds:0xc002dcc8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d cc dc 02 c0    	mov    DWORD PTR ds:0xc002dccc,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 d4 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dcd4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 20 f4 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0be0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 0a ed 01 00       	jmp    c00208fc <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 20 f4 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0be0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 3b ed 01 00       	jmp    c0020943 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 20 f4 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0be0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 63 ed 01 00       	jmp    c002098a <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 da 49 02 00       	call   c00268e4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 20 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6be0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 20 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6be0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 20 93 02 c0       	mov    edx,0xc0029320
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 40 94 02 c0       	mov    edx,0xc0029440
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 0c c2 02 c0       	mov    edx,0xc002c20c
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 4c 94 02 c0       	mov    edx,0xc002944c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 30 94 02 c0       	mov    edx,0xc0029430
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 20 dd 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd22e0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 00 dd 02 c0    	mov    ax,ds:0xc002dd00
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 00 dd 02 c0    	mov    ds:0xc002dd00,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 d7 37 02 00       	call   c00268e4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 52 94 02 c0       	mov    eax,0xc0029452
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad a0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c60]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 5b 94 02 c0       	mov    eax,0xc002945b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 20 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6be0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 a2 21 02 00       	call   c00268e4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 30 94 02 c0       	mov    edx,0xc0029430
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 20 93 02 c0       	mov    edx,0xc0029320
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 30 93 02 c0       	mov    edx,0xc0029330
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 20 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd22e0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 20 dd 02 c0 	mov    DWORD PTR [edx*4-0x3ffd22e0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 69 0b 02 00       	call   c00268e4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 4f 0b 02 00       	call   c00268e4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 77 93 02 c0       	mov    eax,0xc0029377
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 70 93 02 c0       	mov    eax,0xc0029370
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 20 dd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd22e0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 60 93 02 c0       	mov    esi,0xc0029360
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 92 f2 01 00       	call   c00268e4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 40 94 02 c0       	mov    edx,0xc0029440
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 40 93 02 c0       	mov    edx,0xc0029340
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 62 94 02 c0       	mov    edx,0xc0029462
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 6e 94 02 c0       	mov    edx,0xc002946e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 82 94 02 c0       	mov    edx,0xc0029482
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c a0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297a0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 a0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297a0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 a0 95 02 c0       	mov    eax,0xc00295a0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 e0 94 02 c0       	mov    eax,0xc00294e0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 a0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b60]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 e6 fb 01 00       	call   c00283b7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 a9 fb 01 00       	call   c0028399 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 7d fb 01 00       	call   c00283b7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 30 f2 01 00       	call   c0027abc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 b2 fc 01 00       	call   c0028550 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 f7 fa 01 00       	call   c00283b7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 39 fa 01 00       	call   c00283b7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 06 fa 01 00       	call   c0028399 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 f3 f8 01 00       	call   c00283b7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 bb f8 01 00       	call   c0028399 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 c7 f6 01 00       	call   c00283b7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 8c f6 01 00       	call   c0028399 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 00 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6300]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 9c f3 01 00       	call   c002814b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 1a ed 01 00       	call   c0027ae8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 d6 f5 01 00       	call   c00283bb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 c4 f6 01 00       	call   c00284df <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 ae ec 01 00       	call   c0027ae8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 59 f5 01 00       	call   c00283b5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 3a f5 01 00       	call   c00283b9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 d0 f6 01 00       	call   c0028570 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 7a f2 01 00       	call   c002814b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 f8 eb 01 00       	call   c0027ae8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 b4 f4 01 00       	call   c00283bb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 a2 f5 01 00       	call   c00284df <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 8c eb 01 00       	call   c0027ae8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 37 f4 01 00       	call   c00283b5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 17 f4 01 00       	call   c00283b9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 ac f5 01 00       	call   c0028570 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 52 f3 01 00       	call   c00283b7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 10 f3 01 00       	call   c0028399 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 f8 f2 01 00       	call   c00283b7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 6a f0 01 00       	call   c002814b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 6c e3 01 00       	call   c002746b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 cf e9 01 00       	call   c0027ae8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 21 f0 01 00       	call   c002814b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 27 e3 01 00       	call   c002746b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 f6 ef 01 00       	call   c002814b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 46 f2 01 00       	call   c00283b5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 23 e9 01 00       	call   c0027abc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 a5 f3 01 00       	call   c0028550 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 cc f1 01 00       	call   c0028399 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 c7 e8 01 00       	call   c0027abc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 45 ef 01 00       	call   c002814b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 c8 e8 01 00       	call   c0027ae8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 1a ef 01 00       	call   c002814b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 81 eb 01 00       	call   c0027dcc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 00 e2 01 00       	call   c002746b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 60 db 01 00       	call   c0026e00 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 37 f2 01 00       	call   c00284df <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 20 e8 01 00       	call   c0027ae8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 07 f2 01 00       	call   c00284df <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 79 e1 01 00       	call   c002746b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 b2 f0 01 00       	call   c00283bb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 9a ea 01 00       	call   c0027dcc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 20 e1 01 00       	call   c002746b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 0e f2 01 00       	call   c0028570 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 e0 ed 01 00       	call   c002814b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 37 e7 01 00       	call   c0027abc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 16 f0 01 00       	call   c00283b7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 af e0 01 00       	call   c002746b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 db e6 01 00       	call   c0027abc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 7d f1 01 00       	call   c0028570 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 2e ed 01 00       	call   c002814b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 ab e6 01 00       	call   c0027ae8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 fe ec 01 00       	call   c002814b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 04 e0 01 00       	call   c002746b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 d4 ec 01 00       	call   c002814b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 26 ef 01 00       	call   c00283b7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 fd e5 01 00       	call   c0027abc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 7f f0 01 00       	call   c0028550 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 a6 ee 01 00       	call   c0028399 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 a0 e5 01 00       	call   c0027abc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 1e ec 01 00       	call   c002814b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 a1 e5 01 00       	call   c0027ae8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 f3 eb 01 00       	call   c002814b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 5a e8 01 00       	call   c0027dcc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 d9 de 01 00       	call   c002746b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 29 d8 01 00       	call   c0026e00 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 00 ef 01 00       	call   c00284df <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 e9 e4 01 00       	call   c0027ae8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 d0 ee 01 00       	call   c00284df <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 42 de 01 00       	call   c002746b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 7b ed 01 00       	call   c00283bb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 62 e7 01 00       	call   c0027dcc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 e1 dd 01 00       	call   c002746b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 cf ee 01 00       	call   c0028570 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 a1 ea 01 00       	call   c002814b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 f8 e3 01 00       	call   c0027abc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 d7 ec 01 00       	call   c00283b7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 70 dd 01 00       	call   c002746b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 9c e3 01 00       	call   c0027abc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 11 ea 01 00       	call   c002814b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 17 dd 01 00       	call   c002746b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 60 9d 02 c0       	mov    eax,0xc0029d60
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 8c e8 01 00       	call   c002814b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 0a e2 01 00       	call   c0027ae8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 9c d4 01 00       	call   c0026e00 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 73 eb 01 00       	call   c00284df <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 5c e1 01 00       	call   c0027ae8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 3f eb 01 00       	call   c00284df <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 b1 da 01 00       	call   c002746b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 11 eb 01 00       	call   c00284df <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 00 e1 01 00       	call   c0027ae8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 69 da 01 00       	call   c002746b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 8a d3 01 00       	call   c0026e00 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 61 ea 01 00       	call   c00284df <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 4a e0 01 00       	call   c0027ae8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 2d ea 01 00       	call   c00284df <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 9f d9 01 00       	call   c002746b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 ff e9 01 00       	call   c00284df <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 ee df 01 00       	call   c0027ae8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 57 d9 01 00       	call   c002746b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 35 d9 01 00       	call   c002746b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 11 d2 01 00       	call   c0026e00 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 e8 e8 01 00       	call   c00284df <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 d1 de 01 00       	call   c0027ae8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 b4 e8 01 00       	call   c00284df <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 26 d8 01 00       	call   c002746b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 86 e8 01 00       	call   c00284df <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 6f de 01 00       	call   c0027ae8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 d8 d7 01 00       	call   c002746b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 38 e8 01 00       	call   c00284df <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 21 de 01 00       	call   c0027ae8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 8a d7 01 00       	call   c002746b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 9f d0 01 00       	call   c0026e00 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 76 e7 01 00       	call   c00284df <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 5f dd 01 00       	call   c0027ae8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 46 e7 01 00       	call   c00284df <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 b8 d6 01 00       	call   c002746b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 18 e7 01 00       	call   c00284df <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 01 dd 01 00       	call   c0027ae8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 6a d6 01 00       	call   c002746b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ca e6 01 00       	call   c00284df <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 b3 dc 01 00       	call   c0027ae8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 1c d6 01 00       	call   c002746b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 f0 d5 01 00       	call   c002746b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 4d dc 01 00       	call   c0027ae8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 09 e5 01 00       	call   c00283bb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 98 d5 01 00       	call   c002746b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 f5 db 01 00       	call   c0027ae8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 b1 e4 01 00       	call   c00283bb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 2b ce 01 00       	call   c0026e00 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 02 e5 01 00       	call   c00284df <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 eb da 01 00       	call   c0027ae8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 ce e4 01 00       	call   c00284df <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 40 d4 01 00       	call   c002746b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 a0 e4 01 00       	call   c00284df <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 89 da 01 00       	call   c0027ae8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 f2 d3 01 00       	call   c002746b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 52 e4 01 00       	call   c00284df <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 3b da 01 00       	call   c0027ae8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 a4 d3 01 00       	call   c002746b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 04 e4 01 00       	call   c00284df <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 ed d9 01 00       	call   c0027ae8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 56 d3 01 00       	call   c002746b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 b6 e3 01 00       	call   c00284df <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 9f d9 01 00       	call   c0027ae8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 08 d3 01 00       	call   c002746b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 0a cc 01 00       	call   c0026e00 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 e1 e2 01 00       	call   c00284df <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ca d8 01 00       	call   c0027ae8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 b1 e2 01 00       	call   c00284df <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 23 d2 01 00       	call   c002746b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 83 e2 01 00       	call   c00284df <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 6c d8 01 00       	call   c0027ae8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 d5 d1 01 00       	call   c002746b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 35 e2 01 00       	call   c00284df <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 1e d8 01 00       	call   c0027ae8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 87 d1 01 00       	call   c002746b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 e7 e1 01 00       	call   c00284df <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 d0 d7 01 00       	call   c0027ae8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 39 d1 01 00       	call   c002746b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 99 e1 01 00       	call   c00284df <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 82 d7 01 00       	call   c0027ae8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 eb d0 01 00       	call   c002746b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 bf d0 01 00       	call   c002746b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 1c d7 01 00       	call   c0027ae8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 d8 df 01 00       	call   c00283bb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 67 d0 01 00       	call   c002746b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 c4 d6 01 00       	call   c0027ae8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 80 df 01 00       	call   c00283bb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 0e d0 01 00       	call   c002746b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 6b d6 01 00       	call   c0027ae8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 27 df 01 00       	call   c00283bb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 b5 cf 01 00       	call   c002746b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 12 d6 01 00       	call   c0027ae8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 ce de 01 00       	call   c00283bb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 2c c8 01 00       	call   c0026e00 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 03 df 01 00       	call   c00284df <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 ec d4 01 00       	call   c0027ae8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 cf de 01 00       	call   c00284df <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 41 ce 01 00       	call   c002746b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 a1 de 01 00       	call   c00284df <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 8a d4 01 00       	call   c0027ae8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 f3 cd 01 00       	call   c002746b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 53 de 01 00       	call   c00284df <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 3c d4 01 00       	call   c0027ae8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 a5 cd 01 00       	call   c002746b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 05 de 01 00       	call   c00284df <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 ee d3 01 00       	call   c0027ae8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 57 cd 01 00       	call   c002746b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 b7 dd 01 00       	call   c00284df <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 a0 d3 01 00       	call   c0027ae8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 09 cd 01 00       	call   c002746b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 69 dd 01 00       	call   c00284df <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 52 d3 01 00       	call   c0027ae8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 b8 cc 01 00       	call   c002746b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 18 dd 01 00       	call   c00284df <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 01 d3 01 00       	call   c0027ae8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 6a cc 01 00       	call   c002746b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 64 c5 01 00       	call   c0026e00 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 3b dc 01 00       	call   c00284df <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 24 d2 01 00       	call   c0027ae8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 04 dc 01 00       	call   c00284df <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 76 cb 01 00       	call   c002746b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 d6 db 01 00       	call   c00284df <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 bf d1 01 00       	call   c0027ae8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 28 cb 01 00       	call   c002746b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 88 db 01 00       	call   c00284df <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 71 d1 01 00       	call   c0027ae8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 da ca 01 00       	call   c002746b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 3a db 01 00       	call   c00284df <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 23 d1 01 00       	call   c0027ae8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 8c ca 01 00       	call   c002746b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 ec da 01 00       	call   c00284df <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 d5 d0 01 00       	call   c0027ae8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 3e ca 01 00       	call   c002746b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 9e da 01 00       	call   c00284df <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 87 d0 01 00       	call   c0027ae8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 ed c9 01 00       	call   c002746b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 4d da 01 00       	call   c00284df <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 36 d0 01 00       	call   c0027ae8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 a5 c9 01 00       	call   c002746b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 7e c9 01 00       	call   c002746b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 dc cf 01 00       	call   c0027ae8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 98 d8 01 00       	call   c00283bb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 27 c9 01 00       	call   c002746b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 85 cf 01 00       	call   c0027ae8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 41 d8 01 00       	call   c00283bb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 cf c8 01 00       	call   c002746b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 2d cf 01 00       	call   c0027ae8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 e9 d7 01 00       	call   c00283bb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 77 c8 01 00       	call   c002746b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 d5 ce 01 00       	call   c0027ae8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 91 d7 01 00       	call   c00283bb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 1f c8 01 00       	call   c002746b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 7d ce 01 00       	call   c0027ae8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 39 d7 01 00       	call   c00283bb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 cd c7 01 00       	call   c002746b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 2b ce 01 00       	call   c0027ae8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 e7 d6 01 00       	call   c00283bb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 fb bf 01 00       	call   c0026e00 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 d2 d6 01 00       	call   c00284df <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 bb cc 01 00       	call   c0027ae8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 a2 d6 01 00       	call   c00284df <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 14 c6 01 00       	call   c002746b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 a4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd625c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 48 d6 01 00       	call   c00284df <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 31 cc 01 00       	call   c0027ae8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 9c c5 01 00       	call   c002746b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 e9 d5 01 00       	call   c00284df <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 d2 cb 01 00       	call   c0027ae8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 3d c5 01 00       	call   c002746b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 8a d5 01 00       	call   c00284df <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 73 cb 01 00       	call   c0027ae8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 de c4 01 00       	call   c002746b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 2b d5 01 00       	call   c00284df <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 14 cb 01 00       	call   c0027ae8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 7f c4 01 00       	call   c002746b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 cc d4 01 00       	call   c00284df <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 b5 ca 01 00       	call   c0027ae8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 20 c4 01 00       	call   c002746b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 6d d4 01 00       	call   c00284df <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 56 ca 01 00       	call   c0027ae8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 c1 c3 01 00       	call   c002746b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 0e d4 01 00       	call   c00284df <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 f7 c9 01 00       	call   c0027ae8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 62 c3 01 00       	call   c002746b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 af d3 01 00       	call   c00284df <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 98 c9 01 00       	call   c0027ae8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 03 c3 01 00       	call   c002746b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 0d bc 01 00       	call   c0026e00 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 e4 d2 01 00       	call   c00284df <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 cd c8 01 00       	call   c0027ae8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 b4 d2 01 00       	call   c00284df <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 26 c2 01 00       	call   c002746b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 c0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6240]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 59 d2 01 00       	call   c00284df <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 42 c8 01 00       	call   c0027ae8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 ad c1 01 00       	call   c002746b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 f9 d1 01 00       	call   c00284df <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 e2 c7 01 00       	call   c0027ae8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 4d c1 01 00       	call   c002746b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 99 d1 01 00       	call   c00284df <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 82 c7 01 00       	call   c0027ae8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 ed c0 01 00       	call   c002746b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 39 d1 01 00       	call   c00284df <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 22 c7 01 00       	call   c0027ae8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 8d c0 01 00       	call   c002746b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 d9 d0 01 00       	call   c00284df <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 c2 c6 01 00       	call   c0027ae8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 2d c0 01 00       	call   c002746b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 79 d0 01 00       	call   c00284df <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 62 c6 01 00       	call   c0027ae8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 cd bf 01 00       	call   c002746b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 19 d0 01 00       	call   c00284df <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 02 c6 01 00       	call   c0027ae8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 6d bf 01 00       	call   c002746b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 b9 cf 01 00       	call   c00284df <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 a2 c5 01 00       	call   c0027ae8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 0d bf 01 00       	call   c002746b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 dc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6224]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 b2 be 01 00       	call   c002746b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 0f c5 01 00       	call   c0027ae8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 cb cd 01 00       	call   c00283bb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 55 be 01 00       	call   c002746b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 b2 c4 01 00       	call   c0027ae8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 6e cd 01 00       	call   c00283bb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 f8 bd 01 00       	call   c002746b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 55 c4 01 00       	call   c0027ae8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 11 cd 01 00       	call   c00283bb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 9b bd 01 00       	call   c002746b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 f8 c3 01 00       	call   c0027ae8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 b4 cc 01 00       	call   c00283bb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 3e bd 01 00       	call   c002746b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 9b c3 01 00       	call   c0027ae8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 57 cc 01 00       	call   c00283bb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 e1 bc 01 00       	call   c002746b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 3e c3 01 00       	call   c0027ae8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 fa cb 01 00       	call   c00283bb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 84 bc 01 00       	call   c002746b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 e1 c2 01 00       	call   c0027ae8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 9d cb 01 00       	call   c00283bb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 27 bc 01 00       	call   c002746b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 84 c2 01 00       	call   c0027ae8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 40 cb 01 00       	call   c00283bb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 3c c2 01 00       	call   c0027ae8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 b4 cc 01 00       	jmp    c0028570 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 1e c9 01 00       	call   c00283b7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 dc c8 01 00       	call   c0028399 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 73 c6 01 00       	call   c002814b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 74 b9 01 00       	call   c002746b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 43 c6 01 00       	call   c002814b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 aa c2 01 00       	call   c0027dcc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 49 c8 01 00       	call   c0028399 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 4c c8 01 00       	call   c00283b7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 1f c8 01 00       	call   c00283b7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 18 c2 01 00       	call   c0027dcc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 a2 c9 01 00       	call   c0028570 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 7d c9 01 00       	call   c0028570 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 4f c5 01 00       	call   c002814b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 a6 be 01 00       	call   c0027abc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 85 c7 01 00       	call   c00283b7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 1e b8 01 00       	call   c002746b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 42 be 01 00       	call   c0027abc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 e4 c8 01 00       	call   c0028570 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 1c c1 01 00       	call   c0027dcc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 99 b7 01 00       	call   c002746b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 c5 c3 01 00       	call   c002814b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 c5 b6 01 00       	call   c002746b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 a5 b6 01 00       	call   c002746b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 75 c3 01 00       	call   c002814b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 c5 c5 01 00       	call   c00283b5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 a4 bc 01 00       	call   c0027abc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 26 c7 01 00       	call   c0028550 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 4d c5 01 00       	call   c0028399 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 4b bc 01 00       	call   c0027abc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 c9 c2 01 00       	call   c002814b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 4c bc 01 00       	call   c0027ae8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 9e c2 01 00       	call   c002814b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 05 bf 01 00       	call   c0027dcc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 84 b5 01 00       	call   c002746b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 4e c2 01 00       	call   c002814b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 9a c4 01 00       	call   c00283b7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 8f bb 01 00       	call   c0027ae8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 61 bb 01 00       	call   c0027ae8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 9a c1 01 00       	call   c002814b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 fe bd 01 00       	call   c0027dcc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 c6 bd 01 00       	call   c0027dcc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 45 b4 01 00       	call   c002746b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 32 c5 01 00       	call   c0028570 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 04 c1 01 00       	call   c002814b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 5b ba 01 00       	call   c0027abc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 3a c3 01 00       	call   c00283b7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 d2 b3 01 00       	call   c002746b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 f6 b9 01 00       	call   c0027abc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 98 c4 01 00       	call   c0028570 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 59 c2 01 00       	call   c00283b7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 17 c2 01 00       	call   c0028399 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 ae bf 01 00       	call   c002814b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 af b2 01 00       	call   c002746b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 7e bf 01 00       	call   c002814b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 e5 bb 01 00       	call   c0027dcc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 84 c1 01 00       	call   c0028399 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 87 c1 01 00       	call   c00283b7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 5a c1 01 00       	call   c00283b7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 53 bb 01 00       	call   c0027dcc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 dd c2 01 00       	call   c0028570 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 b8 c2 01 00       	call   c0028570 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 8a be 01 00       	call   c002814b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 e1 b7 01 00       	call   c0027abc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 c0 c0 01 00       	call   c00283b7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 59 b1 01 00       	call   c002746b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 7d b7 01 00       	call   c0027abc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 1f c2 01 00       	call   c0028570 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 57 ba 01 00       	call   c0027dcc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 d4 b0 01 00       	call   c002746b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 ff bc 01 00       	call   c002814b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 ff af 01 00       	call   c002746b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 df af 01 00       	call   c002746b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 af bc 01 00       	call   c002814b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 ff be 01 00       	call   c00283b5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 dd b5 01 00       	call   c0027abc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 5f c0 01 00       	call   c0028550 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 86 be 01 00       	call   c0028399 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 83 b5 01 00       	call   c0027abc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 01 bc 01 00       	call   c002814b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 84 b5 01 00       	call   c0027ae8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 d6 bb 01 00       	call   c002814b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 3d b8 01 00       	call   c0027dcc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 bc ae 01 00       	call   c002746b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 86 bb 01 00       	call   c002814b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 d2 bd 01 00       	call   c00283b7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 c7 b4 01 00       	call   c0027ae8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 99 b4 01 00       	call   c0027ae8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 d0 ba 01 00       	call   c002814b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 34 b7 01 00       	call   c0027dcc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 01 b7 01 00       	call   c0027dcc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 80 ad 01 00       	call   c002746b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 6d be 01 00       	call   c0028570 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 3f ba 01 00       	call   c002814b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 96 b3 01 00       	call   c0027abc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 75 bc 01 00       	call   c00283b7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 0d ad 01 00       	call   c002746b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 31 b3 01 00       	call   c0027abc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 d3 bd 01 00       	call   c0028570 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 94 bb 01 00       	call   c00283b7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 52 bb 01 00       	call   c0028399 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 e9 b8 01 00       	call   c002814b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 ea ab 01 00       	call   c002746b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 b9 b8 01 00       	call   c002814b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 20 b5 01 00       	call   c0027dcc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 bf ba 01 00       	call   c0028399 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 c2 ba 01 00       	call   c00283b7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 95 ba 01 00       	call   c00283b7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 8e b4 01 00       	call   c0027dcc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 18 bc 01 00       	call   c0028570 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 f3 bb 01 00       	call   c0028570 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 c5 b7 01 00       	call   c002814b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 1c b1 01 00       	call   c0027abc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 fb b9 01 00       	call   c00283b7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 94 aa 01 00       	call   c002746b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 b8 b0 01 00       	call   c0027abc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 5a bb 01 00       	call   c0028570 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 92 b3 01 00       	call   c0027dcc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 0f aa 01 00       	call   c002746b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 3a b6 01 00       	call   c002814b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 3a a9 01 00       	call   c002746b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 1a a9 01 00       	call   c002746b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 ea b5 01 00       	call   c002814b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 3a b8 01 00       	call   c00283b5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 18 af 01 00       	call   c0027abc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 9a b9 01 00       	call   c0028550 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 c1 b7 01 00       	call   c0028399 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 be ae 01 00       	call   c0027abc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 3c b5 01 00       	call   c002814b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 bf ae 01 00       	call   c0027ae8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 11 b5 01 00       	call   c002814b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 78 b1 01 00       	call   c0027dcc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 f7 a7 01 00       	call   c002746b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 c1 b4 01 00       	call   c002814b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 0d b7 01 00       	call   c00283b7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 02 ae 01 00       	call   c0027ae8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 d4 ad 01 00       	call   c0027ae8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 0b b4 01 00       	call   c002814b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 6f b0 01 00       	call   c0027dcc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 3c b0 01 00       	call   c0027dcc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 bb a6 01 00       	call   c002746b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 a8 b7 01 00       	call   c0028570 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 7a b3 01 00       	call   c002814b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 d1 ac 01 00       	call   c0027abc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 b0 b5 01 00       	call   c00283b7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 48 a6 01 00       	call   c002746b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 6c ac 01 00       	call   c0027abc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 0e b7 01 00       	call   c0028570 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 cf b4 01 00       	call   c00283b7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 8d b4 01 00       	call   c0028399 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 24 b2 01 00       	call   c002814b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 25 a5 01 00       	call   c002746b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 f4 b1 01 00       	call   c002814b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 5b ae 01 00       	call   c0027dcc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 fa b3 01 00       	call   c0028399 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 fd b3 01 00       	call   c00283b7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 d0 b3 01 00       	call   c00283b7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 c9 ad 01 00       	call   c0027dcc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 53 b5 01 00       	call   c0028570 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 2e b5 01 00       	call   c0028570 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 00 b1 01 00       	call   c002814b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 57 aa 01 00       	call   c0027abc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 36 b3 01 00       	call   c00283b7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 cf a3 01 00       	call   c002746b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 f3 a9 01 00       	call   c0027abc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 95 b4 01 00       	call   c0028570 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 cd ac 01 00       	call   c0027dcc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 4a a3 01 00       	call   c002746b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 75 af 01 00       	call   c002814b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 75 a2 01 00       	call   c002746b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 55 a2 01 00       	call   c002746b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 25 af 01 00       	call   c002814b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 75 b1 01 00       	call   c00283b5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 53 a8 01 00       	call   c0027abc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 d5 b2 01 00       	call   c0028550 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 fc b0 01 00       	call   c0028399 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 f9 a7 01 00       	call   c0027abc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 77 ae 01 00       	call   c002814b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 fa a7 01 00       	call   c0027ae8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 4c ae 01 00       	call   c002814b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 b3 aa 01 00       	call   c0027dcc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 32 a1 01 00       	call   c002746b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 fc ad 01 00       	call   c002814b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 48 b0 01 00       	call   c00283b7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 3d a7 01 00       	call   c0027ae8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 0f a7 01 00       	call   c0027ae8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 46 ad 01 00       	call   c002814b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 aa a9 01 00       	call   c0027dcc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 77 a9 01 00       	call   c0027dcc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 f6 9f 01 00       	call   c002746b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 e3 b0 01 00       	call   c0028570 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 b5 ac 01 00       	call   c002814b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 0c a6 01 00       	call   c0027abc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 eb ae 01 00       	call   c00283b7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 83 9f 01 00       	call   c002746b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 a7 a5 01 00       	call   c0027abc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 49 b0 01 00       	call   c0028570 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 07 ae 01 00       	call   c00283b7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 c5 ad 01 00       	call   c0028399 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 5c ab 01 00       	call   c002814b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 5d 9e 01 00       	call   c002746b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 2c ab 01 00       	call   c002814b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 93 a7 01 00       	call   c0027dcc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 32 ad 01 00       	call   c0028399 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 35 ad 01 00       	call   c00283b7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 08 ad 01 00       	call   c00283b7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 01 a7 01 00       	call   c0027dcc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 8b ae 01 00       	call   c0028570 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 62 ae 01 00       	call   c0028570 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 34 aa 01 00       	call   c002814b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 8b a3 01 00       	call   c0027abc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 6a ac 01 00       	call   c00283b7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 03 9d 01 00       	call   c002746b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 2b a3 01 00       	call   c0027abc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 cd ad 01 00       	call   c0028570 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 06 a6 01 00       	call   c0027dcc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 83 9c 01 00       	call   c002746b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 af a8 01 00       	call   c002814b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 af 9b 01 00       	call   c002746b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 8f 9b 01 00       	call   c002746b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 5f a8 01 00       	call   c002814b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 93 aa 01 00       	call   c0028399 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 8a a1 01 00       	call   c0027abc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 0c ac 01 00       	call   c0028550 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 33 aa 01 00       	call   c0028399 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 2d a1 01 00       	call   c0027abc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 ab a7 01 00       	call   c002814b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 2e a1 01 00       	call   c0027ae8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 80 a7 01 00       	call   c002814b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 e7 a3 01 00       	call   c0027dcc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 66 9a 01 00       	call   c002746b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 30 a7 01 00       	call   c002814b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 7c a9 01 00       	call   c00283b7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 71 a0 01 00       	call   c0027ae8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 43 a0 01 00       	call   c0027ae8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 87 a6 01 00       	call   c002814b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 ee a2 01 00       	call   c0027dcc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 d7 9f 01 00       	call   c0027ae8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 93 a8 01 00       	call   c00283bb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 86 a2 01 00       	call   c0027dcc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 05 99 01 00       	call   c002746b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 f2 a9 01 00       	call   c0028570 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 c4 a5 01 00       	call   c002814b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 1b 9f 01 00       	call   c0027abc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 fa a7 01 00       	call   c00283b7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 92 98 01 00       	call   c002746b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ba 9e 01 00       	call   c0027abc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 5c a9 01 00       	call   c0028570 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 04 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61fc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 f8 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6208]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 0f a6 01 00       	call   c00283b7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 cd a5 01 00       	call   c0028399 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 b9 a5 01 00       	call   c00283b7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 2b a3 01 00       	call   c002814b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 a9 9c 01 00       	call   c0027ae8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 fb a2 01 00       	call   c002814b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 01 96 01 00       	call   c002746b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 d0 a2 01 00       	call   c002814b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 20 a5 01 00       	call   c00283b5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 01 9c 01 00       	call   c0027abc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 83 a6 01 00       	call   c0028550 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 aa a4 01 00       	call   c0028399 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 a9 9b 01 00       	call   c0027abc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 27 a2 01 00       	call   c002814b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 aa 9b 01 00       	call   c0027ae8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 fc a1 01 00       	call   c002814b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 63 9e 01 00       	call   c0027dcc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 e2 94 01 00       	call   c002746b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 0a 9e 01 00       	call   c0027dcc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 90 94 01 00       	call   c002746b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 7e a5 01 00       	call   c0028570 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 50 a1 01 00       	call   c002814b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 a7 9a 01 00       	call   c0027abc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 86 a3 01 00       	call   c00283b7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 1f 94 01 00       	call   c002746b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 4b 9a 01 00       	call   c0027abc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 ed a4 01 00       	call   c0028570 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 9a a0 01 00       	call   c002814b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 17 9a 01 00       	call   c0027ae8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 68 a0 01 00       	call   c002814b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 6e 93 01 00       	call   c002746b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 3e a0 01 00       	call   c002814b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 92 a2 01 00       	call   c00283b9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 6b 99 01 00       	call   c0027abc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 ed a3 01 00       	call   c0028550 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 14 a2 01 00       	call   c0028399 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 12 99 01 00       	call   c0027abc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 90 9f 01 00       	call   c002814b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 13 99 01 00       	call   c0027ae8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 65 9f 01 00       	call   c002814b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 cc 9b 01 00       	call   c0027dcc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 4b 92 01 00       	call   c002746b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 67 9b 01 00       	call   c0027dcc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 e6 91 01 00       	call   c002746b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 d4 a2 01 00       	call   c0028570 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 a6 9e 01 00       	call   c002814b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 fd 97 01 00       	call   c0027abc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 dc a0 01 00       	call   c00283b7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 75 91 01 00       	call   c002746b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 a1 97 01 00       	call   c0027abc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 12 9e 01 00       	call   c002814b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 18 91 01 00       	call   c002746b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 1e 9f 02 c0       	mov    eax,0xc0029f1e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 2f 9f 02 c0       	mov    eax,0xc0029f2f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c000e4e3:	ff 05 84 f2 02 c0    	inc    DWORD PTR ds:0xc002f284
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 84 f2 02 c0       	mov    ds:0xc002f284,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 80 f2 02 c0 00 	cmp    DWORD PTR ds:0xc002f280,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c000e50d:	e8 f9 f5 00 00       	call   c001db0b <schedule()>
c000e512:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000e517:	48                   	dec    eax
c000e518:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 f0 de 02 c0       	mov    eax,ds:0xc002def0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 66 9f 02 c0       	push   0xc0029f66
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 88 dd 02 c0       	mov    eax,0xc002dd88
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 6f 9f 02 c0       	push   0xc0029f6f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 e4 68 02 c0       	mov    eax,0xc00268e4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 79 9f 02 c0       	push   0xc0029f79
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 18 66 02 c0       	mov    eax,0xc0026618
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 82 9f 02 c0       	push   0xc0029f82
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 e4 69 02 c0       	mov    eax,0xc00269e4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 8c 9f 02 c0       	push   0xc0029f8c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 64 67 02 c0       	mov    eax,0xc0026764
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 95 9f 02 c0       	push   0xc0029f95
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 8c dd 02 c0       	mov    eax,0xc002dd8c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 a2 9f 02 c0       	push   0xc0029fa2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 8d dd 02 c0       	mov    eax,0xc002dd8d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 f3 56 00 00       	call   c0013d60 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 af 9f 02 c0       	push   0xc0029faf
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c000e6be:	68 c8 9f 02 c0       	push   0xc0029fc8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 23 f0 00 00       	call   c001d6ee <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 06 f2 00 00       	call   c001d8e6 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 d9 e2 01 c0       	push   0xc001e2d9
c000e6e9:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c000e6ef:	e8 f2 f1 00 00       	call   c001d8e6 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 68 f2 02 c0       	mov    ds:0xc002f268,eax
c000e6fc:	68 ac a0 02 c0       	push   0xc002a0ac
c000e701:	c6 05 8d dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd8d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 73 ff 00 00       	call   c001e685 <Vm::initialise8086()>
c000e712:	e8 11 44 00 00       	call   c0012b28 <Fs::initVFS()>
c000e717:	c7 04 24 d5 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fd5
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ac a0 02 c0       	push   0xc002a0ac
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 2a d8 00 00       	call   c001bf76 <Sys::loadSyscalls()>
c000e74c:	e8 1f b7 00 00       	call   c0019e70 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 ef 9f 02 c0       	push   0xc0029fef
c000e75b:	68 f8 9f 02 c0       	push   0xc0029ff8
c000e760:	e8 d0 c5 00 00       	call   c001ad35 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 ab 4e 00 00       	call   c0013618 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 d0 a0 02 c0 	mov    DWORD PTR [esp],0xc002a0d0
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 96 55 00 00       	call   c0013d20 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 00 a0 02 c0 	mov    DWORD PTR [esp],0xc002a000
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 3d b2 00 00       	call   c00199d8 <Krnl::startCPUs()>
c000e79b:	c7 04 24 1a a0 02 c0 	mov    DWORD PTR [esp],0xc002a01a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 88 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd88
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 2b a0 02 c0       	push   0xc002a02b
c000e7b6:	e8 8b e9 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 b3 eb 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 10 f5 00 00       	call   c001dce1 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 47 a0 02 c0       	push   0xc002a047
c000e7e5:	50                   	push   eax
c000e7e6:	e8 ef 55 00 00       	call   c0013dda <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 1c a1 02 c0       	mov    edx,0xc002a11c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 a1 dd 02 c0 04 	test   BYTE PTR ds:0xc002dda1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 27 7c 01 00       	call   c00265a6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 b0 9f 00 00       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 89 9f 00 00       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 67 9f 00 00       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 45 9f 00 00       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 a0 dd 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002dda0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 53 9e 00 00       	call   c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 2e 9e 00 00       	call   c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 91 7a 01 00       	call   c0026560 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 4e 7a 01 00       	call   c0026540 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 4a 9e 00 00       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 50 a0 02 c0       	push   0xc002a050
c000eb62:	e8 12 b4 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 56 a0 02 c0       	push   0xc002a056
c000eb9a:	e8 da b3 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 f0 a0 02 c0       	push   0xc002a0f0
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 a0 dd 02 c0 04 	test   BYTE PTR ds:0xc002dda0,0x4
c000ec03:	0f 94 05 c0 cc 02 c0 	sete   BYTE PTR ds:0xc002ccc0
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 c5 8f 00 00       	call   c0017bde <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 ae 4f 00 00       	call   c0013bd6 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 00 a0 02 c0 	mov    DWORD PTR [esp],0xc002a000
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 c6 9d 00 00       	call   c0018a22 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 6b 4f 00 00       	call   c0013bd6 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 e7 54 00 00       	call   c001416e <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 3b 4f 00 00       	call   c0013bd6 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 5c a0 02 c0       	push   0xc002a05c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 3f ed 00 00       	call   c001da08 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 77 a0 02 c0       	push   0xc002a077
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 86 3a 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 88 a0 02 c0       	push   0xc002a088
c000ed34:	e8 40 b2 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 95 a0 02 c0       	push   0xc002a095
c000ed49:	e8 2b b2 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 9f a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a09f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 14 b2 00 00       	jmp    c0019f79 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 92 dd 02 c0       	mov    ds:0xc002dd92,eax
c000ee21:	66 89 15 90 dd 02 c0 	mov    WORD PTR ds:0xc002dd90,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000ef38:	48                   	dec    eax
c000ef39:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 88 dd 02 c0    	push   DWORD PTR ds:0xc002dd88
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 61 96 01 00       	call   c00285f0 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 58 96 01 00       	call   c00285f0 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 98 dd 02 c0 ff 07 	mov    WORD PTR ds:0xc002dd98,0x7ff
c000f085:	a3 9a dd 02 c0       	mov    ds:0xc002dd9a,eax
c000f08a:	0f 01 1d 98 dd 02 c0 	lidtd  ds:0xc002dd98
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 f0 de 02 c0    	push   DWORD PTR ds:0xc002def0
c000f37c:	e8 f3 27 00 00       	call   c0011b74 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c7 17 00 00       	call   c0010b66 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f8 17 00 00       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 88 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd88
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 40 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb40
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 40 cb 02 c0       	mov    eax,ds:0xc002cb40
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 40 a1 02 c0       	push   0xc002a140
c000f455:	e8 43 33 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 40 cb 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002cb40,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d f0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002def0
c000f481:	8b 2d 40 cb 02 c0    	mov    ebp,DWORD PTR ds:0xc002cb40
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 d9 25 00 00       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 40 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb40
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 70 a1 02 c0       	push   0xc002a170
c000f50d:	e8 67 aa 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 75 a1 02 c0       	push   0xc002a175
c000f523:	e8 51 aa 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000f543:	48                   	dec    eax
c000f544:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 f0 de 02 c0    	push   DWORD PTR ds:0xc002def0
c000f561:	e8 0e 26 00 00       	call   c0011b74 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 f0 de 02 c0    	push   DWORD PTR ds:0xc002def0
c000f577:	e8 a2 22 00 00       	call   c001181e <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 7c a1 02 c0       	push   0xc002a17c
c000f6a4:	e8 f4 30 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 60 cb 02 c0 	movzx  eax,BYTE PTR ds:0xc002cb60
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 60 cb 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd34a0]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 96 cb 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd346a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 95 cb 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd346b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 60 cb 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd34a0]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 94 a1 02 c0       	push   0xc002a194
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 a0 dd 02 c0       	mov    ds:0xc002dda0,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 83 1c 00 00       	call   c00113de <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 e0 1e 00 00       	call   c0011646 <VAS::VAS()>
c000f766:	89 1d f0 de 02 c0    	mov    DWORD PTR ds:0xc002def0,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 88 dd 02 c0    	mov    DWORD PTR ds:0xc002dd88,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 54 21 00 00       	call   c00118f6 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 b3 a1 02 c0       	push   0xc002a1b3
c000f7b9:	e8 df 2f 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba e0 dd 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2220],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be e0 dd 02 c0       	mov    esi,0xc002dde0
c000f826:	8d 93 e0 dd 02 c0    	lea    edx,[ebx-0x3ffd2220]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 cc a1 02 c0       	push   0xc002a1cc
c000f843:	e8 55 2f 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 e3 a1 02 c0       	push   0xc002a1e3
c000f87f:	e8 19 2f 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 e0 dd 02 c0    	lea    eax,[edx-0x3ffd2220]
c000f8b8:	8d 94 11 e0 dd 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2220]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 a4 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cca4
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 a4 cc 02 c0    	add    eax,DWORD PTR ds:0xc002cca4
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 a4 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cca4
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 f9 a1 02 c0       	push   0xc002a1f9
c000f932:	e8 66 2e 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d d0 dd 02 c0    	dec    DWORD PTR ds:0xc002ddd0
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 0c a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a20c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 fa a5 00 00       	jmp    c0019f79 <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 c4 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002ddc4
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d c4 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc4,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 c4 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ddc4,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 40 a2 02 c0       	push   0xc002a240
c000f9da:	e8 be 2d 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 39 2a 00 00       	call   c001242c <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 58 a2 02 c0       	push   0xc002a258
c000fa16:	e8 5e a5 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d c4 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc4
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 d0 dd 02 c0       	mov    eax,ds:0xc002ddd0
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 c4 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddc4
c000fa45:	a3 d0 dd 02 c0       	mov    ds:0xc002ddd0,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 d4 dd 02 c0    	push   DWORD PTR ds:0xc002ddd4
c000fa54:	50                   	push   eax
c000fa55:	68 22 a2 02 c0       	push   0xc002a222
c000fa5a:	e8 3e 2d 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 c4 dd 02 c0       	mov    eax,ds:0xc002ddc4
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000fad3:	48                   	dec    eax
c000fad4:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d c8 dd 02 c0    	cmp    DWORD PTR ds:0xc002ddc8,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d c8 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc8,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 e0 dd 02 c0       	push   0xc002dde0
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 66 a2 02 c0       	push   0xc002a266
c000fb52:	e8 46 2c 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 a8 a2 02 c0       	push   0xc002a2a8
c000fbe6:	e8 b2 2b 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 cc a2 02 c0       	push   0xc002a2cc
c000fc72:	e8 26 2b 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 d4 dd 02 c0    	add    eax,DWORD PTR ds:0xc002ddd4
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 d4 dd 02 c0       	mov    ds:0xc002ddd4,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 8c a2 02 c0       	push   0xc002a28c
c000fca8:	e8 f0 2a 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 7e a2 02 c0       	push   0xc002a27e
c000fd17:	e8 5d a2 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 d4 dd 02 c0    	inc    DWORD PTR ds:0xc002ddd4
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba 38 a3 02 c0       	mov    edx,0xc002a338
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 41 12 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 1f 29 00 00       	call   c00126c5 <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c000fddc:	e8 2a dd 00 00       	call   c001db0b <schedule()>
c000fde1:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000fde6:	48                   	dec    eax
c000fde7:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 6b 6b 01 00       	call   c00269e4 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 f5 a2 02 c0       	push   0xc002a2f5
c000fe8e:	e8 e6 a0 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 11 a3 02 c0       	push   0xc002a311
c000ff4f:	e8 25 a0 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 60 0e 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba 38 a3 02 c0       	mov    edx,0xc002a338
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba c0 a3 02 c0       	mov    edx,0xc002a3c0
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cd 0f 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 a8 26 00 00       	call   c00126c5 <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 32 5c 00 00       	call   c0015c6a <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 40 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de40
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 40 de 02 c0       	mov    ds:0xc002de40,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 20 de 02 c0       	push   0xc002de20
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 44 de 02 c0    	cmp    DWORD PTR ds:0xc002de44,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d e0 cc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3320]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d e0 cc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3320]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 98 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3468]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 70 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3490]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d 44 de 02 c0    	cmp    DWORD PTR ds:0xc002de44,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d 44 de 02 c0    	cmp    DWORD PTR ds:0xc002de44,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 4c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a34c
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 09 9c 00 00       	jmp    c0019f79 <Krnl::panic(char const*)>
c0010370:	a1 44 de 02 c0       	mov    eax,ds:0xc002de44
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d 44 de 02 c0    	mov    DWORD PTR ds:0xc002de44,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 40 de 02 c0       	mov    eax,ds:0xc002de40
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 40 de 02 c0       	mov    ds:0xc002de40,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 f8 de 02 c0       	mov    eax,ds:0xc002def8
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 f2 30 00 00       	jmp    c00135aa <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d 44 de 02 c0    	cmp    DWORD PTR ds:0xc002de44,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be 5a a3 02 c0       	mov    esi,0xc002a35a
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 44 05 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba c0 a3 02 c0       	mov    edx,0xc002a3c0
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb 20 de 02 c0       	mov    ebx,0xc002de20
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 df 08 00 00       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d f0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002def0
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	68 05 0c 00 00       	push   0xc05
c0010965:	56                   	push   esi
c0010966:	50                   	push   eax
c0010967:	53                   	push   ebx
c0010968:	e8 05 11 00 00       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010977:	83 ec 04             	sub    esp,0x4
c001097a:	68 00 0f 00 00       	push   0xf00
c001097f:	6a 00                	push   0x0
c0010981:	50                   	push   eax
c0010982:	e8 c9 fd fe ff       	call   c0000750 <memset>
c0010987:	83 c4 10             	add    esp,0x10
c001098a:	83 ec 04             	sub    esp,0x4
c001098d:	6a 00                	push   0x0
c001098f:	6a 07                	push   0x7
c0010991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010995:	e8 18 f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	83 ec 04             	sub    esp,0x4
c00109a0:	6a 00                	push   0x0
c00109a2:	6a 00                	push   0x0
c00109a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a8:	e8 8f f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b7:	e8 18 fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109bc:	83 c4 10             	add    esp,0x10
c00109bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c3:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cb:	05 02 01 00 00       	add    eax,0x102
c00109d0:	83 ec 04             	sub    esp,0x4
c00109d3:	68 96 00 00 00       	push   0x96
c00109d8:	6a 00                	push   0x0
c00109da:	50                   	push   eax
c00109db:	e8 70 fd fe ff       	call   c0000750 <memset>
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e7:	05 98 01 00 00       	add    eax,0x198
c00109ec:	83 ec 04             	sub    esp,0x4
c00109ef:	68 2c 01 00 00       	push   0x12c
c00109f4:	6a 00                	push   0x0
c00109f6:	50                   	push   eax
c00109f7:	e8 54 fd fe ff       	call   c0000750 <memset>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	90                   	nop
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	5f                   	pop    edi
c0010a03:	c3                   	ret    

c0010a04 <VgaText::receiveKey(unsigned char)>:
c0010a04:	55                   	push   ebp
c0010a05:	57                   	push   edi
c0010a06:	56                   	push   esi
c0010a07:	53                   	push   ebx
c0010a08:	83 ec 1c             	sub    esp,0x1c
c0010a0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a13:	84 db                	test   bl,bl
c0010a15:	0f 84 c9 00 00 00    	je     c0010ae4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a1b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a21:	80 fb 08             	cmp    bl,0x8
c0010a24:	75 2c                	jne    c0010a52 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a26:	83 ec 0c             	sub    esp,0xc
c0010a29:	57                   	push   edi
c0010a2a:	e8 3d fd fe ff       	call   c000076c <strlen>
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	85 c0                	test   eax,eax
c0010a34:	74 41                	je     c0010a77 <VgaText::receiveKey(unsigned char)+0x73>
c0010a36:	50                   	push   eax
c0010a37:	50                   	push   eax
c0010a38:	6a 08                	push   0x8
c0010a3a:	56                   	push   esi
c0010a3b:	e8 ee fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a43:	e8 24 fd fe ff       	call   c000076c <strlen>
c0010a48:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a50:	eb 22                	jmp    c0010a74 <VgaText::receiveKey(unsigned char)+0x70>
c0010a52:	0f be c3             	movsx  eax,bl
c0010a55:	52                   	push   edx
c0010a56:	52                   	push   edx
c0010a57:	50                   	push   eax
c0010a58:	56                   	push   esi
c0010a59:	e8 d0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a67:	59                   	pop    ecx
c0010a68:	5d                   	pop    ebp
c0010a69:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6d:	50                   	push   eax
c0010a6e:	57                   	push   edi
c0010a6f:	e8 d8 fe fe ff       	call   c000094c <strcat>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7e:	75 05                	jne    c0010a85 <VgaText::receiveKey(unsigned char)+0x81>
c0010a80:	80 fb 0a             	cmp    bl,0xa
c0010a83:	75 53                	jne    c0010ad8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8e:	53                   	push   ebx
c0010a8f:	e8 d8 fc fe ff       	call   c000076c <strlen>
c0010a94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a97:	89 c5                	mov    ebp,eax
c0010a99:	e8 ce fc fe ff       	call   c000076c <strlen>
c0010a9e:	83 c4 10             	add    esp,0x10
c0010aa1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aaa:	76 10                	jbe    c0010abc <VgaText::receiveKey(unsigned char)+0xb8>
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	68 6b a3 02 c0       	push   0xc002a36b
c0010ab4:	e8 c0 94 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	50                   	push   eax
c0010abd:	50                   	push   eax
c0010abe:	57                   	push   edi
c0010abf:	53                   	push   ebx
c0010ac0:	e8 87 fe fe ff       	call   c000094c <strcat>
c0010ac5:	83 c4 0c             	add    esp,0xc
c0010ac8:	68 96 00 00 00       	push   0x96
c0010acd:	6a 00                	push   0x0
c0010acf:	57                   	push   edi
c0010ad0:	e8 7b fc fe ff       	call   c0000750 <memset>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	56                   	push   esi
c0010adc:	e8 6d fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010ae1:	83 c4 10             	add    esp,0x10
c0010ae4:	83 c4 1c             	add    esp,0x1c
c0010ae7:	5b                   	pop    ebx
c0010ae8:	5e                   	pop    esi
c0010ae9:	5f                   	pop    edi
c0010aea:	5d                   	pop    ebp
c0010aeb:	c3                   	ret    

c0010aec <VgaText::write(unsigned long long, void*, int*)>:
c0010aec:	55                   	push   ebp
c0010aed:	57                   	push   edi
c0010aee:	56                   	push   esi
c0010aef:	53                   	push   ebx
c0010af0:	83 ec 0c             	sub    esp,0xc
c0010af3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010afb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aff:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b06:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b09:	39 eb                	cmp    ebx,ebp
c0010b0b:	74 13                	je     c0010b20 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0d:	43                   	inc    ebx
c0010b0e:	50                   	push   eax
c0010b0f:	50                   	push   eax
c0010b10:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b14:	50                   	push   eax
c0010b15:	56                   	push   esi
c0010b16:	e8 13 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b1b:	83 c4 10             	add    esp,0x10
c0010b1e:	eb e9                	jmp    c0010b09 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b2a:	56                   	push   esi
c0010b2b:	e8 1e fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b34:	89 38                	mov    DWORD PTR [eax],edi
c0010b36:	83 c4 1c             	add    esp,0x1c
c0010b39:	31 c0                	xor    eax,eax
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	5f                   	pop    edi
c0010b3e:	5d                   	pop    ebp
c0010b3f:	c3                   	ret    

c0010b40 <newTerminal(char*)>:
c0010b40:	83 ec 28             	sub    esp,0x28
c0010b43:	68 c4 02 00 00       	push   0x2c4
c0010b48:	e8 4c ea ff ff       	call   c000f599 <malloc>
c0010b4d:	5a                   	pop    edx
c0010b4e:	59                   	pop    ecx
c0010b4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b53:	50                   	push   eax
c0010b54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b58:	e8 29 fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b61:	83 c4 2c             	add    esp,0x2c
c0010b64:	c3                   	ret    
c0010b65:	90                   	nop

c0010b66 <TSS::TSS()>:
c0010b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b71:	90                   	nop
c0010b72:	c3                   	ret    
c0010b73:	90                   	nop

c0010b74 <TSS::setESP(unsigned long)>:
c0010b74:	55                   	push   ebp
c0010b75:	89 e5                	mov    ebp,esp
c0010b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b83:	90                   	nop
c0010b84:	5d                   	pop    ebp
c0010b85:	c3                   	ret    

c0010b86 <TSS::flush()>:
c0010b86:	55                   	push   ebp
c0010b87:	89 e5                	mov    ebp,esp
c0010b89:	83 ec 10             	sub    esp,0x10
c0010b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b91:	83 c8 03             	or     eax,0x3
c0010b94:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b98:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9c:	66 89 d0             	mov    ax,dx
c0010b9f:	0f 00 d8             	ltr    ax
c0010ba2:	90                   	nop
c0010ba3:	c9                   	leave  
c0010ba4:	c3                   	ret    
c0010ba5:	90                   	nop

c0010ba6 <TSS::setup(unsigned long, unsigned long)>:
c0010ba6:	55                   	push   ebp
c0010ba7:	89 e5                	mov    ebp,esp
c0010ba9:	83 ec 18             	sub    esp,0x18
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	6a 68                	push   0x68
c0010bb1:	e8 e3 e9 ff ff       	call   c000f599 <malloc>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	89 c2                	mov    edx,eax
c0010bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc7:	83 ec 04             	sub    esp,0x4
c0010bca:	6a 68                	push   0x68
c0010bcc:	6a 00                	push   0x0
c0010bce:	50                   	push   eax
c0010bcf:	e8 7c fb fe ff       	call   c0000750 <memset>
c0010bd4:	83 c4 10             	add    esp,0x10
c0010bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c01:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c19:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c25:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c31:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c49:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c61:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6e:	0f 20 da             	mov    edx,cr3
c0010c71:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c74:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c77:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c80:	83 ec 08             	sub    esp,0x8
c0010c83:	50                   	push   eax
c0010c84:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c87:	50                   	push   eax
c0010c88:	e8 05 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8d:	83 c4 10             	add    esp,0x10
c0010c90:	83 ec 08             	sub    esp,0x8
c0010c93:	6a 68                	push   0x68
c0010c95:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c98:	50                   	push   eax
c0010c99:	e8 10 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca8:	83 e0 0f             	and    eax,0xf
c0010cab:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cae:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010cb1:	83 c8 40             	or     eax,0x40
c0010cb4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb7:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0010cbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc2:	05 78 01 00 00       	add    eax,0x178
c0010cc7:	83 ec 04             	sub    esp,0x4
c0010cca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cd0:	50                   	push   eax
c0010cd1:	e8 0c e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd6:	83 c4 10             	add    esp,0x10
c0010cd9:	89 c2                	mov    edx,eax
c0010cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cde:	89 10                	mov    DWORD PTR [eax],edx
c0010ce0:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0010ce5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ceb:	05 78 01 00 00       	add    eax,0x178
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	50                   	push   eax
c0010cf4:	e8 13 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d01:	c9                   	leave  
c0010d02:	c3                   	ret    
c0010d03:	90                   	nop

c0010d04 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d14:	75 08                	jne    c0010d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d16:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1c:	eb 38                	jmp    c0010d56 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d23:	75 17                	jne    c0010d3c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d39:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3c:	89 c1                	mov    ecx,eax
c0010d3e:	83 e1 fd             	and    ecx,0xfffffffd
c0010d41:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d47:	74 cd                	je     c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d49:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4e:	83 e0 ef             	and    eax,0xffffffef
c0010d51:	83 f8 08             	cmp    eax,0x8
c0010d54:	76 c0                	jbe    c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d56:	31 c0                	xor    eax,eax
c0010d58:	c3                   	ret    
c0010d59:	90                   	nop

c0010d5a <ReservedFilename::isAtty()>:
c0010d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d61:	31 c0                	xor    eax,eax
c0010d63:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d69:	74 09                	je     c0010d74 <ReservedFilename::isAtty()+0x1a>
c0010d6b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d71:	0f 94 c0             	sete   al
c0010d74:	c3                   	ret    
c0010d75:	90                   	nop

c0010d76 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d8a:	75 08                	jne    c0010d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d92:	eb 3d                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d99:	75 17                	jne    c0010db2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010da0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010daf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db7:	75 04                	jne    c0010dbd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db9:	89 0a                	mov    DWORD PTR [edx],ecx
c0010dbb:	eb 14                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc2:	74 c8                	je     c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc9:	83 e0 ef             	and    eax,0xffffffef
c0010dcc:	83 f8 08             	cmp    eax,0x8
c0010dcf:	76 bb                	jbe    c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dd1:	31 c0                	xor    eax,eax
c0010dd3:	c3                   	ret    

c0010dd4 <UnixFile::getFileDescriptor()>:
c0010dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ddb:	c3                   	ret    

c0010ddc <UnixFile::UnixFile(int)>:
c0010ddc:	53                   	push   ebx
c0010ddd:	83 ec 28             	sub    esp,0x28
c0010de0:	ba 88 a4 02 c0       	mov    edx,0xc002a488
c0010de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de9:	89 10                	mov    DWORD PTR [eax],edx
c0010deb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df3:	0f 8f 8c 01 00 00    	jg     c0010f85 <UnixFile::UnixFile(int)+0x1a9>
c0010df9:	a1 20 cd 02 c0       	mov    eax,ds:0xc002cd20
c0010dfe:	8d 50 01             	lea    edx,[eax+0x1]
c0010e01:	89 15 20 cd 02 c0    	mov    DWORD PTR ds:0xc002cd20,edx
c0010e07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e0b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0e:	83 ec 08             	sub    esp,0x8
c0010e11:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e15:	68 d8 de 02 c0       	push   0xc002ded8
c0010e1a:	e8 37 78 01 00       	call   c0028656 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	a0 d4 de 02 c0       	mov    al,ds:0xc002ded4
c0010e27:	83 f0 01             	xor    eax,0x1
c0010e2a:	84 c0                	test   al,al
c0010e2c:	0f 84 54 01 00 00    	je     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010e32:	c6 05 d4 de 02 c0 01 	mov    BYTE PTR ds:0xc002ded4,0x1
c0010e39:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e48:	e8 4c e7 ff ff       	call   c000f599 <malloc>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	89 c3                	mov    ebx,eax
c0010e52:	83 ec 08             	sub    esp,0x8
c0010e55:	68 03 ff ff 0f       	push   0xfffff03
c0010e5a:	53                   	push   ebx
c0010e5b:	e8 2c 01 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	89 1d cc de 02 c0    	mov    DWORD PTR ds:0xc002decc,ebx
c0010e69:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e78:	e8 1c e7 ff ff       	call   c000f599 <malloc>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	89 c3                	mov    ebx,eax
c0010e82:	83 ec 08             	sub    esp,0x8
c0010e85:	68 01 ff ff 0f       	push   0xfffff01
c0010e8a:	53                   	push   ebx
c0010e8b:	e8 fc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	89 1d d0 de 02 c0    	mov    DWORD PTR ds:0xc002ded0,ebx
c0010e99:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea8:	e8 ec e6 ff ff       	call   c000f599 <malloc>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	89 c3                	mov    ebx,eax
c0010eb2:	83 ec 08             	sub    esp,0x8
c0010eb5:	68 00 ff ff 0f       	push   0xfffff00
c0010eba:	53                   	push   ebx
c0010ebb:	e8 cc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	89 1d c4 de 02 c0    	mov    DWORD PTR ds:0xc002dec4,ebx
c0010ec9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed8:	e8 bc e6 ff ff       	call   c000f599 <malloc>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	89 c3                	mov    ebx,eax
c0010ee2:	83 ec 08             	sub    esp,0x8
c0010ee5:	68 02 ff ff 0f       	push   0xfffff02
c0010eea:	53                   	push   ebx
c0010eeb:	e8 9c 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	89 1d c8 de 02 c0    	mov    DWORD PTR ds:0xc002dec8,ebx
c0010ef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010f01:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f06:	7f 7e                	jg     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010f08:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f17:	e8 7d e6 ff ff       	call   c000f599 <malloc>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 c3                	mov    ebx,eax
c0010f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f25:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f2a:	83 ec 08             	sub    esp,0x8
c0010f2d:	50                   	push   eax
c0010f2e:	53                   	push   ebx
c0010f2f:	e8 58 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3b:	89 1c 85 a0 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2160],ebx
c0010f42:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f4a:	83 ec 0c             	sub    esp,0xc
c0010f4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f51:	e8 43 e6 ff ff       	call   c000f599 <malloc>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	89 c3                	mov    ebx,eax
c0010f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f64:	83 ec 08             	sub    esp,0x8
c0010f67:	50                   	push   eax
c0010f68:	53                   	push   ebx
c0010f69:	e8 1e 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	89 1c 85 60 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21a0],ebx
c0010f7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f80:	e9 7c ff ff ff       	jmp    c0010f01 <UnixFile::UnixFile(int)+0x125>
c0010f85:	90                   	nop
c0010f86:	83 c4 28             	add    esp,0x28
c0010f89:	5b                   	pop    ebx
c0010f8a:	c3                   	ret    
c0010f8b:	90                   	nop

c0010f8c <ReservedFilename::ReservedFilename(int)>:
c0010f8c:	83 ec 0c             	sub    esp,0xc
c0010f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9a:	50                   	push   eax
c0010f9b:	e8 3c fe ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	ba a4 a4 02 c0       	mov    edx,0xc002a4a4
c0010fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fac:	89 10                	mov    DWORD PTR [eax],edx
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb9:	90                   	nop
c0010fba:	83 c4 0c             	add    esp,0xc
c0010fbd:	c3                   	ret    

c0010fbe <UnixFile::~UnixFile()>:
c0010fbe:	83 ec 1c             	sub    esp,0x1c
c0010fc1:	ba 88 a4 02 c0       	mov    edx,0xc002a488
c0010fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fca:	89 10                	mov    DWORD PTR [eax],edx
c0010fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd8:	7f 73                	jg     c001104d <UnixFile::~UnixFile()+0x8f>
c0010fda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	68 d8 de 02 c0       	push   0xc002ded8
c0010fea:	e8 3b 77 01 00       	call   c002872a <LinkedList<UnixFile>::getFirstElement()>
c0010fef:	83 c4 10             	add    esp,0x10
c0010ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	68 d8 de 02 c0       	push   0xc002ded8
c0010ffe:	e8 2f 77 01 00       	call   c0028732 <LinkedList<UnixFile>::removeFirst()>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001100a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100e:	74 40                	je     c0011050 <UnixFile::~UnixFile()+0x92>
c0011010:	83 ec 08             	sub    esp,0x8
c0011013:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011017:	68 d8 de 02 c0       	push   0xc002ded8
c001101c:	e8 35 76 01 00       	call   c0028656 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011021:	83 c4 10             	add    esp,0x10
c0011024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011028:	8d 50 01             	lea    edx,[eax+0x1]
c001102b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011034:	0f 94 c0             	sete   al
c0011037:	84 c0                	test   al,al
c0011039:	74 a7                	je     c0010fe2 <UnixFile::~UnixFile()+0x24>
c001103b:	83 ec 0c             	sub    esp,0xc
c001103e:	68 60 a4 02 c0       	push   0xc002a460
c0011043:	e8 31 8f 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	eb 95                	jmp    c0010fe2 <UnixFile::~UnixFile()+0x24>
c001104d:	90                   	nop
c001104e:	eb 01                	jmp    c0011051 <UnixFile::~UnixFile()+0x93>
c0011050:	90                   	nop
c0011051:	90                   	nop
c0011052:	83 c4 1c             	add    esp,0x1c
c0011055:	c3                   	ret    

c0011056 <UnixFile::~UnixFile()>:
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	83 ec 0c             	sub    esp,0xc
c001105c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011060:	e8 59 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	83 ec 08             	sub    esp,0x8
c001106b:	6a 0c                	push   0xc
c001106d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011071:	e8 4f 16 00 00       	call   c00126c5 <operator delete(void*, unsigned long)>
c0011076:	83 c4 10             	add    esp,0x10
c0011079:	83 c4 0c             	add    esp,0xc
c001107c:	c3                   	ret    
c001107d:	90                   	nop

c001107e <ReservedFilename::~ReservedFilename()>:
c001107e:	83 ec 0c             	sub    esp,0xc
c0011081:	ba a4 a4 02 c0       	mov    edx,0xc002a4a4
c0011086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108a:	89 10                	mov    DWORD PTR [eax],edx
c001108c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	50                   	push   eax
c0011094:	e8 25 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	90                   	nop
c001109d:	83 c4 0c             	add    esp,0xc
c00110a0:	c3                   	ret    
c00110a1:	90                   	nop

c00110a2 <ReservedFilename::~ReservedFilename()>:
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	83 ec 0c             	sub    esp,0xc
c00110a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ac:	e8 cd ff ff ff       	call   c001107e <ReservedFilename::~ReservedFilename()>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	83 ec 08             	sub    esp,0x8
c00110b7:	6a 0c                	push   0xc
c00110b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bd:	e8 03 16 00 00       	call   c00126c5 <operator delete(void*, unsigned long)>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	c3                   	ret    

c00110c9 <getFromFileDescriptor(int)>:
c00110c9:	53                   	push   ebx
c00110ca:	83 ec 08             	sub    esp,0x8
c00110cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110dd:	7f 2c                	jg     c001110b <getFromFileDescriptor(int)+0x42>
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	68 d8 de 02 c0       	push   0xc002ded8
c00110e7:	e8 3e 76 01 00       	call   c002872a <LinkedList<UnixFile>::getFirstElement()>
c00110ec:	83 c4 10             	add    esp,0x10
c00110ef:	85 c0                	test   eax,eax
c00110f1:	75 04                	jne    c00110f7 <getFromFileDescriptor(int)+0x2e>
c00110f3:	31 c0                	xor    eax,eax
c00110f5:	eb 6e                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c00110f7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110fa:	74 69                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c00110fc:	52                   	push   edx
c00110fd:	52                   	push   edx
c00110fe:	50                   	push   eax
c00110ff:	68 d8 de 02 c0       	push   0xc002ded8
c0011104:	e8 cb 76 01 00       	call   c00287d4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011109:	eb e1                	jmp    c00110ec <getFromFileDescriptor(int)+0x23>
c001110b:	a1 cc de 02 c0       	mov    eax,ds:0xc002decc
c0011110:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011116:	74 4d                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011118:	a1 d0 de 02 c0       	mov    eax,ds:0xc002ded0
c001111d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011123:	74 40                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011125:	a1 c8 de 02 c0       	mov    eax,ds:0xc002dec8
c001112a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011130:	74 33                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011132:	a1 c4 de 02 c0       	mov    eax,ds:0xc002dec4
c0011137:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113d:	74 26                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c001113f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011145:	83 f8 08             	cmp    eax,0x8
c0011148:	77 09                	ja     c0011153 <getFromFileDescriptor(int)+0x8a>
c001114a:	8b 04 85 a0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2160]
c0011151:	eb 12                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c0011153:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011159:	83 fb 08             	cmp    ebx,0x8
c001115c:	77 95                	ja     c00110f3 <getFromFileDescriptor(int)+0x2a>
c001115e:	8b 04 9d 60 de 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd21a0]
c0011165:	83 c4 08             	add    esp,0x8
c0011168:	5b                   	pop    ebx
c0011169:	c3                   	ret    

c001116a <__static_initialization_and_destruction_0(int, int)>:
c001116a:	83 ec 0c             	sub    esp,0xc
c001116d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011172:	75 34                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011174:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117c:	75 2a                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117e:	83 ec 0c             	sub    esp,0xc
c0011181:	68 d8 de 02 c0       	push   0xc002ded8
c0011186:	e8 89 74 01 00       	call   c0028614 <LinkedList<UnixFile>::LinkedList()>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	83 ec 04             	sub    esp,0x4
c0011191:	68 3c cb 02 c0       	push   0xc002cb3c
c0011196:	68 d8 de 02 c0       	push   0xc002ded8
c001119b:	68 12 86 02 c0       	push   0xc0028612
c00111a0:	e8 9a 14 00 00       	call   c001263f <__cxa_atexit>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	90                   	nop
c00111a9:	83 c4 0c             	add    esp,0xc
c00111ac:	c3                   	ret    

c00111ad <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ad:	83 ec 0c             	sub    esp,0xc
c00111b0:	83 ec 08             	sub    esp,0x8
c00111b3:	68 ff ff 00 00       	push   0xffff
c00111b8:	6a 01                	push   0x1
c00111ba:	e8 ab ff ff ff       	call   c001116a <__static_initialization_and_destruction_0(int, int)>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	83 c4 0c             	add    esp,0xc
c00111c5:	c3                   	ret    

c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c6:	53                   	push   ebx
c00111c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d5:	89 c8                	mov    eax,ecx
c00111d7:	d1 e8                	shr    eax,1
c00111d9:	03 05 28 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cd28
c00111df:	83 e1 01             	and    ecx,0x1
c00111e2:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e4:	75 09                	jne    c00111ef <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e6:	83 e2 f0             	and    edx,0xfffffff0
c00111e9:	09 da                	or     edx,ebx
c00111eb:	88 10                	mov    BYTE PTR [eax],dl
c00111ed:	5b                   	pop    ebx
c00111ee:	c3                   	ret    
c00111ef:	c1 e3 04             	shl    ebx,0x4
c00111f2:	83 e2 0f             	and    edx,0xf
c00111f5:	09 da                	or     edx,ebx
c00111f7:	88 10                	mov    BYTE PTR [eax],dl
c00111f9:	5b                   	pop    ebx
c00111fa:	c3                   	ret    

c00111fb <Virt::getPageState(unsigned long)>:
c00111fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ff:	8b 0d 28 cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cd28
c0011205:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001120b:	89 d0                	mov    eax,edx
c001120d:	d1 e8                	shr    eax,1
c001120f:	83 e2 01             	and    edx,0x1
c0011212:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011215:	75 04                	jne    c001121b <Virt::getPageState(unsigned long)+0x20>
c0011217:	83 e0 0f             	and    eax,0xf
c001121a:	c3                   	ret    
c001121b:	c0 e8 04             	shr    al,0x4
c001121e:	c3                   	ret    

c001121f <Virt::allocateKernelVirtualPages(int)>:
c001121f:	55                   	push   ebp
c0011220:	31 ed                	xor    ebp,ebp
c0011222:	57                   	push   edi
c0011223:	56                   	push   esi
c0011224:	53                   	push   ebx
c0011225:	31 db                	xor    ebx,ebx
c0011227:	83 ec 1c             	sub    esp,0x1c
c001122a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122e:	8b 3d 24 cd 02 c0    	mov    edi,DWORD PTR ds:0xc002cd24
c0011234:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011239:	57                   	push   edi
c001123a:	e8 bc ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c001123f:	5a                   	pop    edx
c0011240:	84 c0                	test   al,al
c0011242:	75 3a                	jne    c001127e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011244:	85 db                	test   ebx,ebx
c0011246:	75 02                	jne    c001124a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011248:	89 fd                	mov    ebp,edi
c001124a:	43                   	inc    ebx
c001124b:	39 f3                	cmp    ebx,esi
c001124d:	74 5a                	je     c00112a9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124f:	47                   	inc    edi
c0011250:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011256:	76 31                	jbe    c0011289 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011258:	c7 05 24 cd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002cd24,0xc8000
c0011262:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011267:	75 28                	jne    c0011291 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011269:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011273:	57                   	push   edi
c0011274:	e8 82 ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011279:	5a                   	pop    edx
c001127a:	84 c0                	test   al,al
c001127c:	74 c6                	je     c0011244 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127e:	31 db                	xor    ebx,ebx
c0011280:	47                   	inc    edi
c0011281:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011287:	77 cf                	ja     c0011258 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011289:	89 3d 24 cd 02 c0    	mov    DWORD PTR ds:0xc002cd24,edi
c001128f:	eb a8                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	68 b8 a4 02 c0       	push   0xc002a4b8
c0011299:	e8 db 8c 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c001129e:	8b 3d 24 cd 02 c0    	mov    edi,DWORD PTR ds:0xc002cd24
c00112a4:	83 c4 10             	add    esp,0x10
c00112a7:	eb 90                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a9:	89 2d 24 cd 02 c0    	mov    DWORD PTR ds:0xc002cd24,ebp
c00112af:	4b                   	dec    ebx
c00112b0:	74 5f                	je     c0011311 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b2:	85 f6                	test   esi,esi
c00112b4:	74 3d                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b6:	89 e8                	mov    eax,ebp
c00112b8:	31 db                	xor    ebx,ebx
c00112ba:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bd:	eb 14                	jmp    c00112d3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bf:	6a 01                	push   0x1
c00112c1:	43                   	inc    ebx
c00112c2:	50                   	push   eax
c00112c3:	e8 fe fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c8:	58                   	pop    eax
c00112c9:	39 f3                	cmp    ebx,esi
c00112cb:	5a                   	pop    edx
c00112cc:	74 25                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ce:	a1 24 cd 02 c0       	mov    eax,ds:0xc002cd24
c00112d3:	8d 50 01             	lea    edx,[eax+0x1]
c00112d6:	85 db                	test   ebx,ebx
c00112d8:	89 15 24 cd 02 c0    	mov    DWORD PTR ds:0xc002cd24,edx
c00112de:	74 20                	je     c0011300 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112e0:	39 df                	cmp    edi,ebx
c00112e2:	75 db                	jne    c00112bf <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e4:	6a 03                	push   0x3
c00112e6:	43                   	inc    ebx
c00112e7:	50                   	push   eax
c00112e8:	e8 d9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ed:	59                   	pop    ecx
c00112ee:	39 f3                	cmp    ebx,esi
c00112f0:	58                   	pop    eax
c00112f1:	75 db                	jne    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f3:	83 c4 1c             	add    esp,0x1c
c00112f6:	89 e8                	mov    eax,ebp
c00112f8:	5b                   	pop    ebx
c00112f9:	c1 e0 0c             	shl    eax,0xc
c00112fc:	5e                   	pop    esi
c00112fd:	5f                   	pop    edi
c00112fe:	5d                   	pop    ebp
c00112ff:	c3                   	ret    
c0011300:	6a 02                	push   0x2
c0011302:	bb 01 00 00 00       	mov    ebx,0x1
c0011307:	50                   	push   eax
c0011308:	e8 b9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130d:	58                   	pop    eax
c001130e:	5a                   	pop    edx
c001130f:	eb bd                	jmp    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011311:	6a 04                	push   0x4
c0011313:	8d 45 01             	lea    eax,[ebp+0x1]
c0011316:	55                   	push   ebp
c0011317:	a3 24 cd 02 c0       	mov    ds:0xc002cd24,eax
c001131c:	e8 a5 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011321:	59                   	pop    ecx
c0011322:	89 e8                	mov    eax,ebp
c0011324:	5b                   	pop    ebx
c0011325:	c1 e0 0c             	shl    eax,0xc
c0011328:	83 c4 1c             	add    esp,0x1c
c001132b:	5b                   	pop    ebx
c001132c:	5e                   	pop    esi
c001132d:	5f                   	pop    edi
c001132e:	5d                   	pop    ebp
c001132f:	c3                   	ret    

c0011330 <Virt::freeSwapfilePage(unsigned long)>:
c0011330:	53                   	push   ebx
c0011331:	8b 15 ec de 02 c0    	mov    edx,DWORD PTR ds:0xc002deec
c0011337:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001133b:	b8 01 00 00 00       	mov    eax,0x1
c0011340:	89 cb                	mov    ebx,ecx
c0011342:	d3 e0                	shl    eax,cl
c0011344:	c1 eb 05             	shr    ebx,0x5
c0011347:	f7 d0                	not    eax
c0011349:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134c:	5b                   	pop    ebx
c001134d:	c3                   	ret    

c001134e <Virt::swapIDToSector(unsigned long)>:
c001134e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011352:	0f af 05 2c cd 02 c0 	imul   eax,DWORD PTR ds:0xc002cd2c
c0011359:	03 05 34 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cd34
c001135f:	c3                   	ret    

c0011360 <Virt::allocateSwapfilePage()>:
c0011360:	55                   	push   ebp
c0011361:	31 d2                	xor    edx,edx
c0011363:	57                   	push   edi
c0011364:	56                   	push   esi
c0011365:	53                   	push   ebx
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	8b 0d 2c cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cd2c
c001136f:	a1 30 cd 02 c0       	mov    eax,ds:0xc002cd30
c0011374:	f7 f1                	div    ecx
c0011376:	39 0d 30 cd 02 c0    	cmp    DWORD PTR ds:0xc002cd30,ecx
c001137c:	72 2d                	jb     c00113ab <Virt::allocateSwapfilePage()+0x4b>
c001137e:	8b 35 ec de 02 c0    	mov    esi,DWORD PTR ds:0xc002deec
c0011384:	8b 16                	mov    edx,DWORD PTR [esi]
c0011386:	f6 c2 01             	test   dl,0x1
c0011389:	74 3c                	je     c00113c7 <Virt::allocateSwapfilePage()+0x67>
c001138b:	31 c9                	xor    ecx,ecx
c001138d:	bf 01 00 00 00       	mov    edi,0x1
c0011392:	eb 12                	jmp    c00113a6 <Virt::allocateSwapfilePage()+0x46>
c0011394:	89 fd                	mov    ebp,edi
c0011396:	89 ca                	mov    edx,ecx
c0011398:	d3 e5                	shl    ebp,cl
c001139a:	c1 ea 05             	shr    edx,0x5
c001139d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00113a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a2:	85 ea                	test   edx,ebp
c00113a4:	74 2a                	je     c00113d0 <Virt::allocateSwapfilePage()+0x70>
c00113a6:	41                   	inc    ecx
c00113a7:	39 c8                	cmp    eax,ecx
c00113a9:	77 e9                	ja     c0011394 <Virt::allocateSwapfilePage()+0x34>
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	68 dc a6 02 c0       	push   0xc002a6dc
c00113b3:	e8 c1 8b 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	31 c9                	xor    ecx,ecx
c00113bd:	83 c4 0c             	add    esp,0xc
c00113c0:	89 c8                	mov    eax,ecx
c00113c2:	5b                   	pop    ebx
c00113c3:	5e                   	pop    esi
c00113c4:	5f                   	pop    edi
c00113c5:	5d                   	pop    ebp
c00113c6:	c3                   	ret    
c00113c7:	89 f3                	mov    ebx,esi
c00113c9:	bd 01 00 00 00       	mov    ebp,0x1
c00113ce:	31 c9                	xor    ecx,ecx
c00113d0:	09 ea                	or     edx,ebp
c00113d2:	89 c8                	mov    eax,ecx
c00113d4:	89 13                	mov    DWORD PTR [ebx],edx
c00113d6:	83 c4 0c             	add    esp,0xc
c00113d9:	5b                   	pop    ebx
c00113da:	5e                   	pop    esi
c00113db:	5f                   	pop    edi
c00113dc:	5d                   	pop    ebp
c00113dd:	c3                   	ret    

c00113de <Virt::virtualMemorySetup()>:
c00113de:	53                   	push   ebx
c00113df:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e4:	6a 0f                	push   0xf
c00113e6:	53                   	push   ebx
c00113e7:	43                   	inc    ebx
c00113e8:	e8 d9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ed:	58                   	pop    eax
c00113ee:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f4:	5a                   	pop    edx
c00113f5:	75 ed                	jne    c00113e4 <Virt::virtualMemorySetup()+0x6>
c00113f7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fc:	6a 00                	push   0x0
c00113fe:	53                   	push   ebx
c00113ff:	43                   	inc    ebx
c0011400:	e8 c1 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011405:	59                   	pop    ecx
c0011406:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140c:	58                   	pop    eax
c001140d:	75 ed                	jne    c00113fc <Virt::virtualMemorySetup()+0x1e>
c001140f:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011414:	6a 0f                	push   0xf
c0011416:	53                   	push   ebx
c0011417:	43                   	inc    ebx
c0011418:	e8 a9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141d:	58                   	pop    eax
c001141e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011424:	5a                   	pop    edx
c0011425:	75 ed                	jne    c0011414 <Virt::virtualMemorySetup()+0x36>
c0011427:	5b                   	pop    ebx
c0011428:	c3                   	ret    

c0011429 <Virt::setupPageSwapping(int)>:
c0011429:	55                   	push   ebp
c001142a:	57                   	push   edi
c001142b:	56                   	push   esi
c001142c:	53                   	push   ebx
c001142d:	83 ec 28             	sub    esp,0x28
c0011430:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0011434:	68 14 01 00 00       	push   0x114
c0011439:	e8 5b e1 ff ff       	call   c000f599 <malloc>
c001143e:	83 c4 0c             	add    esp,0xc
c0011441:	89 c3                	mov    ebx,eax
c0011443:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c0011449:	68 f3 a6 02 c0       	push   0xc002a6f3
c001144e:	50                   	push   eax
c001144f:	e8 a8 18 00 00       	call   c0012cfc <File::File(char const*, Process*)>
c0011454:	59                   	pop    ecx
c0011455:	5e                   	pop    esi
c0011456:	6a 01                	push   0x1
c0011458:	53                   	push   ebx
c0011459:	e8 02 19 00 00       	call   c0012d60 <File::open(FileOpenMode)>
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	85 c0                	test   eax,eax
c0011463:	0f 85 88 01 00 00    	jne    c00115f1 <Virt::setupPageSwapping(int)+0x1c8>
c0011469:	51                   	push   ecx
c001146a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001146e:	50                   	push   eax
c001146f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011473:	50                   	push   eax
c0011474:	53                   	push   ebx
c0011475:	e8 92 1b 00 00       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001147a:	5e                   	pop    esi
c001147b:	5d                   	pop    ebp
c001147c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011480:	68 f8 a4 02 c0       	push   0xc002a4f8
c0011485:	e8 13 13 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001148a:	83 c4 10             	add    esp,0x10
c001148d:	89 f9                	mov    ecx,edi
c001148f:	c1 e1 14             	shl    ecx,0x14
c0011492:	89 c8                	mov    eax,ecx
c0011494:	33 4c 24 08          	xor    ecx,DWORD PTR [esp+0x8]
c0011498:	99                   	cdq    
c0011499:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001149d:	31 d0                	xor    eax,edx
c001149f:	09 c8                	or     eax,ecx
c00114a1:	0f 85 8a 00 00 00    	jne    c0011531 <Virt::setupPageSwapping(int)+0x108>
c00114a7:	83 ec 0c             	sub    esp,0xc
c00114aa:	53                   	push   ebx
c00114ab:	e8 0e 19 00 00       	call   c0012dbe <File::close()>
c00114b0:	83 c4 10             	add    esp,0x10
c00114b3:	85 db                	test   ebx,ebx
c00114b5:	74 0c                	je     c00114c3 <Virt::setupPageSwapping(int)+0x9a>
c00114b7:	83 ec 0c             	sub    esp,0xc
c00114ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114bc:	53                   	push   ebx
c00114bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	83 ec 08             	sub    esp,0x8
c00114c6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00114cb:	c1 e7 0b             	shl    edi,0xb
c00114ce:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00114d6:	68 f3 a6 02 c0       	push   0xc002a6f3
c00114db:	50                   	push   eax
c00114dc:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114df:	89 3d 30 cd 02 c0    	mov    DWORD PTR ds:0xc002cd30,edi
c00114e5:	c6 05 38 cd 02 c0 43 	mov    BYTE PTR ds:0xc002cd38,0x43
c00114ec:	c1 ef 08             	shr    edi,0x8
c00114ef:	a3 34 cd 02 c0       	mov    ds:0xc002cd34,eax
c00114f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f7:	c7 05 2c cd 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002cd2c,0x8
c0011501:	e8 93 e0 ff ff       	call   c000f599 <malloc>
c0011506:	83 c4 0c             	add    esp,0xc
c0011509:	89 c1                	mov    ecx,eax
c001150b:	a3 ec de 02 c0       	mov    ds:0xc002deec,eax
c0011510:	31 d2                	xor    edx,edx
c0011512:	a1 30 cd 02 c0       	mov    eax,ds:0xc002cd30
c0011517:	f7 35 2c cd 02 c0    	div    DWORD PTR ds:0xc002cd2c
c001151d:	c1 e8 05             	shr    eax,0x5
c0011520:	50                   	push   eax
c0011521:	6a 00                	push   0x0
c0011523:	51                   	push   ecx
c0011524:	e8 27 f2 fe ff       	call   c0000750 <memset>
c0011529:	83 c4 2c             	add    esp,0x2c
c001152c:	5b                   	pop    ebx
c001152d:	5e                   	pop    esi
c001152e:	5f                   	pop    edi
c001152f:	5d                   	pop    ebp
c0011530:	c3                   	ret    
c0011531:	83 ec 0c             	sub    esp,0xc
c0011534:	53                   	push   ebx
c0011535:	e8 84 18 00 00       	call   c0012dbe <File::close()>
c001153a:	58                   	pop    eax
c001153b:	5a                   	pop    edx
c001153c:	6a 12                	push   0x12
c001153e:	53                   	push   ebx
c001153f:	e8 1c 18 00 00       	call   c0012d60 <File::open(FileOpenMode)>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	85 c0                	test   eax,eax
c0011549:	0f 85 e1 00 00 00    	jne    c0011630 <Virt::setupPageSwapping(int)+0x207>
c001154f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011557:	89 fe                	mov    esi,edi
c0011559:	83 ec 0c             	sub    esp,0xc
c001155c:	c1 e6 08             	shl    esi,0x8
c001155f:	68 00 00 01 00       	push   0x10000
c0011564:	e8 30 e0 ff ff       	call   c000f599 <malloc>
c0011569:	83 c4 0c             	add    esp,0xc
c001156c:	89 c5                	mov    ebp,eax
c001156e:	68 00 00 01 00       	push   0x10000
c0011573:	68 ee 00 00 00       	push   0xee
c0011578:	50                   	push   eax
c0011579:	e8 d2 f1 fe ff       	call   c0000750 <memset>
c001157e:	83 c4 10             	add    esp,0x10
c0011581:	85 f6                	test   esi,esi
c0011583:	79 03                	jns    c0011588 <Virt::setupPageSwapping(int)+0x15f>
c0011585:	83 c6 0f             	add    esi,0xf
c0011588:	c1 fe 04             	sar    esi,0x4
c001158b:	4e                   	dec    esi
c001158c:	83 fe ff             	cmp    esi,0xffffffff
c001158f:	74 3d                	je     c00115ce <Virt::setupPageSwapping(int)+0x1a5>
c0011591:	83 ec 0c             	sub    esp,0xc
c0011594:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011596:	8d 54 24 10          	lea    edx,[esp+0x10]
c001159a:	52                   	push   edx
c001159b:	55                   	push   ebp
c001159c:	6a 00                	push   0x0
c001159e:	68 00 00 01 00       	push   0x10000
c00115a3:	53                   	push   ebx
c00115a4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00115a7:	83 c4 20             	add    esp,0x20
c00115aa:	85 c0                	test   eax,eax
c00115ac:	75 31                	jne    c00115df <Virt::setupPageSwapping(int)+0x1b6>
c00115ae:	81 7c 24 04 00 00 01 00 	cmp    DWORD PTR [esp+0x4],0x10000
c00115b6:	74 d3                	je     c001158b <Virt::setupPageSwapping(int)+0x162>
c00115b8:	83 ec 0c             	sub    esp,0xc
c00115bb:	4e                   	dec    esi
c00115bc:	68 25 a7 02 c0       	push   0xc002a725
c00115c1:	e8 b3 89 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c00115c6:	83 c4 10             	add    esp,0x10
c00115c9:	83 fe ff             	cmp    esi,0xffffffff
c00115cc:	75 c3                	jne    c0011591 <Virt::setupPageSwapping(int)+0x168>
c00115ce:	83 ec 0c             	sub    esp,0xc
c00115d1:	55                   	push   ebp
c00115d2:	e8 e2 df ff ff       	call   c000f5b9 <rfree>
c00115d7:	83 c4 10             	add    esp,0x10
c00115da:	e9 c8 fe ff ff       	jmp    c00114a7 <Virt::setupPageSwapping(int)+0x7e>
c00115df:	83 ec 0c             	sub    esp,0xc
c00115e2:	68 25 a7 02 c0       	push   0xc002a725
c00115e7:	e8 8d 89 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	eb bd                	jmp    c00115ae <Virt::setupPageSwapping(int)+0x185>
c00115f1:	83 ec 0c             	sub    esp,0xc
c00115f4:	68 d8 a4 02 c0       	push   0xc002a4d8
c00115f9:	e8 9f 11 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00115fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011601:	e8 d2 18 00 00       	call   c0012ed8 <File::unlink()>
c0011606:	58                   	pop    eax
c0011607:	5a                   	pop    edx
c0011608:	6a 12                	push   0x12
c001160a:	53                   	push   ebx
c001160b:	e8 50 17 00 00       	call   c0012d60 <File::open(FileOpenMode)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	85 c0                	test   eax,eax
c0011615:	0f 84 4e fe ff ff    	je     c0011469 <Virt::setupPageSwapping(int)+0x40>
c001161b:	83 ec 0c             	sub    esp,0xc
c001161e:	68 0a a7 02 c0       	push   0xc002a70a
c0011623:	e8 51 89 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0011628:	83 c4 10             	add    esp,0x10
c001162b:	e9 39 fe ff ff       	jmp    c0011469 <Virt::setupPageSwapping(int)+0x40>
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	68 0a a7 02 c0       	push   0xc002a70a
c0011638:	e8 3c 89 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	e9 0a ff ff ff       	jmp    c001154f <Virt::setupPageSwapping(int)+0x126>
c0011645:	90                   	nop

c0011646 <VAS::VAS()>:
c0011646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001164a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011655:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001165c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011660:	a3 f0 de 02 c0       	mov    ds:0xc002def0,eax
c0011665:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011669:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001166d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011671:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011678:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001167f:	90                   	nop
c0011680:	c3                   	ret    
c0011681:	90                   	nop

c0011682 <VAS::VAS(VAS*)>:
c0011682:	83 ec 0c             	sub    esp,0xc
c0011685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011689:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011694:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001169b:	83 ec 0c             	sub    esp,0xc
c001169e:	68 1c a5 02 c0       	push   0xc002a51c
c00116a3:	e8 d1 88 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c00116a8:	83 c4 10             	add    esp,0x10
c00116ab:	90                   	nop
c00116ac:	83 c4 0c             	add    esp,0xc
c00116af:	c3                   	ret    

c00116b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00116b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116b4:	89 c2                	mov    edx,eax
c00116b6:	c1 e8 0a             	shr    eax,0xa
c00116b9:	c1 ea 16             	shr    edx,0x16
c00116bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00116c1:	19 c9                	sbb    ecx,ecx
c00116c3:	c1 e2 0c             	shl    edx,0xc
c00116c6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00116cc:	25 fc 0f 00 00       	and    eax,0xffc
c00116d1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00116d8:	01 d0                	add    eax,edx
c00116da:	c3                   	ret    
c00116db:	90                   	nop

c00116dc <VAS::getPageTableEntry(unsigned long)>:
c00116dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116e0:	89 ca                	mov    edx,ecx
c00116e2:	c1 e9 0a             	shr    ecx,0xa
c00116e5:	c1 ea 16             	shr    edx,0x16
c00116e8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00116ee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00116f4:	c1 e0 0c             	shl    eax,0xc
c00116f7:	8d 04 08             	lea    eax,[eax+ecx*1]
c00116fa:	c3                   	ret    

c00116fb <Virt::freeKernelVirtualPages(unsigned long)>:
c00116fb:	57                   	push   edi
c00116fc:	56                   	push   esi
c00116fd:	be 01 00 00 00       	mov    esi,0x1
c0011702:	53                   	push   ebx
c0011703:	83 ec 10             	sub    esp,0x10
c0011706:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001170a:	c1 eb 0c             	shr    ebx,0xc
c001170d:	eb 3f                	jmp    c001174e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001170f:	83 ec 08             	sub    esp,0x8
c0011712:	57                   	push   edi
c0011713:	ff 35 f0 de 02 c0    	push   DWORD PTR ds:0xc002def0
c0011719:	e8 be ff ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	8b 00                	mov    eax,DWORD PTR [eax]
c0011723:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011727:	f6 c4 04             	test   ah,0x4
c001172a:	75 5f                	jne    c001178b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001172c:	80 fa 04             	cmp    dl,0x4
c001172f:	74 78                	je     c00117a9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011731:	80 fa 02             	cmp    dl,0x2
c0011734:	0f 84 88 00 00 00    	je     c00117c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001173a:	80 fa 03             	cmp    dl,0x3
c001173d:	0f 84 ad 00 00 00    	je     c00117f0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011743:	fe ca                	dec    dl
c0011745:	0f 84 92 00 00 00    	je     c00117dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001174b:	43                   	inc    ebx
c001174c:	31 f6                	xor    esi,esi
c001174e:	53                   	push   ebx
c001174f:	89 df                	mov    edi,ebx
c0011751:	e8 a5 fa ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011756:	c1 e7 0c             	shl    edi,0xc
c0011759:	59                   	pop    ecx
c001175a:	84 c0                	test   al,al
c001175c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011760:	75 ad                	jne    c001170f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011762:	83 ec 0c             	sub    esp,0xc
c0011765:	68 2b a7 02 c0       	push   0xc002a72b
c001176a:	e8 0a 88 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c001176f:	58                   	pop    eax
c0011770:	5a                   	pop    edx
c0011771:	57                   	push   edi
c0011772:	ff 35 f0 de 02 c0    	push   DWORD PTR ds:0xc002def0
c0011778:	e8 5f ff ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	8b 00                	mov    eax,DWORD PTR [eax]
c0011782:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011786:	f6 c4 04             	test   ah,0x4
c0011789:	74 c0                	je     c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001178b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001178f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011794:	83 ec 0c             	sub    esp,0xc
c0011797:	50                   	push   eax
c0011798:	e8 87 e1 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00117a4:	80 fa 04             	cmp    dl,0x4
c00117a7:	75 88                	jne    c0011731 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00117a9:	89 f0                	mov    eax,esi
c00117ab:	84 c0                	test   al,al
c00117ad:	75 47                	jne    c00117f6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00117af:	c7 44 24 20 40 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a540
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	5b                   	pop    ebx
c00117bb:	5e                   	pop    esi
c00117bc:	5f                   	pop    edi
c00117bd:	e9 b7 87 00 00       	jmp    c0019f79 <Krnl::panic(char const*)>
c00117c2:	89 f0                	mov    eax,esi
c00117c4:	84 c0                	test   al,al
c00117c6:	75 15                	jne    c00117dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00117c8:	83 ec 0c             	sub    esp,0xc
c00117cb:	68 47 a7 02 c0       	push   0xc002a747
c00117d0:	e8 a4 87 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	e9 6e ff ff ff       	jmp    c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00117dd:	83 ec 08             	sub    esp,0x8
c00117e0:	6a 00                	push   0x0
c00117e2:	53                   	push   ebx
c00117e3:	e8 de f9 ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	e9 5b ff ff ff       	jmp    c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00117f0:	89 f0                	mov    eax,esi
c00117f2:	84 c0                	test   al,al
c00117f4:	75 15                	jne    c001180b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00117f6:	83 ec 08             	sub    esp,0x8
c00117f9:	6a 00                	push   0x0
c00117fb:	53                   	push   ebx
c00117fc:	e8 c5 f9 ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	5b                   	pop    ebx
c0011808:	5e                   	pop    esi
c0011809:	5f                   	pop    edi
c001180a:	c3                   	ret    
c001180b:	c7 44 24 20 63 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a763
c0011813:	83 c4 10             	add    esp,0x10
c0011816:	5b                   	pop    ebx
c0011817:	5e                   	pop    esi
c0011818:	5f                   	pop    edi
c0011819:	e9 5b 87 00 00       	jmp    c0019f79 <Krnl::panic(char const*)>

c001181e <VAS::freeAllocatedPages(unsigned long)>:
c001181e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011822:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011826:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001182a:	74 09                	je     c0011835 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001182c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011830:	e9 c6 fe ff ff       	jmp    c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011835:	c7 44 24 04 64 a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a564
c001183d:	e9 5b 0f 00 00       	jmp    c001279d <Dbg::kprintf(char const*, ...)>

c0011842 <VAS::virtualToPhysical(unsigned long)>:
c0011842:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011846:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001184a:	e8 8d fe ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001184f:	5a                   	pop    edx
c0011850:	8b 00                	mov    eax,DWORD PTR [eax]
c0011852:	59                   	pop    ecx
c0011853:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011858:	c3                   	ret    
c0011859:	90                   	nop

c001185a <VAS::reflagRange(unsigned long, int, int, int)>:
c001185a:	55                   	push   ebp
c001185b:	57                   	push   edi
c001185c:	56                   	push   esi
c001185d:	53                   	push   ebx
c001185e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011862:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011866:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001186a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001186e:	85 db                	test   ebx,ebx
c0011870:	7e 22                	jle    c0011894 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011872:	c1 e3 0c             	shl    ebx,0xc
c0011875:	01 f3                	add    ebx,esi
c0011877:	56                   	push   esi
c0011878:	81 c6 00 10 00 00    	add    esi,0x1000
c001187e:	55                   	push   ebp
c001187f:	e8 58 fe ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0011884:	5a                   	pop    edx
c0011885:	59                   	pop    ecx
c0011886:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011888:	21 f9                	and    ecx,edi
c001188a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001188e:	39 f3                	cmp    ebx,esi
c0011890:	89 08                	mov    DWORD PTR [eax],ecx
c0011892:	75 e3                	jne    c0011877 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011894:	5b                   	pop    ebx
c0011895:	5e                   	pop    esi
c0011896:	5f                   	pop    edi
c0011897:	5d                   	pop    ebp
c0011898:	c3                   	ret    
c0011899:	90                   	nop

c001189a <VAS::setToWriteCombining(unsigned long, int)>:
c001189a:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001189f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00118a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00118ac:	75 01                	jne    c00118af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00118ae:	c3                   	ret    
c00118af:	68 80 00 00 00       	push   0x80
c00118b4:	6a ff                	push   0xffffffff
c00118b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118c2:	e8 93 ff ff ff       	call   c001185a <VAS::reflagRange(unsigned long, int, int, int)>
c00118c7:	83 c4 14             	add    esp,0x14
c00118ca:	c3                   	ret    
c00118cb:	90                   	nop

c00118cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00118cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00118d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00118d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118dc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00118df:	19 c0                	sbb    eax,eax
c00118e1:	83 ca 03             	or     edx,0x3
c00118e4:	83 e0 fc             	and    eax,0xfffffffc
c00118e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00118ee:	0f 20 d8             	mov    eax,cr3
c00118f1:	0f 22 d8             	mov    cr3,eax
c00118f4:	c3                   	ret    
c00118f5:	90                   	nop

c00118f6 <VAS::~VAS()>:
c00118f6:	83 ec 2c             	sub    esp,0x2c
c00118f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011901:	fa                   	cli    
c0011902:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0011907:	40                   	inc    eax
c0011908:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001190d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011912:	8b 00                	mov    eax,DWORD PTR [eax]
c0011914:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011917:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001191d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011921:	6a 01                	push   0x1
c0011923:	50                   	push   eax
c0011924:	e8 a3 ff ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c0011929:	83 c4 0c             	add    esp,0xc
c001192c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011934:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001193c:	0f 8f d4 00 00 00    	jg     c0011a16 <VAS::~VAS()+0x120>
c0011942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011946:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011949:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001194d:	c1 e2 02             	shl    edx,0x2
c0011950:	01 d0                	add    eax,edx
c0011952:	8b 00                	mov    eax,DWORD PTR [eax]
c0011954:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001195c:	83 e0 01             	and    eax,0x1
c001195f:	0f 84 a8 00 00 00    	je     c0011a0d <VAS::~VAS()+0x117>
c0011965:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001196d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011975:	7f 72                	jg     c00119e9 <VAS::~VAS()+0xf3>
c0011977:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001197b:	c1 e0 0a             	shl    eax,0xa
c001197e:	89 c2                	mov    edx,eax
c0011980:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011984:	01 d0                	add    eax,edx
c0011986:	c1 e0 0c             	shl    eax,0xc
c0011989:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001198d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011992:	8b 00                	mov    eax,DWORD PTR [eax]
c0011994:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011997:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001199d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00119a1:	6a 01                	push   0x1
c00119a3:	50                   	push   eax
c00119a4:	e8 07 fd ff ff       	call   c00116b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00119a9:	83 c4 0c             	add    esp,0xc
c00119ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00119b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119be:	25 01 04 00 00       	and    eax,0x401
c00119c3:	3d 01 04 00 00       	cmp    eax,0x401
c00119c8:	75 19                	jne    c00119e3 <VAS::~VAS()+0xed>
c00119ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119d3:	83 ec 0c             	sub    esp,0xc
c00119d6:	50                   	push   eax
c00119d7:	e8 48 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119dc:	83 c4 10             	add    esp,0x10
c00119df:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119e3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00119e7:	eb 84                	jmp    c001196d <VAS::~VAS()+0x77>
c00119e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ed:	25 00 04 00 00       	and    eax,0x400
c00119f2:	74 19                	je     c0011a0d <VAS::~VAS()+0x117>
c00119f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	50                   	push   eax
c0011a01:	e8 1e df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a06:	83 c4 10             	add    esp,0x10
c0011a09:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a0d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011a11:	e9 1e ff ff ff       	jmp    c0011934 <VAS::~VAS()+0x3e>
c0011a16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	50                   	push   eax
c0011a21:	e8 d5 fc ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a2d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	50                   	push   eax
c0011a34:	e8 eb de ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a39:	83 c4 10             	add    esp,0x10
c0011a3c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a44:	c1 e0 02             	shl    eax,0x2
c0011a47:	83 ec 08             	sub    esp,0x8
c0011a4a:	50                   	push   eax
c0011a4b:	68 88 a5 02 c0       	push   0xc002a588
c0011a50:	e8 48 0d 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0011a5d:	48                   	dec    eax
c0011a5e:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c0011a63:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0011a68:	85 c0                	test   eax,eax
c0011a6a:	75 01                	jne    c0011a6d <VAS::~VAS()+0x177>
c0011a6c:	fb                   	sti    
c0011a6d:	90                   	nop
c0011a6e:	83 c4 2c             	add    esp,0x2c
c0011a71:	c3                   	ret    

c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011a72:	55                   	push   ebp
c0011a73:	57                   	push   edi
c0011a74:	56                   	push   esi
c0011a75:	53                   	push   ebx
c0011a76:	83 ec 1c             	sub    esp,0x1c
c0011a79:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a81:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011a87:	77 08                	ja     c0011a91 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011a89:	0f 20 d8             	mov    eax,cr3
c0011a8c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011a8f:	75 47                	jne    c0011ad8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011a91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a95:	09 d8                	or     eax,ebx
c0011a97:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a9c:	75 57                	jne    c0011af5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a9e:	89 de                	mov    esi,ebx
c0011aa0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011aa3:	c1 ee 16             	shr    esi,0x16
c0011aa6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011aad:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011ab1:	74 54                	je     c0011b07 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ab3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ab7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011abd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011ac1:	c1 e6 0c             	shl    esi,0xc
c0011ac4:	c1 eb 0a             	shr    ebx,0xa
c0011ac7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011acd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ad0:	83 c4 1c             	add    esp,0x1c
c0011ad3:	5b                   	pop    ebx
c0011ad4:	5e                   	pop    esi
c0011ad5:	5f                   	pop    edi
c0011ad6:	5d                   	pop    ebp
c0011ad7:	c3                   	ret    
c0011ad8:	83 ec 0c             	sub    esp,0xc
c0011adb:	68 a8 a5 02 c0       	push   0xc002a5a8
c0011ae0:	e8 b8 0c 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0011ae5:	83 c4 10             	add    esp,0x10
c0011ae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aec:	09 d8                	or     eax,ebx
c0011aee:	a9 ff 0f 00 00       	test   eax,0xfff
c0011af3:	74 a9                	je     c0011a9e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011af5:	83 ec 0c             	sub    esp,0xc
c0011af8:	68 10 a6 02 c0       	push   0xc002a610
c0011afd:	e8 77 84 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	eb 97                	jmp    c0011a9e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011b07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011b0b:	e8 85 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b10:	83 ec 0c             	sub    esp,0xc
c0011b13:	89 c5                	mov    ebp,eax
c0011b15:	8b 0d f0 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002def0
c0011b1b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011b1f:	6a 01                	push   0x1
c0011b21:	e8 f9 f6 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011b26:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011b2d:	6a 01                	push   0x1
c0011b2f:	50                   	push   eax
c0011b30:	55                   	push   ebp
c0011b31:	81 cd 07 04 00 00    	or     ebp,0x407
c0011b37:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b3b:	51                   	push   ecx
c0011b3c:	e8 27 02 00 00       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b41:	83 c4 1c             	add    esp,0x1c
c0011b44:	68 00 10 00 00       	push   0x1000
c0011b49:	6a 00                	push   0x0
c0011b4b:	50                   	push   eax
c0011b4c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011b50:	e8 fb eb fe ff       	call   c0000750 <memset>
c0011b55:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011b59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011b5c:	e8 9a fb ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011b61:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b65:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011b6e:	e9 40 ff ff ff       	jmp    c0011ab3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011b73:	90                   	nop

c0011b74 <VAS::allocatePages(int, int)>:
c0011b74:	55                   	push   ebp
c0011b75:	57                   	push   edi
c0011b76:	56                   	push   esi
c0011b77:	53                   	push   ebx
c0011b78:	83 ec 1c             	sub    esp,0x1c
c0011b7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b7f:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0011b84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b8a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011b90:	83 e0 01             	and    eax,0x1
c0011b93:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b97:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b9b:	0f 85 cc 00 00 00    	jne    c0011c6d <VAS::allocatePages(int, int)+0xf9>
c0011ba1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ba8:	85 c0                	test   eax,eax
c0011baa:	0f 84 a1 00 00 00    	je     c0011c51 <VAS::allocatePages(int, int)+0xdd>
c0011bb0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011bb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bb8:	c1 e6 0c             	shl    esi,0xc
c0011bbb:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011bbf:	85 c0                	test   eax,eax
c0011bc1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011bc4:	7e 33                	jle    c0011bf9 <VAS::allocatePages(int, int)+0x85>
c0011bc6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011bca:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bce:	81 cd 00 04 00 00    	or     ebp,0x400
c0011bd4:	e8 bc dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011bd9:	55                   	push   ebp
c0011bda:	53                   	push   ebx
c0011bdb:	50                   	push   eax
c0011bdc:	57                   	push   edi
c0011bdd:	e8 90 fe ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011be2:	83 c4 10             	add    esp,0x10
c0011be5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bea:	74 03                	je     c0011bef <VAS::allocatePages(int, int)+0x7b>
c0011bec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bef:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bf5:	39 de                	cmp    esi,ebx
c0011bf7:	75 db                	jne    c0011bd4 <VAS::allocatePages(int, int)+0x60>
c0011bf9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bfe:	75 12                	jne    c0011c12 <VAS::allocatePages(int, int)+0x9e>
c0011c00:	0f 20 d8             	mov    eax,cr3
c0011c03:	0f 22 d8             	mov    cr3,eax
c0011c06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c0a:	83 c4 1c             	add    esp,0x1c
c0011c0d:	5b                   	pop    ebx
c0011c0e:	5e                   	pop    esi
c0011c0f:	5f                   	pop    edi
c0011c10:	5d                   	pop    ebp
c0011c11:	c3                   	ret    
c0011c12:	c1 ee 0a             	shr    esi,0xa
c0011c15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c19:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011c1f:	c1 eb 0a             	shr    ebx,0xa
c0011c22:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011c28:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c2e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c34:	39 c3                	cmp    ebx,eax
c0011c36:	77 ce                	ja     c0011c06 <VAS::allocatePages(int, int)+0x92>
c0011c38:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c41:	39 d8                	cmp    eax,ebx
c0011c43:	73 f3                	jae    c0011c38 <VAS::allocatePages(int, int)+0xc4>
c0011c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c49:	83 c4 1c             	add    esp,0x1c
c0011c4c:	5b                   	pop    ebx
c0011c4d:	5e                   	pop    esi
c0011c4e:	5f                   	pop    edi
c0011c4f:	5d                   	pop    ebp
c0011c50:	c3                   	ret    
c0011c51:	83 ec 0c             	sub    esp,0xc
c0011c54:	68 34 a6 02 c0       	push   0xc002a634
c0011c59:	e8 1b 83 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0011c5e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	e9 43 ff ff ff       	jmp    c0011bb0 <VAS::allocatePages(int, int)+0x3c>
c0011c6d:	83 ec 0c             	sub    esp,0xc
c0011c70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011c74:	e8 a6 f5 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011c79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011c85:	0f 87 9b 00 00 00    	ja     c0011d26 <VAS::allocatePages(int, int)+0x1b2>
c0011c8b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011c8f:	85 d2                	test   edx,edx
c0011c91:	7e 3c                	jle    c0011ccf <VAS::allocatePages(int, int)+0x15b>
c0011c93:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c97:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c9f:	c1 e5 0c             	shl    ebp,0xc
c0011ca2:	81 ce 00 04 00 00    	or     esi,0x400
c0011ca8:	01 dd                	add    ebp,ebx
c0011caa:	e8 e6 dc ff ff       	call   c000f995 <Phys::allocatePage()>
c0011caf:	56                   	push   esi
c0011cb0:	53                   	push   ebx
c0011cb1:	50                   	push   eax
c0011cb2:	57                   	push   edi
c0011cb3:	e8 ba fd ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cc0:	74 03                	je     c0011cc5 <VAS::allocatePages(int, int)+0x151>
c0011cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ccb:	39 dd                	cmp    ebp,ebx
c0011ccd:	75 db                	jne    c0011caa <VAS::allocatePages(int, int)+0x136>
c0011ccf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cd4:	0f 84 26 ff ff ff    	je     c0011c00 <VAS::allocatePages(int, int)+0x8c>
c0011cda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011cde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ce2:	89 d3                	mov    ebx,edx
c0011ce4:	c1 e0 0c             	shl    eax,0xc
c0011ce7:	c1 eb 0a             	shr    ebx,0xa
c0011cea:	01 d0                	add    eax,edx
c0011cec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cf2:	c1 e8 0a             	shr    eax,0xa
c0011cf5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cfb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d00:	2d 00 00 40 00       	sub    eax,0x400000
c0011d05:	39 c3                	cmp    ebx,eax
c0011d07:	0f 87 f9 fe ff ff    	ja     c0011c06 <VAS::allocatePages(int, int)+0x92>
c0011d0d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d10:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d16:	39 d8                	cmp    eax,ebx
c0011d18:	73 f3                	jae    c0011d0d <VAS::allocatePages(int, int)+0x199>
c0011d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d1e:	83 c4 1c             	add    esp,0x1c
c0011d21:	5b                   	pop    ebx
c0011d22:	5e                   	pop    esi
c0011d23:	5f                   	pop    edi
c0011d24:	5d                   	pop    ebp
c0011d25:	c3                   	ret    
c0011d26:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0011d2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d31:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011d38:	0f 84 4d ff ff ff    	je     c0011c8b <VAS::allocatePages(int, int)+0x117>
c0011d3e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011d46:	e9 40 ff ff ff       	jmp    c0011c8b <VAS::allocatePages(int, int)+0x117>
c0011d4b:	90                   	nop

c0011d4c <VAS::setCPUSpecific(unsigned long)>:
c0011d4c:	83 ec 0c             	sub    esp,0xc
c0011d4f:	6a 05                	push   0x5
c0011d51:	68 00 00 40 c2       	push   0xc2400000
c0011d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d5e:	e8 0f fd ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d63:	83 c4 1c             	add    esp,0x1c
c0011d66:	c3                   	ret    
c0011d67:	90                   	nop

c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011d68:	55                   	push   ebp
c0011d69:	57                   	push   edi
c0011d6a:	56                   	push   esi
c0011d6b:	53                   	push   ebx
c0011d6c:	83 ec 1c             	sub    esp,0x1c
c0011d6f:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0011d74:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d7e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d82:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011d88:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011d8c:	83 e0 01             	and    eax,0x1
c0011d8f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011d93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d97:	85 c0                	test   eax,eax
c0011d99:	7e 39                	jle    c0011dd4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d9f:	89 f3                	mov    ebx,esi
c0011da1:	c1 e0 0c             	shl    eax,0xc
c0011da4:	01 f0                	add    eax,esi
c0011da6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011daa:	55                   	push   ebp
c0011dab:	53                   	push   ebx
c0011dac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011db0:	29 f0                	sub    eax,esi
c0011db2:	01 d8                	add    eax,ebx
c0011db4:	50                   	push   eax
c0011db5:	57                   	push   edi
c0011db6:	e8 b7 fc ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011dbb:	83 c4 10             	add    esp,0x10
c0011dbe:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011dc3:	74 03                	je     c0011dc8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011dc5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011dc8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011dce:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011dd2:	75 d6                	jne    c0011daa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011dd4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011dd9:	75 10                	jne    c0011deb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011ddb:	0f 20 d8             	mov    eax,cr3
c0011dde:	0f 22 d8             	mov    cr3,eax
c0011de1:	83 c4 1c             	add    esp,0x1c
c0011de4:	89 f0                	mov    eax,esi
c0011de6:	5b                   	pop    ebx
c0011de7:	5e                   	pop    esi
c0011de8:	5f                   	pop    edi
c0011de9:	5d                   	pop    ebp
c0011dea:	c3                   	ret    
c0011deb:	89 f3                	mov    ebx,esi
c0011ded:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011df1:	c1 eb 0a             	shr    ebx,0xa
c0011df4:	c1 e0 0c             	shl    eax,0xc
c0011df7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011dfd:	01 f0                	add    eax,esi
c0011dff:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e05:	c1 e8 0a             	shr    eax,0xa
c0011e08:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e0d:	2d 00 00 40 00       	sub    eax,0x400000
c0011e12:	39 c3                	cmp    ebx,eax
c0011e14:	77 cb                	ja     c0011de1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011e16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e19:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e1f:	39 d8                	cmp    eax,ebx
c0011e21:	73 f3                	jae    c0011e16 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011e23:	83 c4 1c             	add    esp,0x1c
c0011e26:	89 f0                	mov    eax,esi
c0011e28:	5b                   	pop    ebx
c0011e29:	5e                   	pop    esi
c0011e2a:	5f                   	pop    edi
c0011e2b:	5d                   	pop    ebp
c0011e2c:	c3                   	ret    
c0011e2d:	90                   	nop

c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011e2e:	55                   	push   ebp
c0011e2f:	57                   	push   edi
c0011e30:	56                   	push   esi
c0011e31:	53                   	push   ebx
c0011e32:	83 ec 1c             	sub    esp,0x1c
c0011e35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e39:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011e3d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011e41:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011e45:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e4a:	75 4a                	jne    c0011e96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011e4c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011e50:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e53:	c1 eb 16             	shr    ebx,0x16
c0011e56:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011e5d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011e61:	74 4d                	je     c0011eb0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011e63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e67:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011e6b:	c1 e8 0a             	shr    eax,0xa
c0011e6e:	80 fa 01             	cmp    dl,0x1
c0011e71:	19 d2                	sbb    edx,edx
c0011e73:	c1 e3 0c             	shl    ebx,0xc
c0011e76:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011e7a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011e80:	25 fc 0f 00 00       	and    eax,0xffc
c0011e85:	01 d8                	add    eax,ebx
c0011e87:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011e8e:	83 c4 1c             	add    esp,0x1c
c0011e91:	5b                   	pop    ebx
c0011e92:	5e                   	pop    esi
c0011e93:	5f                   	pop    edi
c0011e94:	5d                   	pop    ebp
c0011e95:	c3                   	ret    
c0011e96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e9a:	83 ec 0c             	sub    esp,0xc
c0011e9d:	68 60 a6 02 c0       	push   0xc002a660
c0011ea2:	e8 d2 80 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0011ea7:	83 c4 10             	add    esp,0x10
c0011eaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011eae:	eb 9c                	jmp    c0011e4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011eb0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011eb4:	e8 dc da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011eb9:	83 ec 0c             	sub    esp,0xc
c0011ebc:	89 c5                	mov    ebp,eax
c0011ebe:	8b 0d f0 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002def0
c0011ec4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ec8:	6a 01                	push   0x1
c0011eca:	e8 50 f3 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011ecf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011ed6:	6a 01                	push   0x1
c0011ed8:	50                   	push   eax
c0011ed9:	55                   	push   ebp
c0011eda:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ee0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ee4:	51                   	push   ecx
c0011ee5:	e8 7e fe ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eea:	83 c4 1c             	add    esp,0x1c
c0011eed:	68 00 10 00 00       	push   0x1000
c0011ef2:	6a 00                	push   0x0
c0011ef4:	50                   	push   eax
c0011ef5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ef9:	e8 52 e8 fe ff       	call   c0000750 <memset>
c0011efe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f02:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f05:	e8 f1 f7 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011f0a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011f13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f17:	e9 47 ff ff ff       	jmp    c0011e63 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011f1c <VAS::VAS(bool)>:
c0011f1c:	53                   	push   ebx
c0011f1d:	83 ec 28             	sub    esp,0x28
c0011f20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011f28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f42:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011f46:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011f49:	e8 47 da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011f4e:	89 c2                	mov    edx,eax
c0011f50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f54:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011f57:	8b 1d f0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002def0
c0011f5d:	83 ec 0c             	sub    esp,0xc
c0011f60:	6a 01                	push   0x1
c0011f62:	e8 b8 f2 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	89 c2                	mov    edx,eax
c0011f6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011f73:	83 ec 0c             	sub    esp,0xc
c0011f76:	6a 03                	push   0x3
c0011f78:	6a 01                	push   0x1
c0011f7a:	52                   	push   edx
c0011f7b:	50                   	push   eax
c0011f7c:	53                   	push   ebx
c0011f7d:	e8 e6 fd ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f82:	83 c4 20             	add    esp,0x20
c0011f85:	89 c2                	mov    edx,eax
c0011f87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f8b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011f8e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f96:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f9e:	7f 1c                	jg     c0011fbc <VAS::VAS(bool)+0xa0>
c0011fa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fa4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fa7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011fab:	c1 e2 02             	shl    edx,0x2
c0011fae:	01 d0                	add    eax,edx
c0011fb0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fb6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fba:	eb da                	jmp    c0011f96 <VAS::VAS(bool)+0x7a>
c0011fbc:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011fc4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011fcc:	7f 7a                	jg     c0012048 <VAS::VAS(bool)+0x12c>
c0011fce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fd2:	2d 00 02 00 00       	sub    eax,0x200
c0011fd7:	c1 e0 0c             	shl    eax,0xc
c0011fda:	83 c8 03             	or     eax,0x3
c0011fdd:	89 c2                	mov    edx,eax
c0011fdf:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0011fe4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fea:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ff0:	83 e0 10             	and    eax,0x10
c0011ff3:	84 c0                	test   al,al
c0011ff5:	74 07                	je     c0011ffe <VAS::VAS(bool)+0xe2>
c0011ff7:	b8 00 01 00 00       	mov    eax,0x100
c0011ffc:	eb 05                	jmp    c0012003 <VAS::VAS(bool)+0xe7>
c0011ffe:	b8 00 00 00 00       	mov    eax,0x0
c0012003:	09 d0                	or     eax,edx
c0012005:	89 c1                	mov    ecx,eax
c0012007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001200e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012012:	c1 e2 02             	shl    edx,0x2
c0012015:	01 d0                	add    eax,edx
c0012017:	89 ca                	mov    edx,ecx
c0012019:	89 10                	mov    DWORD PTR [eax],edx
c001201b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001201f:	2d 40 03 00 00       	sub    eax,0x340
c0012024:	83 f8 7f             	cmp    eax,0x7f
c0012027:	77 16                	ja     c001203f <VAS::VAS(bool)+0x123>
c0012029:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012030:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012034:	c1 e2 02             	shl    edx,0x2
c0012037:	01 d0                	add    eax,edx
c0012039:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001203f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012043:	e9 7c ff ff ff       	jmp    c0011fc4 <VAS::VAS(bool)+0xa8>
c0012048:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001204d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012053:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012059:	83 e0 10             	and    eax,0x10
c001205c:	84 c0                	test   al,al
c001205e:	74 07                	je     c0012067 <VAS::VAS(bool)+0x14b>
c0012060:	b8 03 41 00 00       	mov    eax,0x4103
c0012065:	eb 05                	jmp    c001206c <VAS::VAS(bool)+0x150>
c0012067:	b8 03 40 00 00       	mov    eax,0x4003
c001206c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012070:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012073:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012079:	89 02                	mov    DWORD PTR [edx],eax
c001207b:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0012080:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012086:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001208c:	83 ec 08             	sub    esp,0x8
c001208f:	50                   	push   eax
c0012090:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012094:	e8 b3 fc ff ff       	call   c0011d4c <VAS::setCPUSpecific(unsigned long)>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120a0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120a3:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00120a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120ae:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00120b4:	83 e0 10             	and    eax,0x10
c00120b7:	84 c0                	test   al,al
c00120b9:	74 07                	je     c00120c2 <VAS::VAS(bool)+0x1a6>
c00120bb:	b8 00 01 00 00       	mov    eax,0x100
c00120c0:	eb 05                	jmp    c00120c7 <VAS::VAS(bool)+0x1ab>
c00120c2:	b8 00 00 00 00       	mov    eax,0x0
c00120c7:	09 c2                	or     edx,eax
c00120c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120d0:	05 fc 0f 00 00       	add    eax,0xffc
c00120d5:	83 ca 03             	or     edx,0x3
c00120d8:	89 10                	mov    DWORD PTR [eax],edx
c00120da:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00120df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e5:	83 ec 0c             	sub    esp,0xc
c00120e8:	50                   	push   eax
c00120e9:	e8 e8 1d 00 00       	call   c0013ed6 <Device::getName()>
c00120ee:	83 c4 10             	add    esp,0x10
c00120f1:	83 ec 08             	sub    esp,0x8
c00120f4:	68 7d a7 02 c0       	push   0xc002a77d
c00120f9:	50                   	push   eax
c00120fa:	e8 99 e7 fe ff       	call   c0000898 <strcmp>
c00120ff:	83 c4 10             	add    esp,0x10
c0012102:	85 c0                	test   eax,eax
c0012104:	0f 94 c0             	sete   al
c0012107:	84 c0                	test   al,al
c0012109:	0f 84 87 00 00 00    	je     c0012196 <VAS::VAS(bool)+0x27a>
c001210f:	fa                   	cli    
c0012110:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0012115:	40                   	inc    eax
c0012116:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001211b:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0012120:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012126:	05 7c 09 00 00       	add    eax,0x97c
c001212b:	83 ec 0c             	sub    esp,0xc
c001212e:	50                   	push   eax
c001212f:	e8 ea ce ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012134:	83 c4 10             	add    esp,0x10
c0012137:	25 00 f0 ff ff       	and    eax,0xfffff000
c001213c:	89 c3                	mov    ebx,eax
c001213e:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0012143:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012149:	05 7c 09 00 00       	add    eax,0x97c
c001214e:	83 ec 0c             	sub    esp,0xc
c0012151:	50                   	push   eax
c0012152:	e8 c7 ce ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012157:	83 c4 10             	add    esp,0x10
c001215a:	83 ec 08             	sub    esp,0x8
c001215d:	50                   	push   eax
c001215e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012162:	e8 75 f5 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0012167:	83 c4 10             	add    esp,0x10
c001216a:	8b 00                	mov    eax,DWORD PTR [eax]
c001216c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012171:	6a 11                	push   0x11
c0012173:	53                   	push   ebx
c0012174:	50                   	push   eax
c0012175:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012179:	e8 f4 f8 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001217e:	83 c4 10             	add    esp,0x10
c0012181:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0012186:	48                   	dec    eax
c0012187:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001218c:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0012191:	85 c0                	test   eax,eax
c0012193:	75 01                	jne    c0012196 <VAS::VAS(bool)+0x27a>
c0012195:	fb                   	sti    
c0012196:	90                   	nop
c0012197:	83 c4 28             	add    esp,0x28
c001219a:	5b                   	pop    ebx
c001219b:	c3                   	ret    

c001219c <VAS::evict(unsigned long)>:
c001219c:	55                   	push   ebp
c001219d:	57                   	push   edi
c001219e:	56                   	push   esi
c001219f:	53                   	push   ebx
c00121a0:	83 ec 28             	sub    esp,0x28
c00121a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121a7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00121ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121af:	68 8b a7 02 c0       	push   0xc002a78b
c00121b4:	e8 e4 05 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00121b9:	e8 a2 f1 ff ff       	call   c0011360 <Virt::allocateSwapfilePage()>
c00121be:	5a                   	pop    edx
c00121bf:	89 c7                	mov    edi,eax
c00121c1:	59                   	pop    ecx
c00121c2:	50                   	push   eax
c00121c3:	68 a8 a7 02 c0       	push   0xc002a7a8
c00121c8:	e8 d0 05 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00121cd:	83 c4 10             	add    esp,0x10
c00121d0:	8b 1d 2c cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd2c
c00121d6:	85 db                	test   ebx,ebx
c00121d8:	7e 3d                	jle    c0012217 <VAS::evict(unsigned long)+0x7b>
c00121da:	89 ee                	mov    esi,ebp
c00121dc:	31 db                	xor    ebx,ebx
c00121de:	83 ec 0c             	sub    esp,0xc
c00121e1:	57                   	push   edi
c00121e2:	e8 67 f1 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c00121e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00121ea:	01 d8                	add    eax,ebx
c00121ec:	6a 01                	push   0x1
c00121ee:	31 d2                	xor    edx,edx
c00121f0:	43                   	inc    ebx
c00121f1:	52                   	push   edx
c00121f2:	81 c6 00 02 00 00    	add    esi,0x200
c00121f8:	50                   	push   eax
c00121f9:	0f be 05 38 cd 02 c0 	movsx  eax,BYTE PTR ds:0xc002cd38
c0012200:	ff 34 85 7c e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1d84]
c0012207:	e8 58 3f 00 00       	call   c0016164 <LogicalDisk::write(unsigned long long, int, void*)>
c001220c:	83 c4 20             	add    esp,0x20
c001220f:	39 1d 2c cd 02 c0    	cmp    DWORD PTR ds:0xc002cd2c,ebx
c0012215:	7f c7                	jg     c00121de <VAS::evict(unsigned long)+0x42>
c0012217:	83 ec 08             	sub    esp,0x8
c001221a:	c1 e7 0b             	shl    edi,0xb
c001221d:	55                   	push   ebp
c001221e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012222:	e8 b5 f4 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0012227:	5a                   	pop    edx
c0012228:	89 c6                	mov    esi,eax
c001222a:	59                   	pop    ecx
c001222b:	ff 30                	push   DWORD PTR [eax]
c001222d:	68 b8 a7 02 c0       	push   0xc002a7b8
c0012232:	e8 66 05 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012237:	8b 16                	mov    edx,DWORD PTR [esi]
c0012239:	89 d3                	mov    ebx,edx
c001223b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012241:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012247:	09 d7                	or     edi,edx
c0012249:	89 3e                	mov    DWORD PTR [esi],edi
c001224b:	5e                   	pop    esi
c001224c:	58                   	pop    eax
c001224d:	57                   	push   edi
c001224e:	68 d1 a7 02 c0       	push   0xc002a7d1
c0012253:	e8 45 05 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001225b:	ff 05 e8 de 02 c0    	inc    DWORD PTR ds:0xc002dee8
c0012261:	e8 be d6 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0012266:	0f 20 d8             	mov    eax,cr3
c0012269:	0f 22 d8             	mov    cr3,eax
c001226c:	ff 35 e8 de 02 c0    	push   DWORD PTR ds:0xc002dee8
c0012272:	55                   	push   ebp
c0012273:	53                   	push   ebx
c0012274:	68 84 a6 02 c0       	push   0xc002a684
c0012279:	e8 1f 05 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001227e:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c0012283:	c7 44 24 50 ea a7 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a7ea
c001228b:	8d 50 01             	lea    edx,[eax+0x1]
c001228e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012292:	89 15 e4 de 02 c0    	mov    DWORD PTR ds:0xc002dee4,edx
c0012298:	83 c4 3c             	add    esp,0x3c
c001229b:	5b                   	pop    ebx
c001229c:	5e                   	pop    esi
c001229d:	5f                   	pop    edi
c001229e:	5d                   	pop    ebp
c001229f:	e9 f9 04 00 00       	jmp    c001279d <Dbg::kprintf(char const*, ...)>

c00122a4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00122a4:	55                   	push   ebp
c00122a5:	57                   	push   edi
c00122a6:	56                   	push   esi
c00122a7:	53                   	push   ebx
c00122a8:	83 ec 24             	sub    esp,0x24
c00122ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00122af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122b3:	68 fb a7 02 c0       	push   0xc002a7fb
c00122b8:	e8 e0 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00122bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00122c1:	58                   	pop    eax
c00122c2:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c00122c8:	5a                   	pop    edx
c00122c9:	57                   	push   edi
c00122ca:	53                   	push   ebx
c00122cb:	e8 0c f4 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c00122d0:	59                   	pop    ecx
c00122d1:	5e                   	pop    esi
c00122d2:	89 c6                	mov    esi,eax
c00122d4:	ff 30                	push   DWORD PTR [eax]
c00122d6:	68 0e a8 02 c0       	push   0xc002a80e
c00122db:	e8 bd 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00122e0:	83 c4 10             	add    esp,0x10
c00122e3:	85 ff                	test   edi,edi
c00122e5:	74 0a                	je     c00122f1 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c00122e7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c00122e9:	f7 c5 01 00 00 00    	test   ebp,0x1
c00122ef:	74 0a                	je     c00122fb <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c00122f1:	83 c4 1c             	add    esp,0x1c
c00122f4:	31 c0                	xor    eax,eax
c00122f6:	5b                   	pop    ebx
c00122f7:	5e                   	pop    esi
c00122f8:	5f                   	pop    edi
c00122f9:	5d                   	pop    ebp
c00122fa:	c3                   	ret    
c00122fb:	83 ec 08             	sub    esp,0x8
c00122fe:	c1 ed 0b             	shr    ebp,0xb
c0012301:	55                   	push   ebp
c0012302:	68 1c a8 02 c0       	push   0xc002a81c
c0012307:	e8 91 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001230c:	e8 84 d6 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012311:	59                   	pop    ecx
c0012312:	5a                   	pop    edx
c0012313:	50                   	push   eax
c0012314:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012318:	68 27 a8 02 c0       	push   0xc002a827
c001231d:	e8 7b 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012322:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012326:	8b 16                	mov    edx,DWORD PTR [esi]
c0012328:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001232e:	09 d0                	or     eax,edx
c0012330:	0d 01 08 00 00       	or     eax,0x801
c0012335:	89 06                	mov    DWORD PTR [esi],eax
c0012337:	59                   	pop    ecx
c0012338:	5e                   	pop    esi
c0012339:	50                   	push   eax
c001233a:	68 3c a8 02 c0       	push   0xc002a83c
c001233f:	e8 59 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012344:	0f 20 d8             	mov    eax,cr3
c0012347:	83 c4 0c             	add    esp,0xc
c001234a:	53                   	push   ebx
c001234b:	50                   	push   eax
c001234c:	68 54 a8 02 c0       	push   0xc002a854
c0012351:	e8 47 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012356:	c7 04 24 6c a8 02 c0 	mov    DWORD PTR [esp],0xc002a86c
c001235d:	e8 3b 04 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012362:	83 c4 10             	add    esp,0x10
c0012365:	a1 2c cd 02 c0       	mov    eax,ds:0xc002cd2c
c001236a:	85 c0                	test   eax,eax
c001236c:	7e 3d                	jle    c00123ab <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c001236e:	89 fe                	mov    esi,edi
c0012370:	31 db                	xor    ebx,ebx
c0012372:	83 ec 0c             	sub    esp,0xc
c0012375:	55                   	push   ebp
c0012376:	e8 d3 ef ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c001237b:	89 34 24             	mov    DWORD PTR [esp],esi
c001237e:	01 d8                	add    eax,ebx
c0012380:	6a 01                	push   0x1
c0012382:	31 d2                	xor    edx,edx
c0012384:	43                   	inc    ebx
c0012385:	52                   	push   edx
c0012386:	81 c6 00 02 00 00    	add    esi,0x200
c001238c:	50                   	push   eax
c001238d:	0f be 05 38 cd 02 c0 	movsx  eax,BYTE PTR ds:0xc002cd38
c0012394:	ff 34 85 7c e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1d84]
c001239b:	e8 58 3d 00 00       	call   c00160f8 <LogicalDisk::read(unsigned long long, int, void*)>
c00123a0:	83 c4 20             	add    esp,0x20
c00123a3:	39 1d 2c cd 02 c0    	cmp    DWORD PTR ds:0xc002cd2c,ebx
c00123a9:	7f c7                	jg     c0012372 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c00123ab:	a1 e8 de 02 c0       	mov    eax,ds:0xc002dee8
c00123b0:	48                   	dec    eax
c00123b1:	52                   	push   edx
c00123b2:	a3 e8 de 02 c0       	mov    ds:0xc002dee8,eax
c00123b7:	50                   	push   eax
c00123b8:	57                   	push   edi
c00123b9:	68 7c a8 02 c0       	push   0xc002a87c
c00123be:	e8 da 03 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00123c3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00123c6:	e8 65 ef ff ff       	call   c0011330 <Virt::freeSwapfilePage(unsigned long)>
c00123cb:	c7 04 24 91 a8 02 c0 	mov    DWORD PTR [esp],0xc002a891
c00123d2:	e8 c6 03 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00123d7:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00123dc:	83 c4 10             	add    esp,0x10
c00123df:	48                   	dec    eax
c00123e0:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c00123e5:	85 c0                	test   eax,eax
c00123e7:	75 01                	jne    c00123ea <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c00123e9:	fb                   	sti    
c00123ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123ee:	25 ff 0f 00 00       	and    eax,0xfff
c00123f3:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00123f8:	77 20                	ja     c001241a <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c00123fa:	0f 20 d8             	mov    eax,cr3
c00123fd:	0f 22 d8             	mov    cr3,eax
c0012400:	83 ec 0c             	sub    esp,0xc
c0012403:	68 b7 a8 02 c0       	push   0xc002a8b7
c0012408:	e8 90 03 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	b0 01                	mov    al,0x1
c0012412:	83 c4 1c             	add    esp,0x1c
c0012415:	5b                   	pop    ebx
c0012416:	5e                   	pop    esi
c0012417:	5f                   	pop    edi
c0012418:	5d                   	pop    ebp
c0012419:	c3                   	ret    
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	68 a7 a8 02 c0       	push   0xc002a8a7
c0012422:	e8 76 03 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012427:	83 c4 10             	add    esp,0x10
c001242a:	eb ce                	jmp    c00123fa <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c001242c <VAS::scanForEviction()>:
c001242c:	55                   	push   ebp
c001242d:	31 ed                	xor    ebp,ebp
c001242f:	57                   	push   edi
c0012430:	56                   	push   esi
c0012431:	53                   	push   ebx
c0012432:	83 ec 0c             	sub    esp,0xc
c0012435:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012439:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001243c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012442:	75 0e                	jne    c0012452 <VAS::scanForEviction()+0x26>
c0012444:	89 da                	mov    edx,ebx
c0012446:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012449:	c1 ea 16             	shr    edx,0x16
c001244c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012450:	74 4e                	je     c00124a0 <VAS::scanForEviction()+0x74>
c0012452:	53                   	push   ebx
c0012453:	56                   	push   esi
c0012454:	e8 83 f2 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0012459:	5f                   	pop    edi
c001245a:	8b 38                	mov    edi,DWORD PTR [eax]
c001245c:	5a                   	pop    edx
c001245d:	89 fa                	mov    edx,edi
c001245f:	81 e2 01 08 00 00    	and    edx,0x801
c0012465:	81 fa 01 08 00 00    	cmp    edx,0x801
c001246b:	74 3e                	je     c00124ab <VAS::scanForEviction()+0x7f>
c001246d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012473:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012479:	76 2b                	jbe    c00124a6 <VAS::scanForEviction()+0x7a>
c001247b:	45                   	inc    ebp
c001247c:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012483:	83 fd 04             	cmp    ebp,0x4
c0012486:	74 35                	je     c00124bd <VAS::scanForEviction()+0x91>
c0012488:	31 db                	xor    ebx,ebx
c001248a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012490:	75 c0                	jne    c0012452 <VAS::scanForEviction()+0x26>
c0012492:	89 da                	mov    edx,ebx
c0012494:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012497:	c1 ea 16             	shr    edx,0x16
c001249a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001249e:	75 b2                	jne    c0012452 <VAS::scanForEviction()+0x26>
c00124a0:	81 c3 00 00 40 00    	add    ebx,0x400000
c00124a6:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00124a9:	eb 91                	jmp    c001243c <VAS::scanForEviction()+0x10>
c00124ab:	f7 c7 20 00 00 00    	test   edi,0x20
c00124b1:	74 22                	je     c00124d5 <VAS::scanForEviction()+0xa9>
c00124b3:	83 e7 df             	and    edi,0xffffffdf
c00124b6:	89 38                	mov    DWORD PTR [eax],edi
c00124b8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00124bb:	eb b0                	jmp    c001246d <VAS::scanForEviction()+0x41>
c00124bd:	83 ec 0c             	sub    esp,0xc
c00124c0:	68 b4 a6 02 c0       	push   0xc002a6b4
c00124c5:	e8 af 7a 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c00124ca:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00124cd:	83 c4 10             	add    esp,0x10
c00124d0:	e9 67 ff ff ff       	jmp    c001243c <VAS::scanForEviction()+0x10>
c00124d5:	83 ec 08             	sub    esp,0x8
c00124d8:	53                   	push   ebx
c00124d9:	68 c5 a8 02 c0       	push   0xc002a8c5
c00124de:	e8 ba 02 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00124e3:	58                   	pop    eax
c00124e4:	5a                   	pop    edx
c00124e5:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00124e8:	56                   	push   esi
c00124e9:	e8 ae fc ff ff       	call   c001219c <VAS::evict(unsigned long)>
c00124ee:	59                   	pop    ecx
c00124ef:	5b                   	pop    ebx
c00124f0:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00124f3:	68 d9 a8 02 c0       	push   0xc002a8d9
c00124f8:	e8 a0 02 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00124fd:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012504:	89 f8                	mov    eax,edi
c0012506:	83 c4 1c             	add    esp,0x1c
c0012509:	25 00 f0 ff ff       	and    eax,0xfffff000
c001250e:	5b                   	pop    ebx
c001250f:	5e                   	pop    esi
c0012510:	5f                   	pop    edi
c0012511:	5d                   	pop    ebp
c0012512:	c3                   	ret    

c0012513 <mapVASFirstTime>:
c0012513:	55                   	push   ebp
c0012514:	57                   	push   edi
c0012515:	56                   	push   esi
c0012516:	53                   	push   ebx
c0012517:	83 ec 0c             	sub    esp,0xc
c001251a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001251f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012522:	4a                   	dec    edx
c0012523:	0f 84 fe 00 00 00    	je     c0012627 <mapVASFirstTime+0x114>
c0012529:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001252c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001252f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012534:	c1 e5 15             	shl    ebp,0x15
c0012537:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001253c:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012542:	29 eb                	sub    ebx,ebp
c0012544:	29 ef                	sub    edi,ebp
c0012546:	83 ec 08             	sub    esp,0x8
c0012549:	53                   	push   ebx
c001254a:	68 05 a9 02 c0       	push   0xc002a905
c001254f:	e8 49 02 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012554:	e8 3c d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012559:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012560:	6a 01                	push   0x1
c0012562:	53                   	push   ebx
c0012563:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012569:	50                   	push   eax
c001256a:	56                   	push   esi
c001256b:	e8 f8 f7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012570:	83 c4 20             	add    esp,0x20
c0012573:	39 fb                	cmp    ebx,edi
c0012575:	75 cf                	jne    c0012546 <mapVASFirstTime+0x33>
c0012577:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001257c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012581:	29 eb                	sub    ebx,ebp
c0012583:	29 ef                	sub    edi,ebp
c0012585:	83 ec 08             	sub    esp,0x8
c0012588:	53                   	push   ebx
c0012589:	68 21 a9 02 c0       	push   0xc002a921
c001258e:	e8 0a 02 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012593:	58                   	pop    eax
c0012594:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012598:	5a                   	pop    edx
c0012599:	19 c0                	sbb    eax,eax
c001259b:	83 e0 04             	and    eax,0x4
c001259e:	05 03 04 00 00       	add    eax,0x403
c00125a3:	50                   	push   eax
c00125a4:	68 46 a8 02 c0       	push   0xc002a846
c00125a9:	e8 ef 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00125ae:	e8 e2 d3 ff ff       	call   c000f995 <Phys::allocatePage()>
c00125b3:	59                   	pop    ecx
c00125b4:	89 c5                	mov    ebp,eax
c00125b6:	58                   	pop    eax
c00125b7:	55                   	push   ebp
c00125b8:	68 35 a9 02 c0       	push   0xc002a935
c00125bd:	e8 db 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00125c2:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00125c6:	19 d2                	sbb    edx,edx
c00125c8:	83 e2 04             	and    edx,0x4
c00125cb:	81 c2 03 04 00 00    	add    edx,0x403
c00125d1:	89 14 24             	mov    DWORD PTR [esp],edx
c00125d4:	6a 01                	push   0x1
c00125d6:	53                   	push   ebx
c00125d7:	55                   	push   ebp
c00125d8:	56                   	push   esi
c00125d9:	e8 8a f7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125de:	83 c4 18             	add    esp,0x18
c00125e1:	53                   	push   ebx
c00125e2:	56                   	push   esi
c00125e3:	e8 f4 f0 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c00125e8:	5a                   	pop    edx
c00125e9:	59                   	pop    ecx
c00125ea:	ff 30                	push   DWORD PTR [eax]
c00125ec:	68 51 a9 02 c0       	push   0xc002a951
c00125f1:	e8 a7 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00125f6:	0f 20 d8             	mov    eax,cr3
c00125f9:	83 c4 0c             	add    esp,0xc
c00125fc:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012602:	56                   	push   esi
c0012603:	50                   	push   eax
c0012604:	68 54 a8 02 c0       	push   0xc002a854
c0012609:	e8 8f 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001260e:	83 c4 10             	add    esp,0x10
c0012611:	39 df                	cmp    edi,ebx
c0012613:	0f 85 6c ff ff ff    	jne    c0012585 <mapVASFirstTime+0x72>
c0012619:	0f 20 d8             	mov    eax,cr3
c001261c:	0f 22 d8             	mov    cr3,eax
c001261f:	83 c4 0c             	add    esp,0xc
c0012622:	5b                   	pop    ebx
c0012623:	5e                   	pop    esi
c0012624:	5f                   	pop    edi
c0012625:	5d                   	pop    ebp
c0012626:	c3                   	ret    
c0012627:	83 ec 0c             	sub    esp,0xc
c001262a:	68 ec a8 02 c0       	push   0xc002a8ec
c001262f:	e8 69 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012634:	83 c4 10             	add    esp,0x10
c0012637:	83 c4 0c             	add    esp,0xc
c001263a:	5b                   	pop    ebx
c001263b:	5e                   	pop    esi
c001263c:	5f                   	pop    edi
c001263d:	5d                   	pop    ebp
c001263e:	c3                   	ret    

c001263f <__cxa_atexit>:
c001263f:	31 c0                	xor    eax,eax
c0012641:	c3                   	ret    

c0012642 <__cxa_finalize>:
c0012642:	c3                   	ret    

c0012643 <__stack_chk_fail>:
c0012643:	55                   	push   ebp
c0012644:	89 e5                	mov    ebp,esp
c0012646:	83 ec 14             	sub    esp,0x14
c0012649:	68 5c a9 02 c0       	push   0xc002a95c
c001264e:	e8 4a 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012653:	58                   	pop    eax
c0012654:	5a                   	pop    edx
c0012655:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012658:	68 ac a9 02 c0       	push   0xc002a9ac
c001265d:	e8 3b 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012662:	59                   	pop    ecx
c0012663:	58                   	pop    eax
c0012664:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012667:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001266a:	68 ac a9 02 c0       	push   0xc002a9ac
c001266f:	e8 29 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012674:	5a                   	pop    edx
c0012675:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012678:	59                   	pop    ecx
c0012679:	8b 00                	mov    eax,DWORD PTR [eax]
c001267b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001267e:	68 ac a9 02 c0       	push   0xc002a9ac
c0012683:	e8 15 01 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0012688:	5a                   	pop    edx
c0012689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001268c:	59                   	pop    ecx
c001268d:	8b 00                	mov    eax,DWORD PTR [eax]
c001268f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012691:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012694:	68 ac a9 02 c0       	push   0xc002a9ac
c0012699:	e8 ff 00 00 00       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001269e:	c7 04 24 b4 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9b4
c00126a5:	e8 cf 78 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c00126aa:	83 c4 10             	add    esp,0x10
c00126ad:	c9                   	leave  
c00126ae:	c3                   	ret    

c00126af <__cxa_pure_virtual>:
c00126af:	83 ec 18             	sub    esp,0x18
c00126b2:	68 cc a9 02 c0       	push   0xc002a9cc
c00126b7:	e8 bd 78 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c00126bc:	83 c4 1c             	add    esp,0x1c
c00126bf:	c3                   	ret    

c00126c0 <operator new[](unsigned long)>:
c00126c0:	e9 d4 ce ff ff       	jmp    c000f599 <malloc>

c00126c5 <operator delete(void*, unsigned long)>:
c00126c5:	e9 ef ce ff ff       	jmp    c000f5b9 <rfree>

c00126ca <operator delete[](void*)>:
c00126ca:	e9 ea ce ff ff       	jmp    c000f5b9 <rfree>

c00126cf <operator delete[](void*, unsigned long)>:
c00126cf:	e9 e5 ce ff ff       	jmp    c000f5b9 <rfree>

c00126d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00126d4:	55                   	push   ebp
c00126d5:	b9 11 00 00 00       	mov    ecx,0x11
c00126da:	57                   	push   edi
c00126db:	56                   	push   esi
c00126dc:	be 5a a3 02 c0       	mov    esi,0xc002a35a
c00126e1:	53                   	push   ebx
c00126e2:	83 ec 20             	sub    esp,0x20
c00126e5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00126e9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00126ed:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00126f1:	fc                   	cld    
c00126f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126f4:	89 ee                	mov    esi,ebp
c00126f6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00126fa:	eb 02                	jmp    c00126fe <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c00126fc:	89 c6                	mov    esi,eax
c00126fe:	31 d2                	xor    edx,edx
c0012700:	41                   	inc    ecx
c0012701:	89 f0                	mov    eax,esi
c0012703:	f7 f3                	div    ebx
c0012705:	39 de                	cmp    esi,ebx
c0012707:	73 f3                	jae    c00126fc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012709:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001270c:	eb 02                	jmp    c0012710 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001270e:	89 c5                	mov    ebp,eax
c0012710:	31 d2                	xor    edx,edx
c0012712:	49                   	dec    ecx
c0012713:	89 e8                	mov    eax,ebp
c0012715:	f7 f3                	div    ebx
c0012717:	39 dd                	cmp    ebp,ebx
c0012719:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001271d:	88 11                	mov    BYTE PTR [ecx],dl
c001271f:	73 ed                	jae    c001270e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012721:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012725:	83 c4 20             	add    esp,0x20
c0012728:	5b                   	pop    ebx
c0012729:	5e                   	pop    esi
c001272a:	5f                   	pop    edi
c001272b:	5d                   	pop    ebp
c001272c:	c3                   	ret    

c001272d <Dbg::logc(char)>:
c001272d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012731:	ba fd 03 00 00       	mov    edx,0x3fd
c0012736:	ec                   	in     al,dx
c0012737:	a8 20                	test   al,0x20
c0012739:	74 fb                	je     c0012736 <Dbg::logc(char)+0x9>
c001273b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012740:	88 c8                	mov    al,cl
c0012742:	ee                   	out    dx,al
c0012743:	c3                   	ret    

c0012744 <Dbg::logs(char*)>:
c0012744:	53                   	push   ebx
c0012745:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012749:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001274c:	84 c0                	test   al,al
c001274e:	74 0f                	je     c001275f <Dbg::logs(char*)+0x1b>
c0012750:	50                   	push   eax
c0012751:	43                   	inc    ebx
c0012752:	e8 d6 ff ff ff       	call   c001272d <Dbg::logc(char)>
c0012757:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001275a:	5a                   	pop    edx
c001275b:	84 c0                	test   al,al
c001275d:	75 f1                	jne    c0012750 <Dbg::logs(char*)+0xc>
c001275f:	5b                   	pop    ebx
c0012760:	c3                   	ret    

c0012761 <Dbg::logWriteInt(unsigned int)>:
c0012761:	83 ec 10             	sub    esp,0x10
c0012764:	6a 0a                	push   0xa
c0012766:	8d 44 24 08          	lea    eax,[esp+0x8]
c001276a:	50                   	push   eax
c001276b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001276f:	e8 60 ff ff ff       	call   c00126d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012774:	50                   	push   eax
c0012775:	e8 ca ff ff ff       	call   c0012744 <Dbg::logs(char*)>
c001277a:	83 c4 20             	add    esp,0x20
c001277d:	c3                   	ret    

c001277e <Dbg::logWriteIntBase(unsigned int, int)>:
c001277e:	83 ec 10             	sub    esp,0x10
c0012781:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012785:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012789:	50                   	push   eax
c001278a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001278e:	e8 41 ff ff ff       	call   c00126d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012793:	50                   	push   eax
c0012794:	e8 ab ff ff ff       	call   c0012744 <Dbg::logs(char*)>
c0012799:	83 c4 20             	add    esp,0x20
c001279c:	c3                   	ret    

c001279d <Dbg::kprintf(char const*, ...)>:
c001279d:	55                   	push   ebp
c001279e:	57                   	push   edi
c001279f:	56                   	push   esi
c00127a0:	53                   	push   ebx
c00127a1:	83 ec 0c             	sub    esp,0xc
c00127a4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00127a8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00127ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127b0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127b3:	84 c0                	test   al,al
c00127b5:	74 4a                	je     c0012801 <Dbg::kprintf(char const*, ...)+0x64>
c00127b7:	31 db                	xor    ebx,ebx
c00127b9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00127bc:	3c 25                	cmp    al,0x25
c00127be:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00127c1:	0f 85 e4 00 00 00    	jne    c00128ab <Dbg::kprintf(char const*, ...)+0x10e>
c00127c7:	83 c3 02             	add    ebx,0x2
c00127ca:	8a 07                	mov    al,BYTE PTR [edi]
c00127cc:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127cf:	83 e8 25             	sub    eax,0x25
c00127d2:	3c 53                	cmp    al,0x53
c00127d4:	0f 87 ba 00 00 00    	ja     c0012894 <Dbg::kprintf(char const*, ...)+0xf7>
c00127da:	0f b6 c0             	movzx  eax,al
c00127dd:	ff 24 85 e0 a9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5620]
c00127e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127e8:	89 c8                	mov    eax,ecx
c00127ea:	83 c1 04             	add    ecx,0x4
c00127ed:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127f1:	ff 30                	push   DWORD PTR [eax]
c00127f3:	e8 69 ff ff ff       	call   c0012761 <Dbg::logWriteInt(unsigned int)>
c00127f8:	5f                   	pop    edi
c00127f9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127fd:	84 c0                	test   al,al
c00127ff:	75 b8                	jne    c00127b9 <Dbg::kprintf(char const*, ...)+0x1c>
c0012801:	83 c4 0c             	add    esp,0xc
c0012804:	5b                   	pop    ebx
c0012805:	5e                   	pop    esi
c0012806:	5f                   	pop    edi
c0012807:	5d                   	pop    ebp
c0012808:	c3                   	ret    
c0012809:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001280d:	89 c8                	mov    eax,ecx
c001280f:	83 c1 04             	add    ecx,0x4
c0012812:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012816:	ff 30                	push   DWORD PTR [eax]
c0012818:	e8 27 ff ff ff       	call   c0012744 <Dbg::logs(char*)>
c001281d:	58                   	pop    eax
c001281e:	eb d9                	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012820:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012824:	89 d0                	mov    eax,edx
c0012826:	83 c2 04             	add    edx,0x4
c0012829:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001282d:	ff 30                	push   DWORD PTR [eax]
c001282f:	e8 2d ff ff ff       	call   c0012761 <Dbg::logWriteInt(unsigned int)>
c0012834:	58                   	pop    eax
c0012835:	eb c2                	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012837:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001283b:	89 d0                	mov    eax,edx
c001283d:	83 c2 04             	add    edx,0x4
c0012840:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012843:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012847:	50                   	push   eax
c0012848:	e8 e0 fe ff ff       	call   c001272d <Dbg::logc(char)>
c001284d:	58                   	pop    eax
c001284e:	eb a9                	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012850:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012854:	89 c8                	mov    eax,ecx
c0012856:	83 c1 04             	add    ecx,0x4
c0012859:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001285d:	6a 10                	push   0x10
c001285f:	ff 30                	push   DWORD PTR [eax]
c0012861:	e8 18 ff ff ff       	call   c001277e <Dbg::logWriteIntBase(unsigned int, int)>
c0012866:	59                   	pop    ecx
c0012867:	5f                   	pop    edi
c0012868:	eb 8f                	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c001286a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001286e:	89 d0                	mov    eax,edx
c0012870:	83 c2 08             	add    edx,0x8
c0012873:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012877:	6a 10                	push   0x10
c0012879:	ff 30                	push   DWORD PTR [eax]
c001287b:	e8 fe fe ff ff       	call   c001277e <Dbg::logWriteIntBase(unsigned int, int)>
c0012880:	58                   	pop    eax
c0012881:	5a                   	pop    edx
c0012882:	e9 72 ff ff ff       	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012887:	6a 25                	push   0x25
c0012889:	e8 9f fe ff ff       	call   c001272d <Dbg::logc(char)>
c001288e:	58                   	pop    eax
c001288f:	e9 65 ff ff ff       	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012894:	6a 25                	push   0x25
c0012896:	e8 92 fe ff ff       	call   c001272d <Dbg::logc(char)>
c001289b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001289e:	50                   	push   eax
c001289f:	e8 89 fe ff ff       	call   c001272d <Dbg::logc(char)>
c00128a4:	5a                   	pop    edx
c00128a5:	59                   	pop    ecx
c00128a6:	e9 4e ff ff ff       	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c00128ab:	50                   	push   eax
c00128ac:	89 eb                	mov    ebx,ebp
c00128ae:	e8 7a fe ff ff       	call   c001272d <Dbg::logc(char)>
c00128b3:	89 fd                	mov    ebp,edi
c00128b5:	58                   	pop    eax
c00128b6:	e9 3e ff ff ff       	jmp    c00127f9 <Dbg::kprintf(char const*, ...)+0x5c>
c00128bb:	90                   	nop

c00128bc <File::read(unsigned long long, void*, int*)>:
c00128bc:	53                   	push   ebx
c00128bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128c5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128cc:	3c 19                	cmp    al,0x19
c00128ce:	77 35                	ja     c0012905 <File::read(unsigned long long, void*, int*)+0x49>
c00128d0:	8b 04 85 80 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c80]
c00128d7:	85 c0                	test   eax,eax
c00128d9:	74 2a                	je     c0012905 <File::read(unsigned long long, void*, int*)+0x49>
c00128db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128e1:	85 c0                	test   eax,eax
c00128e3:	74 20                	je     c0012905 <File::read(unsigned long long, void*, int*)+0x49>
c00128e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128e9:	74 21                	je     c001290c <File::read(unsigned long long, void*, int*)+0x50>
c00128eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128f1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128ff:	5b                   	pop    ebx
c0012900:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012903:	ff e0                	jmp    eax
c0012905:	b8 0b 00 00 00       	mov    eax,0xb
c001290a:	eb 05                	jmp    c0012911 <File::read(unsigned long long, void*, int*)+0x55>
c001290c:	b8 05 00 00 00       	mov    eax,0x5
c0012911:	5b                   	pop    ebx
c0012912:	c3                   	ret    
c0012913:	90                   	nop

c0012914 <File::write(unsigned long long, void*, int*)>:
c0012914:	53                   	push   ebx
c0012915:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012919:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001291d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012924:	3c 19                	cmp    al,0x19
c0012926:	77 35                	ja     c001295d <File::write(unsigned long long, void*, int*)+0x49>
c0012928:	8b 04 85 80 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c80]
c001292f:	85 c0                	test   eax,eax
c0012931:	74 2a                	je     c001295d <File::write(unsigned long long, void*, int*)+0x49>
c0012933:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012939:	85 c0                	test   eax,eax
c001293b:	74 20                	je     c001295d <File::write(unsigned long long, void*, int*)+0x49>
c001293d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012941:	74 21                	je     c0012964 <File::write(unsigned long long, void*, int*)+0x50>
c0012943:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012945:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012949:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001294f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012953:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012957:	5b                   	pop    ebx
c0012958:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001295b:	ff e0                	jmp    eax
c001295d:	b8 0b 00 00 00       	mov    eax,0xb
c0012962:	eb 05                	jmp    c0012969 <File::write(unsigned long long, void*, int*)+0x55>
c0012964:	b8 05 00 00 00       	mov    eax,0x5
c0012969:	5b                   	pop    ebx
c001296a:	c3                   	ret    
c001296b:	90                   	nop

c001296c <Directory::read(unsigned long long, void*, int*)>:
c001296c:	53                   	push   ebx
c001296d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012971:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012975:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001297c:	3c 19                	cmp    al,0x19
c001297e:	77 35                	ja     c00129b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012980:	8b 04 85 80 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c80]
c0012987:	85 c0                	test   eax,eax
c0012989:	74 2a                	je     c00129b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c001298b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012991:	85 c0                	test   eax,eax
c0012993:	74 20                	je     c00129b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012995:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012999:	74 21                	je     c00129bc <Directory::read(unsigned long long, void*, int*)+0x50>
c001299b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001299d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129a1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129af:	5b                   	pop    ebx
c00129b0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00129b3:	ff e0                	jmp    eax
c00129b5:	b8 0b 00 00 00       	mov    eax,0xb
c00129ba:	eb 05                	jmp    c00129c1 <Directory::read(unsigned long long, void*, int*)+0x55>
c00129bc:	b8 05 00 00 00       	mov    eax,0x5
c00129c1:	5b                   	pop    ebx
c00129c2:	c3                   	ret    
c00129c3:	90                   	nop

c00129c4 <Directory::write(unsigned long long, void*, int*)>:
c00129c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129c8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129cf:	b8 0b 00 00 00       	mov    eax,0xb
c00129d4:	80 fa 19             	cmp    dl,0x19
c00129d7:	77 18                	ja     c00129f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129d9:	8b 14 95 80 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c80]
c00129e0:	85 d2                	test   edx,edx
c00129e2:	74 0d                	je     c00129f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129e4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129eb:	19 c0                	sbb    eax,eax
c00129ed:	83 e0 0a             	and    eax,0xa
c00129f0:	40                   	inc    eax
c00129f1:	c3                   	ret    

c00129f2 <File::isAtty()>:
c00129f2:	31 c0                	xor    eax,eax
c00129f4:	c3                   	ret    
c00129f5:	90                   	nop

c00129f6 <Directory::isAtty()>:
c00129f6:	31 c0                	xor    eax,eax
c00129f8:	c3                   	ret    
c00129f9:	90                   	nop

c00129fa <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129fa:	b8 0a 00 00 00       	mov    eax,0xa
c00129ff:	c3                   	ret    

c0012a00 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012a00:	b8 0a 00 00 00       	mov    eax,0xa
c0012a05:	c3                   	ret    

c0012a06 <Filesystem::getFileFirstSector(char const*)>:
c0012a06:	31 c0                	xor    eax,eax
c0012a08:	31 d2                	xor    edx,edx
c0012a0a:	c3                   	ret    
c0012a0b:	90                   	nop

c0012a0c <File::~File()>:
c0012a0c:	83 ec 0c             	sub    esp,0xc
c0012a0f:	ba a0 ab 02 c0       	mov    edx,0xc002aba0
c0012a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a18:	89 10                	mov    DWORD PTR [eax],edx
c0012a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a1e:	83 ec 0c             	sub    esp,0xc
c0012a21:	50                   	push   eax
c0012a22:	e8 97 e5 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	90                   	nop
c0012a2b:	83 c4 0c             	add    esp,0xc
c0012a2e:	c3                   	ret    
c0012a2f:	90                   	nop

c0012a30 <File::~File()>:
c0012a30:	83 ec 0c             	sub    esp,0xc
c0012a33:	83 ec 0c             	sub    esp,0xc
c0012a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a3a:	e8 cd ff ff ff       	call   c0012a0c <File::~File()>
c0012a3f:	83 c4 10             	add    esp,0x10
c0012a42:	83 ec 08             	sub    esp,0x8
c0012a45:	68 14 01 00 00       	push   0x114
c0012a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a4e:	e8 72 fc ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0012a53:	83 c4 10             	add    esp,0x10
c0012a56:	83 c4 0c             	add    esp,0xc
c0012a59:	c3                   	ret    

c0012a5a <Directory::~Directory()>:
c0012a5a:	83 ec 0c             	sub    esp,0xc
c0012a5d:	ba bc ab 02 c0       	mov    edx,0xc002abbc
c0012a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a66:	89 10                	mov    DWORD PTR [eax],edx
c0012a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a6c:	83 ec 0c             	sub    esp,0xc
c0012a6f:	50                   	push   eax
c0012a70:	e8 49 e5 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0012a75:	83 c4 10             	add    esp,0x10
c0012a78:	90                   	nop
c0012a79:	83 c4 0c             	add    esp,0xc
c0012a7c:	c3                   	ret    
c0012a7d:	90                   	nop

c0012a7e <Directory::~Directory()>:
c0012a7e:	83 ec 0c             	sub    esp,0xc
c0012a81:	83 ec 0c             	sub    esp,0xc
c0012a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a88:	e8 cd ff ff ff       	call   c0012a5a <Directory::~Directory()>
c0012a8d:	83 c4 10             	add    esp,0x10
c0012a90:	83 ec 08             	sub    esp,0x8
c0012a93:	68 14 01 00 00       	push   0x114
c0012a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a9c:	e8 24 fc ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0012aa1:	83 c4 10             	add    esp,0x10
c0012aa4:	83 c4 0c             	add    esp,0xc
c0012aa7:	c3                   	ret    

c0012aa8 <Filesystem::Filesystem()>:
c0012aa8:	ba 38 ab 02 c0       	mov    edx,0xc002ab38
c0012aad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ab1:	89 10                	mov    DWORD PTR [eax],edx
c0012ab3:	8b 15 f4 de 02 c0    	mov    edx,DWORD PTR ds:0xc002def4
c0012ab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012abd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ac4:	a3 f4 de 02 c0       	mov    ds:0xc002def4,eax
c0012ac9:	90                   	nop
c0012aca:	c3                   	ret    
c0012acb:	90                   	nop

c0012acc <Filesystem::~Filesystem()>:
c0012acc:	ba 38 ab 02 c0       	mov    edx,0xc002ab38
c0012ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ad5:	89 10                	mov    DWORD PTR [eax],edx
c0012ad7:	90                   	nop
c0012ad8:	c3                   	ret    
c0012ad9:	90                   	nop

c0012ada <Filesystem::~Filesystem()>:
c0012ada:	83 ec 0c             	sub    esp,0xc
c0012add:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ae1:	e8 e6 ff ff ff       	call   c0012acc <Filesystem::~Filesystem()>
c0012ae6:	83 c4 04             	add    esp,0x4
c0012ae9:	83 ec 08             	sub    esp,0x8
c0012aec:	6a 08                	push   0x8
c0012aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012af2:	e8 ce fb ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0012af7:	83 c4 10             	add    esp,0x10
c0012afa:	83 c4 0c             	add    esp,0xc
c0012afd:	c3                   	ret    

c0012afe <Fs::getcwd(Process*, char*, int)>:
c0012afe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b02:	31 c0                	xor    eax,eax
c0012b04:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b07:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b0b:	7d 15                	jge    c0012b22 <Fs::getcwd(Process*, char*, int)+0x24>
c0012b0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b11:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b18:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b1b:	84 c9                	test   cl,cl
c0012b1d:	74 06                	je     c0012b25 <Fs::getcwd(Process*, char*, int)+0x27>
c0012b1f:	40                   	inc    eax
c0012b20:	eb e2                	jmp    c0012b04 <Fs::getcwd(Process*, char*, int)+0x6>
c0012b22:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b25:	31 c0                	xor    eax,eax
c0012b27:	c3                   	ret    

c0012b28 <Fs::initVFS()>:
c0012b28:	83 ec 18             	sub    esp,0x18
c0012b2b:	6a 08                	push   0x8
c0012b2d:	e8 67 ca ff ff       	call   c000f599 <malloc>
c0012b32:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b35:	e8 54 df 00 00       	call   c0020a8e <FAT::FAT()>
c0012b3a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012b41:	e8 53 ca ff ff       	call   c000f599 <malloc>
c0012b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b49:	e8 4c f1 00 00       	call   c0021c9a <ISO9660::ISO9660()>
c0012b4e:	83 c4 1c             	add    esp,0x1c
c0012b51:	c3                   	ret    

c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012b52:	55                   	push   ebp
c0012b53:	57                   	push   edi
c0012b54:	56                   	push   esi
c0012b55:	53                   	push   ebx
c0012b56:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b5c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b63:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b6a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b71:	68 00 04 00 00       	push   0x400
c0012b76:	6a 00                	push   0x0
c0012b78:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b7c:	56                   	push   esi
c0012b7d:	e8 ce db fe ff       	call   c0000750 <memset>
c0012b82:	83 c4 10             	add    esp,0x10
c0012b85:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b89:	75 0b                	jne    c0012b96 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012b8b:	50                   	push   eax
c0012b8c:	50                   	push   eax
c0012b8d:	57                   	push   edi
c0012b8e:	56                   	push   esi
c0012b8f:	e8 78 dc fe ff       	call   c000080c <strcpy>
c0012b94:	eb 41                	jmp    c0012bd7 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012b96:	8a 07                	mov    al,BYTE PTR [edi]
c0012b98:	3c 5c                	cmp    al,0x5c
c0012b9a:	74 04                	je     c0012ba0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b9c:	3c 2f                	cmp    al,0x2f
c0012b9e:	75 18                	jne    c0012bb8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012ba0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ba3:	3c 60                	cmp    al,0x60
c0012ba5:	7e 03                	jle    c0012baa <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012ba7:	83 e8 20             	sub    eax,0x20
c0012baa:	88 04 24             	mov    BYTE PTR [esp],al
c0012bad:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012bb4:	50                   	push   eax
c0012bb5:	50                   	push   eax
c0012bb6:	eb 18                	jmp    c0012bd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012bb8:	50                   	push   eax
c0012bb9:	50                   	push   eax
c0012bba:	55                   	push   ebp
c0012bbb:	56                   	push   esi
c0012bbc:	e8 4b dc fe ff       	call   c000080c <strcpy>
c0012bc1:	5a                   	pop    edx
c0012bc2:	59                   	pop    ecx
c0012bc3:	68 22 bf 02 c0       	push   0xc002bf22
c0012bc8:	56                   	push   esi
c0012bc9:	e8 7e dd fe ff       	call   c000094c <strcat>
c0012bce:	5d                   	pop    ebp
c0012bcf:	58                   	pop    eax
c0012bd0:	57                   	push   edi
c0012bd1:	56                   	push   esi
c0012bd2:	e8 75 dd fe ff       	call   c000094c <strcat>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012bdd:	3c 60                	cmp    al,0x60
c0012bdf:	7e 03                	jle    c0012be4 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012be1:	83 e8 20             	sub    eax,0x20
c0012be4:	88 04 24             	mov    BYTE PTR [esp],al
c0012be7:	88 03                	mov    BYTE PTR [ebx],al
c0012be9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012bf0:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012bf6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012bfa:	bf 03 00 00 00       	mov    edi,0x3
c0012bff:	b8 03 00 00 00       	mov    eax,0x3
c0012c04:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012c07:	84 d2                	test   dl,dl
c0012c09:	0f 84 91 00 00 00    	je     c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012c0f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012c12:	80 fa 5c             	cmp    dl,0x5c
c0012c15:	74 05                	je     c0012c1c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012c17:	80 fa 2f             	cmp    dl,0x2f
c0012c1a:	75 12                	jne    c0012c2e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c1c:	89 c5                	mov    ebp,eax
c0012c1e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c23:	74 09                	je     c0012c2e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c25:	40                   	inc    eax
c0012c26:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012c2a:	89 cf                	mov    edi,ecx
c0012c2c:	eb d6                	jmp    c0012c04 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012c2e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012c33:	75 5b                	jne    c0012c90 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c35:	80 fa 2e             	cmp    dl,0x2e
c0012c38:	75 56                	jne    c0012c90 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c3a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012c3e:	74 19                	je     c0012c59 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012c40:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c45:	74 53                	je     c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c47:	89 f9                	mov    ecx,edi
c0012c49:	41                   	inc    ecx
c0012c4a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c4d:	80 fa 2f             	cmp    dl,0x2f
c0012c50:	74 f7                	je     c0012c49 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c52:	80 fa 5c             	cmp    dl,0x5c
c0012c55:	74 f2                	je     c0012c49 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c57:	eb d1                	jmp    c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c59:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c5e:	74 3a                	je     c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c60:	83 f8 03             	cmp    eax,0x3
c0012c63:	74 c5                	je     c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c65:	41                   	inc    ecx
c0012c66:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c69:	80 fa 2f             	cmp    dl,0x2f
c0012c6c:	74 f7                	je     c0012c65 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c6e:	80 fa 5c             	cmp    dl,0x5c
c0012c71:	74 f2                	je     c0012c65 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c73:	48                   	dec    eax
c0012c74:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c78:	75 06                	jne    c0012c80 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c7a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c7e:	eb f3                	jmp    c0012c73 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012c80:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c84:	74 07                	je     c0012c8d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c86:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c8a:	48                   	dec    eax
c0012c8b:	eb f3                	jmp    c0012c80 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c8d:	40                   	inc    eax
c0012c8e:	eb 9a                	jmp    c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c90:	80 fa 2f             	cmp    dl,0x2f
c0012c93:	74 95                	je     c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c95:	80 fa 5c             	cmp    dl,0x5c
c0012c98:	74 90                	je     c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c9a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c9d:	40                   	inc    eax
c0012c9e:	eb 8a                	jmp    c0012c2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ca0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ca4:	83 ec 0c             	sub    esp,0xc
c0012ca7:	53                   	push   ebx
c0012ca8:	e8 bf da fe ff       	call   c000076c <strlen>
c0012cad:	83 c4 10             	add    esp,0x10
c0012cb0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012cb5:	75 26                	jne    c0012cdd <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012cb7:	83 ec 0c             	sub    esp,0xc
c0012cba:	53                   	push   ebx
c0012cbb:	e8 ac da fe ff       	call   c000076c <strlen>
c0012cc0:	83 c4 10             	add    esp,0x10
c0012cc3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012cc8:	74 26                	je     c0012cf0 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012cca:	83 ec 0c             	sub    esp,0xc
c0012ccd:	53                   	push   ebx
c0012cce:	e8 99 da fe ff       	call   c000076c <strlen>
c0012cd3:	83 c4 10             	add    esp,0x10
c0012cd6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012cdb:	eb c7                	jmp    c0012ca4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012cdd:	83 ec 0c             	sub    esp,0xc
c0012ce0:	53                   	push   ebx
c0012ce1:	e8 86 da fe ff       	call   c000076c <strlen>
c0012ce6:	83 c4 10             	add    esp,0x10
c0012ce9:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012cee:	74 c7                	je     c0012cb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012cf0:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012cf6:	5b                   	pop    ebx
c0012cf7:	5e                   	pop    esi
c0012cf8:	5f                   	pop    edi
c0012cf9:	5d                   	pop    ebp
c0012cfa:	c3                   	ret    
c0012cfb:	90                   	nop

c0012cfc <File::File(char const*, Process*)>:
c0012cfc:	83 ec 0c             	sub    esp,0xc
c0012cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d03:	83 ec 08             	sub    esp,0x8
c0012d06:	6a 00                	push   0x0
c0012d08:	50                   	push   eax
c0012d09:	e8 ce e0 ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0012d0e:	83 c4 10             	add    esp,0x10
c0012d11:	ba a0 ab 02 c0       	mov    edx,0xc002aba0
c0012d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1a:	89 10                	mov    DWORD PTR [eax],edx
c0012d1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d20:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d2a:	83 c0 0d             	add    eax,0xd
c0012d2d:	83 ec 04             	sub    esp,0x4
c0012d30:	52                   	push   edx
c0012d31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d35:	50                   	push   eax
c0012d36:	e8 17 fe ff ff       	call   c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012d3b:	83 c4 10             	add    esp,0x10
c0012d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d42:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d45:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d4c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d56:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d5a:	90                   	nop
c0012d5b:	83 c4 0c             	add    esp,0xc
c0012d5e:	c3                   	ret    
c0012d5f:	90                   	nop

c0012d60 <File::open(FileOpenMode)>:
c0012d60:	53                   	push   ebx
c0012d61:	b8 0b 00 00 00       	mov    eax,0xb
c0012d66:	83 ec 08             	sub    esp,0x8
c0012d69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d6d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d74:	80 fa 19             	cmp    dl,0x19
c0012d77:	77 40                	ja     c0012db9 <File::open(FileOpenMode)+0x59>
c0012d79:	8b 14 95 80 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c80]
c0012d80:	85 d2                	test   edx,edx
c0012d82:	74 35                	je     c0012db9 <File::open(FileOpenMode)+0x59>
c0012d84:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d8a:	85 d2                	test   edx,edx
c0012d8c:	74 2b                	je     c0012db9 <File::open(FileOpenMode)+0x59>
c0012d8e:	b8 06 00 00 00       	mov    eax,0x6
c0012d93:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d97:	75 20                	jne    c0012db9 <File::open(FileOpenMode)+0x59>
c0012d99:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d9b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012da5:	51                   	push   ecx
c0012da6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012da9:	51                   	push   ecx
c0012daa:	52                   	push   edx
c0012dab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012dae:	83 c4 10             	add    esp,0x10
c0012db1:	85 c0                	test   eax,eax
c0012db3:	75 04                	jne    c0012db9 <File::open(FileOpenMode)+0x59>
c0012db5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012db9:	83 c4 08             	add    esp,0x8
c0012dbc:	5b                   	pop    ebx
c0012dbd:	c3                   	ret    

c0012dbe <File::close()>:
c0012dbe:	53                   	push   ebx
c0012dbf:	b8 0b 00 00 00       	mov    eax,0xb
c0012dc4:	83 ec 08             	sub    esp,0x8
c0012dc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012dcb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012dd2:	80 fa 19             	cmp    dl,0x19
c0012dd5:	77 41                	ja     c0012e18 <File::close()+0x5a>
c0012dd7:	8b 1c 95 80 e3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1c80]
c0012dde:	85 db                	test   ebx,ebx
c0012de0:	74 36                	je     c0012e18 <File::close()+0x5a>
c0012de2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012de9:	74 2d                	je     c0012e18 <File::close()+0x5a>
c0012deb:	b8 05 00 00 00       	mov    eax,0x5
c0012df0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012df4:	74 22                	je     c0012e18 <File::close()+0x5a>
c0012df6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012dfa:	8b 04 95 80 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c80]
c0012e01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012e07:	53                   	push   ebx
c0012e08:	53                   	push   ebx
c0012e09:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e0b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e11:	50                   	push   eax
c0012e12:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012e15:	83 c4 10             	add    esp,0x10
c0012e18:	83 c4 08             	add    esp,0x8
c0012e1b:	5b                   	pop    ebx
c0012e1c:	c3                   	ret    
c0012e1d:	90                   	nop

c0012e1e <File::seek(unsigned long long)>:
c0012e1e:	56                   	push   esi
c0012e1f:	53                   	push   ebx
c0012e20:	b8 0b 00 00 00       	mov    eax,0xb
c0012e25:	51                   	push   ecx
c0012e26:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e2a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012e2e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012e35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e39:	80 fa 19             	cmp    dl,0x19
c0012e3c:	77 31                	ja     c0012e6f <File::seek(unsigned long long)+0x51>
c0012e3e:	8b 14 95 80 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c80]
c0012e45:	85 d2                	test   edx,edx
c0012e47:	74 26                	je     c0012e6f <File::seek(unsigned long long)+0x51>
c0012e49:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e4f:	85 d2                	test   edx,edx
c0012e51:	74 1c                	je     c0012e6f <File::seek(unsigned long long)+0x51>
c0012e53:	b8 05 00 00 00       	mov    eax,0x5
c0012e58:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e5c:	74 11                	je     c0012e6f <File::seek(unsigned long long)+0x51>
c0012e5e:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e60:	53                   	push   ebx
c0012e61:	51                   	push   ecx
c0012e62:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e68:	52                   	push   edx
c0012e69:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e6c:	83 c4 10             	add    esp,0x10
c0012e6f:	5a                   	pop    edx
c0012e70:	5b                   	pop    ebx
c0012e71:	5e                   	pop    esi
c0012e72:	c3                   	ret    
c0012e73:	90                   	nop

c0012e74 <File::tell(unsigned long long*)>:
c0012e74:	83 ec 0c             	sub    esp,0xc
c0012e77:	b8 0b 00 00 00       	mov    eax,0xb
c0012e7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e80:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e87:	80 fa 19             	cmp    dl,0x19
c0012e8a:	77 34                	ja     c0012ec0 <File::tell(unsigned long long*)+0x4c>
c0012e8c:	8b 14 95 80 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c80]
c0012e93:	85 d2                	test   edx,edx
c0012e95:	74 29                	je     c0012ec0 <File::tell(unsigned long long*)+0x4c>
c0012e97:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e9d:	85 d2                	test   edx,edx
c0012e9f:	74 1f                	je     c0012ec0 <File::tell(unsigned long long*)+0x4c>
c0012ea1:	b8 05 00 00 00       	mov    eax,0x5
c0012ea6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012eaa:	74 14                	je     c0012ec0 <File::tell(unsigned long long*)+0x4c>
c0012eac:	50                   	push   eax
c0012ead:	8b 02                	mov    eax,DWORD PTR [edx]
c0012eaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eb3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012eb9:	52                   	push   edx
c0012eba:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012ebd:	83 c4 10             	add    esp,0x10
c0012ec0:	83 c4 0c             	add    esp,0xc
c0012ec3:	c3                   	ret    

c0012ec4 <File::rewind()>:
c0012ec4:	83 ec 10             	sub    esp,0x10
c0012ec7:	6a 00                	push   0x0
c0012ec9:	6a 00                	push   0x0
c0012ecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ecf:	e8 4a ff ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c0012ed4:	83 c4 1c             	add    esp,0x1c
c0012ed7:	c3                   	ret    

c0012ed8 <File::unlink()>:
c0012ed8:	83 ec 0c             	sub    esp,0xc
c0012edb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ee4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eeb:	80 f9 19             	cmp    cl,0x19
c0012eee:	77 2f                	ja     c0012f1f <File::unlink()+0x47>
c0012ef0:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c0012ef7:	85 c9                	test   ecx,ecx
c0012ef9:	74 24                	je     c0012f1f <File::unlink()+0x47>
c0012efb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f01:	85 c9                	test   ecx,ecx
c0012f03:	74 1a                	je     c0012f1f <File::unlink()+0x47>
c0012f05:	b8 06 00 00 00       	mov    eax,0x6
c0012f0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f0e:	75 0f                	jne    c0012f1f <File::unlink()+0x47>
c0012f10:	83 c2 0d             	add    edx,0xd
c0012f13:	50                   	push   eax
c0012f14:	50                   	push   eax
c0012f15:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f17:	52                   	push   edx
c0012f18:	51                   	push   ecx
c0012f19:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012f1c:	83 c4 10             	add    esp,0x10
c0012f1f:	83 c4 0c             	add    esp,0xc
c0012f22:	c3                   	ret    
c0012f23:	90                   	nop

c0012f24 <File::rename(char const*)>:
c0012f24:	83 ec 0c             	sub    esp,0xc
c0012f27:	b8 0b 00 00 00       	mov    eax,0xb
c0012f2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f37:	80 f9 19             	cmp    cl,0x19
c0012f3a:	77 32                	ja     c0012f6e <File::rename(char const*)+0x4a>
c0012f3c:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c0012f43:	85 c9                	test   ecx,ecx
c0012f45:	74 27                	je     c0012f6e <File::rename(char const*)+0x4a>
c0012f47:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f4d:	85 c9                	test   ecx,ecx
c0012f4f:	74 1d                	je     c0012f6e <File::rename(char const*)+0x4a>
c0012f51:	b8 06 00 00 00       	mov    eax,0x6
c0012f56:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f5a:	75 12                	jne    c0012f6e <File::rename(char const*)+0x4a>
c0012f5c:	83 c2 0d             	add    edx,0xd
c0012f5f:	50                   	push   eax
c0012f60:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f66:	52                   	push   edx
c0012f67:	51                   	push   ecx
c0012f68:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f6b:	83 c4 10             	add    esp,0x10
c0012f6e:	83 c4 0c             	add    esp,0xc
c0012f71:	c3                   	ret    

c0012f72 <File::chfatattr(unsigned char, unsigned char)>:
c0012f72:	57                   	push   edi
c0012f73:	b8 0b 00 00 00       	mov    eax,0xb
c0012f78:	56                   	push   esi
c0012f79:	53                   	push   ebx
c0012f7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f7e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f82:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f89:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f8d:	80 f9 19             	cmp    cl,0x19
c0012f90:	77 37                	ja     c0012fc9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f92:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c0012f99:	85 c9                	test   ecx,ecx
c0012f9b:	74 2c                	je     c0012fc9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fa3:	85 c9                	test   ecx,ecx
c0012fa5:	74 22                	je     c0012fc9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012fa7:	b8 06 00 00 00       	mov    eax,0x6
c0012fac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fb0:	75 17                	jne    c0012fc9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012fb2:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012fb4:	89 f0                	mov    eax,esi
c0012fb6:	83 c2 0d             	add    edx,0xd
c0012fb9:	0f b6 f0             	movzx  esi,al
c0012fbc:	0f b6 db             	movzx  ebx,bl
c0012fbf:	56                   	push   esi
c0012fc0:	53                   	push   ebx
c0012fc1:	52                   	push   edx
c0012fc2:	51                   	push   ecx
c0012fc3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	5b                   	pop    ebx
c0012fca:	5e                   	pop    esi
c0012fcb:	5f                   	pop    edi
c0012fcc:	c3                   	ret    
c0012fcd:	90                   	nop

c0012fce <File::exists()>:
c0012fce:	83 ec 0c             	sub    esp,0xc
c0012fd1:	31 c0                	xor    eax,eax
c0012fd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fd7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fde:	80 f9 19             	cmp    cl,0x19
c0012fe1:	77 24                	ja     c0013007 <File::exists()+0x39>
c0012fe3:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c0012fea:	85 c9                	test   ecx,ecx
c0012fec:	74 19                	je     c0013007 <File::exists()+0x39>
c0012fee:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ff4:	85 c9                	test   ecx,ecx
c0012ff6:	74 0f                	je     c0013007 <File::exists()+0x39>
c0012ff8:	83 c2 0d             	add    edx,0xd
c0012ffb:	50                   	push   eax
c0012ffc:	50                   	push   eax
c0012ffd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fff:	52                   	push   edx
c0013000:	51                   	push   ecx
c0013001:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013004:	83 c4 10             	add    esp,0x10
c0013007:	83 c4 0c             	add    esp,0xc
c001300a:	c3                   	ret    
c001300b:	90                   	nop

c001300c <File::stat(unsigned long long*, bool*)>:
c001300c:	56                   	push   esi
c001300d:	53                   	push   ebx
c001300e:	50                   	push   eax
c001300f:	b8 0b 00 00 00       	mov    eax,0xb
c0013014:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013018:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001301c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013023:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013027:	80 f9 19             	cmp    cl,0x19
c001302a:	77 3d                	ja     c0013069 <File::stat(unsigned long long*, bool*)+0x5d>
c001302c:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c0013033:	85 c9                	test   ecx,ecx
c0013035:	74 32                	je     c0013069 <File::stat(unsigned long long*, bool*)+0x5d>
c0013037:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001303d:	85 c9                	test   ecx,ecx
c001303f:	74 28                	je     c0013069 <File::stat(unsigned long long*, bool*)+0x5d>
c0013041:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013043:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013047:	74 13                	je     c001305c <File::stat(unsigned long long*, bool*)+0x50>
c0013049:	83 ec 04             	sub    esp,0x4
c001304c:	56                   	push   esi
c001304d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013053:	51                   	push   ecx
c0013054:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013057:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001305a:	eb 0a                	jmp    c0013066 <File::stat(unsigned long long*, bool*)+0x5a>
c001305c:	53                   	push   ebx
c001305d:	83 c2 0d             	add    edx,0xd
c0013060:	56                   	push   esi
c0013061:	52                   	push   edx
c0013062:	51                   	push   ecx
c0013063:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013066:	83 c4 10             	add    esp,0x10
c0013069:	5a                   	pop    edx
c001306a:	5b                   	pop    ebx
c001306b:	5e                   	pop    esi
c001306c:	c3                   	ret    

c001306d <Fs::setcwd(Process*, char*)>:
c001306d:	55                   	push   ebp
c001306e:	57                   	push   edi
c001306f:	56                   	push   esi
c0013070:	53                   	push   ebx
c0013071:	81 ec 20 02 00 00    	sub    esp,0x220
c0013077:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001307e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013084:	57                   	push   edi
c0013085:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001308c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013090:	56                   	push   esi
c0013091:	e8 bc fa ff ff       	call   c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013096:	89 34 24             	mov    DWORD PTR [esp],esi
c0013099:	e8 ce d6 fe ff       	call   c000076c <strlen>
c001309e:	83 c4 10             	add    esp,0x10
c00130a1:	83 f8 02             	cmp    eax,0x2
c00130a4:	77 17                	ja     c00130bd <Fs::setcwd(Process*, char*)+0x50>
c00130a6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00130ab:	83 e8 41             	sub    eax,0x41
c00130ae:	83 f8 19             	cmp    eax,0x19
c00130b1:	76 24                	jbe    c00130d7 <Fs::setcwd(Process*, char*)+0x6a>
c00130b3:	b8 03 00 00 00       	mov    eax,0x3
c00130b8:	e9 e0 00 00 00       	jmp    c001319d <Fs::setcwd(Process*, char*)+0x130>
c00130bd:	83 ec 0c             	sub    esp,0xc
c00130c0:	56                   	push   esi
c00130c1:	e8 a6 d6 fe ff       	call   c000076c <strlen>
c00130c6:	83 c4 10             	add    esp,0x10
c00130c9:	83 f8 03             	cmp    eax,0x3
c00130cc:	75 34                	jne    c0013102 <Fs::setcwd(Process*, char*)+0x95>
c00130ce:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00130d3:	75 2d                	jne    c0013102 <Fs::setcwd(Process*, char*)+0x95>
c00130d5:	eb cf                	jmp    c00130a6 <Fs::setcwd(Process*, char*)+0x39>
c00130d7:	8b 14 85 80 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c80]
c00130de:	b8 05 00 00 00       	mov    eax,0x5
c00130e3:	85 d2                	test   edx,edx
c00130e5:	0f 84 b2 00 00 00    	je     c001319d <Fs::setcwd(Process*, char*)+0x130>
c00130eb:	b8 06 00 00 00       	mov    eax,0x6
c00130f0:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130f7:	0f 85 92 00 00 00    	jne    c001318f <Fs::setcwd(Process*, char*)+0x122>
c00130fd:	e9 9b 00 00 00       	jmp    c001319d <Fs::setcwd(Process*, char*)+0x130>
c0013102:	83 ec 0c             	sub    esp,0xc
c0013105:	68 14 01 00 00       	push   0x114
c001310a:	e8 8a c4 ff ff       	call   c000f599 <malloc>
c001310f:	83 c4 0c             	add    esp,0xc
c0013112:	89 c3                	mov    ebx,eax
c0013114:	55                   	push   ebp
c0013115:	56                   	push   esi
c0013116:	50                   	push   eax
c0013117:	e8 e0 fb ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001311c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013121:	83 c4 0c             	add    esp,0xc
c0013124:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013128:	50                   	push   eax
c0013129:	8d 44 24 10          	lea    eax,[esp+0x10]
c001312d:	50                   	push   eax
c001312e:	53                   	push   ebx
c001312f:	e8 d8 fe ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c0013134:	83 c4 10             	add    esp,0x10
c0013137:	83 f8 02             	cmp    eax,0x2
c001313a:	74 04                	je     c0013140 <Fs::setcwd(Process*, char*)+0xd3>
c001313c:	85 c0                	test   eax,eax
c001313e:	74 1c                	je     c001315c <Fs::setcwd(Process*, char*)+0xef>
c0013140:	b8 01 00 00 00       	mov    eax,0x1
c0013145:	85 db                	test   ebx,ebx
c0013147:	74 54                	je     c001319d <Fs::setcwd(Process*, char*)+0x130>
c0013149:	83 ec 0c             	sub    esp,0xc
c001314c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001314e:	53                   	push   ebx
c001314f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013152:	83 c4 10             	add    esp,0x10
c0013155:	b8 01 00 00 00       	mov    eax,0x1
c001315a:	eb 41                	jmp    c001319d <Fs::setcwd(Process*, char*)+0x130>
c001315c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013161:	75 1c                	jne    c001317f <Fs::setcwd(Process*, char*)+0x112>
c0013163:	b8 02 00 00 00       	mov    eax,0x2
c0013168:	85 db                	test   ebx,ebx
c001316a:	74 31                	je     c001319d <Fs::setcwd(Process*, char*)+0x130>
c001316c:	83 ec 0c             	sub    esp,0xc
c001316f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013171:	53                   	push   ebx
c0013172:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	b8 02 00 00 00       	mov    eax,0x2
c001317d:	eb 1e                	jmp    c001319d <Fs::setcwd(Process*, char*)+0x130>
c001317f:	85 db                	test   ebx,ebx
c0013181:	74 0c                	je     c001318f <Fs::setcwd(Process*, char*)+0x122>
c0013183:	83 ec 0c             	sub    esp,0xc
c0013186:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013188:	53                   	push   ebx
c0013189:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001318c:	83 c4 10             	add    esp,0x10
c001318f:	50                   	push   eax
c0013190:	50                   	push   eax
c0013191:	56                   	push   esi
c0013192:	57                   	push   edi
c0013193:	e8 74 d6 fe ff       	call   c000080c <strcpy>
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	31 c0                	xor    eax,eax
c001319d:	81 c4 1c 02 00 00    	add    esp,0x21c
c00131a3:	5b                   	pop    ebx
c00131a4:	5e                   	pop    esi
c00131a5:	5f                   	pop    edi
c00131a6:	5d                   	pop    ebp
c00131a7:	c3                   	ret    

c00131a8 <Directory::Directory(char const*, Process*)>:
c00131a8:	83 ec 0c             	sub    esp,0xc
c00131ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131af:	83 ec 08             	sub    esp,0x8
c00131b2:	6a 00                	push   0x0
c00131b4:	50                   	push   eax
c00131b5:	e8 22 dc ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c00131ba:	83 c4 10             	add    esp,0x10
c00131bd:	ba bc ab 02 c0       	mov    edx,0xc002abbc
c00131c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c6:	89 10                	mov    DWORD PTR [eax],edx
c00131c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131cc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d6:	83 c0 0d             	add    eax,0xd
c00131d9:	83 ec 04             	sub    esp,0x4
c00131dc:	52                   	push   edx
c00131dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e1:	50                   	push   eax
c00131e2:	e8 6b f9 ff ff       	call   c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131e7:	83 c4 10             	add    esp,0x10
c00131ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ee:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131f1:	8d 50 bf             	lea    edx,[eax-0x41]
c00131f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013202:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013206:	90                   	nop
c0013207:	83 c4 0c             	add    esp,0xc
c001320a:	c3                   	ret    
c001320b:	90                   	nop

c001320c <Directory::open()>:
c001320c:	53                   	push   ebx
c001320d:	b8 0b 00 00 00       	mov    eax,0xb
c0013212:	83 ec 08             	sub    esp,0x8
c0013215:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013219:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013220:	80 fa 19             	cmp    dl,0x19
c0013223:	77 3d                	ja     c0013262 <Directory::open()+0x56>
c0013225:	8b 14 95 80 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c80]
c001322c:	85 d2                	test   edx,edx
c001322e:	74 32                	je     c0013262 <Directory::open()+0x56>
c0013230:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013236:	85 d2                	test   edx,edx
c0013238:	74 28                	je     c0013262 <Directory::open()+0x56>
c001323a:	b8 06 00 00 00       	mov    eax,0x6
c001323f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013243:	75 1d                	jne    c0013262 <Directory::open()+0x56>
c0013245:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001324b:	50                   	push   eax
c001324c:	8b 02                	mov    eax,DWORD PTR [edx]
c001324e:	51                   	push   ecx
c001324f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013252:	51                   	push   ecx
c0013253:	52                   	push   edx
c0013254:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013257:	83 c4 10             	add    esp,0x10
c001325a:	85 c0                	test   eax,eax
c001325c:	75 04                	jne    c0013262 <Directory::open()+0x56>
c001325e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013262:	83 c4 08             	add    esp,0x8
c0013265:	5b                   	pop    ebx
c0013266:	c3                   	ret    
c0013267:	90                   	nop

c0013268 <Directory::close()>:
c0013268:	53                   	push   ebx
c0013269:	b8 0b 00 00 00       	mov    eax,0xb
c001326e:	83 ec 08             	sub    esp,0x8
c0013271:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013275:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001327c:	80 fa 19             	cmp    dl,0x19
c001327f:	77 41                	ja     c00132c2 <Directory::close()+0x5a>
c0013281:	8b 1c 95 80 e3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1c80]
c0013288:	85 db                	test   ebx,ebx
c001328a:	74 36                	je     c00132c2 <Directory::close()+0x5a>
c001328c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013293:	74 2d                	je     c00132c2 <Directory::close()+0x5a>
c0013295:	b8 05 00 00 00       	mov    eax,0x5
c001329a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001329e:	74 22                	je     c00132c2 <Directory::close()+0x5a>
c00132a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00132a4:	8b 04 95 80 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c80]
c00132ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00132b1:	53                   	push   ebx
c00132b2:	53                   	push   ebx
c00132b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00132b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00132bb:	50                   	push   eax
c00132bc:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00132bf:	83 c4 10             	add    esp,0x10
c00132c2:	83 c4 08             	add    esp,0x8
c00132c5:	5b                   	pop    ebx
c00132c6:	c3                   	ret    
c00132c7:	90                   	nop

c00132c8 <Directory::unlink()>:
c00132c8:	83 ec 0c             	sub    esp,0xc
c00132cb:	b8 0b 00 00 00       	mov    eax,0xb
c00132d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132db:	80 f9 19             	cmp    cl,0x19
c00132de:	77 2f                	ja     c001330f <Directory::unlink()+0x47>
c00132e0:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c00132e7:	85 c9                	test   ecx,ecx
c00132e9:	74 24                	je     c001330f <Directory::unlink()+0x47>
c00132eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132f1:	85 c9                	test   ecx,ecx
c00132f3:	74 1a                	je     c001330f <Directory::unlink()+0x47>
c00132f5:	b8 06 00 00 00       	mov    eax,0x6
c00132fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132fe:	75 0f                	jne    c001330f <Directory::unlink()+0x47>
c0013300:	83 c2 0d             	add    edx,0xd
c0013303:	50                   	push   eax
c0013304:	50                   	push   eax
c0013305:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013307:	52                   	push   edx
c0013308:	51                   	push   ecx
c0013309:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001330c:	83 c4 10             	add    esp,0x10
c001330f:	83 c4 0c             	add    esp,0xc
c0013312:	c3                   	ret    
c0013313:	90                   	nop

c0013314 <Directory::rename(char const*)>:
c0013314:	83 ec 0c             	sub    esp,0xc
c0013317:	b8 0b 00 00 00       	mov    eax,0xb
c001331c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013320:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013327:	80 f9 19             	cmp    cl,0x19
c001332a:	77 32                	ja     c001335e <Directory::rename(char const*)+0x4a>
c001332c:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c0013333:	85 c9                	test   ecx,ecx
c0013335:	74 27                	je     c001335e <Directory::rename(char const*)+0x4a>
c0013337:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001333d:	85 c9                	test   ecx,ecx
c001333f:	74 1d                	je     c001335e <Directory::rename(char const*)+0x4a>
c0013341:	b8 06 00 00 00       	mov    eax,0x6
c0013346:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001334a:	75 12                	jne    c001335e <Directory::rename(char const*)+0x4a>
c001334c:	83 c2 0d             	add    edx,0xd
c001334f:	50                   	push   eax
c0013350:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013352:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013356:	52                   	push   edx
c0013357:	51                   	push   ecx
c0013358:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001335b:	83 c4 10             	add    esp,0x10
c001335e:	83 c4 0c             	add    esp,0xc
c0013361:	c3                   	ret    

c0013362 <Directory::exists()>:
c0013362:	83 ec 0c             	sub    esp,0xc
c0013365:	31 c0                	xor    eax,eax
c0013367:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001336b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013372:	80 f9 19             	cmp    cl,0x19
c0013375:	77 24                	ja     c001339b <Directory::exists()+0x39>
c0013377:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c001337e:	85 c9                	test   ecx,ecx
c0013380:	74 19                	je     c001339b <Directory::exists()+0x39>
c0013382:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013388:	85 c9                	test   ecx,ecx
c001338a:	74 0f                	je     c001339b <Directory::exists()+0x39>
c001338c:	83 c2 0d             	add    edx,0xd
c001338f:	50                   	push   eax
c0013390:	50                   	push   eax
c0013391:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013393:	52                   	push   edx
c0013394:	51                   	push   ecx
c0013395:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013398:	83 c4 10             	add    esp,0x10
c001339b:	83 c4 0c             	add    esp,0xc
c001339e:	c3                   	ret    
c001339f:	90                   	nop

c00133a0 <Directory::read(dirent*)>:
c00133a0:	83 ec 1c             	sub    esp,0x1c
c00133a3:	b8 0b 00 00 00       	mov    eax,0xb
c00133a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00133ac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133b3:	80 fa 19             	cmp    dl,0x19
c00133b6:	77 30                	ja     c00133e8 <Directory::read(dirent*)+0x48>
c00133b8:	8b 14 95 80 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c80]
c00133bf:	85 d2                	test   edx,edx
c00133c1:	74 25                	je     c00133e8 <Directory::read(dirent*)+0x48>
c00133c3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133ca:	74 1c                	je     c00133e8 <Directory::read(dirent*)+0x48>
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133d1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133d5:	52                   	push   edx
c00133d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133da:	6a 00                	push   0x0
c00133dc:	68 10 01 00 00       	push   0x110
c00133e1:	51                   	push   ecx
c00133e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133e5:	83 c4 20             	add    esp,0x20
c00133e8:	83 c4 1c             	add    esp,0x1c
c00133eb:	c3                   	ret    

c00133ec <Directory::create()>:
c00133ec:	83 ec 0c             	sub    esp,0xc
c00133ef:	b8 0b 00 00 00       	mov    eax,0xb
c00133f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133ff:	80 f9 19             	cmp    cl,0x19
c0013402:	77 2f                	ja     c0013433 <Directory::create()+0x47>
c0013404:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c001340b:	85 c9                	test   ecx,ecx
c001340d:	74 24                	je     c0013433 <Directory::create()+0x47>
c001340f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013415:	85 c9                	test   ecx,ecx
c0013417:	74 1a                	je     c0013433 <Directory::create()+0x47>
c0013419:	b8 06 00 00 00       	mov    eax,0x6
c001341e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013422:	75 0f                	jne    c0013433 <Directory::create()+0x47>
c0013424:	83 c2 0d             	add    edx,0xd
c0013427:	50                   	push   eax
c0013428:	50                   	push   eax
c0013429:	8b 01                	mov    eax,DWORD PTR [ecx]
c001342b:	52                   	push   edx
c001342c:	51                   	push   ecx
c001342d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013430:	83 c4 10             	add    esp,0x10
c0013433:	83 c4 0c             	add    esp,0xc
c0013436:	c3                   	ret    
c0013437:	90                   	nop

c0013438 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013438:	b8 0a 00 00 00       	mov    eax,0xa
c001343d:	c3                   	ret    

c001343e <Bus::Bus(char const*)>:
c001343e:	83 ec 0c             	sub    esp,0xc
c0013441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013445:	83 ec 08             	sub    esp,0x8
c0013448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001344c:	50                   	push   eax
c001344d:	e8 88 09 00 00       	call   c0013dda <Device::Device(char const*)>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c001345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345e:	89 10                	mov    DWORD PTR [eax],edx
c0013460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013464:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001346e:	90                   	nop
c001346f:	83 c4 0c             	add    esp,0xc
c0013472:	c3                   	ret    
c0013473:	90                   	nop

c0013474 <Bus::~Bus()>:
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c001347c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013480:	89 10                	mov    DWORD PTR [eax],edx
c0013482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013486:	83 ec 0c             	sub    esp,0xc
c0013489:	50                   	push   eax
c001348a:	e8 15 06 00 00       	call   c0013aa4 <Device::~Device()>
c001348f:	83 c4 10             	add    esp,0x10
c0013492:	90                   	nop
c0013493:	83 c4 0c             	add    esp,0xc
c0013496:	c3                   	ret    
c0013497:	90                   	nop

c0013498 <Bus::~Bus()>:
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	83 ec 0c             	sub    esp,0xc
c001349e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a2:	e8 cd ff ff ff       	call   c0013474 <Bus::~Bus()>
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	83 ec 08             	sub    esp,0x8
c00134ad:	68 58 01 00 00       	push   0x158
c00134b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134b6:	e8 0a f2 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	83 c4 0c             	add    esp,0xc
c00134c1:	c3                   	ret    

c00134c2 <Buzzer::Buzzer(char const*)>:
c00134c2:	83 ec 0c             	sub    esp,0xc
c00134c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c9:	83 ec 08             	sub    esp,0x8
c00134cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d0:	50                   	push   eax
c00134d1:	e8 04 09 00 00       	call   c0013dda <Device::Device(char const*)>
c00134d6:	83 c4 10             	add    esp,0x10
c00134d9:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c00134de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e2:	89 10                	mov    DWORD PTR [eax],edx
c00134e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f6:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013500:	90                   	nop
c0013501:	83 c4 0c             	add    esp,0xc
c0013504:	c3                   	ret    
c0013505:	90                   	nop

c0013506 <Buzzer::~Buzzer()>:
c0013506:	83 ec 0c             	sub    esp,0xc
c0013509:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c001350e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013512:	89 10                	mov    DWORD PTR [eax],edx
c0013514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013518:	83 ec 0c             	sub    esp,0xc
c001351b:	50                   	push   eax
c001351c:	e8 83 05 00 00       	call   c0013aa4 <Device::~Device()>
c0013521:	83 c4 10             	add    esp,0x10
c0013524:	90                   	nop
c0013525:	83 c4 0c             	add    esp,0xc
c0013528:	c3                   	ret    
c0013529:	90                   	nop

c001352a <Buzzer::~Buzzer()>:
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	83 ec 0c             	sub    esp,0xc
c0013530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013534:	e8 cd ff ff ff       	call   c0013506 <Buzzer::~Buzzer()>
c0013539:	83 c4 10             	add    esp,0x10
c001353c:	83 ec 08             	sub    esp,0x8
c001353f:	68 5c 01 00 00       	push   0x15c
c0013544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013548:	e8 78 f1 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	83 c4 0c             	add    esp,0xc
c0013553:	c3                   	ret    

c0013554 <Buzzer::stop()>:
c0013554:	83 ec 14             	sub    esp,0x14
c0013557:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001355b:	8b 10                	mov    edx,DWORD PTR [eax]
c001355d:	6a 00                	push   0x0
c001355f:	50                   	push   eax
c0013560:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013563:	83 c4 1c             	add    esp,0x1c
c0013566:	c3                   	ret    

c0013567 <beepThread(void*)>:
c0013567:	53                   	push   ebx
c0013568:	83 ec 08             	sub    esp,0x8
c001356b:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0013570:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013574:	48                   	dec    eax
c0013575:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001357a:	75 01                	jne    c001357d <beepThread(void*)+0x16>
c001357c:	fb                   	sti    
c001357d:	50                   	push   eax
c001357e:	50                   	push   eax
c001357f:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013584:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001358a:	52                   	push   edx
c001358b:	50                   	push   eax
c001358c:	e8 54 a8 00 00       	call   c001dde5 <nanoSleep(unsigned long long)>
c0013591:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013594:	e8 bb ff ff ff       	call   c0013554 <Buzzer::stop()>
c0013599:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00135a1:	83 c4 18             	add    esp,0x18
c00135a4:	5b                   	pop    ebx
c00135a5:	e9 37 a7 00 00       	jmp    c001dce1 <blockTask(TaskState)>

c00135aa <Buzzer::beep(int, int, bool)>:
c00135aa:	57                   	push   edi
c00135ab:	56                   	push   esi
c00135ac:	53                   	push   ebx
c00135ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00135b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135b9:	52                   	push   edx
c00135ba:	52                   	push   edx
c00135bb:	8b 06                	mov    eax,DWORD PTR [esi]
c00135bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135c1:	56                   	push   esi
c00135c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135c5:	83 c4 10             	add    esp,0x10
c00135c8:	89 f8                	mov    eax,edi
c00135ca:	84 c0                	test   al,al
c00135cc:	74 1f                	je     c00135ed <Buzzer::beep(int, int, bool)+0x43>
c00135ce:	50                   	push   eax
c00135cf:	50                   	push   eax
c00135d0:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00135d6:	99                   	cdq    
c00135d7:	52                   	push   edx
c00135d8:	50                   	push   eax
c00135d9:	e8 07 a8 00 00       	call   c001dde5 <nanoSleep(unsigned long long)>
c00135de:	83 c4 10             	add    esp,0x10
c00135e1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135e5:	5b                   	pop    ebx
c00135e6:	5e                   	pop    esi
c00135e7:	5f                   	pop    edi
c00135e8:	e9 67 ff ff ff       	jmp    c0013554 <Buzzer::stop()>
c00135ed:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135f3:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00135f8:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013600:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013604:	c7 44 24 14 67 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013567
c001360c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013610:	5b                   	pop    ebx
c0013611:	5e                   	pop    esi
c0013612:	5f                   	pop    edi
c0013613:	e9 ce a2 00 00       	jmp    c001d8e6 <Process::createThread(void (*)(void*), void*, int)>

c0013618 <User::loadClockSettings(int)>:
c0013618:	53                   	push   ebx
c0013619:	83 ec 14             	sub    esp,0x14
c001361c:	68 14 01 00 00       	push   0x114
c0013621:	e8 73 bf ff ff       	call   c000f599 <malloc>
c0013626:	83 c4 0c             	add    esp,0xc
c0013629:	89 c3                	mov    ebx,eax
c001362b:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c0013631:	68 2c ac 02 c0       	push   0xc002ac2c
c0013636:	50                   	push   eax
c0013637:	e8 c0 f6 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001363c:	58                   	pop    eax
c001363d:	5a                   	pop    edx
c001363e:	6a 01                	push   0x1
c0013640:	53                   	push   ebx
c0013641:	e8 1a f7 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c0013646:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013649:	e8 70 f7 ff ff       	call   c0012dbe <File::close()>
c001364e:	83 c4 10             	add    esp,0x10
c0013651:	85 db                	test   ebx,ebx
c0013653:	74 0f                	je     c0013664 <User::loadClockSettings(int)+0x4c>
c0013655:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013657:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001365b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001365e:	83 c4 08             	add    esp,0x8
c0013661:	5b                   	pop    ebx
c0013662:	ff e0                	jmp    eax
c0013664:	83 c4 08             	add    esp,0x8
c0013667:	5b                   	pop    ebx
c0013668:	c3                   	ret    
c0013669:	90                   	nop

c001366a <Clock::Clock(char const*)>:
c001366a:	83 ec 0c             	sub    esp,0xc
c001366d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013671:	83 ec 08             	sub    esp,0x8
c0013674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013678:	50                   	push   eax
c0013679:	e8 5c 07 00 00       	call   c0013dda <Device::Device(char const*)>
c001367e:	83 c4 10             	add    esp,0x10
c0013681:	ba 54 ac 02 c0       	mov    edx,0xc002ac54
c0013686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001368a:	89 10                	mov    DWORD PTR [eax],edx
c001368c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013690:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001369a:	90                   	nop
c001369b:	83 c4 0c             	add    esp,0xc
c001369e:	c3                   	ret    
c001369f:	90                   	nop

c00136a0 <Clock::~Clock()>:
c00136a0:	83 ec 0c             	sub    esp,0xc
c00136a3:	ba 54 ac 02 c0       	mov    edx,0xc002ac54
c00136a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ac:	89 10                	mov    DWORD PTR [eax],edx
c00136ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136b2:	83 ec 0c             	sub    esp,0xc
c00136b5:	50                   	push   eax
c00136b6:	e8 e9 03 00 00       	call   c0013aa4 <Device::~Device()>
c00136bb:	83 c4 10             	add    esp,0x10
c00136be:	90                   	nop
c00136bf:	83 c4 0c             	add    esp,0xc
c00136c2:	c3                   	ret    
c00136c3:	90                   	nop

c00136c4 <Clock::~Clock()>:
c00136c4:	83 ec 0c             	sub    esp,0xc
c00136c7:	83 ec 0c             	sub    esp,0xc
c00136ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ce:	e8 cd ff ff ff       	call   c00136a0 <Clock::~Clock()>
c00136d3:	83 c4 10             	add    esp,0x10
c00136d6:	83 ec 08             	sub    esp,0x8
c00136d9:	68 58 01 00 00       	push   0x158
c00136de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136e2:	e8 de ef ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00136e7:	83 c4 10             	add    esp,0x10
c00136ea:	83 c4 0c             	add    esp,0xc
c00136ed:	c3                   	ret    

c00136ee <Clock::timeInSecondsLocal()>:
c00136ee:	53                   	push   ebx
c00136ef:	83 ec 14             	sub    esp,0x14
c00136f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00136f8:	50                   	push   eax
c00136f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136fc:	0f b6 0d fc de 02 c0 	movzx  ecx,BYTE PTR ds:0xc002defc
c0013703:	03 0d 00 df 02 c0    	add    ecx,DWORD PTR ds:0xc002df00
c0013709:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001370f:	89 cb                	mov    ebx,ecx
c0013711:	c1 fb 1f             	sar    ebx,0x1f
c0013714:	01 c8                	add    eax,ecx
c0013716:	11 da                	adc    edx,ebx
c0013718:	83 c4 10             	add    esp,0x10
c001371b:	31 c9                	xor    ecx,ecx
c001371d:	80 3d fd de 02 c0 00 	cmp    BYTE PTR ds:0xc002defd,0x0
c0013724:	74 05                	je     c001372b <Clock::timeInSecondsLocal()+0x3d>
c0013726:	b9 08 07 00 00       	mov    ecx,0x708
c001372b:	31 db                	xor    ebx,ebx
c001372d:	01 c8                	add    eax,ecx
c001372f:	11 da                	adc    edx,ebx
c0013731:	83 c4 08             	add    esp,0x8
c0013734:	5b                   	pop    ebx
c0013735:	c3                   	ret    

c0013736 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013736:	57                   	push   edi
c0013737:	56                   	push   esi
c0013738:	53                   	push   ebx
c0013739:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001373d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013741:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013743:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013747:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001374a:	0f b6 05 fc de 02 c0 	movzx  eax,BYTE PTR ds:0xc002defc
c0013751:	03 05 00 df 02 c0    	add    eax,DWORD PTR ds:0xc002df00
c0013757:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001375d:	99                   	cdq    
c001375e:	29 c6                	sub    esi,eax
c0013760:	19 d7                	sbb    edi,edx
c0013762:	89 f0                	mov    eax,esi
c0013764:	89 fa                	mov    edx,edi
c0013766:	31 f6                	xor    esi,esi
c0013768:	80 3d fd de 02 c0 00 	cmp    BYTE PTR ds:0xc002defd,0x0
c001376f:	74 05                	je     c0013776 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013771:	be 08 07 00 00       	mov    esi,0x708
c0013776:	31 ff                	xor    edi,edi
c0013778:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001377c:	29 f0                	sub    eax,esi
c001377e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013782:	19 fa                	sbb    edx,edi
c0013784:	89 d8                	mov    eax,ebx
c0013786:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001378a:	5b                   	pop    ebx
c001378b:	5e                   	pop    esi
c001378c:	5f                   	pop    edi
c001378d:	ff e0                	jmp    eax

c001378f <datetimeToSeconds(datetime_t)>:
c001378f:	55                   	push   ebp
c0013790:	57                   	push   edi
c0013791:	56                   	push   esi
c0013792:	53                   	push   ebx
c0013793:	83 ec 14             	sub    esp,0x14
c0013796:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001379a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001379e:	89 d3                	mov    ebx,edx
c00137a0:	0f b6 c6             	movzx  eax,dh
c00137a3:	c1 eb 10             	shr    ebx,0x10
c00137a6:	48                   	dec    eax
c00137a7:	66 81 eb 6c 07       	sub    bx,0x76c
c00137ac:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00137b0:	0f b6 f5             	movzx  esi,ch
c00137b3:	89 cf                	mov    edi,ecx
c00137b5:	6b f6 3c             	imul   esi,esi,0x3c
c00137b8:	c1 ef 10             	shr    edi,0x10
c00137bb:	0f b6 c9             	movzx  ecx,cl
c00137be:	89 f8                	mov    eax,edi
c00137c0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137c6:	0f b6 f8             	movzx  edi,al
c00137c9:	0f b6 d2             	movzx  edx,dl
c00137cc:	01 fe                	add    esi,edi
c00137ce:	01 f1                	add    ecx,esi
c00137d0:	0f b7 f3             	movzx  esi,bx
c00137d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00137d7:	c1 f9 1f             	sar    ecx,0x1f
c00137da:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00137df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00137e3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00137e8:	8b 0c 8d a0 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5360]
c00137ef:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00137f3:	76 29                	jbe    c001381e <datetimeToSeconds(datetime_t)+0x8f>
c00137f5:	f6 c3 03             	test   bl,0x3
c00137f8:	75 24                	jne    c001381e <datetimeToSeconds(datetime_t)+0x8f>
c00137fa:	31 d2                	xor    edx,edx
c00137fc:	bf 64 00 00 00       	mov    edi,0x64
c0013801:	89 d8                	mov    eax,ebx
c0013803:	66 f7 f7             	div    di
c0013806:	66 85 d2             	test   dx,dx
c0013809:	75 12                	jne    c001381d <datetimeToSeconds(datetime_t)+0x8e>
c001380b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013811:	bf 90 01 00 00       	mov    edi,0x190
c0013816:	99                   	cdq    
c0013817:	f7 ff                	idiv   edi
c0013819:	85 d2                	test   edx,edx
c001381b:	75 01                	jne    c001381e <datetimeToSeconds(datetime_t)+0x8f>
c001381d:	41                   	inc    ecx
c001381e:	66 83 fb 46          	cmp    bx,0x46
c0013822:	76 45                	jbe    c0013869 <datetimeToSeconds(datetime_t)+0xda>
c0013824:	bb 46 00 00 00       	mov    ebx,0x46
c0013829:	bf 64 00 00 00       	mov    edi,0x64
c001382e:	bd 90 01 00 00       	mov    ebp,0x190
c0013833:	b8 6d 01 00 00       	mov    eax,0x16d
c0013838:	f6 c3 03             	test   bl,0x3
c001383b:	75 23                	jne    c0013860 <datetimeToSeconds(datetime_t)+0xd1>
c001383d:	89 d8                	mov    eax,ebx
c001383f:	99                   	cdq    
c0013840:	f7 ff                	idiv   edi
c0013842:	b8 6e 01 00 00       	mov    eax,0x16e
c0013847:	85 d2                	test   edx,edx
c0013849:	75 15                	jne    c0013860 <datetimeToSeconds(datetime_t)+0xd1>
c001384b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013851:	99                   	cdq    
c0013852:	f7 fd                	idiv   ebp
c0013854:	83 fa 01             	cmp    edx,0x1
c0013857:	19 c0                	sbb    eax,eax
c0013859:	f7 d0                	not    eax
c001385b:	05 6e 01 00 00       	add    eax,0x16e
c0013860:	01 c1                	add    ecx,eax
c0013862:	43                   	inc    ebx
c0013863:	39 f3                	cmp    ebx,esi
c0013865:	7c cc                	jl     c0013833 <datetimeToSeconds(datetime_t)+0xa4>
c0013867:	eb 35                	jmp    c001389e <datetimeToSeconds(datetime_t)+0x10f>
c0013869:	74 33                	je     c001389e <datetimeToSeconds(datetime_t)+0x10f>
c001386b:	b8 45 00 00 00       	mov    eax,0x45
c0013870:	89 c2                	mov    edx,eax
c0013872:	83 e2 03             	and    edx,0x3
c0013875:	39 f0                	cmp    eax,esi
c0013877:	7e 0f                	jle    c0013888 <datetimeToSeconds(datetime_t)+0xf9>
c0013879:	83 fa 01             	cmp    edx,0x1
c001387c:	19 d2                	sbb    edx,edx
c001387e:	48                   	dec    eax
c001387f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013886:	eb e8                	jmp    c0013870 <datetimeToSeconds(datetime_t)+0xe1>
c0013888:	b8 6d 01 00 00       	mov    eax,0x16d
c001388d:	85 d2                	test   edx,edx
c001388f:	75 0b                	jne    c001389c <datetimeToSeconds(datetime_t)+0x10d>
c0013891:	66 83 fb 01          	cmp    bx,0x1
c0013895:	19 c0                	sbb    eax,eax
c0013897:	05 6e 01 00 00       	add    eax,0x16e
c001389c:	29 c1                	sub    ecx,eax
c001389e:	b8 80 51 01 00       	mov    eax,0x15180
c00138a3:	f7 e9                	imul   ecx
c00138a5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00138a9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00138ad:	83 c4 14             	add    esp,0x14
c00138b0:	5b                   	pop    ebx
c00138b1:	5e                   	pop    esi
c00138b2:	5f                   	pop    edi
c00138b3:	5d                   	pop    ebp
c00138b4:	c3                   	ret    
c00138b5:	90                   	nop

c00138b6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00138b6:	57                   	push   edi
c00138b7:	56                   	push   esi
c00138b8:	53                   	push   ebx
c00138b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00138bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00138bf:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00138c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138ca:	e8 c0 fe ff ff       	call   c001378f <datetimeToSeconds(datetime_t)>
c00138cf:	59                   	pop    ecx
c00138d0:	0f b6 0d fc de 02 c0 	movzx  ecx,BYTE PTR ds:0xc002defc
c00138d7:	5b                   	pop    ebx
c00138d8:	03 0d 00 df 02 c0    	add    ecx,DWORD PTR ds:0xc002df00
c00138de:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138e4:	89 cb                	mov    ebx,ecx
c00138e6:	c1 fb 1f             	sar    ebx,0x1f
c00138e9:	29 c8                	sub    eax,ecx
c00138eb:	19 da                	sbb    edx,ebx
c00138ed:	31 c9                	xor    ecx,ecx
c00138ef:	80 3d fd de 02 c0 00 	cmp    BYTE PTR ds:0xc002defd,0x0
c00138f6:	74 05                	je     c00138fd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00138f8:	b9 08 07 00 00       	mov    ecx,0x708
c00138fd:	31 db                	xor    ebx,ebx
c00138ff:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013903:	29 c8                	sub    eax,ecx
c0013905:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013909:	19 da                	sbb    edx,ebx
c001390b:	89 f8                	mov    eax,edi
c001390d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013911:	5b                   	pop    ebx
c0013912:	5e                   	pop    esi
c0013913:	5f                   	pop    edi
c0013914:	ff e0                	jmp    eax

c0013916 <secondsToDatetime(unsigned long long)>:
c0013916:	55                   	push   ebp
c0013917:	57                   	push   edi
c0013918:	56                   	push   esi
c0013919:	53                   	push   ebx
c001391a:	83 ec 1c             	sub    esp,0x1c
c001391d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013921:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013925:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013929:	6a 00                	push   0x0
c001392b:	68 80 51 01 00       	push   0x15180
c0013930:	55                   	push   ebp
c0013931:	57                   	push   edi
c0013932:	e8 ad 2f 01 00       	call   c00268e4 <__udivdi3>
c0013937:	83 c4 10             	add    esp,0x10
c001393a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013940:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013944:	6a 00                	push   0x0
c0013946:	68 80 51 01 00       	push   0x15180
c001394b:	55                   	push   ebp
c001394c:	57                   	push   edi
c001394d:	bf 10 0e 00 00       	mov    edi,0xe10
c0013952:	e8 8d 30 01 00       	call   c00269e4 <__umoddi3>
c0013957:	83 c4 10             	add    esp,0x10
c001395a:	99                   	cdq    
c001395b:	f7 ff                	idiv   edi
c001395d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013962:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013965:	89 d0                	mov    eax,edx
c0013967:	99                   	cdq    
c0013968:	f7 ff                	idiv   edi
c001396a:	85 db                	test   ebx,ebx
c001396c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001396f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013972:	79 11                	jns    c0013985 <secondsToDatetime(unsigned long long)+0x6f>
c0013974:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013978:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001397e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013983:	eb 07                	jmp    c001398c <secondsToDatetime(unsigned long long)+0x76>
c0013985:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001398a:	89 d8                	mov    eax,ebx
c001398c:	bf b4 05 00 00       	mov    edi,0x5b4
c0013991:	99                   	cdq    
c0013992:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013997:	f7 f9                	idiv   ecx
c0013999:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001399e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139a2:	31 d2                	xor    edx,edx
c00139a4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00139ac:	01 c3                	add    ebx,eax
c00139ae:	89 d8                	mov    eax,ebx
c00139b0:	f7 f1                	div    ecx
c00139b2:	31 d2                	xor    edx,edx
c00139b4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00139b7:	89 d8                	mov    eax,ebx
c00139b9:	f7 f7                	div    edi
c00139bb:	31 d2                	xor    edx,edx
c00139bd:	29 c1                	sub    ecx,eax
c00139bf:	89 d8                	mov    eax,ebx
c00139c1:	f7 f5                	div    ebp
c00139c3:	bd 6d 01 00 00       	mov    ebp,0x16d
c00139c8:	29 c1                	sub    ecx,eax
c00139ca:	31 d2                	xor    edx,edx
c00139cc:	89 c8                	mov    eax,ecx
c00139ce:	f7 f5                	div    ebp
c00139d0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00139d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139d9:	31 d2                	xor    edx,edx
c00139db:	89 c8                	mov    eax,ecx
c00139dd:	f7 f5                	div    ebp
c00139df:	31 d2                	xor    edx,edx
c00139e1:	01 c3                	add    ebx,eax
c00139e3:	89 c8                	mov    eax,ecx
c00139e5:	f7 f7                	div    edi
c00139e7:	bf 99 00 00 00       	mov    edi,0x99
c00139ec:	29 c3                	sub    ebx,eax
c00139ee:	31 d2                	xor    edx,edx
c00139f0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00139f8:	29 c3                	sub    ebx,eax
c00139fa:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139fd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013a00:	bb 05 00 00 00       	mov    ebx,0x5
c0013a05:	83 c1 02             	add    ecx,0x2
c0013a08:	89 c8                	mov    eax,ecx
c0013a0a:	f7 f7                	div    edi
c0013a0c:	31 d2                	xor    edx,edx
c0013a0e:	89 c7                	mov    edi,eax
c0013a10:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013a16:	83 c0 02             	add    eax,0x2
c0013a19:	f7 f3                	div    ebx
c0013a1b:	89 eb                	mov    ebx,ebp
c0013a1d:	29 c3                	sub    ebx,eax
c0013a1f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013a25:	88 1e                	mov    BYTE PTR [esi],bl
c0013a27:	19 c0                	sbb    eax,eax
c0013a29:	31 d2                	xor    edx,edx
c0013a2b:	83 e0 0c             	and    eax,0xc
c0013a2e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013a32:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013a3a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013a3e:	83 f9 01             	cmp    ecx,0x1
c0013a41:	0f 96 c2             	setbe  dl
c0013a44:	41                   	inc    ecx
c0013a45:	01 d0                	add    eax,edx
c0013a47:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013a4a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013a4e:	83 c4 1c             	add    esp,0x1c
c0013a51:	89 f0                	mov    eax,esi
c0013a53:	5b                   	pop    ebx
c0013a54:	5e                   	pop    esi
c0013a55:	5f                   	pop    edi
c0013a56:	5d                   	pop    ebp
c0013a57:	c2 04 00             	ret    0x4

c0013a5a <Clock::timeInDatetimeLocal()>:
c0013a5a:	53                   	push   ebx
c0013a5b:	83 ec 14             	sub    esp,0x14
c0013a5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a66:	e8 83 fc ff ff       	call   c00136ee <Clock::timeInSecondsLocal()>
c0013a6b:	83 c4 0c             	add    esp,0xc
c0013a6e:	52                   	push   edx
c0013a6f:	50                   	push   eax
c0013a70:	53                   	push   ebx
c0013a71:	e8 a0 fe ff ff       	call   c0013916 <secondsToDatetime(unsigned long long)>
c0013a76:	89 d8                	mov    eax,ebx
c0013a78:	83 c4 14             	add    esp,0x14
c0013a7b:	5b                   	pop    ebx
c0013a7c:	c2 04 00             	ret    0x4
c0013a7f:	90                   	nop

c0013a80 <Device::hibernate()>:
c0013a80:	c3                   	ret    
c0013a81:	90                   	nop

c0013a82 <Device::wake()>:
c0013a82:	c3                   	ret    
c0013a83:	90                   	nop

c0013a84 <Device::detect()>:
c0013a84:	c3                   	ret    
c0013a85:	90                   	nop

c0013a86 <Device::disableLegacy()>:
c0013a86:	c3                   	ret    
c0013a87:	90                   	nop

c0013a88 <Device::powerSaving(PowerSavingLevel)>:
c0013a88:	c3                   	ret    
c0013a89:	90                   	nop

c0013a8a <DriverlessDevice::close(int, int, void*)>:
c0013a8a:	31 c0                	xor    eax,eax
c0013a8c:	c3                   	ret    
c0013a8d:	90                   	nop

c0013a8e <DriverlessDevice::detect()>:
c0013a8e:	c3                   	ret    
c0013a8f:	90                   	nop

c0013a90 <DriverlessDevice::open(int, int, void*)>:
c0013a90:	83 ec 18             	sub    esp,0x18
c0013a93:	68 d0 ac 02 c0       	push   0xc002acd0
c0013a98:	e8 dc 64 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0013a9d:	83 c8 ff             	or     eax,0xffffffff
c0013aa0:	83 c4 1c             	add    esp,0x1c
c0013aa3:	c3                   	ret    

c0013aa4 <Device::~Device()>:
c0013aa4:	ba 30 ad 02 c0       	mov    edx,0xc002ad30
c0013aa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aad:	89 10                	mov    DWORD PTR [eax],edx
c0013aaf:	90                   	nop
c0013ab0:	c3                   	ret    
c0013ab1:	90                   	nop

c0013ab2 <Device::~Device()>:
c0013ab2:	83 ec 0c             	sub    esp,0xc
c0013ab5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ab9:	e8 e6 ff ff ff       	call   c0013aa4 <Device::~Device()>
c0013abe:	83 c4 04             	add    esp,0x4
c0013ac1:	83 ec 08             	sub    esp,0x8
c0013ac4:	68 58 01 00 00       	push   0x158
c0013ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013acd:	e8 f3 eb ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0013ad2:	83 c4 10             	add    esp,0x10
c0013ad5:	83 c4 0c             	add    esp,0xc
c0013ad8:	c3                   	ret    
c0013ad9:	90                   	nop

c0013ada <Device::findAndLoadDriver()>:
c0013ada:	c7 44 24 04 ee ac 02 c0 	mov    DWORD PTR [esp+0x4],0xc002acee
c0013ae2:	e9 b6 ec ff ff       	jmp    c001279d <Dbg::kprintf(char const*, ...)>
c0013ae7:	90                   	nop

c0013ae8 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013ae8:	57                   	push   edi
c0013ae9:	b9 09 00 00 00       	mov    ecx,0x9
c0013aee:	56                   	push   esi
c0013aef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013af3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013af7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013b01:	81 c7 18 01 00 00    	add    edi,0x118
c0013b07:	fc                   	cld    
c0013b08:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013b0a:	5e                   	pop    esi
c0013b0b:	5f                   	pop    edi
c0013b0c:	c3                   	ret    
c0013b0d:	90                   	nop

c0013b0e <Device::preOpenACPI(void*, char*, char*)>:
c0013b0e:	57                   	push   edi
c0013b0f:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013b14:	56                   	push   esi
c0013b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b1d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013b27:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013b2d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013b33:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013b37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b39:	b9 0e 00 00 00       	mov    ecx,0xe
c0013b3e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013b44:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013b48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b4a:	5e                   	pop    esi
c0013b4b:	5f                   	pop    edi
c0013b4c:	c3                   	ret    
c0013b4d:	90                   	nop

c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b52:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b57:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b5e:	75 0b                	jne    c0013b6b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b62:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b66:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b69:	eb 1e                	jmp    c0013b89 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b6b:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0013b70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b76:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b7c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b86:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b89:	ff e0                	jmp    eax
c0013b8b:	90                   	nop

c0013b8c <Device::getParent()>:
c0013b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b90:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013b96:	c3                   	ret    
c0013b97:	90                   	nop

c0013b98 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b9c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ba1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ba8:	75 0b                	jne    c0013bb5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013bb0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013bb3:	eb 1e                	jmp    c0013bd3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013bb5:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0013bba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013bc0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013bc6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013bc8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013bcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bd0:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013bd3:	ff e0                	jmp    eax
c0013bd5:	90                   	nop

c0013bd6 <Device::addChild(Device*)>:
c0013bd6:	53                   	push   ebx
c0013bd7:	83 ec 08             	sub    esp,0x8
c0013bda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013be2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013be8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013bee:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013bf0:	85 d2                	test   edx,edx
c0013bf2:	74 04                	je     c0013bf8 <Device::addChild(Device*)+0x22>
c0013bf4:	89 d3                	mov    ebx,edx
c0013bf6:	eb f6                	jmp    c0013bee <Device::addChild(Device*)+0x18>
c0013bf8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013bfb:	83 ec 0c             	sub    esp,0xc
c0013bfe:	6a 08                	push   0x8
c0013c00:	e8 94 b9 ff ff       	call   c000f599 <malloc>
c0013c05:	89 03                	mov    DWORD PTR [ebx],eax
c0013c07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c14:	83 c4 18             	add    esp,0x18
c0013c17:	5b                   	pop    ebx
c0013c18:	c3                   	ret    
c0013c19:	90                   	nop

c0013c1a <Device::removeAllChildren()>:
c0013c1a:	56                   	push   esi
c0013c1b:	53                   	push   ebx
c0013c1c:	52                   	push   edx
c0013c1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c21:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013c27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c2a:	74 17                	je     c0013c43 <Device::removeAllChildren()+0x29>
c0013c2c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013c2f:	85 c0                	test   eax,eax
c0013c31:	74 0c                	je     c0013c3f <Device::removeAllChildren()+0x25>
c0013c33:	83 ec 0c             	sub    esp,0xc
c0013c36:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c38:	50                   	push   eax
c0013c39:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013c3c:	83 c4 10             	add    esp,0x10
c0013c3f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c41:	eb e4                	jmp    c0013c27 <Device::removeAllChildren()+0xd>
c0013c43:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c4f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c5c:	58                   	pop    eax
c0013c5d:	5b                   	pop    ebx
c0013c5e:	5e                   	pop    esi
c0013c5f:	c3                   	ret    

c0013c60 <Device::hibernateAll()>:
c0013c60:	53                   	push   ebx
c0013c61:	83 ec 14             	sub    esp,0x14
c0013c64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c6a:	53                   	push   ebx
c0013c6b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c6e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c74:	83 c4 10             	add    esp,0x10
c0013c77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c7a:	74 0f                	je     c0013c8b <Device::hibernateAll()+0x2b>
c0013c7c:	83 ec 0c             	sub    esp,0xc
c0013c7f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c82:	e8 d9 ff ff ff       	call   c0013c60 <Device::hibernateAll()>
c0013c87:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c89:	eb e9                	jmp    c0013c74 <Device::hibernateAll()+0x14>
c0013c8b:	83 c4 08             	add    esp,0x8
c0013c8e:	5b                   	pop    ebx
c0013c8f:	c3                   	ret    

c0013c90 <Device::wakeAll()>:
c0013c90:	53                   	push   ebx
c0013c91:	83 ec 14             	sub    esp,0x14
c0013c94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c9a:	53                   	push   ebx
c0013c9b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ca4:	83 c4 10             	add    esp,0x10
c0013ca7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013caa:	74 0f                	je     c0013cbb <Device::wakeAll()+0x2b>
c0013cac:	83 ec 0c             	sub    esp,0xc
c0013caf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cb2:	e8 d9 ff ff ff       	call   c0013c90 <Device::wakeAll()>
c0013cb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cb9:	eb e9                	jmp    c0013ca4 <Device::wakeAll()+0x14>
c0013cbb:	83 c4 08             	add    esp,0x8
c0013cbe:	5b                   	pop    ebx
c0013cbf:	c3                   	ret    

c0013cc0 <Device::detectAll()>:
c0013cc0:	53                   	push   ebx
c0013cc1:	83 ec 14             	sub    esp,0x14
c0013cc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cca:	53                   	push   ebx
c0013ccb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013cce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cd4:	83 c4 10             	add    esp,0x10
c0013cd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cda:	74 0f                	je     c0013ceb <Device::detectAll()+0x2b>
c0013cdc:	83 ec 0c             	sub    esp,0xc
c0013cdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ce2:	e8 d9 ff ff ff       	call   c0013cc0 <Device::detectAll()>
c0013ce7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ce9:	eb e9                	jmp    c0013cd4 <Device::detectAll()+0x14>
c0013ceb:	83 c4 08             	add    esp,0x8
c0013cee:	5b                   	pop    ebx
c0013cef:	c3                   	ret    

c0013cf0 <Device::disableLegacyAll()>:
c0013cf0:	53                   	push   ebx
c0013cf1:	83 ec 14             	sub    esp,0x14
c0013cf4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cfa:	53                   	push   ebx
c0013cfb:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013cfe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d04:	83 c4 10             	add    esp,0x10
c0013d07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d0a:	74 0f                	je     c0013d1b <Device::disableLegacyAll()+0x2b>
c0013d0c:	83 ec 0c             	sub    esp,0xc
c0013d0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d12:	e8 d9 ff ff ff       	call   c0013cf0 <Device::disableLegacyAll()>
c0013d17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d19:	eb e9                	jmp    c0013d04 <Device::disableLegacyAll()+0x14>
c0013d1b:	83 c4 08             	add    esp,0x8
c0013d1e:	5b                   	pop    ebx
c0013d1f:	c3                   	ret    

c0013d20 <Device::loadDriversForAll()>:
c0013d20:	53                   	push   ebx
c0013d21:	83 ec 08             	sub    esp,0x8
c0013d24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d28:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013d2f:	75 0c                	jne    c0013d3d <Device::loadDriversForAll()+0x1d>
c0013d31:	83 ec 0c             	sub    esp,0xc
c0013d34:	53                   	push   ebx
c0013d35:	e8 a0 fd ff ff       	call   c0013ada <Device::findAndLoadDriver()>
c0013d3a:	83 c4 10             	add    esp,0x10
c0013d3d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d46:	74 12                	je     c0013d5a <Device::loadDriversForAll()+0x3a>
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d4e:	e8 cd ff ff ff       	call   c0013d20 <Device::loadDriversForAll()>
c0013d53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d55:	83 c4 10             	add    esp,0x10
c0013d58:	eb e9                	jmp    c0013d43 <Device::loadDriversForAll()+0x23>
c0013d5a:	83 c4 08             	add    esp,0x8
c0013d5d:	5b                   	pop    ebx
c0013d5e:	c3                   	ret    
c0013d5f:	90                   	nop

c0013d60 <Device::closeAll()>:
c0013d60:	53                   	push   ebx
c0013d61:	83 ec 08             	sub    esp,0x8
c0013d64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d6a:	6a 00                	push   0x0
c0013d6c:	6a 00                	push   0x0
c0013d6e:	6a 00                	push   0x0
c0013d70:	53                   	push   ebx
c0013d71:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d74:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d7a:	83 c4 10             	add    esp,0x10
c0013d7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d80:	74 0f                	je     c0013d91 <Device::closeAll()+0x31>
c0013d82:	83 ec 0c             	sub    esp,0xc
c0013d85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d88:	e8 d3 ff ff ff       	call   c0013d60 <Device::closeAll()>
c0013d8d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d8f:	eb e9                	jmp    c0013d7a <Device::closeAll()+0x1a>
c0013d91:	83 c4 08             	add    esp,0x8
c0013d94:	5b                   	pop    ebx
c0013d95:	c3                   	ret    

c0013d96 <Device::powerSavingAll(PowerSavingLevel)>:
c0013d96:	56                   	push   esi
c0013d97:	53                   	push   ebx
c0013d98:	83 ec 0c             	sub    esp,0xc
c0013d9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d9f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013da3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013da5:	56                   	push   esi
c0013da6:	53                   	push   ebx
c0013da7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013daa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db0:	83 c4 10             	add    esp,0x10
c0013db3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013db6:	74 0f                	je     c0013dc7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013db8:	52                   	push   edx
c0013db9:	52                   	push   edx
c0013dba:	56                   	push   esi
c0013dbb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dbe:	e8 d3 ff ff ff       	call   c0013d96 <Device::powerSavingAll(PowerSavingLevel)>
c0013dc3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dc5:	eb e9                	jmp    c0013db0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013dc7:	58                   	pop    eax
c0013dc8:	5b                   	pop    ebx
c0013dc9:	5e                   	pop    esi
c0013dca:	c3                   	ret    
c0013dcb:	90                   	nop

c0013dcc <Device::setName(char const*)>:
c0013dcc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013dd4:	e9 33 ca fe ff       	jmp    c000080c <strcpy>
c0013dd9:	90                   	nop

c0013dda <Device::Device(char const*)>:
c0013dda:	83 ec 1c             	sub    esp,0x1c
c0013ddd:	ba 30 ad 02 c0       	mov    edx,0xc002ad30
c0013de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de6:	89 10                	mov    DWORD PTR [eax],edx
c0013de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dec:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dfa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e08:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e16:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e20:	83 ec 08             	sub    esp,0x8
c0013e23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e2b:	e8 9c ff ff ff       	call   c0013dcc <Device::setName(char const*)>
c0013e30:	83 c4 10             	add    esp,0x10
c0013e33:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013e3b:	83 ec 0c             	sub    esp,0xc
c0013e3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e42:	e8 52 b7 ff ff       	call   c000f599 <malloc>
c0013e47:	83 c4 10             	add    esp,0x10
c0013e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e5b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e65:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e75:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e86:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e91:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e9c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eaa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013ed0:	90                   	nop
c0013ed1:	83 c4 1c             	add    esp,0x1c
c0013ed4:	c3                   	ret    
c0013ed5:	90                   	nop

c0013ed6 <Device::getName()>:
c0013ed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eda:	05 d0 00 00 00       	add    eax,0xd0
c0013edf:	c3                   	ret    

c0013ee0 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013ee0:	83 ec 0c             	sub    esp,0xc
c0013ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee7:	83 ec 08             	sub    esp,0x8
c0013eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eee:	50                   	push   eax
c0013eef:	e8 e6 fe ff ff       	call   c0013dda <Device::Device(char const*)>
c0013ef4:	83 c4 10             	add    esp,0x10
c0013ef7:	ba 5c ad 02 c0       	mov    edx,0xc002ad5c
c0013efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f00:	89 10                	mov    DWORD PTR [eax],edx
c0013f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f06:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013f10:	90                   	nop
c0013f11:	83 c4 0c             	add    esp,0xc
c0013f14:	c3                   	ret    
c0013f15:	90                   	nop

c0013f16 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013f16:	57                   	push   edi
c0013f17:	56                   	push   esi
c0013f18:	53                   	push   ebx
c0013f19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f1d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f25:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013f2b:	75 0c                	jne    c0013f39 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013f2d:	52                   	push   edx
c0013f2e:	52                   	push   edx
c0013f2f:	53                   	push   ebx
c0013f30:	56                   	push   esi
c0013f31:	e8 ea 48 01 00       	call   c0028820 <LinkedList<Device>::addElement(Device*)>
c0013f36:	83 c4 10             	add    esp,0x10
c0013f39:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f42:	74 12                	je     c0013f56 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013f44:	50                   	push   eax
c0013f45:	57                   	push   edi
c0013f46:	56                   	push   esi
c0013f47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f4a:	e8 c7 ff ff ff       	call   c0013f16 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f51:	83 c4 10             	add    esp,0x10
c0013f54:	eb e9                	jmp    c0013f3f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013f56:	5b                   	pop    ebx
c0013f57:	5e                   	pop    esi
c0013f58:	5f                   	pop    edi
c0013f59:	c3                   	ret    

c0013f5a <getDevicesOfType(DeviceType)>:
c0013f5a:	53                   	push   ebx
c0013f5b:	83 ec 14             	sub    esp,0x14
c0013f5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f62:	53                   	push   ebx
c0013f63:	e8 94 49 01 00       	call   c00288fc <LinkedList<Device>::LinkedList()>
c0013f68:	83 c4 0c             	add    esp,0xc
c0013f6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f6f:	53                   	push   ebx
c0013f70:	ff 35 88 dd 02 c0    	push   DWORD PTR ds:0xc002dd88
c0013f76:	e8 9b ff ff ff       	call   c0013f16 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f7b:	89 d8                	mov    eax,ebx
c0013f7d:	83 c4 18             	add    esp,0x18
c0013f80:	5b                   	pop    ebx
c0013f81:	c2 04 00             	ret    0x4

c0013f84 <HardDiskController::HardDiskController(char const*)>:
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8b:	83 ec 08             	sub    esp,0x8
c0013f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f92:	50                   	push   eax
c0013f93:	e8 42 fe ff ff       	call   c0013dda <Device::Device(char const*)>
c0013f98:	83 c4 10             	add    esp,0x10
c0013f9b:	ba 88 ad 02 c0       	mov    edx,0xc002ad88
c0013fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa4:	89 10                	mov    DWORD PTR [eax],edx
c0013fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013faa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013fb4:	90                   	nop
c0013fb5:	83 c4 0c             	add    esp,0xc
c0013fb8:	c3                   	ret    
c0013fb9:	90                   	nop

c0013fba <HardDiskController::~HardDiskController()>:
c0013fba:	83 ec 0c             	sub    esp,0xc
c0013fbd:	ba 88 ad 02 c0       	mov    edx,0xc002ad88
c0013fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc6:	89 10                	mov    DWORD PTR [eax],edx
c0013fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	50                   	push   eax
c0013fd0:	e8 cf fa ff ff       	call   c0013aa4 <Device::~Device()>
c0013fd5:	83 c4 10             	add    esp,0x10
c0013fd8:	90                   	nop
c0013fd9:	83 c4 0c             	add    esp,0xc
c0013fdc:	c3                   	ret    
c0013fdd:	90                   	nop

c0013fde <HardDiskController::~HardDiskController()>:
c0013fde:	83 ec 0c             	sub    esp,0xc
c0013fe1:	83 ec 0c             	sub    esp,0xc
c0013fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fe8:	e8 cd ff ff ff       	call   c0013fba <HardDiskController::~HardDiskController()>
c0013fed:	83 c4 10             	add    esp,0x10
c0013ff0:	83 ec 08             	sub    esp,0x8
c0013ff3:	68 58 01 00 00       	push   0x158
c0013ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ffc:	e8 c4 e6 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0014001:	83 c4 10             	add    esp,0x10
c0014004:	83 c4 0c             	add    esp,0xc
c0014007:	c3                   	ret    

c0014008 <PhysicalDisk::eject()>:
c0014008:	83 c8 ff             	or     eax,0xffffffff
c001400b:	c3                   	ret    

c001400c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014013:	83 ec 08             	sub    esp,0x8
c0014016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001401a:	50                   	push   eax
c001401b:	e8 ba fd ff ff       	call   c0013dda <Device::Device(char const*)>
c0014020:	83 c4 10             	add    esp,0x10
c0014023:	ba b4 ad 02 c0       	mov    edx,0xc002adb4
c0014028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001402c:	89 10                	mov    DWORD PTR [eax],edx
c001402e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014032:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014048:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014056:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001405a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014064:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001406e:	90                   	nop
c001406f:	83 c4 0c             	add    esp,0xc
c0014072:	c3                   	ret    
c0014073:	90                   	nop

c0014074 <PhysicalDisk::startCache()>:
c0014074:	56                   	push   esi
c0014075:	53                   	push   ebx
c0014076:	83 ec 10             	sub    esp,0x10
c0014079:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001407d:	6a 44                	push   0x44
c001407f:	e8 15 b5 ff ff       	call   c000f599 <malloc>
c0014084:	89 c6                	mov    esi,eax
c0014086:	58                   	pop    eax
c0014087:	5a                   	pop    edx
c0014088:	53                   	push   ebx
c0014089:	56                   	push   esi
c001408a:	e8 77 28 00 00       	call   c0016906 <VCache::VCache(PhysicalDisk*)>
c001408f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014095:	83 c4 14             	add    esp,0x14
c0014098:	5b                   	pop    ebx
c0014099:	5e                   	pop    esi
c001409a:	c3                   	ret    
c001409b:	90                   	nop

c001409c <PhysicalDisk::~PhysicalDisk()>:
c001409c:	83 ec 0c             	sub    esp,0xc
c001409f:	ba b4 ad 02 c0       	mov    edx,0xc002adb4
c00140a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a8:	89 10                	mov    DWORD PTR [eax],edx
c00140aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ae:	83 ec 0c             	sub    esp,0xc
c00140b1:	50                   	push   eax
c00140b2:	e8 ed f9 ff ff       	call   c0013aa4 <Device::~Device()>
c00140b7:	83 c4 10             	add    esp,0x10
c00140ba:	90                   	nop
c00140bb:	83 c4 0c             	add    esp,0xc
c00140be:	c3                   	ret    
c00140bf:	90                   	nop

c00140c0 <PhysicalDisk::~PhysicalDisk()>:
c00140c0:	83 ec 0c             	sub    esp,0xc
c00140c3:	83 ec 0c             	sub    esp,0xc
c00140c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ca:	e8 cd ff ff ff       	call   c001409c <PhysicalDisk::~PhysicalDisk()>
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	83 ec 08             	sub    esp,0x8
c00140d5:	68 6c 01 00 00       	push   0x16c
c00140da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140de:	e8 e2 e5 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00140e3:	83 c4 10             	add    esp,0x10
c00140e6:	83 c4 0c             	add    esp,0xc
c00140e9:	c3                   	ret    

c00140ea <FPU::FPU(char const*)>:
c00140ea:	83 ec 0c             	sub    esp,0xc
c00140ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f1:	83 ec 08             	sub    esp,0x8
c00140f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140f8:	50                   	push   eax
c00140f9:	e8 dc fc ff ff       	call   c0013dda <Device::Device(char const*)>
c00140fe:	83 c4 10             	add    esp,0x10
c0014101:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c0014106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001410a:	89 10                	mov    DWORD PTR [eax],edx
c001410c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014110:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001411a:	90                   	nop
c001411b:	83 c4 0c             	add    esp,0xc
c001411e:	c3                   	ret    
c001411f:	90                   	nop

c0014120 <FPU::~FPU()>:
c0014120:	83 ec 0c             	sub    esp,0xc
c0014123:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c0014128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412c:	89 10                	mov    DWORD PTR [eax],edx
c001412e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014132:	83 ec 0c             	sub    esp,0xc
c0014135:	50                   	push   eax
c0014136:	e8 69 f9 ff ff       	call   c0013aa4 <Device::~Device()>
c001413b:	83 c4 10             	add    esp,0x10
c001413e:	90                   	nop
c001413f:	83 c4 0c             	add    esp,0xc
c0014142:	c3                   	ret    
c0014143:	90                   	nop

c0014144 <FPU::~FPU()>:
c0014144:	83 ec 0c             	sub    esp,0xc
c0014147:	83 ec 0c             	sub    esp,0xc
c001414a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001414e:	e8 cd ff ff ff       	call   c0014120 <FPU::~FPU()>
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	83 ec 08             	sub    esp,0x8
c0014159:	68 58 01 00 00       	push   0x158
c001415e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014162:	e8 5e e5 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0014167:	83 c4 10             	add    esp,0x10
c001416a:	83 c4 0c             	add    esp,0xc
c001416d:	c3                   	ret    

c001416e <setupFPU()>:
c001416e:	53                   	push   ebx
c001416f:	83 ec 08             	sub    esp,0x8
c0014172:	8b 15 88 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd88
c0014178:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001417f:	74 19                	je     c001419a <setupFPU()+0x2c>
c0014181:	83 ec 0c             	sub    esp,0xc
c0014184:	68 58 01 00 00       	push   0x158
c0014189:	e8 0b b4 ff ff       	call   c000f599 <malloc>
c001418e:	89 c3                	mov    ebx,eax
c0014190:	89 04 24             	mov    DWORD PTR [esp],eax
c0014193:	e8 d2 12 01 00       	call   c002546a <AVX::AVX()>
c0014198:	eb 5b                	jmp    c00141f5 <setupFPU()+0x87>
c001419a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00141a0:	84 c0                	test   al,al
c00141a2:	79 19                	jns    c00141bd <setupFPU()+0x4f>
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	68 58 01 00 00       	push   0x158
c00141ac:	e8 e8 b3 ff ff       	call   c000f599 <malloc>
c00141b1:	89 c3                	mov    ebx,eax
c00141b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00141b6:	e8 d5 13 01 00       	call   c0025590 <SSE::SSE()>
c00141bb:	eb 38                	jmp    c00141f5 <setupFPU()+0x87>
c00141bd:	a8 20                	test   al,0x20
c00141bf:	74 19                	je     c00141da <setupFPU()+0x6c>
c00141c1:	83 ec 0c             	sub    esp,0xc
c00141c4:	68 58 01 00 00       	push   0x158
c00141c9:	e8 cb b3 ff ff       	call   c000f599 <malloc>
c00141ce:	89 c3                	mov    ebx,eax
c00141d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00141d3:	e8 22 13 01 00       	call   c00254fa <MMX::MMX()>
c00141d8:	eb 1b                	jmp    c00141f5 <setupFPU()+0x87>
c00141da:	a8 10                	test   al,0x10
c00141dc:	74 1c                	je     c00141fa <setupFPU()+0x8c>
c00141de:	83 ec 0c             	sub    esp,0xc
c00141e1:	68 58 01 00 00       	push   0x158
c00141e6:	e8 ae b3 ff ff       	call   c000f599 <malloc>
c00141eb:	89 c3                	mov    ebx,eax
c00141ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00141f0:	e8 29 14 01 00       	call   c002561e <x87::x87()>
c00141f5:	83 c4 10             	add    esp,0x10
c00141f8:	eb 24                	jmp    c001421e <setupFPU()+0xb0>
c00141fa:	83 e0 ef             	and    eax,0xffffffef
c00141fd:	83 ec 0c             	sub    esp,0xc
c0014200:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014206:	68 e4 ad 02 c0       	push   0xc002ade4
c001420b:	e8 8d e5 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014210:	0f 20 c0             	mov    eax,cr0
c0014213:	83 c8 04             	or     eax,0x4
c0014216:	0f 22 c0             	mov    cr0,eax
c0014219:	31 db                	xor    ebx,ebx
c001421b:	83 c4 10             	add    esp,0x10
c001421e:	89 d8                	mov    eax,ebx
c0014220:	83 c4 08             	add    esp,0x8
c0014223:	5b                   	pop    ebx
c0014224:	c3                   	ret    
c0014225:	90                   	nop

c0014226 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014226:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001422e:	c1 e0 04             	shl    eax,0x4
c0014231:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014235:	8d 50 10             	lea    edx,[eax+0x10]
c0014238:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001423e:	74 08                	je     c0014248 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014240:	83 c0 04             	add    eax,0x4
c0014243:	39 d0                	cmp    eax,edx
c0014245:	75 f1                	jne    c0014238 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014247:	c3                   	ret    
c0014248:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014252:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001425c:	eb e2                	jmp    c0014240 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001425e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001425e:	57                   	push   edi
c001425f:	31 c0                	xor    eax,eax
c0014261:	56                   	push   esi
c0014262:	53                   	push   ebx
c0014263:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014267:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001426b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001426f:	89 da                	mov    edx,ebx
c0014271:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014275:	c1 e2 04             	shl    edx,0x4
c0014278:	01 ca                	add    edx,ecx
c001427a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014282:	74 16                	je     c001429a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014284:	40                   	inc    eax
c0014285:	83 f8 04             	cmp    eax,0x4
c0014288:	75 f0                	jne    c001427a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001428a:	c7 44 24 10 28 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae28
c0014292:	5b                   	pop    ebx
c0014293:	5e                   	pop    esi
c0014294:	5f                   	pop    edi
c0014295:	e9 df 5c 00 00       	jmp    c0019f79 <Krnl::panic(char const*)>
c001429a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001429d:	8d 04 81             	lea    eax,[ecx+eax*4]
c00142a0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00142a6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00142ac:	5b                   	pop    ebx
c00142ad:	5e                   	pop    esi
c00142ae:	5f                   	pop    edi
c00142af:	c3                   	ret    

c00142b0 <doubleFault(regs*, void*)>:
c00142b0:	55                   	push   ebp
c00142b1:	89 e5                	mov    ebp,esp
c00142b3:	83 ec 08             	sub    esp,0x8
c00142b6:	83 ec 0c             	sub    esp,0xc
c00142b9:	68 35 ae 02 c0       	push   0xc002ae35
c00142be:	e8 b6 5c 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c00142c3:	83 c4 10             	add    esp,0x10
c00142c6:	90                   	nop
c00142c7:	c9                   	leave  
c00142c8:	c3                   	ret    
c00142c9:	90                   	nop

c00142ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142ca:	56                   	push   esi
c00142cb:	53                   	push   ebx
c00142cc:	50                   	push   eax
c00142cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142d5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00142da:	75 35                	jne    c0014311 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00142dc:	8d 43 20             	lea    eax,[ebx+0x20]
c00142df:	31 d2                	xor    edx,edx
c00142e1:	89 c1                	mov    ecx,eax
c00142e3:	c1 e1 04             	shl    ecx,0x4
c00142e6:	01 f1                	add    ecx,esi
c00142e8:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00142f0:	74 3e                	je     c0014330 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00142f2:	42                   	inc    edx
c00142f3:	83 fa 04             	cmp    edx,0x4
c00142f6:	75 f0                	jne    c00142e8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00142f8:	83 ec 0c             	sub    esp,0xc
c00142fb:	68 4f ae 02 c0       	push   0xc002ae4f
c0014300:	e8 74 5c 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0014305:	83 c4 10             	add    esp,0x10
c0014308:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001430d:	5a                   	pop    edx
c001430e:	5b                   	pop    ebx
c001430f:	5e                   	pop    esi
c0014310:	c3                   	ret    
c0014311:	83 ec 0c             	sub    esp,0xc
c0014314:	56                   	push   esi
c0014315:	e8 bc fb ff ff       	call   c0013ed6 <Device::getName()>
c001431a:	83 c4 10             	add    esp,0x10
c001431d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014320:	75 ba                	jne    c00142dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014322:	83 fb 0f             	cmp    ebx,0xf
c0014325:	7f 29                	jg     c0014350 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014327:	0f b6 9b e0 cf 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3020]
c001432e:	eb ac                	jmp    c00142dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014330:	8d 04 82             	lea    eax,[edx+eax*4]
c0014333:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014337:	8d 04 86             	lea    eax,[esi+eax*4]
c001433a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014340:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014344:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001434a:	89 d8                	mov    eax,ebx
c001434c:	5a                   	pop    edx
c001434d:	5b                   	pop    ebx
c001434e:	5e                   	pop    esi
c001434f:	c3                   	ret    
c0014350:	83 ec 0c             	sub    esp,0xc
c0014353:	68 42 ae 02 c0       	push   0xc002ae42
c0014358:	e8 1c 5c 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c001435d:	83 c4 10             	add    esp,0x10
c0014360:	e9 77 ff ff ff       	jmp    c00142dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014365:	90                   	nop

c0014366 <InterruptController::clearAllHandlers(int, bool)>:
c0014366:	56                   	push   esi
c0014367:	53                   	push   ebx
c0014368:	52                   	push   edx
c0014369:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001436d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014371:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014376:	75 61                	jne    c00143d9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014378:	8d 46 20             	lea    eax,[esi+0x20]
c001437b:	c1 e6 04             	shl    esi,0x4
c001437e:	c1 e0 04             	shl    eax,0x4
c0014381:	01 de                	add    esi,ebx
c0014383:	01 d8                	add    eax,ebx
c0014385:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001438f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014399:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00143a3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00143ad:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00143b7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00143c1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00143cb:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00143d5:	58                   	pop    eax
c00143d6:	5b                   	pop    ebx
c00143d7:	5e                   	pop    esi
c00143d8:	c3                   	ret    
c00143d9:	83 ec 0c             	sub    esp,0xc
c00143dc:	53                   	push   ebx
c00143dd:	e8 f4 fa ff ff       	call   c0013ed6 <Device::getName()>
c00143e2:	83 c4 10             	add    esp,0x10
c00143e5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143e8:	75 8e                	jne    c0014378 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143ea:	83 fe 0f             	cmp    esi,0xf
c00143ed:	7f 09                	jg     c00143f8 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00143ef:	0f b6 b6 e0 cf 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3020]
c00143f6:	eb 80                	jmp    c0014378 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143f8:	83 ec 0c             	sub    esp,0xc
c00143fb:	68 5c ae 02 c0       	push   0xc002ae5c
c0014400:	e8 74 5b 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	e9 6b ff ff ff       	jmp    c0014378 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001440d:	90                   	nop

c001440e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001440e:	56                   	push   esi
c001440f:	53                   	push   ebx
c0014410:	52                   	push   edx
c0014411:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014415:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014419:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001441e:	75 3a                	jne    c001445a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014420:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014424:	8d 50 20             	lea    edx,[eax+0x20]
c0014427:	c1 e2 04             	shl    edx,0x4
c001442a:	8d 04 16             	lea    eax,[esi+edx*1]
c001442d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014431:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014437:	74 0b                	je     c0014444 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014439:	83 c0 04             	add    eax,0x4
c001443c:	39 d0                	cmp    eax,edx
c001443e:	75 f1                	jne    c0014431 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014440:	58                   	pop    eax
c0014441:	5b                   	pop    ebx
c0014442:	5e                   	pop    esi
c0014443:	c3                   	ret    
c0014444:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001444e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014458:	eb df                	jmp    c0014439 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001445a:	83 ec 0c             	sub    esp,0xc
c001445d:	56                   	push   esi
c001445e:	e8 73 fa ff ff       	call   c0013ed6 <Device::getName()>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014469:	75 b5                	jne    c0014420 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001446b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014470:	7f 11                	jg     c0014483 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014476:	0f b6 80 e0 cf 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3020]
c001447d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014481:	eb 9d                	jmp    c0014420 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014483:	83 ec 0c             	sub    esp,0xc
c0014486:	68 69 ae 02 c0       	push   0xc002ae69
c001448b:	e8 e9 5a 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0014490:	83 c4 10             	add    esp,0x10
c0014493:	eb 8b                	jmp    c0014420 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014495 <nmiHandler(regs*, void*)>:
c0014495:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001449a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001449e:	e9 5d a8 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00144a3 <int_handler>:
c00144a3:	55                   	push   ebp
c00144a4:	57                   	push   edi
c00144a5:	56                   	push   esi
c00144a6:	53                   	push   ebx
c00144a7:	83 ec 0c             	sub    esp,0xc
c00144aa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00144ae:	80 3d a4 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e8a4,0x0
c00144b5:	74 0b                	je     c00144c2 <int_handler+0x1f>
c00144b7:	fa                   	cli    
c00144b8:	f4                   	hlt    
c00144b9:	80 3d a4 e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e8a4,0x0
c00144c0:	75 f5                	jne    c00144b7 <int_handler+0x14>
c00144c2:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00144c7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00144ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00144d0:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00144d6:	8d 43 e0             	lea    eax,[ebx-0x20]
c00144d9:	83 f8 17             	cmp    eax,0x17
c00144dc:	77 13                	ja     c00144f1 <int_handler+0x4e>
c00144de:	83 ec 08             	sub    esp,0x8
c00144e1:	8b 17                	mov    edx,DWORD PTR [edi]
c00144e3:	8d 43 e0             	lea    eax,[ebx-0x20]
c00144e6:	0f b6 c0             	movzx  eax,al
c00144e9:	50                   	push   eax
c00144ea:	57                   	push   edi
c00144eb:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00144ee:	83 c4 10             	add    esp,0x10
c00144f1:	83 c3 15             	add    ebx,0x15
c00144f4:	c1 e3 04             	shl    ebx,0x4
c00144f7:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00144fb:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014502:	31 db                	xor    ebx,ebx
c0014504:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014508:	85 c0                	test   eax,eax
c001450a:	74 13                	je     c001451f <int_handler+0x7c>
c001450c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001450f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014513:	74 1c                	je     c0014531 <int_handler+0x8e>
c0014515:	83 ec 08             	sub    esp,0x8
c0014518:	52                   	push   edx
c0014519:	56                   	push   esi
c001451a:	ff d0                	call   eax
c001451c:	83 c4 10             	add    esp,0x10
c001451f:	43                   	inc    ebx
c0014520:	83 fb 04             	cmp    ebx,0x4
c0014523:	75 df                	jne    c0014504 <int_handler+0x61>
c0014525:	83 c4 0c             	add    esp,0xc
c0014528:	31 c0                	xor    eax,eax
c001452a:	5b                   	pop    ebx
c001452b:	31 d2                	xor    edx,edx
c001452d:	5e                   	pop    esi
c001452e:	5f                   	pop    edi
c001452f:	5d                   	pop    ebp
c0014530:	c3                   	ret    
c0014531:	83 ec 08             	sub    esp,0x8
c0014534:	52                   	push   edx
c0014535:	56                   	push   esi
c0014536:	ff d0                	call   eax
c0014538:	83 c4 10             	add    esp,0x10
c001453b:	83 c4 0c             	add    esp,0xc
c001453e:	5b                   	pop    ebx
c001453f:	5e                   	pop    esi
c0014540:	5f                   	pop    edi
c0014541:	5d                   	pop    ebp
c0014542:	c3                   	ret    
c0014543:	90                   	nop

c0014544 <InterruptController::InterruptController(char const*)>:
c0014544:	83 ec 1c             	sub    esp,0x1c
c0014547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454b:	83 ec 08             	sub    esp,0x8
c001454e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014552:	50                   	push   eax
c0014553:	e8 82 f8 ff ff       	call   c0013dda <Device::Device(char const*)>
c0014558:	83 c4 10             	add    esp,0x10
c001455b:	ba 30 b1 02 c0       	mov    edx,0xc002b130
c0014560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014564:	89 10                	mov    DWORD PTR [eax],edx
c0014566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014574:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001457c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014584:	7f 5e                	jg     c00145e4 <InterruptController::InterruptController(char const*)+0xa0>
c0014586:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001458e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014593:	7f 49                	jg     c00145de <InterruptController::InterruptController(char const*)+0x9a>
c0014595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014599:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001459d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00145a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145a8:	01 ca                	add    edx,ecx
c00145aa:	83 c2 54             	add    edx,0x54
c00145ad:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00145b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145bd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00145c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145c8:	01 ca                	add    edx,ecx
c00145ca:	81 c2 54 04 00 00    	add    edx,0x454
c00145d0:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00145d8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00145dc:	eb b0                	jmp    c001458e <InterruptController::InterruptController(char const*)+0x4a>
c00145de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00145e2:	eb 98                	jmp    c001457c <InterruptController::InterruptController(char const*)+0x38>
c00145e4:	90                   	nop
c00145e5:	83 c4 1c             	add    esp,0x1c
c00145e8:	c3                   	ret    
c00145e9:	90                   	nop

c00145ea <InterruptController::~InterruptController()>:
c00145ea:	83 ec 0c             	sub    esp,0xc
c00145ed:	ba 30 b1 02 c0       	mov    edx,0xc002b130
c00145f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f6:	89 10                	mov    DWORD PTR [eax],edx
c00145f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145fc:	83 ec 0c             	sub    esp,0xc
c00145ff:	50                   	push   eax
c0014600:	e8 9f f4 ff ff       	call   c0013aa4 <Device::~Device()>
c0014605:	83 c4 10             	add    esp,0x10
c0014608:	90                   	nop
c0014609:	83 c4 0c             	add    esp,0xc
c001460c:	c3                   	ret    
c001460d:	90                   	nop

c001460e <InterruptController::~InterruptController()>:
c001460e:	83 ec 0c             	sub    esp,0xc
c0014611:	83 ec 0c             	sub    esp,0xc
c0014614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014618:	e8 cd ff ff ff       	call   c00145ea <InterruptController::~InterruptController()>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	83 ec 08             	sub    esp,0x8
c0014623:	68 58 21 00 00       	push   0x2158
c0014628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462c:	e8 94 e0 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0014631:	83 c4 10             	add    esp,0x10
c0014634:	83 c4 0c             	add    esp,0xc
c0014637:	c3                   	ret    

c0014638 <displayDebugInfo(regs*)>:
c0014638:	55                   	push   ebp
c0014639:	57                   	push   edi
c001463a:	56                   	push   esi
c001463b:	53                   	push   ebx
c001463c:	83 ec 24             	sub    esp,0x24
c001463f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014643:	0f 20 c2             	mov    edx,cr0
c0014646:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001464a:	0f 20 d7             	mov    edi,cr2
c001464d:	0f 20 de             	mov    esi,cr3
c0014650:	0f 20 e5             	mov    ebp,cr4
c0014653:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014656:	68 76 ae 02 c0       	push   0xc002ae76
c001465b:	e8 3d e1 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014660:	59                   	pop    ecx
c0014661:	58                   	pop    eax
c0014662:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014665:	68 81 ae 02 c0       	push   0xc002ae81
c001466a:	e8 2e e1 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001466f:	58                   	pop    eax
c0014670:	5a                   	pop    edx
c0014671:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014674:	68 8c ae 02 c0       	push   0xc002ae8c
c0014679:	e8 1f e1 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001467e:	59                   	pop    ecx
c001467f:	58                   	pop    eax
c0014680:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014683:	68 97 ae 02 c0       	push   0xc002ae97
c0014688:	e8 10 e1 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001468d:	58                   	pop    eax
c001468e:	5a                   	pop    edx
c001468f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014692:	68 a2 ae 02 c0       	push   0xc002aea2
c0014697:	e8 01 e1 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001469c:	59                   	pop    ecx
c001469d:	58                   	pop    eax
c001469e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00146a1:	68 ad ae 02 c0       	push   0xc002aead
c00146a6:	e8 f2 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146ab:	58                   	pop    eax
c00146ac:	5a                   	pop    edx
c00146ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146b0:	68 b8 ae 02 c0       	push   0xc002aeb8
c00146b5:	e8 e3 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146ba:	59                   	pop    ecx
c00146bb:	58                   	pop    eax
c00146bc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00146bf:	68 c3 ae 02 c0       	push   0xc002aec3
c00146c4:	e8 d4 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146c9:	58                   	pop    eax
c00146ca:	5a                   	pop    edx
c00146cb:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00146ce:	68 ce ae 02 c0       	push   0xc002aece
c00146d3:	e8 c5 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146d8:	59                   	pop    ecx
c00146d9:	58                   	pop    eax
c00146da:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146dd:	68 dd ae 02 c0       	push   0xc002aedd
c00146e2:	e8 b6 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146e7:	58                   	pop    eax
c00146e8:	5a                   	pop    edx
c00146e9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146ec:	68 e8 ae 02 c0       	push   0xc002aee8
c00146f1:	e8 a7 e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00146f6:	59                   	pop    ecx
c00146f7:	58                   	pop    eax
c00146f8:	57                   	push   edi
c00146f9:	68 f3 ae 02 c0       	push   0xc002aef3
c00146fe:	e8 9a e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014703:	58                   	pop    eax
c0014704:	5a                   	pop    edx
c0014705:	56                   	push   esi
c0014706:	68 fe ae 02 c0       	push   0xc002aefe
c001470b:	e8 8d e0 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014710:	59                   	pop    ecx
c0014711:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014716:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471c:	e8 32 bc ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0014721:	58                   	pop    eax
c0014722:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014725:	5a                   	pop    edx
c0014726:	c1 e0 05             	shl    eax,0x5
c0014729:	05 40 cd 02 c0       	add    eax,0xc002cd40
c001472e:	50                   	push   eax
c001472f:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014734:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473a:	e8 21 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001473f:	59                   	pop    ecx
c0014740:	58                   	pop    eax
c0014741:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014746:	68 09 af 02 c0       	push   0xc002af09
c001474b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014751:	e8 0a c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014756:	58                   	pop    eax
c0014757:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001475c:	5a                   	pop    edx
c001475d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014760:	83 c0 0c             	add    eax,0xc
c0014763:	50                   	push   eax
c0014764:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014769:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001476f:	e8 ec c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014774:	59                   	pop    ecx
c0014775:	58                   	pop    eax
c0014776:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001477b:	68 12 af 02 c0       	push   0xc002af12
c0014780:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014786:	e8 d5 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001478b:	58                   	pop    eax
c001478c:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014791:	5a                   	pop    edx
c0014792:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014795:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479b:	e8 7a c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147a0:	59                   	pop    ecx
c00147a1:	58                   	pop    eax
c00147a2:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00147a7:	68 1a af 02 c0       	push   0xc002af1a
c00147ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b2:	e8 a9 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147b7:	58                   	pop    eax
c00147b8:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00147bd:	5a                   	pop    edx
c00147be:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c7:	e8 4e c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147cc:	59                   	pop    ecx
c00147cd:	58                   	pop    eax
c00147ce:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00147d3:	68 22 af 02 c0       	push   0xc002af22
c00147d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147de:	e8 7d c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147e3:	58                   	pop    eax
c00147e4:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00147e9:	5a                   	pop    edx
c00147ea:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f3:	e8 22 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147f8:	59                   	pop    ecx
c00147f9:	58                   	pop    eax
c00147fa:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00147ff:	68 2a af 02 c0       	push   0xc002af2a
c0014804:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480a:	e8 51 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001480f:	58                   	pop    eax
c0014810:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014815:	5a                   	pop    edx
c0014816:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014819:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001481f:	e8 f6 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014824:	59                   	pop    ecx
c0014825:	58                   	pop    eax
c0014826:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001482b:	68 32 af 02 c0       	push   0xc002af32
c0014830:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014836:	e8 25 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001483b:	58                   	pop    eax
c001483c:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014841:	5a                   	pop    edx
c0014842:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014845:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484b:	e8 ca bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014850:	59                   	pop    ecx
c0014851:	58                   	pop    eax
c0014852:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014857:	68 3a af 02 c0       	push   0xc002af3a
c001485c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014862:	e8 f9 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014867:	58                   	pop    eax
c0014868:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001486d:	5a                   	pop    edx
c001486e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014871:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014877:	e8 9e bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001487c:	59                   	pop    ecx
c001487d:	58                   	pop    eax
c001487e:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014883:	68 42 af 02 c0       	push   0xc002af42
c0014888:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488e:	e8 cd bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014893:	58                   	pop    eax
c0014894:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014899:	5a                   	pop    edx
c001489a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001489e:	52                   	push   edx
c001489f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a5:	e8 70 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148aa:	59                   	pop    ecx
c00148ab:	58                   	pop    eax
c00148ac:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00148b1:	68 4b af 02 c0       	push   0xc002af4b
c00148b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148bc:	e8 9f bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148c1:	58                   	pop    eax
c00148c2:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00148c7:	5a                   	pop    edx
c00148c8:	57                   	push   edi
c00148c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cf:	e8 46 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148d4:	59                   	pop    ecx
c00148d5:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00148da:	5f                   	pop    edi
c00148db:	68 53 af 02 c0       	push   0xc002af53
c00148e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e6:	e8 75 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148eb:	58                   	pop    eax
c00148ec:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00148f1:	5a                   	pop    edx
c00148f2:	56                   	push   esi
c00148f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f9:	e8 1c bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148fe:	59                   	pop    ecx
c00148ff:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014904:	5e                   	pop    esi
c0014905:	68 5b af 02 c0       	push   0xc002af5b
c001490a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014910:	e8 4b bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014915:	5f                   	pop    edi
c0014916:	58                   	pop    eax
c0014917:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001491c:	55                   	push   ebp
c001491d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014923:	e8 f2 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014928:	58                   	pop    eax
c0014929:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001492e:	5a                   	pop    edx
c001492f:	68 63 af 02 c0       	push   0xc002af63
c0014934:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493a:	e8 21 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001493f:	0f 21 c0             	mov    eax,db0
c0014942:	59                   	pop    ecx
c0014943:	5e                   	pop    esi
c0014944:	50                   	push   eax
c0014945:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001494a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014950:	e8 c5 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014955:	5f                   	pop    edi
c0014956:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001495b:	5d                   	pop    ebp
c001495c:	68 6c af 02 c0       	push   0xc002af6c
c0014961:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014967:	e8 f4 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001496c:	0f 21 c8             	mov    eax,db1
c001496f:	5a                   	pop    edx
c0014970:	59                   	pop    ecx
c0014971:	50                   	push   eax
c0014972:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497d:	e8 98 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014982:	5e                   	pop    esi
c0014983:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014988:	5f                   	pop    edi
c0014989:	68 74 af 02 c0       	push   0xc002af74
c001498e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014994:	e8 c7 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014999:	0f 21 d0             	mov    eax,db2
c001499c:	5d                   	pop    ebp
c001499d:	5a                   	pop    edx
c001499e:	50                   	push   eax
c001499f:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00149a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149aa:	e8 6b be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149af:	59                   	pop    ecx
c00149b0:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00149b5:	5e                   	pop    esi
c00149b6:	68 7c af 02 c0       	push   0xc002af7c
c00149bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c1:	e8 9a be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149c6:	0f 21 d8             	mov    eax,db3
c00149c9:	5f                   	pop    edi
c00149ca:	5d                   	pop    ebp
c00149cb:	50                   	push   eax
c00149cc:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00149d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d7:	e8 3e be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149dc:	58                   	pop    eax
c00149dd:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00149e2:	5a                   	pop    edx
c00149e3:	68 84 af 02 c0       	push   0xc002af84
c00149e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ee:	e8 6d be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149f3:	0f 21 f0             	mov    eax,db6
c00149f6:	59                   	pop    ecx
c00149f7:	5e                   	pop    esi
c00149f8:	50                   	push   eax
c00149f9:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00149fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a04:	e8 11 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a09:	5f                   	pop    edi
c0014a0a:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014a0f:	5d                   	pop    ebp
c0014a10:	68 8c af 02 c0       	push   0xc002af8c
c0014a15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a1b:	e8 40 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a20:	0f 21 f8             	mov    eax,db7
c0014a23:	5a                   	pop    edx
c0014a24:	59                   	pop    ecx
c0014a25:	50                   	push   eax
c0014a26:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014a2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a31:	e8 e4 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a36:	5e                   	pop    esi
c0014a37:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a3a:	e8 b6 86 00 00       	call   c001d0f5 <Thr::getDriverNameFromAddress(unsigned long)>
c0014a3f:	83 c4 10             	add    esp,0x10
c0014a42:	85 c0                	test   eax,eax
c0014a44:	74 7d                	je     c0014ac3 <displayDebugInfo(regs*)+0x48b>
c0014a46:	89 c6                	mov    esi,eax
c0014a48:	50                   	push   eax
c0014a49:	50                   	push   eax
c0014a4a:	56                   	push   esi
c0014a4b:	68 94 af 02 c0       	push   0xc002af94
c0014a50:	e8 48 dd ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014a55:	5a                   	pop    edx
c0014a56:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014a5b:	59                   	pop    ecx
c0014a5c:	68 a2 af 02 c0       	push   0xc002afa2
c0014a61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a67:	e8 f4 bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a6c:	5f                   	pop    edi
c0014a6d:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014a72:	5d                   	pop    ebp
c0014a73:	56                   	push   esi
c0014a74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7a:	e8 e1 bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a7f:	58                   	pop    eax
c0014a80:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014a85:	5a                   	pop    edx
c0014a86:	68 ae af 02 c0       	push   0xc002afae
c0014a8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a91:	e8 ca bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a96:	59                   	pop    ecx
c0014a97:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0014a9c:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014aa2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014aa5:	e8 82 86 00 00       	call   c001d12c <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014aaa:	5b                   	pop    ebx
c0014aab:	5d                   	pop    ebp
c0014aac:	50                   	push   eax
c0014aad:	57                   	push   edi
c0014aae:	e8 67 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014ab3:	58                   	pop    eax
c0014ab4:	5a                   	pop    edx
c0014ab5:	56                   	push   esi
c0014ab6:	68 ba af 02 c0       	push   0xc002afba
c0014abb:	e8 dd dc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014ac0:	83 c4 10             	add    esp,0x10
c0014ac3:	fa                   	cli    
c0014ac4:	f4                   	hlt    
c0014ac5:	eb fe                	jmp    c0014ac5 <displayDebugInfo(regs*)+0x48d>

c0014ac7 <x87EmulHandler(regs*, void*)>:
c0014ac7:	83 ec 0c             	sub    esp,0xc
c0014aca:	0f 20 c2             	mov    edx,cr0
c0014acd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ad2:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014ad6:	75 4b                	jne    c0014b23 <x87EmulHandler(regs*, void*)+0x5c>
c0014ad8:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0014add:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014ae3:	85 c0                	test   eax,eax
c0014ae5:	74 05                	je     c0014aec <x87EmulHandler(regs*, void*)+0x25>
c0014ae7:	83 e2 08             	and    edx,0x8
c0014aea:	75 17                	jne    c0014b03 <x87EmulHandler(regs*, void*)+0x3c>
c0014aec:	83 ec 0c             	sub    esp,0xc
c0014aef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014af3:	e8 e3 a9 00 00       	call   c001f4db <Vm::x87Handler(regs*)>
c0014af8:	83 c4 10             	add    esp,0x10
c0014afb:	84 c0                	test   al,al
c0014afd:	74 24                	je     c0014b23 <x87EmulHandler(regs*, void*)+0x5c>
c0014aff:	83 c4 0c             	add    esp,0xc
c0014b02:	c3                   	ret    
c0014b03:	83 ec 0c             	sub    esp,0xc
c0014b06:	68 e0 af 02 c0       	push   0xc002afe0
c0014b0b:	e8 8d dc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014b10:	0f 06                	clts   
c0014b12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b17:	83 c4 10             	add    esp,0x10
c0014b1a:	a3 08 df 02 c0       	mov    ds:0xc002df08,eax
c0014b1f:	83 c4 0c             	add    esp,0xc
c0014b22:	c3                   	ret    
c0014b23:	83 ec 0c             	sub    esp,0xc
c0014b26:	68 ca af 02 c0       	push   0xc002afca
c0014b2b:	e8 6d dc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014b30:	5a                   	pop    edx
c0014b31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b35:	e8 fe fa ff ff       	call   c0014638 <displayDebugInfo(regs*)>

c0014b3a <gpFault(regs*, void*)>:
c0014b3a:	53                   	push   ebx
c0014b3b:	83 ec 14             	sub    esp,0x14
c0014b3e:	c7 05 04 df 02 c0 b4 e9 01 c0 	mov    DWORD PTR ds:0xc002df04,0xc001e9b4
c0014b48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b4c:	53                   	push   ebx
c0014b4d:	e8 62 9e 00 00       	call   c001e9b4 <Vm::faultHandler(regs*)>
c0014b52:	83 c4 10             	add    esp,0x10
c0014b55:	84 c0                	test   al,al
c0014b57:	74 05                	je     c0014b5e <gpFault(regs*, void*)+0x24>
c0014b59:	83 c4 08             	add    esp,0x8
c0014b5c:	5b                   	pop    ebx
c0014b5d:	c3                   	ret    
c0014b5e:	83 ec 0c             	sub    esp,0xc
c0014b61:	68 ed af 02 c0       	push   0xc002afed
c0014b66:	e8 32 dc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014b6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b6e:	e8 c5 fa ff ff       	call   c0014638 <displayDebugInfo(regs*)>

c0014b73 <pgFault(regs*, void*)>:
c0014b73:	53                   	push   ebx
c0014b74:	83 ec 10             	sub    esp,0x10
c0014b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b7b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b7e:	68 08 b0 02 c0       	push   0xc002b008
c0014b83:	e8 15 dc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014b88:	0f 20 d0             	mov    eax,cr2
c0014b8b:	5a                   	pop    edx
c0014b8c:	59                   	pop    ecx
c0014b8d:	50                   	push   eax
c0014b8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b93:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b96:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014b9c:	e8 03 d7 ff ff       	call   c00122a4 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	84 c0                	test   al,al
c0014ba6:	74 05                	je     c0014bad <pgFault(regs*, void*)+0x3a>
c0014ba8:	83 c4 08             	add    esp,0x8
c0014bab:	5b                   	pop    ebx
c0014bac:	c3                   	ret    
c0014bad:	83 ec 0c             	sub    esp,0xc
c0014bb0:	68 1d b0 02 c0       	push   0xc002b01d
c0014bb5:	e8 e3 db ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014bba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bbd:	e8 76 fa ff ff       	call   c0014638 <displayDebugInfo(regs*)>

c0014bc2 <otherISRHandler(regs*, void*)>:
c0014bc2:	53                   	push   ebx
c0014bc3:	83 ec 0c             	sub    esp,0xc
c0014bc6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014bca:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014bcd:	50                   	push   eax
c0014bce:	50                   	push   eax
c0014bcf:	68 2a b0 02 c0       	push   0xc002b02a
c0014bd4:	e8 c4 db ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014bd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bdc:	e8 57 fa ff ff       	call   c0014638 <displayDebugInfo(regs*)>

c0014be1 <opcodeFault(regs*, void*)>:
c0014be1:	55                   	push   ebp
c0014be2:	89 e5                	mov    ebp,esp
c0014be4:	56                   	push   esi
c0014be5:	53                   	push   ebx
c0014be6:	83 ec 40             	sub    esp,0x40
c0014be9:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0014bee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bf4:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014bfa:	84 c0                	test   al,al
c0014bfc:	74 24                	je     c0014c22 <opcodeFault(regs*, void*)+0x41>
c0014bfe:	83 ec 0c             	sub    esp,0xc
c0014c01:	68 48 b0 02 c0       	push   0xc002b048
c0014c06:	e8 92 db ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014c0b:	83 c4 10             	add    esp,0x10
c0014c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c14:	8d 50 19             	lea    edx,[eax+0x19]
c0014c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c1d:	e9 d5 05 00 00       	jmp    c00151f7 <opcodeFault(regs*, void*)+0x616>
c0014c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c28:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014c2b:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014c2f:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c39:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014c3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c41:	3c f0                	cmp    al,0xf0
c0014c43:	75 17                	jne    c0014c5c <opcodeFault(regs*, void*)+0x7b>
c0014c45:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c4e:	8d 50 01             	lea    edx,[eax+0x1]
c0014c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c54:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c57:	e9 da 00 00 00       	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014c5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c61:	3c f2                	cmp    al,0xf2
c0014c63:	74 09                	je     c0014c6e <opcodeFault(regs*, void*)+0x8d>
c0014c65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c68:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6a:	3c f3                	cmp    al,0xf3
c0014c6c:	75 1b                	jne    c0014c89 <opcodeFault(regs*, void*)+0xa8>
c0014c6e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c84:	e9 ad 00 00 00       	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014c89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c8e:	3c 66                	cmp    al,0x66
c0014c90:	75 1f                	jne    c0014cb1 <opcodeFault(regs*, void*)+0xd0>
c0014c92:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c96:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014c9a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ca3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cac:	e9 85 00 00 00       	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014cb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb6:	3c 67                	cmp    al,0x67
c0014cb8:	75 18                	jne    c0014cd2 <opcodeFault(regs*, void*)+0xf1>
c0014cba:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cbe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc7:	8d 50 01             	lea    edx,[eax+0x1]
c0014cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd0:	eb 64                	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014cd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd5:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd7:	3c 2e                	cmp    al,0x2e
c0014cd9:	74 09                	je     c0014ce4 <opcodeFault(regs*, void*)+0x103>
c0014cdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cde:	8a 00                	mov    al,BYTE PTR [eax]
c0014ce0:	3c 3e                	cmp    al,0x3e
c0014ce2:	75 18                	jne    c0014cfc <opcodeFault(regs*, void*)+0x11b>
c0014ce4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ce8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf1:	8d 50 01             	lea    edx,[eax+0x1]
c0014cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cfa:	eb 3a                	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014cfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cff:	8a 00                	mov    al,BYTE PTR [eax]
c0014d01:	3c 36                	cmp    al,0x36
c0014d03:	74 1b                	je     c0014d20 <opcodeFault(regs*, void*)+0x13f>
c0014d05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d08:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0a:	3c 26                	cmp    al,0x26
c0014d0c:	74 12                	je     c0014d20 <opcodeFault(regs*, void*)+0x13f>
c0014d0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d11:	8a 00                	mov    al,BYTE PTR [eax]
c0014d13:	3c 64                	cmp    al,0x64
c0014d15:	74 09                	je     c0014d20 <opcodeFault(regs*, void*)+0x13f>
c0014d17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d1c:	3c 65                	cmp    al,0x65
c0014d1e:	75 16                	jne    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014d20:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d2d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d39:	8a 00                	mov    al,BYTE PTR [eax]
c0014d3b:	3c 0f                	cmp    al,0xf
c0014d3d:	0f 85 ad 00 00 00    	jne    c0014df0 <opcodeFault(regs*, void*)+0x20f>
c0014d43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d46:	40                   	inc    eax
c0014d47:	8a 00                	mov    al,BYTE PTR [eax]
c0014d49:	3c c2                	cmp    al,0xc2
c0014d4b:	74 0e                	je     c0014d5b <opcodeFault(regs*, void*)+0x17a>
c0014d4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d50:	40                   	inc    eax
c0014d51:	8a 00                	mov    al,BYTE PTR [eax]
c0014d53:	3c c3                	cmp    al,0xc3
c0014d55:	0f 85 95 00 00 00    	jne    c0014df0 <opcodeFault(regs*, void*)+0x20f>
c0014d5b:	83 ec 0c             	sub    esp,0xc
c0014d5e:	68 6b b0 02 c0       	push   0xc002b06b
c0014d63:	e8 35 da ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0014d68:	83 c4 10             	add    esp,0x10
c0014d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d71:	8d 50 01             	lea    edx,[eax+0x1]
c0014d74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d77:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d7a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d80:	8a 00                	mov    al,BYTE PTR [eax]
c0014d82:	8d 50 fe             	lea    edx,[eax-0x2]
c0014d85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d88:	88 10                	mov    BYTE PTR [eax],dl
c0014d8a:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014d8d:	50                   	push   eax
c0014d8e:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014d91:	50                   	push   eax
c0014d92:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014d95:	50                   	push   eax
c0014d96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d99:	e8 f4 48 00 00       	call   c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d9e:	83 c4 10             	add    esp,0x10
c0014da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014daa:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014dad:	01 d0                	add    eax,edx
c0014daf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014db2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db8:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014dbb:	48                   	dec    eax
c0014dbc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014dc5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcb:	83 ec 04             	sub    esp,0x4
c0014dce:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014dd1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014dd4:	50                   	push   eax
c0014dd5:	e8 da b3 fe ff       	call   c00001b4 <voodooXADD>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014de0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014de3:	01 c2                	add    edx,eax
c0014de5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014deb:	e9 07 04 00 00       	jmp    c00151f7 <opcodeFault(regs*, void*)+0x616>
c0014df0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df3:	8a 00                	mov    al,BYTE PTR [eax]
c0014df5:	3c 0f                	cmp    al,0xf
c0014df7:	0f 85 8b 01 00 00    	jne    c0014f88 <opcodeFault(regs*, void*)+0x3a7>
c0014dfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e00:	40                   	inc    eax
c0014e01:	8a 00                	mov    al,BYTE PTR [eax]
c0014e03:	3c c7                	cmp    al,0xc7
c0014e05:	0f 86 7d 01 00 00    	jbe    c0014f88 <opcodeFault(regs*, void*)+0x3a7>
c0014e0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0e:	40                   	inc    eax
c0014e0f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e11:	3c cf                	cmp    al,0xcf
c0014e13:	0f 87 6f 01 00 00    	ja     c0014f88 <opcodeFault(regs*, void*)+0x3a7>
c0014e19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1c:	40                   	inc    eax
c0014e1d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e1f:	83 c0 38             	add    eax,0x38
c0014e22:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014e25:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e29:	75 0b                	jne    c0014e36 <opcodeFault(regs*, void*)+0x255>
c0014e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e34:	eb 75                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e36:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e3a:	75 0b                	jne    c0014e47 <opcodeFault(regs*, void*)+0x266>
c0014e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e45:	eb 64                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e47:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e4b:	75 0b                	jne    c0014e58 <opcodeFault(regs*, void*)+0x277>
c0014e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e50:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e53:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e56:	eb 53                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e58:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e5c:	75 0b                	jne    c0014e69 <opcodeFault(regs*, void*)+0x288>
c0014e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e61:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e64:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e67:	eb 42                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e69:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e6d:	75 0b                	jne    c0014e7a <opcodeFault(regs*, void*)+0x299>
c0014e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e72:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014e75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e78:	eb 31                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e7a:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e7e:	75 0b                	jne    c0014e8b <opcodeFault(regs*, void*)+0x2aa>
c0014e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e83:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014e86:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e89:	eb 20                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e8b:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e8f:	75 0b                	jne    c0014e9c <opcodeFault(regs*, void*)+0x2bb>
c0014e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e94:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014e97:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e9a:	eb 0f                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e9c:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ea0:	75 09                	jne    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014ea8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eab:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014eaf:	74 10                	je     c0014ec1 <opcodeFault(regs*, void*)+0x2e0>
c0014eb1:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014eb8:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014ebf:	eb 2d                	jmp    c0014eee <opcodeFault(regs*, void*)+0x30d>
c0014ec1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ec4:	c1 e0 18             	shl    eax,0x18
c0014ec7:	89 c2                	mov    edx,eax
c0014ec9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ecc:	c1 e0 08             	shl    eax,0x8
c0014ecf:	25 00 00 ff 00       	and    eax,0xff0000
c0014ed4:	09 c2                	or     edx,eax
c0014ed6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ed9:	c1 e8 08             	shr    eax,0x8
c0014edc:	25 00 ff 00 00       	and    eax,0xff00
c0014ee1:	09 c2                	or     edx,eax
c0014ee3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ee6:	c1 e8 18             	shr    eax,0x18
c0014ee9:	09 d0                	or     eax,edx
c0014eeb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eee:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ef2:	75 0b                	jne    c0014eff <opcodeFault(regs*, void*)+0x31e>
c0014ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014efa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014efd:	eb 75                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014eff:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f03:	75 0b                	jne    c0014f10 <opcodeFault(regs*, void*)+0x32f>
c0014f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f08:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f0b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014f0e:	eb 64                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f10:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f14:	75 0b                	jne    c0014f21 <opcodeFault(regs*, void*)+0x340>
c0014f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f1c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f1f:	eb 53                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f21:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f25:	75 0b                	jne    c0014f32 <opcodeFault(regs*, void*)+0x351>
c0014f27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f2d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014f30:	eb 42                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f32:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f36:	75 0b                	jne    c0014f43 <opcodeFault(regs*, void*)+0x362>
c0014f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f3e:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014f41:	eb 31                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f43:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f47:	75 0b                	jne    c0014f54 <opcodeFault(regs*, void*)+0x373>
c0014f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014f52:	eb 20                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f54:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f58:	75 0b                	jne    c0014f65 <opcodeFault(regs*, void*)+0x384>
c0014f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f60:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014f63:	eb 0f                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f65:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f69:	75 09                	jne    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f77:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f7a:	8d 50 02             	lea    edx,[eax+0x2]
c0014f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f80:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f83:	e9 6f 02 00 00       	jmp    c00151f7 <opcodeFault(regs*, void*)+0x616>
c0014f88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8d:	3c 0f                	cmp    al,0xf
c0014f8f:	0f 85 8d 01 00 00    	jne    c0015122 <opcodeFault(regs*, void*)+0x541>
c0014f95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f98:	40                   	inc    eax
c0014f99:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9b:	3c c7                	cmp    al,0xc7
c0014f9d:	0f 85 7f 01 00 00    	jne    c0015122 <opcodeFault(regs*, void*)+0x541>
c0014fa3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fac:	8d 50 01             	lea    edx,[eax+0x1]
c0014faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fb5:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014fb8:	50                   	push   eax
c0014fb9:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014fbc:	50                   	push   eax
c0014fbd:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014fc0:	50                   	push   eax
c0014fc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fc4:	e8 c9 46 00 00       	call   c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014fc9:	83 c4 10             	add    esp,0x10
c0014fcc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014fcf:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014fd2:	83 f0 01             	xor    eax,0x1
c0014fd5:	84 c0                	test   al,al
c0014fd7:	0f 84 45 01 00 00    	je     c0015122 <opcodeFault(regs*, void*)+0x541>
c0014fdd:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014fe0:	3c 01                	cmp    al,0x1
c0014fe2:	0f 85 3a 01 00 00    	jne    c0015122 <opcodeFault(regs*, void*)+0x541>
c0014fe8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014feb:	83 f0 01             	xor    eax,0x1
c0014fee:	84 c0                	test   al,al
c0014ff0:	0f 84 2c 01 00 00    	je     c0015122 <opcodeFault(regs*, void*)+0x541>
c0014ff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ffc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fff:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015006:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015009:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001500c:	89 c2                	mov    edx,eax
c001500e:	b8 00 00 00 00       	mov    eax,0x0
c0015013:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015016:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001501f:	ba 00 00 00 00       	mov    edx,0x0
c0015024:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015027:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001502a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015030:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015033:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001503a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001503d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015040:	89 c2                	mov    edx,eax
c0015042:	b8 00 00 00 00       	mov    eax,0x0
c0015047:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001504a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001504d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015050:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015053:	ba 00 00 00 00       	mov    edx,0x0
c0015058:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001505b:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001505e:	fa                   	cli    
c001505f:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015064:	40                   	inc    eax
c0015065:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001506a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001506d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015070:	8b 00                	mov    eax,DWORD PTR [eax]
c0015072:	89 c1                	mov    ecx,eax
c0015074:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015077:	89 cb                	mov    ebx,ecx
c0015079:	89 d0                	mov    eax,edx
c001507b:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001507e:	89 c6                	mov    esi,eax
c0015080:	89 f0                	mov    eax,esi
c0015082:	09 d8                	or     eax,ebx
c0015084:	85 c0                	test   eax,eax
c0015086:	75 21                	jne    c00150a9 <opcodeFault(regs*, void*)+0x4c8>
c0015088:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001508b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001508e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015091:	89 01                	mov    DWORD PTR [ecx],eax
c0015093:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015099:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001509c:	83 c8 40             	or     eax,0x40
c001509f:	89 c2                	mov    edx,eax
c00150a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a4:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150a7:	eb 3e                	jmp    c00150e7 <opcodeFault(regs*, void*)+0x506>
c00150a9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00150ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00150af:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150b4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150b7:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00150ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00150c0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150c3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150c6:	89 d0                	mov    eax,edx
c00150c8:	31 d2                	xor    edx,edx
c00150ca:	89 c3                	mov    ebx,eax
c00150cc:	89 d6                	mov    esi,edx
c00150ce:	89 da                	mov    edx,ebx
c00150d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d3:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00150d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150dc:	83 e0 bf             	and    eax,0xffffffbf
c00150df:	89 c2                	mov    edx,eax
c00150e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e4:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150e7:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00150ec:	48                   	dec    eax
c00150ed:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c00150f2:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00150f7:	85 c0                	test   eax,eax
c00150f9:	75 01                	jne    c00150fc <opcodeFault(regs*, void*)+0x51b>
c00150fb:	fb                   	sti    
c00150fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015102:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015105:	01 c2                	add    edx,eax
c0015107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001510d:	83 ec 0c             	sub    esp,0xc
c0015110:	68 7a b0 02 c0       	push   0xc002b07a
c0015115:	e8 83 d6 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001511a:	83 c4 10             	add    esp,0x10
c001511d:	e9 d5 00 00 00       	jmp    c00151f7 <opcodeFault(regs*, void*)+0x616>
c0015122:	83 ec 0c             	sub    esp,0xc
c0015125:	68 8d b0 02 c0       	push   0xc002b08d
c001512a:	e8 6e d6 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001512f:	83 c4 10             	add    esp,0x10
c0015132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015135:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001513e:	c1 e0 04             	shl    eax,0x4
c0015141:	01 d0                	add    eax,edx
c0015143:	83 c0 03             	add    eax,0x3
c0015146:	8a 00                	mov    al,BYTE PTR [eax]
c0015148:	0f b6 d8             	movzx  ebx,al
c001514b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015154:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015157:	c1 e0 04             	shl    eax,0x4
c001515a:	01 d0                	add    eax,edx
c001515c:	83 c0 02             	add    eax,0x2
c001515f:	8a 00                	mov    al,BYTE PTR [eax]
c0015161:	0f b6 c8             	movzx  ecx,al
c0015164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015167:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001516a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015170:	c1 e0 04             	shl    eax,0x4
c0015173:	01 d0                	add    eax,edx
c0015175:	40                   	inc    eax
c0015176:	8a 00                	mov    al,BYTE PTR [eax]
c0015178:	0f b6 d0             	movzx  edx,al
c001517b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517e:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015184:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015187:	c1 e0 04             	shl    eax,0x4
c001518a:	01 f0                	add    eax,esi
c001518c:	8a 00                	mov    al,BYTE PTR [eax]
c001518e:	0f b6 c0             	movzx  eax,al
c0015191:	83 ec 0c             	sub    esp,0xc
c0015194:	53                   	push   ebx
c0015195:	51                   	push   ecx
c0015196:	52                   	push   edx
c0015197:	50                   	push   eax
c0015198:	68 a0 b0 02 c0       	push   0xc002b0a0
c001519d:	e8 fb d5 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00151a2:	83 c4 20             	add    esp,0x20
c00151a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151ab:	83 c0 03             	add    eax,0x3
c00151ae:	8a 00                	mov    al,BYTE PTR [eax]
c00151b0:	0f b6 d8             	movzx  ebx,al
c00151b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151b9:	83 c0 02             	add    eax,0x2
c00151bc:	8a 00                	mov    al,BYTE PTR [eax]
c00151be:	0f b6 c8             	movzx  ecx,al
c00151c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151c7:	40                   	inc    eax
c00151c8:	8a 00                	mov    al,BYTE PTR [eax]
c00151ca:	0f b6 d0             	movzx  edx,al
c00151cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151d3:	8a 00                	mov    al,BYTE PTR [eax]
c00151d5:	0f b6 c0             	movzx  eax,al
c00151d8:	83 ec 0c             	sub    esp,0xc
c00151db:	53                   	push   ebx
c00151dc:	51                   	push   ecx
c00151dd:	52                   	push   edx
c00151de:	50                   	push   eax
c00151df:	68 c8 b0 02 c0       	push   0xc002b0c8
c00151e4:	e8 b4 d5 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00151e9:	83 c4 20             	add    esp,0x20
c00151ec:	83 ec 0c             	sub    esp,0xc
c00151ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151f2:	e8 41 f4 ff ff       	call   c0014638 <displayDebugInfo(regs*)>
c00151f7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00151fa:	5b                   	pop    ebx
c00151fb:	5e                   	pop    esi
c00151fc:	5d                   	pop    ebp
c00151fd:	c3                   	ret    

c00151fe <displayProgramFault(char const*)>:
c00151fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015203:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015206:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001520c:	85 c0                	test   eax,eax
c001520e:	74 15                	je     c0015225 <displayProgramFault(char const*)+0x27>
c0015210:	83 ec 0c             	sub    esp,0xc
c0015213:	6a 04                	push   0x4
c0015215:	6a 0f                	push   0xf
c0015217:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001521b:	50                   	push   eax
c001521c:	e8 3b b3 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015221:	83 c4 1c             	add    esp,0x1c
c0015224:	c3                   	ret    
c0015225:	c3                   	ret    

c0015226 <setupInterruptController()>:
c0015226:	55                   	push   ebp
c0015227:	89 e5                	mov    ebp,esp
c0015229:	53                   	push   ebx
c001522a:	83 ec 24             	sub    esp,0x24
c001522d:	b8 00 00 00 00       	mov    eax,0x0
c0015232:	85 c0                	test   eax,eax
c0015234:	0f 95 c0             	setne  al
c0015237:	84 c0                	test   al,al
c0015239:	74 5b                	je     c0015296 <setupInterruptController()+0x70>
c001523b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015248:	e8 4c a3 ff ff       	call   c000f599 <malloc>
c001524d:	83 c4 10             	add    esp,0x10
c0015250:	89 c3                	mov    ebx,eax
c0015252:	83 ec 0c             	sub    esp,0xc
c0015255:	53                   	push   ebx
c0015256:	e8 01 06 01 00       	call   c002585c <APIC::APIC()>
c001525b:	83 c4 10             	add    esp,0x10
c001525e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015261:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015264:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015267:	8b 00                	mov    eax,DWORD PTR [eax]
c0015269:	83 c0 08             	add    eax,0x8
c001526c:	8b 00                	mov    eax,DWORD PTR [eax]
c001526e:	6a 00                	push   0x0
c0015270:	6a 00                	push   0x0
c0015272:	6a 00                	push   0x0
c0015274:	52                   	push   edx
c0015275:	ff d0                	call   eax
c0015277:	83 c4 10             	add    esp,0x10
c001527a:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001527f:	83 ec 08             	sub    esp,0x8
c0015282:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015285:	50                   	push   eax
c0015286:	e8 4b e9 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c001528b:	83 c4 10             	add    esp,0x10
c001528e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015291:	e9 79 03 00 00       	jmp    c001560f <setupInterruptController()+0x3e9>
c0015296:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c001529b:	84 c0                	test   al,al
c001529d:	75 14                	jne    c00152b3 <setupInterruptController()+0x8d>
c001529f:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00152a4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00152aa:	83 e2 fe             	and    edx,0xfffffffe
c00152ad:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00152b3:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00152b8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00152be:	83 e0 01             	and    eax,0x1
c00152c1:	84 c0                	test   al,al
c00152c3:	0f 95 c0             	setne  al
c00152c6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00152c9:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00152d0:	83 ec 0c             	sub    esp,0xc
c00152d3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00152d6:	e8 be a2 ff ff       	call   c000f599 <malloc>
c00152db:	83 c4 10             	add    esp,0x10
c00152de:	89 c3                	mov    ebx,eax
c00152e0:	83 ec 0c             	sub    esp,0xc
c00152e3:	53                   	push   ebx
c00152e4:	e8 cb 0a 01 00       	call   c0025db4 <PIC::PIC()>
c00152e9:	83 c4 10             	add    esp,0x10
c00152ec:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152ef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f7:	83 c0 08             	add    eax,0x8
c00152fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fc:	6a 00                	push   0x0
c00152fe:	6a 00                	push   0x0
c0015300:	6a 00                	push   0x0
c0015302:	52                   	push   edx
c0015303:	ff d0                	call   eax
c0015305:	83 c4 10             	add    esp,0x10
c0015308:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001530c:	74 73                	je     c0015381 <setupInterruptController()+0x15b>
c001530e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015311:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015314:	8b 00                	mov    eax,DWORD PTR [eax]
c0015316:	83 c0 0c             	add    eax,0xc
c0015319:	8b 00                	mov    eax,DWORD PTR [eax]
c001531b:	6a 00                	push   0x0
c001531d:	6a 00                	push   0x0
c001531f:	6a 00                	push   0x0
c0015321:	52                   	push   edx
c0015322:	ff d0                	call   eax
c0015324:	83 c4 10             	add    esp,0x10
c0015327:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001532b:	74 15                	je     c0015342 <setupInterruptController()+0x11c>
c001532d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015330:	8b 00                	mov    eax,DWORD PTR [eax]
c0015332:	83 c0 04             	add    eax,0x4
c0015335:	8b 00                	mov    eax,DWORD PTR [eax]
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001533d:	ff d0                	call   eax
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015349:	83 ec 0c             	sub    esp,0xc
c001534c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001534f:	e8 45 a2 ff ff       	call   c000f599 <malloc>
c0015354:	83 c4 10             	add    esp,0x10
c0015357:	89 c3                	mov    ebx,eax
c0015359:	83 ec 0c             	sub    esp,0xc
c001535c:	53                   	push   ebx
c001535d:	e8 fa 04 01 00       	call   c002585c <APIC::APIC()>
c0015362:	83 c4 10             	add    esp,0x10
c0015365:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015368:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001536b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015370:	83 c0 08             	add    eax,0x8
c0015373:	8b 00                	mov    eax,DWORD PTR [eax]
c0015375:	6a 00                	push   0x0
c0015377:	6a 00                	push   0x0
c0015379:	6a 00                	push   0x0
c001537b:	52                   	push   edx
c001537c:	ff d0                	call   eax
c001537e:	83 c4 10             	add    esp,0x10
c0015381:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0015386:	83 ec 08             	sub    esp,0x8
c0015389:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538c:	50                   	push   eax
c001538d:	e8 44 e8 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0015392:	83 c4 10             	add    esp,0x10
c0015395:	c7 05 08 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df08,0x0
c001539f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a4:	83 c0 24             	add    eax,0x24
c00153a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a9:	6a 00                	push   0x0
c00153ab:	68 c2 4b 01 c0       	push   0xc0014bc2
c00153b0:	6a 00                	push   0x0
c00153b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b5:	ff d0                	call   eax
c00153b7:	83 c4 10             	add    esp,0x10
c00153ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bf:	83 c0 24             	add    eax,0x24
c00153c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c4:	6a 00                	push   0x0
c00153c6:	68 c2 4b 01 c0       	push   0xc0014bc2
c00153cb:	6a 01                	push   0x1
c00153cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d0:	ff d0                	call   eax
c00153d2:	83 c4 10             	add    esp,0x10
c00153d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153da:	83 c0 24             	add    eax,0x24
c00153dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153df:	6a 00                	push   0x0
c00153e1:	68 95 44 01 c0       	push   0xc0014495
c00153e6:	6a 02                	push   0x2
c00153e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153eb:	ff d0                	call   eax
c00153ed:	83 c4 10             	add    esp,0x10
c00153f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f5:	83 c0 24             	add    eax,0x24
c00153f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fa:	6a 00                	push   0x0
c00153fc:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015401:	6a 03                	push   0x3
c0015403:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015406:	ff d0                	call   eax
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015410:	83 c0 24             	add    eax,0x24
c0015413:	8b 00                	mov    eax,DWORD PTR [eax]
c0015415:	6a 00                	push   0x0
c0015417:	68 c2 4b 01 c0       	push   0xc0014bc2
c001541c:	6a 04                	push   0x4
c001541e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015421:	ff d0                	call   eax
c0015423:	83 c4 10             	add    esp,0x10
c0015426:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015429:	8b 00                	mov    eax,DWORD PTR [eax]
c001542b:	83 c0 24             	add    eax,0x24
c001542e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015430:	6a 00                	push   0x0
c0015432:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015437:	6a 05                	push   0x5
c0015439:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543c:	ff d0                	call   eax
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015444:	8b 00                	mov    eax,DWORD PTR [eax]
c0015446:	83 c0 24             	add    eax,0x24
c0015449:	8b 00                	mov    eax,DWORD PTR [eax]
c001544b:	6a 00                	push   0x0
c001544d:	68 e1 4b 01 c0       	push   0xc0014be1
c0015452:	6a 06                	push   0x6
c0015454:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015457:	ff d0                	call   eax
c0015459:	83 c4 10             	add    esp,0x10
c001545c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015461:	83 c0 24             	add    eax,0x24
c0015464:	8b 00                	mov    eax,DWORD PTR [eax]
c0015466:	6a 00                	push   0x0
c0015468:	68 c7 4a 01 c0       	push   0xc0014ac7
c001546d:	6a 07                	push   0x7
c001546f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015472:	ff d0                	call   eax
c0015474:	83 c4 10             	add    esp,0x10
c0015477:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547a:	8b 00                	mov    eax,DWORD PTR [eax]
c001547c:	83 c0 24             	add    eax,0x24
c001547f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015481:	6a 00                	push   0x0
c0015483:	68 b0 42 01 c0       	push   0xc00142b0
c0015488:	6a 08                	push   0x8
c001548a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001548d:	ff d0                	call   eax
c001548f:	83 c4 10             	add    esp,0x10
c0015492:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015495:	8b 00                	mov    eax,DWORD PTR [eax]
c0015497:	83 c0 24             	add    eax,0x24
c001549a:	8b 00                	mov    eax,DWORD PTR [eax]
c001549c:	6a 00                	push   0x0
c001549e:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154a3:	6a 09                	push   0x9
c00154a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a8:	ff d0                	call   eax
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b2:	83 c0 24             	add    eax,0x24
c00154b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b7:	6a 00                	push   0x0
c00154b9:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154be:	6a 0a                	push   0xa
c00154c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c3:	ff d0                	call   eax
c00154c5:	83 c4 10             	add    esp,0x10
c00154c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cd:	83 c0 24             	add    eax,0x24
c00154d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d2:	6a 00                	push   0x0
c00154d4:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154d9:	6a 0b                	push   0xb
c00154db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154de:	ff d0                	call   eax
c00154e0:	83 c4 10             	add    esp,0x10
c00154e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e8:	83 c0 24             	add    eax,0x24
c00154eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ed:	6a 00                	push   0x0
c00154ef:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154f4:	6a 0c                	push   0xc
c00154f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f9:	ff d0                	call   eax
c00154fb:	83 c4 10             	add    esp,0x10
c00154fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015501:	8b 00                	mov    eax,DWORD PTR [eax]
c0015503:	83 c0 24             	add    eax,0x24
c0015506:	8b 00                	mov    eax,DWORD PTR [eax]
c0015508:	6a 00                	push   0x0
c001550a:	68 3a 4b 01 c0       	push   0xc0014b3a
c001550f:	6a 0d                	push   0xd
c0015511:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015514:	ff d0                	call   eax
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551c:	8b 00                	mov    eax,DWORD PTR [eax]
c001551e:	83 c0 24             	add    eax,0x24
c0015521:	8b 00                	mov    eax,DWORD PTR [eax]
c0015523:	6a 00                	push   0x0
c0015525:	68 73 4b 01 c0       	push   0xc0014b73
c001552a:	6a 0e                	push   0xe
c001552c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552f:	ff d0                	call   eax
c0015531:	83 c4 10             	add    esp,0x10
c0015534:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015537:	8b 00                	mov    eax,DWORD PTR [eax]
c0015539:	83 c0 24             	add    eax,0x24
c001553c:	8b 00                	mov    eax,DWORD PTR [eax]
c001553e:	6a 00                	push   0x0
c0015540:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015545:	6a 0f                	push   0xf
c0015547:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001554a:	ff d0                	call   eax
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015552:	8b 00                	mov    eax,DWORD PTR [eax]
c0015554:	83 c0 24             	add    eax,0x24
c0015557:	8b 00                	mov    eax,DWORD PTR [eax]
c0015559:	6a 00                	push   0x0
c001555b:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015560:	6a 10                	push   0x10
c0015562:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015565:	ff d0                	call   eax
c0015567:	83 c4 10             	add    esp,0x10
c001556a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556d:	8b 00                	mov    eax,DWORD PTR [eax]
c001556f:	83 c0 24             	add    eax,0x24
c0015572:	8b 00                	mov    eax,DWORD PTR [eax]
c0015574:	6a 00                	push   0x0
c0015576:	68 c2 4b 01 c0       	push   0xc0014bc2
c001557b:	6a 11                	push   0x11
c001557d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015580:	ff d0                	call   eax
c0015582:	83 c4 10             	add    esp,0x10
c0015585:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015588:	8b 00                	mov    eax,DWORD PTR [eax]
c001558a:	83 c0 24             	add    eax,0x24
c001558d:	8b 00                	mov    eax,DWORD PTR [eax]
c001558f:	6a 00                	push   0x0
c0015591:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015596:	6a 12                	push   0x12
c0015598:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001559b:	ff d0                	call   eax
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a5:	83 c0 24             	add    eax,0x24
c00155a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155aa:	6a 00                	push   0x0
c00155ac:	68 c2 4b 01 c0       	push   0xc0014bc2
c00155b1:	6a 13                	push   0x13
c00155b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155b6:	ff d0                	call   eax
c00155b8:	83 c4 10             	add    esp,0x10
c00155bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155be:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c0:	83 c0 24             	add    eax,0x24
c00155c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c5:	6a 00                	push   0x0
c00155c7:	68 c2 4b 01 c0       	push   0xc0014bc2
c00155cc:	6a 14                	push   0x14
c00155ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d1:	ff d0                	call   eax
c00155d3:	83 c4 10             	add    esp,0x10
c00155d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155db:	83 c0 24             	add    eax,0x24
c00155de:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e0:	6a 00                	push   0x0
c00155e2:	68 c2 4b 01 c0       	push   0xc0014bc2
c00155e7:	6a 1e                	push   0x1e
c00155e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ec:	ff d0                	call   eax
c00155ee:	83 c4 10             	add    esp,0x10
c00155f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f6:	83 c0 24             	add    eax,0x24
c00155f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fb:	6a 00                	push   0x0
c00155fd:	68 6b c1 01 c0       	push   0xc001c16b
c0015602:	6a 60                	push   0x60
c0015604:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015607:	ff d0                	call   eax
c0015609:	83 c4 10             	add    esp,0x10
c001560c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015612:	c9                   	leave  
c0015613:	c3                   	ret    

c0015614 <InterruptController::convertLegacyIRQNumber(int)>:
c0015614:	55                   	push   ebp
c0015615:	89 e5                	mov    ebp,esp
c0015617:	83 ec 08             	sub    esp,0x8
c001561a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561d:	83 ec 0c             	sub    esp,0xc
c0015620:	50                   	push   eax
c0015621:	e8 b0 e8 ff ff       	call   c0013ed6 <Device::getName()>
c0015626:	83 c4 10             	add    esp,0x10
c0015629:	8a 00                	mov    al,BYTE PTR [eax]
c001562b:	3c 41                	cmp    al,0x41
c001562d:	0f 94 c0             	sete   al
c0015630:	84 c0                	test   al,al
c0015632:	74 28                	je     c001565c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015634:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015638:	7f 12                	jg     c001564c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001563a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001563d:	05 e0 cf 02 c0       	add    eax,0xc002cfe0
c0015642:	8a 00                	mov    al,BYTE PTR [eax]
c0015644:	0f b6 c0             	movzx  eax,al
c0015647:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001564a:	eb 10                	jmp    c001565c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001564c:	83 ec 0c             	sub    esp,0xc
c001564f:	68 f0 b0 02 c0       	push   0xc002b0f0
c0015654:	e8 20 49 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0015659:	83 c4 10             	add    esp,0x10
c001565c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001565f:	c9                   	leave  
c0015660:	c3                   	ret    
c0015661:	90                   	nop

c0015662 <startGUI(void*)>:
c0015662:	55                   	push   ebp
c0015663:	89 e5                	mov    ebp,esp
c0015665:	53                   	push   ebx
c0015666:	83 ec 04             	sub    esp,0x4
c0015669:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001566e:	48                   	dec    eax
c001566f:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c0015674:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015679:	85 c0                	test   eax,eax
c001567b:	75 01                	jne    c001567e <startGUI(void*)+0x1c>
c001567d:	fb                   	sti    
c001567e:	8b 1d 88 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd88
c0015684:	83 ec 08             	sub    esp,0x8
c0015687:	6a 01                	push   0x1
c0015689:	68 70 b1 02 c0       	push   0xc002b170
c001568e:	e8 b3 7a 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c0015693:	83 c4 10             	add    esp,0x10
c0015696:	83 ec 08             	sub    esp,0x8
c0015699:	53                   	push   ebx
c001569a:	50                   	push   eax
c001569b:	e8 d7 7c 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c00156a0:	83 c4 10             	add    esp,0x10
c00156a3:	8b 1d 88 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd88
c00156a9:	83 ec 08             	sub    esp,0x8
c00156ac:	6a 01                	push   0x1
c00156ae:	68 8a b1 02 c0       	push   0xc002b18a
c00156b3:	e8 8e 7a 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c00156b8:	83 c4 10             	add    esp,0x10
c00156bb:	83 ec 08             	sub    esp,0x8
c00156be:	53                   	push   ebx
c00156bf:	50                   	push   eax
c00156c0:	e8 b2 7c 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c00156c5:	83 c4 10             	add    esp,0x10
c00156c8:	90                   	nop
c00156c9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156cc:	c9                   	leave  
c00156cd:	c3                   	ret    

c00156ce <startGUIVESA(void*)>:
c00156ce:	55                   	push   ebp
c00156cf:	89 e5                	mov    ebp,esp
c00156d1:	53                   	push   ebx
c00156d2:	83 ec 04             	sub    esp,0x4
c00156d5:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00156da:	48                   	dec    eax
c00156db:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c00156e0:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00156e5:	85 c0                	test   eax,eax
c00156e7:	75 01                	jne    c00156ea <startGUIVESA(void*)+0x1c>
c00156e9:	fb                   	sti    
c00156ea:	8b 1d 88 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd88
c00156f0:	83 ec 08             	sub    esp,0x8
c00156f3:	6a 01                	push   0x1
c00156f5:	68 a4 b1 02 c0       	push   0xc002b1a4
c00156fa:	e8 47 7a 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c00156ff:	83 c4 10             	add    esp,0x10
c0015702:	83 ec 08             	sub    esp,0x8
c0015705:	53                   	push   ebx
c0015706:	50                   	push   eax
c0015707:	e8 6b 7c 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c001570c:	83 c4 10             	add    esp,0x10
c001570f:	8b 1d 88 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd88
c0015715:	83 ec 08             	sub    esp,0x8
c0015718:	6a 01                	push   0x1
c001571a:	68 8a b1 02 c0       	push   0xc002b18a
c001571f:	e8 22 7a 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c0015724:	83 c4 10             	add    esp,0x10
c0015727:	83 ec 08             	sub    esp,0x8
c001572a:	53                   	push   ebx
c001572b:	50                   	push   eax
c001572c:	e8 46 7c 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c0015731:	83 c4 10             	add    esp,0x10
c0015734:	90                   	nop
c0015735:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015738:	c9                   	leave  
c0015739:	c3                   	ret    

c001573a <sendKeyToTerminal(unsigned char)>:
c001573a:	55                   	push   ebp
c001573b:	89 e5                	mov    ebp,esp
c001573d:	83 ec 28             	sub    esp,0x28
c0015740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015743:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015746:	a1 44 de 02 c0       	mov    eax,ds:0xc002de44
c001574b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001574f:	83 ec 08             	sub    esp,0x8
c0015752:	52                   	push   edx
c0015753:	50                   	push   eax
c0015754:	e8 ab b2 ff ff       	call   c0010a04 <VgaText::receiveKey(unsigned char)>
c0015759:	83 c4 10             	add    esp,0x10
c001575c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015760:	0f 85 8f 00 00 00    	jne    c00157f5 <sendKeyToTerminal(unsigned char)+0xbb>
c0015766:	fa                   	cli    
c0015767:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001576c:	40                   	inc    eax
c001576d:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c0015772:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c0015777:	40                   	inc    eax
c0015778:	a3 84 f2 02 c0       	mov    ds:0xc002f284,eax
c001577d:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c0015782:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015785:	c7 05 20 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df20,0x0
c001578f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015793:	74 1f                	je     c00157b4 <sendKeyToTerminal(unsigned char)+0x7a>
c0015795:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015798:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001579b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001579e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157a1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157a4:	83 ec 0c             	sub    esp,0xc
c00157a7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157aa:	e8 ee 87 00 00       	call   c001df9d <unblockTask(ThreadControlBlock*)>
c00157af:	83 c4 10             	add    esp,0x10
c00157b2:	eb db                	jmp    c001578f <sendKeyToTerminal(unsigned char)+0x55>
c00157b4:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c00157b9:	48                   	dec    eax
c00157ba:	a3 84 f2 02 c0       	mov    ds:0xc002f284,eax
c00157bf:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c00157c4:	85 c0                	test   eax,eax
c00157c6:	75 18                	jne    c00157e0 <sendKeyToTerminal(unsigned char)+0xa6>
c00157c8:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c00157cd:	85 c0                	test   eax,eax
c00157cf:	74 0f                	je     c00157e0 <sendKeyToTerminal(unsigned char)+0xa6>
c00157d1:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c00157db:	e8 2b 83 00 00       	call   c001db0b <schedule()>
c00157e0:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00157e5:	48                   	dec    eax
c00157e6:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c00157eb:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00157f0:	85 c0                	test   eax,eax
c00157f2:	75 01                	jne    c00157f5 <sendKeyToTerminal(unsigned char)+0xbb>
c00157f4:	fb                   	sti    
c00157f5:	90                   	nop
c00157f6:	c9                   	leave  
c00157f7:	c3                   	ret    

c00157f8 <sendKeyboardToken(KeyboardToken)>:
c00157f8:	55                   	push   ebp
c00157f9:	89 e5                	mov    ebp,esp
c00157fb:	83 ec 18             	sub    esp,0x18
c00157fe:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015804:	0f b7 c0             	movzx  eax,ax
c0015807:	83 f2 01             	xor    edx,0x1
c001580a:	88 90 40 df 02 c0    	mov    BYTE PTR [eax-0x3ffd20c0],dl
c0015810:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0015815:	85 c0                	test   eax,eax
c0015817:	74 24                	je     c001583d <sendKeyboardToken(KeyboardToken)+0x45>
c0015819:	8b 0d 28 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df28
c001581f:	83 ec 04             	sub    esp,0x4
c0015822:	68 40 df 02 c0       	push   0xc002df40
c0015827:	83 ec 08             	sub    esp,0x8
c001582a:	89 e2                	mov    edx,esp
c001582c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582f:	89 02                	mov    DWORD PTR [edx],eax
c0015831:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015834:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015838:	ff d1                	call   ecx
c001583a:	83 c4 10             	add    esp,0x10
c001583d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015840:	66 3d 03 02          	cmp    ax,0x203
c0015844:	75 07                	jne    c001584d <sendKeyboardToken(KeyboardToken)+0x55>
c0015846:	a0 40 e0 02 c0       	mov    al,ds:0xc002e040
c001584b:	84 c0                	test   al,al
c001584d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015851:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015854:	a0 48 e3 02 c0       	mov    al,ds:0xc002e348
c0015859:	38 c2                	cmp    dl,al
c001585b:	74 1c                	je     c0015879 <sendKeyboardToken(KeyboardToken)+0x81>
c001585d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015860:	a2 48 e3 02 c0       	mov    ds:0xc002e348,al
c0015865:	a0 48 e3 02 c0       	mov    al,ds:0xc002e348
c001586a:	0f b6 c0             	movzx  eax,al
c001586d:	83 ec 0c             	sub    esp,0xc
c0015870:	50                   	push   eax
c0015871:	e8 ce a7 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c0015876:	83 c4 10             	add    esp,0x10
c0015879:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001587c:	84 c0                	test   al,al
c001587e:	0f 84 ae 00 00 00    	je     c0015932 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015887:	66 3d 10 03          	cmp    ax,0x310
c001588b:	75 06                	jne    c0015893 <sendKeyboardToken(KeyboardToken)+0x9b>
c001588d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015896:	66 3d 11 03          	cmp    ax,0x311
c001589a:	75 06                	jne    c00158a2 <sendKeyboardToken(KeyboardToken)+0xaa>
c001589c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00158a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a5:	66 3d 12 03          	cmp    ax,0x312
c00158a9:	75 06                	jne    c00158b1 <sendKeyboardToken(KeyboardToken)+0xb9>
c00158ab:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00158b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b4:	66 3d 13 03          	cmp    ax,0x313
c00158b8:	75 06                	jne    c00158c0 <sendKeyboardToken(KeyboardToken)+0xc8>
c00158ba:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00158c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c3:	66 3d 14 03          	cmp    ax,0x314
c00158c7:	75 06                	jne    c00158cf <sendKeyboardToken(KeyboardToken)+0xd7>
c00158c9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00158cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d2:	66 3d 15 03          	cmp    ax,0x315
c00158d6:	75 06                	jne    c00158de <sendKeyboardToken(KeyboardToken)+0xe6>
c00158d8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e1:	66 3d 16 03          	cmp    ax,0x316
c00158e5:	75 06                	jne    c00158ed <sendKeyboardToken(KeyboardToken)+0xf5>
c00158e7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00158ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f0:	66 3d 17 03          	cmp    ax,0x317
c00158f4:	75 06                	jne    c00158fc <sendKeyboardToken(KeyboardToken)+0x104>
c00158f6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00158fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ff:	66 3d 18 03          	cmp    ax,0x318
c0015903:	75 06                	jne    c001590b <sendKeyboardToken(KeyboardToken)+0x113>
c0015905:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001590b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590e:	66 3d 19 03          	cmp    ax,0x319
c0015912:	75 06                	jne    c001591a <sendKeyboardToken(KeyboardToken)+0x122>
c0015914:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001591a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591d:	66 3d 1a 03          	cmp    ax,0x31a
c0015921:	0f 85 c9 00 00 00    	jne    c00159f0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015927:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001592d:	e9 be 00 00 00       	jmp    c00159f0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015935:	66 3d 10 03          	cmp    ax,0x310
c0015939:	75 0a                	jne    c0015945 <sendKeyboardToken(KeyboardToken)+0x14d>
c001593b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015941:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015948:	66 3d 11 03          	cmp    ax,0x311
c001594c:	75 0a                	jne    c0015958 <sendKeyboardToken(KeyboardToken)+0x160>
c001594e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015954:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595b:	66 3d 12 03          	cmp    ax,0x312
c001595f:	75 0a                	jne    c001596b <sendKeyboardToken(KeyboardToken)+0x173>
c0015961:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015967:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001596b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596e:	66 3d 13 03          	cmp    ax,0x313
c0015972:	75 0a                	jne    c001597e <sendKeyboardToken(KeyboardToken)+0x186>
c0015974:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001597a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001597e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015981:	66 3d 14 03          	cmp    ax,0x314
c0015985:	75 0a                	jne    c0015991 <sendKeyboardToken(KeyboardToken)+0x199>
c0015987:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001598d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015994:	66 3d 15 03          	cmp    ax,0x315
c0015998:	75 0a                	jne    c00159a4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001599a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00159a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a7:	66 3d 16 03          	cmp    ax,0x316
c00159ab:	75 0a                	jne    c00159b7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00159ad:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00159b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ba:	66 3d 17 03          	cmp    ax,0x317
c00159be:	75 0a                	jne    c00159ca <sendKeyboardToken(KeyboardToken)+0x1d2>
c00159c0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00159c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cd:	66 3d 18 03          	cmp    ax,0x318
c00159d1:	75 0a                	jne    c00159dd <sendKeyboardToken(KeyboardToken)+0x1e5>
c00159d3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00159d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e0:	66 3d 19 03          	cmp    ax,0x319
c00159e4:	75 0a                	jne    c00159f0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159e6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00159ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f3:	66 3d 00 02          	cmp    ax,0x200
c00159f7:	75 2c                	jne    c0015a25 <sendKeyboardToken(KeyboardToken)+0x22d>
c00159f9:	a0 40 e3 02 c0       	mov    al,ds:0xc002e340
c00159fe:	83 f0 01             	xor    eax,0x1
c0015a01:	84 c0                	test   al,al
c0015a03:	74 20                	je     c0015a25 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015a05:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0015a0a:	6a 01                	push   0x1
c0015a0c:	6a 00                	push   0x0
c0015a0e:	68 62 56 01 c0       	push   0xc0015662
c0015a13:	50                   	push   eax
c0015a14:	e8 cd 7e 00 00       	call   c001d8e6 <Process::createThread(void (*)(void*), void*, int)>
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	c6 05 40 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e340,0x1
c0015a23:	eb 33                	jmp    c0015a58 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a28:	66 3d 01 02          	cmp    ax,0x201
c0015a2c:	75 2a                	jne    c0015a58 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a2e:	a0 40 e3 02 c0       	mov    al,ds:0xc002e340
c0015a33:	83 f0 01             	xor    eax,0x1
c0015a36:	84 c0                	test   al,al
c0015a38:	74 1e                	je     c0015a58 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a3a:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0015a3f:	6a 01                	push   0x1
c0015a41:	6a 00                	push   0x0
c0015a43:	68 ce 56 01 c0       	push   0xc00156ce
c0015a48:	50                   	push   eax
c0015a49:	e8 98 7e 00 00       	call   c001d8e6 <Process::createThread(void (*)(void*), void*, int)>
c0015a4e:	83 c4 10             	add    esp,0x10
c0015a51:	c6 05 40 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e340,0x1
c0015a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5b:	66 3d 1d 03          	cmp    ax,0x31d
c0015a5f:	75 06                	jne    c0015a67 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a61:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6a:	66 3d 1c 03          	cmp    ax,0x31c
c0015a6e:	75 06                	jne    c0015a76 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a70:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a79:	66 3d 1b 03          	cmp    ax,0x31b
c0015a7d:	75 06                	jne    c0015a85 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a7f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a88:	66 3d 1e 03          	cmp    ax,0x31e
c0015a8c:	75 06                	jne    c0015a94 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015a8e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a97:	66 3d 1f 03          	cmp    ax,0x31f
c0015a9b:	75 06                	jne    c0015aa3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015a9d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa6:	66 3d 1a 03          	cmp    ax,0x31a
c0015aaa:	75 06                	jne    c0015ab2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015aac:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015ab2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015ab6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ab9:	83 f0 01             	xor    eax,0x1
c0015abc:	84 c0                	test   al,al
c0015abe:	74 77                	je     c0015b37 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015ac0:	a0 41 e0 02 c0       	mov    al,ds:0xc002e041
c0015ac5:	84 c0                	test   al,al
c0015ac7:	74 41                	je     c0015b0a <sendKeyboardToken(KeyboardToken)+0x312>
c0015ac9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015acd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015ad1:	74 2b                	je     c0015afe <sendKeyboardToken(KeyboardToken)+0x306>
c0015ad3:	8b 15 44 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e344
c0015ad9:	89 d0                	mov    eax,edx
c0015adb:	c1 e0 02             	shl    eax,0x2
c0015ade:	01 d0                	add    eax,edx
c0015ae0:	01 c0                	add    eax,eax
c0015ae2:	a3 44 e3 02 c0       	mov    ds:0xc002e344,eax
c0015ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aea:	0f b7 c0             	movzx  eax,ax
c0015aed:	8d 50 d0             	lea    edx,[eax-0x30]
c0015af0:	a1 44 e3 02 c0       	mov    eax,ds:0xc002e344
c0015af5:	01 d0                	add    eax,edx
c0015af7:	a3 44 e3 02 c0       	mov    ds:0xc002e344,eax
c0015afc:	eb 6d                	jmp    c0015b6b <sendKeyboardToken(KeyboardToken)+0x373>
c0015afe:	c7 05 44 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e344,0x0
c0015b08:	eb 61                	jmp    c0015b6b <sendKeyboardToken(KeyboardToken)+0x373>
c0015b0a:	a1 44 e3 02 c0       	mov    eax,ds:0xc002e344
c0015b0f:	85 c0                	test   eax,eax
c0015b11:	74 18                	je     c0015b2b <sendKeyboardToken(KeyboardToken)+0x333>
c0015b13:	a1 44 e3 02 c0       	mov    eax,ds:0xc002e344
c0015b18:	0f b6 c0             	movzx  eax,al
c0015b1b:	83 ec 0c             	sub    esp,0xc
c0015b1e:	50                   	push   eax
c0015b1f:	e8 16 fc ff ff       	call   c001573a <sendKeyToTerminal(unsigned char)>
c0015b24:	83 c4 10             	add    esp,0x10
c0015b27:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b2b:	c7 05 44 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e344,0x0
c0015b35:	eb 34                	jmp    c0015b6b <sendKeyboardToken(KeyboardToken)+0x373>
c0015b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3a:	66 3d 01 01          	cmp    ax,0x101
c0015b3e:	75 2b                	jne    c0015b6b <sendKeyboardToken(KeyboardToken)+0x373>
c0015b40:	a1 44 e3 02 c0       	mov    eax,ds:0xc002e344
c0015b45:	85 c0                	test   eax,eax
c0015b47:	74 18                	je     c0015b61 <sendKeyboardToken(KeyboardToken)+0x369>
c0015b49:	a1 44 e3 02 c0       	mov    eax,ds:0xc002e344
c0015b4e:	0f b6 c0             	movzx  eax,al
c0015b51:	83 ec 0c             	sub    esp,0xc
c0015b54:	50                   	push   eax
c0015b55:	e8 e0 fb ff ff       	call   c001573a <sendKeyToTerminal(unsigned char)>
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b61:	c7 05 44 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e344,0x0
c0015b6b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b6e:	83 f0 01             	xor    eax,0x1
c0015b71:	84 c0                	test   al,al
c0015b73:	74 4c                	je     c0015bc1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b75:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b78:	83 f0 01             	xor    eax,0x1
c0015b7b:	84 c0                	test   al,al
c0015b7d:	74 42                	je     c0015bc1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b7f:	a0 40 e0 02 c0       	mov    al,ds:0xc002e040
c0015b84:	83 f0 01             	xor    eax,0x1
c0015b87:	84 c0                	test   al,al
c0015b89:	74 36                	je     c0015bc1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8e:	66 83 f8 1f          	cmp    ax,0x1f
c0015b92:	76 09                	jbe    c0015b9d <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015b94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b97:	66 83 f8 7e          	cmp    ax,0x7e
c0015b9b:	76 12                	jbe    c0015baf <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba0:	66 83 f8 0a          	cmp    ax,0xa
c0015ba4:	74 09                	je     c0015baf <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba9:	66 83 f8 08          	cmp    ax,0x8
c0015bad:	75 12                	jne    c0015bc1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015baf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb2:	0f b6 c0             	movzx  eax,al
c0015bb5:	83 ec 0c             	sub    esp,0xc
c0015bb8:	50                   	push   eax
c0015bb9:	e8 7c fb ff ff       	call   c001573a <sendKeyToTerminal(unsigned char)>
c0015bbe:	83 c4 10             	add    esp,0x10
c0015bc1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015bc4:	83 f0 01             	xor    eax,0x1
c0015bc7:	84 c0                	test   al,al
c0015bc9:	74 4f                	je     c0015c1a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bcb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bce:	83 f0 01             	xor    eax,0x1
c0015bd1:	84 c0                	test   al,al
c0015bd3:	74 45                	je     c0015c1a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bd5:	a0 40 e0 02 c0       	mov    al,ds:0xc002e040
c0015bda:	84 c0                	test   al,al
c0015bdc:	74 3c                	je     c0015c1a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be1:	66 83 f8 3f          	cmp    ax,0x3f
c0015be5:	76 33                	jbe    c0015c1a <sendKeyboardToken(KeyboardToken)+0x422>
c0015be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bea:	66 83 f8 7f          	cmp    ax,0x7f
c0015bee:	77 2a                	ja     c0015c1a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf3:	88 c2                	mov    dl,al
c0015bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf8:	66 83 f8 5f          	cmp    ax,0x5f
c0015bfc:	76 04                	jbe    c0015c02 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015bfe:	b0 20                	mov    al,0x20
c0015c00:	eb 02                	jmp    c0015c04 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015c02:	b0 00                	mov    al,0x0
c0015c04:	29 c2                	sub    edx,eax
c0015c06:	88 d0                	mov    al,dl
c0015c08:	83 e8 40             	sub    eax,0x40
c0015c0b:	0f b6 c0             	movzx  eax,al
c0015c0e:	83 ec 0c             	sub    esp,0xc
c0015c11:	50                   	push   eax
c0015c12:	e8 23 fb ff ff       	call   c001573a <sendKeyToTerminal(unsigned char)>
c0015c17:	83 c4 10             	add    esp,0x10
c0015c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1d:	66 3d 00 03          	cmp    ax,0x300
c0015c21:	75 0f                	jne    c0015c32 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015c23:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c26:	83 f0 01             	xor    eax,0x1
c0015c29:	84 c0                	test   al,al
c0015c2b:	74 05                	je     c0015c32 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015c2d:	e8 83 a7 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015c32:	90                   	nop
c0015c33:	c9                   	leave  
c0015c34:	c3                   	ret    

c0015c35 <clearInternalKeybuffer(VgaText*)>:
c0015c35:	55                   	push   ebp
c0015c36:	89 e5                	mov    ebp,esp
c0015c38:	83 ec 08             	sub    esp,0x8
c0015c3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c3e:	05 98 01 00 00       	add    eax,0x198
c0015c43:	83 ec 0c             	sub    esp,0xc
c0015c46:	50                   	push   eax
c0015c47:	e8 20 ab fe ff       	call   c000076c <strlen>
c0015c4c:	83 c4 10             	add    esp,0x10
c0015c4f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c52:	81 c2 98 01 00 00    	add    edx,0x198
c0015c58:	83 ec 04             	sub    esp,0x4
c0015c5b:	50                   	push   eax
c0015c5c:	6a 00                	push   0x0
c0015c5e:	52                   	push   edx
c0015c5f:	e8 ec aa fe ff       	call   c0000750 <memset>
c0015c64:	83 c4 10             	add    esp,0x10
c0015c67:	90                   	nop
c0015c68:	c9                   	leave  
c0015c69:	c3                   	ret    

c0015c6a <readKeyboard(VgaText*, char*, unsigned long)>:
c0015c6a:	55                   	push   ebp
c0015c6b:	89 e5                	mov    ebp,esp
c0015c6d:	83 ec 18             	sub    esp,0x18
c0015c70:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0015c75:	85 c0                	test   eax,eax
c0015c77:	74 2a                	je     c0015ca3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015c79:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015c7f:	8b 0d 28 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df28
c0015c85:	83 ec 04             	sub    esp,0x4
c0015c88:	68 40 df 02 c0       	push   0xc002df40
c0015c8d:	83 ec 08             	sub    esp,0x8
c0015c90:	89 e2                	mov    edx,esp
c0015c92:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015c95:	89 02                	mov    DWORD PTR [edx],eax
c0015c97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015c9a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015c9e:	ff d1                	call   ecx
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	fb                   	sti    
c0015ca4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015cab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015caf:	0f 84 a1 00 00 00    	je     c0015d56 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb8:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015cbe:	84 c0                	test   al,al
c0015cc0:	75 28                	jne    c0015cea <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015cc2:	fa                   	cli    
c0015cc3:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015cc8:	40                   	inc    eax
c0015cc9:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c0015cce:	e8 38 7e 00 00       	call   c001db0b <schedule()>
c0015cd3:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015cd8:	48                   	dec    eax
c0015cd9:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c0015cde:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015ce3:	85 c0                	test   eax,eax
c0015ce5:	75 ce                	jne    c0015cb5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015ce7:	fb                   	sti    
c0015ce8:	eb cb                	jmp    c0015cb5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015cea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ced:	8d 50 01             	lea    edx,[eax+0x1]
c0015cf0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015cf3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cf6:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015cfc:	88 10                	mov    BYTE PTR [eax],dl
c0015cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d01:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015d07:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0d:	05 98 01 00 00       	add    eax,0x198
c0015d12:	83 ec 0c             	sub    esp,0xc
c0015d15:	50                   	push   eax
c0015d16:	e8 51 aa fe ff       	call   c000076c <strlen>
c0015d1b:	83 c4 10             	add    esp,0x10
c0015d1e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d21:	81 c2 98 01 00 00    	add    edx,0x198
c0015d27:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015d2a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d2d:	81 c2 98 01 00 00    	add    edx,0x198
c0015d33:	83 ec 04             	sub    esp,0x4
c0015d36:	50                   	push   eax
c0015d37:	51                   	push   ecx
c0015d38:	52                   	push   edx
c0015d39:	e8 4a a9 fe ff       	call   c0000688 <memmove>
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015d44:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015d47:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015d4b:	0f 85 5a ff ff ff    	jne    c0015cab <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015d51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d54:	eb 03                	jmp    c0015d59 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015d56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d59:	c9                   	leave  
c0015d5a:	c3                   	ret    
c0015d5b:	90                   	nop

c0015d5c <Keyboard::Keyboard(char const*)>:
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d63:	83 ec 08             	sub    esp,0x8
c0015d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d6a:	50                   	push   eax
c0015d6b:	e8 6a e0 ff ff       	call   c0013dda <Device::Device(char const*)>
c0015d70:	83 c4 10             	add    esp,0x10
c0015d73:	ba c8 b1 02 c0       	mov    edx,0xc002b1c8
c0015d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7c:	89 10                	mov    DWORD PTR [eax],edx
c0015d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d82:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015d8c:	c6 05 24 df 02 c0 01 	mov    BYTE PTR ds:0xc002df24,0x1
c0015d93:	90                   	nop
c0015d94:	83 c4 0c             	add    esp,0xc
c0015d97:	c3                   	ret    

c0015d98 <Keyboard::~Keyboard()>:
c0015d98:	83 ec 0c             	sub    esp,0xc
c0015d9b:	ba c8 b1 02 c0       	mov    edx,0xc002b1c8
c0015da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015da4:	89 10                	mov    DWORD PTR [eax],edx
c0015da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015daa:	83 ec 0c             	sub    esp,0xc
c0015dad:	50                   	push   eax
c0015dae:	e8 f1 dc ff ff       	call   c0013aa4 <Device::~Device()>
c0015db3:	83 c4 10             	add    esp,0x10
c0015db6:	90                   	nop
c0015db7:	83 c4 0c             	add    esp,0xc
c0015dba:	c3                   	ret    
c0015dbb:	90                   	nop

c0015dbc <Keyboard::~Keyboard()>:
c0015dbc:	83 ec 0c             	sub    esp,0xc
c0015dbf:	83 ec 0c             	sub    esp,0xc
c0015dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dc6:	e8 cd ff ff ff       	call   c0015d98 <Keyboard::~Keyboard()>
c0015dcb:	83 c4 10             	add    esp,0x10
c0015dce:	83 ec 08             	sub    esp,0x8
c0015dd1:	68 5c 01 00 00       	push   0x15c
c0015dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dda:	e8 e6 c8 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0015ddf:	83 c4 10             	add    esp,0x10
c0015de2:	83 c4 0c             	add    esp,0xc
c0015de5:	c3                   	ret    

c0015de6 <LogicalDisk::close(int, int, void*)>:
c0015de6:	83 c8 ff             	or     eax,0xffffffff
c0015de9:	c3                   	ret    

c0015dea <LogicalDisk::~LogicalDisk()>:
c0015dea:	83 ec 0c             	sub    esp,0xc
c0015ded:	ba 40 b2 02 c0       	mov    edx,0xc002b240
c0015df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015df6:	89 10                	mov    DWORD PTR [eax],edx
c0015df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dfc:	83 ec 0c             	sub    esp,0xc
c0015dff:	50                   	push   eax
c0015e00:	e8 9f dc ff ff       	call   c0013aa4 <Device::~Device()>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	90                   	nop
c0015e09:	83 c4 0c             	add    esp,0xc
c0015e0c:	c3                   	ret    
c0015e0d:	90                   	nop

c0015e0e <LogicalDisk::~LogicalDisk()>:
c0015e0e:	83 ec 0c             	sub    esp,0xc
c0015e11:	83 ec 0c             	sub    esp,0xc
c0015e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e18:	e8 cd ff ff ff       	call   c0015dea <LogicalDisk::~LogicalDisk()>
c0015e1d:	83 c4 10             	add    esp,0x10
c0015e20:	83 ec 08             	sub    esp,0x8
c0015e23:	68 74 01 00 00       	push   0x174
c0015e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e2c:	e8 94 c8 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0015e31:	83 c4 10             	add    esp,0x10
c0015e34:	83 c4 0c             	add    esp,0xc
c0015e37:	c3                   	ret    

c0015e38 <LogicalDisk::open(int, int, void*)>:
c0015e38:	83 ec 18             	sub    esp,0x18
c0015e3b:	68 f4 b1 02 c0       	push   0xc002b1f4
c0015e40:	e8 34 41 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0015e45:	83 c8 ff             	or     eax,0xffffffff
c0015e48:	83 c4 1c             	add    esp,0x1c
c0015e4b:	c3                   	ret    

c0015e4c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015e4c:	53                   	push   ebx
c0015e4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e59:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015e5f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015e65:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015e6b:	77 10                	ja     c0015e7d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015e6d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015e73:	89 d3                	mov    ebx,edx
c0015e75:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015e7b:	72 05                	jb     c0015e82 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015e7d:	83 c8 ff             	or     eax,0xffffffff
c0015e80:	89 c2                	mov    edx,eax
c0015e82:	5b                   	pop    ebx
c0015e83:	c3                   	ret    

c0015e84 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015e84:	56                   	push   esi
c0015e85:	83 c8 ff             	or     eax,0xffffffff
c0015e88:	53                   	push   ebx
c0015e89:	89 c2                	mov    edx,eax
c0015e8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015e8f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015e93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e97:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e9d:	77 27                	ja     c0015ec6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e9f:	89 d8                	mov    eax,ebx
c0015ea1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015ea7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015ead:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015eb2:	89 c2                	mov    edx,eax
c0015eb4:	73 10                	jae    c0015ec6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015eb6:	89 c8                	mov    eax,ecx
c0015eb8:	89 da                	mov    edx,ebx
c0015eba:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015ec0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015ec6:	5b                   	pop    ebx
c0015ec7:	5e                   	pop    esi
c0015ec8:	c3                   	ret    
c0015ec9:	90                   	nop

c0015eca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015eca:	83 ec 1c             	sub    esp,0x1c
c0015ecd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ed1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ed9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015edd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ee1:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ee4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ee8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ef0:	83 ec 08             	sub    esp,0x8
c0015ef3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ef7:	50                   	push   eax
c0015ef8:	e8 dd de ff ff       	call   c0013dda <Device::Device(char const*)>
c0015efd:	83 c4 10             	add    esp,0x10
c0015f00:	ba 40 b2 02 c0       	mov    edx,0xc002b240
c0015f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f09:	89 10                	mov    DWORD PTR [eax],edx
c0015f0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f0f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f1a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015f21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f25:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015f2f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015f33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f3b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015f41:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015f47:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015f4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015f4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f52:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015f58:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015f5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f66:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f70:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f7a:	90                   	nop
c0015f7b:	83 c4 1c             	add    esp,0x1c
c0015f7e:	c3                   	ret    
c0015f7f:	90                   	nop

c0015f80 <LogicalDisk::assignDriveLetter()>:
c0015f80:	55                   	push   ebp
c0015f81:	57                   	push   edi
c0015f82:	56                   	push   esi
c0015f83:	53                   	push   ebx
c0015f84:	83 ec 14             	sub    esp,0x14
c0015f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f8b:	8b 3d 60 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e360
c0015f91:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015f97:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f9b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015fa1:	8b 3d 64 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e364
c0015fa7:	3c 01                	cmp    al,0x1
c0015fa9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015fad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015fb1:	19 c0                	sbb    eax,eax
c0015fb3:	83 e0 02             	and    eax,0x2
c0015fb6:	83 c0 41             	add    eax,0x41
c0015fb9:	0f be e8             	movsx  ebp,al
c0015fbc:	3c 43                	cmp    al,0x43
c0015fbe:	75 10                	jne    c0015fd0 <LogicalDisk::assignDriveLetter()+0x50>
c0015fc0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015fc7:	75 5d                	jne    c0016026 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fc9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015fce:	75 56                	jne    c0016026 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fd0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015fd3:	ba 01 00 00 00       	mov    edx,0x1
c0015fd8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015fdc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015fe0:	d3 e2                	shl    edx,cl
c0015fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fe6:	89 d7                	mov    edi,edx
c0015fe8:	89 d6                	mov    esi,edx
c0015fea:	c1 ff 1f             	sar    edi,0x1f
c0015fed:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015ff1:	21 f9                	and    ecx,edi
c0015ff3:	09 d1                	or     ecx,edx
c0015ff5:	75 2f                	jne    c0016026 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ff7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015ffb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015fff:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016005:	09 f2                	or     edx,esi
c0016007:	89 15 60 e3 02 c0    	mov    DWORD PTR ds:0xc002e360,edx
c001600d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016011:	09 fa                	or     edx,edi
c0016013:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016017:	89 15 64 e3 02 c0    	mov    DWORD PTR ds:0xc002e364,edx
c001601d:	89 1c bd 80 e3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1c80],ebx
c0016024:	eb 08                	jmp    c001602e <LogicalDisk::assignDriveLetter()+0xae>
c0016026:	45                   	inc    ebp
c0016027:	40                   	inc    eax
c0016028:	3c 5b                	cmp    al,0x5b
c001602a:	75 90                	jne    c0015fbc <LogicalDisk::assignDriveLetter()+0x3c>
c001602c:	31 c0                	xor    eax,eax
c001602e:	83 c4 14             	add    esp,0x14
c0016031:	5b                   	pop    ebx
c0016032:	5e                   	pop    esi
c0016033:	5f                   	pop    edi
c0016034:	5d                   	pop    ebp
c0016035:	c3                   	ret    

c0016036 <LogicalDisk::mount()>:
c0016036:	56                   	push   esi
c0016037:	53                   	push   ebx
c0016038:	53                   	push   ebx
c0016039:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001603d:	8b 1d f4 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002def4
c0016043:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001604d:	85 db                	test   ebx,ebx
c001604f:	74 27                	je     c0016078 <LogicalDisk::mount()+0x42>
c0016051:	51                   	push   ecx
c0016052:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016059:	8b 13                	mov    edx,DWORD PTR [ebx]
c001605b:	83 e8 41             	sub    eax,0x41
c001605e:	50                   	push   eax
c001605f:	56                   	push   esi
c0016060:	53                   	push   ebx
c0016061:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016064:	83 c4 10             	add    esp,0x10
c0016067:	84 c0                	test   al,al
c0016069:	74 08                	je     c0016073 <LogicalDisk::mount()+0x3d>
c001606b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016071:	eb 07                	jmp    c001607a <LogicalDisk::mount()+0x44>
c0016073:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016076:	eb d5                	jmp    c001604d <LogicalDisk::mount()+0x17>
c0016078:	31 c0                	xor    eax,eax
c001607a:	5a                   	pop    edx
c001607b:	5b                   	pop    ebx
c001607c:	5e                   	pop    esi
c001607d:	c3                   	ret    

c001607e <LogicalDisk::unmount()>:
c001607e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016082:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001608c:	c3                   	ret    
c001608d:	90                   	nop

c001608e <LogicalDisk::eject()>:
c001608e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016092:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016098:	8b 10                	mov    edx,DWORD PTR [eax]
c001609a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001609e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00160a1:	90                   	nop

c00160a2 <LogicalDisk::unassignDriveLetter()>:
c00160a2:	57                   	push   edi
c00160a3:	56                   	push   esi
c00160a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160a8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00160af:	84 c9                	test   cl,cl
c00160b1:	75 0f                	jne    c00160c2 <LogicalDisk::unassignDriveLetter()+0x20>
c00160b3:	c7 44 24 0c 18 b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b218
c00160bb:	5e                   	pop    esi
c00160bc:	5f                   	pop    edi
c00160bd:	e9 b7 3e 00 00       	jmp    c0019f79 <Krnl::panic(char const*)>
c00160c2:	83 e9 41             	sub    ecx,0x41
c00160c5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00160cc:	b8 01 00 00 00       	mov    eax,0x1
c00160d1:	c7 04 8d 80 e3 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1c80],0x0
c00160dc:	d3 e0                	shl    eax,cl
c00160de:	89 c7                	mov    edi,eax
c00160e0:	f7 d0                	not    eax
c00160e2:	c1 ff 1f             	sar    edi,0x1f
c00160e5:	21 05 60 e3 02 c0    	and    DWORD PTR ds:0xc002e360,eax
c00160eb:	89 fe                	mov    esi,edi
c00160ed:	f7 d6                	not    esi
c00160ef:	21 35 64 e3 02 c0    	and    DWORD PTR ds:0xc002e364,esi
c00160f5:	5e                   	pop    esi
c00160f6:	5f                   	pop    edi
c00160f7:	c3                   	ret    

c00160f8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00160f8:	57                   	push   edi
c00160f9:	56                   	push   esi
c00160fa:	53                   	push   ebx
c00160fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016103:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016107:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001610b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016111:	77 41                	ja     c0016154 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016113:	99                   	cdq    
c0016114:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001611a:	01 c8                	add    eax,ecx
c001611c:	11 da                	adc    edx,ebx
c001611e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016124:	19 d7                	sbb    edi,edx
c0016126:	72 33                	jb     c001615b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016128:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001612e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016134:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016138:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001613c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016142:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016148:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001614c:	5b                   	pop    ebx
c001614d:	5e                   	pop    esi
c001614e:	5f                   	pop    edi
c001614f:	e9 0c 0b 00 00       	jmp    c0016c60 <VCache::read(unsigned long long, int, void*)>
c0016154:	b8 05 00 00 00       	mov    eax,0x5
c0016159:	eb 05                	jmp    c0016160 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001615b:	b8 07 00 00 00       	mov    eax,0x7
c0016160:	5b                   	pop    ebx
c0016161:	5e                   	pop    esi
c0016162:	5f                   	pop    edi
c0016163:	c3                   	ret    

c0016164 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016164:	57                   	push   edi
c0016165:	56                   	push   esi
c0016166:	53                   	push   ebx
c0016167:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001616b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001616f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016177:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001617d:	77 41                	ja     c00161c0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001617f:	99                   	cdq    
c0016180:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016186:	01 c8                	add    eax,ecx
c0016188:	11 da                	adc    edx,ebx
c001618a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016190:	19 d7                	sbb    edi,edx
c0016192:	72 33                	jb     c00161c7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016194:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001619a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00161a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00161a4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00161a8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00161ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00161b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161b8:	5b                   	pop    ebx
c00161b9:	5e                   	pop    esi
c00161ba:	5f                   	pop    edi
c00161bb:	e9 86 09 00 00       	jmp    c0016b46 <VCache::write(unsigned long long, int, void*)>
c00161c0:	b8 05 00 00 00       	mov    eax,0x5
c00161c5:	eb 05                	jmp    c00161cc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00161c7:	b8 07 00 00 00       	mov    eax,0x7
c00161cc:	5b                   	pop    ebx
c00161cd:	5e                   	pop    esi
c00161ce:	5f                   	pop    edi
c00161cf:	c3                   	ret    

c00161d0 <Mouse::Mouse(char const*)>:
c00161d0:	83 ec 0c             	sub    esp,0xc
c00161d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161d7:	83 ec 08             	sub    esp,0x8
c00161da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161de:	50                   	push   eax
c00161df:	e8 f6 db ff ff       	call   c0013dda <Device::Device(char const*)>
c00161e4:	83 c4 10             	add    esp,0x10
c00161e7:	ba 6c b2 02 c0       	mov    edx,0xc002b26c
c00161ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f0:	89 10                	mov    DWORD PTR [eax],edx
c00161f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016200:	90                   	nop
c0016201:	83 c4 0c             	add    esp,0xc
c0016204:	c3                   	ret    
c0016205:	90                   	nop

c0016206 <Mouse::~Mouse()>:
c0016206:	83 ec 0c             	sub    esp,0xc
c0016209:	ba 6c b2 02 c0       	mov    edx,0xc002b26c
c001620e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016212:	89 10                	mov    DWORD PTR [eax],edx
c0016214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016218:	83 ec 0c             	sub    esp,0xc
c001621b:	50                   	push   eax
c001621c:	e8 83 d8 ff ff       	call   c0013aa4 <Device::~Device()>
c0016221:	83 c4 10             	add    esp,0x10
c0016224:	90                   	nop
c0016225:	83 c4 0c             	add    esp,0xc
c0016228:	c3                   	ret    
c0016229:	90                   	nop

c001622a <Mouse::~Mouse()>:
c001622a:	83 ec 0c             	sub    esp,0xc
c001622d:	83 ec 0c             	sub    esp,0xc
c0016230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016234:	e8 cd ff ff ff       	call   c0016206 <Mouse::~Mouse()>
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	83 ec 08             	sub    esp,0x8
c001623f:	68 58 01 00 00       	push   0x158
c0016244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016248:	e8 78 c4 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	83 c4 0c             	add    esp,0xc
c0016253:	c3                   	ret    

c0016254 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016254:	55                   	push   ebp
c0016255:	57                   	push   edi
c0016256:	56                   	push   esi
c0016257:	53                   	push   ebx
c0016258:	81 ec 28 01 00 00    	sub    esp,0x128
c001625e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016265:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001626c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016273:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001627a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001627e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016282:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016289:	e8 48 dc ff ff       	call   c0013ed6 <Device::getName()>
c001628e:	5a                   	pop    edx
c001628f:	59                   	pop    ecx
c0016290:	50                   	push   eax
c0016291:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016295:	55                   	push   ebp
c0016296:	e8 71 a5 fe ff       	call   c000080c <strcpy>
c001629b:	5b                   	pop    ebx
c001629c:	58                   	pop    eax
c001629d:	68 90 b2 02 c0       	push   0xc002b290
c00162a2:	55                   	push   ebp
c00162a3:	e8 a4 a6 fe ff       	call   c000094c <strcat>
c00162a8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00162af:	e8 e5 92 ff ff       	call   c000f599 <malloc>
c00162b4:	83 c4 0c             	add    esp,0xc
c00162b7:	89 c3                	mov    ebx,eax
c00162b9:	57                   	push   edi
c00162ba:	56                   	push   esi
c00162bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162c3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00162ca:	55                   	push   ebp
c00162cb:	50                   	push   eax
c00162cc:	e8 f9 fb ff ff       	call   c0015eca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00162d1:	83 c4 14             	add    esp,0x14
c00162d4:	53                   	push   ebx
c00162d5:	e8 a6 fc ff ff       	call   c0015f80 <LogicalDisk::assignDriveLetter()>
c00162da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162dd:	e8 54 fd ff ff       	call   c0016036 <LogicalDisk::mount()>
c00162e2:	58                   	pop    eax
c00162e3:	5a                   	pop    edx
c00162e4:	53                   	push   ebx
c00162e5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00162ec:	e8 e5 d8 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c00162f1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00162f7:	5b                   	pop    ebx
c00162f8:	5e                   	pop    esi
c00162f9:	5f                   	pop    edi
c00162fa:	5d                   	pop    ebp
c00162fb:	c3                   	ret    

c00162fc <createPartitionsForDisk(PhysicalDisk*)>:
c00162fc:	55                   	push   ebp
c00162fd:	57                   	push   edi
c00162fe:	56                   	push   esi
c00162ff:	53                   	push   ebx
c0016300:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016306:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001630d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016313:	3d 00 02 00 00       	cmp    eax,0x200
c0016318:	74 27                	je     c0016341 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001631a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016320:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016326:	83 ec 10             	sub    esp,0x10
c0016329:	0f a4 f7 0a          	shld   edi,esi,0xa
c001632d:	99                   	cdq    
c001632e:	c1 e6 0a             	shl    esi,0xa
c0016331:	52                   	push   edx
c0016332:	89 fd                	mov    ebp,edi
c0016334:	50                   	push   eax
c0016335:	55                   	push   ebp
c0016336:	56                   	push   esi
c0016337:	e8 a8 05 01 00       	call   c00268e4 <__udivdi3>
c001633c:	e9 b1 00 00 00       	jmp    c00163f2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016341:	83 ec 0c             	sub    esp,0xc
c0016344:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016346:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001634a:	56                   	push   esi
c001634b:	6a 01                	push   0x1
c001634d:	6a 00                	push   0x0
c001634f:	6a 00                	push   0x0
c0016351:	53                   	push   ebx
c0016352:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016355:	83 c4 20             	add    esp,0x20
c0016358:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016360:	75 0a                	jne    c001636c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016362:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001636a:	74 2c                	je     c0016398 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001636c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016372:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016378:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001637e:	83 ec 10             	sub    esp,0x10
c0016381:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016385:	89 f7                	mov    edi,esi
c0016387:	c1 e0 0a             	shl    eax,0xa
c001638a:	c1 ff 1f             	sar    edi,0x1f
c001638d:	57                   	push   edi
c001638e:	56                   	push   esi
c001638f:	52                   	push   edx
c0016390:	50                   	push   eax
c0016391:	e8 4e 05 01 00       	call   c00268e4 <__udivdi3>
c0016396:	eb 5a                	jmp    c00163f2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016398:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001639f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00163a6:	83 e1 7f             	and    ecx,0x7f
c00163a9:	83 e0 7f             	and    eax,0x7f
c00163ac:	01 c1                	add    ecx,eax
c00163ae:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00163b5:	83 e0 7f             	and    eax,0x7f
c00163b8:	01 c1                	add    ecx,eax
c00163ba:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00163c1:	83 e0 7f             	and    eax,0x7f
c00163c4:	00 c1                	add    cl,al
c00163c6:	74 41                	je     c0016409 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00163c8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163ce:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163d4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163da:	83 ec 10             	sub    esp,0x10
c00163dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163e1:	89 f7                	mov    edi,esi
c00163e3:	c1 e0 0a             	shl    eax,0xa
c00163e6:	c1 ff 1f             	sar    edi,0x1f
c00163e9:	57                   	push   edi
c00163ea:	56                   	push   esi
c00163eb:	52                   	push   edx
c00163ec:	50                   	push   eax
c00163ed:	e8 f2 04 01 00       	call   c00268e4 <__udivdi3>
c00163f2:	83 c4 14             	add    esp,0x14
c00163f5:	52                   	push   edx
c00163f6:	50                   	push   eax
c00163f7:	6a 00                	push   0x0
c00163f9:	6a 00                	push   0x0
c00163fb:	53                   	push   ebx
c00163fc:	e8 53 fe ff ff       	call   c0016254 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016401:	83 c4 20             	add    esp,0x20
c0016404:	e9 79 01 00 00       	jmp    c0016582 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016409:	89 f0                	mov    eax,esi
c001640b:	31 f6                	xor    esi,esi
c001640d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016414:	75 02                	jne    c0016418 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016416:	89 f1                	mov    ecx,esi
c0016418:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001641f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016426:	c1 e2 08             	shl    edx,0x8
c0016429:	c1 e7 10             	shl    edi,0x10
c001642c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016434:	09 fa                	or     edx,edi
c0016436:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001643e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016445:	83 c0 10             	add    eax,0x10
c0016448:	09 fa                	or     edx,edi
c001644a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016451:	c1 e7 18             	shl    edi,0x18
c0016454:	09 fa                	or     edx,edi
c0016456:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001645d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016461:	c1 e7 10             	shl    edi,0x10
c0016464:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001646b:	c1 e2 08             	shl    edx,0x8
c001646e:	09 fa                	or     edx,edi
c0016470:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016477:	09 fa                	or     edx,edi
c0016479:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016480:	c1 e7 18             	shl    edi,0x18
c0016483:	09 fa                	or     edx,edi
c0016485:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016489:	46                   	inc    esi
c001648a:	83 fe 04             	cmp    esi,0x4
c001648d:	0f 85 7a ff ff ff    	jne    c001640d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016497:	83 f0 01             	xor    eax,0x1
c001649a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001649e:	75 57                	jne    c00164f7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00164a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164a4:	83 f0 01             	xor    eax,0x1
c00164a7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00164ab:	75 4a                	jne    c00164f7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00164ad:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00164b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00164b9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00164c1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164c7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164cd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164d3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164d7:	89 f7                	mov    edi,esi
c00164d9:	c1 e0 0a             	shl    eax,0xa
c00164dc:	c1 ff 1f             	sar    edi,0x1f
c00164df:	57                   	push   edi
c00164e0:	56                   	push   esi
c00164e1:	52                   	push   edx
c00164e2:	50                   	push   eax
c00164e3:	e8 fc 03 01 00       	call   c00268e4 <__udivdi3>
c00164e8:	83 c4 10             	add    esp,0x10
c00164eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164f3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00164f7:	84 c9                	test   cl,cl
c00164f9:	74 53                	je     c001654e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00164fb:	0f b6 c9             	movzx  ecx,cl
c00164fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016502:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016506:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001650a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001650e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016512:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016516:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001651a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001651e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016522:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001652a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001652e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016532:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016536:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001653a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001653e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016542:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016546:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001654a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001654e:	31 ed                	xor    ebp,ebp
c0016550:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016554:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016558:	89 f8                	mov    eax,edi
c001655a:	09 f0                	or     eax,esi
c001655c:	74 1e                	je     c001657c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001655e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016562:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016566:	89 d1                	mov    ecx,edx
c0016568:	09 c1                	or     ecx,eax
c001656a:	74 10                	je     c001657c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001656c:	83 ec 0c             	sub    esp,0xc
c001656f:	57                   	push   edi
c0016570:	56                   	push   esi
c0016571:	52                   	push   edx
c0016572:	50                   	push   eax
c0016573:	53                   	push   ebx
c0016574:	e8 db fc ff ff       	call   c0016254 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016579:	83 c4 20             	add    esp,0x20
c001657c:	45                   	inc    ebp
c001657d:	83 fd 04             	cmp    ebp,0x4
c0016580:	75 ce                	jne    c0016550 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016582:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016588:	5b                   	pop    ebx
c0016589:	5e                   	pop    esi
c001658a:	5f                   	pop    edi
c001658b:	5d                   	pop    ebp
c001658c:	c3                   	ret    
c001658d:	90                   	nop

c001658e <Serial::Serial(char const*)>:
c001658e:	83 ec 0c             	sub    esp,0xc
c0016591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016595:	83 ec 08             	sub    esp,0x8
c0016598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001659c:	50                   	push   eax
c001659d:	e8 38 d8 ff ff       	call   c0013dda <Device::Device(char const*)>
c00165a2:	83 c4 10             	add    esp,0x10
c00165a5:	ba a4 b2 02 c0       	mov    edx,0xc002b2a4
c00165aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ae:	89 10                	mov    DWORD PTR [eax],edx
c00165b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00165be:	90                   	nop
c00165bf:	83 c4 0c             	add    esp,0xc
c00165c2:	c3                   	ret    
c00165c3:	90                   	nop

c00165c4 <Serial::~Serial()>:
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	ba a4 b2 02 c0       	mov    edx,0xc002b2a4
c00165cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d0:	89 10                	mov    DWORD PTR [eax],edx
c00165d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d6:	83 ec 0c             	sub    esp,0xc
c00165d9:	50                   	push   eax
c00165da:	e8 c5 d4 ff ff       	call   c0013aa4 <Device::~Device()>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	90                   	nop
c00165e3:	83 c4 0c             	add    esp,0xc
c00165e6:	c3                   	ret    
c00165e7:	90                   	nop

c00165e8 <Serial::~Serial()>:
c00165e8:	83 ec 0c             	sub    esp,0xc
c00165eb:	83 ec 0c             	sub    esp,0xc
c00165ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165f2:	e8 cd ff ff ff       	call   c00165c4 <Serial::~Serial()>
c00165f7:	83 c4 10             	add    esp,0x10
c00165fa:	83 ec 08             	sub    esp,0x8
c00165fd:	68 58 01 00 00       	push   0x158
c0016602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016606:	e8 ba c0 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001660b:	83 c4 10             	add    esp,0x10
c001660e:	83 c4 0c             	add    esp,0xc
c0016611:	c3                   	ret    

c0016612 <Timer::Timer(char const*)>:
c0016612:	83 ec 0c             	sub    esp,0xc
c0016615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016619:	83 ec 08             	sub    esp,0x8
c001661c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016620:	50                   	push   eax
c0016621:	e8 b4 d7 ff ff       	call   c0013dda <Device::Device(char const*)>
c0016626:	83 c4 10             	add    esp,0x10
c0016629:	ba e8 b2 02 c0       	mov    edx,0xc002b2e8
c001662e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016632:	89 10                	mov    DWORD PTR [eax],edx
c0016634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016638:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016642:	90                   	nop
c0016643:	83 c4 0c             	add    esp,0xc
c0016646:	c3                   	ret    
c0016647:	90                   	nop

c0016648 <Timer::~Timer()>:
c0016648:	83 ec 0c             	sub    esp,0xc
c001664b:	ba e8 b2 02 c0       	mov    edx,0xc002b2e8
c0016650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016654:	89 10                	mov    DWORD PTR [eax],edx
c0016656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001665a:	83 ec 0c             	sub    esp,0xc
c001665d:	50                   	push   eax
c001665e:	e8 41 d4 ff ff       	call   c0013aa4 <Device::~Device()>
c0016663:	83 c4 10             	add    esp,0x10
c0016666:	90                   	nop
c0016667:	83 c4 0c             	add    esp,0xc
c001666a:	c3                   	ret    
c001666b:	90                   	nop

c001666c <Timer::~Timer()>:
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	83 ec 0c             	sub    esp,0xc
c0016672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016676:	e8 cd ff ff ff       	call   c0016648 <Timer::~Timer()>
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	83 ec 08             	sub    esp,0x8
c0016681:	68 5c 01 00 00       	push   0x15c
c0016686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001668a:	e8 36 c0 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001668f:	83 c4 10             	add    esp,0x10
c0016692:	83 c4 0c             	add    esp,0xc
c0016695:	c3                   	ret    

c0016696 <Timer::read()>:
c0016696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001669a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00166a0:	c3                   	ret    

c00166a1 <timerHandler(unsigned long long)>:
c00166a1:	55                   	push   ebp
c00166a2:	57                   	push   edi
c00166a3:	56                   	push   esi
c00166a4:	53                   	push   ebx
c00166a5:	83 ec 0c             	sub    esp,0xc
c00166a8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00166ac:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00166b0:	01 35 f0 e3 02 c0    	add    DWORD PTR ds:0xc002e3f0,esi
c00166b6:	11 3d f4 e3 02 c0    	adc    DWORD PTR ds:0xc002e3f4,edi
c00166bc:	80 3d 8d dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd8d,0x0
c00166c3:	0f 84 42 01 00 00    	je     c001680b <timerHandler(unsigned long long)+0x16a>
c00166c9:	fa                   	cli    
c00166ca:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c00166d0:	83 ec 0c             	sub    esp,0xc
c00166d3:	ff 05 84 f2 02 c0    	inc    DWORD PTR ds:0xc002f284
c00166d9:	68 98 f2 02 c0       	push   0xc002f298
c00166de:	e8 5b 22 01 00       	call   c002893e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166e3:	83 c4 10             	add    esp,0x10
c00166e6:	84 c0                	test   al,al
c00166e8:	0f 85 a2 00 00 00    	jne    c0016790 <timerHandler(unsigned long long)+0xef>
c00166ee:	83 ec 0c             	sub    esp,0xc
c00166f1:	68 98 f2 02 c0       	push   0xc002f298
c00166f6:	e8 5f 22 01 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166fb:	83 c4 10             	add    esp,0x10
c00166fe:	89 c3                	mov    ebx,eax
c0016700:	83 ec 0c             	sub    esp,0xc
c0016703:	68 98 f2 02 c0       	push   0xc002f298
c0016708:	e8 4d 22 01 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001670d:	c7 04 24 98 f2 02 c0 	mov    DWORD PTR [esp],0xc002f298
c0016714:	89 c5                	mov    ebp,eax
c0016716:	e8 47 22 01 00       	call   c0028962 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001671b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001671e:	83 c4 10             	add    esp,0x10
c0016721:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016724:	39 15 f0 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3f0,edx
c001672a:	a1 f4 e3 02 c0       	mov    eax,ds:0xc002e3f4
c001672f:	19 c8                	sbb    eax,ecx
c0016731:	72 21                	jb     c0016754 <timerHandler(unsigned long long)+0xb3>
c0016733:	83 ec 0c             	sub    esp,0xc
c0016736:	55                   	push   ebp
c0016737:	e8 61 78 00 00       	call   c001df9d <unblockTask(ThreadControlBlock*)>
c001673c:	83 c4 10             	add    esp,0x10
c001673f:	39 eb                	cmp    ebx,ebp
c0016741:	75 21                	jne    c0016764 <timerHandler(unsigned long long)+0xc3>
c0016743:	83 ec 0c             	sub    esp,0xc
c0016746:	68 98 f2 02 c0       	push   0xc002f298
c001674b:	e8 0a 22 01 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016750:	89 c3                	mov    ebx,eax
c0016752:	eb 0d                	jmp    c0016761 <timerHandler(unsigned long long)+0xc0>
c0016754:	50                   	push   eax
c0016755:	50                   	push   eax
c0016756:	55                   	push   ebp
c0016757:	68 98 f2 02 c0       	push   0xc002f298
c001675c:	e8 af 22 01 00       	call   c0028a10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016761:	83 c4 10             	add    esp,0x10
c0016764:	83 ec 0c             	sub    esp,0xc
c0016767:	68 98 f2 02 c0       	push   0xc002f298
c001676c:	e8 cd 21 01 00       	call   c002893e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016771:	83 c4 10             	add    esp,0x10
c0016774:	84 c0                	test   al,al
c0016776:	75 18                	jne    c0016790 <timerHandler(unsigned long long)+0xef>
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	68 98 f2 02 c0       	push   0xc002f298
c0016780:	e8 d5 21 01 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	39 d8                	cmp    eax,ebx
c001678a:	0f 85 70 ff ff ff    	jne    c0016700 <timerHandler(unsigned long long)+0x5f>
c0016790:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016795:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016799:	74 3d                	je     c00167d8 <timerHandler(unsigned long long)+0x137>
c001679b:	80 3d 8c dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd8c,0x0
c00167a2:	74 34                	je     c00167d8 <timerHandler(unsigned long long)+0x137>
c00167a4:	fa                   	cli    
c00167a5:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c00167ab:	31 d2                	xor    edx,edx
c00167ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167b2:	89 f9                	mov    ecx,edi
c00167b4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00167b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00167bf:	39 c6                	cmp    esi,eax
c00167c1:	19 d1                	sbb    ecx,edx
c00167c3:	72 05                	jb     c00167ca <timerHandler(unsigned long long)+0x129>
c00167c5:	e8 41 73 00 00       	call   c001db0b <schedule()>
c00167ca:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00167cf:	48                   	dec    eax
c00167d0:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c00167d5:	75 01                	jne    c00167d8 <timerHandler(unsigned long long)+0x137>
c00167d7:	fb                   	sti    
c00167d8:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c00167dd:	48                   	dec    eax
c00167de:	a3 84 f2 02 c0       	mov    ds:0xc002f284,eax
c00167e3:	75 18                	jne    c00167fd <timerHandler(unsigned long long)+0x15c>
c00167e5:	83 3d 80 f2 02 c0 00 	cmp    DWORD PTR ds:0xc002f280,0x0
c00167ec:	74 0f                	je     c00167fd <timerHandler(unsigned long long)+0x15c>
c00167ee:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c00167f8:	e8 0e 73 00 00       	call   c001db0b <schedule()>
c00167fd:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0016802:	48                   	dec    eax
c0016803:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c0016808:	75 01                	jne    c001680b <timerHandler(unsigned long long)+0x16a>
c001680a:	fb                   	sti    
c001680b:	83 c4 0c             	add    esp,0xc
c001680e:	5b                   	pop    ebx
c001680f:	5e                   	pop    esi
c0016810:	5f                   	pop    edi
c0016811:	5d                   	pop    ebp
c0016812:	c3                   	ret    

c0016813 <setupTimer(int)>:
c0016813:	57                   	push   edi
c0016814:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0016819:	56                   	push   esi
c001681a:	53                   	push   ebx
c001681b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001681f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016825:	83 ec 0c             	sub    esp,0xc
c0016828:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001682e:	e8 a3 d6 ff ff       	call   c0013ed6 <Device::getName()>
c0016833:	83 c4 10             	add    esp,0x10
c0016836:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016839:	0f 85 8d 00 00 00    	jne    c00168cc <setupTimer(int)+0xb9>
c001683f:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0016844:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001684b:	74 7f                	je     c00168cc <setupTimer(int)+0xb9>
c001684d:	83 ec 0c             	sub    esp,0xc
c0016850:	68 5c 01 00 00       	push   0x15c
c0016855:	e8 3f 8d ff ff       	call   c000f599 <malloc>
c001685a:	89 04 24             	mov    DWORD PTR [esp],eax
c001685d:	89 c3                	mov    ebx,eax
c001685f:	e8 5a fc 00 00       	call   c00264be <PIT::PIT()>
c0016864:	59                   	pop    ecx
c0016865:	5f                   	pop    edi
c0016866:	53                   	push   ebx
c0016867:	ff 35 88 dd 02 c0    	push   DWORD PTR ds:0xc002dd88
c001686d:	e8 64 d3 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0016872:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016874:	6a 00                	push   0x0
c0016876:	6a 00                	push   0x0
c0016878:	56                   	push   esi
c0016879:	53                   	push   ebx
c001687a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001687d:	83 c4 14             	add    esp,0x14
c0016880:	68 60 01 00 00       	push   0x160
c0016885:	e8 0f 8d ff ff       	call   c000f599 <malloc>
c001688a:	89 04 24             	mov    DWORD PTR [esp],eax
c001688d:	89 c7                	mov    edi,eax
c001688f:	e8 da fa 00 00       	call   c002636e <APICTimer::APICTimer()>
c0016894:	6a 00                	push   0x0
c0016896:	6a 00                	push   0x0
c0016898:	56                   	push   esi
c0016899:	57                   	push   edi
c001689a:	e8 d1 f9 00 00       	call   c0026270 <APICTimer::open(int, int, void*)>
c001689f:	83 c4 20             	add    esp,0x20
c00168a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168a4:	6a 00                	push   0x0
c00168a6:	6a 00                	push   0x0
c00168a8:	6a 00                	push   0x0
c00168aa:	53                   	push   ebx
c00168ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00168ae:	58                   	pop    eax
c00168af:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00168b4:	5a                   	pop    edx
c00168b5:	57                   	push   edi
c00168b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168bc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00168c2:	e8 0f d3 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c00168c7:	83 c4 10             	add    esp,0x10
c00168ca:	eb 33                	jmp    c00168ff <setupTimer(int)+0xec>
c00168cc:	83 ec 0c             	sub    esp,0xc
c00168cf:	68 5c 01 00 00       	push   0x15c
c00168d4:	e8 c0 8c ff ff       	call   c000f599 <malloc>
c00168d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00168dc:	89 c3                	mov    ebx,eax
c00168de:	e8 db fb 00 00       	call   c00264be <PIT::PIT()>
c00168e3:	58                   	pop    eax
c00168e4:	5a                   	pop    edx
c00168e5:	53                   	push   ebx
c00168e6:	ff 35 88 dd 02 c0    	push   DWORD PTR ds:0xc002dd88
c00168ec:	e8 e5 d2 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c00168f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168f3:	6a 00                	push   0x0
c00168f5:	6a 00                	push   0x0
c00168f7:	56                   	push   esi
c00168f8:	53                   	push   ebx
c00168f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168fc:	83 c4 20             	add    esp,0x20
c00168ff:	89 d8                	mov    eax,ebx
c0016901:	5b                   	pop    ebx
c0016902:	5e                   	pop    esi
c0016903:	5f                   	pop    edi
c0016904:	c3                   	ret    
c0016905:	90                   	nop

c0016906 <VCache::VCache(PhysicalDisk*)>:
c0016906:	53                   	push   ebx
c0016907:	83 ec 18             	sub    esp,0x18
c001690a:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c001690f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016913:	89 10                	mov    DWORD PTR [eax],edx
c0016915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016919:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016924:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001692b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016936:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001693d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016941:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016948:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001694f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016953:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001695a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016966:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001696d:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016978:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001697c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016980:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016988:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001698c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016990:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016997:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001699f:	83 ec 0c             	sub    esp,0xc
c00169a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169a6:	e8 ee 8b ff ff       	call   c000f599 <malloc>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	89 c3                	mov    ebx,eax
c00169b0:	83 ec 0c             	sub    esp,0xc
c00169b3:	53                   	push   ebx
c00169b4:	e8 1b 6f 00 00       	call   c001d8d4 <Mutex::Mutex()>
c00169b9:	83 c4 10             	add    esp,0x10
c00169bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00169c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00169cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00169ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d2:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00169d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169dd:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00169e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00169ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169ee:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00169f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169fa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00169fe:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016a01:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016a04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a08:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016a0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a10:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a16:	05 00 01 00 00       	add    eax,0x100
c0016a1b:	c1 e0 04             	shl    eax,0x4
c0016a1e:	83 ec 0c             	sub    esp,0xc
c0016a21:	50                   	push   eax
c0016a22:	e8 72 8b ff ff       	call   c000f599 <malloc>
c0016a27:	83 c4 10             	add    esp,0x10
c0016a2a:	89 c2                	mov    edx,eax
c0016a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a30:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a37:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016a3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a42:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016a46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a4a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a50:	c1 e0 07             	shl    eax,0x7
c0016a53:	83 ec 0c             	sub    esp,0xc
c0016a56:	50                   	push   eax
c0016a57:	e8 3d 8b ff ff       	call   c000f599 <malloc>
c0016a5c:	83 c4 10             	add    esp,0x10
c0016a5f:	89 c2                	mov    edx,eax
c0016a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a65:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016a68:	90                   	nop
c0016a69:	83 c4 18             	add    esp,0x18
c0016a6c:	5b                   	pop    ebx
c0016a6d:	c3                   	ret    

c0016a6e <VCache::invalidateReadBuffer()>:
c0016a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a72:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016a78:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016a7c:	c3                   	ret    
c0016a7d:	90                   	nop

c0016a7e <VCache::writeWriteBuffer()>:
c0016a7e:	53                   	push   ebx
c0016a7f:	83 ec 0c             	sub    esp,0xc
c0016a82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016a86:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a8c:	68 10 b3 02 c0       	push   0xc002b310
c0016a91:	e8 07 bd ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016a96:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a99:	5a                   	pop    edx
c0016a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a9c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a9f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016aa2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016aa5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016aa8:	50                   	push   eax
c0016aa9:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016aac:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016ab3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016aba:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016abe:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016ac5:	83 c4 28             	add    esp,0x28
c0016ac8:	5b                   	pop    ebx
c0016ac9:	c3                   	ret    

c0016aca <VCache::~VCache()>:
c0016aca:	83 ec 0c             	sub    esp,0xc
c0016acd:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c0016ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad6:	89 10                	mov    DWORD PTR [eax],edx
c0016ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016adc:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016adf:	84 c0                	test   al,al
c0016ae1:	74 0f                	je     c0016af2 <VCache::~VCache()+0x28>
c0016ae3:	83 ec 0c             	sub    esp,0xc
c0016ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aea:	e8 8f ff ff ff       	call   c0016a7e <VCache::writeWriteBuffer()>
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016af9:	83 ec 0c             	sub    esp,0xc
c0016afc:	50                   	push   eax
c0016afd:	e8 a7 8a ff ff       	call   c000f5a9 <free>
c0016b02:	83 c4 10             	add    esp,0x10
c0016b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b09:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016b0c:	83 ec 0c             	sub    esp,0xc
c0016b0f:	50                   	push   eax
c0016b10:	e8 94 8a ff ff       	call   c000f5a9 <free>
c0016b15:	83 c4 10             	add    esp,0x10
c0016b18:	90                   	nop
c0016b19:	83 c4 0c             	add    esp,0xc
c0016b1c:	c3                   	ret    
c0016b1d:	90                   	nop

c0016b1e <VCache::~VCache()>:
c0016b1e:	83 ec 0c             	sub    esp,0xc
c0016b21:	83 ec 0c             	sub    esp,0xc
c0016b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b28:	e8 9d ff ff ff       	call   c0016aca <VCache::~VCache()>
c0016b2d:	83 c4 10             	add    esp,0x10
c0016b30:	83 ec 08             	sub    esp,0x8
c0016b33:	6a 44                	push   0x44
c0016b35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b39:	e8 87 bb ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0016b3e:	83 c4 10             	add    esp,0x10
c0016b41:	83 c4 0c             	add    esp,0xc
c0016b44:	c3                   	ret    
c0016b45:	90                   	nop

c0016b46 <VCache::write(unsigned long long, int, void*)>:
c0016b46:	55                   	push   ebp
c0016b47:	57                   	push   edi
c0016b48:	56                   	push   esi
c0016b49:	53                   	push   ebx
c0016b4a:	83 ec 28             	sub    esp,0x28
c0016b4d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b51:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016b55:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b5d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016b61:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b65:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0016b69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b6c:	e8 a9 72 00 00       	call   c001de1a <Semaphore::acquire()>
c0016b71:	c7 04 24 34 b3 02 c0 	mov    DWORD PTR [esp],0xc002b334
c0016b78:	e8 20 bc ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016b7d:	83 c4 10             	add    esp,0x10
c0016b80:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016b84:	74 0c                	je     c0016b92 <VCache::write(unsigned long long, int, void*)+0x4c>
c0016b86:	83 ec 0c             	sub    esp,0xc
c0016b89:	53                   	push   ebx
c0016b8a:	e8 df fe ff ff       	call   c0016a6e <VCache::invalidateReadBuffer()>
c0016b8f:	83 c4 10             	add    esp,0x10
c0016b92:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b96:	74 58                	je     c0016bf0 <VCache::write(unsigned long long, int, void*)+0xaa>
c0016b98:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016b9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016b9f:	89 f8                	mov    eax,edi
c0016ba1:	99                   	cdq    
c0016ba2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016ba5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016ba8:	31 c1                	xor    ecx,eax
c0016baa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bae:	31 d0                	xor    eax,edx
c0016bb0:	09 c1                	or     ecx,eax
c0016bb2:	75 30                	jne    c0016be4 <VCache::write(unsigned long long, int, void*)+0x9e>
c0016bb4:	83 fd 01             	cmp    ebp,0x1
c0016bb7:	75 2b                	jne    c0016be4 <VCache::write(unsigned long long, int, void*)+0x9e>
c0016bb9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bbc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bc2:	0f af f9             	imul   edi,ecx
c0016bc5:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016bc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016bcd:	40                   	inc    eax
c0016bce:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016bd1:	83 c0 80             	add    eax,0xffffff80
c0016bd4:	75 69                	jne    c0016c3f <VCache::write(unsigned long long, int, void*)+0xf9>
c0016bd6:	83 ec 0c             	sub    esp,0xc
c0016bd9:	53                   	push   ebx
c0016bda:	e8 9f fe ff ff       	call   c0016a7e <VCache::writeWriteBuffer()>
c0016bdf:	83 c4 10             	add    esp,0x10
c0016be2:	eb 5b                	jmp    c0016c3f <VCache::write(unsigned long long, int, void*)+0xf9>
c0016be4:	83 ec 0c             	sub    esp,0xc
c0016be7:	53                   	push   ebx
c0016be8:	e8 91 fe ff ff       	call   c0016a7e <VCache::writeWriteBuffer()>
c0016bed:	83 c4 10             	add    esp,0x10
c0016bf0:	83 fd 7f             	cmp    ebp,0x7f
c0016bf3:	7f 25                	jg     c0016c1a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016bf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bfd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0016c00:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0016c03:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016c06:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016c0a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c0d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016c10:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016c16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c18:	eb 25                	jmp    c0016c3f <VCache::write(unsigned long long, int, void*)+0xf9>
c0016c1a:	52                   	push   edx
c0016c1b:	56                   	push   esi
c0016c1c:	55                   	push   ebp
c0016c1d:	68 5b b3 02 c0       	push   0xc002b35b
c0016c22:	e8 76 bb ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016c27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0016c2f:	55                   	push   ebp
c0016c30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c34:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c38:	50                   	push   eax
c0016c39:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c3c:	83 c4 20             	add    esp,0x20
c0016c3f:	83 ec 0c             	sub    esp,0xc
c0016c42:	68 78 b3 02 c0       	push   0xc002b378
c0016c47:	e8 51 bb ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016c4c:	58                   	pop    eax
c0016c4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c50:	e8 31 78 00 00       	call   c001e486 <Semaphore::release()>
c0016c55:	83 c4 2c             	add    esp,0x2c
c0016c58:	31 c0                	xor    eax,eax
c0016c5a:	5b                   	pop    ebx
c0016c5b:	5e                   	pop    esi
c0016c5c:	5f                   	pop    edi
c0016c5d:	5d                   	pop    ebp
c0016c5e:	c3                   	ret    
c0016c5f:	90                   	nop

c0016c60 <VCache::read(unsigned long long, int, void*)>:
c0016c60:	55                   	push   ebp
c0016c61:	57                   	push   edi
c0016c62:	56                   	push   esi
c0016c63:	53                   	push   ebx
c0016c64:	83 ec 28             	sub    esp,0x28
c0016c67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c6b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016c6f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016c73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c77:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c7b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016c7f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016c83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c86:	e8 8f 71 00 00       	call   c001de1a <Semaphore::acquire()>
c0016c8b:	c7 04 24 98 b3 02 c0 	mov    DWORD PTR [esp],0xc002b398
c0016c92:	e8 06 bb ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016c97:	83 c4 10             	add    esp,0x10
c0016c9a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c9e:	74 0c                	je     c0016cac <VCache::read(unsigned long long, int, void*)+0x4c>
c0016ca0:	83 ec 0c             	sub    esp,0xc
c0016ca3:	53                   	push   ebx
c0016ca4:	e8 d5 fd ff ff       	call   c0016a7e <VCache::writeWriteBuffer()>
c0016ca9:	83 c4 10             	add    esp,0x10
c0016cac:	83 fe 01             	cmp    esi,0x1
c0016caf:	75 79                	jne    c0016d2a <VCache::read(unsigned long long, int, void*)+0xca>
c0016cb1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cb4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016cbb:	75 6d                	jne    c0016d2a <VCache::read(unsigned long long, int, void*)+0xca>
c0016cbd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016cc0:	89 d1                	mov    ecx,edx
c0016cc2:	f7 d9                	neg    ecx
c0016cc4:	89 cf                	mov    edi,ecx
c0016cc6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016cca:	c1 ff 1f             	sar    edi,0x1f
c0016ccd:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016cd0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016cd4:	89 ce                	mov    esi,ecx
c0016cd6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cda:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016cde:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ce2:	89 cf                	mov    edi,ecx
c0016ce4:	74 0a                	je     c0016cf0 <VCache::read(unsigned long long, int, void*)+0x90>
c0016ce6:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016ce9:	75 05                	jne    c0016cf0 <VCache::read(unsigned long long, int, void*)+0x90>
c0016ceb:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016cee:	74 1c                	je     c0016d0c <VCache::read(unsigned long long, int, void*)+0xac>
c0016cf0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016cf4:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016cf7:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016cff:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016d02:	52                   	push   edx
c0016d03:	57                   	push   edi
c0016d04:	56                   	push   esi
c0016d05:	50                   	push   eax
c0016d06:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016d09:	83 c4 20             	add    esp,0x20
c0016d0c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d0f:	89 ef                	mov    edi,ebp
c0016d11:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d17:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016d1a:	8d 70 ff             	lea    esi,[eax-0x1]
c0016d1d:	23 34 24             	and    esi,DWORD PTR [esp]
c0016d20:	0f af f1             	imul   esi,ecx
c0016d23:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016d26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d28:	eb 30                	jmp    c0016d5a <VCache::read(unsigned long long, int, void*)+0xfa>
c0016d2a:	83 ec 0c             	sub    esp,0xc
c0016d2d:	53                   	push   ebx
c0016d2e:	e8 3b fd ff ff       	call   c0016a6e <VCache::invalidateReadBuffer()>
c0016d33:	83 c4 0c             	add    esp,0xc
c0016d36:	55                   	push   ebp
c0016d37:	56                   	push   esi
c0016d38:	68 be b3 02 c0       	push   0xc002b3be
c0016d3d:	e8 5b ba ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016d42:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d45:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d4a:	56                   	push   esi
c0016d4b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d53:	50                   	push   eax
c0016d54:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016d57:	83 c4 20             	add    esp,0x20
c0016d5a:	83 ec 0c             	sub    esp,0xc
c0016d5d:	68 da b3 02 c0       	push   0xc002b3da
c0016d62:	e8 36 ba ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0016d67:	58                   	pop    eax
c0016d68:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d6b:	e8 16 77 00 00       	call   c001e486 <Semaphore::release()>
c0016d70:	83 c4 2c             	add    esp,0x2c
c0016d73:	31 c0                	xor    eax,eax
c0016d75:	5b                   	pop    ebx
c0016d76:	5e                   	pop    esi
c0016d77:	5f                   	pop    edi
c0016d78:	5d                   	pop    ebp
c0016d79:	c3                   	ret    

c0016d7a <Video::putrect(int, int, int, int, unsigned int)>:
c0016d7a:	55                   	push   ebp
c0016d7b:	57                   	push   edi
c0016d7c:	56                   	push   esi
c0016d7d:	53                   	push   ebx
c0016d7e:	83 ec 1c             	sub    esp,0x1c
c0016d81:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d89:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016d8d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016d91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d99:	01 df                	add    edi,ebx
c0016d9b:	39 fb                	cmp    ebx,edi
c0016d9d:	7d 1f                	jge    c0016dbe <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016d9f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016da3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016da7:	7d 12                	jge    c0016dbb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016da9:	8b 16                	mov    edx,DWORD PTR [esi]
c0016dab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016daf:	53                   	push   ebx
c0016db0:	55                   	push   ebp
c0016db1:	45                   	inc    ebp
c0016db2:	56                   	push   esi
c0016db3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	eb e8                	jmp    c0016da3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016dbb:	43                   	inc    ebx
c0016dbc:	eb dd                	jmp    c0016d9b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016dbe:	83 c4 1c             	add    esp,0x1c
c0016dc1:	5b                   	pop    ebx
c0016dc2:	5e                   	pop    esi
c0016dc3:	5f                   	pop    edi
c0016dc4:	5d                   	pop    ebp
c0016dc5:	c3                   	ret    

c0016dc6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016dc6:	55                   	push   ebp
c0016dc7:	57                   	push   edi
c0016dc8:	31 ff                	xor    edi,edi
c0016dca:	56                   	push   esi
c0016dcb:	53                   	push   ebx
c0016dcc:	83 ec 1c             	sub    esp,0x1c
c0016dcf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016dd3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016dd7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016dde:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016de3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016de7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016deb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016def:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016df2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016df6:	01 f9                	add    ecx,edi
c0016df8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016dfc:	7d 2f                	jge    c0016e2d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016dfe:	31 f6                	xor    esi,esi
c0016e00:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016e04:	01 f2                	add    edx,esi
c0016e06:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016e0a:	7d 1a                	jge    c0016e26 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016e0c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e0f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016e12:	46                   	inc    esi
c0016e13:	51                   	push   ecx
c0016e14:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016e18:	52                   	push   edx
c0016e19:	55                   	push   ebp
c0016e1a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e1d:	83 c4 10             	add    esp,0x10
c0016e20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e24:	eb da                	jmp    c0016e00 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016e26:	47                   	inc    edi
c0016e27:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016e2b:	eb c5                	jmp    c0016df2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016e2d:	83 c4 1c             	add    esp,0x1c
c0016e30:	5b                   	pop    ebx
c0016e31:	5e                   	pop    esi
c0016e32:	5f                   	pop    edi
c0016e33:	5d                   	pop    ebp
c0016e34:	c3                   	ret    
c0016e35:	90                   	nop

c0016e36 <Video::blit(unsigned int*, int, int, int, int)>:
c0016e36:	55                   	push   ebp
c0016e37:	57                   	push   edi
c0016e38:	56                   	push   esi
c0016e39:	53                   	push   ebx
c0016e3a:	83 ec 1c             	sub    esp,0x1c
c0016e3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e41:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e45:	85 c0                	test   eax,eax
c0016e47:	79 02                	jns    c0016e4b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016e49:	31 c0                	xor    eax,eax
c0016e4b:	c1 e0 02             	shl    eax,0x2
c0016e4e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016e52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e56:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e5a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016e5e:	39 d8                	cmp    eax,ebx
c0016e60:	7e 49                	jle    c0016eab <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e62:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e68:	7c 41                	jl     c0016eab <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e6a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016e6e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e72:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e76:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016e7a:	39 f9                	cmp    ecx,edi
c0016e7c:	7e 22                	jle    c0016ea0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016e7e:	83 c5 04             	add    ebp,0x4
c0016e81:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e87:	7c 14                	jl     c0016e9d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016e89:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e8b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016e8e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e92:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e96:	56                   	push   esi
c0016e97:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016e9a:	83 c4 10             	add    esp,0x10
c0016e9d:	47                   	inc    edi
c0016e9e:	eb d2                	jmp    c0016e72 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016ea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ea4:	43                   	inc    ebx
c0016ea5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016ea9:	eb ab                	jmp    c0016e56 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016eab:	83 c4 1c             	add    esp,0x1c
c0016eae:	5b                   	pop    ebx
c0016eaf:	5e                   	pop    esi
c0016eb0:	5f                   	pop    edi
c0016eb1:	5d                   	pop    ebp
c0016eb2:	c3                   	ret    
c0016eb3:	90                   	nop

c0016eb4 <Video::clearScreen(unsigned int)>:
c0016eb4:	57                   	push   edi
c0016eb5:	56                   	push   esi
c0016eb6:	53                   	push   ebx
c0016eb7:	31 db                	xor    ebx,ebx
c0016eb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ebd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016ec3:	7e 1f                	jle    c0016ee4 <Video::clearScreen(unsigned int)+0x30>
c0016ec5:	31 ff                	xor    edi,edi
c0016ec7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016ecd:	7e 12                	jle    c0016ee1 <Video::clearScreen(unsigned int)+0x2d>
c0016ecf:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ed5:	53                   	push   ebx
c0016ed6:	57                   	push   edi
c0016ed7:	47                   	inc    edi
c0016ed8:	56                   	push   esi
c0016ed9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016edc:	83 c4 10             	add    esp,0x10
c0016edf:	eb e6                	jmp    c0016ec7 <Video::clearScreen(unsigned int)+0x13>
c0016ee1:	43                   	inc    ebx
c0016ee2:	eb d9                	jmp    c0016ebd <Video::clearScreen(unsigned int)+0x9>
c0016ee4:	5b                   	pop    ebx
c0016ee5:	5e                   	pop    esi
c0016ee6:	5f                   	pop    edi
c0016ee7:	c3                   	ret    

c0016ee8 <Video::putpixel(int, int, unsigned int)>:
c0016ee8:	c7 44 24 04 0c b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b40c
c0016ef0:	e9 84 30 00 00       	jmp    c0019f79 <Krnl::panic(char const*)>
c0016ef5:	90                   	nop

c0016ef6 <Video::Video(char const*)>:
c0016ef6:	83 ec 0c             	sub    esp,0xc
c0016ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016efd:	83 ec 08             	sub    esp,0x8
c0016f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f04:	50                   	push   eax
c0016f05:	e8 d0 ce ff ff       	call   c0013dda <Device::Device(char const*)>
c0016f0a:	83 c4 10             	add    esp,0x10
c0016f0d:	ba 7c b4 02 c0       	mov    edx,0xc002b47c
c0016f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f16:	89 10                	mov    DWORD PTR [eax],edx
c0016f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f1c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016f26:	90                   	nop
c0016f27:	83 c4 0c             	add    esp,0xc
c0016f2a:	c3                   	ret    
c0016f2b:	90                   	nop

c0016f2c <Video::~Video()>:
c0016f2c:	83 ec 0c             	sub    esp,0xc
c0016f2f:	ba 7c b4 02 c0       	mov    edx,0xc002b47c
c0016f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f38:	89 10                	mov    DWORD PTR [eax],edx
c0016f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f3e:	83 ec 0c             	sub    esp,0xc
c0016f41:	50                   	push   eax
c0016f42:	e8 5d cb ff ff       	call   c0013aa4 <Device::~Device()>
c0016f47:	83 c4 10             	add    esp,0x10
c0016f4a:	90                   	nop
c0016f4b:	83 c4 0c             	add    esp,0xc
c0016f4e:	c3                   	ret    
c0016f4f:	90                   	nop

c0016f50 <Video::~Video()>:
c0016f50:	83 ec 0c             	sub    esp,0xc
c0016f53:	83 ec 0c             	sub    esp,0xc
c0016f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f5a:	e8 cd ff ff ff       	call   c0016f2c <Video::~Video()>
c0016f5f:	83 c4 10             	add    esp,0x10
c0016f62:	83 ec 08             	sub    esp,0x8
c0016f65:	68 64 01 00 00       	push   0x164
c0016f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f6e:	e8 52 b7 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0016f73:	83 c4 10             	add    esp,0x10
c0016f76:	83 c4 0c             	add    esp,0xc
c0016f79:	c3                   	ret    

c0016f7a <Video::isMonochrome()>:
c0016f7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f7e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016f84:	c3                   	ret    
c0016f85:	90                   	nop

c0016f86 <Video::getWidth()>:
c0016f86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016f90:	c3                   	ret    
c0016f91:	90                   	nop

c0016f92 <Video::getHeight()>:
c0016f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f96:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f9c:	c3                   	ret    
c0016f9d:	90                   	nop

c0016f9e <Video::drawCursor(int, int, unsigned char*, int)>:
c0016f9e:	55                   	push   ebp
c0016f9f:	57                   	push   edi
c0016fa0:	56                   	push   esi
c0016fa1:	53                   	push   ebx
c0016fa2:	83 ec 2c             	sub    esp,0x2c
c0016fa5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016fa9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fad:	83 f8 01             	cmp    eax,0x1
c0016fb0:	19 c9                	sbb    ecx,ecx
c0016fb2:	31 db                	xor    ebx,ebx
c0016fb4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016fb8:	89 cd                	mov    ebp,ecx
c0016fba:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016fc2:	f7 d5                	not    ebp
c0016fc4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016fca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016fce:	01 d8                	add    eax,ebx
c0016fd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fd4:	56                   	push   esi
c0016fd5:	e8 b8 ff ff ff       	call   c0016f92 <Video::getHeight()>
c0016fda:	59                   	pop    ecx
c0016fdb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016fdf:	7e 70                	jle    c0017051 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016fe1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016fe5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fe9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016fec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ff0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ff4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016ffb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fff:	89 f8                	mov    eax,edi
c0017001:	83 c0 20             	add    eax,0x20
c0017004:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017008:	56                   	push   esi
c0017009:	e8 78 ff ff ff       	call   c0016f86 <Video::getWidth()>
c001700e:	5a                   	pop    edx
c001700f:	39 c7                	cmp    edi,eax
c0017011:	7d 34                	jge    c0017047 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017013:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017018:	74 05                	je     c001701f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001701a:	8b 06                	mov    eax,DWORD PTR [esi]
c001701c:	55                   	push   ebp
c001701d:	eb 0d                	jmp    c001702c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001701f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017024:	74 12                	je     c0017038 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017026:	8b 06                	mov    eax,DWORD PTR [esi]
c0017028:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001702c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017030:	57                   	push   edi
c0017031:	56                   	push   esi
c0017032:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017035:	83 c4 10             	add    esp,0x10
c0017038:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001703c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017040:	47                   	inc    edi
c0017041:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017045:	75 c1                	jne    c0017008 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017047:	43                   	inc    ebx
c0017048:	83 fb 20             	cmp    ebx,0x20
c001704b:	0f 85 79 ff ff ff    	jne    c0016fca <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017051:	83 c4 2c             	add    esp,0x2c
c0017054:	5b                   	pop    ebx
c0017055:	5e                   	pop    esi
c0017056:	5f                   	pop    edi
c0017057:	5d                   	pop    ebp
c0017058:	c3                   	ret    
c0017059:	90                   	nop

c001705a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001705a:	55                   	push   ebp
c001705b:	57                   	push   edi
c001705c:	56                   	push   esi
c001705d:	53                   	push   ebx
c001705e:	83 ec 28             	sub    esp,0x28
c0017061:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017065:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017069:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c001706d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017071:	c1 e6 08             	shl    esi,0x8
c0017074:	01 c6                	add    esi,eax
c0017076:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001707a:	c1 e0 08             	shl    eax,0x8
c001707d:	01 d0                	add    eax,edx
c001707f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017087:	0f af c6             	imul   eax,esi
c001708a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017091:	50                   	push   eax
c0017092:	e8 02 85 ff ff       	call   c000f599 <malloc>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	89 c7                	mov    edi,eax
c001709c:	85 c0                	test   eax,eax
c001709e:	75 10                	jne    c00170b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00170a0:	83 ec 0c             	sub    esp,0xc
c00170a3:	68 2d b4 02 c0       	push   0xc002b42d
c00170a8:	e8 cc 2e 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c00170ad:	83 c4 10             	add    esp,0x10
c00170b0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00170b3:	ba 12 00 00 00       	mov    edx,0x12
c00170b8:	84 c0                	test   al,al
c00170ba:	74 11                	je     c00170cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00170bc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00170c0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00170c4:	c1 fa 03             	sar    edx,0x3
c00170c7:	0f af d1             	imul   edx,ecx
c00170ca:	83 c2 12             	add    edx,0x12
c00170cd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00170d1:	74 04                	je     c00170d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00170d3:	85 f6                	test   esi,esi
c00170d5:	75 12                	jne    c00170e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00170d7:	83 ec 0c             	sub    esp,0xc
c00170da:	68 3d b4 02 c0       	push   0xc002b43d
c00170df:	e8 b9 b6 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00170e4:	e9 b8 00 00 00       	jmp    c00171a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00170e9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00170ed:	80 f9 02             	cmp    cl,0x2
c00170f0:	0f 85 96 00 00 00    	jne    c001718c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00170f6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00170fb:	75 0e                	jne    c001710b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00170fd:	84 c0                	test   al,al
c00170ff:	75 0a                	jne    c001710b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017101:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017104:	83 e8 18             	sub    eax,0x18
c0017107:	a8 f7                	test   al,0xf7
c0017109:	74 0a                	je     c0017115 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001710b:	83 ec 0c             	sub    esp,0xc
c001710e:	68 52 b4 02 c0       	push   0xc002b452
c0017113:	eb 7f                	jmp    c0017194 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0017115:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001711d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017125:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0017129:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017131:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017135:	75 0c                	jne    c0017143 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017137:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001713c:	c1 e0 18             	shl    eax,0x18
c001713f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017143:	45                   	inc    ebp
c0017144:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0017149:	c1 e1 10             	shl    ecx,0x10
c001714c:	89 c8                	mov    eax,ecx
c001714e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017153:	c1 e1 08             	shl    ecx,0x8
c0017156:	09 c1                	or     ecx,eax
c0017158:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001715c:	09 c1                	or     ecx,eax
c001715e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017162:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0017166:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001716a:	c1 f8 03             	sar    eax,0x3
c001716d:	01 c2                	add    edx,eax
c001716f:	89 e8                	mov    eax,ebp
c0017171:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017175:	39 c6                	cmp    esi,eax
c0017177:	7f b0                	jg     c0017129 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0017179:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001717d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017181:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017184:	7e 22                	jle    c00171a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017186:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001718a:	eb 99                	jmp    c0017125 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001718c:	50                   	push   eax
c001718d:	50                   	push   eax
c001718e:	51                   	push   ecx
c001718f:	68 60 b4 02 c0       	push   0xc002b460
c0017194:	e8 04 b6 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0017199:	89 3c 24             	mov    DWORD PTR [esp],edi
c001719c:	e8 08 84 ff ff       	call   c000f5a9 <free>
c00171a1:	83 c4 10             	add    esp,0x10
c00171a4:	31 ff                	xor    edi,edi
c00171a6:	eb 0f                	jmp    c00171b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00171a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00171ac:	89 30                	mov    DWORD PTR [eax],esi
c00171ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00171b5:	89 30                	mov    DWORD PTR [eax],esi
c00171b7:	83 c4 1c             	add    esp,0x1c
c00171ba:	89 f8                	mov    eax,edi
c00171bc:	5b                   	pop    ebx
c00171bd:	5e                   	pop    esi
c00171be:	5f                   	pop    edi
c00171bf:	5d                   	pop    ebp
c00171c0:	c3                   	ret    
c00171c1:	90                   	nop

c00171c2 <Video::putTGA(int, int, unsigned char*, int)>:
c00171c2:	55                   	push   ebp
c00171c3:	57                   	push   edi
c00171c4:	56                   	push   esi
c00171c5:	53                   	push   ebx
c00171c6:	83 ec 28             	sub    esp,0x28
c00171c9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00171cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171d1:	50                   	push   eax
c00171d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171d6:	50                   	push   eax
c00171d7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171db:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171df:	56                   	push   esi
c00171e0:	e8 75 fe ff ff       	call   c001705a <Video::tgaParse(unsigned char*, int, int*, int*)>
c00171e5:	83 c4 20             	add    esp,0x20
c00171e8:	85 c0                	test   eax,eax
c00171ea:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00171ee:	74 35                	je     c0017225 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00171f0:	89 c7                	mov    edi,eax
c00171f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171f6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00171fa:	39 d8                	cmp    eax,ebx
c00171fc:	7e 27                	jle    c0017225 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00171fe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017202:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017206:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001720a:	39 e8                	cmp    eax,ebp
c001720c:	7e 14                	jle    c0017222 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001720e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017210:	83 c7 04             	add    edi,0x4
c0017213:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017216:	53                   	push   ebx
c0017217:	55                   	push   ebp
c0017218:	45                   	inc    ebp
c0017219:	56                   	push   esi
c001721a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001721d:	83 c4 10             	add    esp,0x10
c0017220:	eb e0                	jmp    c0017202 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017222:	43                   	inc    ebx
c0017223:	eb cd                	jmp    c00171f2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017225:	83 c4 1c             	add    esp,0x1c
c0017228:	5b                   	pop    ebx
c0017229:	5e                   	pop    esi
c001722a:	5f                   	pop    edi
c001722b:	5d                   	pop    ebp
c001722c:	c3                   	ret    
c001722d:	90                   	nop

c001722e <ACPI::close(int, int, void*)>:
c001722e:	83 ec 1c             	sub    esp,0x1c
c0017231:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017239:	74 0a                	je     c0017245 <ACPI::close(int, int, void*)+0x17>
c001723b:	b8 00 00 00 00       	mov    eax,0x0
c0017240:	e9 8a 00 00 00       	jmp    c00172cf <ACPI::close(int, int, void*)+0xa1>
c0017245:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001724a:	75 27                	jne    c0017273 <ACPI::close(int, int, void*)+0x45>
c001724c:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017251:	85 c0                	test   eax,eax
c0017253:	74 07                	je     c001725c <ACPI::close(int, int, void*)+0x2e>
c0017255:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001725a:	ff d0                	call   eax
c001725c:	83 ec 0c             	sub    esp,0xc
c001725f:	68 bc b4 02 c0       	push   0xc002b4bc
c0017264:	e8 10 2d 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0017269:	83 c4 10             	add    esp,0x10
c001726c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017271:	eb 5c                	jmp    c00172cf <ACPI::close(int, int, void*)+0xa1>
c0017273:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017278:	75 50                	jne    c00172ca <ACPI::close(int, int, void*)+0x9c>
c001727a:	a1 04 e4 02 c0       	mov    eax,ds:0xc002e404
c001727f:	85 c0                	test   eax,eax
c0017281:	74 07                	je     c001728a <ACPI::close(int, int, void*)+0x5c>
c0017283:	a1 04 e4 02 c0       	mov    eax,ds:0xc002e404
c0017288:	ff d0                	call   eax
c001728a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001728f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017294:	83 e0 02             	and    eax,0x2
c0017297:	74 1c                	je     c00172b5 <ACPI::close(int, int, void*)+0x87>
c0017299:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00172a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172a4:	89 c2                	mov    edx,eax
c00172a6:	ec                   	in     al,dx
c00172a7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00172ab:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00172af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00172b3:	eb da                	jmp    c001728f <ACPI::close(int, int, void*)+0x61>
c00172b5:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00172bc:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00172c1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00172c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00172c9:	ee                   	out    dx,al
c00172ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00172cf:	83 c4 1c             	add    esp,0x1c
c00172d2:	c3                   	ret    

c00172d3 <findRSDP()>:
c00172d3:	83 ec 1c             	sub    esp,0x1c
c00172d6:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00172db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172e1:	83 e0 04             	and    eax,0x4
c00172e4:	84 c0                	test   al,al
c00172e6:	75 07                	jne    c00172ef <findRSDP()+0x1c>
c00172e8:	b8 00 00 00 00       	mov    eax,0x0
c00172ed:	eb 6a                	jmp    c0017359 <findRSDP()+0x86>
c00172ef:	a1 d4 dd 02 c0       	mov    eax,ds:0xc002ddd4
c00172f4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00172f9:	7f 1b                	jg     c0017316 <findRSDP()+0x43>
c00172fb:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0017300:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017306:	83 e2 fb             	and    edx,0xfffffffb
c0017309:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001730f:	b8 00 00 00 00       	mov    eax,0x0
c0017314:	eb 43                	jmp    c0017359 <findRSDP()+0x86>
c0017316:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001731e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017326:	77 2c                	ja     c0017354 <findRSDP()+0x81>
c0017328:	83 ec 04             	sub    esp,0x4
c001732b:	6a 08                	push   0x8
c001732d:	68 57 b5 02 c0       	push   0xc002b557
c0017332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017336:	e8 11 93 fe ff       	call   c000064c <memcmp>
c001733b:	83 c4 10             	add    esp,0x10
c001733e:	85 c0                	test   eax,eax
c0017340:	0f 94 c0             	sete   al
c0017343:	84 c0                	test   al,al
c0017345:	74 06                	je     c001734d <findRSDP()+0x7a>
c0017347:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001734b:	eb 0c                	jmp    c0017359 <findRSDP()+0x86>
c001734d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017352:	eb ca                	jmp    c001731e <findRSDP()+0x4b>
c0017354:	b8 00 00 00 00       	mov    eax,0x0
c0017359:	83 c4 1c             	add    esp,0x1c
c001735c:	c3                   	ret    

c001735d <loadACPITables(unsigned char*)>:
c001735d:	57                   	push   edi
c001735e:	56                   	push   esi
c001735f:	53                   	push   ebx
c0017360:	83 ec 60             	sub    esp,0x60
c0017363:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0017368:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001736e:	83 e0 04             	and    eax,0x4
c0017371:	84 c0                	test   al,al
c0017373:	0f 84 33 02 00 00    	je     c00175ac <loadACPITables(unsigned char*)+0x24f>
c0017379:	a0 20 e6 02 c0       	mov    al,ds:0xc002e620
c001737e:	84 c0                	test   al,al
c0017380:	74 75                	je     c00173f7 <loadACPITables(unsigned char*)+0x9a>
c0017382:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017386:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001738a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001738e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017391:	83 e8 24             	sub    eax,0x24
c0017394:	c1 e8 03             	shr    eax,0x3
c0017397:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001739b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00173a3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00173a7:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00173ab:	0f 8d b2 00 00 00    	jge    c0017463 <loadACPITables(unsigned char*)+0x106>
c00173b1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00173b5:	83 c0 24             	add    eax,0x24
c00173b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00173bc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00173c0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00173c4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00173c8:	c1 e0 03             	shl    eax,0x3
c00173cb:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00173cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00173d3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00173d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00173d8:	89 c1                	mov    ecx,eax
c00173da:	a1 0c e4 02 c0       	mov    eax,ds:0xc002e40c
c00173df:	8d 50 01             	lea    edx,[eax+0x1]
c00173e2:	89 15 0c e4 02 c0    	mov    DWORD PTR ds:0xc002e40c,edx
c00173e8:	89 ca                	mov    edx,ecx
c00173ea:	89 14 c5 24 e4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1bdc],edx
c00173f1:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00173f5:	eb ac                	jmp    c00173a3 <loadACPITables(unsigned char*)+0x46>
c00173f7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00173fb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00173ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017403:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017406:	83 e8 24             	sub    eax,0x24
c0017409:	c1 e8 02             	shr    eax,0x2
c001740c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017410:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017418:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001741c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017420:	7d 41                	jge    c0017463 <loadACPITables(unsigned char*)+0x106>
c0017422:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017426:	83 c0 24             	add    eax,0x24
c0017429:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001742d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017431:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017435:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017439:	c1 e0 02             	shl    eax,0x2
c001743c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017440:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017444:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017446:	a1 0c e4 02 c0       	mov    eax,ds:0xc002e40c
c001744b:	8d 50 01             	lea    edx,[eax+0x1]
c001744e:	89 15 0c e4 02 c0    	mov    DWORD PTR ds:0xc002e40c,edx
c0017454:	89 ca                	mov    edx,ecx
c0017456:	89 14 c5 24 e4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1bdc],edx
c001745d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017461:	eb b5                	jmp    c0017418 <loadACPITables(unsigned char*)+0xbb>
c0017463:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001746b:	a1 0c e4 02 c0       	mov    eax,ds:0xc002e40c
c0017470:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017474:	0f 8d 33 01 00 00    	jge    c00175ad <loadACPITables(unsigned char*)+0x250>
c001747a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001747e:	8b 04 c5 24 e4 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd1bdc]
c0017485:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017489:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001748d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017491:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017495:	25 ff 0f 00 00       	and    eax,0xfff
c001749a:	89 c6                	mov    esi,eax
c001749c:	8b 1d f0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002def0
c00174a2:	83 ec 0c             	sub    esp,0xc
c00174a5:	6a 01                	push   0x1
c00174a7:	e8 73 9d ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00174ac:	83 c4 10             	add    esp,0x10
c00174af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174b3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174b9:	83 ec 0c             	sub    esp,0xc
c00174bc:	6a 01                	push   0x1
c00174be:	6a 01                	push   0x1
c00174c0:	50                   	push   eax
c00174c1:	52                   	push   edx
c00174c2:	53                   	push   ebx
c00174c3:	e8 a0 a8 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174c8:	83 c4 20             	add    esp,0x20
c00174cb:	09 f0                	or     eax,esi
c00174cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00174d5:	c1 e0 03             	shl    eax,0x3
c00174d8:	05 20 e4 02 c0       	add    eax,0xc002e420
c00174dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00174e9:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00174f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00174f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00174f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00174fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017505:	89 c6                	mov    esi,eax
c0017507:	89 d7                	mov    edi,edx
c0017509:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001750b:	89 c8                	mov    eax,ecx
c001750d:	89 fa                	mov    edx,edi
c001750f:	89 f3                	mov    ebx,esi
c0017511:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017515:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017519:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001751d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017521:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017528:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001752c:	05 00 10 00 00       	add    eax,0x1000
c0017531:	c1 e8 0c             	shr    eax,0xc
c0017534:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017538:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001753c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017540:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017544:	25 ff 0f 00 00       	and    eax,0xfff
c0017549:	89 c6                	mov    esi,eax
c001754b:	8b 1d f0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002def0
c0017551:	83 ec 0c             	sub    esp,0xc
c0017554:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017558:	e8 c2 9c ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001755d:	83 c4 10             	add    esp,0x10
c0017560:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017564:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001756a:	83 ec 0c             	sub    esp,0xc
c001756d:	6a 01                	push   0x1
c001756f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017573:	50                   	push   eax
c0017574:	52                   	push   edx
c0017575:	53                   	push   ebx
c0017576:	e8 ed a7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001757b:	83 c4 20             	add    esp,0x20
c001757e:	09 f0                	or     eax,esi
c0017580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017588:	83 ec 0c             	sub    esp,0xc
c001758b:	50                   	push   eax
c001758c:	e8 6a a1 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0017591:	83 c4 10             	add    esp,0x10
c0017594:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017598:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001759c:	89 14 c5 24 e4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1bdc],edx
c00175a3:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00175a7:	e9 bf fe ff ff       	jmp    c001746b <loadACPITables(unsigned char*)+0x10e>
c00175ac:	90                   	nop
c00175ad:	83 c4 60             	add    esp,0x60
c00175b0:	5b                   	pop    ebx
c00175b1:	5e                   	pop    esi
c00175b2:	5f                   	pop    edi
c00175b3:	c3                   	ret    

c00175b4 <findRSDT(unsigned char*)>:
c00175b4:	57                   	push   edi
c00175b5:	56                   	push   esi
c00175b6:	53                   	push   ebx
c00175b7:	83 ec 50             	sub    esp,0x50
c00175ba:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00175bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175c5:	83 e0 04             	and    eax,0x4
c00175c8:	84 c0                	test   al,al
c00175ca:	75 0a                	jne    c00175d6 <findRSDT(unsigned char*)+0x22>
c00175cc:	b8 00 00 00 00       	mov    eax,0x0
c00175d1:	e9 21 01 00 00       	jmp    c00176f7 <findRSDT(unsigned char*)+0x143>
c00175d6:	89 e0                	mov    eax,esp
c00175d8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00175dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00175e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00175e4:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00175ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00175f0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175f8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00175fc:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017600:	89 c6                	mov    esi,eax
c0017602:	89 d7                	mov    edi,edx
c0017604:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017606:	89 c8                	mov    eax,ecx
c0017608:	89 fa                	mov    edx,edi
c001760a:	89 f3                	mov    ebx,esi
c001760c:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017610:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017614:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017618:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001761c:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017620:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017628:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001762c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017630:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017638:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001763c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017640:	25 ff 0f 00 00       	and    eax,0xfff
c0017645:	89 c6                	mov    esi,eax
c0017647:	8b 1d f0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002def0
c001764d:	83 ec 0c             	sub    esp,0xc
c0017650:	6a 02                	push   0x2
c0017652:	e8 c8 9b ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017657:	83 c4 10             	add    esp,0x10
c001765a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001765e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017664:	83 ec 0c             	sub    esp,0xc
c0017667:	6a 01                	push   0x1
c0017669:	6a 02                	push   0x2
c001766b:	50                   	push   eax
c001766c:	52                   	push   edx
c001766d:	53                   	push   ebx
c001766e:	e8 f5 a6 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017673:	83 c4 20             	add    esp,0x20
c0017676:	09 f0                	or     eax,esi
c0017678:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001767c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017680:	25 ff 0f 00 00       	and    eax,0xfff
c0017685:	89 c6                	mov    esi,eax
c0017687:	8b 1d f0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002def0
c001768d:	83 ec 0c             	sub    esp,0xc
c0017690:	6a 02                	push   0x2
c0017692:	e8 88 9b ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017697:	83 c4 10             	add    esp,0x10
c001769a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001769e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176a4:	83 ec 0c             	sub    esp,0xc
c00176a7:	6a 01                	push   0x1
c00176a9:	6a 02                	push   0x2
c00176ab:	50                   	push   eax
c00176ac:	52                   	push   edx
c00176ad:	53                   	push   ebx
c00176ae:	e8 b5 a6 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176b3:	83 c4 20             	add    esp,0x20
c00176b6:	09 f0                	or     eax,esi
c00176b8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00176bc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00176c1:	75 11                	jne    c00176d4 <findRSDT(unsigned char*)+0x120>
c00176c3:	c6 05 20 e6 02 c0 00 	mov    BYTE PTR ds:0xc002e620,0x0
c00176ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00176ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00176d2:	eb 1f                	jmp    c00176f3 <findRSDT(unsigned char*)+0x13f>
c00176d4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00176d9:	75 11                	jne    c00176ec <findRSDT(unsigned char*)+0x138>
c00176db:	c6 05 20 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e620,0x1
c00176e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00176e6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00176ea:	eb 07                	jmp    c00176f3 <findRSDT(unsigned char*)+0x13f>
c00176ec:	b8 00 00 00 00       	mov    eax,0x0
c00176f1:	eb 04                	jmp    c00176f7 <findRSDT(unsigned char*)+0x143>
c00176f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176f7:	83 c4 50             	add    esp,0x50
c00176fa:	5b                   	pop    ebx
c00176fb:	5e                   	pop    esi
c00176fc:	5f                   	pop    edi
c00176fd:	c3                   	ret    

c00176fe <findDataTable(unsigned char*, char*)>:
c00176fe:	83 ec 1c             	sub    esp,0x1c
c0017701:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0017706:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001770c:	83 e0 04             	and    eax,0x4
c001770f:	84 c0                	test   al,al
c0017711:	75 07                	jne    c001771a <findDataTable(unsigned char*, char*)+0x1c>
c0017713:	b8 00 00 00 00       	mov    eax,0x0
c0017718:	eb 52                	jmp    c001776c <findDataTable(unsigned char*, char*)+0x6e>
c001771a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017722:	a1 0c e4 02 c0       	mov    eax,ds:0xc002e40c
c0017727:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001772b:	7d 3a                	jge    c0017767 <findDataTable(unsigned char*, char*)+0x69>
c001772d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017731:	c1 e0 03             	shl    eax,0x3
c0017734:	05 20 e4 02 c0       	add    eax,0xc002e420
c0017739:	83 ec 04             	sub    esp,0x4
c001773c:	6a 04                	push   0x4
c001773e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017742:	50                   	push   eax
c0017743:	e8 04 8f fe ff       	call   c000064c <memcmp>
c0017748:	83 c4 10             	add    esp,0x10
c001774b:	85 c0                	test   eax,eax
c001774d:	0f 94 c0             	sete   al
c0017750:	84 c0                	test   al,al
c0017752:	74 0d                	je     c0017761 <findDataTable(unsigned char*, char*)+0x63>
c0017754:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017758:	8b 04 c5 24 e4 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd1bdc]
c001775f:	eb 0b                	jmp    c001776c <findDataTable(unsigned char*, char*)+0x6e>
c0017761:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017765:	eb bb                	jmp    c0017722 <findDataTable(unsigned char*, char*)+0x24>
c0017767:	b8 00 00 00 00       	mov    eax,0x0
c001776c:	83 c4 1c             	add    esp,0x1c
c001776f:	c3                   	ret    

c0017770 <scanMADT()>:
c0017770:	53                   	push   ebx
c0017771:	83 ec 38             	sub    esp,0x38
c0017774:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0017779:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001777f:	83 e0 04             	and    eax,0x4
c0017782:	84 c0                	test   al,al
c0017784:	0f 84 4a 04 00 00    	je     c0017bd4 <scanMADT()+0x464>
c001778a:	e8 44 fb ff ff       	call   c00172d3 <findRSDP()>
c001778f:	a3 2c e6 02 c0       	mov    ds:0xc002e62c,eax
c0017794:	a1 2c e6 02 c0       	mov    eax,ds:0xc002e62c
c0017799:	85 c0                	test   eax,eax
c001779b:	75 19                	jne    c00177b6 <scanMADT()+0x46>
c001779d:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00177a2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177a8:	83 e2 fb             	and    edx,0xfffffffb
c00177ab:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177b1:	e9 22 04 00 00       	jmp    c0017bd8 <scanMADT()+0x468>
c00177b6:	a1 2c e6 02 c0       	mov    eax,ds:0xc002e62c
c00177bb:	83 ec 0c             	sub    esp,0xc
c00177be:	50                   	push   eax
c00177bf:	e8 f0 fd ff ff       	call   c00175b4 <findRSDT(unsigned char*)>
c00177c4:	83 c4 10             	add    esp,0x10
c00177c7:	a3 28 e6 02 c0       	mov    ds:0xc002e628,eax
c00177cc:	a1 28 e6 02 c0       	mov    eax,ds:0xc002e628
c00177d1:	85 c0                	test   eax,eax
c00177d3:	75 19                	jne    c00177ee <scanMADT()+0x7e>
c00177d5:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00177da:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177e0:	83 e2 fb             	and    edx,0xfffffffb
c00177e3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177e9:	e9 ea 03 00 00       	jmp    c0017bd8 <scanMADT()+0x468>
c00177ee:	a1 28 e6 02 c0       	mov    eax,ds:0xc002e628
c00177f3:	83 ec 0c             	sub    esp,0xc
c00177f6:	50                   	push   eax
c00177f7:	e8 61 fb ff ff       	call   c001735d <loadACPITables(unsigned char*)>
c00177fc:	83 c4 10             	add    esp,0x10
c00177ff:	a1 28 e6 02 c0       	mov    eax,ds:0xc002e628
c0017804:	83 ec 08             	sub    esp,0x8
c0017807:	68 60 b5 02 c0       	push   0xc002b560
c001780c:	50                   	push   eax
c001780d:	e8 ec fe ff ff       	call   c00176fe <findDataTable(unsigned char*, char*)>
c0017812:	83 c4 10             	add    esp,0x10
c0017815:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017819:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001781e:	75 19                	jne    c0017839 <scanMADT()+0xc9>
c0017820:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0017825:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001782b:	83 e2 fe             	and    edx,0xfffffffe
c001782e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017834:	e9 9f 03 00 00       	jmp    c0017bd8 <scanMADT()+0x468>
c0017839:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017841:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017845:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017848:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001784c:	0f 87 86 03 00 00    	ja     c0017bd8 <scanMADT()+0x468>
c0017852:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001785a:	0f 87 78 03 00 00    	ja     c0017bd8 <scanMADT()+0x468>
c0017860:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017864:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017868:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001786c:	8d 50 01             	lea    edx,[eax+0x1]
c001786f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017873:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017877:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001787b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001787f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017883:	8d 50 01             	lea    edx,[eax+0x1]
c0017886:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001788a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001788e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017892:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017896:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001789b:	0f 86 36 03 00 00    	jbe    c0017bd7 <scanMADT()+0x467>
c00178a1:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00178a6:	75 57                	jne    c00178ff <scanMADT()+0x18f>
c00178a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ac:	8d 50 01             	lea    edx,[eax+0x1]
c00178af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178b3:	8a 15 20 e8 02 c0    	mov    dl,BYTE PTR ds:0xc002e820
c00178b9:	0f b6 d2             	movzx  edx,dl
c00178bc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178c0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178c4:	88 82 60 e8 02 c0    	mov    BYTE PTR [edx-0x3ffd17a0],al
c00178ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ce:	8d 50 01             	lea    edx,[eax+0x1]
c00178d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178d5:	8a 15 20 e8 02 c0    	mov    dl,BYTE PTR ds:0xc002e820
c00178db:	8d 4a 01             	lea    ecx,[edx+0x1]
c00178de:	88 0d 20 e8 02 c0    	mov    BYTE PTR ds:0xc002e820,cl
c00178e4:	0f b6 d2             	movzx  edx,dl
c00178e7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178eb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178ef:	88 82 40 e8 02 c0    	mov    BYTE PTR [edx-0x3ffd17c0],al
c00178f5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178fa:	e9 c1 02 00 00       	jmp    c0017bc0 <scanMADT()+0x450>
c00178ff:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017904:	0f 85 14 01 00 00    	jne    c0017a1e <scanMADT()+0x2ae>
c001790a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001790e:	8d 50 01             	lea    edx,[eax+0x1]
c0017911:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017915:	8a 15 e0 e6 02 c0    	mov    dl,BYTE PTR ds:0xc002e6e0
c001791b:	0f b6 d2             	movzx  edx,dl
c001791e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017922:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017926:	88 82 00 e7 02 c0    	mov    BYTE PTR [edx-0x3ffd1900],al
c001792c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017930:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017934:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017938:	01 d0                	add    eax,edx
c001793a:	83 c0 2c             	add    eax,0x2c
c001793d:	8a 00                	mov    al,BYTE PTR [eax]
c001793f:	0f b6 d0             	movzx  edx,al
c0017942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017946:	8d 48 01             	lea    ecx,[eax+0x1]
c0017949:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001794d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017951:	0f b6 c0             	movzx  eax,al
c0017954:	c1 e0 08             	shl    eax,0x8
c0017957:	89 d1                	mov    ecx,edx
c0017959:	09 c1                	or     ecx,eax
c001795b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001795f:	8d 50 02             	lea    edx,[eax+0x2]
c0017962:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017966:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001796a:	0f b6 c0             	movzx  eax,al
c001796d:	c1 e0 10             	shl    eax,0x10
c0017970:	09 c1                	or     ecx,eax
c0017972:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017976:	8d 50 03             	lea    edx,[eax+0x3]
c0017979:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001797d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017981:	0f b6 c0             	movzx  eax,al
c0017984:	c1 e0 18             	shl    eax,0x18
c0017987:	09 c1                	or     ecx,eax
c0017989:	89 ca                	mov    edx,ecx
c001798b:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c0017990:	0f b6 c0             	movzx  eax,al
c0017993:	89 14 85 20 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18e0],edx
c001799a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001799f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179a7:	01 d0                	add    eax,edx
c00179a9:	83 c0 2c             	add    eax,0x2c
c00179ac:	8a 00                	mov    al,BYTE PTR [eax]
c00179ae:	0f b6 d0             	movzx  edx,al
c00179b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b5:	8d 48 01             	lea    ecx,[eax+0x1]
c00179b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179bc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179c0:	0f b6 c0             	movzx  eax,al
c00179c3:	c1 e0 08             	shl    eax,0x8
c00179c6:	89 d1                	mov    ecx,edx
c00179c8:	09 c1                	or     ecx,eax
c00179ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179ce:	8d 50 02             	lea    edx,[eax+0x2]
c00179d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179d5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179d9:	0f b6 c0             	movzx  eax,al
c00179dc:	c1 e0 10             	shl    eax,0x10
c00179df:	09 c1                	or     ecx,eax
c00179e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e5:	8d 50 03             	lea    edx,[eax+0x3]
c00179e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179ec:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179f0:	0f b6 c0             	movzx  eax,al
c00179f3:	c1 e0 18             	shl    eax,0x18
c00179f6:	09 c1                	or     ecx,eax
c00179f8:	89 ca                	mov    edx,ecx
c00179fa:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c00179ff:	0f b6 c0             	movzx  eax,al
c0017a02:	89 14 85 a0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1860],edx
c0017a09:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a0e:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c0017a13:	40                   	inc    eax
c0017a14:	a2 e0 e6 02 c0       	mov    ds:0xc002e6e0,al
c0017a19:	e9 a2 01 00 00       	jmp    c0017bc0 <scanMADT()+0x450>
c0017a1e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017a23:	0f 85 e9 00 00 00    	jne    c0017b12 <scanMADT()+0x3a2>
c0017a29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a2d:	8d 50 01             	lea    edx,[eax+0x1]
c0017a30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a38:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a3c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017a40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a44:	8d 50 01             	lea    edx,[eax+0x1]
c0017a47:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a4f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a53:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017a57:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a5f:	01 d0                	add    eax,edx
c0017a61:	83 c0 2c             	add    eax,0x2c
c0017a64:	8a 00                	mov    al,BYTE PTR [eax]
c0017a66:	0f b6 d0             	movzx  edx,al
c0017a69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a6d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a74:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a78:	0f b6 c0             	movzx  eax,al
c0017a7b:	c1 e0 08             	shl    eax,0x8
c0017a7e:	89 d1                	mov    ecx,edx
c0017a80:	09 c1                	or     ecx,eax
c0017a82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a86:	8d 50 02             	lea    edx,[eax+0x2]
c0017a89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a8d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a91:	0f b6 c0             	movzx  eax,al
c0017a94:	c1 e0 10             	shl    eax,0x10
c0017a97:	09 c1                	or     ecx,eax
c0017a99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a9d:	8d 50 03             	lea    edx,[eax+0x3]
c0017aa0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aa4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017aa8:	0f b6 c0             	movzx  eax,al
c0017aab:	c1 e0 18             	shl    eax,0x18
c0017aae:	09 c8                	or     eax,ecx
c0017ab0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ab4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ab9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017abd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ac1:	01 d0                	add    eax,edx
c0017ac3:	83 c0 2c             	add    eax,0x2c
c0017ac6:	8a 00                	mov    al,BYTE PTR [eax]
c0017ac8:	0f b6 c0             	movzx  eax,al
c0017acb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017acf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ad2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ad6:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017ada:	0f b6 d2             	movzx  edx,dl
c0017add:	c1 e2 08             	shl    edx,0x8
c0017ae0:	09 d0                	or     eax,edx
c0017ae2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017ae7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017aec:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017af1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017af5:	88 90 e0 cf 02 c0    	mov    BYTE PTR [eax-0x3ffd3020],dl
c0017afb:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017b00:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017b05:	66 89 84 12 c0 e6 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd1940],ax
c0017b0d:	e9 ae 00 00 00       	jmp    c0017bc0 <scanMADT()+0x450>
c0017b12:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017b17:	0f 85 97 00 00 00    	jne    c0017bb4 <scanMADT()+0x444>
c0017b1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b21:	8d 50 01             	lea    edx,[eax+0x1]
c0017b24:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b28:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b2c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b30:	0f b6 c0             	movzx  eax,al
c0017b33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b3f:	01 d0                	add    eax,edx
c0017b41:	83 c0 2c             	add    eax,0x2c
c0017b44:	8a 00                	mov    al,BYTE PTR [eax]
c0017b46:	0f b6 d0             	movzx  edx,al
c0017b49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b4d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b54:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b58:	0f b6 c0             	movzx  eax,al
c0017b5b:	c1 e0 08             	shl    eax,0x8
c0017b5e:	09 d0                	or     eax,edx
c0017b60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b64:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017b69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b6d:	8d 50 01             	lea    edx,[eax+0x1]
c0017b70:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b74:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b78:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b7c:	0f b6 c0             	movzx  eax,al
c0017b7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b87:	c1 e0 08             	shl    eax,0x8
c0017b8a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017b8e:	89 c1                	mov    ecx,eax
c0017b90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b94:	c1 e0 18             	shl    eax,0x18
c0017b97:	89 c3                	mov    ebx,eax
c0017b99:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c0017b9e:	8d 50 01             	lea    edx,[eax+0x1]
c0017ba1:	89 15 30 e6 02 c0    	mov    DWORD PTR ds:0xc002e630,edx
c0017ba7:	09 d9                	or     ecx,ebx
c0017ba9:	89 ca                	mov    edx,ecx
c0017bab:	89 14 85 40 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd19c0],edx
c0017bb2:	eb 0c                	jmp    c0017bc0 <scanMADT()+0x450>
c0017bb4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017bb9:	75 05                	jne    c0017bc0 <scanMADT()+0x450>
c0017bbb:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017bc0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017bc5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bc9:	01 d0                	add    eax,edx
c0017bcb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017bcf:	e9 6d fc ff ff       	jmp    c0017841 <scanMADT()+0xd1>
c0017bd4:	90                   	nop
c0017bd5:	eb 01                	jmp    c0017bd8 <scanMADT()+0x468>
c0017bd7:	90                   	nop
c0017bd8:	83 c4 38             	add    esp,0x38
c0017bdb:	5b                   	pop    ebx
c0017bdc:	c3                   	ret    
c0017bdd:	90                   	nop

c0017bde <ACPI::ACPI()>:
c0017bde:	83 ec 0c             	sub    esp,0xc
c0017be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017be5:	83 ec 08             	sub    esp,0x8
c0017be8:	68 65 b5 02 c0       	push   0xc002b565
c0017bed:	50                   	push   eax
c0017bee:	e8 e7 c1 ff ff       	call   c0013dda <Device::Device(char const*)>
c0017bf3:	83 c4 10             	add    esp,0x10
c0017bf6:	ba c0 b6 02 c0       	mov    edx,0xc002b6c0
c0017bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bff:	89 10                	mov    DWORD PTR [eax],edx
c0017c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c05:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c10:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c1e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017c28:	e8 43 fb ff ff       	call   c0017770 <scanMADT()>
c0017c2d:	90                   	nop
c0017c2e:	83 c4 0c             	add    esp,0xc
c0017c31:	c3                   	ret    

c0017c32 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017c32:	83 ec 2c             	sub    esp,0x2c
c0017c35:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017c39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c3d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017c41:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017c45:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017c4a:	88 d0                	mov    al,dl
c0017c4c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c50:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c55:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c61:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c67:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017c6b:	0f 8d 97 00 00 00    	jge    c0017d08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017c71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c79:	83 c2 2a             	add    edx,0x2a
c0017c7c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017c80:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017c85:	75 78                	jne    c0017cff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c8f:	83 c2 2a             	add    edx,0x2a
c0017c92:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017c96:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017c9a:	75 63                	jne    c0017cff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c9c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ca1:	74 3a                	je     c0017cdd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017ca3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ca7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cab:	83 c2 2a             	add    edx,0x2a
c0017cae:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cb9:	39 c2                	cmp    edx,eax
c0017cbb:	74 10                	je     c0017ccd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017cbd:	83 ec 0c             	sub    esp,0xc
c0017cc0:	68 e0 b4 02 c0       	push   0xc002b4e0
c0017cc5:	e8 af 22 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	83 ec 0c             	sub    esp,0xc
c0017cd0:	68 6a b5 02 c0       	push   0xc002b56a
c0017cd5:	e8 9f 22 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0017cda:	83 c4 10             	add    esp,0x10
c0017cdd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017ce1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ce5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ce9:	83 c2 2a             	add    edx,0x2a
c0017cec:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017cf0:	8b 02                	mov    eax,DWORD PTR [edx]
c0017cf2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017cf5:	89 01                	mov    DWORD PTR [ecx],eax
c0017cf7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017cfa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cff:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017d03:	e9 55 ff ff ff       	jmp    c0017c5d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017d08:	90                   	nop
c0017d09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d0d:	83 c4 2c             	add    esp,0x2c
c0017d10:	c2 04 00             	ret    0x4
c0017d13:	90                   	nop

c0017d14 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017d14:	83 ec 1c             	sub    esp,0x1c
c0017d17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d1b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017d1f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d23:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017d28:	88 c8                	mov    al,cl
c0017d2a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017d2e:	88 d0                	mov    al,dl
c0017d30:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d38:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d42:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d45:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017d49:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017d4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d51:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d5b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017d5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d62:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017d67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d6b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d71:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017d75:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d7c:	83 c2 2a             	add    edx,0x2a
c0017d7f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017d83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d87:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d91:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d94:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d98:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017d9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017da0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017da6:	8d 50 01             	lea    edx,[eax+0x1]
c0017da9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dad:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017db7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017dbd:	3d 00 02 00 00       	cmp    eax,0x200
c0017dc2:	75 10                	jne    c0017dd4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017dc4:	83 ec 0c             	sub    esp,0xc
c0017dc7:	68 79 b5 02 c0       	push   0xc002b579
c0017dcc:	e8 a8 21 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0017dd1:	83 c4 10             	add    esp,0x10
c0017dd4:	90                   	nop
c0017dd5:	83 c4 1c             	add    esp,0x1c
c0017dd8:	c3                   	ret    
c0017dd9:	90                   	nop

c0017dda <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017dda:	b8 00 00 00 00       	mov    eax,0x0
c0017ddf:	c3                   	ret    

c0017de0 <ACPI::detectPCI()>:
c0017de0:	53                   	push   ebx
c0017de1:	83 ec 28             	sub    esp,0x28
c0017de4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017de9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017dee:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0017df3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017df9:	83 e0 04             	and    eax,0x4
c0017dfc:	84 c0                	test   al,al
c0017dfe:	74 2b                	je     c0017e2b <ACPI::detectPCI()+0x4b>
c0017e00:	a1 28 e6 02 c0       	mov    eax,ds:0xc002e628
c0017e05:	83 ec 08             	sub    esp,0x8
c0017e08:	68 96 b5 02 c0       	push   0xc002b596
c0017e0d:	50                   	push   eax
c0017e0e:	e8 eb f8 ff ff       	call   c00176fe <findDataTable(unsigned char*, char*)>
c0017e13:	83 c4 10             	add    esp,0x10
c0017e16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e1a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017e1f:	74 0a                	je     c0017e2b <ACPI::detectPCI()+0x4b>
c0017e21:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e26:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017e2b:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017e33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e37:	8a 00                	mov    al,BYTE PTR [eax]
c0017e39:	3c 01                	cmp    al,0x1
c0017e3b:	75 0c                	jne    c0017e49 <ACPI::detectPCI()+0x69>
c0017e3d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e42:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017e47:	eb 26                	jmp    c0017e6f <ACPI::detectPCI()+0x8f>
c0017e49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e4d:	8a 00                	mov    al,BYTE PTR [eax]
c0017e4f:	3c 02                	cmp    al,0x2
c0017e51:	75 1c                	jne    c0017e6f <ACPI::detectPCI()+0x8f>
c0017e53:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e58:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017e5d:	74 10                	je     c0017e6f <ACPI::detectPCI()+0x8f>
c0017e5f:	83 ec 0c             	sub    esp,0xc
c0017e62:	68 10 b5 02 c0       	push   0xc002b510
c0017e67:	e8 0d 21 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0017e6c:	83 c4 10             	add    esp,0x10
c0017e6f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017e73:	83 f0 01             	xor    eax,0x1
c0017e76:	84 c0                	test   al,al
c0017e78:	74 3f                	je     c0017eb9 <ACPI::detectPCI()+0xd9>
c0017e7a:	e8 d1 82 fe ff       	call   c0000150 <manualPCIProbe>
c0017e7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e83:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e88:	75 0c                	jne    c0017e96 <ACPI::detectPCI()+0xb6>
c0017e8a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e8f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017e94:	eb 23                	jmp    c0017eb9 <ACPI::detectPCI()+0xd9>
c0017e96:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017e9b:	75 1c                	jne    c0017eb9 <ACPI::detectPCI()+0xd9>
c0017e9d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ea2:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017ea7:	74 10                	je     c0017eb9 <ACPI::detectPCI()+0xd9>
c0017ea9:	83 ec 0c             	sub    esp,0xc
c0017eac:	68 10 b5 02 c0       	push   0xc002b510
c0017eb1:	e8 c3 20 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0017eb6:	83 c4 10             	add    esp,0x10
c0017eb9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ebe:	74 7e                	je     c0017f3e <ACPI::detectPCI()+0x15e>
c0017ec0:	83 ec 0c             	sub    esp,0xc
c0017ec3:	68 9b b5 02 c0       	push   0xc002b59b
c0017ec8:	e8 26 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017ecd:	83 c4 10             	add    esp,0x10
c0017ed0:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017ed8:	83 ec 0c             	sub    esp,0xc
c0017edb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017edf:	e8 b5 76 ff ff       	call   c000f599 <malloc>
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	89 c3                	mov    ebx,eax
c0017ee9:	83 ec 0c             	sub    esp,0xc
c0017eec:	53                   	push   ebx
c0017eed:	e8 c2 a5 00 00       	call   c00224b4 <PCI::PCI()>
c0017ef2:	83 c4 10             	add    esp,0x10
c0017ef5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017ef9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017efd:	83 ec 08             	sub    esp,0x8
c0017f00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f04:	50                   	push   eax
c0017f05:	e8 cc bc ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f11:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f13:	83 c0 08             	add    eax,0x8
c0017f16:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f18:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017f1d:	74 07                	je     c0017f26 <ACPI::detectPCI()+0x146>
c0017f1f:	ba 01 00 00 00       	mov    edx,0x1
c0017f24:	eb 05                	jmp    c0017f2b <ACPI::detectPCI()+0x14b>
c0017f26:	ba 02 00 00 00       	mov    edx,0x2
c0017f2b:	6a 00                	push   0x0
c0017f2d:	6a 00                	push   0x0
c0017f2f:	52                   	push   edx
c0017f30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017f34:	ff d0                	call   eax
c0017f36:	83 c4 10             	add    esp,0x10
c0017f39:	e9 9e 00 00 00       	jmp    c0017fdc <ACPI::detectPCI()+0x1fc>
c0017f3e:	83 ec 0c             	sub    esp,0xc
c0017f41:	68 b3 b5 02 c0       	push   0xc002b5b3
c0017f46:	e8 52 a8 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0017f4b:	83 c4 10             	add    esp,0x10
c0017f4e:	83 ec 0c             	sub    esp,0xc
c0017f51:	68 be b5 02 c0       	push   0xc002b5be
c0017f56:	e8 98 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017f65:	83 ec 0c             	sub    esp,0xc
c0017f68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017f6c:	e8 28 76 ff ff       	call   c000f599 <malloc>
c0017f71:	83 c4 10             	add    esp,0x10
c0017f74:	89 c3                	mov    ebx,eax
c0017f76:	83 ec 0c             	sub    esp,0xc
c0017f79:	53                   	push   ebx
c0017f7a:	e8 9f b0 00 00       	call   c002301e <IDE::IDE()>
c0017f7f:	83 c4 10             	add    esp,0x10
c0017f82:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017f86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f8a:	83 ec 08             	sub    esp,0x8
c0017f8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f91:	50                   	push   eax
c0017f92:	e8 3f bc ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f9e:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017fa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fac:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017fb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fb9:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017fc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fc8:	83 c0 08             	add    eax,0x8
c0017fcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fcd:	6a 00                	push   0x0
c0017fcf:	6a 00                	push   0x0
c0017fd1:	6a 00                	push   0x0
c0017fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017fd7:	ff d0                	call   eax
c0017fd9:	83 c4 10             	add    esp,0x10
c0017fdc:	90                   	nop
c0017fdd:	83 c4 28             	add    esp,0x28
c0017fe0:	5b                   	pop    ebx
c0017fe1:	c3                   	ret    

c0017fe2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017fe2:	83 ec 1c             	sub    esp,0x1c
c0017fe5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017fe9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017fec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ff0:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0017ff5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ffa:	83 ec 08             	sub    esp,0x8
c0017ffd:	52                   	push   edx
c0017ffe:	50                   	push   eax
c0017fff:	e8 ac 6b ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0018004:	83 c4 10             	add    esp,0x10
c0018007:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001800b:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0018010:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018015:	83 ec 04             	sub    esp,0x4
c0018018:	6a 01                	push   0x1
c001801a:	52                   	push   edx
c001801b:	50                   	push   eax
c001801c:	e8 c1 6c ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018021:	83 c4 10             	add    esp,0x10
c0018024:	90                   	nop
c0018025:	83 c4 1c             	add    esp,0x1c
c0018028:	c3                   	ret    
c0018029:	90                   	nop

c001802a <ACPI::sleep()>:
c001802a:	83 ec 0c             	sub    esp,0xc
c001802d:	a1 00 e4 02 c0       	mov    eax,ds:0xc002e400
c0018032:	85 c0                	test   eax,eax
c0018034:	74 07                	je     c001803d <ACPI::sleep()+0x13>
c0018036:	a1 00 e4 02 c0       	mov    eax,ds:0xc002e400
c001803b:	ff d0                	call   eax
c001803d:	90                   	nop
c001803e:	83 c4 0c             	add    esp,0xc
c0018041:	c3                   	ret    

c0018042 <ACPI::open(int, int, void*)>:
c0018042:	57                   	push   edi
c0018043:	56                   	push   esi
c0018044:	53                   	push   ebx
c0018045:	81 ec 60 01 00 00    	sub    esp,0x160
c001804b:	83 ec 0c             	sub    esp,0xc
c001804e:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018055:	e8 86 fd ff ff       	call   c0017de0 <ACPI::detectPCI()>
c001805a:	83 c4 10             	add    esp,0x10
c001805d:	83 ec 0c             	sub    esp,0xc
c0018060:	68 38 b5 02 c0       	push   0xc002b538
c0018065:	e8 89 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001806a:	83 c4 10             	add    esp,0x10
c001806d:	83 ec 0c             	sub    esp,0xc
c0018070:	68 d3 b5 02 c0       	push   0xc002b5d3
c0018075:	e8 55 46 00 00       	call   c001c6cf <Thr::loadKernelSymbolTable(char const*)>
c001807a:	83 c4 10             	add    esp,0x10
c001807d:	83 ec 0c             	sub    esp,0xc
c0018080:	68 f1 b5 02 c0       	push   0xc002b5f1
c0018085:	e8 69 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001808a:	83 c4 10             	add    esp,0x10
c001808d:	83 ec 04             	sub    esp,0x4
c0018090:	6a 0c                	push   0xc
c0018092:	68 0c b6 02 c0       	push   0xc002b60c
c0018097:	68 1d b6 02 c0       	push   0xc002b61d
c001809c:	e8 94 2c 00 00       	call   c001ad35 <Reg::readIntWithDefault(char*, char*, int)>
c00180a1:	83 c4 10             	add    esp,0x10
c00180a4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00180ab:	83 ec 0c             	sub    esp,0xc
c00180ae:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c00180b5:	e8 6f 93 ff ff       	call   c0011429 <Virt::setupPageSwapping(int)>
c00180ba:	83 c4 10             	add    esp,0x10
c00180bd:	83 ec 0c             	sub    esp,0xc
c00180c0:	68 d5 9f 02 c0       	push   0xc0029fd5
c00180c5:	e8 29 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00180ca:	83 c4 10             	add    esp,0x10
c00180cd:	8b 1d 88 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd88
c00180d3:	83 ec 08             	sub    esp,0x8
c00180d6:	6a 01                	push   0x1
c00180d8:	68 24 b6 02 c0       	push   0xc002b624
c00180dd:	e8 64 50 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c00180e2:	83 c4 10             	add    esp,0x10
c00180e5:	83 ec 08             	sub    esp,0x8
c00180e8:	53                   	push   ebx
c00180e9:	50                   	push   eax
c00180ea:	e8 88 52 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c00180ef:	83 c4 10             	add    esp,0x10
c00180f2:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00180f9:	83 ec 08             	sub    esp,0x8
c00180fc:	6a 12                	push   0x12
c00180fe:	50                   	push   eax
c00180ff:	e8 56 be ff ff       	call   c0013f5a <getDevicesOfType(DeviceType)>
c0018104:	83 c4 0c             	add    esp,0xc
c0018107:	83 ec 0c             	sub    esp,0xc
c001810a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018111:	50                   	push   eax
c0018112:	e8 1d 0a 01 00       	call   c0028b34 <LinkedList<Device>::isEmpty()>
c0018117:	83 c4 10             	add    esp,0x10
c001811a:	83 f0 01             	xor    eax,0x1
c001811d:	84 c0                	test   al,al
c001811f:	0f 84 43 01 00 00    	je     c0018268 <ACPI::open(int, int, void*)+0x226>
c0018125:	83 ec 0c             	sub    esp,0xc
c0018128:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001812f:	50                   	push   eax
c0018130:	e8 1b 0a 01 00       	call   c0028b50 <LinkedList<Device>::getFirstElement()>
c0018135:	83 c4 10             	add    esp,0x10
c0018138:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001813f:	83 ec 0c             	sub    esp,0xc
c0018142:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018149:	50                   	push   eax
c001814a:	e8 09 0a 01 00       	call   c0028b58 <LinkedList<Device>::removeFirst()>
c001814f:	83 c4 10             	add    esp,0x10
c0018152:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018159:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018160:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018167:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001816b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018171:	ba 09 00 00 00       	mov    edx,0x9
c0018176:	fc                   	cld    
c0018177:	89 c7                	mov    edi,eax
c0018179:	89 de                	mov    esi,ebx
c001817b:	89 d1                	mov    ecx,edx
c001817d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001817f:	83 ec 08             	sub    esp,0x8
c0018182:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018186:	50                   	push   eax
c0018187:	83 ec 24             	sub    esp,0x24
c001818a:	89 e0                	mov    eax,esp
c001818c:	89 c3                	mov    ebx,eax
c001818e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018192:	ba 09 00 00 00       	mov    edx,0x9
c0018197:	89 df                	mov    edi,ebx
c0018199:	89 c6                	mov    esi,eax
c001819b:	89 d1                	mov    ecx,edx
c001819d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001819f:	e8 ee a7 00 00       	call   c0022992 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00181a4:	83 c4 30             	add    esp,0x30
c00181a7:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c00181ae:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00181b6:	0f 84 4b ff ff ff    	je     c0018107 <ACPI::open(int, int, void*)+0xc5>
c00181bc:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00181c7:	83 ec 0c             	sub    esp,0xc
c00181ca:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00181d1:	e8 c3 73 ff ff       	call   c000f599 <malloc>
c00181d6:	83 c4 10             	add    esp,0x10
c00181d9:	89 c3                	mov    ebx,eax
c00181db:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c00181e0:	83 ec 04             	sub    esp,0x4
c00181e3:	50                   	push   eax
c00181e4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00181eb:	53                   	push   ebx
c00181ec:	e8 0b ab ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c00181f1:	83 c4 10             	add    esp,0x10
c00181f4:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00181fb:	83 ec 0c             	sub    esp,0xc
c00181fe:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018205:	e8 c4 ad ff ff       	call   c0012fce <File::exists()>
c001820a:	83 c4 10             	add    esp,0x10
c001820d:	84 c0                	test   al,al
c001820f:	74 27                	je     c0018238 <ACPI::open(int, int, void*)+0x1f6>
c0018211:	83 ec 08             	sub    esp,0x8
c0018214:	6a 01                	push   0x1
c0018216:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001821d:	e8 24 4f 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c0018222:	83 c4 10             	add    esp,0x10
c0018225:	83 ec 08             	sub    esp,0x8
c0018228:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001822f:	50                   	push   eax
c0018230:	e8 42 51 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c0018235:	83 c4 10             	add    esp,0x10
c0018238:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018240:	0f 84 c1 fe ff ff    	je     c0018107 <ACPI::open(int, int, void*)+0xc5>
c0018246:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001824d:	8b 00                	mov    eax,DWORD PTR [eax]
c001824f:	83 c0 08             	add    eax,0x8
c0018252:	8b 00                	mov    eax,DWORD PTR [eax]
c0018254:	83 ec 0c             	sub    esp,0xc
c0018257:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001825e:	ff d0                	call   eax
c0018260:	83 c4 10             	add    esp,0x10
c0018263:	e9 9f fe ff ff       	jmp    c0018107 <ACPI::open(int, int, void*)+0xc5>
c0018268:	83 ec 0c             	sub    esp,0xc
c001826b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018272:	50                   	push   eax
c0018273:	e8 ba 08 01 00       	call   c0028b32 <LinkedList<Device>::~LinkedList()>
c0018278:	83 c4 10             	add    esp,0x10
c001827b:	8b 1d 88 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd88
c0018281:	83 ec 08             	sub    esp,0x8
c0018284:	6a 01                	push   0x1
c0018286:	68 3f b6 02 c0       	push   0xc002b63f
c001828b:	e8 b6 4e 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c0018290:	83 c4 10             	add    esp,0x10
c0018293:	83 ec 08             	sub    esp,0x8
c0018296:	53                   	push   ebx
c0018297:	50                   	push   eax
c0018298:	e8 da 50 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c001829d:	83 c4 10             	add    esp,0x10
c00182a0:	8b 1d 88 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd88
c00182a6:	83 ec 08             	sub    esp,0x8
c00182a9:	6a 01                	push   0x1
c00182ab:	68 5c b6 02 c0       	push   0xc002b65c
c00182b0:	e8 91 4e 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c00182b5:	83 c4 10             	add    esp,0x10
c00182b8:	83 ec 08             	sub    esp,0x8
c00182bb:	53                   	push   ebx
c00182bc:	50                   	push   eax
c00182bd:	e8 b5 50 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00182ca:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00182d0:	83 e0 04             	and    eax,0x4
c00182d3:	84 c0                	test   al,al
c00182d5:	0f 84 0d 01 00 00    	je     c00183e8 <ACPI::open(int, int, void*)+0x3a6>
c00182db:	83 ec 0c             	sub    esp,0xc
c00182de:	68 79 b6 02 c0       	push   0xc002b679
c00182e3:	e8 0b 73 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00182e8:	83 c4 10             	add    esp,0x10
c00182eb:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00182f6:	83 ec 0c             	sub    esp,0xc
c00182f9:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018300:	e8 94 72 ff ff       	call   c000f599 <malloc>
c0018305:	83 c4 10             	add    esp,0x10
c0018308:	89 c3                	mov    ebx,eax
c001830a:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001830f:	83 ec 04             	sub    esp,0x4
c0018312:	50                   	push   eax
c0018313:	68 96 b6 02 c0       	push   0xc002b696
c0018318:	53                   	push   ebx
c0018319:	e8 de a9 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001831e:	83 c4 10             	add    esp,0x10
c0018321:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018328:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018330:	74 1a                	je     c001834c <ACPI::open(int, int, void*)+0x30a>
c0018332:	83 ec 0c             	sub    esp,0xc
c0018335:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001833c:	e8 8d ac ff ff       	call   c0012fce <File::exists()>
c0018341:	83 c4 10             	add    esp,0x10
c0018344:	84 c0                	test   al,al
c0018346:	74 04                	je     c001834c <ACPI::open(int, int, void*)+0x30a>
c0018348:	b0 01                	mov    al,0x1
c001834a:	eb 02                	jmp    c001834e <ACPI::open(int, int, void*)+0x30c>
c001834c:	b0 00                	mov    al,0x0
c001834e:	84 c0                	test   al,al
c0018350:	74 25                	je     c0018377 <ACPI::open(int, int, void*)+0x335>
c0018352:	83 ec 08             	sub    esp,0x8
c0018355:	6a 01                	push   0x1
c0018357:	68 96 b6 02 c0       	push   0xc002b696
c001835c:	e8 e5 4d 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c0018361:	83 c4 10             	add    esp,0x10
c0018364:	83 ec 08             	sub    esp,0x8
c0018367:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001836e:	50                   	push   eax
c001836f:	e8 03 50 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c0018374:	83 c4 10             	add    esp,0x10
c0018377:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001837f:	74 27                	je     c00183a8 <ACPI::open(int, int, void*)+0x366>
c0018381:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018389:	74 1d                	je     c00183a8 <ACPI::open(int, int, void*)+0x366>
c001838b:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018392:	8b 00                	mov    eax,DWORD PTR [eax]
c0018394:	83 c0 08             	add    eax,0x8
c0018397:	8b 00                	mov    eax,DWORD PTR [eax]
c0018399:	83 ec 0c             	sub    esp,0xc
c001839c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00183a3:	ff d0                	call   eax
c00183a5:	83 c4 10             	add    esp,0x10
c00183a8:	a1 28 e6 02 c0       	mov    eax,ds:0xc002e628
c00183ad:	83 ec 08             	sub    esp,0x8
c00183b0:	68 b3 b6 02 c0       	push   0xc002b6b3
c00183b5:	50                   	push   eax
c00183b6:	e8 43 f3 ff ff       	call   c00176fe <findDataTable(unsigned char*, char*)>
c00183bb:	83 c4 10             	add    esp,0x10
c00183be:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00183c5:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00183cd:	74 19                	je     c00183e8 <ACPI::open(int, int, void*)+0x3a6>
c00183cf:	83 ec 08             	sub    esp,0x8
c00183d2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00183d9:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00183e0:	e8 fd fb ff ff       	call   c0017fe2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00183e5:	83 c4 10             	add    esp,0x10
c00183e8:	b8 00 00 00 00       	mov    eax,0x0
c00183ed:	81 c4 60 01 00 00    	add    esp,0x160
c00183f3:	5b                   	pop    ebx
c00183f4:	5e                   	pop    esi
c00183f5:	5f                   	pop    edi
c00183f6:	c3                   	ret    
c00183f7:	90                   	nop

c00183f8 <CPU::close(int, int, void*)>:
c00183f8:	31 c0                	xor    eax,eax
c00183fa:	c3                   	ret    
c00183fb:	90                   	nop

c00183fc <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00183fc:	55                   	push   ebp
c00183fd:	57                   	push   edi
c00183fe:	56                   	push   esi
c00183ff:	53                   	push   ebx
c0018400:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018404:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018408:	89 ce                	mov    esi,ecx
c001840a:	89 d5                	mov    ebp,edx
c001840c:	80 f9 04             	cmp    cl,0x4
c001840f:	75 28                	jne    c0018439 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018411:	8d 42 f9             	lea    eax,[edx-0x7]
c0018414:	3c 03                	cmp    al,0x3
c0018416:	0f 86 63 01 00 00    	jbe    c001857f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001841c:	80 fa 03             	cmp    dl,0x3
c001841f:	0f 84 5a 01 00 00    	je     c001857f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018425:	8d 7a f2             	lea    edi,[edx-0xe]
c0018428:	b8 b0 d1 02 c0       	mov    eax,0xc002d1b0
c001842d:	89 fb                	mov    ebx,edi
c001842f:	80 fb 01             	cmp    bl,0x1
c0018432:	77 4e                	ja     c0018482 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018434:	e9 52 01 00 00       	jmp    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018439:	80 f9 05             	cmp    cl,0x5
c001843c:	75 4d                	jne    c001848b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001843e:	b8 c0 d1 02 c0       	mov    eax,0xc002d1c0
c0018443:	80 fa 03             	cmp    dl,0x3
c0018446:	0f 86 3f 01 00 00    	jbe    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844c:	8d 7a fa             	lea    edi,[edx-0x6]
c001844f:	b8 d0 d1 02 c0       	mov    eax,0xc002d1d0
c0018454:	89 fb                	mov    ebx,edi
c0018456:	80 fb 01             	cmp    bl,0x1
c0018459:	0f 86 2c 01 00 00    	jbe    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001845f:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c0018464:	80 fa 08             	cmp    dl,0x8
c0018467:	0f 84 1e 01 00 00    	je     c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001846d:	89 d7                	mov    edi,edx
c001846f:	b8 f0 d1 02 c0       	mov    eax,0xc002d1f0
c0018474:	83 e7 fb             	and    edi,0xfffffffb
c0018477:	89 fb                	mov    ebx,edi
c0018479:	80 fb 09             	cmp    bl,0x9
c001847c:	0f 84 09 01 00 00    	je     c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018482:	31 c0                	xor    eax,eax
c0018484:	89 eb                	mov    ebx,ebp
c0018486:	0f b6 fb             	movzx  edi,bl
c0018489:	eb 30                	jmp    c00184bb <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001848b:	31 c0                	xor    eax,eax
c001848d:	80 f9 06             	cmp    cl,0x6
c0018490:	75 f2                	jne    c0018484 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018492:	80 fa 0a             	cmp    dl,0xa
c0018495:	77 ed                	ja     c0018484 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018497:	bf de 05 00 00       	mov    edi,0x5de
c001849c:	0f a3 d7             	bt     edi,edx
c001849f:	73 e3                	jae    c0018484 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00184a1:	b8 00 d2 02 c0       	mov    eax,0xc002d200
c00184a6:	e9 e0 00 00 00       	jmp    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ab:	39 c7                	cmp    edi,eax
c00184ad:	0f 84 d3 00 00 00    	je     c0018586 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00184b3:	40                   	inc    eax
c00184b4:	3d d0 00 00 00       	cmp    eax,0xd0
c00184b9:	74 09                	je     c00184c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00184bb:	89 f3                	mov    ebx,esi
c00184bd:	80 fb 0f             	cmp    bl,0xf
c00184c0:	75 f1                	jne    c00184b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00184c2:	eb e7                	jmp    c00184ab <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00184c4:	80 f9 10             	cmp    cl,0x10
c00184c7:	75 14                	jne    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00184c9:	8d 42 fc             	lea    eax,[edx-0x4]
c00184cc:	83 e0 fb             	and    eax,0xfffffffb
c00184cf:	3c 02                	cmp    al,0x2
c00184d1:	76 34                	jbe    c0018507 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00184d3:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c00184d8:	80 fa 02             	cmp    dl,0x2
c00184db:	eb 24                	jmp    c0018501 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00184dd:	80 f9 11             	cmp    cl,0x11
c00184e0:	75 13                	jne    c00184f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00184e2:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c00184e7:	80 fa 03             	cmp    dl,0x3
c00184ea:	0f 85 9b 00 00 00    	jne    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184f0:	e9 91 00 00 00       	jmp    c0018586 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00184f5:	80 f9 12             	cmp    cl,0x12
c00184f8:	75 14                	jne    c001850e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00184fa:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c00184ff:	fe ca                	dec    dl
c0018501:	0f 85 84 00 00 00    	jne    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018507:	b8 20 d2 02 c0       	mov    eax,0xc002d220
c001850c:	eb 7d                	jmp    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001850e:	80 f9 14             	cmp    cl,0x14
c0018511:	75 12                	jne    c0018525 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018513:	4a                   	dec    edx
c0018514:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c0018519:	80 fa 01             	cmp    dl,0x1
c001851c:	77 6d                	ja     c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001851e:	b8 30 d2 02 c0       	mov    eax,0xc002d230
c0018523:	eb 66                	jmp    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018525:	80 f9 15             	cmp    cl,0x15
c0018528:	75 31                	jne    c001855b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001852a:	b8 40 d2 02 c0       	mov    eax,0xc002d240
c001852f:	80 fa 01             	cmp    dl,0x1
c0018532:	74 57                	je     c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018534:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c0018539:	80 fa 13             	cmp    dl,0x13
c001853c:	76 0c                	jbe    c001854a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001853e:	80 fa 30             	cmp    dl,0x30
c0018541:	75 48                	jne    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018543:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c0018548:	eb 41                	jmp    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001854a:	b9 04 00 09 00       	mov    ecx,0x90004
c001854f:	0f a3 d1             	bt     ecx,edx
c0018552:	73 37                	jae    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018554:	b8 50 d2 02 c0       	mov    eax,0xc002d250
c0018559:	eb 30                	jmp    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001855b:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c0018560:	80 f9 16             	cmp    cl,0x16
c0018563:	75 26                	jne    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018565:	b8 70 d2 02 c0       	mov    eax,0xc002d270
c001856a:	84 d2                	test   dl,dl
c001856c:	74 1d                	je     c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001856e:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c0018573:	80 fa 30             	cmp    dl,0x30
c0018576:	75 13                	jne    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018578:	b8 80 d2 02 c0       	mov    eax,0xc002d280
c001857d:	eb 0c                	jmp    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001857f:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0018584:	eb 05                	jmp    c001858b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018586:	b8 10 d2 02 c0       	mov    eax,0xc002d210
c001858b:	5b                   	pop    ebx
c001858c:	5e                   	pop    esi
c001858d:	5f                   	pop    edi
c001858e:	5d                   	pop    ebp
c001858f:	c3                   	ret    

c0018590 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018590:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018598:	80 f9 04             	cmp    cl,0x4
c001859b:	75 6b                	jne    c0018608 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001859d:	b8 00 d0 02 c0       	mov    eax,0xc002d000
c00185a2:	80 fa 01             	cmp    dl,0x1
c00185a5:	0f 86 92 02 00 00    	jbe    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ab:	b8 10 d0 02 c0       	mov    eax,0xc002d010
c00185b0:	80 fa 02             	cmp    dl,0x2
c00185b3:	0f 84 84 02 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b9:	b8 20 d0 02 c0       	mov    eax,0xc002d020
c00185be:	80 fa 03             	cmp    dl,0x3
c00185c1:	0f 84 76 02 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c7:	b8 30 d0 02 c0       	mov    eax,0xc002d030
c00185cc:	80 fa 04             	cmp    dl,0x4
c00185cf:	0f 84 68 02 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d5:	b8 40 d0 02 c0       	mov    eax,0xc002d040
c00185da:	80 fa 05             	cmp    dl,0x5
c00185dd:	0f 84 5a 02 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e3:	b8 20 d0 02 c0       	mov    eax,0xc002d020
c00185e8:	80 fa 07             	cmp    dl,0x7
c00185eb:	0f 84 4c 02 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f1:	83 ea 08             	sub    edx,0x8
c00185f4:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c00185f9:	80 fa 01             	cmp    dl,0x1
c00185fc:	0f 87 3b 02 00 00    	ja     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018602:	b8 50 d0 02 c0       	mov    eax,0xc002d050
c0018607:	c3                   	ret    
c0018608:	80 f9 05             	cmp    cl,0x5
c001860b:	75 45                	jne    c0018652 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001860d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018610:	b8 60 d0 02 c0       	mov    eax,0xc002d060
c0018615:	80 f9 02             	cmp    cl,0x2
c0018618:	0f 86 1f 02 00 00    	jbe    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861e:	80 fa 04             	cmp    dl,0x4
c0018621:	0f 84 f3 01 00 00    	je     c001881a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018627:	80 fa 07             	cmp    dl,0x7
c001862a:	0f 84 0d 02 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018630:	b8 70 d0 02 c0       	mov    eax,0xc002d070
c0018635:	80 fa 08             	cmp    dl,0x8
c0018638:	0f 84 ff 01 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863e:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c0018643:	80 fa 09             	cmp    dl,0x9
c0018646:	0f 85 f1 01 00 00    	jne    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864c:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c0018651:	c3                   	ret    
c0018652:	80 f9 06             	cmp    cl,0x6
c0018655:	0f 85 85 01 00 00    	jne    c00187e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001865b:	b8 90 d0 02 c0       	mov    eax,0xc002d090
c0018660:	80 fa 01             	cmp    dl,0x1
c0018663:	0f 84 d4 01 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018669:	8d 42 fb             	lea    eax,[edx-0x5]
c001866c:	3c 01                	cmp    al,0x1
c001866e:	0f 86 ac 01 00 00    	jbe    c0018820 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018674:	80 fa 03             	cmp    dl,0x3
c0018677:	0f 84 a3 01 00 00    	je     c0018820 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001867d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018680:	b8 b0 d0 02 c0       	mov    eax,0xc002d0b0
c0018685:	80 f9 01             	cmp    cl,0x1
c0018688:	0f 86 af 01 00 00    	jbe    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868e:	80 fa 09             	cmp    dl,0x9
c0018691:	0f 84 8f 01 00 00    	je     c0018826 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018697:	8d 4a f6             	lea    ecx,[edx-0xa]
c001869a:	80 f9 01             	cmp    cl,0x1
c001869d:	0f 86 9a 01 00 00    	jbe    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a3:	b8 c0 d0 02 c0       	mov    eax,0xc002d0c0
c00186a8:	80 fa 0d             	cmp    dl,0xd
c00186ab:	0f 84 8c 01 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b1:	b8 d0 d0 02 c0       	mov    eax,0xc002d0d0
c00186b6:	80 fa 0e             	cmp    dl,0xe
c00186b9:	0f 84 7e 01 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186bf:	b8 e0 d0 02 c0       	mov    eax,0xc002d0e0
c00186c4:	80 fa 0f             	cmp    dl,0xf
c00186c7:	0f 84 70 01 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186cd:	b8 c0 d0 02 c0       	mov    eax,0xc002d0c0
c00186d2:	80 fa 15             	cmp    dl,0x15
c00186d5:	0f 84 62 01 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186db:	8d 4a ea             	lea    ecx,[edx-0x16]
c00186de:	b8 e0 d0 02 c0       	mov    eax,0xc002d0e0
c00186e3:	80 f9 01             	cmp    cl,0x1
c00186e6:	0f 86 51 01 00 00    	jbe    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ec:	80 fa 1a             	cmp    dl,0x1a
c00186ef:	0f 84 37 01 00 00    	je     c001882c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00186f5:	80 fa 1c             	cmp    dl,0x1c
c00186f8:	0f 84 34 01 00 00    	je     c0018832 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00186fe:	80 fa 1d             	cmp    dl,0x1d
c0018701:	0f 84 36 01 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018707:	b8 10 d1 02 c0       	mov    eax,0xc002d110
c001870c:	80 fa 25             	cmp    dl,0x25
c001870f:	0f 84 28 01 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018715:	8d 4a da             	lea    ecx,[edx-0x26]
c0018718:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c001871d:	80 f9 01             	cmp    cl,0x1
c0018720:	0f 86 17 01 00 00    	jbe    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018726:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c001872b:	80 fa 2a             	cmp    dl,0x2a
c001872e:	0f 84 09 01 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018734:	b8 10 d1 02 c0       	mov    eax,0xc002d110
c0018739:	80 fa 2c             	cmp    dl,0x2c
c001873c:	0f 84 fb 00 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018742:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c0018747:	80 fa 2d             	cmp    dl,0x2d
c001874a:	0f 84 ed 00 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018750:	b8 f0 d0 02 c0       	mov    eax,0xc002d0f0
c0018755:	80 fa 2e             	cmp    dl,0x2e
c0018758:	0f 84 df 00 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001875e:	b8 10 d1 02 c0       	mov    eax,0xc002d110
c0018763:	80 fa 2f             	cmp    dl,0x2f
c0018766:	0f 84 d1 00 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001876c:	8d 4a cb             	lea    ecx,[edx-0x35]
c001876f:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0018774:	80 f9 01             	cmp    cl,0x1
c0018777:	0f 86 c0 00 00 00    	jbe    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001877d:	b8 30 d1 02 c0       	mov    eax,0xc002d130
c0018782:	80 fa 37             	cmp    dl,0x37
c0018785:	0f 84 b2 00 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001878b:	b8 40 d1 02 c0       	mov    eax,0xc002d140
c0018790:	80 fa 3a             	cmp    dl,0x3a
c0018793:	0f 84 a4 00 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018799:	b8 50 d1 02 c0       	mov    eax,0xc002d150
c001879e:	80 fa 3c             	cmp    dl,0x3c
c00187a1:	0f 84 96 00 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a7:	b8 60 d1 02 c0       	mov    eax,0xc002d160
c00187ac:	80 fa 3d             	cmp    dl,0x3d
c00187af:	0f 84 88 00 00 00    	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187b5:	b8 40 d1 02 c0       	mov    eax,0xc002d140
c00187ba:	80 fa 3e             	cmp    dl,0x3e
c00187bd:	74 7e                	je     c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187bf:	8d 42 bb             	lea    eax,[edx-0x45]
c00187c2:	3c 01                	cmp    al,0x1
c00187c4:	76 72                	jbe    c0018838 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00187c6:	80 fa 3f             	cmp    dl,0x3f
c00187c9:	74 6d                	je     c0018838 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00187cb:	80 fa 4a             	cmp    dl,0x4a
c00187ce:	74 0a                	je     c00187da <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00187d0:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c00187d5:	80 fa 4d             	cmp    dl,0x4d
c00187d8:	75 63                	jne    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187da:	b8 30 d1 02 c0       	mov    eax,0xc002d130
c00187df:	c3                   	ret    
c00187e0:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c00187e5:	80 f9 0b             	cmp    cl,0xb
c00187e8:	75 0a                	jne    c00187f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00187ea:	fe ca                	dec    dl
c00187ec:	75 4f                	jne    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ee:	b8 70 d1 02 c0       	mov    eax,0xc002d170
c00187f3:	c3                   	ret    
c00187f4:	80 f9 0f             	cmp    cl,0xf
c00187f7:	75 44                	jne    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f9:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c00187fe:	80 fa 02             	cmp    dl,0x2
c0018801:	76 3a                	jbe    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018803:	8d 42 fd             	lea    eax,[edx-0x3]
c0018806:	3c 01                	cmp    al,0x1
c0018808:	76 0a                	jbe    c0018814 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001880a:	b8 39 b8 02 c0       	mov    eax,0xc002b839
c001880f:	80 fa 06             	cmp    dl,0x6
c0018812:	75 29                	jne    c001883d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018814:	b8 90 d1 02 c0       	mov    eax,0xc002d190
c0018819:	c3                   	ret    
c001881a:	b8 70 d0 02 c0       	mov    eax,0xc002d070
c001881f:	c3                   	ret    
c0018820:	b8 a0 d0 02 c0       	mov    eax,0xc002d0a0
c0018825:	c3                   	ret    
c0018826:	b8 c0 d0 02 c0       	mov    eax,0xc002d0c0
c001882b:	c3                   	ret    
c001882c:	b8 f0 d0 02 c0       	mov    eax,0xc002d0f0
c0018831:	c3                   	ret    
c0018832:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0018837:	c3                   	ret    
c0018838:	b8 50 d1 02 c0       	mov    eax,0xc002d150
c001883d:	c3                   	ret    

c001883e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001883e:	60                   	pusha  
c001883f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018843:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018847:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001884b:	9c                   	pushf  
c001884c:	fa                   	cli    
c001884d:	0f 09                	wbinvd 
c001884f:	0f 30                	wrmsr  
c0018851:	9d                   	popf   
c0018852:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018856:	89 02                	mov    DWORD PTR [edx],eax
c0018858:	61                   	popa   
c0018859:	c3                   	ret    

c001885a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001885a:	60                   	pusha  
c001885b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001885f:	9c                   	pushf  
c0018860:	fa                   	cli    
c0018861:	0f 09                	wbinvd 
c0018863:	31 c0                	xor    eax,eax
c0018865:	31 d2                	xor    edx,edx
c0018867:	0f 32                	rdmsr  
c0018869:	9d                   	popf   
c001886a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001886e:	89 02                	mov    DWORD PTR [edx],eax
c0018870:	61                   	popa   
c0018871:	c3                   	ret    

c0018872 <CPU::AMD_K6_writeback(int, int, int)>:
c0018872:	56                   	push   esi
c0018873:	53                   	push   ebx
c0018874:	83 ec 10             	sub    esp,0x10
c0018877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001887b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018880:	75 5d                	jne    c00188df <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018882:	83 f8 08             	cmp    eax,0x8
c0018885:	75 09                	jne    c0018890 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018887:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001888c:	7e 13                	jle    c00188a1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001888e:	eb 30                	jmp    c00188c0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018890:	83 f8 06             	cmp    eax,0x6
c0018893:	7c 4a                	jl     c00188df <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018895:	83 f8 07             	cmp    eax,0x7
c0018898:	7e 07                	jle    c00188a1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001889a:	83 f8 09             	cmp    eax,0x9
c001889d:	74 21                	je     c00188c0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001889f:	eb 3e                	jmp    c00188df <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00188a1:	89 e6                	mov    esi,esp
c00188a3:	8b 1d c8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc8
c00188a9:	56                   	push   esi
c00188aa:	c1 eb 15             	shr    ebx,0x15
c00188ad:	68 82 00 00 c0       	push   0xc0000082
c00188b2:	83 e3 7e             	and    ebx,0x7e
c00188b5:	e8 a0 ff ff ff       	call   c001885a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00188ba:	56                   	push   esi
c00188bb:	6a 00                	push   0x0
c00188bd:	53                   	push   ebx
c00188be:	eb 12                	jmp    c00188d2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00188c0:	89 e3                	mov    ebx,esp
c00188c2:	53                   	push   ebx
c00188c3:	68 82 00 00 c0       	push   0xc0000082
c00188c8:	e8 8d ff ff ff       	call   c001885a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00188cd:	53                   	push   ebx
c00188ce:	6a 00                	push   0x0
c00188d0:	6a 00                	push   0x0
c00188d2:	68 82 00 00 c0       	push   0xc0000082
c00188d7:	e8 62 ff ff ff       	call   c001883e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00188dc:	83 c4 18             	add    esp,0x18
c00188df:	83 c4 10             	add    esp,0x10
c00188e2:	5b                   	pop    ebx
c00188e3:	5e                   	pop    esi
c00188e4:	c3                   	ret    
c00188e5:	90                   	nop

c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00188e6:	55                   	push   ebp
c00188e7:	57                   	push   edi
c00188e8:	56                   	push   esi
c00188e9:	53                   	push   ebx
c00188ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188ee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00188f2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00188f6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00188fa:	39 05 a0 d2 02 c0    	cmp    DWORD PTR ds:0xc002d2a0,eax
c0018900:	75 23                	jne    c0018925 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018902:	a1 8c e8 02 c0       	mov    eax,ds:0xc002e88c
c0018907:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001890b:	89 06                	mov    DWORD PTR [esi],eax
c001890d:	a1 88 e8 02 c0       	mov    eax,ds:0xc002e888
c0018912:	89 07                	mov    DWORD PTR [edi],eax
c0018914:	a1 84 e8 02 c0       	mov    eax,ds:0xc002e884
c0018919:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001891c:	a1 80 e8 02 c0       	mov    eax,ds:0xc002e880
c0018921:	89 02                	mov    DWORD PTR [edx],eax
c0018923:	eb 3f                	jmp    c0018964 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018925:	31 c9                	xor    ecx,ecx
c0018927:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001892b:	0f a2                	cpuid  
c001892d:	89 06                	mov    DWORD PTR [esi],eax
c001892f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018931:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018935:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018938:	89 10                	mov    DWORD PTR [eax],edx
c001893a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001893e:	a3 a0 d2 02 c0       	mov    ds:0xc002d2a0,eax
c0018943:	8b 06                	mov    eax,DWORD PTR [esi]
c0018945:	a3 8c e8 02 c0       	mov    ds:0xc002e88c,eax
c001894a:	8b 07                	mov    eax,DWORD PTR [edi]
c001894c:	a3 88 e8 02 c0       	mov    ds:0xc002e888,eax
c0018951:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018954:	a3 84 e8 02 c0       	mov    ds:0xc002e884,eax
c0018959:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001895d:	8b 00                	mov    eax,DWORD PTR [eax]
c001895f:	a3 80 e8 02 c0       	mov    ds:0xc002e880,eax
c0018964:	5b                   	pop    ebx
c0018965:	5e                   	pop    esi
c0018966:	5f                   	pop    edi
c0018967:	5d                   	pop    ebp
c0018968:	c3                   	ret    
c0018969:	90                   	nop

c001896a <CPU::cpuidCheckEDX(unsigned int)>:
c001896a:	83 ec 10             	sub    esp,0x10
c001896d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018971:	50                   	push   eax
c0018972:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018976:	50                   	push   eax
c0018977:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001897b:	50                   	push   eax
c001897c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018980:	50                   	push   eax
c0018981:	6a 01                	push   0x1
c0018983:	e8 5e ff ff ff       	call   c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018988:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001898c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018990:	0f 95 c0             	setne  al
c0018993:	83 c4 24             	add    esp,0x24
c0018996:	c3                   	ret    
c0018997:	90                   	nop

c0018998 <CPU::cpuidCheckECX(unsigned int)>:
c0018998:	83 ec 10             	sub    esp,0x10
c001899b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001899f:	50                   	push   eax
c00189a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189a4:	50                   	push   eax
c00189a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189a9:	50                   	push   eax
c00189aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189ae:	50                   	push   eax
c00189af:	6a 01                	push   0x1
c00189b1:	e8 30 ff ff ff       	call   c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189ba:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00189be:	0f 95 c0             	setne  al
c00189c1:	83 c4 24             	add    esp,0x24
c00189c4:	c3                   	ret    
c00189c5:	90                   	nop

c00189c6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00189c6:	83 ec 10             	sub    esp,0x10
c00189c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189cd:	50                   	push   eax
c00189ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189d2:	50                   	push   eax
c00189d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189d7:	50                   	push   eax
c00189d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189dc:	50                   	push   eax
c00189dd:	6a 07                	push   0x7
c00189df:	e8 02 ff ff ff       	call   c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189e8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00189ec:	0f 95 c0             	setne  al
c00189ef:	83 c4 24             	add    esp,0x24
c00189f2:	c3                   	ret    
c00189f3:	90                   	nop

c00189f4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00189f4:	83 ec 10             	sub    esp,0x10
c00189f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189fb:	50                   	push   eax
c00189fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a00:	50                   	push   eax
c0018a01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a05:	50                   	push   eax
c0018a06:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a0a:	50                   	push   eax
c0018a0b:	6a 07                	push   0x7
c0018a0d:	e8 d4 fe ff ff       	call   c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a16:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a1a:	0f 95 c0             	setne  al
c0018a1d:	83 c4 24             	add    esp,0x24
c0018a20:	c3                   	ret    
c0018a21:	90                   	nop

c0018a22 <CPU::CPU()>:
c0018a22:	83 ec 0c             	sub    esp,0xc
c0018a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a29:	83 ec 08             	sub    esp,0x8
c0018a2c:	68 39 b8 02 c0       	push   0xc002b839
c0018a31:	50                   	push   eax
c0018a32:	e8 a3 b3 ff ff       	call   c0013dda <Device::Device(char const*)>
c0018a37:	83 c4 10             	add    esp,0x10
c0018a3a:	ba 10 b9 02 c0       	mov    edx,0xc002b910
c0018a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a43:	89 10                	mov    DWORD PTR [eax],edx
c0018a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a49:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a57:	05 78 01 00 00       	add    eax,0x178
c0018a5c:	83 ec 0c             	sub    esp,0xc
c0018a5f:	50                   	push   eax
c0018a60:	e8 67 63 ff ff       	call   c000edcc <GDT::GDT()>
c0018a65:	83 c4 10             	add    esp,0x10
c0018a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a6c:	05 7c 09 00 00       	add    eax,0x97c
c0018a71:	83 ec 0c             	sub    esp,0xc
c0018a74:	50                   	push   eax
c0018a75:	e8 a2 65 ff ff       	call   c000f01c <IDT::IDT()>
c0018a7a:	83 c4 10             	add    esp,0x10
c0018a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a81:	05 7c 11 00 00       	add    eax,0x117c
c0018a86:	83 ec 0c             	sub    esp,0xc
c0018a89:	50                   	push   eax
c0018a8a:	e8 d7 80 ff ff       	call   c0010b66 <TSS::TSS()>
c0018a8f:	83 c4 10             	add    esp,0x10
c0018a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a96:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aa1:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018aab:	90                   	nop
c0018aac:	83 c4 0c             	add    esp,0xc
c0018aaf:	c3                   	ret    

c0018ab0 <CPU::displayFeatures()>:
c0018ab0:	c3                   	ret    
c0018ab1:	90                   	nop

c0018ab2 <CPU::detectFeatures()>:
c0018ab2:	55                   	push   ebp
c0018ab3:	57                   	push   edi
c0018ab4:	56                   	push   esi
c0018ab5:	53                   	push   ebx
c0018ab6:	83 ec 50             	sub    esp,0x50
c0018ab9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018abd:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018ac7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018ace:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018ad4:	6a 0d                	push   0xd
c0018ad6:	6a 00                	push   0x0
c0018ad8:	55                   	push   ebp
c0018ad9:	e8 72 7c fe ff       	call   c0000750 <memset>
c0018ade:	83 c4 10             	add    esp,0x10
c0018ae1:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0018ae6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018aed:	0f 84 22 09 00 00    	je     c0019415 <CPU::detectFeatures()+0x963>
c0018af3:	83 ec 0c             	sub    esp,0xc
c0018af6:	89 ef                	mov    edi,ebp
c0018af8:	6a 10                	push   0x10
c0018afa:	e8 6b fe ff ff       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c0018aff:	83 e0 01             	and    eax,0x1
c0018b02:	8d 14 00             	lea    edx,[eax+eax*1]
c0018b05:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b0b:	83 e0 fd             	and    eax,0xfffffffd
c0018b0e:	09 d0                	or     eax,edx
c0018b10:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b16:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018b1d:	e8 48 fe ff ff       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c0018b22:	83 e0 01             	and    eax,0x1
c0018b25:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018b2c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b32:	83 e0 fb             	and    eax,0xfffffffb
c0018b35:	09 d0                	or     eax,edx
c0018b37:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b3d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018b44:	e8 21 fe ff ff       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c0018b49:	83 e0 01             	and    eax,0x1
c0018b4c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018b53:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b59:	83 e0 f7             	and    eax,0xfffffff7
c0018b5c:	09 d0                	or     eax,edx
c0018b5e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b64:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018b6b:	e8 fa fd ff ff       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c0018b70:	83 e0 01             	and    eax,0x1
c0018b73:	c1 e0 04             	shl    eax,0x4
c0018b76:	88 c2                	mov    dl,al
c0018b78:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b7e:	83 e0 ef             	and    eax,0xffffffef
c0018b81:	09 d0                	or     eax,edx
c0018b83:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b89:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018b90:	e8 d5 fd ff ff       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c0018b95:	83 e0 01             	and    eax,0x1
c0018b98:	c1 e0 05             	shl    eax,0x5
c0018b9b:	88 c2                	mov    dl,al
c0018b9d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ba3:	83 e0 df             	and    eax,0xffffffdf
c0018ba6:	09 d0                	or     eax,edx
c0018ba8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018bb5:	e8 b0 fd ff ff       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c0018bba:	83 e0 01             	and    eax,0x1
c0018bbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0018bc0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018bc6:	83 e0 fd             	and    eax,0xfffffffd
c0018bc9:	09 d0                	or     eax,edx
c0018bcb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018bd1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018bd8:	e8 8d fd ff ff       	call   c001896a <CPU::cpuidCheckEDX(unsigned int)>
c0018bdd:	83 e0 01             	and    eax,0x1
c0018be0:	c1 e0 06             	shl    eax,0x6
c0018be3:	88 c2                	mov    dl,al
c0018be5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018beb:	83 e0 bf             	and    eax,0xffffffbf
c0018bee:	09 d0                	or     eax,edx
c0018bf0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018bf6:	58                   	pop    eax
c0018bf7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018bfb:	50                   	push   eax
c0018bfc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c00:	50                   	push   eax
c0018c01:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018c05:	56                   	push   esi
c0018c06:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c0a:	50                   	push   eax
c0018c0b:	6a 00                	push   0x0
c0018c0d:	e8 d4 fc ff ff       	call   c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c12:	b8 04 00 00 00       	mov    eax,0x4
c0018c17:	89 c1                	mov    ecx,eax
c0018c19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c1b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018c21:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018c25:	89 c1                	mov    ecx,eax
c0018c27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c29:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018c2f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018c33:	89 c1                	mov    ecx,eax
c0018c35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c37:	83 c4 18             	add    esp,0x18
c0018c3a:	68 e4 b6 02 c0       	push   0xc002b6e4
c0018c3f:	55                   	push   ebp
c0018c40:	e8 53 7c fe ff       	call   c0000898 <strcmp>
c0018c45:	83 c4 10             	add    esp,0x10
c0018c48:	85 c0                	test   eax,eax
c0018c4a:	75 0f                	jne    c0018c5b <CPU::detectFeatures()+0x1a9>
c0018c4c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018c56:	e9 22 02 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018c5b:	50                   	push   eax
c0018c5c:	50                   	push   eax
c0018c5d:	68 f1 b6 02 c0       	push   0xc002b6f1
c0018c62:	55                   	push   ebp
c0018c63:	e8 30 7c fe ff       	call   c0000898 <strcmp>
c0018c68:	83 c4 10             	add    esp,0x10
c0018c6b:	85 c0                	test   eax,eax
c0018c6d:	74 dd                	je     c0018c4c <CPU::detectFeatures()+0x19a>
c0018c6f:	50                   	push   eax
c0018c70:	50                   	push   eax
c0018c71:	68 fe b6 02 c0       	push   0xc002b6fe
c0018c76:	55                   	push   ebp
c0018c77:	e8 1c 7c fe ff       	call   c0000898 <strcmp>
c0018c7c:	83 c4 10             	add    esp,0x10
c0018c7f:	85 c0                	test   eax,eax
c0018c81:	74 2a                	je     c0018cad <CPU::detectFeatures()+0x1fb>
c0018c83:	50                   	push   eax
c0018c84:	50                   	push   eax
c0018c85:	68 0b b7 02 c0       	push   0xc002b70b
c0018c8a:	55                   	push   ebp
c0018c8b:	e8 08 7c fe ff       	call   c0000898 <strcmp>
c0018c90:	83 c4 10             	add    esp,0x10
c0018c93:	85 c0                	test   eax,eax
c0018c95:	74 16                	je     c0018cad <CPU::detectFeatures()+0x1fb>
c0018c97:	50                   	push   eax
c0018c98:	50                   	push   eax
c0018c99:	68 18 b7 02 c0       	push   0xc002b718
c0018c9e:	55                   	push   ebp
c0018c9f:	e8 f4 7b fe ff       	call   c0000898 <strcmp>
c0018ca4:	83 c4 10             	add    esp,0x10
c0018ca7:	85 c0                	test   eax,eax
c0018ca9:	74 48                	je     c0018cf3 <CPU::detectFeatures()+0x241>
c0018cab:	eb 0f                	jmp    c0018cbc <CPU::detectFeatures()+0x20a>
c0018cad:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018cb7:	e9 c1 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018cbc:	50                   	push   eax
c0018cbd:	50                   	push   eax
c0018cbe:	68 25 b7 02 c0       	push   0xc002b725
c0018cc3:	55                   	push   ebp
c0018cc4:	e8 cf 7b fe ff       	call   c0000898 <strcmp>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	85 c0                	test   eax,eax
c0018cce:	74 23                	je     c0018cf3 <CPU::detectFeatures()+0x241>
c0018cd0:	57                   	push   edi
c0018cd1:	57                   	push   edi
c0018cd2:	68 32 b7 02 c0       	push   0xc002b732
c0018cd7:	55                   	push   ebp
c0018cd8:	e8 bb 7b fe ff       	call   c0000898 <strcmp>
c0018cdd:	83 c4 10             	add    esp,0x10
c0018ce0:	85 c0                	test   eax,eax
c0018ce2:	75 1e                	jne    c0018d02 <CPU::detectFeatures()+0x250>
c0018ce4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018cee:	e9 8a 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018cf3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018cfd:	e9 7b 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018d02:	56                   	push   esi
c0018d03:	56                   	push   esi
c0018d04:	68 3f b7 02 c0       	push   0xc002b73f
c0018d09:	55                   	push   ebp
c0018d0a:	e8 89 7b fe ff       	call   c0000898 <strcmp>
c0018d0f:	83 c4 10             	add    esp,0x10
c0018d12:	85 c0                	test   eax,eax
c0018d14:	75 0f                	jne    c0018d25 <CPU::detectFeatures()+0x273>
c0018d16:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018d20:	e9 58 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018d25:	51                   	push   ecx
c0018d26:	51                   	push   ecx
c0018d27:	68 fe b6 02 c0       	push   0xc002b6fe
c0018d2c:	55                   	push   ebp
c0018d2d:	e8 66 7b fe ff       	call   c0000898 <strcmp>
c0018d32:	83 c4 10             	add    esp,0x10
c0018d35:	85 c0                	test   eax,eax
c0018d37:	75 0f                	jne    c0018d48 <CPU::detectFeatures()+0x296>
c0018d39:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018d43:	e9 35 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018d48:	52                   	push   edx
c0018d49:	52                   	push   edx
c0018d4a:	68 4c b7 02 c0       	push   0xc002b74c
c0018d4f:	55                   	push   ebp
c0018d50:	e8 43 7b fe ff       	call   c0000898 <strcmp>
c0018d55:	83 c4 10             	add    esp,0x10
c0018d58:	85 c0                	test   eax,eax
c0018d5a:	75 0f                	jne    c0018d6b <CPU::detectFeatures()+0x2b9>
c0018d5c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018d66:	e9 12 01 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018d6b:	50                   	push   eax
c0018d6c:	50                   	push   eax
c0018d6d:	68 59 b7 02 c0       	push   0xc002b759
c0018d72:	55                   	push   ebp
c0018d73:	e8 20 7b fe ff       	call   c0000898 <strcmp>
c0018d78:	83 c4 10             	add    esp,0x10
c0018d7b:	85 c0                	test   eax,eax
c0018d7d:	75 0f                	jne    c0018d8e <CPU::detectFeatures()+0x2dc>
c0018d7f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018d89:	e9 ef 00 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018d8e:	50                   	push   eax
c0018d8f:	50                   	push   eax
c0018d90:	68 66 b7 02 c0       	push   0xc002b766
c0018d95:	55                   	push   ebp
c0018d96:	e8 fd 7a fe ff       	call   c0000898 <strcmp>
c0018d9b:	83 c4 10             	add    esp,0x10
c0018d9e:	85 c0                	test   eax,eax
c0018da0:	75 0f                	jne    c0018db1 <CPU::detectFeatures()+0x2ff>
c0018da2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018dac:	e9 cc 00 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018db1:	50                   	push   eax
c0018db2:	50                   	push   eax
c0018db3:	68 73 b7 02 c0       	push   0xc002b773
c0018db8:	55                   	push   ebp
c0018db9:	e8 da 7a fe ff       	call   c0000898 <strcmp>
c0018dbe:	83 c4 10             	add    esp,0x10
c0018dc1:	85 c0                	test   eax,eax
c0018dc3:	75 0f                	jne    c0018dd4 <CPU::detectFeatures()+0x322>
c0018dc5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018dcf:	e9 a9 00 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018dd4:	50                   	push   eax
c0018dd5:	50                   	push   eax
c0018dd6:	68 80 b7 02 c0       	push   0xc002b780
c0018ddb:	55                   	push   ebp
c0018ddc:	e8 b7 7a fe ff       	call   c0000898 <strcmp>
c0018de1:	83 c4 10             	add    esp,0x10
c0018de4:	85 c0                	test   eax,eax
c0018de6:	75 0f                	jne    c0018df7 <CPU::detectFeatures()+0x345>
c0018de8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018df2:	e9 86 00 00 00       	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018df7:	50                   	push   eax
c0018df8:	50                   	push   eax
c0018df9:	68 8d b7 02 c0       	push   0xc002b78d
c0018dfe:	55                   	push   ebp
c0018dff:	e8 94 7a fe ff       	call   c0000898 <strcmp>
c0018e04:	83 c4 10             	add    esp,0x10
c0018e07:	85 c0                	test   eax,eax
c0018e09:	75 0c                	jne    c0018e17 <CPU::detectFeatures()+0x365>
c0018e0b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018e15:	eb 66                	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018e17:	50                   	push   eax
c0018e18:	50                   	push   eax
c0018e19:	68 9a b7 02 c0       	push   0xc002b79a
c0018e1e:	55                   	push   ebp
c0018e1f:	e8 74 7a fe ff       	call   c0000898 <strcmp>
c0018e24:	83 c4 10             	add    esp,0x10
c0018e27:	85 c0                	test   eax,eax
c0018e29:	75 0c                	jne    c0018e37 <CPU::detectFeatures()+0x385>
c0018e2b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018e35:	eb 46                	jmp    c0018e7d <CPU::detectFeatures()+0x3cb>
c0018e37:	57                   	push   edi
c0018e38:	57                   	push   edi
c0018e39:	68 a7 b7 02 c0       	push   0xc002b7a7
c0018e3e:	55                   	push   ebp
c0018e3f:	e8 54 7a fe ff       	call   c0000898 <strcmp>
c0018e44:	83 c4 10             	add    esp,0x10
c0018e47:	85 c0                	test   eax,eax
c0018e49:	74 e0                	je     c0018e2b <CPU::detectFeatures()+0x379>
c0018e4b:	56                   	push   esi
c0018e4c:	56                   	push   esi
c0018e4d:	68 b4 b7 02 c0       	push   0xc002b7b4
c0018e52:	55                   	push   ebp
c0018e53:	e8 40 7a fe ff       	call   c0000898 <strcmp>
c0018e58:	83 c4 10             	add    esp,0x10
c0018e5b:	85 c0                	test   eax,eax
c0018e5d:	74 cc                	je     c0018e2b <CPU::detectFeatures()+0x379>
c0018e5f:	51                   	push   ecx
c0018e60:	51                   	push   ecx
c0018e61:	68 c1 b7 02 c0       	push   0xc002b7c1
c0018e66:	55                   	push   ebp
c0018e67:	e8 2c 7a fe ff       	call   c0000898 <strcmp>
c0018e6c:	83 c4 10             	add    esp,0x10
c0018e6f:	85 c0                	test   eax,eax
c0018e71:	74 b8                	je     c0018e2b <CPU::detectFeatures()+0x379>
c0018e73:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018e7d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018e82:	0f 86 be 00 00 00    	jbe    c0018f46 <CPU::detectFeatures()+0x494>
c0018e88:	83 ec 0c             	sub    esp,0xc
c0018e8b:	68 80 00 00 00       	push   0x80
c0018e90:	e8 31 fb ff ff       	call   c00189c6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e95:	83 e0 01             	and    eax,0x1
c0018e98:	c1 e0 06             	shl    eax,0x6
c0018e9b:	88 c2                	mov    dl,al
c0018e9d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ea3:	83 e0 bf             	and    eax,0xffffffbf
c0018ea6:	09 d0                	or     eax,edx
c0018ea8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eae:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018eb5:	e8 0c fb ff ff       	call   c00189c6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018eba:	83 e0 01             	and    eax,0x1
c0018ebd:	c1 e0 04             	shl    eax,0x4
c0018ec0:	88 c2                	mov    dl,al
c0018ec2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ec8:	83 e0 ef             	and    eax,0xffffffef
c0018ecb:	09 d0                	or     eax,edx
c0018ecd:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ed3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018eda:	e8 e7 fa ff ff       	call   c00189c6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018edf:	c1 e0 07             	shl    eax,0x7
c0018ee2:	88 c2                	mov    dl,al
c0018ee4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eea:	83 e0 7f             	and    eax,0x7f
c0018eed:	09 d0                	or     eax,edx
c0018eef:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ef5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018efc:	e8 f3 fa ff ff       	call   c00189f4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f01:	83 e0 01             	and    eax,0x1
c0018f04:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f0b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f11:	83 e0 f7             	and    eax,0xfffffff7
c0018f14:	09 d0                	or     eax,edx
c0018f16:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f1c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018f23:	e8 cc fa ff ff       	call   c00189f4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f28:	83 c4 10             	add    esp,0x10
c0018f2b:	83 e0 01             	and    eax,0x1
c0018f2e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f35:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f3b:	83 e0 fb             	and    eax,0xfffffffb
c0018f3e:	09 d0                	or     eax,edx
c0018f40:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f46:	83 ec 0c             	sub    esp,0xc
c0018f49:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f4d:	50                   	push   eax
c0018f4e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f52:	50                   	push   eax
c0018f53:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018f57:	56                   	push   esi
c0018f58:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f5c:	50                   	push   eax
c0018f5d:	6a 01                	push   0x1
c0018f5f:	e8 82 f9 ff ff       	call   c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f64:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018f68:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f6e:	88 ca                	mov    dl,cl
c0018f70:	83 e0 f0             	and    eax,0xfffffff0
c0018f73:	83 e2 0f             	and    edx,0xf
c0018f76:	09 d0                	or     eax,edx
c0018f78:	88 ca                	mov    dl,cl
c0018f7a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018f80:	c0 ea 04             	shr    dl,0x4
c0018f83:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018f87:	0f b6 c2             	movzx  eax,dl
c0018f8a:	83 c4 20             	add    esp,0x20
c0018f8d:	c1 e0 06             	shl    eax,0x6
c0018f90:	89 c7                	mov    edi,eax
c0018f92:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f98:	66 25 3f c0          	and    ax,0xc03f
c0018f9c:	09 f8                	or     eax,edi
c0018f9e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018fa5:	89 c8                	mov    eax,ecx
c0018fa7:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018fae:	c1 e8 08             	shr    eax,0x8
c0018fb1:	83 e5 3f             	and    ebp,0x3f
c0018fb4:	83 e0 0f             	and    eax,0xf
c0018fb7:	89 c7                	mov    edi,eax
c0018fb9:	c1 e7 06             	shl    edi,0x6
c0018fbc:	09 ef                	or     edi,ebp
c0018fbe:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018fc5:	89 fa                	mov    edx,edi
c0018fc7:	83 e5 c0             	and    ebp,0xffffffc0
c0018fca:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018fd0:	88 c2                	mov    dl,al
c0018fd2:	c0 ea 02             	shr    dl,0x2
c0018fd5:	89 d7                	mov    edi,edx
c0018fd7:	09 ef                	or     edi,ebp
c0018fd9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018fdf:	89 fa                	mov    edx,edi
c0018fe1:	83 e5 cf             	and    ebp,0xffffffcf
c0018fe4:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018fea:	89 cf                	mov    edi,ecx
c0018fec:	c1 ef 0c             	shr    edi,0xc
c0018fef:	83 e7 03             	and    edi,0x3
c0018ff2:	c1 e7 04             	shl    edi,0x4
c0018ff5:	09 ef                	or     edi,ebp
c0018ff7:	3c 06                	cmp    al,0x6
c0018ff9:	89 fa                	mov    edx,edi
c0018ffb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019001:	74 04                	je     c0019007 <CPU::detectFeatures()+0x555>
c0019003:	3c 0f                	cmp    al,0xf
c0019005:	75 5c                	jne    c0019063 <CPU::detectFeatures()+0x5b1>
c0019007:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001900b:	89 cf                	mov    edi,ecx
c001900d:	c1 ef 10             	shr    edi,0x10
c0019010:	c1 e7 04             	shl    edi,0x4
c0019013:	09 fa                	or     edx,edi
c0019015:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001901b:	0f b6 d2             	movzx  edx,dl
c001901e:	66 81 e7 3f c0       	and    di,0xc03f
c0019023:	c1 e2 06             	shl    edx,0x6
c0019026:	09 fa                	or     edx,edi
c0019028:	3c 0f                	cmp    al,0xf
c001902a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019031:	75 30                	jne    c0019063 <CPU::detectFeatures()+0x5b1>
c0019033:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019039:	c1 e9 14             	shr    ecx,0x14
c001903c:	83 e0 3f             	and    eax,0x3f
c001903f:	83 c1 0f             	add    ecx,0xf
c0019042:	88 ca                	mov    dl,cl
c0019044:	c0 e9 02             	shr    cl,0x2
c0019047:	c1 e2 06             	shl    edx,0x6
c001904a:	09 d0                	or     eax,edx
c001904c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019052:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019058:	83 e0 c0             	and    eax,0xffffffc0
c001905b:	09 c1                	or     ecx,eax
c001905d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019063:	83 ec 0c             	sub    esp,0xc
c0019066:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001906d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019071:	50                   	push   eax
c0019072:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019076:	55                   	push   ebp
c0019077:	56                   	push   esi
c0019078:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001907c:	57                   	push   edi
c001907d:	68 00 00 00 80       	push   0x80000000
c0019082:	e8 5f f8 ff ff       	call   c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019087:	83 c4 20             	add    esp,0x20
c001908a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019092:	76 22                	jbe    c00190b6 <CPU::detectFeatures()+0x604>
c0019094:	83 ec 0c             	sub    esp,0xc
c0019097:	8d 44 24 28          	lea    eax,[esp+0x28]
c001909b:	50                   	push   eax
c001909c:	55                   	push   ebp
c001909d:	56                   	push   esi
c001909e:	57                   	push   edi
c001909f:	68 01 00 00 80       	push   0x80000001
c00190a4:	e8 3d f8 ff ff       	call   c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190a9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00190b3:	83 c4 20             	add    esp,0x20
c00190b6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00190bc:	83 f8 01             	cmp    eax,0x1
c00190bf:	75 6f                	jne    c0019130 <CPU::detectFeatures()+0x67e>
c00190c1:	51                   	push   ecx
c00190c2:	51                   	push   ecx
c00190c3:	68 cd b7 02 c0       	push   0xc002b7cd
c00190c8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00190cc:	56                   	push   esi
c00190cd:	e8 3a 77 fe ff       	call   c000080c <strcpy>
c00190d2:	5f                   	pop    edi
c00190d3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190d9:	5d                   	pop    ebp
c00190da:	66 c1 e8 06          	shr    ax,0x6
c00190de:	0f b6 c0             	movzx  eax,al
c00190e1:	50                   	push   eax
c00190e2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190e8:	c1 e8 0e             	shr    eax,0xe
c00190eb:	0f b6 c0             	movzx  eax,al
c00190ee:	50                   	push   eax
c00190ef:	e8 9c f4 ff ff       	call   c0018590 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00190f4:	5a                   	pop    edx
c00190f5:	59                   	pop    ecx
c00190f6:	50                   	push   eax
c00190f7:	56                   	push   esi
c00190f8:	e8 4f 78 fe ff       	call   c000094c <strcat>
c00190fd:	5f                   	pop    edi
c00190fe:	5d                   	pop    ebp
c00190ff:	56                   	push   esi
c0019100:	53                   	push   ebx
c0019101:	e8 c6 ac ff ff       	call   c0013dcc <Device::setName(char const*)>
c0019106:	58                   	pop    eax
c0019107:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001910d:	5a                   	pop    edx
c001910e:	68 d4 b7 02 c0       	push   0xc002b7d4
c0019113:	50                   	push   eax
c0019114:	e8 7f 77 fe ff       	call   c0000898 <strcmp>
c0019119:	83 c4 10             	add    esp,0x10
c001911c:	85 c0                	test   eax,eax
c001911e:	0f 85 71 03 00 00    	jne    c0019495 <CPU::detectFeatures()+0x9e3>
c0019124:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001912b:	e9 65 03 00 00       	jmp    c0019495 <CPU::detectFeatures()+0x9e3>
c0019130:	83 f8 02             	cmp    eax,0x2
c0019133:	0f 85 b5 00 00 00    	jne    c00191ee <CPU::detectFeatures()+0x73c>
c0019139:	57                   	push   edi
c001913a:	57                   	push   edi
c001913b:	68 e6 b7 02 c0       	push   0xc002b7e6
c0019140:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019144:	56                   	push   esi
c0019145:	e8 c2 76 fe ff       	call   c000080c <strcpy>
c001914a:	5d                   	pop    ebp
c001914b:	58                   	pop    eax
c001914c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019152:	66 c1 e8 06          	shr    ax,0x6
c0019156:	0f b6 c0             	movzx  eax,al
c0019159:	50                   	push   eax
c001915a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019160:	c1 e8 0e             	shr    eax,0xe
c0019163:	0f b6 c0             	movzx  eax,al
c0019166:	50                   	push   eax
c0019167:	e8 90 f2 ff ff       	call   c00183fc <CPU::lookupAMDName(unsigned char, unsigned char)>
c001916c:	5a                   	pop    edx
c001916d:	59                   	pop    ecx
c001916e:	50                   	push   eax
c001916f:	56                   	push   esi
c0019170:	e8 d7 77 fe ff       	call   c000094c <strcat>
c0019175:	5f                   	pop    edi
c0019176:	5d                   	pop    ebp
c0019177:	56                   	push   esi
c0019178:	53                   	push   ebx
c0019179:	e8 4e ac ff ff       	call   c0013dcc <Device::setName(char const*)>
c001917e:	58                   	pop    eax
c001917f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019185:	5a                   	pop    edx
c0019186:	68 eb b7 02 c0       	push   0xc002b7eb
c001918b:	50                   	push   eax
c001918c:	e8 07 77 fe ff       	call   c0000898 <strcmp>
c0019191:	83 c4 10             	add    esp,0x10
c0019194:	85 c0                	test   eax,eax
c0019196:	75 20                	jne    c00191b8 <CPU::detectFeatures()+0x706>
c0019198:	8b 15 88 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd88
c001919e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00191a4:	a8 01                	test   al,0x1
c00191a6:	74 10                	je     c00191b8 <CPU::detectFeatures()+0x706>
c00191a8:	83 e0 fe             	and    eax,0xfffffffe
c00191ab:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00191b1:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00191b8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191be:	c1 e8 0e             	shr    eax,0xe
c00191c1:	3c 05                	cmp    al,0x5
c00191c3:	0f 85 cc 02 00 00    	jne    c0019495 <CPU::detectFeatures()+0x9e3>
c00191c9:	56                   	push   esi
c00191ca:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00191d0:	83 e0 0f             	and    eax,0xf
c00191d3:	50                   	push   eax
c00191d4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191da:	66 c1 e8 06          	shr    ax,0x6
c00191de:	0f b6 c0             	movzx  eax,al
c00191e1:	50                   	push   eax
c00191e2:	6a 05                	push   0x5
c00191e4:	e8 89 f6 ff ff       	call   c0018872 <CPU::AMD_K6_writeback(int, int, int)>
c00191e9:	e9 1f 02 00 00       	jmp    c001940d <CPU::detectFeatures()+0x95b>
c00191ee:	8d 50 fd             	lea    edx,[eax-0x3]
c00191f1:	83 fa 01             	cmp    edx,0x1
c00191f4:	76 09                	jbe    c00191ff <CPU::detectFeatures()+0x74d>
c00191f6:	83 f8 06             	cmp    eax,0x6
c00191f9:	0f 85 91 01 00 00    	jne    c0019390 <CPU::detectFeatures()+0x8de>
c00191ff:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019205:	c1 ea 0e             	shr    edx,0xe
c0019208:	80 fa 05             	cmp    dl,0x5
c001920b:	75 7b                	jne    c0019288 <CPU::detectFeatures()+0x7d6>
c001920d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019213:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019218:	66 81 fa 00 01       	cmp    dx,0x100
c001921d:	75 0c                	jne    c001922b <CPU::detectFeatures()+0x779>
c001921f:	51                   	push   ecx
c0019220:	51                   	push   ecx
c0019221:	68 f2 b7 02 c0       	push   0xc002b7f2
c0019226:	e9 dc 01 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c001922b:	66 81 fa 00 02       	cmp    dx,0x200
c0019230:	75 0c                	jne    c001923e <CPU::detectFeatures()+0x78c>
c0019232:	52                   	push   edx
c0019233:	52                   	push   edx
c0019234:	68 05 b8 02 c0       	push   0xc002b805
c0019239:	e9 c9 01 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c001923e:	66 81 fa 40 02       	cmp    dx,0x240
c0019243:	75 0c                	jne    c0019251 <CPU::detectFeatures()+0x79f>
c0019245:	50                   	push   eax
c0019246:	50                   	push   eax
c0019247:	68 17 b8 02 c0       	push   0xc002b817
c001924c:	e9 b6 01 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c0019251:	83 f8 06             	cmp    eax,0x6
c0019254:	75 0c                	jne    c0019262 <CPU::detectFeatures()+0x7b0>
c0019256:	50                   	push   eax
c0019257:	50                   	push   eax
c0019258:	68 29 b8 02 c0       	push   0xc002b829
c001925d:	e9 a5 01 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c0019262:	83 f8 04             	cmp    eax,0x4
c0019265:	75 0c                	jne    c0019273 <CPU::detectFeatures()+0x7c1>
c0019267:	50                   	push   eax
c0019268:	50                   	push   eax
c0019269:	68 35 b8 02 c0       	push   0xc002b835
c001926e:	e9 94 01 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c0019273:	83 f8 03             	cmp    eax,0x3
c0019276:	0f 85 19 02 00 00    	jne    c0019495 <CPU::detectFeatures()+0x9e3>
c001927c:	50                   	push   eax
c001927d:	50                   	push   eax
c001927e:	68 3d b8 02 c0       	push   0xc002b83d
c0019283:	e9 7f 01 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c0019288:	80 fa 06             	cmp    dl,0x6
c001928b:	0f 85 db 00 00 00    	jne    c001936c <CPU::detectFeatures()+0x8ba>
c0019291:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019297:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001929c:	66 81 fa 80 01       	cmp    dx,0x180
c00192a1:	75 0c                	jne    c00192af <CPU::detectFeatures()+0x7fd>
c00192a3:	50                   	push   eax
c00192a4:	50                   	push   eax
c00192a5:	68 48 b8 02 c0       	push   0xc002b848
c00192aa:	e9 58 01 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c00192af:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00192b5:	66 f7 c1 80 ff       	test   cx,0xff80
c00192ba:	75 0c                	jne    c00192c8 <CPU::detectFeatures()+0x816>
c00192bc:	50                   	push   eax
c00192bd:	50                   	push   eax
c00192be:	68 58 b8 02 c0       	push   0xc002b858
c00192c3:	e9 3f 01 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c00192c8:	66 81 fa 40 02       	cmp    dx,0x240
c00192cd:	75 0c                	jne    c00192db <CPU::detectFeatures()+0x829>
c00192cf:	55                   	push   ebp
c00192d0:	55                   	push   ebp
c00192d1:	68 5f b8 02 c0       	push   0xc002b85f
c00192d6:	e9 2c 01 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c00192db:	66 81 fa 80 02       	cmp    dx,0x280
c00192e0:	75 0c                	jne    c00192ee <CPU::detectFeatures()+0x83c>
c00192e2:	57                   	push   edi
c00192e3:	57                   	push   edi
c00192e4:	68 68 b8 02 c0       	push   0xc002b868
c00192e9:	e9 19 01 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c00192ee:	66 81 fa 40 03       	cmp    dx,0x340
c00192f3:	74 ed                	je     c00192e2 <CPU::detectFeatures()+0x830>
c00192f5:	66 81 fa c0 03       	cmp    dx,0x3c0
c00192fa:	75 0c                	jne    c0019308 <CPU::detectFeatures()+0x856>
c00192fc:	56                   	push   esi
c00192fd:	56                   	push   esi
c00192fe:	68 6f b8 02 c0       	push   0xc002b86f
c0019303:	e9 ff 00 00 00       	jmp    c0019407 <CPU::detectFeatures()+0x955>
c0019308:	83 f8 06             	cmp    eax,0x6
c001930b:	0f 84 45 ff ff ff    	je     c0019256 <CPU::detectFeatures()+0x7a4>
c0019311:	83 f8 04             	cmp    eax,0x4
c0019314:	0f 84 4d ff ff ff    	je     c0019267 <CPU::detectFeatures()+0x7b5>
c001931a:	83 f8 03             	cmp    eax,0x3
c001931d:	0f 85 72 01 00 00    	jne    c0019495 <CPU::detectFeatures()+0x9e3>
c0019323:	51                   	push   ecx
c0019324:	51                   	push   ecx
c0019325:	68 78 b8 02 c0       	push   0xc002b878
c001932a:	53                   	push   ebx
c001932b:	e8 9c aa ff ff       	call   c0013dcc <Device::setName(char const*)>
c0019330:	b1 c1                	mov    cl,0xc1
c0019332:	88 c8                	mov    al,cl
c0019334:	e6 22                	out    0x22,al
c0019336:	e4 23                	in     al,0x23
c0019338:	88 c2                	mov    dl,al
c001933a:	88 c8                	mov    al,cl
c001933c:	e6 22                	out    0x22,al
c001933e:	88 d0                	mov    al,dl
c0019340:	83 c8 10             	or     eax,0x10
c0019343:	e6 23                	out    0x23,al
c0019345:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001934c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001934f:	89 d0                	mov    eax,edx
c0019351:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019357:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001935b:	40                   	inc    eax
c001935c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019362:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019367:	e9 a1 00 00 00       	jmp    c001940d <CPU::detectFeatures()+0x95b>
c001936c:	83 f8 06             	cmp    eax,0x6
c001936f:	0f 84 e1 fe ff ff    	je     c0019256 <CPU::detectFeatures()+0x7a4>
c0019375:	83 f8 04             	cmp    eax,0x4
c0019378:	0f 84 e9 fe ff ff    	je     c0019267 <CPU::detectFeatures()+0x7b5>
c001937e:	83 f8 03             	cmp    eax,0x3
c0019381:	0f 85 0e 01 00 00    	jne    c0019495 <CPU::detectFeatures()+0x9e3>
c0019387:	52                   	push   edx
c0019388:	52                   	push   edx
c0019389:	68 83 b8 02 c0       	push   0xc002b883
c001938e:	eb 77                	jmp    c0019407 <CPU::detectFeatures()+0x955>
c0019390:	83 f8 07             	cmp    eax,0x7
c0019393:	75 09                	jne    c001939e <CPU::detectFeatures()+0x8ec>
c0019395:	50                   	push   eax
c0019396:	50                   	push   eax
c0019397:	68 8d b8 02 c0       	push   0xc002b88d
c001939c:	eb 69                	jmp    c0019407 <CPU::detectFeatures()+0x955>
c001939e:	83 f8 0a             	cmp    eax,0xa
c00193a1:	75 09                	jne    c00193ac <CPU::detectFeatures()+0x8fa>
c00193a3:	50                   	push   eax
c00193a4:	50                   	push   eax
c00193a5:	68 98 b8 02 c0       	push   0xc002b898
c00193aa:	eb 5b                	jmp    c0019407 <CPU::detectFeatures()+0x955>
c00193ac:	83 f8 0b             	cmp    eax,0xb
c00193af:	75 09                	jne    c00193ba <CPU::detectFeatures()+0x908>
c00193b1:	50                   	push   eax
c00193b2:	50                   	push   eax
c00193b3:	68 a0 b8 02 c0       	push   0xc002b8a0
c00193b8:	eb 4d                	jmp    c0019407 <CPU::detectFeatures()+0x955>
c00193ba:	83 f8 08             	cmp    eax,0x8
c00193bd:	75 09                	jne    c00193c8 <CPU::detectFeatures()+0x916>
c00193bf:	50                   	push   eax
c00193c0:	50                   	push   eax
c00193c1:	68 a9 b8 02 c0       	push   0xc002b8a9
c00193c6:	eb 3f                	jmp    c0019407 <CPU::detectFeatures()+0x955>
c00193c8:	83 f8 09             	cmp    eax,0x9
c00193cb:	75 09                	jne    c00193d6 <CPU::detectFeatures()+0x924>
c00193cd:	50                   	push   eax
c00193ce:	50                   	push   eax
c00193cf:	68 b1 b8 02 c0       	push   0xc002b8b1
c00193d4:	eb 31                	jmp    c0019407 <CPU::detectFeatures()+0x955>
c00193d6:	83 f8 05             	cmp    eax,0x5
c00193d9:	75 09                	jne    c00193e4 <CPU::detectFeatures()+0x932>
c00193db:	50                   	push   eax
c00193dc:	50                   	push   eax
c00193dd:	68 b9 b8 02 c0       	push   0xc002b8b9
c00193e2:	eb 23                	jmp    c0019407 <CPU::detectFeatures()+0x955>
c00193e4:	83 f8 0c             	cmp    eax,0xc
c00193e7:	75 09                	jne    c00193f2 <CPU::detectFeatures()+0x940>
c00193e9:	55                   	push   ebp
c00193ea:	55                   	push   ebp
c00193eb:	68 c7 b8 02 c0       	push   0xc002b8c7
c00193f0:	eb 15                	jmp    c0019407 <CPU::detectFeatures()+0x955>
c00193f2:	83 f8 0d             	cmp    eax,0xd
c00193f5:	75 09                	jne    c0019400 <CPU::detectFeatures()+0x94e>
c00193f7:	57                   	push   edi
c00193f8:	57                   	push   edi
c00193f9:	68 d2 b8 02 c0       	push   0xc002b8d2
c00193fe:	eb 07                	jmp    c0019407 <CPU::detectFeatures()+0x955>
c0019400:	56                   	push   esi
c0019401:	56                   	push   esi
c0019402:	68 e6 b8 02 c0       	push   0xc002b8e6
c0019407:	53                   	push   ebx
c0019408:	e8 bf a9 ff ff       	call   c0013dcc <Device::setName(char const*)>
c001940d:	83 c4 10             	add    esp,0x10
c0019410:	e9 80 00 00 00       	jmp    c0019495 <CPU::detectFeatures()+0x9e3>
c0019415:	51                   	push   ecx
c0019416:	51                   	push   ecx
c0019417:	68 32 b7 02 c0       	push   0xc002b732
c001941c:	55                   	push   ebp
c001941d:	e8 ea 73 fe ff       	call   c000080c <strcpy>
c0019422:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001942c:	e8 7d 6e fe ff       	call   c00002ae <is486>
c0019431:	83 c4 10             	add    esp,0x10
c0019434:	85 c0                	test   eax,eax
c0019436:	74 2b                	je     c0019463 <CPU::detectFeatures()+0x9b1>
c0019438:	52                   	push   edx
c0019439:	52                   	push   edx
c001943a:	68 f2 b8 02 c0       	push   0xc002b8f2
c001943f:	53                   	push   ebx
c0019440:	e8 87 a9 ff ff       	call   c0013dcc <Device::setName(char const*)>
c0019445:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001944c:	0f 20 c0             	mov    eax,cr0
c001944f:	83 e0 14             	and    eax,0x14
c0019452:	83 c4 10             	add    esp,0x10
c0019455:	83 f8 04             	cmp    eax,0x4
c0019458:	75 1f                	jne    c0019479 <CPU::detectFeatures()+0x9c7>
c001945a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019461:	eb 32                	jmp    c0019495 <CPU::detectFeatures()+0x9e3>
c0019463:	50                   	push   eax
c0019464:	50                   	push   eax
c0019465:	68 fd b8 02 c0       	push   0xc002b8fd
c001946a:	53                   	push   ebx
c001946b:	e8 5c a9 ff ff       	call   c0013dcc <Device::setName(char const*)>
c0019470:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019477:	eb d3                	jmp    c001944c <CPU::detectFeatures()+0x99a>
c0019479:	e8 0b 6e fe ff       	call   c0000289 <hasLegacyFPU>
c001947e:	83 e0 01             	and    eax,0x1
c0019481:	8d 14 00             	lea    edx,[eax+eax*1]
c0019484:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001948a:	83 e0 fd             	and    eax,0xfffffffd
c001948d:	09 d0                	or     eax,edx
c001948f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019495:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001949c:	83 c4 4c             	add    esp,0x4c
c001949f:	5b                   	pop    ebx
c00194a0:	5e                   	pop    esi
c00194a1:	5f                   	pop    edi
c00194a2:	5d                   	pop    ebp
c00194a3:	c3                   	ret    

c00194a4 <CPU::setupSMEP()>:
c00194a4:	0f 20 e0             	mov    eax,cr4
c00194a7:	0d 00 00 10 00       	or     eax,0x100000
c00194ac:	0f 22 e0             	mov    cr4,eax
c00194af:	c3                   	ret    

c00194b0 <CPU::setupUMIP()>:
c00194b0:	0f 20 e0             	mov    eax,cr4
c00194b3:	80 cc 08             	or     ah,0x8
c00194b6:	0f 22 e0             	mov    cr4,eax
c00194b9:	c3                   	ret    

c00194ba <CPU::setupTSC()>:
c00194ba:	0f 20 e0             	mov    eax,cr4
c00194bd:	83 c8 04             	or     eax,0x4
c00194c0:	0f 22 e0             	mov    cr4,eax
c00194c3:	c3                   	ret    

c00194c4 <CPU::setupLargePages()>:
c00194c4:	0f 20 e0             	mov    eax,cr4
c00194c7:	83 c8 10             	or     eax,0x10
c00194ca:	0f 22 e0             	mov    cr4,eax
c00194cd:	c3                   	ret    

c00194ce <CPU::setupPAT()>:
c00194ce:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00194d3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00194da:	74 2c                	je     c0019508 <CPU::setupPAT()+0x3a>
c00194dc:	53                   	push   ebx
c00194dd:	83 ec 10             	sub    esp,0x10
c00194e0:	68 77 02 00 00       	push   0x277
c00194e5:	50                   	push   eax
c00194e6:	e8 55 56 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00194eb:	83 e2 f8             	and    edx,0xfffffff8
c00194ee:	83 ca 01             	or     edx,0x1
c00194f1:	52                   	push   edx
c00194f2:	50                   	push   eax
c00194f3:	68 77 02 00 00       	push   0x277
c00194f8:	ff 35 88 dd 02 c0    	push   DWORD PTR ds:0xc002dd88
c00194fe:	e8 69 56 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019503:	83 c4 28             	add    esp,0x28
c0019506:	5b                   	pop    ebx
c0019507:	c3                   	ret    
c0019508:	c3                   	ret    
c0019509:	90                   	nop

c001950a <CPU::setupMTRR()>:
c001950a:	c3                   	ret    
c001950b:	90                   	nop

c001950c <CPU::setupGlobalPages()>:
c001950c:	0f 20 e0             	mov    eax,cr4
c001950f:	0c 80                	or     al,0x80
c0019511:	0f 22 e0             	mov    cr4,eax
c0019514:	c3                   	ret    
c0019515:	90                   	nop

c0019516 <CPU::allowUsermodeDataAccess()>:
c0019516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001951a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019521:	74 03                	je     c0019526 <CPU::allowUsermodeDataAccess()+0x10>
c0019523:	0f 01 cb             	stac   
c0019526:	c3                   	ret    
c0019527:	90                   	nop

c0019528 <CPU::prohibitUsermodeDataAccess()>:
c0019528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001952c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019533:	74 03                	je     c0019538 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019535:	0f 01 ca             	clac   
c0019538:	c3                   	ret    
c0019539:	90                   	nop

c001953a <CPU::setupSMAP()>:
c001953a:	0f 20 e0             	mov    eax,cr4
c001953d:	0d 00 00 20 00       	or     eax,0x200000
c0019542:	0f 22 e0             	mov    cr4,eax
c0019545:	eb e1                	jmp    c0019528 <CPU::prohibitUsermodeDataAccess()>
c0019547:	90                   	nop

c0019548 <CPU::setupFeatures()>:
c0019548:	83 ec 0c             	sub    esp,0xc
c001954b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001954f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019556:	74 07                	je     c001955f <CPU::setupFeatures()+0x17>
c0019558:	52                   	push   edx
c0019559:	e8 46 ff ff ff       	call   c00194a4 <CPU::setupSMEP()>
c001955e:	58                   	pop    eax
c001955f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019566:	74 07                	je     c001956f <CPU::setupFeatures()+0x27>
c0019568:	52                   	push   edx
c0019569:	e8 cc ff ff ff       	call   c001953a <CPU::setupSMAP()>
c001956e:	58                   	pop    eax
c001956f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019576:	74 07                	je     c001957f <CPU::setupFeatures()+0x37>
c0019578:	52                   	push   edx
c0019579:	e8 32 ff ff ff       	call   c00194b0 <CPU::setupUMIP()>
c001957e:	58                   	pop    eax
c001957f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019586:	74 07                	je     c001958f <CPU::setupFeatures()+0x47>
c0019588:	52                   	push   edx
c0019589:	e8 2c ff ff ff       	call   c00194ba <CPU::setupTSC()>
c001958e:	58                   	pop    eax
c001958f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019596:	74 07                	je     c001959f <CPU::setupFeatures()+0x57>
c0019598:	52                   	push   edx
c0019599:	e8 26 ff ff ff       	call   c00194c4 <CPU::setupLargePages()>
c001959e:	59                   	pop    ecx
c001959f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00195a6:	74 07                	je     c00195af <CPU::setupFeatures()+0x67>
c00195a8:	52                   	push   edx
c00195a9:	e8 5e ff ff ff       	call   c001950c <CPU::setupGlobalPages()>
c00195ae:	58                   	pop    eax
c00195af:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00195b6:	74 0c                	je     c00195c4 <CPU::setupFeatures()+0x7c>
c00195b8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00195bc:	83 c4 0c             	add    esp,0xc
c00195bf:	e9 0a ff ff ff       	jmp    c00194ce <CPU::setupPAT()>
c00195c4:	83 c4 0c             	add    esp,0xc
c00195c7:	c3                   	ret    

c00195c8 <CPU::open(int, int, void*)>:
c00195c8:	57                   	push   edi
c00195c9:	56                   	push   esi
c00195ca:	53                   	push   ebx
c00195cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00195cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00195d3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00195d9:	83 ec 0c             	sub    esp,0xc
c00195dc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00195e2:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00195e8:	50                   	push   eax
c00195e9:	e8 40 58 ff ff       	call   c000ee2e <GDT::setup()>
c00195ee:	83 c4 0c             	add    esp,0xc
c00195f1:	6a 00                	push   0x0
c00195f3:	68 ef be ad de       	push   0xdeadbeef
c00195f8:	57                   	push   edi
c00195f9:	e8 a8 75 ff ff       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c00195fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019601:	e8 80 75 ff ff       	call   c0010b86 <TSS::flush()>
c0019606:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001960c:	89 04 24             	mov    DWORD PTR [esp],eax
c001960f:	e8 7e 5a ff ff       	call   c000f092 <IDT::setup()>
c0019614:	b8 00 04 00 00       	mov    eax,0x400
c0019619:	0f 23 f8             	mov    db7,eax
c001961c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019626:	e8 6a 63 ff ff       	call   c000f995 <Phys::allocatePage()>
c001962b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019631:	89 30                	mov    DWORD PTR [eax],esi
c0019633:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019639:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001963c:	58                   	pop    eax
c001963d:	5a                   	pop    edx
c001963e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019644:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019648:	e8 ff 86 ff ff       	call   c0011d4c <VAS::setCPUSpecific(unsigned long)>
c001964d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019650:	e8 5d f4 ff ff       	call   c0018ab2 <CPU::detectFeatures()>
c0019655:	e8 cc bb ff ff       	call   c0015226 <setupInterruptController()>
c001965a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019660:	a1 a0 dd 02 c0       	mov    eax,ds:0xc002dda0
c0019665:	83 e0 10             	and    eax,0x10
c0019668:	83 f8 01             	cmp    eax,0x1
c001966b:	19 c0                	sbb    eax,eax
c001966d:	83 e0 46             	and    eax,0x46
c0019670:	83 c0 1e             	add    eax,0x1e
c0019673:	89 04 24             	mov    DWORD PTR [esp],eax
c0019676:	e8 98 d1 ff ff       	call   c0016813 <setupTimer(int)>
c001967b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019684:	e8 bf fe ff ff       	call   c0019548 <CPU::setupFeatures()>
c0019689:	83 c4 10             	add    esp,0x10
c001968c:	31 c0                	xor    eax,eax
c001968e:	5b                   	pop    ebx
c001968f:	5e                   	pop    esi
c0019690:	5f                   	pop    edi
c0019691:	c3                   	ret    

c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019692:	57                   	push   edi
c0019693:	56                   	push   esi
c0019694:	53                   	push   ebx
c0019695:	51                   	push   ecx
c0019696:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001969a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001969d:	0f 02 c0             	lar    eax,ax
c00196a0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00196a3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00196a7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00196aa:	88 ca                	mov    dl,cl
c00196ac:	c0 ea 06             	shr    dl,0x6
c00196af:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00196b3:	89 ca                	mov    edx,ecx
c00196b5:	66 c1 ea 03          	shr    dx,0x3
c00196b9:	83 e2 07             	and    edx,0x7
c00196bc:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00196c1:	88 17                	mov    BYTE PTR [edi],dl
c00196c3:	0f 84 a6 01 00 00    	je     c001986f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00196c9:	83 e1 07             	and    ecx,0x7
c00196cc:	80 f9 04             	cmp    cl,0x4
c00196cf:	0f 84 98 00 00 00    	je     c001976d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00196d5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196da:	0f 95 c0             	setne  al
c00196dd:	80 f9 05             	cmp    cl,0x5
c00196e0:	0f 95 c2             	setne  dl
c00196e3:	08 c2                	or     dl,al
c00196e5:	74 79                	je     c0019760 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00196e7:	84 c9                	test   cl,cl
c00196e9:	75 05                	jne    c00196f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00196eb:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00196ee:	eb 3c                	jmp    c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196f0:	80 f9 01             	cmp    cl,0x1
c00196f3:	75 05                	jne    c00196fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00196f5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196f8:	eb 32                	jmp    c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196fa:	80 f9 02             	cmp    cl,0x2
c00196fd:	75 05                	jne    c0019704 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00196ff:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019702:	eb 28                	jmp    c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019704:	31 c0                	xor    eax,eax
c0019706:	80 f9 03             	cmp    cl,0x3
c0019709:	75 05                	jne    c0019710 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001970b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001970e:	eb 1c                	jmp    c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019710:	80 f9 05             	cmp    cl,0x5
c0019713:	75 05                	jne    c001971a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019715:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019718:	eb 12                	jmp    c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001971a:	80 f9 06             	cmp    cl,0x6
c001971d:	75 05                	jne    c0019724 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001971f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019722:	eb 08                	jmp    c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019724:	80 f9 07             	cmp    cl,0x7
c0019727:	75 03                	jne    c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019729:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001972c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019731:	75 10                	jne    c0019743 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019733:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019737:	b9 03 00 00 00       	mov    ecx,0x3
c001973c:	01 d0                	add    eax,edx
c001973e:	e9 37 01 00 00       	jmp    c001987a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019743:	b9 02 00 00 00       	mov    ecx,0x2
c0019748:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001974d:	0f 85 27 01 00 00    	jne    c001987a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019753:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019756:	b9 06 00 00 00       	mov    ecx,0x6
c001975b:	e9 1a 01 00 00       	jmp    c001987a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019760:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019763:	b9 06 00 00 00       	mov    ecx,0x6
c0019768:	e9 0f 01 00 00       	jmp    c001987c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001976d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019770:	88 ca                	mov    dl,cl
c0019772:	c0 ea 06             	shr    dl,0x6
c0019775:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019779:	89 ca                	mov    edx,ecx
c001977b:	66 c1 ea 03          	shr    dx,0x3
c001977f:	83 e2 07             	and    edx,0x7
c0019782:	80 e1 07             	and    cl,0x7
c0019785:	75 05                	jne    c001978c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019787:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001978a:	eb 4c                	jmp    c00197d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001978c:	80 f9 01             	cmp    cl,0x1
c001978f:	75 05                	jne    c0019796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019791:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019794:	eb 42                	jmp    c00197d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019796:	80 f9 02             	cmp    cl,0x2
c0019799:	75 05                	jne    c00197a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001979b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001979e:	eb 38                	jmp    c00197d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197a0:	80 f9 03             	cmp    cl,0x3
c00197a3:	75 05                	jne    c00197aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00197a5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00197a8:	eb 2e                	jmp    c00197d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197aa:	80 f9 04             	cmp    cl,0x4
c00197ad:	75 12                	jne    c00197c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00197af:	f6 c4 60             	test   ah,0x60
c00197b2:	75 08                	jne    c00197bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00197b4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00197b7:	8d 78 14             	lea    edi,[eax+0x14]
c00197ba:	eb 1c                	jmp    c00197d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197bc:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00197bf:	eb 17                	jmp    c00197d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197c1:	80 f9 05             	cmp    cl,0x5
c00197c4:	75 05                	jne    c00197cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00197c6:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00197c9:	eb 0d                	jmp    c00197d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197cb:	80 f9 06             	cmp    cl,0x6
c00197ce:	75 05                	jne    c00197d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00197d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00197d3:	eb 03                	jmp    c00197d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197d5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00197d8:	84 d2                	test   dl,dl
c00197da:	75 05                	jne    c00197e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00197dc:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00197df:	eb 3c                	jmp    c001981d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197e1:	80 fa 01             	cmp    dl,0x1
c00197e4:	75 05                	jne    c00197eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00197e6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00197e9:	eb 32                	jmp    c001981d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197eb:	80 fa 02             	cmp    dl,0x2
c00197ee:	75 05                	jne    c00197f5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00197f0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00197f3:	eb 28                	jmp    c001981d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197f5:	80 fa 03             	cmp    dl,0x3
c00197f8:	75 05                	jne    c00197ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00197fa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00197fd:	eb 1e                	jmp    c001981d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197ff:	31 c0                	xor    eax,eax
c0019801:	80 fa 04             	cmp    dl,0x4
c0019804:	74 17                	je     c001981d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019806:	80 fa 05             	cmp    dl,0x5
c0019809:	75 05                	jne    c0019810 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001980b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001980e:	eb 0d                	jmp    c001981d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019810:	80 fa 06             	cmp    dl,0x6
c0019813:	75 05                	jne    c001981a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019815:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019818:	eb 03                	jmp    c001981d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001981a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001981d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019822:	0f 94 c2             	sete   dl
c0019825:	80 f9 05             	cmp    cl,0x5
c0019828:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001982c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019831:	d3 e0                	shl    eax,cl
c0019833:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019837:	74 0a                	je     c0019843 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019839:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001983c:	b9 07 00 00 00       	mov    ecx,0x7
c0019841:	eb 37                	jmp    c001987a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019843:	01 f8                	add    eax,edi
c0019845:	b9 03 00 00 00       	mov    ecx,0x3
c001984a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001984f:	74 2b                	je     c001987c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019851:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019856:	75 0d                	jne    c0019865 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019858:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001985c:	01 c8                	add    eax,ecx
c001985e:	b9 04 00 00 00       	mov    ecx,0x4
c0019863:	eb 17                	jmp    c001987c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019865:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019868:	b9 07 00 00 00       	mov    ecx,0x7
c001986d:	eb 0d                	jmp    c001987c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001986f:	b9 02 00 00 00       	mov    ecx,0x2
c0019874:	b2 01                	mov    dl,0x1
c0019876:	31 c0                	xor    eax,eax
c0019878:	eb 02                	jmp    c001987c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001987a:	31 d2                	xor    edx,edx
c001987c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019880:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019882:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019886:	88 11                	mov    BYTE PTR [ecx],dl
c0019888:	5a                   	pop    edx
c0019889:	5b                   	pop    ebx
c001988a:	5e                   	pop    esi
c001988b:	5f                   	pop    edi
c001988c:	c3                   	ret    

c001988d <Krnl::smpEntry()>:
c001988d:	eb fe                	jmp    c001988d <Krnl::smpEntry()>

c001988f <Krnl::startCPU(int)>:
c001988f:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0019894:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001989b:	0f 84 36 01 00 00    	je     c00199d7 <Krnl::startCPU(int)+0x148>
c00198a1:	53                   	push   ebx
c00198a2:	83 ec 10             	sub    esp,0x10
c00198a5:	fa                   	cli    
c00198a6:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c00198ac:	6a 1b                	push   0x1b
c00198ae:	ff 35 88 dd 02 c0    	push   DWORD PTR ds:0xc002dd88
c00198b4:	e8 87 52 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00198b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00198be:	89 c3                	mov    ebx,eax
c00198c0:	58                   	pop    eax
c00198c1:	5a                   	pop    edx
c00198c2:	53                   	push   ebx
c00198c3:	68 34 b9 02 c0       	push   0xc002b934
c00198c8:	e8 d0 8e ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00198cd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00198d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198db:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00198e5:	c1 e0 18             	shl    eax,0x18
c00198e8:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00198ee:	83 c4 10             	add    esp,0x10
c00198f1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00198f7:	09 c2                	or     edx,eax
c00198f9:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00198ff:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019905:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001990b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019911:	80 cd c5             	or     ch,0xc5
c0019914:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001991a:	f3 90                	pause  
c001991c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001991e:	0f ba e1 0c          	bt     ecx,0xc
c0019922:	72 f6                	jb     c001991a <Krnl::startCPU(int)+0x8b>
c0019924:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001992a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019930:	09 c1                	or     ecx,eax
c0019932:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019938:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001993e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019944:	80 cd 85             	or     ch,0x85
c0019947:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001994d:	f3 90                	pause  
c001994f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019951:	0f ba e1 0c          	bt     ecx,0xc
c0019955:	72 f6                	jb     c001994d <Krnl::startCPU(int)+0xbe>
c0019957:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019961:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019967:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001996d:	09 c1                	or     ecx,eax
c001996f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019975:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001997b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019981:	81 c9 02 06 00 00    	or     ecx,0x602
c0019987:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001998d:	f3 90                	pause  
c001998f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019991:	0f ba e1 0c          	bt     ecx,0xc
c0019995:	72 f6                	jb     c001998d <Krnl::startCPU(int)+0xfe>
c0019997:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00199a1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00199a7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00199ad:	09 c8                	or     eax,ecx
c00199af:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00199b5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00199bb:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00199c0:	0d 02 06 00 00       	or     eax,0x602
c00199c5:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00199cb:	f3 90                	pause  
c00199cd:	8b 02                	mov    eax,DWORD PTR [edx]
c00199cf:	0f ba e0 0c          	bt     eax,0xc
c00199d3:	72 f6                	jb     c00199cb <Krnl::startCPU(int)+0x13c>
c00199d5:	eb fe                	jmp    c00199d5 <Krnl::startCPU(int)+0x146>
c00199d7:	c3                   	ret    

c00199d8 <Krnl::startCPUs()>:
c00199d8:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00199dd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00199e3:	88 c2                	mov    dl,al
c00199e5:	83 e2 0a             	and    edx,0xa
c00199e8:	80 fa 0a             	cmp    dl,0xa
c00199eb:	75 09                	jne    c00199f6 <Krnl::startCPUs()+0x1e>
c00199ed:	a8 01                	test   al,0x1
c00199ef:	74 05                	je     c00199f6 <Krnl::startCPUs()+0x1e>
c00199f1:	e9 a5 67 fe ff       	jmp    c000019b <prepareTramp>
c00199f6:	c3                   	ret    
c00199f7:	90                   	nop

c00199f8 <EnvVarContainer::getEnv(char const*)>:
c00199f8:	57                   	push   edi
c00199f9:	56                   	push   esi
c00199fa:	53                   	push   ebx
c00199fb:	31 db                	xor    ebx,ebx
c00199fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a01:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019a03:	7e 2b                	jle    c0019a30 <EnvVarContainer::getEnv(char const*)+0x38>
c0019a05:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019a0c:	50                   	push   eax
c0019a0d:	50                   	push   eax
c0019a0e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a11:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019a14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019a18:	e8 7b 6e fe ff       	call   c0000898 <strcmp>
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	85 c0                	test   eax,eax
c0019a22:	75 09                	jne    c0019a2d <EnvVarContainer::getEnv(char const*)+0x35>
c0019a24:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a27:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019a2b:	eb 05                	jmp    c0019a32 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019a2d:	43                   	inc    ebx
c0019a2e:	eb d1                	jmp    c0019a01 <EnvVarContainer::getEnv(char const*)+0x9>
c0019a30:	31 c0                	xor    eax,eax
c0019a32:	5b                   	pop    ebx
c0019a33:	5e                   	pop    esi
c0019a34:	5f                   	pop    edi
c0019a35:	c3                   	ret    

c0019a36 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019a36:	55                   	push   ebp
c0019a37:	57                   	push   edi
c0019a38:	56                   	push   esi
c0019a39:	53                   	push   ebx
c0019a3a:	83 ec 28             	sub    esp,0x28
c0019a3d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019a41:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019a45:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019a49:	56                   	push   esi
c0019a4a:	e8 1d 6d fe ff       	call   c000076c <strlen>
c0019a4f:	40                   	inc    eax
c0019a50:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a53:	e8 41 5b ff ff       	call   c000f599 <malloc>
c0019a58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a5f:	e8 08 6d fe ff       	call   c000076c <strlen>
c0019a64:	40                   	inc    eax
c0019a65:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a68:	e8 2c 5b ff ff       	call   c000f599 <malloc>
c0019a6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a74:	e8 f3 6c fe ff       	call   c000076c <strlen>
c0019a79:	83 c4 0c             	add    esp,0xc
c0019a7c:	40                   	inc    eax
c0019a7d:	50                   	push   eax
c0019a7e:	6a 00                	push   0x0
c0019a80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019a84:	e8 c7 6c fe ff       	call   c0000750 <memset>
c0019a89:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a8c:	e8 db 6c fe ff       	call   c000076c <strlen>
c0019a91:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019a95:	8d 48 01             	lea    ecx,[eax+0x1]
c0019a98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a9d:	89 de                	mov    esi,ebx
c0019a9f:	e8 c8 6c fe ff       	call   c000076c <strlen>
c0019aa4:	83 c4 0c             	add    esp,0xc
c0019aa7:	40                   	inc    eax
c0019aa8:	50                   	push   eax
c0019aa9:	6a 00                	push   0x0
c0019aab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aaf:	e8 9c 6c fe ff       	call   c0000750 <memset>
c0019ab4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ab7:	e8 b0 6c fe ff       	call   c000076c <strlen>
c0019abc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ac0:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ac3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ac5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ac8:	40                   	inc    eax
c0019ac9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019acc:	c1 e0 03             	shl    eax,0x3
c0019acf:	5a                   	pop    edx
c0019ad0:	59                   	pop    ecx
c0019ad1:	50                   	push   eax
c0019ad2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ad5:	e8 ab 5a ff ff       	call   c000f585 <realloc>
c0019ada:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019ade:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ae1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019ae4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019ae8:	b9 08 00 00 00       	mov    ecx,0x8
c0019aed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019aef:	83 c4 2c             	add    esp,0x2c
c0019af2:	5b                   	pop    ebx
c0019af3:	5e                   	pop    esi
c0019af4:	5f                   	pop    edi
c0019af5:	5d                   	pop    ebp
c0019af6:	c3                   	ret    
c0019af7:	90                   	nop

c0019af8 <EnvVarContainer::deleteEnv(char const*)>:
c0019af8:	c3                   	ret    
c0019af9:	90                   	nop

c0019afa <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019afa:	55                   	push   ebp
c0019afb:	57                   	push   edi
c0019afc:	56                   	push   esi
c0019afd:	53                   	push   ebx
c0019afe:	81 ec 38 01 00 00    	sub    esp,0x138
c0019b04:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019b0b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019b12:	68 14 01 00 00       	push   0x114
c0019b17:	e8 7d 5a ff ff       	call   c000f599 <malloc>
c0019b1c:	83 c4 0c             	add    esp,0xc
c0019b1f:	89 c3                	mov    ebx,eax
c0019b21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019b24:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019b2b:	50                   	push   eax
c0019b2c:	e8 cb 91 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c0019b31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b34:	e8 95 94 ff ff       	call   c0012fce <File::exists()>
c0019b39:	83 c4 10             	add    esp,0x10
c0019b3c:	84 c0                	test   al,al
c0019b3e:	75 31                	jne    c0019b71 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019b40:	50                   	push   eax
c0019b41:	50                   	push   eax
c0019b42:	6a 12                	push   0x12
c0019b44:	53                   	push   ebx
c0019b45:	e8 16 92 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c0019b4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b4c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019b4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b52:	e8 15 6c fe ff       	call   c000076c <strlen>
c0019b57:	5a                   	pop    edx
c0019b58:	31 d2                	xor    edx,edx
c0019b5a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019b5e:	51                   	push   ecx
c0019b5f:	56                   	push   esi
c0019b60:	52                   	push   edx
c0019b61:	50                   	push   eax
c0019b62:	53                   	push   ebx
c0019b63:	ff d7                	call   edi
c0019b65:	83 c4 14             	add    esp,0x14
c0019b68:	53                   	push   ebx
c0019b69:	e8 50 92 ff ff       	call   c0012dbe <File::close()>
c0019b6e:	83 c4 10             	add    esp,0x10
c0019b71:	56                   	push   esi
c0019b72:	31 f6                	xor    esi,esi
c0019b74:	68 00 01 00 00       	push   0x100
c0019b79:	6a 00                	push   0x0
c0019b7b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b7f:	50                   	push   eax
c0019b80:	e8 cb 6b fe ff       	call   c0000750 <memset>
c0019b85:	5f                   	pop    edi
c0019b86:	58                   	pop    eax
c0019b87:	6a 01                	push   0x1
c0019b89:	53                   	push   ebx
c0019b8a:	e8 d1 91 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c0019b8f:	83 c4 10             	add    esp,0x10
c0019b92:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b9a:	83 ec 0c             	sub    esp,0xc
c0019b9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b9f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ba3:	51                   	push   ecx
c0019ba4:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019ba8:	52                   	push   edx
c0019ba9:	6a 00                	push   0x0
c0019bab:	6a 01                	push   0x1
c0019bad:	53                   	push   ebx
c0019bae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bb1:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019bb5:	83 c4 20             	add    esp,0x20
c0019bb8:	3c 0d                	cmp    al,0xd
c0019bba:	0f 84 09 01 00 00    	je     c0019cc9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019bc0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019bc5:	0f 84 ef 00 00 00    	je     c0019cba <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019bcb:	3c 0a                	cmp    al,0xa
c0019bcd:	74 13                	je     c0019be2 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019bcf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019bd4:	74 0c                	je     c0019be2 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019bd6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019bdc:	0f 8e d8 00 00 00    	jle    c0019cba <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019be2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019be6:	83 ec 0c             	sub    esp,0xc
c0019be9:	8d 78 01             	lea    edi,[eax+0x1]
c0019bec:	57                   	push   edi
c0019bed:	e8 a7 59 ff ff       	call   c000f599 <malloc>
c0019bf2:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019bf6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019bfa:	8d 56 04             	lea    edx,[esi+0x4]
c0019bfd:	89 14 24             	mov    DWORD PTR [esp],edx
c0019c00:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019c04:	e8 90 59 ff ff       	call   c000f599 <malloc>
c0019c09:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019c0d:	83 c4 0c             	add    esp,0xc
c0019c10:	57                   	push   edi
c0019c11:	6a 00                	push   0x0
c0019c13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019c17:	e8 34 6b fe ff       	call   c0000750 <memset>
c0019c1c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019c20:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019c24:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019c28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c2a:	83 c4 0c             	add    esp,0xc
c0019c2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c31:	52                   	push   edx
c0019c32:	6a 00                	push   0x0
c0019c34:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c38:	e8 13 6b fe ff       	call   c0000750 <memset>
c0019c3d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019c41:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019c45:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c48:	e8 1f 6b fe ff       	call   c000076c <strlen>
c0019c4d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019c51:	89 c1                	mov    ecx,eax
c0019c53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019c58:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019c5b:	40                   	inc    eax
c0019c5c:	83 c4 10             	add    esp,0x10
c0019c5f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019c62:	85 d2                	test   edx,edx
c0019c64:	75 0c                	jne    c0019c72 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019c66:	83 ec 0c             	sub    esp,0xc
c0019c69:	6a 08                	push   0x8
c0019c6b:	e8 29 59 ff ff       	call   c000f599 <malloc>
c0019c70:	eb 0c                	jmp    c0019c7e <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019c72:	c1 e0 03             	shl    eax,0x3
c0019c75:	51                   	push   ecx
c0019c76:	51                   	push   ecx
c0019c77:	50                   	push   eax
c0019c78:	52                   	push   edx
c0019c79:	e8 07 59 ff ff       	call   c000f585 <realloc>
c0019c7e:	83 c4 10             	add    esp,0x10
c0019c81:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019c84:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019c87:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019c8a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019c8e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019c92:	b9 08 00 00 00       	mov    ecx,0x8
c0019c97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c99:	31 f6                	xor    esi,esi
c0019c9b:	50                   	push   eax
c0019c9c:	68 00 01 00 00       	push   0x100
c0019ca1:	6a 00                	push   0x0
c0019ca3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ca7:	50                   	push   eax
c0019ca8:	e8 a3 6a fe ff       	call   c0000750 <memset>
c0019cad:	83 c4 10             	add    esp,0x10
c0019cb0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019cb8:	eb 0f                	jmp    c0019cc9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019cba:	3c 3d                	cmp    al,0x3d
c0019cbc:	74 07                	je     c0019cc5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019cbe:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019cc2:	46                   	inc    esi
c0019cc3:	eb 04                	jmp    c0019cc9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019cc5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019cc9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019cce:	0f 85 c6 fe ff ff    	jne    c0019b9a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019cd4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019cda:	5b                   	pop    ebx
c0019cdb:	5e                   	pop    esi
c0019cdc:	5f                   	pop    edi
c0019cdd:	5d                   	pop    ebp
c0019cde:	c3                   	ret    
c0019cdf:	90                   	nop

c0019ce0 <EnvVarContainer::__loadSystem()>:
c0019ce0:	83 ec 10             	sub    esp,0x10
c0019ce3:	68 c0 d2 02 c0       	push   0xc002d2c0
c0019ce8:	68 45 b9 02 c0       	push   0xc002b945
c0019ced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019cf1:	e8 04 fe ff ff       	call   c0019afa <EnvVarContainer::loadFrom(char const*, char const*)>
c0019cf6:	83 c4 1c             	add    esp,0x1c
c0019cf9:	c3                   	ret    

c0019cfa <EnvVarContainer::__loadUser()>:
c0019cfa:	c3                   	ret    
c0019cfb:	90                   	nop

c0019cfc <EnvVarContainer::EnvVarContainer(Process*)>:
c0019cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019d11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019d1c:	90                   	nop
c0019d1d:	c3                   	ret    

c0019d1e <EnvVarContainer::~EnvVarContainer()>:
c0019d1e:	83 ec 0c             	sub    esp,0xc
c0019d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019d28:	85 c0                	test   eax,eax
c0019d2a:	74 1d                	je     c0019d49 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d32:	85 c0                	test   eax,eax
c0019d34:	74 13                	je     c0019d49 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019d3d:	83 ec 0c             	sub    esp,0xc
c0019d40:	50                   	push   eax
c0019d41:	e8 63 58 ff ff       	call   c000f5a9 <free>
c0019d46:	83 c4 10             	add    esp,0x10
c0019d49:	90                   	nop
c0019d4a:	83 c4 0c             	add    esp,0xc
c0019d4d:	c3                   	ret    

c0019d4e <Krnl::getEnv(Process*, char const*)>:
c0019d4e:	53                   	push   ebx
c0019d4f:	83 ec 08             	sub    esp,0x8
c0019d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d5a:	39 05 b0 f2 02 c0    	cmp    DWORD PTR ds:0xc002f2b0,eax
c0019d60:	74 04                	je     c0019d66 <Krnl::getEnv(Process*, char const*)+0x18>
c0019d62:	85 c0                	test   eax,eax
c0019d64:	75 0b                	jne    c0019d71 <Krnl::getEnv(Process*, char const*)+0x23>
c0019d66:	a1 94 e8 02 c0       	mov    eax,ds:0xc002e894
c0019d6b:	85 c0                	test   eax,eax
c0019d6d:	75 19                	jne    c0019d88 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019d6f:	eb 27                	jmp    c0019d98 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019d71:	52                   	push   edx
c0019d72:	52                   	push   edx
c0019d73:	53                   	push   ebx
c0019d74:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019d7a:	e8 79 fc ff ff       	call   c00199f8 <EnvVarContainer::getEnv(char const*)>
c0019d7f:	83 c4 10             	add    esp,0x10
c0019d82:	85 c0                	test   eax,eax
c0019d84:	75 28                	jne    c0019dae <Krnl::getEnv(Process*, char const*)+0x60>
c0019d86:	eb de                	jmp    c0019d66 <Krnl::getEnv(Process*, char const*)+0x18>
c0019d88:	52                   	push   edx
c0019d89:	52                   	push   edx
c0019d8a:	53                   	push   ebx
c0019d8b:	50                   	push   eax
c0019d8c:	e8 67 fc ff ff       	call   c00199f8 <EnvVarContainer::getEnv(char const*)>
c0019d91:	83 c4 10             	add    esp,0x10
c0019d94:	85 c0                	test   eax,eax
c0019d96:	75 16                	jne    c0019dae <Krnl::getEnv(Process*, char const*)+0x60>
c0019d98:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019d9c:	a1 98 e8 02 c0       	mov    eax,ds:0xc002e898
c0019da1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019da5:	83 c4 08             	add    esp,0x8
c0019da8:	5b                   	pop    ebx
c0019da9:	e9 4a fc ff ff       	jmp    c00199f8 <EnvVarContainer::getEnv(char const*)>
c0019dae:	83 c4 08             	add    esp,0x8
c0019db1:	5b                   	pop    ebx
c0019db2:	c3                   	ret    

c0019db3 <Krnl::setEnvSystem(char const*, char const*)>:
c0019db3:	83 ec 10             	sub    esp,0x10
c0019db6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019dba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019dbe:	ff 35 98 e8 02 c0    	push   DWORD PTR ds:0xc002e898
c0019dc4:	e8 6d fc ff ff       	call   c0019a36 <EnvVarContainer::setEnv(char const*, char const*)>
c0019dc9:	83 c4 1c             	add    esp,0x1c
c0019dcc:	c3                   	ret    

c0019dcd <Krnl::setEnvUser(char const*, char const*)>:
c0019dcd:	a1 94 e8 02 c0       	mov    eax,ds:0xc002e894
c0019dd2:	85 c0                	test   eax,eax
c0019dd4:	74 15                	je     c0019deb <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019dd6:	83 ec 10             	sub    esp,0x10
c0019dd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ddd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019de1:	50                   	push   eax
c0019de2:	e8 4f fc ff ff       	call   c0019a36 <EnvVarContainer::setEnv(char const*, char const*)>
c0019de7:	83 c4 1c             	add    esp,0x1c
c0019dea:	c3                   	ret    
c0019deb:	c3                   	ret    

c0019dec <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019df0:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019df6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019dfa:	e9 37 fc ff ff       	jmp    c0019a36 <EnvVarContainer::setEnv(char const*, char const*)>

c0019dff <Krnl::deleteEnvSystem(char const*)>:
c0019dff:	c3                   	ret    

c0019e00 <Krnl::deleteEnvUser(char const*)>:
c0019e00:	c3                   	ret    

c0019e01 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019e01:	c3                   	ret    

c0019e02 <Krnl::newProcessEnv(Process*)>:
c0019e02:	83 ec 28             	sub    esp,0x28
c0019e05:	6a 0c                	push   0xc
c0019e07:	e8 8d 57 ff ff       	call   c000f599 <malloc>
c0019e0c:	5a                   	pop    edx
c0019e0d:	59                   	pop    ecx
c0019e0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e12:	50                   	push   eax
c0019e13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e17:	e8 e0 fe ff ff       	call   c0019cfc <EnvVarContainer::EnvVarContainer(Process*)>
c0019e1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e20:	83 c4 2c             	add    esp,0x2c
c0019e23:	c3                   	ret    

c0019e24 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019e24:	57                   	push   edi
c0019e25:	56                   	push   esi
c0019e26:	53                   	push   ebx
c0019e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e2b:	83 ec 0c             	sub    esp,0xc
c0019e2e:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019e34:	6a 0c                	push   0xc
c0019e36:	e8 5e 57 ff ff       	call   c000f599 <malloc>
c0019e3b:	89 c3                	mov    ebx,eax
c0019e3d:	58                   	pop    eax
c0019e3e:	5a                   	pop    edx
c0019e3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e43:	53                   	push   ebx
c0019e44:	e8 b3 fe ff ff       	call   c0019cfc <EnvVarContainer::EnvVarContainer(Process*)>
c0019e49:	8b 07                	mov    eax,DWORD PTR [edi]
c0019e4b:	89 03                	mov    DWORD PTR [ebx],eax
c0019e4d:	c1 e0 03             	shl    eax,0x3
c0019e50:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e53:	e8 41 57 ff ff       	call   c000f599 <malloc>
c0019e58:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019e5b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019e5d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019e60:	c1 e1 03             	shl    ecx,0x3
c0019e63:	89 c7                	mov    edi,eax
c0019e65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e67:	83 c4 10             	add    esp,0x10
c0019e6a:	89 d8                	mov    eax,ebx
c0019e6c:	5b                   	pop    ebx
c0019e6d:	5e                   	pop    esi
c0019e6e:	5f                   	pop    edi
c0019e6f:	c3                   	ret    

c0019e70 <Krnl::loadSystemEnv()>:
c0019e70:	53                   	push   ebx
c0019e71:	83 ec 14             	sub    esp,0x14
c0019e74:	6a 0c                	push   0xc
c0019e76:	e8 1e 57 ff ff       	call   c000f599 <malloc>
c0019e7b:	89 c3                	mov    ebx,eax
c0019e7d:	58                   	pop    eax
c0019e7e:	5a                   	pop    edx
c0019e7f:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c0019e85:	53                   	push   ebx
c0019e86:	e8 71 fe ff ff       	call   c0019cfc <EnvVarContainer::EnvVarContainer(Process*)>
c0019e8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e8e:	89 1d 98 e8 02 c0    	mov    DWORD PTR ds:0xc002e898,ebx
c0019e94:	e8 47 fe ff ff       	call   c0019ce0 <EnvVarContainer::__loadSystem()>
c0019e99:	83 c4 18             	add    esp,0x18
c0019e9c:	5b                   	pop    ebx
c0019e9d:	c3                   	ret    

c0019e9e <Krnl::loadUserEnv()>:
c0019e9e:	53                   	push   ebx
c0019e9f:	83 ec 14             	sub    esp,0x14
c0019ea2:	6a 0c                	push   0xc
c0019ea4:	e8 f0 56 ff ff       	call   c000f599 <malloc>
c0019ea9:	89 c3                	mov    ebx,eax
c0019eab:	58                   	pop    eax
c0019eac:	5a                   	pop    edx
c0019ead:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c0019eb3:	53                   	push   ebx
c0019eb4:	e8 43 fe ff ff       	call   c0019cfc <EnvVarContainer::EnvVarContainer(Process*)>
c0019eb9:	89 1d 94 e8 02 c0    	mov    DWORD PTR ds:0xc002e894,ebx
c0019ebf:	83 c4 18             	add    esp,0x18
c0019ec2:	5b                   	pop    ebx
c0019ec3:	c3                   	ret    

c0019ec4 <Krnl::flushEnv()>:
c0019ec4:	c3                   	ret    

c0019ec5 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019ec5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ec9:	8b 15 94 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e894
c0019ecf:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019ed5:	a1 98 e8 02 c0       	mov    eax,ds:0xc002e898
c0019eda:	8b 00                	mov    eax,DWORD PTR [eax]
c0019edc:	03 01                	add    eax,DWORD PTR [ecx]
c0019ede:	85 d2                	test   edx,edx
c0019ee0:	74 02                	je     c0019ee4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019ee2:	03 02                	add    eax,DWORD PTR [edx]
c0019ee4:	c3                   	ret    

c0019ee5 <Krnl::getProcessEnvPair(Process*, int)>:
c0019ee5:	57                   	push   edi
c0019ee6:	56                   	push   esi
c0019ee7:	8b 35 94 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e894
c0019eed:	53                   	push   ebx
c0019eee:	85 f6                	test   esi,esi
c0019ef0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ef4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ef8:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019efe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019f02:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019f04:	75 16                	jne    c0019f1c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019f06:	39 c2                	cmp    edx,eax
c0019f08:	7c 16                	jl     c0019f20 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019f0a:	8b 0d 98 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e898
c0019f10:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019f12:	01 c6                	add    esi,eax
c0019f14:	39 d6                	cmp    esi,edx
c0019f16:	7e 3c                	jle    c0019f54 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019f18:	29 c2                	sub    edx,eax
c0019f1a:	eb 04                	jmp    c0019f20 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019f1c:	39 c2                	cmp    edx,eax
c0019f1e:	7d 05                	jge    c0019f25 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019f20:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019f23:	eb 20                	jmp    c0019f45 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019f25:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019f27:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019f2a:	39 d1                	cmp    ecx,edx
c0019f2c:	7e 04                	jle    c0019f32 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019f2e:	29 c2                	sub    edx,eax
c0019f30:	eb 10                	jmp    c0019f42 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019f32:	8b 35 98 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e898
c0019f38:	03 0e                	add    ecx,DWORD PTR [esi]
c0019f3a:	39 d1                	cmp    ecx,edx
c0019f3c:	7e 16                	jle    c0019f54 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019f3e:	29 c2                	sub    edx,eax
c0019f40:	29 fa                	sub    edx,edi
c0019f42:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019f45:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019f48:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f4a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019f4d:	89 03                	mov    DWORD PTR [ebx],eax
c0019f4f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019f52:	eb 1d                	jmp    c0019f71 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	68 67 b9 02 c0       	push   0xc002b967
c0019f5c:	e8 18 00 00 00       	call   c0019f79 <Krnl::panic(char const*)>
c0019f61:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019f67:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019f6e:	83 c4 10             	add    esp,0x10
c0019f71:	89 d8                	mov    eax,ebx
c0019f73:	5b                   	pop    ebx
c0019f74:	5e                   	pop    esi
c0019f75:	5f                   	pop    edi
c0019f76:	c2 04 00             	ret    0x4

c0019f79 <Krnl::panic(char const*)>:
c0019f79:	55                   	push   ebp
c0019f7a:	89 e5                	mov    ebp,esp
c0019f7c:	53                   	push   ebx
c0019f7d:	83 ec 10             	sub    esp,0x10
c0019f80:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019f83:	fa                   	cli    
c0019f84:	c6 05 a4 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e8a4,0x1
c0019f8b:	53                   	push   ebx
c0019f8c:	e8 62 56 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019f91:	58                   	pop    eax
c0019f92:	c6 05 c0 cc 02 c0 00 	mov    BYTE PTR ds:0xc002ccc0,0x0
c0019f99:	5a                   	pop    edx
c0019f9a:	53                   	push   ebx
c0019f9b:	68 81 b9 02 c0       	push   0xc002b981
c0019fa0:	e8 f8 87 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0019fa5:	59                   	pop    ecx
c0019fa6:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0019fab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb1:	e8 9d 63 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0019fb6:	83 c4 0c             	add    esp,0xc
c0019fb9:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0019fbe:	6a 01                	push   0x1
c0019fc0:	6a 0f                	push   0xf
c0019fc2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fc8:	e8 e5 61 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019fcd:	58                   	pop    eax
c0019fce:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0019fd3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd9:	e8 f6 66 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c0019fde:	58                   	pop    eax
c0019fdf:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0019fe4:	5a                   	pop    edx
c0019fe5:	68 9a b9 02 c0       	push   0xc002b99a
c0019fea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ff0:	e8 6b 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ff5:	59                   	pop    ecx
c0019ff6:	58                   	pop    eax
c0019ff7:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c0019ffc:	68 40 ba 02 c0       	push   0xc002ba40
c001a001:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a007:	e8 54 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a00c:	58                   	pop    eax
c001a00d:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a012:	5a                   	pop    edx
c001a013:	68 b6 b9 02 c0       	push   0xc002b9b6
c001a018:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a01e:	e8 3d 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a023:	59                   	pop    ecx
c001a024:	58                   	pop    eax
c001a025:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a02a:	53                   	push   ebx
c001a02b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a031:	e8 2a 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a036:	58                   	pop    eax
c001a037:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a03c:	5a                   	pop    edx
c001a03d:	68 d6 b9 02 c0       	push   0xc002b9d6
c001a042:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a048:	e8 13 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a04d:	a1 a0 e8 02 c0       	mov    eax,ds:0xc002e8a0
c001a052:	83 c4 10             	add    esp,0x10
c001a055:	85 c0                	test   eax,eax
c001a057:	74 02                	je     c001a05b <Krnl::panic(char const*)+0xe2>
c001a059:	ff d0                	call   eax
c001a05b:	83 ec 0c             	sub    esp,0xc
c001a05e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a061:	e8 8f 30 00 00       	call   c001d0f5 <Thr::getDriverNameFromAddress(unsigned long)>
c001a066:	83 c4 10             	add    esp,0x10
c001a069:	89 c3                	mov    ebx,eax
c001a06b:	85 c0                	test   eax,eax
c001a06d:	0f 84 4e 02 00 00    	je     c001a2c1 <Krnl::panic(char const*)+0x348>
c001a073:	83 ec 08             	sub    esp,0x8
c001a076:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a07b:	68 7c ba 02 c0       	push   0xc002ba7c
c001a080:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a086:	e8 d5 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a08b:	58                   	pop    eax
c001a08c:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a091:	5a                   	pop    edx
c001a092:	68 b6 b9 02 c0       	push   0xc002b9b6
c001a097:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a09d:	e8 be 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0a2:	59                   	pop    ecx
c001a0a3:	58                   	pop    eax
c001a0a4:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a0a9:	53                   	push   ebx
c001a0aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b0:	e8 ab 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0b5:	83 c4 10             	add    esp,0x10
c001a0b8:	83 ec 08             	sub    esp,0x8
c001a0bb:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a0c0:	68 d5 b9 02 c0       	push   0xc002b9d5
c001a0c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0cb:	e8 90 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0d0:	58                   	pop    eax
c001a0d1:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a0d6:	5a                   	pop    edx
c001a0d7:	68 d4 ba 02 c0       	push   0xc002bad4
c001a0dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e2:	e8 79 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0e7:	59                   	pop    ecx
c001a0e8:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a0ed:	5b                   	pop    ebx
c001a0ee:	68 14 bb 02 c0       	push   0xc002bb14
c001a0f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f9:	e8 62 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0fe:	58                   	pop    eax
c001a0ff:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a104:	5a                   	pop    edx
c001a105:	68 c1 b9 02 c0       	push   0xc002b9c1
c001a10a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a110:	e8 4b 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a115:	59                   	pop    ecx
c001a116:	5b                   	pop    ebx
c001a117:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a11a:	68 d9 b9 02 c0       	push   0xc002b9d9
c001a11f:	e8 79 86 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001a124:	58                   	pop    eax
c001a125:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a128:	5a                   	pop    edx
c001a129:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a12c:	68 e2 b9 02 c0       	push   0xc002b9e2
c001a131:	e8 67 86 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001a136:	59                   	pop    ecx
c001a137:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a13a:	5b                   	pop    ebx
c001a13b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a13d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a140:	68 eb b9 02 c0       	push   0xc002b9eb
c001a145:	e8 53 86 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001a14a:	58                   	pop    eax
c001a14b:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a150:	5a                   	pop    edx
c001a151:	68 58 bb 02 c0       	push   0xc002bb58
c001a156:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a15c:	e8 ff 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a161:	59                   	pop    ecx
c001a162:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a167:	5b                   	pop    ebx
c001a168:	68 f4 b9 02 c0       	push   0xc002b9f4
c001a16d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a173:	e8 e8 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a178:	0f 20 c0             	mov    eax,cr0
c001a17b:	5a                   	pop    edx
c001a17c:	59                   	pop    ecx
c001a17d:	50                   	push   eax
c001a17e:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a189:	e8 8c 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a18e:	5b                   	pop    ebx
c001a18f:	58                   	pop    eax
c001a190:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a195:	68 fe b9 02 c0       	push   0xc002b9fe
c001a19a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1a0:	e8 bb 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1a5:	0f 20 d0             	mov    eax,cr2
c001a1a8:	5a                   	pop    edx
c001a1a9:	59                   	pop    ecx
c001a1aa:	50                   	push   eax
c001a1ab:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a1b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1b6:	e8 5f 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1bb:	5b                   	pop    ebx
c001a1bc:	58                   	pop    eax
c001a1bd:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a1c2:	68 08 ba 02 c0       	push   0xc002ba08
c001a1c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1cd:	e8 8e 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1d2:	0f 20 d8             	mov    eax,cr3
c001a1d5:	5a                   	pop    edx
c001a1d6:	59                   	pop    ecx
c001a1d7:	50                   	push   eax
c001a1d8:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a1dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1e3:	e8 32 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1e8:	5b                   	pop    ebx
c001a1e9:	58                   	pop    eax
c001a1ea:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a1ef:	68 1b ba 02 c0       	push   0xc002ba1b
c001a1f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1fa:	e8 61 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1ff:	0f 20 e0             	mov    eax,cr4
c001a202:	5a                   	pop    edx
c001a203:	59                   	pop    ecx
c001a204:	50                   	push   eax
c001a205:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a20a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a210:	e8 05 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a215:	5b                   	pop    ebx
c001a216:	58                   	pop    eax
c001a217:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a21c:	68 25 ba 02 c0       	push   0xc002ba25
c001a221:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a227:	e8 34 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a22c:	5a                   	pop    edx
c001a22d:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a232:	59                   	pop    ecx
c001a233:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a239:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a23c:	50                   	push   eax
c001a23d:	e8 d8 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a242:	5b                   	pop    ebx
c001a243:	58                   	pop    eax
c001a244:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a249:	68 3c ba 02 c0       	push   0xc002ba3c
c001a24e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a254:	e8 07 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a259:	5a                   	pop    edx
c001a25a:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a25f:	59                   	pop    ecx
c001a260:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a266:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a269:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a26c:	50                   	push   eax
c001a26d:	e8 a8 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a272:	5b                   	pop    ebx
c001a273:	58                   	pop    eax
c001a274:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a279:	68 3c ba 02 c0       	push   0xc002ba3c
c001a27e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a284:	e8 d7 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a289:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a28e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a291:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a297:	8b 12                	mov    edx,DWORD PTR [edx]
c001a299:	59                   	pop    ecx
c001a29a:	5b                   	pop    ebx
c001a29b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a29e:	50                   	push   eax
c001a29f:	e8 76 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a2a4:	83 c4 10             	add    esp,0x10
c001a2a7:	b2 fe                	mov    dl,0xfe
c001a2a9:	e4 60                	in     al,0x60
c001a2ab:	3c 1c                	cmp    al,0x1c
c001a2ad:	74 04                	je     c001a2b3 <Krnl::panic(char const*)+0x33a>
c001a2af:	3c 5a                	cmp    al,0x5a
c001a2b1:	75 f6                	jne    c001a2a9 <Krnl::panic(char const*)+0x330>
c001a2b3:	e4 64                	in     al,0x64
c001a2b5:	a8 02                	test   al,0x2
c001a2b7:	75 fa                	jne    c001a2b3 <Krnl::panic(char const*)+0x33a>
c001a2b9:	88 d0                	mov    al,dl
c001a2bb:	e6 64                	out    0x64,al
c001a2bd:	fa                   	cli    
c001a2be:	f4                   	hlt    
c001a2bf:	eb e8                	jmp    c001a2a9 <Krnl::panic(char const*)+0x330>
c001a2c1:	50                   	push   eax
c001a2c2:	50                   	push   eax
c001a2c3:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a2c8:	68 a8 ba 02 c0       	push   0xc002baa8
c001a2cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2d3:	e8 88 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a2d8:	58                   	pop    eax
c001a2d9:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a2de:	5a                   	pop    edx
c001a2df:	68 b6 b9 02 c0       	push   0xc002b9b6
c001a2e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2ea:	e8 71 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a2ef:	59                   	pop    ecx
c001a2f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2f5:	5b                   	pop    ebx
c001a2f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a2f9:	83 c0 0c             	add    eax,0xc
c001a2fc:	50                   	push   eax
c001a2fd:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001a302:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a308:	e8 53 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a30d:	83 c4 10             	add    esp,0x10
c001a310:	e9 a3 fd ff ff       	jmp    c001a0b8 <Krnl::panic(char const*)+0x13f>

c001a315 <Net::switchEndian16(unsigned short)>:
c001a315:	83 ec 04             	sub    esp,0x4
c001a318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a31c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a320:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a324:	c1 f8 08             	sar    eax,0x8
c001a327:	89 c2                	mov    edx,eax
c001a329:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a32d:	c1 e0 08             	shl    eax,0x8
c001a330:	09 d0                	or     eax,edx
c001a332:	83 c4 04             	add    esp,0x4
c001a335:	c3                   	ret    

c001a336 <Net::switchEndian32(unsigned int)>:
c001a336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a33a:	c1 e8 18             	shr    eax,0x18
c001a33d:	89 c2                	mov    edx,eax
c001a33f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a343:	c1 e0 08             	shl    eax,0x8
c001a346:	25 00 00 ff 00       	and    eax,0xff0000
c001a34b:	09 c2                	or     edx,eax
c001a34d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a351:	c1 e8 08             	shr    eax,0x8
c001a354:	25 00 ff 00 00       	and    eax,0xff00
c001a359:	09 c2                	or     edx,eax
c001a35b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a35f:	c1 e0 18             	shl    eax,0x18
c001a362:	09 d0                	or     eax,edx
c001a364:	c3                   	ret    

c001a365 <Net::crc32Calc(unsigned char*, int)>:
c001a365:	83 ec 10             	sub    esp,0x10
c001a368:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a36d:	75 07                	jne    c001a376 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a36f:	b8 00 00 00 00       	mov    eax,0x0
c001a374:	eb 7c                	jmp    c001a3f2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a376:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a37b:	7f 07                	jg     c001a384 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a37d:	b8 00 00 00 00       	mov    eax,0x0
c001a382:	eb 6e                	jmp    c001a3f2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a384:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a38c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a394:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a398:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a39c:	7d 4e                	jge    c001a3ec <Net::crc32Calc(unsigned char*, int)+0x87>
c001a39e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3a6:	01 d0                	add    eax,edx
c001a3a8:	8a 00                	mov    al,BYTE PTR [eax]
c001a3aa:	0f b6 c0             	movzx  eax,al
c001a3ad:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a3b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a3b9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a3be:	7f 26                	jg     c001a3e6 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3c4:	83 e0 01             	and    eax,0x1
c001a3c7:	74 0d                	je     c001a3d6 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3cd:	d1 e8                	shr    eax,1
c001a3cf:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a3d4:	eb 06                	jmp    c001a3dc <Net::crc32Calc(unsigned char*, int)+0x77>
c001a3d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3da:	d1 e8                	shr    eax,1
c001a3dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3e0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a3e4:	eb d3                	jmp    c001a3b9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a3e6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a3ea:	eb a8                	jmp    c001a394 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a3ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f0:	f7 d0                	not    eax
c001a3f2:	83 c4 10             	add    esp,0x10
c001a3f5:	c3                   	ret    

c001a3f6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a3f6:	57                   	push   edi
c001a3f7:	56                   	push   esi
c001a3f8:	53                   	push   ebx
c001a3f9:	83 ec 60             	sub    esp,0x60
c001a3fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a403:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a407:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a40f:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a414:	7f 1a                	jg     c001a430 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a416:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a41d:	8d 50 01             	lea    edx,[eax+0x1]
c001a420:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a427:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a42a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a42e:	eb df                	jmp    c001a40f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a430:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a437:	8d 50 01             	lea    edx,[eax+0x1]
c001a43a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a441:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a444:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a44b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a44f:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a453:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a457:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a45f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a46b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a46f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a473:	89 c6                	mov    esi,eax
c001a475:	89 d7                	mov    edi,edx
c001a477:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a479:	89 c8                	mov    eax,ecx
c001a47b:	89 fa                	mov    edx,edi
c001a47d:	89 f3                	mov    ebx,esi
c001a47f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a483:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a487:	89 04 24             	mov    DWORD PTR [esp],eax
c001a48a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a492:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a499:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a49d:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a4a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a4a5:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a4ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4b9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a4bd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a4c1:	89 c6                	mov    esi,eax
c001a4c3:	89 d7                	mov    edi,edx
c001a4c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4c7:	89 c8                	mov    eax,ecx
c001a4c9:	89 fa                	mov    edx,edi
c001a4cb:	89 f3                	mov    ebx,esi
c001a4cd:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a4d1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a4d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4d9:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a4e1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4e8:	0f b7 c0             	movzx  eax,ax
c001a4eb:	c1 f8 08             	sar    eax,0x8
c001a4ee:	89 c1                	mov    ecx,eax
c001a4f0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4f7:	8d 50 01             	lea    edx,[eax+0x1]
c001a4fa:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a501:	88 ca                	mov    dl,cl
c001a503:	88 10                	mov    BYTE PTR [eax],dl
c001a505:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a50c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a513:	8d 48 01             	lea    ecx,[eax+0x1]
c001a516:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a51d:	88 10                	mov    BYTE PTR [eax],dl
c001a51f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a523:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a527:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a52e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a532:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a536:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a53a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a53e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a542:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a546:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a54a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a54e:	89 c6                	mov    esi,eax
c001a550:	89 d7                	mov    edi,edx
c001a552:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a554:	89 c8                	mov    eax,ecx
c001a556:	89 fa                	mov    edx,edi
c001a558:	89 f3                	mov    ebx,esi
c001a55a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a55e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a562:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a566:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a56a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a578:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a57c:	50                   	push   eax
c001a57d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a581:	e8 df fd ff ff       	call   c001a365 <Net::crc32Calc(unsigned char*, int)>
c001a586:	83 c4 08             	add    esp,0x8
c001a589:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a58d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a591:	c1 e8 18             	shr    eax,0x18
c001a594:	89 c1                	mov    ecx,eax
c001a596:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a59d:	8d 50 01             	lea    edx,[eax+0x1]
c001a5a0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a5a7:	88 ca                	mov    dl,cl
c001a5a9:	88 10                	mov    BYTE PTR [eax],dl
c001a5ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a5af:	c1 e8 10             	shr    eax,0x10
c001a5b2:	89 c1                	mov    ecx,eax
c001a5b4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5bb:	8d 50 01             	lea    edx,[eax+0x1]
c001a5be:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a5c5:	88 ca                	mov    dl,cl
c001a5c7:	88 10                	mov    BYTE PTR [eax],dl
c001a5c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a5cd:	c1 e8 08             	shr    eax,0x8
c001a5d0:	89 c1                	mov    ecx,eax
c001a5d2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5d9:	8d 50 01             	lea    edx,[eax+0x1]
c001a5dc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a5e3:	88 ca                	mov    dl,cl
c001a5e5:	88 10                	mov    BYTE PTR [eax],dl
c001a5e7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5ee:	8d 50 01             	lea    edx,[eax+0x1]
c001a5f1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a5f8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a5fc:	88 10                	mov    BYTE PTR [eax],dl
c001a5fe:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a602:	83 c4 60             	add    esp,0x60
c001a605:	5b                   	pop    ebx
c001a606:	5e                   	pop    esi
c001a607:	5f                   	pop    edi
c001a608:	c3                   	ret    

c001a609 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a609:	57                   	push   edi
c001a60a:	56                   	push   esi
c001a60b:	53                   	push   ebx
c001a60c:	83 ec 70             	sub    esp,0x70
c001a60f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a616:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a61a:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a622:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a629:	83 c0 0e             	add    eax,0xe
c001a62c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a630:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a637:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a63b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a643:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a647:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a64b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a64f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a653:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a657:	89 c6                	mov    esi,eax
c001a659:	89 d7                	mov    edi,edx
c001a65b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a65d:	89 c8                	mov    eax,ecx
c001a65f:	89 fa                	mov    edx,edi
c001a661:	89 f3                	mov    ebx,esi
c001a663:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a667:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a66b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a66f:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a677:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a67e:	83 c0 08             	add    eax,0x8
c001a681:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a685:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a68c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a690:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a698:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a69c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a6a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a6a4:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a6a8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a6ac:	89 c6                	mov    esi,eax
c001a6ae:	89 d7                	mov    edi,edx
c001a6b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6b2:	89 c8                	mov    eax,ecx
c001a6b4:	89 fa                	mov    edx,edi
c001a6b6:	89 f3                	mov    ebx,esi
c001a6b8:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a6bc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a6c0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a6c4:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a6cc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6d3:	8d 50 01             	lea    edx,[eax+0x1]
c001a6d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6dd:	8a 00                	mov    al,BYTE PTR [eax]
c001a6df:	0f b6 c0             	movzx  eax,al
c001a6e2:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a6e7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6ee:	8d 50 01             	lea    edx,[eax+0x1]
c001a6f1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6f8:	8a 00                	mov    al,BYTE PTR [eax]
c001a6fa:	0f b6 c0             	movzx  eax,al
c001a6fd:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a702:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a707:	c1 e0 08             	shl    eax,0x8
c001a70a:	89 c2                	mov    edx,eax
c001a70c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a710:	09 d0                	or     eax,edx
c001a712:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a719:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a71d:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a725:	75 46                	jne    c001a76d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a727:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a72e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a731:	66 3d dc 05          	cmp    ax,0x5dc
c001a735:	77 16                	ja     c001a74d <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a737:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a73e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a741:	0f b7 c0             	movzx  eax,ax
c001a744:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a74b:	eb 20                	jmp    c001a76d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a74d:	83 ec 0c             	sub    esp,0xc
c001a750:	68 80 bb 02 c0       	push   0xc002bb80
c001a755:	e8 43 80 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001a75a:	83 c4 10             	add    esp,0x10
c001a75d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a764:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a768:	e9 17 01 00 00       	jmp    c001a884 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a76d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a774:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a77b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a77d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a781:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a788:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a78c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a790:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a79c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a7a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7a4:	89 c6                	mov    esi,eax
c001a7a6:	89 d7                	mov    edi,edx
c001a7a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7aa:	89 c8                	mov    eax,ecx
c001a7ac:	89 fa                	mov    edx,edi
c001a7ae:	89 f3                	mov    ebx,esi
c001a7b0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a7b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a7b8:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7bb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7c2:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a7c9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7d0:	8d 50 01             	lea    edx,[eax+0x1]
c001a7d3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a7da:	8a 00                	mov    al,BYTE PTR [eax]
c001a7dc:	0f b6 c0             	movzx  eax,al
c001a7df:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a7e3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7ea:	8d 50 01             	lea    edx,[eax+0x1]
c001a7ed:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a7f4:	8a 00                	mov    al,BYTE PTR [eax]
c001a7f6:	0f b6 c0             	movzx  eax,al
c001a7f9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a7fd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a804:	8d 50 01             	lea    edx,[eax+0x1]
c001a807:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a80e:	8a 00                	mov    al,BYTE PTR [eax]
c001a810:	0f b6 c0             	movzx  eax,al
c001a813:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a817:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a81e:	8d 50 01             	lea    edx,[eax+0x1]
c001a821:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a828:	8a 00                	mov    al,BYTE PTR [eax]
c001a82a:	0f b6 c0             	movzx  eax,al
c001a82d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a831:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a835:	c1 e0 18             	shl    eax,0x18
c001a838:	89 c2                	mov    edx,eax
c001a83a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a83e:	c1 e0 10             	shl    eax,0x10
c001a841:	09 c2                	or     edx,eax
c001a843:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a847:	c1 e0 08             	shl    eax,0x8
c001a84a:	09 d0                	or     eax,edx
c001a84c:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a850:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a854:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a85b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a85f:	83 e8 04             	sub    eax,0x4
c001a862:	83 ec 08             	sub    esp,0x8
c001a865:	50                   	push   eax
c001a866:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a86a:	e8 f6 fa ff ff       	call   c001a365 <Net::crc32Calc(unsigned char*, int)>
c001a86f:	83 c4 10             	add    esp,0x10
c001a872:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a876:	0f 94 c2             	sete   dl
c001a879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a880:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a883:	90                   	nop
c001a884:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a88b:	83 c4 70             	add    esp,0x70
c001a88e:	5b                   	pop    ebx
c001a88f:	5e                   	pop    esi
c001a890:	5f                   	pop    edi
c001a891:	c2 04 00             	ret    0x4

c001a894 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a894:	55                   	push   ebp
c001a895:	57                   	push   edi
c001a896:	56                   	push   esi
c001a897:	53                   	push   ebx
c001a898:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a89e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a8a5:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a8a7:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a8aa:	80 fb 40             	cmp    bl,0x40
c001a8ad:	75 1b                	jne    c001a8ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a8af:	8a 16                	mov    dl,BYTE PTR [esi]
c001a8b1:	84 d2                	test   dl,dl
c001a8b3:	0f 84 f1 00 00 00    	je     c001a9aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a8b9:	8d 46 01             	lea    eax,[esi+0x1]
c001a8bc:	80 fa 3a             	cmp    dl,0x3a
c001a8bf:	74 04                	je     c001a8c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a8c1:	89 c6                	mov    esi,eax
c001a8c3:	eb ea                	jmp    c001a8af <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a8c5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a8c8:	89 c6                	mov    esi,eax
c001a8ca:	50                   	push   eax
c001a8cb:	6a 40                	push   0x40
c001a8cd:	6a 00                	push   0x0
c001a8cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8d3:	50                   	push   eax
c001a8d4:	e8 77 5e fe ff       	call   c0000750 <memset>
c001a8d9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a8e0:	31 c0                	xor    eax,eax
c001a8e2:	83 c4 10             	add    esp,0x10
c001a8e5:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a8e7:	84 c9                	test   cl,cl
c001a8e9:	0f 84 bb 00 00 00    	je     c001a9aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a8ef:	3d c7 00 00 00       	cmp    eax,0xc7
c001a8f4:	0f 8f b0 00 00 00    	jg     c001a9aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a8fa:	80 f9 0a             	cmp    cl,0xa
c001a8fd:	0f 85 98 00 00 00    	jne    c001a99b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a903:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a908:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a90c:	a8 df                	test   al,0xdf
c001a90e:	0f 94 c1             	sete   cl
c001a911:	3c 23                	cmp    al,0x23
c001a913:	0f 94 c2             	sete   dl
c001a916:	08 d1                	or     cl,dl
c001a918:	75 4a                	jne    c001a964 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a91a:	8d 50 f7             	lea    edx,[eax-0x9]
c001a91d:	80 fa 01             	cmp    dl,0x1
c001a920:	76 42                	jbe    c001a964 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a922:	3c 5b                	cmp    al,0x5b
c001a924:	75 42                	jne    c001a968 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a926:	80 fb 40             	cmp    bl,0x40
c001a929:	75 39                	jne    c001a964 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a92b:	83 ec 0c             	sub    esp,0xc
c001a92e:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a932:	52                   	push   edx
c001a933:	e8 34 5e fe ff       	call   c000076c <strlen>
c001a938:	83 c4 10             	add    esp,0x10
c001a93b:	83 f8 3f             	cmp    eax,0x3f
c001a93e:	77 6a                	ja     c001a9aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a940:	50                   	push   eax
c001a941:	50                   	push   eax
c001a942:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a946:	52                   	push   edx
c001a947:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a94b:	52                   	push   edx
c001a94c:	e8 bb 5e fe ff       	call   c000080c <strcpy>
c001a951:	58                   	pop    eax
c001a952:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a956:	52                   	push   edx
c001a957:	e8 10 5e fe ff       	call   c000076c <strlen>
c001a95c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a961:	83 c4 10             	add    esp,0x10
c001a964:	31 d2                	xor    edx,edx
c001a966:	eb 3a                	jmp    c001a9a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a968:	80 fb 40             	cmp    bl,0x40
c001a96b:	74 06                	je     c001a973 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a96d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a971:	eb 20                	jmp    c001a993 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a973:	50                   	push   eax
c001a974:	50                   	push   eax
c001a975:	55                   	push   ebp
c001a976:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a97a:	50                   	push   eax
c001a97b:	e8 18 5f fe ff       	call   c0000898 <strcmp>
c001a980:	83 c4 10             	add    esp,0x10
c001a983:	85 c0                	test   eax,eax
c001a985:	75 dd                	jne    c001a964 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a987:	eb e4                	jmp    c001a96d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a989:	8d 50 01             	lea    edx,[eax+0x1]
c001a98c:	80 f9 3d             	cmp    cl,0x3d
c001a98f:	74 1d                	je     c001a9ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a991:	89 d0                	mov    eax,edx
c001a993:	8a 08                	mov    cl,BYTE PTR [eax]
c001a995:	84 c9                	test   cl,cl
c001a997:	75 f0                	jne    c001a989 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a999:	eb 0f                	jmp    c001a9aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a99b:	8d 50 01             	lea    edx,[eax+0x1]
c001a99e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a9a2:	47                   	inc    edi
c001a9a3:	89 d0                	mov    eax,edx
c001a9a5:	e9 3b ff ff ff       	jmp    c001a8e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a9aa:	31 c0                	xor    eax,eax
c001a9ac:	eb 33                	jmp    c001a9e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a9ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a9b2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a9b5:	50                   	push   eax
c001a9b6:	50                   	push   eax
c001a9b7:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a9bb:	50                   	push   eax
c001a9bc:	56                   	push   esi
c001a9bd:	e8 d6 5e fe ff       	call   c0000898 <strcmp>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	85 c0                	test   eax,eax
c001a9c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a9cb:	75 97                	jne    c001a964 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9cd:	51                   	push   ecx
c001a9ce:	51                   	push   ecx
c001a9cf:	52                   	push   edx
c001a9d0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a9d7:	e8 30 5e fe ff       	call   c000080c <strcpy>
c001a9dc:	83 c4 10             	add    esp,0x10
c001a9df:	b0 01                	mov    al,0x1
c001a9e1:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a9e7:	5b                   	pop    ebx
c001a9e8:	5e                   	pop    esi
c001a9e9:	5f                   	pop    edi
c001a9ea:	5d                   	pop    ebp
c001a9eb:	c3                   	ret    

c001a9ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a9ec:	57                   	push   edi
c001a9ed:	56                   	push   esi
c001a9ee:	53                   	push   ebx
c001a9ef:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a9f5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a9fc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa03:	53                   	push   ebx
c001aa04:	e8 63 5d fe ff       	call   c000076c <strlen>
c001aa09:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa0c:	89 c7                	mov    edi,eax
c001aa0e:	e8 59 5d fe ff       	call   c000076c <strlen>
c001aa13:	83 c4 10             	add    esp,0x10
c001aa16:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aa1a:	3d ff 00 00 00       	cmp    eax,0xff
c001aa1f:	0f 87 d3 00 00 00    	ja     c001aaf8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aa25:	57                   	push   edi
c001aa26:	57                   	push   edi
c001aa27:	56                   	push   esi
c001aa28:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aa2c:	56                   	push   esi
c001aa2d:	e8 da 5d fe ff       	call   c000080c <strcpy>
c001aa32:	58                   	pop    eax
c001aa33:	5a                   	pop    edx
c001aa34:	68 22 bf 02 c0       	push   0xc002bf22
c001aa39:	56                   	push   esi
c001aa3a:	e8 0d 5f fe ff       	call   c000094c <strcat>
c001aa3f:	59                   	pop    ecx
c001aa40:	5f                   	pop    edi
c001aa41:	53                   	push   ebx
c001aa42:	56                   	push   esi
c001aa43:	e8 04 5f fe ff       	call   c000094c <strcat>
c001aa48:	58                   	pop    eax
c001aa49:	5a                   	pop    edx
c001aa4a:	68 cc bb 02 c0       	push   0xc002bbcc
c001aa4f:	56                   	push   esi
c001aa50:	e8 f7 5e fe ff       	call   c000094c <strcat>
c001aa55:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aa5c:	e8 38 4b ff ff       	call   c000f599 <malloc>
c001aa61:	83 c4 0c             	add    esp,0xc
c001aa64:	89 c3                	mov    ebx,eax
c001aa66:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c001aa6c:	56                   	push   esi
c001aa6d:	50                   	push   eax
c001aa6e:	e8 89 82 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001aa73:	83 c4 10             	add    esp,0x10
c001aa76:	85 db                	test   ebx,ebx
c001aa78:	74 7e                	je     c001aaf8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aa7a:	51                   	push   ecx
c001aa7b:	51                   	push   ecx
c001aa7c:	6a 01                	push   0x1
c001aa7e:	53                   	push   ebx
c001aa7f:	e8 dc 82 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001aa84:	83 c4 10             	add    esp,0x10
c001aa87:	85 c0                	test   eax,eax
c001aa89:	74 08                	je     c001aa93 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aa8b:	83 ec 0c             	sub    esp,0xc
c001aa8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa90:	53                   	push   ebx
c001aa91:	eb 5f                	jmp    c001aaf2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aa93:	52                   	push   edx
c001aa94:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aa98:	50                   	push   eax
c001aa99:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aa9d:	50                   	push   eax
c001aa9e:	53                   	push   ebx
c001aa9f:	e8 68 85 ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001aaa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aaa8:	83 c4 10             	add    esp,0x10
c001aaab:	89 c1                	mov    ecx,eax
c001aaad:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aab1:	74 31                	je     c001aae4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aab3:	83 ec 0c             	sub    esp,0xc
c001aab6:	50                   	push   eax
c001aab7:	e8 dd 4a ff ff       	call   c000f599 <malloc>
c001aabc:	89 c6                	mov    esi,eax
c001aabe:	58                   	pop    eax
c001aabf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aac1:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aac5:	52                   	push   edx
c001aac6:	56                   	push   esi
c001aac7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aacb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aacf:	53                   	push   ebx
c001aad0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aad3:	83 c4 20             	add    esp,0x20
c001aad6:	85 c0                	test   eax,eax
c001aad8:	75 0a                	jne    c001aae4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aada:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aade:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aae2:	74 18                	je     c001aafc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001aae4:	83 ec 0c             	sub    esp,0xc
c001aae7:	53                   	push   ebx
c001aae8:	e8 d1 82 ff ff       	call   c0012dbe <File::close()>
c001aaed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aaf5:	83 c4 10             	add    esp,0x10
c001aaf8:	31 c0                	xor    eax,eax
c001aafa:	eb 3b                	jmp    c001ab37 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aafc:	83 ec 0c             	sub    esp,0xc
c001aaff:	53                   	push   ebx
c001ab00:	e8 b9 82 ff ff       	call   c0012dbe <File::close()>
c001ab05:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab0d:	83 c4 0c             	add    esp,0xc
c001ab10:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab17:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab1e:	56                   	push   esi
c001ab1f:	e8 70 fd ff ff       	call   c001a894 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ab24:	89 34 24             	mov    DWORD PTR [esp],esi
c001ab27:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab2b:	e8 79 4a ff ff       	call   c000f5a9 <free>
c001ab30:	83 c4 10             	add    esp,0x10
c001ab33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ab37:	81 c4 20 01 00 00    	add    esp,0x120
c001ab3d:	5b                   	pop    ebx
c001ab3e:	5e                   	pop    esi
c001ab3f:	5f                   	pop    edi
c001ab40:	c3                   	ret    

c001ab41 <Reg::getLine(char*, char*, char*)>:
c001ab41:	57                   	push   edi
c001ab42:	56                   	push   esi
c001ab43:	53                   	push   ebx
c001ab44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab48:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ab4c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ab50:	57                   	push   edi
c001ab51:	56                   	push   esi
c001ab52:	53                   	push   ebx
c001ab53:	68 d1 bb 02 c0       	push   0xc002bbd1
c001ab58:	e8 8f fe ff ff       	call   c001a9ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ab5d:	83 c4 10             	add    esp,0x10
c001ab60:	84 c0                	test   al,al
c001ab62:	75 10                	jne    c001ab74 <Reg::getLine(char*, char*, char*)+0x33>
c001ab64:	57                   	push   edi
c001ab65:	56                   	push   esi
c001ab66:	53                   	push   ebx
c001ab67:	68 f6 bb 02 c0       	push   0xc002bbf6
c001ab6c:	e8 7b fe ff ff       	call   c001a9ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ab71:	83 c4 10             	add    esp,0x10
c001ab74:	5b                   	pop    ebx
c001ab75:	5e                   	pop    esi
c001ab76:	5f                   	pop    edi
c001ab77:	c3                   	ret    

c001ab78 <Reg::readInt(char*, char*, int*)>:
c001ab78:	55                   	push   ebp
c001ab79:	57                   	push   edi
c001ab7a:	56                   	push   esi
c001ab7b:	53                   	push   ebx
c001ab7c:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ab82:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ab86:	57                   	push   edi
c001ab87:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ab8e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ab95:	e8 a7 ff ff ff       	call   c001ab41 <Reg::getLine(char*, char*, char*)>
c001ab9a:	83 c4 10             	add    esp,0x10
c001ab9d:	84 c0                	test   al,al
c001ab9f:	0f 84 b3 00 00 00    	je     c001ac58 <Reg::readInt(char*, char*, int*)+0xe0>
c001aba5:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aba9:	80 fa 2b             	cmp    dl,0x2b
c001abac:	74 0c                	je     c001abba <Reg::readInt(char*, char*, int*)+0x42>
c001abae:	80 fa 2d             	cmp    dl,0x2d
c001abb1:	75 0e                	jne    c001abc1 <Reg::readInt(char*, char*, int*)+0x49>
c001abb3:	ba 01 00 00 00       	mov    edx,0x1
c001abb8:	eb 0b                	jmp    c001abc5 <Reg::readInt(char*, char*, int*)+0x4d>
c001abba:	ba 01 00 00 00       	mov    edx,0x1
c001abbf:	eb 02                	jmp    c001abc3 <Reg::readInt(char*, char*, int*)+0x4b>
c001abc1:	31 d2                	xor    edx,edx
c001abc3:	31 c0                	xor    eax,eax
c001abc5:	be 0a 00 00 00       	mov    esi,0xa
c001abca:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001abcf:	75 20                	jne    c001abf1 <Reg::readInt(char*, char*, int*)+0x79>
c001abd1:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001abd5:	80 f9 78             	cmp    cl,0x78
c001abd8:	75 0a                	jne    c001abe4 <Reg::readInt(char*, char*, int*)+0x6c>
c001abda:	83 c2 02             	add    edx,0x2
c001abdd:	be 10 00 00 00       	mov    esi,0x10
c001abe2:	eb 0d                	jmp    c001abf1 <Reg::readInt(char*, char*, int*)+0x79>
c001abe4:	80 f9 62             	cmp    cl,0x62
c001abe7:	75 08                	jne    c001abf1 <Reg::readInt(char*, char*, int*)+0x79>
c001abe9:	83 c2 02             	add    edx,0x2
c001abec:	be 02 00 00 00       	mov    esi,0x2
c001abf1:	01 d7                	add    edi,edx
c001abf3:	31 d2                	xor    edx,edx
c001abf5:	8a 1f                	mov    bl,BYTE PTR [edi]
c001abf7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001abfb:	80 fb 0d             	cmp    bl,0xd
c001abfe:	0f 94 c3             	sete   bl
c001ac01:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ac06:	0f 94 c1             	sete   cl
c001ac09:	08 cb                	or     bl,cl
c001ac0b:	75 3a                	jne    c001ac47 <Reg::readInt(char*, char*, int*)+0xcf>
c001ac0d:	0f af d6             	imul   edx,esi
c001ac10:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ac15:	83 fe 10             	cmp    esi,0x10
c001ac18:	75 26                	jne    c001ac40 <Reg::readInt(char*, char*, int*)+0xc8>
c001ac1a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ac1e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ac21:	89 e9                	mov    ecx,ebp
c001ac23:	80 f9 05             	cmp    cl,0x5
c001ac26:	77 06                	ja     c001ac2e <Reg::readInt(char*, char*, int*)+0xb6>
c001ac28:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ac2c:	eb 16                	jmp    c001ac44 <Reg::readInt(char*, char*, int*)+0xcc>
c001ac2e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ac32:	83 e9 61             	sub    ecx,0x61
c001ac35:	80 f9 05             	cmp    cl,0x5
c001ac38:	77 06                	ja     c001ac40 <Reg::readInt(char*, char*, int*)+0xc8>
c001ac3a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ac3e:	eb 04                	jmp    c001ac44 <Reg::readInt(char*, char*, int*)+0xcc>
c001ac40:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ac44:	47                   	inc    edi
c001ac45:	eb ae                	jmp    c001abf5 <Reg::readInt(char*, char*, int*)+0x7d>
c001ac47:	84 c0                	test   al,al
c001ac49:	74 02                	je     c001ac4d <Reg::readInt(char*, char*, int*)+0xd5>
c001ac4b:	f7 da                	neg    edx
c001ac4d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ac54:	89 10                	mov    DWORD PTR [eax],edx
c001ac56:	88 d8                	mov    al,bl
c001ac58:	81 c4 ec 00 00 00    	add    esp,0xec
c001ac5e:	5b                   	pop    ebx
c001ac5f:	5e                   	pop    esi
c001ac60:	5f                   	pop    edi
c001ac61:	5d                   	pop    ebp
c001ac62:	c3                   	ret    

c001ac63 <Reg::readString(char*, char*, char*, int)>:
c001ac63:	57                   	push   edi
c001ac64:	56                   	push   esi
c001ac65:	53                   	push   ebx
c001ac66:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ac6c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ac73:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ac77:	57                   	push   edi
c001ac78:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ac7f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ac86:	e8 b6 fe ff ff       	call   c001ab41 <Reg::getLine(char*, char*, char*)>
c001ac8b:	83 c4 10             	add    esp,0x10
c001ac8e:	89 c6                	mov    esi,eax
c001ac90:	84 c0                	test   al,al
c001ac92:	74 44                	je     c001acd8 <Reg::readString(char*, char*, char*, int)+0x75>
c001ac94:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ac9b:	31 c0                	xor    eax,eax
c001ac9d:	4a                   	dec    edx
c001ac9e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001aca1:	84 c9                	test   cl,cl
c001aca3:	74 0f                	je     c001acb4 <Reg::readString(char*, char*, char*, int)+0x51>
c001aca5:	39 c2                	cmp    edx,eax
c001aca7:	7e 0b                	jle    c001acb4 <Reg::readString(char*, char*, char*, int)+0x51>
c001aca9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001acac:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001acb1:	40                   	inc    eax
c001acb2:	eb ea                	jmp    c001ac9e <Reg::readString(char*, char*, char*, int)+0x3b>
c001acb4:	83 ec 0c             	sub    esp,0xc
c001acb7:	53                   	push   ebx
c001acb8:	e8 af 5a fe ff       	call   c000076c <strlen>
c001acbd:	83 c4 10             	add    esp,0x10
c001acc0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001acc5:	75 11                	jne    c001acd8 <Reg::readString(char*, char*, char*, int)+0x75>
c001acc7:	83 ec 0c             	sub    esp,0xc
c001acca:	53                   	push   ebx
c001accb:	e8 9c 5a fe ff       	call   c000076c <strlen>
c001acd0:	83 c4 10             	add    esp,0x10
c001acd3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001acd8:	81 c4 d0 00 00 00    	add    esp,0xd0
c001acde:	89 f0                	mov    eax,esi
c001ace0:	5b                   	pop    ebx
c001ace1:	5e                   	pop    esi
c001ace2:	5f                   	pop    edi
c001ace3:	c3                   	ret    

c001ace4 <Reg::readBool(char*, char*, bool*)>:
c001ace4:	83 ec 20             	sub    esp,0x20
c001ace7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aceb:	50                   	push   eax
c001acec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acf4:	e8 7f fe ff ff       	call   c001ab78 <Reg::readInt(char*, char*, int*)>
c001acf9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001acfe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad02:	0f 95 02             	setne  BYTE PTR [edx]
c001ad05:	83 c4 2c             	add    esp,0x2c
c001ad08:	c3                   	ret    

c001ad09 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ad09:	53                   	push   ebx
c001ad0a:	83 ec 1c             	sub    esp,0x1c
c001ad0d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ad11:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ad15:	50                   	push   eax
c001ad16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad1e:	e8 c1 ff ff ff       	call   c001ace4 <Reg::readBool(char*, char*, bool*)>
c001ad23:	83 c4 10             	add    esp,0x10
c001ad26:	84 c0                	test   al,al
c001ad28:	74 04                	je     c001ad2e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ad2a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ad2e:	88 d8                	mov    al,bl
c001ad30:	83 c4 18             	add    esp,0x18
c001ad33:	5b                   	pop    ebx
c001ad34:	c3                   	ret    

c001ad35 <Reg::readIntWithDefault(char*, char*, int)>:
c001ad35:	53                   	push   ebx
c001ad36:	83 ec 1c             	sub    esp,0x1c
c001ad39:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad3d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad41:	50                   	push   eax
c001ad42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad4a:	e8 29 fe ff ff       	call   c001ab78 <Reg::readInt(char*, char*, int*)>
c001ad4f:	83 c4 10             	add    esp,0x10
c001ad52:	84 c0                	test   al,al
c001ad54:	74 04                	je     c001ad5a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ad56:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ad5a:	89 d8                	mov    eax,ebx
c001ad5c:	83 c4 18             	add    esp,0x18
c001ad5f:	5b                   	pop    ebx
c001ad60:	c3                   	ret    

c001ad61 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ad61:	57                   	push   edi
c001ad62:	56                   	push   esi
c001ad63:	56                   	push   esi
c001ad64:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ad68:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ad6c:	56                   	push   esi
c001ad6d:	57                   	push   edi
c001ad6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad76:	e8 e8 fe ff ff       	call   c001ac63 <Reg::readString(char*, char*, char*, int)>
c001ad7b:	83 c4 10             	add    esp,0x10
c001ad7e:	84 c0                	test   al,al
c001ad80:	75 1a                	jne    c001ad9c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ad82:	51                   	push   ecx
c001ad83:	56                   	push   esi
c001ad84:	6a 00                	push   0x0
c001ad86:	57                   	push   edi
c001ad87:	e8 c4 59 fe ff       	call   c0000750 <memset>
c001ad8c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ad8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ad93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad95:	83 c4 10             	add    esp,0x10
c001ad98:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad9c:	89 f8                	mov    eax,edi
c001ad9e:	5a                   	pop    edx
c001ad9f:	5e                   	pop    esi
c001ada0:	5f                   	pop    edi
c001ada1:	c3                   	ret    

c001ada2 <Sys::eject(regs*)>:
c001ada2:	83 ec 0c             	sub    esp,0xc
c001ada5:	83 ca ff             	or     edx,0xffffffff
c001ada8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adac:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001adaf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001adb4:	83 e9 41             	sub    ecx,0x41
c001adb7:	83 f9 19             	cmp    ecx,0x19
c001adba:	77 18                	ja     c001add4 <Sys::eject(regs*)+0x32>
c001adbc:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c001adc3:	85 c9                	test   ecx,ecx
c001adc5:	74 0d                	je     c001add4 <Sys::eject(regs*)+0x32>
c001adc7:	83 ec 0c             	sub    esp,0xc
c001adca:	51                   	push   ecx
c001adcb:	e8 be b2 ff ff       	call   c001608e <LogicalDisk::eject()>
c001add0:	83 c4 10             	add    esp,0x10
c001add3:	99                   	cdq    
c001add4:	83 c4 0c             	add    esp,0xc
c001add7:	c3                   	ret    

c001add8 <Sys::exit(regs*)>:
c001add8:	83 ec 18             	sub    esp,0x18
c001addb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001addf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ade2:	e8 d3 35 00 00       	call   c001e3ba <terminateTask(int)>
c001ade7:	83 c8 ff             	or     eax,0xffffffff
c001adea:	83 c4 1c             	add    esp,0x1c
c001aded:	89 c2                	mov    edx,eax
c001adef:	c3                   	ret    

c001adf0 <Sys::getCwd(regs*)>:
c001adf0:	83 ec 10             	sub    esp,0x10
c001adf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adf7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001adfa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001adfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae02:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae05:	e8 f4 7c ff ff       	call   c0012afe <Fs::getcwd(Process*, char*, int)>
c001ae0a:	83 c4 1c             	add    esp,0x1c
c001ae0d:	99                   	cdq    
c001ae0e:	c3                   	ret    

c001ae0f <Sys::getPID(regs*)>:
c001ae0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae17:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae19:	99                   	cdq    
c001ae1a:	c3                   	ret    

c001ae1b <Sys::getRAMData(regs*)>:
c001ae1b:	8b 0d d4 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddd4
c001ae21:	69 05 d0 dd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002ddd0,0xc8
c001ae2b:	99                   	cdq    
c001ae2c:	f7 f9                	idiv   ecx
c001ae2e:	c1 e0 18             	shl    eax,0x18
c001ae31:	09 c8                	or     eax,ecx
c001ae33:	99                   	cdq    
c001ae34:	c3                   	ret    

c001ae35 <Sys::getVGAPtr(regs*)>:
c001ae35:	55                   	push   ebp
c001ae36:	57                   	push   edi
c001ae37:	56                   	push   esi
c001ae38:	53                   	push   ebx
c001ae39:	83 ec 18             	sub    esp,0x18
c001ae3c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ae40:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ae43:	e8 be 30 00 00       	call   c001df06 <Thr::processFromPID(int)>
c001ae48:	83 c4 10             	add    esp,0x10
c001ae4b:	89 c1                	mov    ecx,eax
c001ae4d:	b8 01 00 00 00       	mov    eax,0x1
c001ae52:	85 c9                	test   ecx,ecx
c001ae54:	74 59                	je     c001aeaf <Sys::getVGAPtr(regs*)+0x7a>
c001ae56:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ae5c:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ae60:	74 0c                	je     c001ae6e <Sys::getVGAPtr(regs*)+0x39>
c001ae62:	83 ec 0c             	sub    esp,0xc
c001ae65:	53                   	push   ebx
c001ae66:	e8 e8 54 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001ae6b:	83 c4 10             	add    esp,0x10
c001ae6e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ae71:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ae74:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ae79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae7b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ae7e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ae81:	81 c3 82 00 00 00    	add    ebx,0x82
c001ae87:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ae8d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ae90:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ae93:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ae99:	50                   	push   eax
c001ae9a:	50                   	push   eax
c001ae9b:	53                   	push   ebx
c001ae9c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ae9f:	05 a8 0f 00 00       	add    eax,0xfa8
c001aea4:	50                   	push   eax
c001aea5:	e8 62 59 fe ff       	call   c000080c <strcpy>
c001aeaa:	83 c4 10             	add    esp,0x10
c001aead:	31 c0                	xor    eax,eax
c001aeaf:	83 c4 0c             	add    esp,0xc
c001aeb2:	31 d2                	xor    edx,edx
c001aeb4:	5b                   	pop    ebx
c001aeb5:	5e                   	pop    esi
c001aeb6:	5f                   	pop    edi
c001aeb7:	5d                   	pop    ebp
c001aeb8:	c3                   	ret    

c001aeb9 <Sys::loadDLL(regs*)>:
c001aeb9:	56                   	push   esi
c001aeba:	53                   	push   ebx
c001aebb:	31 d2                	xor    edx,edx
c001aebd:	51                   	push   ecx
c001aebe:	b8 01 00 00 00       	mov    eax,0x1
c001aec3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aec7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001aecb:	0f 84 8c 00 00 00    	je     c001af5d <Sys::loadDLL(regs*)+0xa4>
c001aed1:	83 ec 0c             	sub    esp,0xc
c001aed4:	68 14 01 00 00       	push   0x114
c001aed9:	e8 bb 46 ff ff       	call   c000f599 <malloc>
c001aede:	83 c4 0c             	add    esp,0xc
c001aee1:	89 c3                	mov    ebx,eax
c001aee3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aee8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aeeb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001aeee:	53                   	push   ebx
c001aeef:	e8 08 7e ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001aef4:	83 c4 10             	add    esp,0x10
c001aef7:	31 d2                	xor    edx,edx
c001aef9:	b8 02 00 00 00       	mov    eax,0x2
c001aefe:	85 db                	test   ebx,ebx
c001af00:	74 5b                	je     c001af5d <Sys::loadDLL(regs*)+0xa4>
c001af02:	83 ec 0c             	sub    esp,0xc
c001af05:	53                   	push   ebx
c001af06:	e8 c3 80 ff ff       	call   c0012fce <File::exists()>
c001af0b:	83 c4 10             	add    esp,0x10
c001af0e:	84 c0                	test   al,al
c001af10:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af12:	75 11                	jne    c001af25 <Sys::loadDLL(regs*)+0x6c>
c001af14:	83 ec 0c             	sub    esp,0xc
c001af17:	53                   	push   ebx
c001af18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af1b:	83 c4 10             	add    esp,0x10
c001af1e:	b8 03 00 00 00       	mov    eax,0x3
c001af23:	eb 36                	jmp    c001af5b <Sys::loadDLL(regs*)+0xa2>
c001af25:	83 ec 0c             	sub    esp,0xc
c001af28:	53                   	push   ebx
c001af29:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af2c:	58                   	pop    eax
c001af2d:	5a                   	pop    edx
c001af2e:	6a 00                	push   0x0
c001af30:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001af33:	e8 0e 22 00 00       	call   c001d146 <Thr::loadDLL(char const*, bool)>
c001af38:	83 c4 10             	add    esp,0x10
c001af3b:	89 c1                	mov    ecx,eax
c001af3d:	31 d2                	xor    edx,edx
c001af3f:	b8 04 00 00 00       	mov    eax,0x4
c001af44:	85 c9                	test   ecx,ecx
c001af46:	74 15                	je     c001af5d <Sys::loadDLL(regs*)+0xa4>
c001af48:	53                   	push   ebx
c001af49:	53                   	push   ebx
c001af4a:	ff 35 88 dd 02 c0    	push   DWORD PTR ds:0xc002dd88
c001af50:	51                   	push   ecx
c001af51:	e8 21 24 00 00       	call   c001d377 <Thr::executeDLL(unsigned long, void*)>
c001af56:	83 c4 10             	add    esp,0x10
c001af59:	31 c0                	xor    eax,eax
c001af5b:	31 d2                	xor    edx,edx
c001af5d:	59                   	pop    ecx
c001af5e:	5b                   	pop    ebx
c001af5f:	5e                   	pop    esi
c001af60:	c3                   	ret    

c001af61 <Sys::read(regs*)>:
c001af61:	57                   	push   edi
c001af62:	56                   	push   esi
c001af63:	53                   	push   ebx
c001af64:	83 ec 10             	sub    esp,0x10
c001af67:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af6e:	83 f8 02             	cmp    eax,0x2
c001af71:	77 10                	ja     c001af83 <Sys::read(regs*)+0x22>
c001af73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af78:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af7b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001af81:	eb 0e                	jmp    c001af91 <Sys::read(regs*)+0x30>
c001af83:	83 ec 0c             	sub    esp,0xc
c001af86:	50                   	push   eax
c001af87:	e8 3d 61 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001af8c:	83 c4 10             	add    esp,0x10
c001af8f:	89 c1                	mov    ecx,eax
c001af91:	83 c8 ff             	or     eax,0xffffffff
c001af94:	85 c9                	test   ecx,ecx
c001af96:	89 c2                	mov    edx,eax
c001af98:	74 28                	je     c001afc2 <Sys::read(regs*)+0x61>
c001af9a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001afa2:	31 ff                	xor    edi,edi
c001afa4:	83 ec 0c             	sub    esp,0xc
c001afa7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001afa9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001afad:	52                   	push   edx
c001afae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001afb1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001afb4:	57                   	push   edi
c001afb5:	56                   	push   esi
c001afb6:	51                   	push   ecx
c001afb7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001afba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001afbe:	83 c4 20             	add    esp,0x20
c001afc1:	99                   	cdq    
c001afc2:	83 c4 10             	add    esp,0x10
c001afc5:	5b                   	pop    ebx
c001afc6:	5e                   	pop    esi
c001afc7:	5f                   	pop    edi
c001afc8:	c3                   	ret    

c001afc9 <Sys::sbrk(regs*)>:
c001afc9:	56                   	push   esi
c001afca:	53                   	push   ebx
c001afcb:	50                   	push   eax
c001afcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afd5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afd8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001afdb:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001afe1:	85 db                	test   ebx,ebx
c001afe3:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001afe6:	74 02                	je     c001afea <Sys::sbrk(regs*)+0x21>
c001afe8:	79 06                	jns    c001aff0 <Sys::sbrk(regs*)+0x27>
c001afea:	89 f0                	mov    eax,esi
c001afec:	31 d2                	xor    edx,edx
c001afee:	eb 2a                	jmp    c001b01a <Sys::sbrk(regs*)+0x51>
c001aff0:	83 c8 ff             	or     eax,0xffffffff
c001aff3:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001aff9:	89 c2                	mov    edx,eax
c001affb:	77 1d                	ja     c001b01a <Sys::sbrk(regs*)+0x51>
c001affd:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b003:	50                   	push   eax
c001b004:	c1 ea 0c             	shr    edx,0xc
c001b007:	68 07 0c 00 00       	push   0xc07
c001b00c:	52                   	push   edx
c001b00d:	51                   	push   ecx
c001b00e:	e8 61 6b ff ff       	call   c0011b74 <VAS::allocatePages(int, int)>
c001b013:	89 f0                	mov    eax,esi
c001b015:	31 d2                	xor    edx,edx
c001b017:	83 c4 10             	add    esp,0x10
c001b01a:	59                   	pop    ecx
c001b01b:	5b                   	pop    ebx
c001b01c:	5e                   	pop    esi
c001b01d:	c3                   	ret    

c001b01e <Sys::setCwd(regs*)>:
c001b01e:	83 ec 14             	sub    esp,0x14
c001b021:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b025:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b028:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b02d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b030:	e8 38 80 ff ff       	call   c001306d <Fs::setcwd(Process*, char*)>
c001b035:	83 c4 1c             	add    esp,0x1c
c001b038:	99                   	cdq    
c001b039:	c3                   	ret    

c001b03a <Sys::setTime(regs*)>:
c001b03a:	55                   	push   ebp
c001b03b:	31 c9                	xor    ecx,ecx
c001b03d:	57                   	push   edi
c001b03e:	bd 0c 00 00 00       	mov    ebp,0xc
c001b043:	56                   	push   esi
c001b044:	53                   	push   ebx
c001b045:	31 db                	xor    ebx,ebx
c001b047:	83 ec 10             	sub    esp,0x10
c001b04a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b04e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b051:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b054:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b057:	89 c2                	mov    edx,eax
c001b059:	66 81 ef 6c 07       	sub    di,0x76c
c001b05e:	83 e2 1f             	and    edx,0x1f
c001b061:	c1 e7 10             	shl    edi,0x10
c001b064:	42                   	inc    edx
c001b065:	c1 e8 05             	shr    eax,0x5
c001b068:	88 d1                	mov    cl,dl
c001b06a:	31 d2                	xor    edx,edx
c001b06c:	f7 f5                	div    ebp
c001b06e:	89 dd                	mov    ebp,ebx
c001b070:	88 d5                	mov    ch,dl
c001b072:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b078:	0f b7 c1             	movzx  eax,cx
c001b07b:	31 d2                	xor    edx,edx
c001b07d:	09 f8                	or     eax,edi
c001b07f:	bf 3c 00 00 00       	mov    edi,0x3c
c001b084:	89 c1                	mov    ecx,eax
c001b086:	89 f0                	mov    eax,esi
c001b088:	f7 f7                	div    edi
c001b08a:	c1 e2 10             	shl    edx,0x10
c001b08d:	09 d5                	or     ebp,edx
c001b08f:	31 d2                	xor    edx,edx
c001b091:	89 eb                	mov    ebx,ebp
c001b093:	f7 f7                	div    edi
c001b095:	bf 10 0e 00 00       	mov    edi,0xe10
c001b09a:	88 d7                	mov    bh,dl
c001b09c:	89 f0                	mov    eax,esi
c001b09e:	31 d2                	xor    edx,edx
c001b0a0:	f7 f7                	div    edi
c001b0a2:	bf 18 00 00 00       	mov    edi,0x18
c001b0a7:	31 d2                	xor    edx,edx
c001b0a9:	f7 f7                	div    edi
c001b0ab:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001b0b0:	88 d3                	mov    bl,dl
c001b0b2:	53                   	push   ebx
c001b0b3:	51                   	push   ecx
c001b0b4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b0ba:	e8 f7 87 ff ff       	call   c00138b6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b0bf:	83 c4 1c             	add    esp,0x1c
c001b0c2:	83 f0 01             	xor    eax,0x1
c001b0c5:	5b                   	pop    ebx
c001b0c6:	0f b6 c0             	movzx  eax,al
c001b0c9:	5e                   	pop    esi
c001b0ca:	31 d2                	xor    edx,edx
c001b0cc:	5f                   	pop    edi
c001b0cd:	5d                   	pop    ebp
c001b0ce:	c3                   	ret    

c001b0cf <Sys::timezone(regs*)>:
c001b0cf:	53                   	push   ebx
c001b0d0:	83 ec 08             	sub    esp,0x8
c001b0d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0d7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b0db:	75 17                	jne    c001b0f4 <Sys::timezone(regs*)+0x25>
c001b0dd:	83 ec 0c             	sub    esp,0xc
c001b0e0:	68 11 bc 02 c0       	push   0xc002bc11
c001b0e5:	e8 b3 76 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001b0ea:	83 c8 ff             	or     eax,0xffffffff
c001b0ed:	83 c4 10             	add    esp,0x10
c001b0f0:	89 c2                	mov    edx,eax
c001b0f2:	eb 20                	jmp    c001b114 <Sys::timezone(regs*)+0x45>
c001b0f4:	83 ec 0c             	sub    esp,0xc
c001b0f7:	68 26 bc 02 c0       	push   0xc002bc26
c001b0fc:	e8 9c 76 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001b101:	58                   	pop    eax
c001b102:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b105:	e8 0e 85 ff ff       	call   c0013618 <User::loadClockSettings(int)>
c001b10a:	83 c4 10             	add    esp,0x10
c001b10d:	b8 01 00 00 00       	mov    eax,0x1
c001b112:	31 d2                	xor    edx,edx
c001b114:	83 c4 08             	add    esp,0x8
c001b117:	5b                   	pop    ebx
c001b118:	c3                   	ret    

c001b119 <Sys::write(regs*)>:
c001b119:	57                   	push   edi
c001b11a:	56                   	push   esi
c001b11b:	53                   	push   ebx
c001b11c:	83 ec 10             	sub    esp,0x10
c001b11f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b123:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b126:	83 f8 02             	cmp    eax,0x2
c001b129:	77 10                	ja     c001b13b <Sys::write(regs*)+0x22>
c001b12b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b130:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b133:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b139:	eb 0e                	jmp    c001b149 <Sys::write(regs*)+0x30>
c001b13b:	83 ec 0c             	sub    esp,0xc
c001b13e:	50                   	push   eax
c001b13f:	e8 85 5f ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b144:	83 c4 10             	add    esp,0x10
c001b147:	89 c1                	mov    ecx,eax
c001b149:	83 c8 ff             	or     eax,0xffffffff
c001b14c:	85 c9                	test   ecx,ecx
c001b14e:	89 c2                	mov    edx,eax
c001b150:	74 28                	je     c001b17a <Sys::write(regs*)+0x61>
c001b152:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b15a:	31 ff                	xor    edi,edi
c001b15c:	83 ec 0c             	sub    esp,0xc
c001b15f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b161:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b165:	52                   	push   edx
c001b166:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b169:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b16c:	57                   	push   edi
c001b16d:	56                   	push   esi
c001b16e:	51                   	push   ecx
c001b16f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b172:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b176:	83 c4 20             	add    esp,0x20
c001b179:	99                   	cdq    
c001b17a:	83 c4 10             	add    esp,0x10
c001b17d:	5b                   	pop    ebx
c001b17e:	5e                   	pop    esi
c001b17f:	5f                   	pop    edi
c001b180:	c3                   	ret    

c001b181 <Sys::wsbe(regs*)>:
c001b181:	57                   	push   edi
c001b182:	b9 0b 00 00 00       	mov    ecx,0xb
c001b187:	56                   	push   esi
c001b188:	be 65 bc 02 c0       	mov    esi,0xc002bc65
c001b18d:	53                   	push   ebx
c001b18e:	83 ec 30             	sub    esp,0x30
c001b191:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b195:	fc                   	cld    
c001b196:	83 ec 0c             	sub    esp,0xc
c001b199:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b19b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b19f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1a7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b1ad:	8b 06                	mov    eax,DWORD PTR [esi]
c001b1af:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b1b2:	57                   	push   edi
c001b1b3:	e8 b4 55 fe ff       	call   c000076c <strlen>
c001b1b8:	5a                   	pop    edx
c001b1b9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b1bd:	52                   	push   edx
c001b1be:	31 d2                	xor    edx,edx
c001b1c0:	57                   	push   edi
c001b1c1:	52                   	push   edx
c001b1c2:	50                   	push   eax
c001b1c3:	56                   	push   esi
c001b1c4:	ff d3                	call   ebx
c001b1c6:	83 c4 14             	add    esp,0x14
c001b1c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b1cd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b1d0:	e8 e5 31 00 00       	call   c001e3ba <terminateTask(int)>
c001b1d5:	83 c4 40             	add    esp,0x40
c001b1d8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b1dd:	5b                   	pop    ebx
c001b1de:	31 d2                	xor    edx,edx
c001b1e0:	5e                   	pop    esi
c001b1e1:	5f                   	pop    edi
c001b1e2:	c3                   	ret    

c001b1e3 <Sys::yield(regs*)>:
c001b1e3:	57                   	push   edi
c001b1e4:	56                   	push   esi
c001b1e5:	53                   	push   ebx
c001b1e6:	fa                   	cli    
c001b1e7:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001b1ed:	e8 19 29 00 00       	call   c001db0b <schedule()>
c001b1f2:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001b1f7:	48                   	dec    eax
c001b1f8:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001b1fd:	75 01                	jne    c001b200 <Sys::yield(regs*)+0x1d>
c001b1ff:	fb                   	sti    
c001b200:	8b 35 f0 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3f0
c001b206:	8b 3d f4 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e3f4
c001b20c:	89 f0                	mov    eax,esi
c001b20e:	89 fb                	mov    ebx,edi
c001b210:	89 f1                	mov    ecx,esi
c001b212:	c1 e0 07             	shl    eax,0x7
c001b215:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b219:	25 80 30 0f 00       	and    eax,0xf3080
c001b21e:	c1 eb 17             	shr    ebx,0x17
c001b221:	31 c8                	xor    eax,ecx
c001b223:	89 da                	mov    edx,ebx
c001b225:	5b                   	pop    ebx
c001b226:	5e                   	pop    esi
c001b227:	5f                   	pop    edi
c001b228:	c3                   	ret    

c001b229 <sysCallSeekDir(regs*)>:
c001b229:	31 c0                	xor    eax,eax
c001b22b:	31 d2                	xor    edx,edx
c001b22d:	c3                   	ret    

c001b22e <sysCallTellDir(regs*)>:
c001b22e:	31 c0                	xor    eax,eax
c001b230:	31 d2                	xor    edx,edx
c001b232:	c3                   	ret    

c001b233 <sysCallVerify(regs*)>:
c001b233:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b237:	31 d2                	xor    edx,edx
c001b239:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b23c:	c3                   	ret    

c001b23d <sysCallGetArgc(regs*)>:
c001b23d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b242:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b245:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b24b:	99                   	cdq    
c001b24c:	c3                   	ret    

c001b24d <sysFormatDisk(regs*)>:
c001b24d:	56                   	push   esi
c001b24e:	53                   	push   ebx
c001b24f:	53                   	push   ebx
c001b250:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b254:	8b 1d f4 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002def4
c001b25a:	eb 25                	jmp    c001b281 <sysFormatDisk(regs*)+0x34>
c001b25c:	83 ec 0c             	sub    esp,0xc
c001b25f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b262:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b264:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b267:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b26a:	50                   	push   eax
c001b26b:	ff 34 85 80 e3 02 c0 	push   DWORD PTR [eax*4-0x3ffd1c80]
c001b272:	53                   	push   ebx
c001b273:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b276:	83 c4 20             	add    esp,0x20
c001b279:	83 f8 08             	cmp    eax,0x8
c001b27c:	75 12                	jne    c001b290 <sysFormatDisk(regs*)+0x43>
c001b27e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b281:	85 db                	test   ebx,ebx
c001b283:	75 d7                	jne    c001b25c <sysFormatDisk(regs*)+0xf>
c001b285:	59                   	pop    ecx
c001b286:	b8 03 00 00 00       	mov    eax,0x3
c001b28b:	31 d2                	xor    edx,edx
c001b28d:	5b                   	pop    ebx
c001b28e:	5e                   	pop    esi
c001b28f:	c3                   	ret    
c001b290:	85 c0                	test   eax,eax
c001b292:	74 1b                	je     c001b2af <sysFormatDisk(regs*)+0x62>
c001b294:	83 f8 09             	cmp    eax,0x9
c001b297:	74 0b                	je     c001b2a4 <sysFormatDisk(regs*)+0x57>
c001b299:	59                   	pop    ecx
c001b29a:	b8 02 00 00 00       	mov    eax,0x2
c001b29f:	31 d2                	xor    edx,edx
c001b2a1:	5b                   	pop    ebx
c001b2a2:	5e                   	pop    esi
c001b2a3:	c3                   	ret    
c001b2a4:	59                   	pop    ecx
c001b2a5:	b8 01 00 00 00       	mov    eax,0x1
c001b2aa:	31 d2                	xor    edx,edx
c001b2ac:	5b                   	pop    ebx
c001b2ad:	5e                   	pop    esi
c001b2ae:	c3                   	ret    
c001b2af:	59                   	pop    ecx
c001b2b0:	31 c0                	xor    eax,eax
c001b2b2:	31 d2                	xor    edx,edx
c001b2b4:	5b                   	pop    ebx
c001b2b5:	5e                   	pop    esi
c001b2b6:	c3                   	ret    

c001b2b7 <sysSetDiskVolumeLabel(regs*)>:
c001b2b7:	56                   	push   esi
c001b2b8:	53                   	push   ebx
c001b2b9:	53                   	push   ebx
c001b2ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2be:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b2c1:	83 f8 19             	cmp    eax,0x19
c001b2c4:	77 29                	ja     c001b2ef <sysSetDiskVolumeLabel(regs*)+0x38>
c001b2c6:	8b 0c 85 80 e3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1c80]
c001b2cd:	85 c9                	test   ecx,ecx
c001b2cf:	74 1e                	je     c001b2ef <sysSetDiskVolumeLabel(regs*)+0x38>
c001b2d1:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b2d4:	85 d2                	test   edx,edx
c001b2d6:	74 17                	je     c001b2ef <sysSetDiskVolumeLabel(regs*)+0x38>
c001b2d8:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b2de:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b2e0:	52                   	push   edx
c001b2e1:	50                   	push   eax
c001b2e2:	51                   	push   ecx
c001b2e3:	53                   	push   ebx
c001b2e4:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b2e7:	83 c4 10             	add    esp,0x10
c001b2ea:	99                   	cdq    
c001b2eb:	59                   	pop    ecx
c001b2ec:	5b                   	pop    ebx
c001b2ed:	5e                   	pop    esi
c001b2ee:	c3                   	ret    
c001b2ef:	59                   	pop    ecx
c001b2f0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2fa:	5b                   	pop    ebx
c001b2fb:	5e                   	pop    esi
c001b2fc:	c3                   	ret    

c001b2fd <sysGetDiskVolumeLabel(regs*)>:
c001b2fd:	57                   	push   edi
c001b2fe:	56                   	push   esi
c001b2ff:	53                   	push   ebx
c001b300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b304:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b307:	83 fa 19             	cmp    edx,0x19
c001b30a:	77 34                	ja     c001b340 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b30c:	8b 0c 95 80 e3 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1c80]
c001b313:	85 c9                	test   ecx,ecx
c001b315:	74 29                	je     c001b340 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b317:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b31a:	85 db                	test   ebx,ebx
c001b31c:	74 22                	je     c001b340 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b31e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b321:	85 c0                	test   eax,eax
c001b323:	74 1b                	je     c001b340 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b325:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b32b:	83 ec 0c             	sub    esp,0xc
c001b32e:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b330:	50                   	push   eax
c001b331:	53                   	push   ebx
c001b332:	52                   	push   edx
c001b333:	51                   	push   ecx
c001b334:	56                   	push   esi
c001b335:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b338:	83 c4 20             	add    esp,0x20
c001b33b:	99                   	cdq    
c001b33c:	5b                   	pop    ebx
c001b33d:	5e                   	pop    esi
c001b33e:	5f                   	pop    edi
c001b33f:	c3                   	ret    
c001b340:	5b                   	pop    ebx
c001b341:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b346:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b34b:	5e                   	pop    esi
c001b34c:	5f                   	pop    edi
c001b34d:	c3                   	ret    

c001b34e <sysShutdown(regs*)>:
c001b34e:	83 ec 0c             	sub    esp,0xc
c001b351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b355:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b358:	85 c0                	test   eax,eax
c001b35a:	74 18                	je     c001b374 <sysShutdown(regs*)+0x26>
c001b35c:	83 f8 01             	cmp    eax,0x1
c001b35f:	74 38                	je     c001b399 <sysShutdown(regs*)+0x4b>
c001b361:	83 f8 02             	cmp    eax,0x2
c001b364:	74 24                	je     c001b38a <sysShutdown(regs*)+0x3c>
c001b366:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b36b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b370:	83 c4 0c             	add    esp,0xc
c001b373:	c3                   	ret    
c001b374:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001b379:	8b 10                	mov    edx,DWORD PTR [eax]
c001b37b:	6a 00                	push   0x0
c001b37d:	6a 00                	push   0x0
c001b37f:	6a 00                	push   0x0
c001b381:	50                   	push   eax
c001b382:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b385:	83 c4 10             	add    esp,0x10
c001b388:	eb dc                	jmp    c001b366 <sysShutdown(regs*)+0x18>
c001b38a:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001b38f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b391:	6a 00                	push   0x0
c001b393:	6a 00                	push   0x0
c001b395:	6a 01                	push   0x1
c001b397:	eb e8                	jmp    c001b381 <sysShutdown(regs*)+0x33>
c001b399:	a1 00 e4 02 c0       	mov    eax,ds:0xc002e400
c001b39e:	85 c0                	test   eax,eax
c001b3a0:	74 02                	je     c001b3a4 <sysShutdown(regs*)+0x56>
c001b3a2:	ff d0                	call   eax
c001b3a4:	31 c0                	xor    eax,eax
c001b3a6:	31 d2                	xor    edx,edx
c001b3a8:	83 c4 0c             	add    esp,0xc
c001b3ab:	c3                   	ret    

c001b3ac <sysCallRealpath(regs*)>:
c001b3ac:	83 ec 0c             	sub    esp,0xc
c001b3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3b3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b3b6:	85 d2                	test   edx,edx
c001b3b8:	74 07                	je     c001b3c1 <sysCallRealpath(regs*)+0x15>
c001b3ba:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b3bd:	85 c0                	test   eax,eax
c001b3bf:	75 0b                	jne    c001b3cc <sysCallRealpath(regs*)+0x20>
c001b3c1:	b8 01 00 00 00       	mov    eax,0x1
c001b3c6:	31 d2                	xor    edx,edx
c001b3c8:	83 c4 0c             	add    esp,0xc
c001b3cb:	c3                   	ret    
c001b3cc:	51                   	push   ecx
c001b3cd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b3d3:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b3d6:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b3dc:	51                   	push   ecx
c001b3dd:	52                   	push   edx
c001b3de:	50                   	push   eax
c001b3df:	e8 6e 77 ff ff       	call   c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b3e4:	83 c4 10             	add    esp,0x10
c001b3e7:	31 c0                	xor    eax,eax
c001b3e9:	31 d2                	xor    edx,edx
c001b3eb:	83 c4 0c             	add    esp,0xc
c001b3ee:	c3                   	ret    

c001b3ef <sysCallReadDir(regs*)>:
c001b3ef:	53                   	push   ebx
c001b3f0:	83 ec 18             	sub    esp,0x18
c001b3f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3f7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3fa:	83 f8 02             	cmp    eax,0x2
c001b3fd:	76 60                	jbe    c001b45f <sysCallReadDir(regs*)+0x70>
c001b3ff:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b406:	77 48                	ja     c001b450 <sysCallReadDir(regs*)+0x61>
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	50                   	push   eax
c001b40c:	e8 b8 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b411:	83 c4 10             	add    esp,0x10
c001b414:	85 c0                	test   eax,eax
c001b416:	74 38                	je     c001b450 <sysCallReadDir(regs*)+0x61>
c001b418:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b420:	83 ec 0c             	sub    esp,0xc
c001b423:	8b 10                	mov    edx,DWORD PTR [eax]
c001b425:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b429:	51                   	push   ecx
c001b42a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b42d:	6a 00                	push   0x0
c001b42f:	68 10 01 00 00       	push   0x110
c001b434:	50                   	push   eax
c001b435:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b438:	83 c4 20             	add    esp,0x20
c001b43b:	85 c0                	test   eax,eax
c001b43d:	74 29                	je     c001b468 <sysCallReadDir(regs*)+0x79>
c001b43f:	83 f8 07             	cmp    eax,0x7
c001b442:	74 1b                	je     c001b45f <sysCallReadDir(regs*)+0x70>
c001b444:	b8 02 00 00 00       	mov    eax,0x2
c001b449:	31 d2                	xor    edx,edx
c001b44b:	83 c4 18             	add    esp,0x18
c001b44e:	5b                   	pop    ebx
c001b44f:	c3                   	ret    
c001b450:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b455:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b45a:	83 c4 18             	add    esp,0x18
c001b45d:	5b                   	pop    ebx
c001b45e:	c3                   	ret    
c001b45f:	b8 01 00 00 00       	mov    eax,0x1
c001b464:	31 d2                	xor    edx,edx
c001b466:	eb e3                	jmp    c001b44b <sysCallReadDir(regs*)+0x5c>
c001b468:	31 c0                	xor    eax,eax
c001b46a:	31 d2                	xor    edx,edx
c001b46c:	eb dd                	jmp    c001b44b <sysCallReadDir(regs*)+0x5c>

c001b46e <sysCallIsATTY(regs*)>:
c001b46e:	83 ec 0c             	sub    esp,0xc
c001b471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b475:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b478:	83 f8 02             	cmp    eax,0x2
c001b47b:	76 07                	jbe    c001b484 <sysCallIsATTY(regs*)+0x16>
c001b47d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b482:	75 26                	jne    c001b4aa <sysCallIsATTY(regs*)+0x3c>
c001b484:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b489:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b48c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b492:	85 c0                	test   eax,eax
c001b494:	74 24                	je     c001b4ba <sysCallIsATTY(regs*)+0x4c>
c001b496:	83 ec 0c             	sub    esp,0xc
c001b499:	8b 10                	mov    edx,DWORD PTR [eax]
c001b49b:	50                   	push   eax
c001b49c:	ff 12                	call   DWORD PTR [edx]
c001b49e:	31 d2                	xor    edx,edx
c001b4a0:	0f b6 c0             	movzx  eax,al
c001b4a3:	83 c4 10             	add    esp,0x10
c001b4a6:	83 c4 0c             	add    esp,0xc
c001b4a9:	c3                   	ret    
c001b4aa:	83 ec 0c             	sub    esp,0xc
c001b4ad:	50                   	push   eax
c001b4ae:	e8 16 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b4b3:	83 c4 10             	add    esp,0x10
c001b4b6:	85 c0                	test   eax,eax
c001b4b8:	75 dc                	jne    c001b496 <sysCallIsATTY(regs*)+0x28>
c001b4ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4c4:	83 c4 0c             	add    esp,0xc
c001b4c7:	c3                   	ret    

c001b4c8 <sysCallSeek(regs*)>:
c001b4c8:	53                   	push   ebx
c001b4c9:	83 ec 08             	sub    esp,0x8
c001b4cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4d3:	8d 50 fd             	lea    edx,[eax-0x3]
c001b4d6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b4dc:	77 32                	ja     c001b510 <sysCallSeek(regs*)+0x48>
c001b4de:	83 ec 0c             	sub    esp,0xc
c001b4e1:	50                   	push   eax
c001b4e2:	e8 e2 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b4e7:	83 c4 0c             	add    esp,0xc
c001b4ea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b4ed:	31 db                	xor    ebx,ebx
c001b4ef:	53                   	push   ebx
c001b4f0:	51                   	push   ecx
c001b4f1:	50                   	push   eax
c001b4f2:	e8 27 79 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001b4f7:	83 c4 10             	add    esp,0x10
c001b4fa:	85 c0                	test   eax,eax
c001b4fc:	0f 95 c0             	setne  al
c001b4ff:	31 d2                	xor    edx,edx
c001b501:	0f b6 c0             	movzx  eax,al
c001b504:	f7 d8                	neg    eax
c001b506:	83 d2 00             	adc    edx,0x0
c001b509:	83 c4 08             	add    esp,0x8
c001b50c:	f7 da                	neg    edx
c001b50e:	5b                   	pop    ebx
c001b50f:	c3                   	ret    
c001b510:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b515:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b51a:	83 c4 08             	add    esp,0x8
c001b51d:	5b                   	pop    ebx
c001b51e:	c3                   	ret    

c001b51f <sysCallTell(regs*)>:
c001b51f:	53                   	push   ebx
c001b520:	83 ec 08             	sub    esp,0x8
c001b523:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b527:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b52a:	83 f8 02             	cmp    eax,0x2
c001b52d:	76 4d                	jbe    c001b57c <sysCallTell(regs*)+0x5d>
c001b52f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b534:	76 19                	jbe    c001b54f <sysCallTell(regs*)+0x30>
c001b536:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b539:	31 d2                	xor    edx,edx
c001b53b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b541:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b548:	31 c0                	xor    eax,eax
c001b54a:	83 c4 08             	add    esp,0x8
c001b54d:	5b                   	pop    ebx
c001b54e:	c3                   	ret    
c001b54f:	83 ec 0c             	sub    esp,0xc
c001b552:	50                   	push   eax
c001b553:	e8 71 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b558:	5a                   	pop    edx
c001b559:	59                   	pop    ecx
c001b55a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b55d:	50                   	push   eax
c001b55e:	e8 11 79 ff ff       	call   c0012e74 <File::tell(unsigned long long*)>
c001b563:	83 c4 10             	add    esp,0x10
c001b566:	85 c0                	test   eax,eax
c001b568:	0f 95 c0             	setne  al
c001b56b:	31 d2                	xor    edx,edx
c001b56d:	0f b6 c0             	movzx  eax,al
c001b570:	f7 d8                	neg    eax
c001b572:	83 d2 00             	adc    edx,0x0
c001b575:	83 c4 08             	add    esp,0x8
c001b578:	f7 da                	neg    edx
c001b57a:	5b                   	pop    ebx
c001b57b:	c3                   	ret    
c001b57c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b581:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b586:	83 c4 08             	add    esp,0x8
c001b589:	5b                   	pop    ebx
c001b58a:	c3                   	ret    

c001b58b <sysCallSize(regs*)>:
c001b58b:	53                   	push   ebx
c001b58c:	83 ec 18             	sub    esp,0x18
c001b58f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b593:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b596:	83 f8 02             	cmp    eax,0x2
c001b599:	76 53                	jbe    c001b5ee <sysCallSize(regs*)+0x63>
c001b59b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b5a0:	76 19                	jbe    c001b5bb <sysCallSize(regs*)+0x30>
c001b5a2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b5a5:	31 d2                	xor    edx,edx
c001b5a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b5ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b5b4:	31 c0                	xor    eax,eax
c001b5b6:	83 c4 18             	add    esp,0x18
c001b5b9:	5b                   	pop    ebx
c001b5ba:	c3                   	ret    
c001b5bb:	83 ec 0c             	sub    esp,0xc
c001b5be:	50                   	push   eax
c001b5bf:	e8 05 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b5c4:	83 c4 0c             	add    esp,0xc
c001b5c7:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b5cb:	52                   	push   edx
c001b5cc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b5cf:	50                   	push   eax
c001b5d0:	e8 37 7a ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001b5d5:	83 c4 10             	add    esp,0x10
c001b5d8:	85 c0                	test   eax,eax
c001b5da:	0f 95 c0             	setne  al
c001b5dd:	31 d2                	xor    edx,edx
c001b5df:	0f b6 c0             	movzx  eax,al
c001b5e2:	f7 d8                	neg    eax
c001b5e4:	83 d2 00             	adc    edx,0x0
c001b5e7:	83 c4 18             	add    esp,0x18
c001b5ea:	f7 da                	neg    edx
c001b5ec:	5b                   	pop    ebx
c001b5ed:	c3                   	ret    
c001b5ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5f8:	83 c4 18             	add    esp,0x18
c001b5fb:	5b                   	pop    ebx
c001b5fc:	c3                   	ret    

c001b5fd <sysCallSizeFromFilename(regs*)>:
c001b5fd:	57                   	push   edi
c001b5fe:	56                   	push   esi
c001b5ff:	53                   	push   ebx
c001b600:	83 ec 20             	sub    esp,0x20
c001b603:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b607:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b60a:	83 fb 02             	cmp    ebx,0x2
c001b60d:	0f 86 88 00 00 00    	jbe    c001b69b <sysCallSizeFromFilename(regs*)+0x9e>
c001b613:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b619:	76 1b                	jbe    c001b636 <sysCallSizeFromFilename(regs*)+0x39>
c001b61b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b61e:	31 d2                	xor    edx,edx
c001b620:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b626:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b62d:	83 c4 20             	add    esp,0x20
c001b630:	31 c0                	xor    eax,eax
c001b632:	5b                   	pop    ebx
c001b633:	5e                   	pop    esi
c001b634:	5f                   	pop    edi
c001b635:	c3                   	ret    
c001b636:	83 ec 0c             	sub    esp,0xc
c001b639:	68 14 01 00 00       	push   0x114
c001b63e:	e8 56 3f ff ff       	call   c000f599 <malloc>
c001b643:	83 c4 0c             	add    esp,0xc
c001b646:	89 c7                	mov    edi,eax
c001b648:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b64d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b650:	53                   	push   ebx
c001b651:	57                   	push   edi
c001b652:	e8 a5 76 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001b657:	83 c4 0c             	add    esp,0xc
c001b65a:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b65e:	50                   	push   eax
c001b65f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b662:	57                   	push   edi
c001b663:	e8 a4 79 ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001b668:	83 c4 10             	add    esp,0x10
c001b66b:	85 ff                	test   edi,edi
c001b66d:	74 14                	je     c001b683 <sysCallSizeFromFilename(regs*)+0x86>
c001b66f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b673:	8b 17                	mov    edx,DWORD PTR [edi]
c001b675:	83 ec 0c             	sub    esp,0xc
c001b678:	57                   	push   edi
c001b679:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b67c:	83 c4 10             	add    esp,0x10
c001b67f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b683:	85 c0                	test   eax,eax
c001b685:	0f 95 c0             	setne  al
c001b688:	31 d2                	xor    edx,edx
c001b68a:	0f b6 c0             	movzx  eax,al
c001b68d:	f7 d8                	neg    eax
c001b68f:	83 d2 00             	adc    edx,0x0
c001b692:	83 c4 20             	add    esp,0x20
c001b695:	f7 da                	neg    edx
c001b697:	5b                   	pop    ebx
c001b698:	5e                   	pop    esi
c001b699:	5f                   	pop    edi
c001b69a:	c3                   	ret    
c001b69b:	83 c4 20             	add    esp,0x20
c001b69e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6a3:	5b                   	pop    ebx
c001b6a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6a9:	5e                   	pop    esi
c001b6aa:	5f                   	pop    edi
c001b6ab:	c3                   	ret    

c001b6ac <sysCallClose(regs*)>:
c001b6ac:	53                   	push   ebx
c001b6ad:	83 ec 08             	sub    esp,0x8
c001b6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6b7:	83 f8 02             	cmp    eax,0x2
c001b6ba:	76 41                	jbe    c001b6fd <sysCallClose(regs*)+0x51>
c001b6bc:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b6c2:	83 fa 01             	cmp    edx,0x1
c001b6c5:	76 2d                	jbe    c001b6f4 <sysCallClose(regs*)+0x48>
c001b6c7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b6cc:	77 2f                	ja     c001b6fd <sysCallClose(regs*)+0x51>
c001b6ce:	83 ec 0c             	sub    esp,0xc
c001b6d1:	50                   	push   eax
c001b6d2:	e8 f2 59 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b6d7:	89 c3                	mov    ebx,eax
c001b6d9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6dc:	e8 dd 76 ff ff       	call   c0012dbe <File::close()>
c001b6e1:	83 c4 10             	add    esp,0x10
c001b6e4:	85 db                	test   ebx,ebx
c001b6e6:	74 0c                	je     c001b6f4 <sysCallClose(regs*)+0x48>
c001b6e8:	83 ec 0c             	sub    esp,0xc
c001b6eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6ed:	53                   	push   ebx
c001b6ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6f1:	83 c4 10             	add    esp,0x10
c001b6f4:	31 c0                	xor    eax,eax
c001b6f6:	31 d2                	xor    edx,edx
c001b6f8:	83 c4 08             	add    esp,0x8
c001b6fb:	5b                   	pop    ebx
c001b6fc:	c3                   	ret    
c001b6fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b702:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b707:	83 c4 08             	add    esp,0x8
c001b70a:	5b                   	pop    ebx
c001b70b:	c3                   	ret    

c001b70c <sysCallOpenDir(regs*)>:
c001b70c:	56                   	push   esi
c001b70d:	53                   	push   ebx
c001b70e:	53                   	push   ebx
c001b70f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b713:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b716:	85 f6                	test   esi,esi
c001b718:	74 59                	je     c001b773 <sysCallOpenDir(regs*)+0x67>
c001b71a:	83 ec 0c             	sub    esp,0xc
c001b71d:	68 14 01 00 00       	push   0x114
c001b722:	e8 72 3e ff ff       	call   c000f599 <malloc>
c001b727:	83 c4 0c             	add    esp,0xc
c001b72a:	89 c6                	mov    esi,eax
c001b72c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b731:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b734:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b737:	56                   	push   esi
c001b738:	e8 6b 7a ff ff       	call   c00131a8 <Directory::Directory(char const*, Process*)>
c001b73d:	83 c4 10             	add    esp,0x10
c001b740:	85 f6                	test   esi,esi
c001b742:	74 2f                	je     c001b773 <sysCallOpenDir(regs*)+0x67>
c001b744:	83 ec 0c             	sub    esp,0xc
c001b747:	56                   	push   esi
c001b748:	e8 bf 7a ff ff       	call   c001320c <Directory::open()>
c001b74d:	83 c4 10             	add    esp,0x10
c001b750:	85 c0                	test   eax,eax
c001b752:	75 1f                	jne    c001b773 <sysCallOpenDir(regs*)+0x67>
c001b754:	83 ec 0c             	sub    esp,0xc
c001b757:	56                   	push   esi
c001b758:	e8 77 56 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001b75d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b760:	83 c4 10             	add    esp,0x10
c001b763:	89 02                	mov    DWORD PTR [edx],eax
c001b765:	c1 f8 1f             	sar    eax,0x1f
c001b768:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b76b:	31 c0                	xor    eax,eax
c001b76d:	59                   	pop    ecx
c001b76e:	31 d2                	xor    edx,edx
c001b770:	5b                   	pop    ebx
c001b771:	5e                   	pop    esi
c001b772:	c3                   	ret    
c001b773:	59                   	pop    ecx
c001b774:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b779:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b77e:	5b                   	pop    ebx
c001b77f:	5e                   	pop    esi
c001b780:	c3                   	ret    

c001b781 <sysCallCloseDir(regs*)>:
c001b781:	53                   	push   ebx
c001b782:	83 ec 08             	sub    esp,0x8
c001b785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b789:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b78c:	8d 50 fd             	lea    edx,[eax-0x3]
c001b78f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b795:	77 2f                	ja     c001b7c6 <sysCallCloseDir(regs*)+0x45>
c001b797:	83 ec 0c             	sub    esp,0xc
c001b79a:	50                   	push   eax
c001b79b:	e8 29 59 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b7a0:	89 c3                	mov    ebx,eax
c001b7a2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7a5:	e8 be 7a ff ff       	call   c0013268 <Directory::close()>
c001b7aa:	83 c4 10             	add    esp,0x10
c001b7ad:	85 db                	test   ebx,ebx
c001b7af:	74 0c                	je     c001b7bd <sysCallCloseDir(regs*)+0x3c>
c001b7b1:	83 ec 0c             	sub    esp,0xc
c001b7b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7b6:	53                   	push   ebx
c001b7b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b7ba:	83 c4 10             	add    esp,0x10
c001b7bd:	31 c0                	xor    eax,eax
c001b7bf:	31 d2                	xor    edx,edx
c001b7c1:	83 c4 08             	add    esp,0x8
c001b7c4:	5b                   	pop    ebx
c001b7c5:	c3                   	ret    
c001b7c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7d0:	83 c4 08             	add    esp,0x8
c001b7d3:	5b                   	pop    ebx
c001b7d4:	c3                   	ret    

c001b7d5 <sysCallMakeDir(regs*)>:
c001b7d5:	56                   	push   esi
c001b7d6:	53                   	push   ebx
c001b7d7:	83 ec 10             	sub    esp,0x10
c001b7da:	68 14 01 00 00       	push   0x114
c001b7df:	e8 b5 3d ff ff       	call   c000f599 <malloc>
c001b7e4:	83 c4 0c             	add    esp,0xc
c001b7e7:	89 c3                	mov    ebx,eax
c001b7e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7ee:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7f5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b7f8:	53                   	push   ebx
c001b7f9:	e8 aa 79 ff ff       	call   c00131a8 <Directory::Directory(char const*, Process*)>
c001b7fe:	83 c4 10             	add    esp,0x10
c001b801:	85 db                	test   ebx,ebx
c001b803:	74 32                	je     c001b837 <sysCallMakeDir(regs*)+0x62>
c001b805:	83 ec 0c             	sub    esp,0xc
c001b808:	53                   	push   ebx
c001b809:	e8 de 7b ff ff       	call   c00133ec <Directory::create()>
c001b80e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b811:	89 c6                	mov    esi,eax
c001b813:	e8 50 7a ff ff       	call   c0013268 <Directory::close()>
c001b818:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b81a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b81d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b820:	83 c4 10             	add    esp,0x10
c001b823:	31 c0                	xor    eax,eax
c001b825:	59                   	pop    ecx
c001b826:	85 f6                	test   esi,esi
c001b828:	5b                   	pop    ebx
c001b829:	0f 95 c0             	setne  al
c001b82c:	5e                   	pop    esi
c001b82d:	31 d2                	xor    edx,edx
c001b82f:	f7 d8                	neg    eax
c001b831:	83 d2 00             	adc    edx,0x0
c001b834:	f7 da                	neg    edx
c001b836:	c3                   	ret    
c001b837:	59                   	pop    ecx
c001b838:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b83d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b842:	5b                   	pop    ebx
c001b843:	5e                   	pop    esi
c001b844:	c3                   	ret    

c001b845 <sysCallWait(regs*)>:
c001b845:	83 ec 10             	sub    esp,0x10
c001b848:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b84c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b84f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b852:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b855:	e8 b4 24 00 00       	call   c001dd0e <waitTask(int, int*, int)>
c001b85a:	83 c4 1c             	add    esp,0x1c
c001b85d:	99                   	cdq    
c001b85e:	c3                   	ret    

c001b85f <sysCallNotImpl(regs*)>:
c001b85f:	83 ec 18             	sub    esp,0x18
c001b862:	68 91 bc 02 c0       	push   0xc002bc91
c001b867:	e8 0d e7 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001b86c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b871:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b876:	83 c4 1c             	add    esp,0x1c
c001b879:	c3                   	ret    

c001b87a <sysPanic(regs*)>:
c001b87a:	83 ec 18             	sub    esp,0x18
c001b87d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b881:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b884:	e8 f0 e6 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001b889:	b8 01 00 00 00       	mov    eax,0x1
c001b88e:	31 d2                	xor    edx,edx
c001b890:	83 c4 1c             	add    esp,0x1c
c001b893:	c3                   	ret    

c001b894 <sysCallRmdir(regs*)>:
c001b894:	56                   	push   esi
c001b895:	53                   	push   ebx
c001b896:	83 ec 20             	sub    esp,0x20
c001b899:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b89d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b8a0:	68 14 01 00 00       	push   0x114
c001b8a5:	e8 ef 3c ff ff       	call   c000f599 <malloc>
c001b8aa:	83 c4 0c             	add    esp,0xc
c001b8ad:	89 c3                	mov    ebx,eax
c001b8af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8b4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8b7:	56                   	push   esi
c001b8b8:	53                   	push   ebx
c001b8b9:	e8 3e 74 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001b8be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8c1:	e8 12 76 ff ff       	call   c0012ed8 <File::unlink()>
c001b8c6:	83 c4 10             	add    esp,0x10
c001b8c9:	85 db                	test   ebx,ebx
c001b8cb:	74 14                	je     c001b8e1 <sysCallRmdir(regs*)+0x4d>
c001b8cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8d1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b8d3:	83 ec 0c             	sub    esp,0xc
c001b8d6:	53                   	push   ebx
c001b8d7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b8da:	83 c4 10             	add    esp,0x10
c001b8dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8e1:	85 c0                	test   eax,eax
c001b8e3:	0f 95 c0             	setne  al
c001b8e6:	31 d2                	xor    edx,edx
c001b8e8:	0f b6 c0             	movzx  eax,al
c001b8eb:	f7 d8                	neg    eax
c001b8ed:	83 d2 00             	adc    edx,0x0
c001b8f0:	83 c4 14             	add    esp,0x14
c001b8f3:	f7 da                	neg    edx
c001b8f5:	5b                   	pop    ebx
c001b8f6:	5e                   	pop    esi
c001b8f7:	c3                   	ret    

c001b8f8 <sysCallUnlink(regs*)>:
c001b8f8:	56                   	push   esi
c001b8f9:	53                   	push   ebx
c001b8fa:	83 ec 20             	sub    esp,0x20
c001b8fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b901:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b904:	68 14 01 00 00       	push   0x114
c001b909:	e8 8b 3c ff ff       	call   c000f599 <malloc>
c001b90e:	83 c4 0c             	add    esp,0xc
c001b911:	89 c3                	mov    ebx,eax
c001b913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b918:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b91b:	56                   	push   esi
c001b91c:	53                   	push   ebx
c001b91d:	e8 da 73 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001b922:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b925:	e8 ae 75 ff ff       	call   c0012ed8 <File::unlink()>
c001b92a:	83 c4 10             	add    esp,0x10
c001b92d:	85 db                	test   ebx,ebx
c001b92f:	74 14                	je     c001b945 <sysCallUnlink(regs*)+0x4d>
c001b931:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b935:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b937:	83 ec 0c             	sub    esp,0xc
c001b93a:	53                   	push   ebx
c001b93b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b93e:	83 c4 10             	add    esp,0x10
c001b941:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b945:	85 c0                	test   eax,eax
c001b947:	0f 95 c0             	setne  al
c001b94a:	31 d2                	xor    edx,edx
c001b94c:	0f b6 c0             	movzx  eax,al
c001b94f:	f7 d8                	neg    eax
c001b951:	83 d2 00             	adc    edx,0x0
c001b954:	83 c4 14             	add    esp,0x14
c001b957:	f7 da                	neg    edx
c001b959:	5b                   	pop    ebx
c001b95a:	5e                   	pop    esi
c001b95b:	c3                   	ret    

c001b95c <sysCallGetArgv(regs*)>:
c001b95c:	83 ec 0c             	sub    esp,0xc
c001b95f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b963:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b966:	85 c0                	test   eax,eax
c001b968:	78 2b                	js     c001b995 <sysCallGetArgv(regs*)+0x39>
c001b96a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b970:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b973:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b979:	7d 1a                	jge    c001b995 <sysCallGetArgv(regs*)+0x39>
c001b97b:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b982:	85 c0                	test   eax,eax
c001b984:	74 17                	je     c001b99d <sysCallGetArgv(regs*)+0x41>
c001b986:	83 ec 08             	sub    esp,0x8
c001b989:	50                   	push   eax
c001b98a:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b98d:	e8 7a 4e fe ff       	call   c000080c <strcpy>
c001b992:	83 c4 10             	add    esp,0x10
c001b995:	31 c0                	xor    eax,eax
c001b997:	31 d2                	xor    edx,edx
c001b999:	83 c4 0c             	add    esp,0xc
c001b99c:	c3                   	ret    
c001b99d:	b8 01 00 00 00       	mov    eax,0x1
c001b9a2:	31 d2                	xor    edx,edx
c001b9a4:	83 c4 0c             	add    esp,0xc
c001b9a7:	c3                   	ret    

c001b9a8 <sysCallTTYName(regs*)>:
c001b9a8:	56                   	push   esi
c001b9a9:	53                   	push   ebx
c001b9aa:	53                   	push   ebx
c001b9ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9af:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b9b2:	85 c0                	test   eax,eax
c001b9b4:	74 5f                	je     c001ba15 <sysCallTTYName(regs*)+0x6d>
c001b9b6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b9b9:	83 f8 02             	cmp    eax,0x2
c001b9bc:	77 3e                	ja     c001b9fc <sysCallTTYName(regs*)+0x54>
c001b9be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9c6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b9cc:	85 db                	test   ebx,ebx
c001b9ce:	74 45                	je     c001ba15 <sysCallTTYName(regs*)+0x6d>
c001b9d0:	83 ec 0c             	sub    esp,0xc
c001b9d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9d5:	53                   	push   ebx
c001b9d6:	ff 10                	call   DWORD PTR [eax]
c001b9d8:	83 c4 10             	add    esp,0x10
c001b9db:	84 c0                	test   al,al
c001b9dd:	74 41                	je     c001ba20 <sysCallTTYName(regs*)+0x78>
c001b9df:	83 ec 08             	sub    esp,0x8
c001b9e2:	81 c3 82 00 00 00    	add    ebx,0x82
c001b9e8:	53                   	push   ebx
c001b9e9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b9ec:	e8 1b 4e fe ff       	call   c000080c <strcpy>
c001b9f1:	83 c4 10             	add    esp,0x10
c001b9f4:	31 c0                	xor    eax,eax
c001b9f6:	59                   	pop    ecx
c001b9f7:	31 d2                	xor    edx,edx
c001b9f9:	5b                   	pop    ebx
c001b9fa:	5e                   	pop    esi
c001b9fb:	c3                   	ret    
c001b9fc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba01:	74 bb                	je     c001b9be <sysCallTTYName(regs*)+0x16>
c001ba03:	83 ec 0c             	sub    esp,0xc
c001ba06:	50                   	push   eax
c001ba07:	e8 bd 56 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001ba0c:	83 c4 10             	add    esp,0x10
c001ba0f:	89 c3                	mov    ebx,eax
c001ba11:	85 db                	test   ebx,ebx
c001ba13:	75 bb                	jne    c001b9d0 <sysCallTTYName(regs*)+0x28>
c001ba15:	59                   	pop    ecx
c001ba16:	b8 01 00 00 00       	mov    eax,0x1
c001ba1b:	31 d2                	xor    edx,edx
c001ba1d:	5b                   	pop    ebx
c001ba1e:	5e                   	pop    esi
c001ba1f:	c3                   	ret    
c001ba20:	59                   	pop    ecx
c001ba21:	b8 02 00 00 00       	mov    eax,0x2
c001ba26:	31 d2                	xor    edx,edx
c001ba28:	5b                   	pop    ebx
c001ba29:	5e                   	pop    esi
c001ba2a:	c3                   	ret    

c001ba2b <sysCallUSleep(regs*)>:
c001ba2b:	83 ec 14             	sub    esp,0x14
c001ba2e:	b8 e8 03 00 00       	mov    eax,0x3e8
c001ba33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba37:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001ba3e:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001ba41:	01 ca                	add    edx,ecx
c001ba43:	52                   	push   edx
c001ba44:	50                   	push   eax
c001ba45:	e8 9b 23 00 00       	call   c001dde5 <nanoSleep(unsigned long long)>
c001ba4a:	31 c0                	xor    eax,eax
c001ba4c:	31 d2                	xor    edx,edx
c001ba4e:	83 c4 1c             	add    esp,0x1c
c001ba51:	c3                   	ret    

c001ba52 <sysCallSpawn(regs*)>:
c001ba52:	56                   	push   esi
c001ba53:	53                   	push   ebx
c001ba54:	50                   	push   eax
c001ba55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba59:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001ba5c:	85 c0                	test   eax,eax
c001ba5e:	75 08                	jne    c001ba68 <sysCallSpawn(regs*)+0x16>
c001ba60:	59                   	pop    ecx
c001ba61:	31 c0                	xor    eax,eax
c001ba63:	31 d2                	xor    edx,edx
c001ba65:	5b                   	pop    ebx
c001ba66:	5e                   	pop    esi
c001ba67:	c3                   	ret    
c001ba68:	83 ec 0c             	sub    esp,0xc
c001ba6b:	68 3f 07 00 00       	push   0x73f
c001ba70:	e8 24 3b ff ff       	call   c000f599 <malloc>
c001ba75:	83 c4 10             	add    esp,0x10
c001ba78:	89 c6                	mov    esi,eax
c001ba7a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ba7d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba80:	85 c0                	test   eax,eax
c001ba82:	75 32                	jne    c001bab6 <sysCallSpawn(regs*)+0x64>
c001ba84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba8c:	52                   	push   edx
c001ba8d:	50                   	push   eax
c001ba8e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ba91:	56                   	push   esi
c001ba92:	e8 73 1a 00 00       	call   c001d50a <Process::Process(char const*, Process*, char**)>
c001ba97:	83 c4 10             	add    esp,0x10
c001ba9a:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001baa1:	75 bd                	jne    c001ba60 <sysCallSpawn(regs*)+0xe>
c001baa3:	83 ec 0c             	sub    esp,0xc
c001baa6:	56                   	push   esi
c001baa7:	e8 40 1f 00 00       	call   c001d9ec <Process::createUserThread()>
c001baac:	8b 06                	mov    eax,DWORD PTR [esi]
c001baae:	83 c4 10             	add    esp,0x10
c001bab1:	99                   	cdq    
c001bab2:	59                   	pop    ecx
c001bab3:	5b                   	pop    ebx
c001bab4:	5e                   	pop    esi
c001bab5:	c3                   	ret    
c001bab6:	31 c0                	xor    eax,eax
c001bab8:	eb d2                	jmp    c001ba8c <sysCallSpawn(regs*)+0x3a>

c001baba <sysCallGetEnv(regs*)>:
c001baba:	57                   	push   edi
c001babb:	56                   	push   esi
c001babc:	53                   	push   ebx
c001babd:	83 ec 1c             	sub    esp,0x1c
c001bac0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bac9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bacc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bacf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bad2:	e8 ee e3 ff ff       	call   c0019ec5 <Krnl::getProcessTotalEnvCount(Process*)>
c001bad7:	83 c4 10             	add    esp,0x10
c001bada:	39 c7                	cmp    edi,eax
c001badc:	7c 14                	jl     c001baf2 <sysCallGetEnv(regs*)+0x38>
c001bade:	85 f6                	test   esi,esi
c001bae0:	75 0b                	jne    c001baed <sysCallGetEnv(regs*)+0x33>
c001bae2:	83 c4 10             	add    esp,0x10
c001bae5:	31 c0                	xor    eax,eax
c001bae7:	5b                   	pop    ebx
c001bae8:	31 d2                	xor    edx,edx
c001baea:	5e                   	pop    esi
c001baeb:	5f                   	pop    edi
c001baec:	c3                   	ret    
c001baed:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001baf0:	eb f0                	jmp    c001bae2 <sysCallGetEnv(regs*)+0x28>
c001baf2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001baf6:	52                   	push   edx
c001baf7:	57                   	push   edi
c001baf8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bafe:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bb01:	50                   	push   eax
c001bb02:	e8 de e3 ff ff       	call   c0019ee5 <Krnl::getProcessEnvPair(Process*, int)>
c001bb07:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bb0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb0e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bb12:	83 c4 0c             	add    esp,0xc
c001bb15:	85 c9                	test   ecx,ecx
c001bb17:	75 23                	jne    c001bb3c <sysCallGetEnv(regs*)+0x82>
c001bb19:	83 ec 0c             	sub    esp,0xc
c001bb1c:	50                   	push   eax
c001bb1d:	e8 4a 4c fe ff       	call   c000076c <strlen>
c001bb22:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb25:	89 c3                	mov    ebx,eax
c001bb27:	e8 40 4c fe ff       	call   c000076c <strlen>
c001bb2c:	83 c4 10             	add    esp,0x10
c001bb2f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bb33:	83 c4 10             	add    esp,0x10
c001bb36:	31 d2                	xor    edx,edx
c001bb38:	5b                   	pop    ebx
c001bb39:	5e                   	pop    esi
c001bb3a:	5f                   	pop    edi
c001bb3b:	c3                   	ret    
c001bb3c:	83 ec 08             	sub    esp,0x8
c001bb3f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bb42:	50                   	push   eax
c001bb43:	56                   	push   esi
c001bb44:	e8 c3 4c fe ff       	call   c000080c <strcpy>
c001bb49:	58                   	pop    eax
c001bb4a:	5a                   	pop    edx
c001bb4b:	68 ab bc 02 c0       	push   0xc002bcab
c001bb50:	56                   	push   esi
c001bb51:	e8 f6 4d fe ff       	call   c000094c <strcat>
c001bb56:	59                   	pop    ecx
c001bb57:	5b                   	pop    ebx
c001bb58:	57                   	push   edi
c001bb59:	56                   	push   esi
c001bb5a:	e8 ed 4d fe ff       	call   c000094c <strcat>
c001bb5f:	83 c4 10             	add    esp,0x10
c001bb62:	e9 7b ff ff ff       	jmp    c001bae2 <sysCallGetEnv(regs*)+0x28>

c001bb67 <sysAppSettings(regs*)>:
c001bb67:	57                   	push   edi
c001bb68:	56                   	push   esi
c001bb69:	56                   	push   esi
c001bb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb6e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bb71:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bb77:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bb7c:	66 3d c0 09          	cmp    ax,0x9c0
c001bb80:	75 2e                	jne    c001bbb0 <sysAppSettings(regs*)+0x49>
c001bb82:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bb88:	83 e0 1f             	and    eax,0x1f
c001bb8b:	3c 01                	cmp    al,0x1
c001bb8d:	74 2c                	je     c001bbbb <sysAppSettings(regs*)+0x54>
c001bb8f:	3c 07                	cmp    al,0x7
c001bb91:	0f 84 b3 00 00 00    	je     c001bc4a <sysAppSettings(regs*)+0xe3>
c001bb97:	84 c0                	test   al,al
c001bb99:	0f 84 d2 00 00 00    	je     c001bc71 <sysAppSettings(regs*)+0x10a>
c001bb9f:	3c 08                	cmp    al,0x8
c001bba1:	74 63                	je     c001bc06 <sysAppSettings(regs*)+0x9f>
c001bba3:	59                   	pop    ecx
c001bba4:	0f b6 c0             	movzx  eax,al
c001bba7:	5e                   	pop    esi
c001bba8:	05 e8 03 00 00       	add    eax,0x3e8
c001bbad:	5f                   	pop    edi
c001bbae:	99                   	cdq    
c001bbaf:	c3                   	ret    
c001bbb0:	b8 01 00 00 00       	mov    eax,0x1
c001bbb5:	59                   	pop    ecx
c001bbb6:	31 d2                	xor    edx,edx
c001bbb8:	5e                   	pop    esi
c001bbb9:	5f                   	pop    edi
c001bbba:	c3                   	ret    
c001bbbb:	50                   	push   eax
c001bbbc:	68 00 01 00 00       	push   0x100
c001bbc1:	6a 00                	push   0x0
c001bbc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbc8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbcb:	83 c0 0c             	add    eax,0xc
c001bbce:	50                   	push   eax
c001bbcf:	e8 7c 4b fe ff       	call   c0000750 <memset>
c001bbd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd9:	b9 ff 00 00 00       	mov    ecx,0xff
c001bbde:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bbe1:	83 c7 0c             	add    edi,0xc
c001bbe4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bbe6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbeb:	5a                   	pop    edx
c001bbec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbef:	59                   	pop    ecx
c001bbf0:	8d 50 0c             	lea    edx,[eax+0xc]
c001bbf3:	52                   	push   edx
c001bbf4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bbfa:	e8 f3 45 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001bbff:	83 c4 10             	add    esp,0x10
c001bc02:	31 c0                	xor    eax,eax
c001bc04:	eb af                	jmp    c001bbb5 <sysAppSettings(regs*)+0x4e>
c001bc06:	83 ec 08             	sub    esp,0x8
c001bc09:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bc0f:	83 e0 0f             	and    eax,0xf
c001bc12:	50                   	push   eax
c001bc13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc18:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bc21:	e8 bc 45 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001bc26:	5f                   	pop    edi
c001bc27:	58                   	pop    eax
c001bc28:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bc2e:	c1 e8 04             	shr    eax,0x4
c001bc31:	83 e0 0f             	and    eax,0xf
c001bc34:	50                   	push   eax
c001bc35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc3d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bc43:	e8 8a 45 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bc48:	eb b5                	jmp    c001bbff <sysAppSettings(regs*)+0x98>
c001bc4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc4f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc52:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bc58:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bc5e:	c0 e8 06             	shr    al,0x6
c001bc61:	83 e0 01             	and    eax,0x1
c001bc64:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bc6a:	31 c0                	xor    eax,eax
c001bc6c:	e9 44 ff ff ff       	jmp    c001bbb5 <sysAppSettings(regs*)+0x4e>
c001bc71:	b8 02 00 00 00       	mov    eax,0x2
c001bc76:	e9 3a ff ff ff       	jmp    c001bbb5 <sysAppSettings(regs*)+0x4e>

c001bc7b <sysSetFatAttrib(regs*)>:
c001bc7b:	57                   	push   edi
c001bc7c:	56                   	push   esi
c001bc7d:	53                   	push   ebx
c001bc7e:	83 ec 1c             	sub    esp,0x1c
c001bc81:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bc85:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bc88:	68 14 01 00 00       	push   0x114
c001bc8d:	e8 07 39 ff ff       	call   c000f599 <malloc>
c001bc92:	83 c4 0c             	add    esp,0xc
c001bc95:	89 c3                	mov    ebx,eax
c001bc97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc9c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc9f:	57                   	push   edi
c001bca0:	53                   	push   ebx
c001bca1:	e8 56 70 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001bca6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bca9:	83 c4 0c             	add    esp,0xc
c001bcac:	0f b6 d4             	movzx  edx,ah
c001bcaf:	0f b6 c0             	movzx  eax,al
c001bcb2:	52                   	push   edx
c001bcb3:	50                   	push   eax
c001bcb4:	53                   	push   ebx
c001bcb5:	e8 b8 72 ff ff       	call   c0012f72 <File::chfatattr(unsigned char, unsigned char)>
c001bcba:	83 c4 10             	add    esp,0x10
c001bcbd:	85 db                	test   ebx,ebx
c001bcbf:	74 14                	je     c001bcd5 <sysSetFatAttrib(regs*)+0x5a>
c001bcc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcc5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcc7:	83 ec 0c             	sub    esp,0xc
c001bcca:	53                   	push   ebx
c001bccb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bcce:	83 c4 10             	add    esp,0x10
c001bcd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcd5:	85 c0                	test   eax,eax
c001bcd7:	0f 95 c0             	setne  al
c001bcda:	31 d2                	xor    edx,edx
c001bcdc:	0f b6 c0             	movzx  eax,al
c001bcdf:	f7 d8                	neg    eax
c001bce1:	83 d2 00             	adc    edx,0x0
c001bce4:	83 c4 10             	add    esp,0x10
c001bce7:	f7 da                	neg    edx
c001bce9:	5b                   	pop    ebx
c001bcea:	5e                   	pop    esi
c001bceb:	5f                   	pop    edi
c001bcec:	c3                   	ret    

c001bced <sysPipe(regs*)>:
c001bced:	57                   	push   edi
c001bcee:	56                   	push   esi
c001bcef:	53                   	push   ebx
c001bcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf4:	83 ec 0c             	sub    esp,0xc
c001bcf7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bcfa:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bcfd:	6a 20                	push   0x20
c001bcff:	e8 95 38 ff ff       	call   c000f599 <malloc>
c001bd04:	89 c3                	mov    ebx,eax
c001bd06:	58                   	pop    eax
c001bd07:	5a                   	pop    edx
c001bd08:	68 00 50 00 00       	push   0x5000
c001bd0d:	53                   	push   ebx
c001bd0e:	e8 57 42 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bd13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd16:	e8 b9 50 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bd1b:	89 07                	mov    DWORD PTR [edi],eax
c001bd1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd20:	e8 af 50 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bd25:	83 c4 10             	add    esp,0x10
c001bd28:	89 06                	mov    DWORD PTR [esi],eax
c001bd2a:	31 d2                	xor    edx,edx
c001bd2c:	5b                   	pop    ebx
c001bd2d:	31 c0                	xor    eax,eax
c001bd2f:	5e                   	pop    esi
c001bd30:	5f                   	pop    edi
c001bd31:	c3                   	ret    

c001bd32 <sysGetUnixTime(regs*)>:
c001bd32:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001bd37:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bd3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd41:	e9 a8 79 ff ff       	jmp    c00136ee <Clock::timeInSecondsLocal()>

c001bd46 <string_ends_with(char const*, char const*)>:
c001bd46:	57                   	push   edi
c001bd47:	56                   	push   esi
c001bd48:	53                   	push   ebx
c001bd49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bd51:	83 ec 0c             	sub    esp,0xc
c001bd54:	53                   	push   ebx
c001bd55:	e8 12 4a fe ff       	call   c000076c <strlen>
c001bd5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd5d:	89 c6                	mov    esi,eax
c001bd5f:	e8 08 4a fe ff       	call   c000076c <strlen>
c001bd64:	83 c4 10             	add    esp,0x10
c001bd67:	39 c6                	cmp    esi,eax
c001bd69:	7d 06                	jge    c001bd71 <string_ends_with(char const*, char const*)+0x2b>
c001bd6b:	5b                   	pop    ebx
c001bd6c:	31 c0                	xor    eax,eax
c001bd6e:	5e                   	pop    esi
c001bd6f:	5f                   	pop    edi
c001bd70:	c3                   	ret    
c001bd71:	83 ec 08             	sub    esp,0x8
c001bd74:	29 c6                	sub    esi,eax
c001bd76:	57                   	push   edi
c001bd77:	01 f3                	add    ebx,esi
c001bd79:	53                   	push   ebx
c001bd7a:	e8 19 4b fe ff       	call   c0000898 <strcmp>
c001bd7f:	83 c4 10             	add    esp,0x10
c001bd82:	85 c0                	test   eax,eax
c001bd84:	5b                   	pop    ebx
c001bd85:	0f 94 c0             	sete   al
c001bd88:	5e                   	pop    esi
c001bd89:	0f b6 c0             	movzx  eax,al
c001bd8c:	5f                   	pop    edi
c001bd8d:	c3                   	ret    

c001bd8e <sysCallOpen(regs*)>:
c001bd8e:	56                   	push   esi
c001bd8f:	53                   	push   ebx
c001bd90:	81 ec 04 01 00 00    	sub    esp,0x104
c001bd96:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bd9d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bda0:	85 c9                	test   ecx,ecx
c001bda2:	0f 84 ad 01 00 00    	je     c001bf55 <sysCallOpen(regs*)+0x1c7>
c001bda8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bdab:	85 c0                	test   eax,eax
c001bdad:	0f 84 a2 01 00 00    	je     c001bf55 <sysCallOpen(regs*)+0x1c7>
c001bdb3:	52                   	push   edx
c001bdb4:	68 ad bc 02 c0       	push   0xc002bcad
c001bdb9:	50                   	push   eax
c001bdba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bdbe:	56                   	push   esi
c001bdbf:	e8 8e 6d ff ff       	call   c0012b52 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bdc4:	89 34 24             	mov    DWORD PTR [esp],esi
c001bdc7:	e8 a0 49 fe ff       	call   c000076c <strlen>
c001bdcc:	83 c4 10             	add    esp,0x10
c001bdcf:	48                   	dec    eax
c001bdd0:	74 1d                	je     c001bdef <sysCallOpen(regs*)+0x61>
c001bdd2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bdd5:	eb 0f                	jmp    c001bde6 <sysCallOpen(regs*)+0x58>
c001bdd7:	80 fa 3a             	cmp    dl,0x3a
c001bdda:	74 0f                	je     c001bdeb <sysCallOpen(regs*)+0x5d>
c001bddc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bde0:	48                   	dec    eax
c001bde1:	74 0c                	je     c001bdef <sysCallOpen(regs*)+0x61>
c001bde3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bde6:	80 fa 2e             	cmp    dl,0x2e
c001bde9:	75 ec                	jne    c001bdd7 <sysCallOpen(regs*)+0x49>
c001bdeb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bdef:	83 ec 08             	sub    esp,0x8
c001bdf2:	68 b1 bc 02 c0       	push   0xc002bcb1
c001bdf7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdfa:	e8 47 ff ff ff       	call   c001bd46 <string_ends_with(char const*, char const*)>
c001bdff:	83 c4 10             	add    esp,0x10
c001be02:	85 c0                	test   eax,eax
c001be04:	74 1d                	je     c001be23 <sysCallOpen(regs*)+0x95>
c001be06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be09:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001be0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be16:	81 c4 04 01 00 00    	add    esp,0x104
c001be1c:	31 c0                	xor    eax,eax
c001be1e:	31 d2                	xor    edx,edx
c001be20:	5b                   	pop    ebx
c001be21:	5e                   	pop    esi
c001be22:	c3                   	ret    
c001be23:	83 ec 08             	sub    esp,0x8
c001be26:	68 b6 bc 02 c0       	push   0xc002bcb6
c001be2b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be2e:	e8 13 ff ff ff       	call   c001bd46 <string_ends_with(char const*, char const*)>
c001be33:	83 c4 10             	add    esp,0x10
c001be36:	85 c0                	test   eax,eax
c001be38:	75 cc                	jne    c001be06 <sysCallOpen(regs*)+0x78>
c001be3a:	83 ec 08             	sub    esp,0x8
c001be3d:	68 b2 bc 02 c0       	push   0xc002bcb2
c001be42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be45:	e8 4e 4a fe ff       	call   c0000898 <strcmp>
c001be4a:	83 c4 10             	add    esp,0x10
c001be4d:	85 c0                	test   eax,eax
c001be4f:	74 b5                	je     c001be06 <sysCallOpen(regs*)+0x78>
c001be51:	83 ec 08             	sub    esp,0x8
c001be54:	68 b1 bc 02 c0       	push   0xc002bcb1
c001be59:	56                   	push   esi
c001be5a:	e8 e7 fe ff ff       	call   c001bd46 <string_ends_with(char const*, char const*)>
c001be5f:	83 c4 10             	add    esp,0x10
c001be62:	85 c0                	test   eax,eax
c001be64:	75 a0                	jne    c001be06 <sysCallOpen(regs*)+0x78>
c001be66:	83 ec 08             	sub    esp,0x8
c001be69:	68 bb bc 02 c0       	push   0xc002bcbb
c001be6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be71:	e8 d0 fe ff ff       	call   c001bd46 <string_ends_with(char const*, char const*)>
c001be76:	83 c4 10             	add    esp,0x10
c001be79:	85 c0                	test   eax,eax
c001be7b:	0f 85 e7 00 00 00    	jne    c001bf68 <sysCallOpen(regs*)+0x1da>
c001be81:	83 ec 08             	sub    esp,0x8
c001be84:	68 c0 bc 02 c0       	push   0xc002bcc0
c001be89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be8c:	e8 b5 fe ff ff       	call   c001bd46 <string_ends_with(char const*, char const*)>
c001be91:	83 c4 10             	add    esp,0x10
c001be94:	85 c0                	test   eax,eax
c001be96:	0f 85 cc 00 00 00    	jne    c001bf68 <sysCallOpen(regs*)+0x1da>
c001be9c:	83 ec 08             	sub    esp,0x8
c001be9f:	68 bc bc 02 c0       	push   0xc002bcbc
c001bea4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bea7:	e8 ec 49 fe ff       	call   c0000898 <strcmp>
c001beac:	83 c4 10             	add    esp,0x10
c001beaf:	85 c0                	test   eax,eax
c001beb1:	0f 84 b1 00 00 00    	je     c001bf68 <sysCallOpen(regs*)+0x1da>
c001beb7:	83 ec 08             	sub    esp,0x8
c001beba:	68 bb bc 02 c0       	push   0xc002bcbb
c001bebf:	56                   	push   esi
c001bec0:	e8 81 fe ff ff       	call   c001bd46 <string_ends_with(char const*, char const*)>
c001bec5:	83 c4 10             	add    esp,0x10
c001bec8:	85 c0                	test   eax,eax
c001beca:	0f 85 98 00 00 00    	jne    c001bf68 <sysCallOpen(regs*)+0x1da>
c001bed0:	83 ec 0c             	sub    esp,0xc
c001bed3:	68 14 01 00 00       	push   0x114
c001bed8:	e8 bc 36 ff ff       	call   c000f599 <malloc>
c001bedd:	83 c4 0c             	add    esp,0xc
c001bee0:	89 c6                	mov    esi,eax
c001bee2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001beed:	56                   	push   esi
c001beee:	e8 09 6e ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001bef3:	83 c4 10             	add    esp,0x10
c001bef6:	85 f6                	test   esi,esi
c001bef8:	74 5b                	je     c001bf55 <sysCallOpen(regs*)+0x1c7>
c001befa:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001befd:	0f b6 c2             	movzx  eax,dl
c001bf00:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bf03:	89 d0                	mov    eax,edx
c001bf05:	83 e0 01             	and    eax,0x1
c001bf08:	f6 c2 02             	test   dl,0x2
c001bf0b:	74 03                	je     c001bf10 <sysCallOpen(regs*)+0x182>
c001bf0d:	83 c8 02             	or     eax,0x2
c001bf10:	f6 c2 04             	test   dl,0x4
c001bf13:	74 03                	je     c001bf18 <sysCallOpen(regs*)+0x18a>
c001bf15:	83 c8 04             	or     eax,0x4
c001bf18:	f6 c2 08             	test   dl,0x8
c001bf1b:	74 03                	je     c001bf20 <sysCallOpen(regs*)+0x192>
c001bf1d:	83 c8 0a             	or     eax,0xa
c001bf20:	83 e2 10             	and    edx,0x10
c001bf23:	74 03                	je     c001bf28 <sysCallOpen(regs*)+0x19a>
c001bf25:	83 c8 12             	or     eax,0x12
c001bf28:	83 ec 08             	sub    esp,0x8
c001bf2b:	50                   	push   eax
c001bf2c:	56                   	push   esi
c001bf2d:	e8 2e 6e ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001bf32:	83 c4 10             	add    esp,0x10
c001bf35:	85 c0                	test   eax,eax
c001bf37:	75 1c                	jne    c001bf55 <sysCallOpen(regs*)+0x1c7>
c001bf39:	83 ec 0c             	sub    esp,0xc
c001bf3c:	56                   	push   esi
c001bf3d:	e8 92 4e ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bf42:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bf45:	83 c4 10             	add    esp,0x10
c001bf48:	89 02                	mov    DWORD PTR [edx],eax
c001bf4a:	c1 f8 1f             	sar    eax,0x1f
c001bf4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bf50:	e9 c1 fe ff ff       	jmp    c001be16 <sysCallOpen(regs*)+0x88>
c001bf55:	81 c4 04 01 00 00    	add    esp,0x104
c001bf5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf60:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf65:	5b                   	pop    ebx
c001bf66:	5e                   	pop    esi
c001bf67:	c3                   	ret    
c001bf68:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf6b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bf71:	e9 99 fe ff ff       	jmp    c001be0f <sysCallOpen(regs*)+0x81>

c001bf76 <Sys::loadSyscalls()>:
c001bf76:	c7 05 c0 e8 02 c0 e3 b1 01 c0 	mov    DWORD PTR ds:0xc002e8c0,0xc001b1e3
c001bf80:	c7 05 c4 e8 02 c0 d8 ad 01 c0 	mov    DWORD PTR ds:0xc002e8c4,0xc001add8
c001bf8a:	c7 05 c8 e8 02 c0 c9 af 01 c0 	mov    DWORD PTR ds:0xc002e8c8,0xc001afc9
c001bf94:	c7 05 cc e8 02 c0 19 b1 01 c0 	mov    DWORD PTR ds:0xc002e8cc,0xc001b119
c001bf9e:	c7 05 d0 e8 02 c0 61 af 01 c0 	mov    DWORD PTR ds:0xc002e8d0,0xc001af61
c001bfa8:	c7 05 d4 e8 02 c0 0f ae 01 c0 	mov    DWORD PTR ds:0xc002e8d4,0xc001ae0f
c001bfb2:	c7 05 d8 e8 02 c0 f0 ad 01 c0 	mov    DWORD PTR ds:0xc002e8d8,0xc001adf0
c001bfbc:	c7 05 dc e8 02 c0 1e b0 01 c0 	mov    DWORD PTR ds:0xc002e8dc,0xc001b01e
c001bfc6:	c7 05 e4 e8 02 c0 ac b6 01 c0 	mov    DWORD PTR ds:0xc002e8e4,0xc001b6ac
c001bfd0:	c7 05 e0 e8 02 c0 8e bd 01 c0 	mov    DWORD PTR ds:0xc002e8e0,0xc001bd8e
c001bfda:	c7 05 e8 e8 02 c0 0c b7 01 c0 	mov    DWORD PTR ds:0xc002e8e8,0xc001b70c
c001bfe4:	c7 05 ec e8 02 c0 ef b3 01 c0 	mov    DWORD PTR ds:0xc002e8ec,0xc001b3ef
c001bfee:	c7 05 f0 e8 02 c0 29 b2 01 c0 	mov    DWORD PTR ds:0xc002e8f0,0xc001b229
c001bff8:	c7 05 f4 e8 02 c0 2e b2 01 c0 	mov    DWORD PTR ds:0xc002e8f4,0xc001b22e
c001c002:	c7 05 f8 e8 02 c0 d5 b7 01 c0 	mov    DWORD PTR ds:0xc002e8f8,0xc001b7d5
c001c00c:	c7 05 fc e8 02 c0 81 b7 01 c0 	mov    DWORD PTR ds:0xc002e8fc,0xc001b781
c001c016:	c7 05 00 e9 02 c0 c8 b4 01 c0 	mov    DWORD PTR ds:0xc002e900,0xc001b4c8
c001c020:	c7 05 04 e9 02 c0 1f b5 01 c0 	mov    DWORD PTR ds:0xc002e904,0xc001b51f
c001c02a:	c7 05 08 e9 02 c0 8b b5 01 c0 	mov    DWORD PTR ds:0xc002e908,0xc001b58b
c001c034:	c7 05 0c e9 02 c0 33 b2 01 c0 	mov    DWORD PTR ds:0xc002e90c,0xc001b233
c001c03e:	c7 05 10 e9 02 c0 45 b8 01 c0 	mov    DWORD PTR ds:0xc002e910,0xc001b845
c001c048:	c7 05 14 e9 02 c0 5f b8 01 c0 	mov    DWORD PTR ds:0xc002e914,0xc001b85f
c001c052:	c7 05 18 e9 02 c0 5f b8 01 c0 	mov    DWORD PTR ds:0xc002e918,0xc001b85f
c001c05c:	c7 05 1c e9 02 c0 94 b8 01 c0 	mov    DWORD PTR ds:0xc002e91c,0xc001b894
c001c066:	c7 05 20 e9 02 c0 f8 b8 01 c0 	mov    DWORD PTR ds:0xc002e920,0xc001b8f8
c001c070:	c7 05 24 e9 02 c0 3d b2 01 c0 	mov    DWORD PTR ds:0xc002e924,0xc001b23d
c001c07a:	c7 05 28 e9 02 c0 5c b9 01 c0 	mov    DWORD PTR ds:0xc002e928,0xc001b95c
c001c084:	c7 05 2c e9 02 c0 ac b3 01 c0 	mov    DWORD PTR ds:0xc002e92c,0xc001b3ac
c001c08e:	c7 05 30 e9 02 c0 a8 b9 01 c0 	mov    DWORD PTR ds:0xc002e930,0xc001b9a8
c001c098:	c7 05 34 e9 02 c0 6e b4 01 c0 	mov    DWORD PTR ds:0xc002e934,0xc001b46e
c001c0a2:	c7 05 38 e9 02 c0 2b ba 01 c0 	mov    DWORD PTR ds:0xc002e938,0xc001ba2b
c001c0ac:	c7 05 3c e9 02 c0 fd b5 01 c0 	mov    DWORD PTR ds:0xc002e93c,0xc001b5fd
c001c0b6:	c7 05 40 e9 02 c0 52 ba 01 c0 	mov    DWORD PTR ds:0xc002e940,0xc001ba52
c001c0c0:	c7 05 44 e9 02 c0 ba ba 01 c0 	mov    DWORD PTR ds:0xc002e944,0xc001baba
c001c0ca:	c7 05 48 e9 02 c0 67 bb 01 c0 	mov    DWORD PTR ds:0xc002e948,0xc001bb67
c001c0d4:	c7 05 4c e9 02 c0 4d b2 01 c0 	mov    DWORD PTR ds:0xc002e94c,0xc001b24d
c001c0de:	c7 05 50 e9 02 c0 b7 b2 01 c0 	mov    DWORD PTR ds:0xc002e950,0xc001b2b7
c001c0e8:	c7 05 54 e9 02 c0 fd b2 01 c0 	mov    DWORD PTR ds:0xc002e954,0xc001b2fd
c001c0f2:	c7 05 58 e9 02 c0 7b bc 01 c0 	mov    DWORD PTR ds:0xc002e958,0xc001bc7b
c001c0fc:	c7 05 5c e9 02 c0 7a b8 01 c0 	mov    DWORD PTR ds:0xc002e95c,0xc001b87a
c001c106:	c7 05 60 e9 02 c0 4e b3 01 c0 	mov    DWORD PTR ds:0xc002e960,0xc001b34e
c001c110:	c7 05 64 e9 02 c0 ed bc 01 c0 	mov    DWORD PTR ds:0xc002e964,0xc001bced
c001c11a:	c7 05 68 e9 02 c0 32 bd 01 c0 	mov    DWORD PTR ds:0xc002e968,0xc001bd32
c001c124:	c7 05 6c e9 02 c0 b9 ae 01 c0 	mov    DWORD PTR ds:0xc002e96c,0xc001aeb9
c001c12e:	c7 05 70 e9 02 c0 3a b0 01 c0 	mov    DWORD PTR ds:0xc002e970,0xc001b03a
c001c138:	c7 05 74 e9 02 c0 cf b0 01 c0 	mov    DWORD PTR ds:0xc002e974,0xc001b0cf
c001c142:	c7 05 78 e9 02 c0 a2 ad 01 c0 	mov    DWORD PTR ds:0xc002e978,0xc001ada2
c001c14c:	c7 05 7c e9 02 c0 81 b1 01 c0 	mov    DWORD PTR ds:0xc002e97c,0xc001b181
c001c156:	c7 05 80 e9 02 c0 1b ae 01 c0 	mov    DWORD PTR ds:0xc002e980,0xc001ae1b
c001c160:	c7 05 84 e9 02 c0 35 ae 01 c0 	mov    DWORD PTR ds:0xc002e984,0xc001ae35
c001c16a:	c3                   	ret    

c001c16b <Sys::systemCall(regs*, void*)>:
c001c16b:	53                   	push   ebx
c001c16c:	83 ec 08             	sub    esp,0x8
c001c16f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c173:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c176:	83 f8 7f             	cmp    eax,0x7f
c001c179:	77 16                	ja     c001c191 <Sys::systemCall(regs*, void*)+0x26>
c001c17b:	8b 14 85 c0 e8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1740]
c001c182:	85 d2                	test   edx,edx
c001c184:	74 0b                	je     c001c191 <Sys::systemCall(regs*, void*)+0x26>
c001c186:	83 ec 0c             	sub    esp,0xc
c001c189:	53                   	push   ebx
c001c18a:	ff d2                	call   edx
c001c18c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c18f:	eb 0d                	jmp    c001c19e <Sys::systemCall(regs*, void*)+0x33>
c001c191:	52                   	push   edx
c001c192:	52                   	push   edx
c001c193:	50                   	push   eax
c001c194:	68 c5 bc 02 c0       	push   0xc002bcc5
c001c199:	e8 ff 65 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c19e:	83 c4 10             	add    esp,0x10
c001c1a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c1a6:	31 d2                	xor    edx,edx
c001c1a8:	83 c4 08             	add    esp,0x8
c001c1ab:	5b                   	pop    ebx
c001c1ac:	c3                   	ret    

c001c1ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c1ad:	55                   	push   ebp
c001c1ae:	57                   	push   edi
c001c1af:	56                   	push   esi
c001c1b0:	53                   	push   ebx
c001c1b1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c1b7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c1be:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c1c5:	85 c0                	test   eax,eax
c001c1c7:	0f 95 c1             	setne  cl
c001c1ca:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c1d2:	0f 94 c2             	sete   dl
c001c1d5:	84 d1                	test   cl,dl
c001c1d7:	74 23                	je     c001c1fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c1d9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c1df:	74 1b                	je     c001c1fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c1e1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c1e7:	89 da                	mov    edx,ebx
c001c1e9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c1ef:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c1f5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c1fc:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c203:	05 ff 0f 00 00       	add    eax,0xfff
c001c208:	83 ec 0c             	sub    esp,0xc
c001c20b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c20f:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c215:	c1 e8 0c             	shr    eax,0xc
c001c218:	89 fe                	mov    esi,edi
c001c21a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c21e:	c1 ee 0c             	shr    esi,0xc
c001c221:	6a 01                	push   0x1
c001c223:	e8 f7 4f ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001c228:	89 c5                	mov    ebp,eax
c001c22a:	58                   	pop    eax
c001c22b:	5a                   	pop    edx
c001c22c:	56                   	push   esi
c001c22d:	68 d9 bc 02 c0       	push   0xc002bcd9
c001c232:	e8 66 65 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c237:	59                   	pop    ecx
c001c238:	58                   	pop    eax
c001c239:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c23d:	68 eb bc 02 c0       	push   0xc002bceb
c001c242:	e8 56 65 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c247:	83 c4 10             	add    esp,0x10
c001c24a:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c250:	0f 86 31 01 00 00    	jbe    c001c387 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c256:	c1 e6 0c             	shl    esi,0xc
c001c259:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c25c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c25f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c263:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c26a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c26d:	01 df                	add    edi,ebx
c001c26f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c272:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c276:	0f 84 08 01 00 00    	je     c001c384 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c27c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c282:	76 05                	jbe    c001c289 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c284:	bf 00 10 00 00       	mov    edi,0x1000
c001c289:	83 ec 0c             	sub    esp,0xc
c001c28c:	31 d2                	xor    edx,edx
c001c28e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c295:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c297:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c29b:	50                   	push   eax
c001c29c:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c2a0:	56                   	push   esi
c001c2a1:	52                   	push   edx
c001c2a2:	57                   	push   edi
c001c2a3:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c2aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2ad:	83 c4 20             	add    esp,0x20
c001c2b0:	85 c0                	test   eax,eax
c001c2b2:	74 0a                	je     c001c2be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c2b4:	53                   	push   ebx
c001c2b5:	53                   	push   ebx
c001c2b6:	50                   	push   eax
c001c2b7:	68 fd bc 02 c0       	push   0xc002bcfd
c001c2bc:	eb 0f                	jmp    c001c2cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c2be:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c2c2:	74 20                	je     c001c2e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c2c4:	51                   	push   ecx
c001c2c5:	51                   	push   ecx
c001c2c6:	6a 00                	push   0x0
c001c2c8:	68 28 bd 02 c0       	push   0xc002bd28
c001c2cd:	e8 cb 64 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c2d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c2d5:	e8 21 54 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c001c2da:	83 c4 10             	add    esp,0x10
c001c2dd:	31 c0                	xor    eax,eax
c001c2df:	e9 68 01 00 00       	jmp    c001c44c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c2e4:	fa                   	cli    
c001c2e5:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001c2eb:	e8 a5 36 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c2f0:	6a 07                	push   0x7
c001c2f2:	89 c7                	mov    edi,eax
c001c2f4:	55                   	push   ebp
c001c2f5:	50                   	push   eax
c001c2f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2fe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c304:	e8 69 57 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c309:	83 c4 0c             	add    esp,0xc
c001c30c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c313:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c319:	6a 00                	push   0x0
c001c31b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c320:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c323:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c329:	e8 9e 55 ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c32e:	58                   	pop    eax
c001c32f:	5a                   	pop    edx
c001c330:	68 07 0c 00 00       	push   0xc07
c001c335:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c339:	57                   	push   edi
c001c33a:	89 ef                	mov    edi,ebp
c001c33c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c343:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c349:	6a 00                	push   0x0
c001c34b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c350:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c353:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c359:	e8 d0 5a ff ff       	call   c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c35e:	b9 00 10 00 00       	mov    ecx,0x1000
c001c363:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c365:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001c36a:	83 c4 20             	add    esp,0x20
c001c36d:	48                   	dec    eax
c001c36e:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001c373:	85 c0                	test   eax,eax
c001c375:	75 01                	jne    c001c378 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c377:	fb                   	sti    
c001c378:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c37f:	e9 df fe ff ff       	jmp    c001c263 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c384:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c387:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c38f:	0f 86 a9 00 00 00    	jbe    c001c43e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c395:	fa                   	cli    
c001c396:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001c39c:	51                   	push   ecx
c001c39d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c3a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3aa:	6a 00                	push   0x0
c001c3ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3b4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3ba:	e8 0d 55 ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c3bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c3c3:	c1 e6 0c             	shl    esi,0xc
c001c3c6:	01 de                	add    esi,ebx
c001c3c8:	83 c4 10             	add    esp,0x10
c001c3cb:	39 de                	cmp    esi,ebx
c001c3cd:	74 61                	je     c001c430 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c3cf:	e8 c1 35 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c3d4:	6a 07                	push   0x7
c001c3d6:	89 c7                	mov    edi,eax
c001c3d8:	55                   	push   ebp
c001c3d9:	50                   	push   eax
c001c3da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3e2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3e8:	e8 85 56 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c3ed:	58                   	pop    eax
c001c3ee:	5a                   	pop    edx
c001c3ef:	68 07 0c 00 00       	push   0xc07
c001c3f4:	53                   	push   ebx
c001c3f5:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c3fb:	57                   	push   edi
c001c3fc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c403:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c409:	6a 00                	push   0x0
c001c40b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c410:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c413:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c419:	e8 10 5a ff ff       	call   c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c41e:	83 c4 1c             	add    esp,0x1c
c001c421:	68 00 10 00 00       	push   0x1000
c001c426:	6a 00                	push   0x0
c001c428:	55                   	push   ebp
c001c429:	e8 22 43 fe ff       	call   c0000750 <memset>
c001c42e:	eb 98                	jmp    c001c3c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c430:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001c435:	48                   	dec    eax
c001c436:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001c43b:	75 01                	jne    c001c43e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c43d:	fb                   	sti    
c001c43e:	83 ec 0c             	sub    esp,0xc
c001c441:	55                   	push   ebp
c001c442:	e8 b4 52 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	b0 01                	mov    al,0x1
c001c44c:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c452:	5b                   	pop    ebx
c001c453:	5e                   	pop    esi
c001c454:	5f                   	pop    edi
c001c455:	5d                   	pop    ebp
c001c456:	c3                   	ret    

c001c457 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c457:	55                   	push   ebp
c001c458:	57                   	push   edi
c001c459:	56                   	push   esi
c001c45a:	53                   	push   ebx
c001c45b:	83 ec 48             	sub    esp,0x48
c001c45e:	68 14 01 00 00       	push   0x114
c001c463:	e8 31 31 ff ff       	call   c000f599 <malloc>
c001c468:	83 c4 0c             	add    esp,0xc
c001c46b:	89 c6                	mov    esi,eax
c001c46d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c471:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c475:	50                   	push   eax
c001c476:	e8 81 68 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001c47b:	58                   	pop    eax
c001c47c:	5a                   	pop    edx
c001c47d:	6a 01                	push   0x1
c001c47f:	56                   	push   esi
c001c480:	e8 db 68 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001c485:	83 c4 10             	add    esp,0x10
c001c488:	85 c0                	test   eax,eax
c001c48a:	0f 85 47 01 00 00    	jne    c001c5d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c490:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c498:	83 ec 0c             	sub    esp,0xc
c001c49b:	6a 34                	push   0x34
c001c49d:	e8 f7 30 ff ff       	call   c000f599 <malloc>
c001c4a2:	89 c3                	mov    ebx,eax
c001c4a4:	58                   	pop    eax
c001c4a5:	8b 06                	mov    eax,DWORD PTR [esi]
c001c4a7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c4ab:	57                   	push   edi
c001c4ac:	53                   	push   ebx
c001c4ad:	6a 00                	push   0x0
c001c4af:	6a 34                	push   0x34
c001c4b1:	56                   	push   esi
c001c4b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c4b5:	83 c4 20             	add    esp,0x20
c001c4b8:	85 c0                	test   eax,eax
c001c4ba:	0f 85 17 01 00 00    	jne    c001c5d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4c0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c4c6:	0f 85 0b 01 00 00    	jne    c001c5d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4cf:	85 c0                	test   eax,eax
c001c4d1:	0f 84 00 01 00 00    	je     c001c5d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4d7:	31 d2                	xor    edx,edx
c001c4d9:	55                   	push   ebp
c001c4da:	52                   	push   edx
c001c4db:	50                   	push   eax
c001c4dc:	56                   	push   esi
c001c4dd:	e8 3c 69 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c4e2:	83 c4 10             	add    esp,0x10
c001c4e5:	85 c0                	test   eax,eax
c001c4e7:	0f 85 ea 00 00 00    	jne    c001c5d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4ed:	83 ec 0c             	sub    esp,0xc
c001c4f0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c4f3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c4f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c4fb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c4ff:	0f af c2             	imul   eax,edx
c001c502:	50                   	push   eax
c001c503:	e8 91 30 ff ff       	call   c000f599 <malloc>
c001c508:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c50a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c50e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c511:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c515:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c519:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c51d:	0f af c2             	imul   eax,edx
c001c520:	99                   	cdq    
c001c521:	52                   	push   edx
c001c522:	50                   	push   eax
c001c523:	56                   	push   esi
c001c524:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c527:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c52a:	83 c4 20             	add    esp,0x20
c001c52d:	85 c0                	test   eax,eax
c001c52f:	0f 84 a2 00 00 00    	je     c001c5d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c535:	31 d2                	xor    edx,edx
c001c537:	51                   	push   ecx
c001c538:	52                   	push   edx
c001c539:	50                   	push   eax
c001c53a:	56                   	push   esi
c001c53b:	e8 de 68 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c540:	83 c4 10             	add    esp,0x10
c001c543:	85 c0                	test   eax,eax
c001c545:	0f 85 8c 00 00 00    	jne    c001c5d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c54b:	83 ec 0c             	sub    esp,0xc
c001c54e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c552:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c556:	31 ed                	xor    ebp,ebp
c001c558:	0f af c2             	imul   eax,edx
c001c55b:	50                   	push   eax
c001c55c:	e8 38 30 ff ff       	call   c000f599 <malloc>
c001c561:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c563:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c567:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c56e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c572:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c576:	0f af c2             	imul   eax,edx
c001c579:	99                   	cdq    
c001c57a:	52                   	push   edx
c001c57b:	50                   	push   eax
c001c57c:	56                   	push   esi
c001c57d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c580:	83 c4 20             	add    esp,0x20
c001c583:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c58b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c58f:	0f 86 80 00 00 00    	jbe    c001c615 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c595:	0f b7 fd             	movzx  edi,bp
c001c598:	c1 e7 05             	shl    edi,0x5
c001c59b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c59f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c5a2:	75 6b                	jne    c001c60f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c5a4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c5a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5ab:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c5ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5b2:	52                   	push   edx
c001c5b3:	31 d2                	xor    edx,edx
c001c5b5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c5b8:	52                   	push   edx
c001c5b9:	50                   	push   eax
c001c5ba:	56                   	push   esi
c001c5bb:	e8 5e 68 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c5c0:	83 c4 10             	add    esp,0x10
c001c5c3:	85 c0                	test   eax,eax
c001c5c5:	74 17                	je     c001c5de <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c5c7:	83 ec 0c             	sub    esp,0xc
c001c5ca:	68 54 bd 02 c0       	push   0xc002bd54
c001c5cf:	e8 c9 61 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c5d4:	83 c4 10             	add    esp,0x10
c001c5d7:	31 c0                	xor    eax,eax
c001c5d9:	e9 87 00 00 00       	jmp    c001c665 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c5de:	83 ec 0c             	sub    esp,0xc
c001c5e1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c5e4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c5e7:	50                   	push   eax
c001c5e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c5ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c5f0:	56                   	push   esi
c001c5f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c5f5:	e8 b3 fb ff ff       	call   c001c1ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c5fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c5fe:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c602:	83 c4 20             	add    esp,0x20
c001c605:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c609:	73 04                	jae    c001c60f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c60b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c60f:	45                   	inc    ebp
c001c610:	e9 76 ff ff ff       	jmp    c001c58b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c615:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c619:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c61d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c621:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c627:	83 ec 0c             	sub    esp,0xc
c001c62a:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c630:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c635:	05 00 10 00 00       	add    eax,0x1000
c001c63a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c641:	e8 63 2f ff ff       	call   c000f5a9 <free>
c001c646:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c649:	e8 5b 2f ff ff       	call   c000f5a9 <free>
c001c64e:	58                   	pop    eax
c001c64f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c653:	e8 51 2f ff ff       	call   c000f5a9 <free>
c001c658:	89 34 24             	mov    DWORD PTR [esp],esi
c001c65b:	e8 5e 67 ff ff       	call   c0012dbe <File::close()>
c001c660:	83 c4 10             	add    esp,0x10
c001c663:	b0 01                	mov    al,0x1
c001c665:	83 c4 3c             	add    esp,0x3c
c001c668:	5b                   	pop    ebx
c001c669:	5e                   	pop    esi
c001c66a:	5f                   	pop    edi
c001c66b:	5d                   	pop    ebp
c001c66c:	c3                   	ret    

c001c66d <Thr::runtimeReferenceHelper()>:
c001c66d:	83 ec 18             	sub    esp,0x18
c001c670:	68 5c bd 02 c0       	push   0xc002bd5c
c001c675:	e8 23 61 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001c67a:	fa                   	cli    
c001c67b:	83 c4 10             	add    esp,0x10
c001c67e:	eb fe                	jmp    c001c67e <Thr::runtimeReferenceHelper()+0x11>

c001c680 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c680:	57                   	push   edi
c001c681:	56                   	push   esi
c001c682:	53                   	push   ebx
c001c683:	31 db                	xor    ebx,ebx
c001c685:	39 1d 60 f2 02 c0    	cmp    DWORD PTR ds:0xc002f260,ebx
c001c68b:	7e 3c                	jle    c001c6c9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c68d:	8b 34 9d e0 f1 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0e20]
c001c694:	31 ff                	xor    edi,edi
c001c696:	39 3c 9d e0 f0 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0f20],edi
c001c69d:	7e 27                	jle    c001c6c6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c69f:	50                   	push   eax
c001c6a0:	50                   	push   eax
c001c6a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c6a5:	8b 06                	mov    eax,DWORD PTR [esi]
c001c6a7:	03 04 9d 60 f1 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0ea0]
c001c6ae:	50                   	push   eax
c001c6af:	e8 e4 41 fe ff       	call   c0000898 <strcmp>
c001c6b4:	83 c4 10             	add    esp,0x10
c001c6b7:	85 c0                	test   eax,eax
c001c6b9:	75 05                	jne    c001c6c0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c6bb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c6be:	eb 0b                	jmp    c001c6cb <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c6c0:	83 c6 10             	add    esi,0x10
c001c6c3:	47                   	inc    edi
c001c6c4:	eb d0                	jmp    c001c696 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c6c6:	43                   	inc    ebx
c001c6c7:	eb bc                	jmp    c001c685 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c6c9:	31 c0                	xor    eax,eax
c001c6cb:	5b                   	pop    ebx
c001c6cc:	5e                   	pop    esi
c001c6cd:	5f                   	pop    edi
c001c6ce:	c3                   	ret    

c001c6cf <Thr::loadKernelSymbolTable(char const*)>:
c001c6cf:	55                   	push   ebp
c001c6d0:	57                   	push   edi
c001c6d1:	56                   	push   esi
c001c6d2:	53                   	push   ebx
c001c6d3:	83 ec 68             	sub    esp,0x68
c001c6d6:	8b 35 b0 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f2b0
c001c6dc:	68 14 01 00 00       	push   0x114
c001c6e1:	e8 b3 2e ff ff       	call   c000f599 <malloc>
c001c6e6:	83 c4 0c             	add    esp,0xc
c001c6e9:	89 c3                	mov    ebx,eax
c001c6eb:	56                   	push   esi
c001c6ec:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c6f0:	50                   	push   eax
c001c6f1:	e8 06 66 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001c6f6:	5e                   	pop    esi
c001c6f7:	5f                   	pop    edi
c001c6f8:	6a 01                	push   0x1
c001c6fa:	53                   	push   ebx
c001c6fb:	e8 60 66 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001c700:	83 c4 10             	add    esp,0x10
c001c703:	85 c0                	test   eax,eax
c001c705:	74 0a                	je     c001c711 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c707:	83 ec 0c             	sub    esp,0xc
c001c70a:	68 7e bd 02 c0       	push   0xc002bd7e
c001c70f:	eb 34                	jmp    c001c745 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c711:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c719:	83 ec 0c             	sub    esp,0xc
c001c71c:	6a 34                	push   0x34
c001c71e:	e8 76 2e ff ff       	call   c000f599 <malloc>
c001c723:	59                   	pop    ecx
c001c724:	89 c7                	mov    edi,eax
c001c726:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c72a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c72c:	56                   	push   esi
c001c72d:	57                   	push   edi
c001c72e:	6a 00                	push   0x0
c001c730:	6a 34                	push   0x34
c001c732:	53                   	push   ebx
c001c733:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c736:	83 c4 20             	add    esp,0x20
c001c739:	85 c0                	test   eax,eax
c001c73b:	74 17                	je     c001c754 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c73d:	83 ec 0c             	sub    esp,0xc
c001c740:	68 95 bd 02 c0       	push   0xc002bd95
c001c745:	e8 2f d8 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001c74a:	83 c4 10             	add    esp,0x10
c001c74d:	31 c0                	xor    eax,eax
c001c74f:	e9 31 02 00 00       	jmp    c001c985 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c754:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c75a:	75 e1                	jne    c001c73d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c75c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c75f:	85 c0                	test   eax,eax
c001c761:	74 da                	je     c001c73d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c763:	52                   	push   edx
c001c764:	31 d2                	xor    edx,edx
c001c766:	52                   	push   edx
c001c767:	50                   	push   eax
c001c768:	53                   	push   ebx
c001c769:	e8 b0 66 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c76e:	83 c4 10             	add    esp,0x10
c001c771:	85 c0                	test   eax,eax
c001c773:	75 c8                	jne    c001c73d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c775:	83 ec 0c             	sub    esp,0xc
c001c778:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c77c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c780:	31 ed                	xor    ebp,ebp
c001c782:	0f af c2             	imul   eax,edx
c001c785:	50                   	push   eax
c001c786:	e8 0e 2e ff ff       	call   c000f599 <malloc>
c001c78b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c78d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c791:	89 34 24             	mov    DWORD PTR [esp],esi
c001c794:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c798:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c79c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c7a0:	0f af c2             	imul   eax,edx
c001c7a3:	99                   	cdq    
c001c7a4:	52                   	push   edx
c001c7a5:	50                   	push   eax
c001c7a6:	53                   	push   ebx
c001c7a7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7aa:	83 c4 20             	add    esp,0x20
c001c7ad:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c7b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c7bd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c7c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c7cd:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c7d1:	0f 86 aa 00 00 00    	jbe    c001c881 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c7d7:	0f b7 f5             	movzx  esi,bp
c001c7da:	6b f6 28             	imul   esi,esi,0x28
c001c7dd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c7e1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c7e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c7e8:	50                   	push   eax
c001c7e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c7ed:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c7f1:	8b 16                	mov    edx,DWORD PTR [esi]
c001c7f3:	6b c0 28             	imul   eax,eax,0x28
c001c7f6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c7fa:	89 d0                	mov    eax,edx
c001c7fc:	31 d2                	xor    edx,edx
c001c7fe:	52                   	push   edx
c001c7ff:	50                   	push   eax
c001c800:	53                   	push   ebx
c001c801:	e8 18 66 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c806:	83 c4 0c             	add    esp,0xc
c001c809:	6a 20                	push   0x20
c001c80b:	6a 00                	push   0x0
c001c80d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c811:	52                   	push   edx
c001c812:	e8 39 3f fe ff       	call   c0000750 <memset>
c001c817:	58                   	pop    eax
c001c818:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c81a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c81e:	51                   	push   ecx
c001c81f:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c823:	52                   	push   edx
c001c824:	6a 00                	push   0x0
c001c826:	6a 1f                	push   0x1f
c001c828:	53                   	push   ebx
c001c829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c82c:	83 c4 18             	add    esp,0x18
c001c82f:	68 ac bd 02 c0       	push   0xc002bdac
c001c834:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c838:	52                   	push   edx
c001c839:	e8 5a 40 fe ff       	call   c0000898 <strcmp>
c001c83e:	83 c4 10             	add    esp,0x10
c001c841:	85 c0                	test   eax,eax
c001c843:	75 0f                	jne    c001c854 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c845:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c848:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c84c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c854:	50                   	push   eax
c001c855:	50                   	push   eax
c001c856:	68 b4 bd 02 c0       	push   0xc002bdb4
c001c85b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c85f:	50                   	push   eax
c001c860:	e8 33 40 fe ff       	call   c0000898 <strcmp>
c001c865:	83 c4 10             	add    esp,0x10
c001c868:	85 c0                	test   eax,eax
c001c86a:	75 0f                	jne    c001c87b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c86c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c86f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c873:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c877:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c87b:	45                   	inc    ebp
c001c87c:	e9 4c ff ff ff       	jmp    c001c7cd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c881:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c886:	75 10                	jne    c001c898 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c888:	83 ec 0c             	sub    esp,0xc
c001c88b:	68 bc bd 02 c0       	push   0xc002bdbc
c001c890:	e8 e4 d6 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001c895:	83 c4 10             	add    esp,0x10
c001c898:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c89d:	75 10                	jne    c001c8af <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c89f:	83 ec 0c             	sub    esp,0xc
c001c8a2:	68 bc bd 02 c0       	push   0xc002bdbc
c001c8a7:	e8 cd d6 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001c8ac:	83 c4 10             	add    esp,0x10
c001c8af:	31 d2                	xor    edx,edx
c001c8b1:	50                   	push   eax
c001c8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b6:	52                   	push   edx
c001c8b7:	50                   	push   eax
c001c8b8:	53                   	push   ebx
c001c8b9:	e8 60 65 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c8be:	5a                   	pop    edx
c001c8bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8c3:	e8 d1 2c ff ff       	call   c000f599 <malloc>
c001c8c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c8d0:	31 c9                	xor    ecx,ecx
c001c8d2:	5e                   	pop    esi
c001c8d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c8d5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c8d9:	55                   	push   ebp
c001c8da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8de:	51                   	push   ecx
c001c8df:	52                   	push   edx
c001c8e0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c8e4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c8e8:	53                   	push   ebx
c001c8e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8ec:	83 c4 14             	add    esp,0x14
c001c8ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c8f3:	e8 a1 2c ff ff       	call   c000f599 <malloc>
c001c8f8:	89 c6                	mov    esi,eax
c001c8fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c8fc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c8ff:	56                   	push   esi
c001c900:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c904:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c908:	51                   	push   ecx
c001c909:	52                   	push   edx
c001c90a:	53                   	push   ebx
c001c90b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c90e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c912:	8b 15 60 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f260
c001c918:	83 c4 1c             	add    esp,0x1c
c001c91b:	c1 e8 04             	shr    eax,0x4
c001c91e:	89 04 95 e0 f0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0f20],eax
c001c925:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c929:	31 d2                	xor    edx,edx
c001c92b:	52                   	push   edx
c001c92c:	50                   	push   eax
c001c92d:	53                   	push   ebx
c001c92e:	e8 eb 64 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001c933:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c935:	31 d2                	xor    edx,edx
c001c937:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c93a:	56                   	push   esi
c001c93b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c93f:	52                   	push   edx
c001c940:	50                   	push   eax
c001c941:	53                   	push   ebx
c001c942:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c945:	83 c4 14             	add    esp,0x14
c001c948:	53                   	push   ebx
c001c949:	e8 70 64 ff ff       	call   c0012dbe <File::close()>
c001c94e:	5d                   	pop    ebp
c001c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c953:	e8 51 2c ff ff       	call   c000f5a9 <free>
c001c958:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c95b:	e8 49 2c ff ff       	call   c000f5a9 <free>
c001c960:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c001c965:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c969:	8d 50 01             	lea    edx,[eax+0x1]
c001c96c:	89 0c 85 e0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e20],ecx
c001c973:	89 34 85 60 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ea0],esi
c001c97a:	89 15 60 f2 02 c0    	mov    DWORD PTR ds:0xc002f260,edx
c001c980:	83 c4 10             	add    esp,0x10
c001c983:	b0 01                	mov    al,0x1
c001c985:	83 c4 5c             	add    esp,0x5c
c001c988:	5b                   	pop    ebx
c001c989:	5e                   	pop    esi
c001c98a:	5f                   	pop    edi
c001c98b:	5d                   	pop    ebp
c001c98c:	c3                   	ret    

c001c98d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c98d:	55                   	push   ebp
c001c98e:	57                   	push   edi
c001c98f:	56                   	push   esi
c001c990:	53                   	push   ebx
c001c991:	81 ec 68 03 00 00    	sub    esp,0x368
c001c997:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c99e:	8b 1d b0 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2b0
c001c9a4:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c9a8:	68 14 01 00 00       	push   0x114
c001c9ad:	e8 e7 2b ff ff       	call   c000f599 <malloc>
c001c9b2:	83 c4 0c             	add    esp,0xc
c001c9b5:	89 c5                	mov    ebp,eax
c001c9b7:	53                   	push   ebx
c001c9b8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c9bf:	50                   	push   eax
c001c9c0:	e8 37 63 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001c9c5:	5e                   	pop    esi
c001c9c6:	5f                   	pop    edi
c001c9c7:	6a 01                	push   0x1
c001c9c9:	55                   	push   ebp
c001c9ca:	e8 91 63 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001c9cf:	83 c4 10             	add    esp,0x10
c001c9d2:	85 c0                	test   eax,eax
c001c9d4:	0f 85 a7 06 00 00    	jne    c001d081 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9da:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c9e2:	83 ec 0c             	sub    esp,0xc
c001c9e5:	6a 34                	push   0x34
c001c9e7:	e8 ad 2b ff ff       	call   c000f599 <malloc>
c001c9ec:	5b                   	pop    ebx
c001c9ed:	89 c7                	mov    edi,eax
c001c9ef:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c9f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c9f6:	53                   	push   ebx
c001c9f7:	57                   	push   edi
c001c9f8:	6a 00                	push   0x0
c001c9fa:	6a 34                	push   0x34
c001c9fc:	55                   	push   ebp
c001c9fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca00:	83 c4 20             	add    esp,0x20
c001ca03:	85 c0                	test   eax,eax
c001ca05:	0f 85 76 06 00 00    	jne    c001d081 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca0b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ca11:	0f 85 6a 06 00 00    	jne    c001d081 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca17:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ca1a:	85 c0                	test   eax,eax
c001ca1c:	0f 84 5f 06 00 00    	je     c001d081 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca22:	31 d2                	xor    edx,edx
c001ca24:	51                   	push   ecx
c001ca25:	52                   	push   edx
c001ca26:	50                   	push   eax
c001ca27:	55                   	push   ebp
c001ca28:	e8 f1 63 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001ca2d:	83 c4 10             	add    esp,0x10
c001ca30:	85 c0                	test   eax,eax
c001ca32:	0f 85 49 06 00 00    	jne    c001d081 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca38:	83 ec 0c             	sub    esp,0xc
c001ca3b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ca3e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca42:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ca46:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca4a:	0f af c2             	imul   eax,edx
c001ca4d:	50                   	push   eax
c001ca4e:	e8 46 2b ff ff       	call   c000f599 <malloc>
c001ca53:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca61:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca65:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca69:	0f af c2             	imul   eax,edx
c001ca6c:	99                   	cdq    
c001ca6d:	52                   	push   edx
c001ca6e:	50                   	push   eax
c001ca6f:	55                   	push   ebp
c001ca70:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca73:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ca76:	83 c4 20             	add    esp,0x20
c001ca79:	85 c0                	test   eax,eax
c001ca7b:	0f 84 00 06 00 00    	je     c001d081 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca81:	52                   	push   edx
c001ca82:	31 d2                	xor    edx,edx
c001ca84:	52                   	push   edx
c001ca85:	50                   	push   eax
c001ca86:	55                   	push   ebp
c001ca87:	e8 92 63 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001ca8c:	83 c4 10             	add    esp,0x10
c001ca8f:	85 c0                	test   eax,eax
c001ca91:	0f 85 ea 05 00 00    	jne    c001d081 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca97:	83 ec 0c             	sub    esp,0xc
c001ca9a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ca9e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001caa2:	31 f6                	xor    esi,esi
c001caa4:	0f af c2             	imul   eax,edx
c001caa7:	50                   	push   eax
c001caa8:	e8 ec 2a ff ff       	call   c000f599 <malloc>
c001caad:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cab0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cab4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cab7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cabb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cabf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cac3:	0f af c2             	imul   eax,edx
c001cac6:	99                   	cdq    
c001cac7:	52                   	push   edx
c001cac8:	50                   	push   eax
c001cac9:	55                   	push   ebp
c001caca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cacd:	83 c4 20             	add    esp,0x20
c001cad0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cad4:	0f 86 8a 00 00 00    	jbe    c001cb64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cada:	0f b7 de             	movzx  ebx,si
c001cadd:	c1 e3 05             	shl    ebx,0x5
c001cae0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cae4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cae7:	75 75                	jne    c001cb5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cae9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001caec:	31 d2                	xor    edx,edx
c001caee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001caf2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001caf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caf9:	50                   	push   eax
c001cafa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cafd:	52                   	push   edx
c001cafe:	50                   	push   eax
c001caff:	55                   	push   ebp
c001cb00:	e8 19 63 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001cb05:	83 c4 10             	add    esp,0x10
c001cb08:	85 c0                	test   eax,eax
c001cb0a:	0f 85 71 05 00 00    	jne    c001d081 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cb10:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cb17:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb1a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cb1e:	31 d2                	xor    edx,edx
c001cb20:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cb24:	83 ec 0c             	sub    esp,0xc
c001cb27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb2b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb32:	50                   	push   eax
c001cb33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb3b:	52                   	push   edx
c001cb3c:	50                   	push   eax
c001cb3d:	55                   	push   ebp
c001cb3e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb41:	83 c4 1c             	add    esp,0x1c
c001cb44:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cb47:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cb4a:	50                   	push   eax
c001cb4b:	6a 00                	push   0x0
c001cb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb51:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cb55:	50                   	push   eax
c001cb56:	e8 f5 3b fe ff       	call   c0000750 <memset>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	46                   	inc    esi
c001cb5f:	e9 6c ff ff ff       	jmp    c001cad0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cb64:	53                   	push   ebx
c001cb65:	31 db                	xor    ebx,ebx
c001cb67:	68 00 01 00 00       	push   0x100
c001cb6c:	6a 00                	push   0x0
c001cb6e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cb72:	50                   	push   eax
c001cb73:	e8 d8 3b fe ff       	call   c0000750 <memset>
c001cb78:	83 c4 0c             	add    esp,0xc
c001cb7b:	68 00 01 00 00       	push   0x100
c001cb80:	6a 00                	push   0x0
c001cb82:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cb89:	50                   	push   eax
c001cb8a:	e8 c1 3b fe ff       	call   c0000750 <memset>
c001cb8f:	83 c4 10             	add    esp,0x10
c001cb92:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cb9a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cba2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cbaa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cbb2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cbba:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cbbe:	0f 86 30 01 00 00    	jbe    c001ccf4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cbc4:	0f b7 f3             	movzx  esi,bx
c001cbc7:	6b f6 28             	imul   esi,esi,0x28
c001cbca:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cbce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cbd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbd5:	52                   	push   edx
c001cbd6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cbda:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cbde:	8b 06                	mov    eax,DWORD PTR [esi]
c001cbe0:	6b d2 28             	imul   edx,edx,0x28
c001cbe3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cbe7:	31 d2                	xor    edx,edx
c001cbe9:	52                   	push   edx
c001cbea:	50                   	push   eax
c001cbeb:	55                   	push   ebp
c001cbec:	e8 2d 62 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001cbf1:	83 c4 0c             	add    esp,0xc
c001cbf4:	6a 20                	push   0x20
c001cbf6:	6a 00                	push   0x0
c001cbf8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cbff:	51                   	push   ecx
c001cc00:	e8 4b 3b fe ff       	call   c0000750 <memset>
c001cc05:	59                   	pop    ecx
c001cc06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc09:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cc0d:	52                   	push   edx
c001cc0e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cc15:	51                   	push   ecx
c001cc16:	6a 00                	push   0x0
c001cc18:	6a 1f                	push   0x1f
c001cc1a:	55                   	push   ebp
c001cc1b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc1e:	83 c4 1c             	add    esp,0x1c
c001cc21:	6a 09                	push   0x9
c001cc23:	68 d6 bd 02 c0       	push   0xc002bdd6
c001cc28:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cc2f:	51                   	push   ecx
c001cc30:	e8 17 3a fe ff       	call   c000064c <memcmp>
c001cc35:	83 c4 10             	add    esp,0x10
c001cc38:	85 c0                	test   eax,eax
c001cc3a:	75 21                	jne    c001cc5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cc3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cc44:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cc48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc4c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc4f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cc56:	89 d0                	mov    eax,edx
c001cc58:	40                   	inc    eax
c001cc59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc5d:	50                   	push   eax
c001cc5e:	6a 09                	push   0x9
c001cc60:	68 e0 bd 02 c0       	push   0xc002bde0
c001cc65:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc6c:	50                   	push   eax
c001cc6d:	e8 da 39 fe ff       	call   c000064c <memcmp>
c001cc72:	83 c4 10             	add    esp,0x10
c001cc75:	85 c0                	test   eax,eax
c001cc77:	75 21                	jne    c001cc9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cc79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cc81:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cc85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc89:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc8c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cc93:	89 d0                	mov    eax,edx
c001cc95:	40                   	inc    eax
c001cc96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc9a:	50                   	push   eax
c001cc9b:	50                   	push   eax
c001cc9c:	68 ac bd 02 c0       	push   0xc002bdac
c001cca1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cca8:	50                   	push   eax
c001cca9:	e8 ea 3b fe ff       	call   c0000898 <strcmp>
c001ccae:	83 c4 10             	add    esp,0x10
c001ccb1:	85 c0                	test   eax,eax
c001ccb3:	75 0f                	jne    c001ccc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001ccb5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ccbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccc4:	50                   	push   eax
c001ccc5:	50                   	push   eax
c001ccc6:	68 b4 bd 02 c0       	push   0xc002bdb4
c001cccb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ccd2:	50                   	push   eax
c001ccd3:	e8 c0 3b fe ff       	call   c0000898 <strcmp>
c001ccd8:	83 c4 10             	add    esp,0x10
c001ccdb:	85 c0                	test   eax,eax
c001ccdd:	75 0f                	jne    c001ccee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001ccdf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cce2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ccee:	43                   	inc    ebx
c001ccef:	e9 c6 fe ff ff       	jmp    c001cbba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001ccf4:	31 d2                	xor    edx,edx
c001ccf6:	50                   	push   eax
c001ccf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ccfb:	52                   	push   edx
c001ccfc:	50                   	push   eax
c001ccfd:	55                   	push   ebp
c001ccfe:	e8 1b 61 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001cd03:	58                   	pop    eax
c001cd04:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd08:	e8 8c 28 ff ff       	call   c000f599 <malloc>
c001cd0d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd10:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cd14:	31 d2                	xor    edx,edx
c001cd16:	58                   	pop    eax
c001cd17:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cd1b:	53                   	push   ebx
c001cd1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cd20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd24:	52                   	push   edx
c001cd25:	50                   	push   eax
c001cd26:	55                   	push   ebp
c001cd27:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd2a:	83 c4 14             	add    esp,0x14
c001cd2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd31:	e8 63 28 ff ff       	call   c000f599 <malloc>
c001cd36:	31 d2                	xor    edx,edx
c001cd38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cd3c:	83 c4 0c             	add    esp,0xc
c001cd3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd43:	52                   	push   edx
c001cd44:	50                   	push   eax
c001cd45:	55                   	push   ebp
c001cd46:	e8 d3 60 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001cd4b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd4e:	31 d2                	xor    edx,edx
c001cd50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd53:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cd57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cd5b:	52                   	push   edx
c001cd5c:	50                   	push   eax
c001cd5d:	55                   	push   ebp
c001cd5e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd61:	83 c4 20             	add    esp,0x20
c001cd64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cd70:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cd74:	0f 84 0b 03 00 00    	je     c001d085 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cd7a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cd81:	31 d2                	xor    edx,edx
c001cd83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd87:	c1 e8 03             	shr    eax,0x3
c001cd8a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cd8e:	51                   	push   ecx
c001cd8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd93:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cd97:	52                   	push   edx
c001cd98:	50                   	push   eax
c001cd99:	55                   	push   ebp
c001cd9a:	e8 7f 60 ff ff       	call   c0012e1e <File::seek(unsigned long long)>
c001cd9f:	5b                   	pop    ebx
c001cda0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cda4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cdab:	e8 e9 27 ff ff       	call   c000f599 <malloc>
c001cdb0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cdb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cdb7:	31 d2                	xor    edx,edx
c001cdb9:	5e                   	pop    esi
c001cdba:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cdbe:	50                   	push   eax
c001cdbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdc7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cdce:	52                   	push   edx
c001cdcf:	50                   	push   eax
c001cdd0:	55                   	push   ebp
c001cdd1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdd4:	83 c4 20             	add    esp,0x20
c001cdd7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cddf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cde3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cde7:	0f 8d 7c 02 00 00    	jge    c001d069 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cded:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cdf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cdf5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cdfa:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cdfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ce01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce05:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ce09:	89 d8                	mov    eax,ebx
c001ce0b:	c1 e8 08             	shr    eax,0x8
c001ce0e:	89 c6                	mov    esi,eax
c001ce10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ce14:	c1 e6 04             	shl    esi,0x4
c001ce17:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ce1b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ce1e:	85 d2                	test   edx,edx
c001ce20:	0f 85 bf 00 00 00    	jne    c001cee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ce26:	83 ec 0c             	sub    esp,0xc
c001ce29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce2d:	03 06                	add    eax,DWORD PTR [esi]
c001ce2f:	50                   	push   eax
c001ce30:	e8 4b f8 ff ff       	call   c001c680 <Thr::getAddressOfKernelSymbol(char const*)>
c001ce35:	83 c4 10             	add    esp,0x10
c001ce38:	89 c2                	mov    edx,eax
c001ce3a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001ce3f:	85 c0                	test   eax,eax
c001ce41:	0f 85 9e 00 00 00    	jne    c001cee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ce47:	83 ec 0c             	sub    esp,0xc
c001ce4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce4e:	03 06                	add    eax,DWORD PTR [esi]
c001ce50:	50                   	push   eax
c001ce51:	e8 e9 16 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001ce56:	83 c4 10             	add    esp,0x10
c001ce59:	89 c2                	mov    edx,eax
c001ce5b:	85 c0                	test   eax,eax
c001ce5d:	0f 85 82 00 00 00    	jne    c001cee5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ce63:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001ce67:	50                   	push   eax
c001ce68:	50                   	push   eax
c001ce69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce6d:	03 06                	add    eax,DWORD PTR [esi]
c001ce6f:	50                   	push   eax
c001ce70:	68 ea bd 02 c0       	push   0xc002bdea
c001ce75:	e8 23 59 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001ce7a:	58                   	pop    eax
c001ce7b:	5a                   	pop    edx
c001ce7c:	68 04 be 02 c0       	push   0xc002be04
c001ce81:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce88:	50                   	push   eax
c001ce89:	e8 7e 39 fe ff       	call   c000080c <strcpy>
c001ce8e:	59                   	pop    ecx
c001ce8f:	58                   	pop    eax
c001ce90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce94:	03 06                	add    eax,DWORD PTR [esi]
c001ce96:	50                   	push   eax
c001ce97:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce9e:	50                   	push   eax
c001ce9f:	e8 a8 3a fe ff       	call   c000094c <strcat>
c001cea4:	58                   	pop    eax
c001cea5:	5a                   	pop    edx
c001cea6:	68 9a be 02 c0       	push   0xc002be9a
c001ceab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ceb2:	50                   	push   eax
c001ceb3:	e8 94 3a fe ff       	call   c000094c <strcat>
c001ceb8:	83 c4 10             	add    esp,0x10
c001cebb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cec0:	0f 84 5d 01 00 00    	je     c001d023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cec6:	83 ec 0c             	sub    esp,0xc
c001cec9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ced0:	50                   	push   eax
c001ced1:	e8 a3 d0 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001ced6:	83 c4 10             	add    esp,0x10
c001ced9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cedd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cee1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cee5:	80 fb 01             	cmp    bl,0x1
c001cee8:	0f 85 88 00 00 00    	jne    c001cf76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001ceee:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cef5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cef9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cefd:	01 ce                	add    esi,ecx
c001ceff:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cf05:	0f 94 c0             	sete   al
c001cf08:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cf0e:	0f 94 c3             	sete   bl
c001cf11:	09 c3                	or     ebx,eax
c001cf13:	8b 06                	mov    eax,DWORD PTR [esi]
c001cf15:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cf1a:	74 41                	je     c001cf5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cf1c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cf1f:	84 db                	test   bl,bl
c001cf21:	75 15                	jne    c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cf23:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf27:	66 83 f8 0c          	cmp    ax,0xc
c001cf2b:	76 05                	jbe    c001cf32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cf2d:	b8 0c 00 00 00       	mov    eax,0xc
c001cf32:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cf36:	76 37                	jbe    c001cf6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cf38:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cf3c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf41:	0f 84 dc 00 00 00    	je     c001d023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf47:	83 ec 0c             	sub    esp,0xc
c001cf4a:	68 1b be 02 c0       	push   0xc002be1b
c001cf4f:	e8 25 d0 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001cf54:	83 c4 10             	add    esp,0x10
c001cf57:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cf5b:	eb 12                	jmp    c001cf6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cf5d:	01 c1                	add    ecx,eax
c001cf5f:	84 db                	test   bl,bl
c001cf61:	75 0c                	jne    c001cf6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cf63:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf67:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cf6b:	77 02                	ja     c001cf6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cf6d:	01 d1                	add    ecx,edx
c001cf6f:	89 0e                	mov    DWORD PTR [esi],ecx
c001cf71:	e9 ea 00 00 00       	jmp    c001d060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cf76:	80 fb 02             	cmp    bl,0x2
c001cf79:	75 7c                	jne    c001cff7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cf7b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cf82:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cf86:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cf8a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cf90:	74 20                	je     c001cfb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cf92:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cf98:	74 18                	je     c001cfb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cf9a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf9e:	b9 0a 00 00 00       	mov    ecx,0xa
c001cfa3:	66 83 f8 0e          	cmp    ax,0xe
c001cfa7:	77 03                	ja     c001cfac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cfa9:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cfac:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cfb0:	76 1f                	jbe    c001cfd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cfb2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cfb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cfbb:	74 66                	je     c001d023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cfbd:	83 ec 0c             	sub    esp,0xc
c001cfc0:	68 37 be 02 c0       	push   0xc002be37
c001cfc5:	e8 af cf ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001cfca:	83 c4 10             	add    esp,0x10
c001cfcd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cfd1:	8b 06                	mov    eax,DWORD PTR [esi]
c001cfd3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cfd8:	74 13                	je     c001cfed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cfda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cfde:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cfe5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cfe9:	01 c8                	add    eax,ecx
c001cfeb:	eb 04                	jmp    c001cff1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cfed:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cff1:	01 c2                	add    edx,eax
c001cff3:	89 16                	mov    DWORD PTR [esi],edx
c001cff5:	eb 69                	jmp    c001d060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cff7:	0f b6 db             	movzx  ebx,bl
c001cffa:	50                   	push   eax
c001cffb:	50                   	push   eax
c001cffc:	53                   	push   ebx
c001cffd:	68 53 be 02 c0       	push   0xc002be53
c001d002:	e8 96 57 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d00f:	74 12                	je     c001d023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d011:	83 ec 0c             	sub    esp,0xc
c001d014:	68 5e be 02 c0       	push   0xc002be5e
c001d019:	e8 5b cf ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001d01e:	83 c4 10             	add    esp,0x10
c001d021:	eb 3d                	jmp    c001d060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d023:	83 ec 0c             	sub    esp,0xc
c001d026:	55                   	push   ebp
c001d027:	e8 92 5d ff ff       	call   c0012dbe <File::close()>
c001d02c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d02f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d032:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d035:	59                   	pop    ecx
c001d036:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d03a:	e8 6a 25 ff ff       	call   c000f5a9 <free>
c001d03f:	5b                   	pop    ebx
c001d040:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d044:	e8 60 25 ff ff       	call   c000f5a9 <free>
c001d049:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d04c:	e8 58 25 ff ff       	call   c000f5a9 <free>
c001d051:	5e                   	pop    esi
c001d052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d056:	e8 4e 25 ff ff       	call   c000f5a9 <free>
c001d05b:	83 c4 10             	add    esp,0x10
c001d05e:	eb 21                	jmp    c001d081 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d060:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d064:	e9 76 fd ff ff       	jmp    c001cddf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d069:	83 ec 0c             	sub    esp,0xc
c001d06c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d070:	e8 34 25 ff ff       	call   c000f5a9 <free>
c001d075:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d079:	83 c4 10             	add    esp,0x10
c001d07c:	e9 eb fc ff ff       	jmp    c001cd6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d081:	31 c0                	xor    eax,eax
c001d083:	eb 33                	jmp    c001d0b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d085:	83 ec 0c             	sub    esp,0xc
c001d088:	55                   	push   ebp
c001d089:	e8 30 5d ff ff       	call   c0012dbe <File::close()>
c001d08e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d091:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d094:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d097:	58                   	pop    eax
c001d098:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d09c:	e8 08 25 ff ff       	call   c000f5a9 <free>
c001d0a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0a4:	e8 00 25 ff ff       	call   c000f5a9 <free>
c001d0a9:	5a                   	pop    edx
c001d0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ae:	e8 f6 24 ff ff       	call   c000f5a9 <free>
c001d0b3:	83 c4 10             	add    esp,0x10
c001d0b6:	b0 01                	mov    al,0x1
c001d0b8:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d0be:	5b                   	pop    ebx
c001d0bf:	5e                   	pop    esi
c001d0c0:	5f                   	pop    edi
c001d0c1:	5d                   	pop    ebp
c001d0c2:	c3                   	ret    

c001d0c3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d0c3:	56                   	push   esi
c001d0c4:	31 d2                	xor    edx,edx
c001d0c6:	53                   	push   ebx
c001d0c7:	8b 1d c0 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002eac0
c001d0cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0d1:	39 d3                	cmp    ebx,edx
c001d0d3:	7e 1b                	jle    c001d0f0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d0d5:	8b 04 95 e0 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1320]
c001d0dc:	39 c8                	cmp    eax,ecx
c001d0de:	77 0d                	ja     c001d0ed <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d0e0:	8b 34 95 e0 ea 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1520]
c001d0e7:	01 c6                	add    esi,eax
c001d0e9:	39 ce                	cmp    esi,ecx
c001d0eb:	77 05                	ja     c001d0f2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d0ed:	42                   	inc    edx
c001d0ee:	eb e1                	jmp    c001d0d1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d0f0:	31 c0                	xor    eax,eax
c001d0f2:	5b                   	pop    ebx
c001d0f3:	5e                   	pop    esi
c001d0f4:	c3                   	ret    

c001d0f5 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d0f5:	53                   	push   ebx
c001d0f6:	31 c0                	xor    eax,eax
c001d0f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d0fc:	8b 1d c0 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002eac0
c001d102:	39 c3                	cmp    ebx,eax
c001d104:	7e 22                	jle    c001d128 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d106:	8b 14 85 e0 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1320]
c001d10d:	39 ca                	cmp    edx,ecx
c001d10f:	77 14                	ja     c001d125 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d111:	03 14 85 e0 ea 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1520]
c001d118:	39 ca                	cmp    edx,ecx
c001d11a:	76 09                	jbe    c001d125 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d11c:	8b 04 85 e0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1120]
c001d123:	eb 05                	jmp    c001d12a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d125:	40                   	inc    eax
c001d126:	eb da                	jmp    c001d102 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d128:	31 c0                	xor    eax,eax
c001d12a:	5b                   	pop    ebx
c001d12b:	c3                   	ret    

c001d12c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d12c:	53                   	push   ebx
c001d12d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d131:	53                   	push   ebx
c001d132:	e8 8c ff ff ff       	call   c001d0c3 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d137:	5a                   	pop    edx
c001d138:	31 d2                	xor    edx,edx
c001d13a:	85 c0                	test   eax,eax
c001d13c:	74 04                	je     c001d142 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d13e:	89 da                	mov    edx,ebx
c001d140:	29 c2                	sub    edx,eax
c001d142:	89 d0                	mov    eax,edx
c001d144:	5b                   	pop    ebx
c001d145:	c3                   	ret    

c001d146 <Thr::loadDLL(char const*, bool)>:
c001d146:	55                   	push   ebp
c001d147:	57                   	push   edi
c001d148:	56                   	push   esi
c001d149:	53                   	push   ebx
c001d14a:	81 ec 34 01 00 00    	sub    esp,0x134
c001d150:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d157:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d15e:	56                   	push   esi
c001d15f:	68 76 be 02 c0       	push   0xc002be76
c001d164:	e8 34 56 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001d169:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d170:	e8 24 24 ff ff       	call   c000f599 <malloc>
c001d175:	83 c4 0c             	add    esp,0xc
c001d178:	89 c3                	mov    ebx,eax
c001d17a:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c001d180:	56                   	push   esi
c001d181:	50                   	push   eax
c001d182:	e8 75 5b ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001d187:	83 c4 10             	add    esp,0x10
c001d18a:	85 db                	test   ebx,ebx
c001d18c:	75 3c                	jne    c001d1ca <Thr::loadDLL(char const*, bool)+0x84>
c001d18e:	89 f8                	mov    eax,edi
c001d190:	84 c0                	test   al,al
c001d192:	0f 84 d2 01 00 00    	je     c001d36a <Thr::loadDLL(char const*, bool)+0x224>
c001d198:	55                   	push   ebp
c001d199:	55                   	push   ebp
c001d19a:	68 87 be 02 c0       	push   0xc002be87
c001d19f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d1a3:	55                   	push   ebp
c001d1a4:	e8 63 36 fe ff       	call   c000080c <strcpy>
c001d1a9:	58                   	pop    eax
c001d1aa:	5a                   	pop    edx
c001d1ab:	56                   	push   esi
c001d1ac:	55                   	push   ebp
c001d1ad:	e8 9a 37 fe ff       	call   c000094c <strcat>
c001d1b2:	59                   	pop    ecx
c001d1b3:	58                   	pop    eax
c001d1b4:	68 9a be 02 c0       	push   0xc002be9a
c001d1b9:	55                   	push   ebp
c001d1ba:	e8 8d 37 fe ff       	call   c000094c <strcat>
c001d1bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d1c2:	e8 b2 cd ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001d1c7:	83 c4 10             	add    esp,0x10
c001d1ca:	51                   	push   ecx
c001d1cb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d1cf:	50                   	push   eax
c001d1d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d1d4:	50                   	push   eax
c001d1d5:	53                   	push   ebx
c001d1d6:	e8 31 5e ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	85 db                	test   ebx,ebx
c001d1e0:	74 0c                	je     c001d1ee <Thr::loadDLL(char const*, bool)+0xa8>
c001d1e2:	83 ec 0c             	sub    esp,0xc
c001d1e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d1e7:	53                   	push   ebx
c001d1e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d1eb:	83 c4 10             	add    esp,0x10
c001d1ee:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d1f3:	75 0a                	jne    c001d1ff <Thr::loadDLL(char const*, bool)+0xb9>
c001d1f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d1f9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d1fd:	75 3c                	jne    c001d23b <Thr::loadDLL(char const*, bool)+0xf5>
c001d1ff:	89 f8                	mov    eax,edi
c001d201:	84 c0                	test   al,al
c001d203:	0f 84 49 01 00 00    	je     c001d352 <Thr::loadDLL(char const*, bool)+0x20c>
c001d209:	51                   	push   ecx
c001d20a:	51                   	push   ecx
c001d20b:	68 87 be 02 c0       	push   0xc002be87
c001d210:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d214:	53                   	push   ebx
c001d215:	e8 f2 35 fe ff       	call   c000080c <strcpy>
c001d21a:	5d                   	pop    ebp
c001d21b:	58                   	pop    eax
c001d21c:	56                   	push   esi
c001d21d:	53                   	push   ebx
c001d21e:	e8 29 37 fe ff       	call   c000094c <strcat>
c001d223:	58                   	pop    eax
c001d224:	5a                   	pop    edx
c001d225:	68 9a be 02 c0       	push   0xc002be9a
c001d22a:	53                   	push   ebx
c001d22b:	e8 1c 37 fe ff       	call   c000094c <strcat>
c001d230:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d233:	e8 41 cd ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001d238:	83 c4 10             	add    esp,0x10
c001d23b:	52                   	push   edx
c001d23c:	6a 03                	push   0x3
c001d23e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d242:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d246:	05 ff 0f 00 00       	add    eax,0xfff
c001d24b:	83 d2 00             	adc    edx,0x0
c001d24e:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d252:	50                   	push   eax
c001d253:	ff 35 f0 de 02 c0    	push   DWORD PTR ds:0xc002def0
c001d259:	e8 16 49 ff ff       	call   c0011b74 <VAS::allocatePages(int, int)>
c001d25e:	59                   	pop    ecx
c001d25f:	89 c3                	mov    ebx,eax
c001d261:	5d                   	pop    ebp
c001d262:	50                   	push   eax
c001d263:	68 71 a2 02 c0       	push   0xc002a271
c001d268:	e8 30 55 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001d26d:	89 34 24             	mov    DWORD PTR [esp],esi
c001d270:	e8 f7 34 fe ff       	call   c000076c <strlen>
c001d275:	8b 2d c0 ea 02 c0    	mov    ebp,DWORD PTR ds:0xc002eac0
c001d27b:	40                   	inc    eax
c001d27c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d27f:	e8 15 23 ff ff       	call   c000f599 <malloc>
c001d284:	89 04 ad e0 ee 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd1120],eax
c001d28b:	58                   	pop    eax
c001d28c:	a1 c0 ea 02 c0       	mov    eax,ds:0xc002eac0
c001d291:	5a                   	pop    edx
c001d292:	56                   	push   esi
c001d293:	ff 34 85 e0 ee 02 c0 	push   DWORD PTR [eax*4-0x3ffd1120]
c001d29a:	e8 6d 35 fe ff       	call   c000080c <strcpy>
c001d29f:	a1 c0 ea 02 c0       	mov    eax,ds:0xc002eac0
c001d2a4:	8d 50 01             	lea    edx,[eax+0x1]
c001d2a7:	89 1c 85 e0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1320],ebx
c001d2ae:	89 15 c0 ea 02 c0    	mov    DWORD PTR ds:0xc002eac0,edx
c001d2b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2b8:	83 c4 0c             	add    esp,0xc
c001d2bb:	89 14 85 e0 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1520],edx
c001d2c2:	6a 01                	push   0x1
c001d2c4:	53                   	push   ebx
c001d2c5:	56                   	push   esi
c001d2c6:	e8 c2 f6 ff ff       	call   c001c98d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d2cb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d2cf:	83 c4 10             	add    esp,0x10
c001d2d2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d2d7:	0f 85 89 00 00 00    	jne    c001d366 <Thr::loadDLL(char const*, bool)+0x220>
c001d2dd:	89 f8                	mov    eax,edi
c001d2df:	84 c0                	test   al,al
c001d2e1:	74 73                	je     c001d356 <Thr::loadDLL(char const*, bool)+0x210>
c001d2e3:	83 ec 0c             	sub    esp,0xc
c001d2e6:	68 9c be 02 c0       	push   0xc002be9c
c001d2eb:	e8 89 cc ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001d2f0:	83 c4 10             	add    esp,0x10
c001d2f3:	eb 61                	jmp    c001d356 <Thr::loadDLL(char const*, bool)+0x210>
c001d2f5:	50                   	push   eax
c001d2f6:	50                   	push   eax
c001d2f7:	89 e8                	mov    eax,ebp
c001d2f9:	c1 e0 0c             	shl    eax,0xc
c001d2fc:	01 d8                	add    eax,ebx
c001d2fe:	50                   	push   eax
c001d2ff:	ff 35 f0 de 02 c0    	push   DWORD PTR ds:0xc002def0
c001d305:	e8 d2 43 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001d30a:	83 c4 10             	add    esp,0x10
c001d30d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d30f:	a8 60                	test   al,0x60
c001d311:	75 11                	jne    c001d324 <Thr::loadDLL(char const*, bool)+0x1de>
c001d313:	83 ec 0c             	sub    esp,0xc
c001d316:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d31b:	50                   	push   eax
c001d31c:	e8 03 26 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d321:	83 c4 10             	add    esp,0x10
c001d324:	45                   	inc    ebp
c001d325:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d329:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d32d:	05 ff 0f 00 00       	add    eax,0xfff
c001d332:	bf 00 00 00 00       	mov    edi,0x0
c001d337:	83 d2 00             	adc    edx,0x0
c001d33a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d33e:	c1 ea 0c             	shr    edx,0xc
c001d341:	39 c5                	cmp    ebp,eax
c001d343:	89 d1                	mov    ecx,edx
c001d345:	89 f8                	mov    eax,edi
c001d347:	19 c8                	sbb    eax,ecx
c001d349:	72 aa                	jb     c001d2f5 <Thr::loadDLL(char const*, bool)+0x1af>
c001d34b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d350:	75 18                	jne    c001d36a <Thr::loadDLL(char const*, bool)+0x224>
c001d352:	31 db                	xor    ebx,ebx
c001d354:	eb 14                	jmp    c001d36a <Thr::loadDLL(char const*, bool)+0x224>
c001d356:	83 ec 0c             	sub    esp,0xc
c001d359:	68 bb be 02 c0       	push   0xc002bebb
c001d35e:	e8 16 cc ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001d363:	83 c4 10             	add    esp,0x10
c001d366:	31 ed                	xor    ebp,ebp
c001d368:	eb bb                	jmp    c001d325 <Thr::loadDLL(char const*, bool)+0x1df>
c001d36a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d370:	89 d8                	mov    eax,ebx
c001d372:	5b                   	pop    ebx
c001d373:	5e                   	pop    esi
c001d374:	5f                   	pop    edi
c001d375:	5d                   	pop    ebp
c001d376:	c3                   	ret    

c001d377 <Thr::executeDLL(unsigned long, void*)>:
c001d377:	56                   	push   esi
c001d378:	53                   	push   ebx
c001d379:	52                   	push   edx
c001d37a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d37e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d382:	85 db                	test   ebx,ebx
c001d384:	75 10                	jne    c001d396 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d386:	83 ec 0c             	sub    esp,0xc
c001d389:	68 d7 be 02 c0       	push   0xc002bed7
c001d38e:	e8 e6 cb ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001d393:	83 c4 10             	add    esp,0x10
c001d396:	50                   	push   eax
c001d397:	50                   	push   eax
c001d398:	53                   	push   ebx
c001d399:	68 01 bf 02 c0       	push   0xc002bf01
c001d39e:	e8 fa 53 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001d3a3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d3a7:	89 d8                	mov    eax,ebx
c001d3a9:	83 c4 14             	add    esp,0x14
c001d3ac:	5b                   	pop    ebx
c001d3ad:	5e                   	pop    esi
c001d3ae:	ff e0                	jmp    eax

c001d3b0 <userModeEntryPoint(void*)>:
c001d3b0:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001d3b5:	48                   	dec    eax
c001d3b6:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001d3bb:	75 01                	jne    c001d3be <userModeEntryPoint(void*)+0xe>
c001d3bd:	fb                   	sti    
c001d3be:	fb                   	sti    
c001d3bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d3c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d3c7:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d3cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d3d1:	e9 54 2f fe ff       	jmp    c000032a <goToUsermode>

c001d3d6 <changeTSS>:
c001d3d6:	83 ec 14             	sub    esp,0x14
c001d3d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d3de:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d3e1:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d3e6:	c1 e2 15             	shl    edx,0x15
c001d3e9:	29 d0                	sub    eax,edx
c001d3eb:	50                   	push   eax
c001d3ec:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001d3f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d3f7:	05 7c 11 00 00       	add    eax,0x117c
c001d3fc:	50                   	push   eax
c001d3fd:	e8 72 37 ff ff       	call   c0010b74 <TSS::setESP(unsigned long)>
c001d402:	83 c4 1c             	add    esp,0x1c
c001d405:	c3                   	ret    

c001d406 <switchToThread(ThreadControlBlock*)>:
c001d406:	57                   	push   edi
c001d407:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001d40c:	56                   	push   esi
c001d40d:	85 c0                	test   eax,eax
c001d40f:	53                   	push   ebx
c001d410:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d414:	0f 85 88 00 00 00    	jne    c001d4a2 <switchToThread(ThreadControlBlock*)+0x9c>
c001d41a:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d41d:	3c ff                	cmp    al,0xff
c001d41f:	74 7d                	je     c001d49e <switchToThread(ThreadControlBlock*)+0x98>
c001d421:	0f b6 d0             	movzx  edx,al
c001d424:	b8 84 03 00 00       	mov    eax,0x384
c001d429:	29 d0                	sub    eax,edx
c001d42b:	c1 e0 10             	shl    eax,0x10
c001d42e:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d431:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d434:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c001d439:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d43f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d446:	74 4a                	je     c001d492 <switchToThread(ThreadControlBlock*)+0x8c>
c001d448:	0f 31                	rdtsc  
c001d44a:	a3 c8 f2 02 c0       	mov    ds:0xc002f2c8,eax
c001d44f:	89 c6                	mov    esi,eax
c001d451:	89 d7                	mov    edi,edx
c001d453:	2b 35 b8 f2 02 c0    	sub    esi,DWORD PTR ds:0xc002f2b8
c001d459:	89 15 cc f2 02 c0    	mov    DWORD PTR ds:0xc002f2cc,edx
c001d45f:	1b 3d bc f2 02 c0    	sbb    edi,DWORD PTR ds:0xc002f2bc
c001d465:	89 35 c0 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c0,esi
c001d46b:	a3 b8 f2 02 c0       	mov    ds:0xc002f2b8,eax
c001d470:	89 3d c4 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c4,edi
c001d476:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d47c:	89 15 bc f2 02 c0    	mov    DWORD PTR ds:0xc002f2bc,edx
c001d482:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d485:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d488:	01 c6                	add    esi,eax
c001d48a:	11 d7                	adc    edi,edx
c001d48c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d48f:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d492:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d496:	5b                   	pop    ebx
c001d497:	5e                   	pop    esi
c001d498:	5f                   	pop    edi
c001d499:	e9 c4 2e fe ff       	jmp    c0000362 <switchToThreadASM>
c001d49e:	31 c0                	xor    eax,eax
c001d4a0:	eb 8f                	jmp    c001d431 <switchToThread(ThreadControlBlock*)+0x2b>
c001d4a2:	5b                   	pop    ebx
c001d4a3:	c7 05 80 f2 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x1
c001d4ad:	5e                   	pop    esi
c001d4ae:	5f                   	pop    edi
c001d4af:	c3                   	ret    

c001d4b0 <Process::addArgs(char**)>:
c001d4b0:	57                   	push   edi
c001d4b1:	56                   	push   esi
c001d4b2:	53                   	push   ebx
c001d4b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d4bb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d4c5:	85 ff                	test   edi,edi
c001d4c7:	74 3d                	je     c001d506 <Process::addArgs(char**)+0x56>
c001d4c9:	8b 07                	mov    eax,DWORD PTR [edi]
c001d4cb:	85 c0                	test   eax,eax
c001d4cd:	74 37                	je     c001d506 <Process::addArgs(char**)+0x56>
c001d4cf:	31 db                	xor    ebx,ebx
c001d4d1:	83 ec 0c             	sub    esp,0xc
c001d4d4:	50                   	push   eax
c001d4d5:	e8 92 32 fe ff       	call   c000076c <strlen>
c001d4da:	40                   	inc    eax
c001d4db:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4de:	e8 b6 20 ff ff       	call   c000f599 <malloc>
c001d4e3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d4ea:	5a                   	pop    edx
c001d4eb:	59                   	pop    ecx
c001d4ec:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d4ef:	43                   	inc    ebx
c001d4f0:	50                   	push   eax
c001d4f1:	e8 16 33 fe ff       	call   c000080c <strcpy>
c001d4f6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d4fc:	83 c4 10             	add    esp,0x10
c001d4ff:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d502:	85 c0                	test   eax,eax
c001d504:	75 cb                	jne    c001d4d1 <Process::addArgs(char**)+0x21>
c001d506:	5b                   	pop    ebx
c001d507:	5e                   	pop    esi
c001d508:	5f                   	pop    edi
c001d509:	c3                   	ret    

c001d50a <Process::Process(char const*, Process*, char**)>:
c001d50a:	56                   	push   esi
c001d50b:	53                   	push   ebx
c001d50c:	83 ec 14             	sub    esp,0x14
c001d50f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d513:	05 0c 02 00 00       	add    eax,0x20c
c001d518:	bb 07 00 00 00       	mov    ebx,0x7
c001d51d:	89 c6                	mov    esi,eax
c001d51f:	85 db                	test   ebx,ebx
c001d521:	78 12                	js     c001d535 <Process::Process(char const*, Process*, char**)+0x2b>
c001d523:	83 ec 0c             	sub    esp,0xc
c001d526:	56                   	push   esi
c001d527:	e8 2a b7 00 00       	call   c0028c56 <ThreadControlBlock::ThreadControlBlock()>
c001d52c:	83 c4 10             	add    esp,0x10
c001d52f:	83 c6 63             	add    esi,0x63
c001d532:	4b                   	dec    ebx
c001d533:	eb ea                	jmp    c001d51f <Process::Process(char const*, Process*, char**)+0x15>
c001d535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d539:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d540:	83 ec 0c             	sub    esp,0xc
c001d543:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d547:	e8 b6 c8 ff ff       	call   c0019e02 <Krnl::newProcessEnv(Process*)>
c001d54c:	83 c4 10             	add    esp,0x10
c001d54f:	89 c2                	mov    edx,eax
c001d551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d555:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d55b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d55f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d568:	a1 10 d3 02 c0       	mov    eax,ds:0xc002d310
c001d56d:	8d 50 01             	lea    edx,[eax+0x1]
c001d570:	89 15 10 d3 02 c0    	mov    DWORD PTR ds:0xc002d310,edx
c001d576:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d57a:	89 02                	mov    DWORD PTR [edx],eax
c001d57c:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d584:	83 ec 0c             	sub    esp,0xc
c001d587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d58b:	e8 09 20 ff ff       	call   c000f599 <malloc>
c001d590:	83 c4 10             	add    esp,0x10
c001d593:	89 c3                	mov    ebx,eax
c001d595:	83 ec 08             	sub    esp,0x8
c001d598:	6a 00                	push   0x0
c001d59a:	53                   	push   ebx
c001d59b:	e8 7c 49 ff ff       	call   c0011f1c <VAS::VAS(bool)>
c001d5a0:	83 c4 10             	add    esp,0x10
c001d5a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5a7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d5ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d5bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d5c3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d5c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5cd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5d3:	85 c0                	test   eax,eax
c001d5d5:	74 42                	je     c001d619 <Process::Process(char const*, Process*, char**)+0x10f>
c001d5d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5db:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5e1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d5e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5eb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d5f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5f5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5fb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d605:	05 0c 01 00 00       	add    eax,0x10c
c001d60a:	83 ec 08             	sub    esp,0x8
c001d60d:	52                   	push   edx
c001d60e:	50                   	push   eax
c001d60f:	e8 f8 31 fe ff       	call   c000080c <strcpy>
c001d614:	83 c4 10             	add    esp,0x10
c001d617:	eb 63                	jmp    c001d67c <Process::Process(char const*, Process*, char**)+0x172>
c001d619:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d621:	83 ec 0c             	sub    esp,0xc
c001d624:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d628:	e8 6c 1f ff ff       	call   c000f599 <malloc>
c001d62d:	83 c4 10             	add    esp,0x10
c001d630:	89 c3                	mov    ebx,eax
c001d632:	83 ec 08             	sub    esp,0x8
c001d635:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d639:	53                   	push   ebx
c001d63a:	e8 47 32 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d63f:	83 c4 10             	add    esp,0x10
c001d642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d646:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d64c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d650:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d656:	83 ec 0c             	sub    esp,0xc
c001d659:	50                   	push   eax
c001d65a:	e8 e6 29 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d65f:	83 c4 10             	add    esp,0x10
c001d662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d666:	05 0c 01 00 00       	add    eax,0x10c
c001d66b:	83 ec 08             	sub    esp,0x8
c001d66e:	68 20 bf 02 c0       	push   0xc002bf20
c001d673:	50                   	push   eax
c001d674:	e8 93 31 fe ff       	call   c000080c <strcpy>
c001d679:	83 c4 10             	add    esp,0x10
c001d67c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d680:	83 c0 0c             	add    eax,0xc
c001d683:	83 ec 08             	sub    esp,0x8
c001d686:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d68a:	50                   	push   eax
c001d68b:	e8 7c 31 fe ff       	call   c000080c <strcpy>
c001d690:	83 c4 10             	add    esp,0x10
c001d693:	83 ec 08             	sub    esp,0x8
c001d696:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d69a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d69e:	e8 0d fe ff ff       	call   c001d4b0 <Process::addArgs(char**)>
c001d6a3:	83 c4 10             	add    esp,0x10
c001d6a6:	83 ec 08             	sub    esp,0x8
c001d6a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6b1:	e8 a1 ed ff ff       	call   c001c457 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d6b6:	83 c4 10             	add    esp,0x10
c001d6b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d6bd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d6c1:	83 f0 01             	xor    eax,0x1
c001d6c4:	88 c2                	mov    dl,al
c001d6c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6ca:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d6d0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d6d5:	83 ec 08             	sub    esp,0x8
c001d6d8:	50                   	push   eax
c001d6d9:	68 78 bf 02 c0       	push   0xc002bf78
c001d6de:	e8 ba 50 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001d6e3:	83 c4 10             	add    esp,0x10
c001d6e6:	90                   	nop
c001d6e7:	83 c4 14             	add    esp,0x14
c001d6ea:	5b                   	pop    ebx
c001d6eb:	5e                   	pop    esi
c001d6ec:	c3                   	ret    
c001d6ed:	90                   	nop

c001d6ee <Process::Process(bool, char const*, Process*, char**)>:
c001d6ee:	56                   	push   esi
c001d6ef:	53                   	push   ebx
c001d6f0:	83 ec 24             	sub    esp,0x24
c001d6f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d6f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d6fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6ff:	05 0c 02 00 00       	add    eax,0x20c
c001d704:	bb 07 00 00 00       	mov    ebx,0x7
c001d709:	89 c6                	mov    esi,eax
c001d70b:	85 db                	test   ebx,ebx
c001d70d:	78 12                	js     c001d721 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d70f:	83 ec 0c             	sub    esp,0xc
c001d712:	56                   	push   esi
c001d713:	e8 3e b5 00 00       	call   c0028c56 <ThreadControlBlock::ThreadControlBlock()>
c001d718:	83 c4 10             	add    esp,0x10
c001d71b:	83 c6 63             	add    esi,0x63
c001d71e:	4b                   	dec    ebx
c001d71f:	eb ea                	jmp    c001d70b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d721:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d725:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d72c:	83 ec 0c             	sub    esp,0xc
c001d72f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d733:	e8 ca c6 ff ff       	call   c0019e02 <Krnl::newProcessEnv(Process*)>
c001d738:	83 c4 10             	add    esp,0x10
c001d73b:	89 c2                	mov    edx,eax
c001d73d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d741:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d747:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d74b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d754:	a1 10 d3 02 c0       	mov    eax,ds:0xc002d310
c001d759:	8d 50 01             	lea    edx,[eax+0x1]
c001d75c:	89 15 10 d3 02 c0    	mov    DWORD PTR ds:0xc002d310,edx
c001d762:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d766:	89 02                	mov    DWORD PTR [edx],eax
c001d768:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d770:	83 ec 0c             	sub    esp,0xc
c001d773:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d777:	e8 1d 1e ff ff       	call   c000f599 <malloc>
c001d77c:	83 c4 10             	add    esp,0x10
c001d77f:	89 c3                	mov    ebx,eax
c001d781:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d786:	83 ec 08             	sub    esp,0x8
c001d789:	50                   	push   eax
c001d78a:	53                   	push   ebx
c001d78b:	e8 8c 47 ff ff       	call   c0011f1c <VAS::VAS(bool)>
c001d790:	83 c4 10             	add    esp,0x10
c001d793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d797:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d79d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7a1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d7ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d7b3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d7b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7bd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d7c3:	85 c0                	test   eax,eax
c001d7c5:	74 42                	je     c001d809 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d7c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7cb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d7d1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d7d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7db:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d7e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7e5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d7eb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d7f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7f5:	05 0c 01 00 00       	add    eax,0x10c
c001d7fa:	83 ec 08             	sub    esp,0x8
c001d7fd:	52                   	push   edx
c001d7fe:	50                   	push   eax
c001d7ff:	e8 08 30 fe ff       	call   c000080c <strcpy>
c001d804:	83 c4 10             	add    esp,0x10
c001d807:	eb 63                	jmp    c001d86c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d809:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d811:	83 ec 0c             	sub    esp,0xc
c001d814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d818:	e8 7c 1d ff ff       	call   c000f599 <malloc>
c001d81d:	83 c4 10             	add    esp,0x10
c001d820:	89 c3                	mov    ebx,eax
c001d822:	83 ec 08             	sub    esp,0x8
c001d825:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d829:	53                   	push   ebx
c001d82a:	e8 57 30 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d82f:	83 c4 10             	add    esp,0x10
c001d832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d836:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d840:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d846:	83 ec 0c             	sub    esp,0xc
c001d849:	50                   	push   eax
c001d84a:	e8 f6 27 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d84f:	83 c4 10             	add    esp,0x10
c001d852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d856:	05 0c 01 00 00       	add    eax,0x10c
c001d85b:	83 ec 08             	sub    esp,0x8
c001d85e:	68 20 bf 02 c0       	push   0xc002bf20
c001d863:	50                   	push   eax
c001d864:	e8 a3 2f fe ff       	call   c000080c <strcpy>
c001d869:	83 c4 10             	add    esp,0x10
c001d86c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d870:	83 c0 0c             	add    eax,0xc
c001d873:	83 ec 08             	sub    esp,0x8
c001d876:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d87a:	50                   	push   eax
c001d87b:	e8 8c 2f fe ff       	call   c000080c <strcpy>
c001d880:	83 c4 10             	add    esp,0x10
c001d883:	83 ec 08             	sub    esp,0x8
c001d886:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d88e:	e8 1d fc ff ff       	call   c001d4b0 <Process::addArgs(char**)>
c001d893:	83 c4 10             	add    esp,0x10
c001d896:	90                   	nop
c001d897:	83 c4 24             	add    esp,0x24
c001d89a:	5b                   	pop    ebx
c001d89b:	5e                   	pop    esi
c001d89c:	c3                   	ret    

c001d89d <taskStartupFunction>:
c001d89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8a2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d8a5:	c3                   	ret    

c001d8a6 <Semaphore::Semaphore(int)>:
c001d8a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d8ae:	89 10                	mov    DWORD PTR [eax],edx
c001d8b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8b4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d8bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d8c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8ca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d8d1:	90                   	nop
c001d8d2:	c3                   	ret    
c001d8d3:	90                   	nop

c001d8d4 <Mutex::Mutex()>:
c001d8d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8d8:	6a 01                	push   0x1
c001d8da:	50                   	push   eax
c001d8db:	e8 c6 ff ff ff       	call   c001d8a6 <Semaphore::Semaphore(int)>
c001d8e0:	83 c4 08             	add    esp,0x8
c001d8e3:	90                   	nop
c001d8e4:	c3                   	ret    
c001d8e5:	90                   	nop

c001d8e6 <Process::createThread(void (*)(void*), void*, int)>:
c001d8e6:	55                   	push   ebp
c001d8e7:	31 c9                	xor    ecx,ecx
c001d8e9:	57                   	push   edi
c001d8ea:	56                   	push   esi
c001d8eb:	53                   	push   ebx
c001d8ec:	83 ec 1c             	sub    esp,0x1c
c001d8ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d8f3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d8fa:	89 f2                	mov    edx,esi
c001d8fc:	0f b7 c2             	movzx  eax,dx
c001d8ff:	83 e2 01             	and    edx,0x1
c001d902:	74 16                	je     c001d91a <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d904:	d1 f8                	sar    eax,1
c001d906:	41                   	inc    ecx
c001d907:	89 c2                	mov    edx,eax
c001d909:	83 f9 10             	cmp    ecx,0x10
c001d90c:	75 ee                	jne    c001d8fc <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d90e:	83 c4 1c             	add    esp,0x1c
c001d911:	31 db                	xor    ebx,ebx
c001d913:	89 d8                	mov    eax,ebx
c001d915:	5b                   	pop    ebx
c001d916:	5e                   	pop    esi
c001d917:	5f                   	pop    edi
c001d918:	5d                   	pop    ebp
c001d919:	c3                   	ret    
c001d91a:	b8 01 00 00 00       	mov    eax,0x1
c001d91f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d922:	d3 e0                	shl    eax,cl
c001d924:	09 c6                	or     esi,eax
c001d926:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d929:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d930:	89 c6                	mov    esi,eax
c001d932:	c1 e6 05             	shl    esi,0x5
c001d935:	01 f0                	add    eax,esi
c001d937:	01 d8                	add    eax,ebx
c001d939:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d940:	75 0a                	jne    c001d94c <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d942:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d94c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d952:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d956:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d959:	01 ca                	add    edx,ecx
c001d95b:	83 ec 08             	sub    esp,0x8
c001d95e:	89 d0                	mov    eax,edx
c001d960:	c1 e0 05             	shl    eax,0x5
c001d963:	01 d0                	add    eax,edx
c001d965:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d969:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d96d:	01 d8                	add    eax,ebx
c001d96f:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d975:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d97b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d981:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d987:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d98d:	89 cd                	mov    ebp,ecx
c001d98f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d993:	f7 dd                	neg    ebp
c001d995:	c1 e5 15             	shl    ebp,0x15
c001d998:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d99e:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d9a4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d9ae:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d9b4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d9be:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d9c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9cc:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d9d3:	53                   	push   ebx
c001d9d4:	68 a4 f2 02 c0       	push   0xc002f2a4
c001d9d9:	e8 32 b0 00 00       	call   c0028a10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d9de:	89 d8                	mov    eax,ebx
c001d9e0:	83 c4 10             	add    esp,0x10
c001d9e3:	83 c4 1c             	add    esp,0x1c
c001d9e6:	5b                   	pop    ebx
c001d9e7:	5e                   	pop    esi
c001d9e8:	5f                   	pop    edi
c001d9e9:	5d                   	pop    ebp
c001d9ea:	c3                   	ret    
c001d9eb:	90                   	nop

c001d9ec <Process::createUserThread()>:
c001d9ec:	83 ec 0c             	sub    esp,0xc
c001d9ef:	68 80 00 00 00       	push   0x80
c001d9f4:	6a 00                	push   0x0
c001d9f6:	68 b0 d3 01 c0       	push   0xc001d3b0
c001d9fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9ff:	e8 e2 fe ff ff       	call   c001d8e6 <Process::createThread(void (*)(void*), void*, int)>
c001da04:	83 c4 1c             	add    esp,0x1c
c001da07:	c3                   	ret    

c001da08 <setupMultitasking(void (*)())>:
c001da08:	56                   	push   esi
c001da09:	53                   	push   ebx
c001da0a:	51                   	push   ecx
c001da0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da0f:	eb 10                	jmp    c001da21 <setupMultitasking(void (*)())+0x19>
c001da11:	83 ec 0c             	sub    esp,0xc
c001da14:	68 a4 f2 02 c0       	push   0xc002f2a4
c001da19:	e8 44 af 00 00       	call   c0028962 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da1e:	83 c4 10             	add    esp,0x10
c001da21:	83 ec 0c             	sub    esp,0xc
c001da24:	68 a4 f2 02 c0       	push   0xc002f2a4
c001da29:	e8 10 af 00 00       	call   c002893e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da2e:	83 c4 10             	add    esp,0x10
c001da31:	84 c0                	test   al,al
c001da33:	74 dc                	je     c001da11 <setupMultitasking(void (*)())+0x9>
c001da35:	83 ec 0c             	sub    esp,0xc
c001da38:	68 3f 07 00 00       	push   0x73f
c001da3d:	e8 57 1b ff ff       	call   c000f599 <malloc>
c001da42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001da49:	89 c3                	mov    ebx,eax
c001da4b:	6a 00                	push   0x0
c001da4d:	68 24 bf 02 c0       	push   0xc002bf24
c001da52:	6a 01                	push   0x1
c001da54:	50                   	push   eax
c001da55:	e8 94 fc ff ff       	call   c001d6ee <Process::Process(bool, char const*, Process*, char**)>
c001da5a:	83 c4 14             	add    esp,0x14
c001da5d:	89 1d b0 f2 02 c0    	mov    DWORD PTR ds:0xc002f2b0,ebx
c001da63:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001da69:	e8 e5 28 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001da6e:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001da76:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001da80:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001da86:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001da89:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001da93:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001da99:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001da9f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001daa9:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dab3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dabd:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dac3:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dacd:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dad3:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dadd:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dae3:	58                   	pop    eax
c001dae4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001daea:	5a                   	pop    edx
c001daeb:	68 20 bf 02 c0       	push   0xc002bf20
c001daf0:	50                   	push   eax
c001daf1:	e8 16 2d fe ff       	call   c000080c <strcpy>
c001daf6:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dafd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001db01:	83 c4 14             	add    esp,0x14
c001db04:	5b                   	pop    ebx
c001db05:	5e                   	pop    esi
c001db06:	e9 49 28 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001db0b <schedule()>:
c001db0b:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001db10:	85 c0                	test   eax,eax
c001db12:	74 0b                	je     c001db1f <schedule()+0x14>
c001db14:	c7 05 80 f2 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x1
c001db1e:	c3                   	ret    
c001db1f:	53                   	push   ebx
c001db20:	83 ec 14             	sub    esp,0x14
c001db23:	68 a4 f2 02 c0       	push   0xc002f2a4
c001db28:	e8 11 ae 00 00       	call   c002893e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001db2d:	83 c4 10             	add    esp,0x10
c001db30:	84 c0                	test   al,al
c001db32:	75 38                	jne    c001db6c <schedule()+0x61>
c001db34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db39:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db3c:	4a                   	dec    edx
c001db3d:	74 32                	je     c001db71 <schedule()+0x66>
c001db3f:	83 ec 0c             	sub    esp,0xc
c001db42:	68 a4 f2 02 c0       	push   0xc002f2a4
c001db47:	e8 0e ae 00 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001db4c:	c7 04 24 a4 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2a4
c001db53:	89 c3                	mov    ebx,eax
c001db55:	e8 08 ae 00 00       	call   c0028962 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001db5a:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001db61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db64:	e8 9d f8 ff ff       	call   c001d406 <switchToThread(ThreadControlBlock*)>
c001db69:	83 c4 10             	add    esp,0x10
c001db6c:	83 c4 08             	add    esp,0x8
c001db6f:	5b                   	pop    ebx
c001db70:	c3                   	ret    
c001db71:	83 ec 08             	sub    esp,0x8
c001db74:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001db7b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001db81:	68 a4 f2 02 c0       	push   0xc002f2a4
c001db86:	e8 85 ae 00 00       	call   c0028a10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db8b:	83 c4 10             	add    esp,0x10
c001db8e:	eb af                	jmp    c001db3f <schedule()+0x34>

c001db90 <Semaphore::tryAcquire()>:
c001db90:	53                   	push   ebx
c001db91:	83 ec 08             	sub    esp,0x8
c001db94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db98:	fa                   	cli    
c001db99:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001db9e:	8d 50 01             	lea    edx,[eax+0x1]
c001dba1:	89 15 88 f2 02 c0    	mov    DWORD PTR ds:0xc002f288,edx
c001dba7:	8b 15 84 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f284
c001dbad:	8d 5a 01             	lea    ebx,[edx+0x1]
c001dbb0:	89 1d 84 f2 02 c0    	mov    DWORD PTR ds:0xc002f284,ebx
c001dbb6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001dbb9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001dbbb:	7c 2a                	jl     c001dbe7 <Semaphore::tryAcquire()+0x57>
c001dbbd:	89 15 84 f2 02 c0    	mov    DWORD PTR ds:0xc002f284,edx
c001dbc3:	85 d2                	test   edx,edx
c001dbc5:	75 0a                	jne    c001dbd1 <Semaphore::tryAcquire()+0x41>
c001dbc7:	8b 15 80 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f280
c001dbcd:	85 d2                	test   edx,edx
c001dbcf:	75 5b                	jne    c001dc2c <Semaphore::tryAcquire()+0x9c>
c001dbd1:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001dbd6:	85 c0                	test   eax,eax
c001dbd8:	74 07                	je     c001dbe1 <Semaphore::tryAcquire()+0x51>
c001dbda:	31 c0                	xor    eax,eax
c001dbdc:	83 c4 08             	add    esp,0x8
c001dbdf:	5b                   	pop    ebx
c001dbe0:	c3                   	ret    
c001dbe1:	fb                   	sti    
c001dbe2:	83 c4 08             	add    esp,0x8
c001dbe5:	5b                   	pop    ebx
c001dbe6:	c3                   	ret    
c001dbe7:	43                   	inc    ebx
c001dbe8:	89 15 84 f2 02 c0    	mov    DWORD PTR ds:0xc002f284,edx
c001dbee:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001dbf1:	85 d2                	test   edx,edx
c001dbf3:	75 1f                	jne    c001dc14 <Semaphore::tryAcquire()+0x84>
c001dbf5:	8b 0d 80 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f280
c001dbfb:	85 c9                	test   ecx,ecx
c001dbfd:	74 15                	je     c001dc14 <Semaphore::tryAcquire()+0x84>
c001dbff:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c001dc09:	e8 fd fe ff ff       	call   c001db0b <schedule()>
c001dc0e:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001dc13:	48                   	dec    eax
c001dc14:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001dc19:	85 c0                	test   eax,eax
c001dc1b:	75 08                	jne    c001dc25 <Semaphore::tryAcquire()+0x95>
c001dc1d:	fb                   	sti    
c001dc1e:	b0 01                	mov    al,0x1
c001dc20:	83 c4 08             	add    esp,0x8
c001dc23:	5b                   	pop    ebx
c001dc24:	c3                   	ret    
c001dc25:	b0 01                	mov    al,0x1
c001dc27:	83 c4 08             	add    esp,0x8
c001dc2a:	5b                   	pop    ebx
c001dc2b:	c3                   	ret    
c001dc2c:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c001dc36:	e8 d0 fe ff ff       	call   c001db0b <schedule()>
c001dc3b:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001dc40:	48                   	dec    eax
c001dc41:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001dc46:	85 c0                	test   eax,eax
c001dc48:	75 90                	jne    c001dbda <Semaphore::tryAcquire()+0x4a>
c001dc4a:	eb 95                	jmp    c001dbe1 <Semaphore::tryAcquire()+0x51>

c001dc4c <Semaphore::assertLocked(char const*)>:
c001dc4c:	83 ec 0c             	sub    esp,0xc
c001dc4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc53:	fa                   	cli    
c001dc54:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001dc5a:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001dc5f:	8d 48 01             	lea    ecx,[eax+0x1]
c001dc62:	89 0d 84 f2 02 c0    	mov    DWORD PTR ds:0xc002f284,ecx
c001dc68:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001dc6a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001dc6d:	7c 24                	jl     c001dc93 <Semaphore::assertLocked(char const*)+0x47>
c001dc6f:	a3 84 f2 02 c0       	mov    ds:0xc002f284,eax
c001dc74:	85 c0                	test   eax,eax
c001dc76:	75 09                	jne    c001dc81 <Semaphore::assertLocked(char const*)+0x35>
c001dc78:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c001dc7d:	85 c0                	test   eax,eax
c001dc7f:	75 29                	jne    c001dcaa <Semaphore::assertLocked(char const*)+0x5e>
c001dc81:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001dc86:	48                   	dec    eax
c001dc87:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001dc8c:	75 01                	jne    c001dc8f <Semaphore::assertLocked(char const*)+0x43>
c001dc8e:	fb                   	sti    
c001dc8f:	83 c4 0c             	add    esp,0xc
c001dc92:	c3                   	ret    
c001dc93:	83 ec 0c             	sub    esp,0xc
c001dc96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dc9a:	e8 da c2 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001dc9f:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001dca4:	83 c4 10             	add    esp,0x10
c001dca7:	48                   	dec    eax
c001dca8:	eb c5                	jmp    c001dc6f <Semaphore::assertLocked(char const*)+0x23>
c001dcaa:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c001dcb4:	e8 52 fe ff ff       	call   c001db0b <schedule()>
c001dcb9:	eb c6                	jmp    c001dc81 <Semaphore::assertLocked(char const*)+0x35>

c001dcbb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dcbb:	83 ec 0c             	sub    esp,0xc
c001dcbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcc3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcc7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dcca:	e8 3c fe ff ff       	call   c001db0b <schedule()>
c001dccf:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001dcd4:	48                   	dec    eax
c001dcd5:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001dcda:	75 01                	jne    c001dcdd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dcdc:	fb                   	sti    
c001dcdd:	83 c4 0c             	add    esp,0xc
c001dce0:	c3                   	ret    

c001dce1 <blockTask(TaskState)>:
c001dce1:	83 ec 0c             	sub    esp,0xc
c001dce4:	fa                   	cli    
c001dce5:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001dceb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcf4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dcf7:	e8 0f fe ff ff       	call   c001db0b <schedule()>
c001dcfc:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001dd01:	48                   	dec    eax
c001dd02:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001dd07:	75 01                	jne    c001dd0a <blockTask(TaskState)+0x29>
c001dd09:	fb                   	sti    
c001dd0a:	83 c4 0c             	add    esp,0xc
c001dd0d:	c3                   	ret    

c001dd0e <waitTask(int, int*, int)>:
c001dd0e:	83 ec 18             	sub    esp,0x18
c001dd11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd1a:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dd1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dd21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd26:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dd29:	6a 07                	push   0x7
c001dd2b:	e8 b1 ff ff ff       	call   c001dce1 <blockTask(TaskState)>
c001dd30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd35:	83 c4 10             	add    esp,0x10
c001dd38:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dd3b:	85 d2                	test   edx,edx
c001dd3d:	74 0a                	je     c001dd49 <waitTask(int, int*, int)+0x3b>
c001dd3f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dd42:	89 02                	mov    DWORD PTR [edx],eax
c001dd44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd49:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dd4c:	83 c4 0c             	add    esp,0xc
c001dd4f:	c3                   	ret    

c001dd50 <nanoSleepUntil(unsigned long long)>:
c001dd50:	83 ec 0c             	sub    esp,0xc
c001dd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd5b:	3b 05 f0 e3 02 c0    	cmp    eax,DWORD PTR ds:0xc002e3f0
c001dd61:	89 d1                	mov    ecx,edx
c001dd63:	1b 0d f4 e3 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e3f4
c001dd69:	73 04                	jae    c001dd6f <nanoSleepUntil(unsigned long long)+0x1f>
c001dd6b:	83 c4 0c             	add    esp,0xc
c001dd6e:	c3                   	ret    
c001dd6f:	fa                   	cli    
c001dd70:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001dd76:	83 ec 08             	sub    esp,0x8
c001dd79:	ff 05 84 f2 02 c0    	inc    DWORD PTR ds:0xc002f284
c001dd7f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd85:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dd88:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dd8b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dd91:	68 98 f2 02 c0       	push   0xc002f298
c001dd96:	e8 75 ac 00 00       	call   c0028a10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd9b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dda2:	e8 3a ff ff ff       	call   c001dce1 <blockTask(TaskState)>
c001dda7:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001ddac:	83 c4 10             	add    esp,0x10
c001ddaf:	48                   	dec    eax
c001ddb0:	a3 84 f2 02 c0       	mov    ds:0xc002f284,eax
c001ddb5:	85 c0                	test   eax,eax
c001ddb7:	75 09                	jne    c001ddc2 <nanoSleepUntil(unsigned long long)+0x72>
c001ddb9:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c001ddbe:	85 c0                	test   eax,eax
c001ddc0:	75 12                	jne    c001ddd4 <nanoSleepUntil(unsigned long long)+0x84>
c001ddc2:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001ddc7:	48                   	dec    eax
c001ddc8:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001ddcd:	75 9c                	jne    c001dd6b <nanoSleepUntil(unsigned long long)+0x1b>
c001ddcf:	fb                   	sti    
c001ddd0:	83 c4 0c             	add    esp,0xc
c001ddd3:	c3                   	ret    
c001ddd4:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c001ddde:	e8 28 fd ff ff       	call   c001db0b <schedule()>
c001dde3:	eb dd                	jmp    c001ddc2 <nanoSleepUntil(unsigned long long)+0x72>

c001dde5 <nanoSleep(unsigned long long)>:
c001dde5:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c001ddea:	8b 15 f4 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3f4
c001ddf0:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001ddf4:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001ddf8:	e9 53 ff ff ff       	jmp    c001dd50 <nanoSleepUntil(unsigned long long)>

c001ddfd <sleep(unsigned long long)>:
c001ddfd:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001de05:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001de0a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001de0e:	01 ca                	add    edx,ecx
c001de10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001de14:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001de18:	eb cb                	jmp    c001dde5 <nanoSleep(unsigned long long)>

c001de1a <Semaphore::acquire()>:
c001de1a:	83 ec 0c             	sub    esp,0xc
c001de1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de21:	fa                   	cli    
c001de22:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001de27:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001de2d:	8d 48 01             	lea    ecx,[eax+0x1]
c001de30:	89 0d 84 f2 02 c0    	mov    DWORD PTR ds:0xc002f284,ecx
c001de36:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001de39:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001de3b:	7d 28                	jge    c001de65 <Semaphore::acquire()+0x4b>
c001de3d:	41                   	inc    ecx
c001de3e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001de41:	a3 84 f2 02 c0       	mov    ds:0xc002f284,eax
c001de46:	85 c0                	test   eax,eax
c001de48:	75 09                	jne    c001de53 <Semaphore::acquire()+0x39>
c001de4a:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c001de4f:	85 c0                	test   eax,eax
c001de51:	75 5d                	jne    c001deb0 <Semaphore::acquire()+0x96>
c001de53:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001de58:	48                   	dec    eax
c001de59:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001de5e:	75 01                	jne    c001de61 <Semaphore::acquire()+0x47>
c001de60:	fb                   	sti    
c001de61:	83 c4 0c             	add    esp,0xc
c001de64:	c3                   	ret    
c001de65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de6a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001de71:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001de74:	85 c9                	test   ecx,ecx
c001de76:	74 49                	je     c001dec1 <Semaphore::acquire()+0xa7>
c001de78:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001de7b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001de81:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001de84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de89:	83 ec 0c             	sub    esp,0xc
c001de8c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001de8f:	68 a0 bf 02 c0       	push   0xc002bfa0
c001de94:	e8 04 49 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001de99:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001dea0:	e8 3c fe ff ff       	call   c001dce1 <blockTask(TaskState)>
c001dea5:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001deaa:	83 c4 10             	add    esp,0x10
c001dead:	48                   	dec    eax
c001deae:	eb 91                	jmp    c001de41 <Semaphore::acquire()+0x27>
c001deb0:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c001deba:	e8 4c fc ff ff       	call   c001db0b <schedule()>
c001debf:	eb 92                	jmp    c001de53 <Semaphore::acquire()+0x39>
c001dec1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dec6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dec9:	eb b9                	jmp    c001de84 <Semaphore::acquire()+0x6a>

c001decb <taskReturned>:
c001decb:	83 ec 18             	sub    esp,0x18
c001dece:	68 c0 bf 02 c0       	push   0xc002bfc0
c001ded3:	e8 a1 c0 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001ded8:	83 c4 10             	add    esp,0x10
c001dedb:	83 ec 0c             	sub    esp,0xc
c001dede:	6a 02                	push   0x2
c001dee0:	e8 fc fd ff ff       	call   c001dce1 <blockTask(TaskState)>
c001dee5:	fa                   	cli    
c001dee6:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001deec:	e8 1a fc ff ff       	call   c001db0b <schedule()>
c001def1:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001def6:	83 c4 10             	add    esp,0x10
c001def9:	48                   	dec    eax
c001defa:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001deff:	85 c0                	test   eax,eax
c001df01:	75 d8                	jne    c001dedb <taskReturned+0x10>
c001df03:	fb                   	sti    
c001df04:	eb d5                	jmp    c001dedb <taskReturned+0x10>

c001df06 <Thr::processFromPID(int)>:
c001df06:	57                   	push   edi
c001df07:	56                   	push   esi
c001df08:	53                   	push   ebx
c001df09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df0d:	fa                   	cli    
c001df0e:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001df14:	83 ec 0c             	sub    esp,0xc
c001df17:	68 a4 f2 02 c0       	push   0xc002f2a4
c001df1c:	e8 39 aa 00 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df21:	83 c4 10             	add    esp,0x10
c001df24:	89 c7                	mov    edi,eax
c001df26:	eb 14                	jmp    c001df3c <Thr::processFromPID(int)+0x36>
c001df28:	83 ec 0c             	sub    esp,0xc
c001df2b:	68 a4 f2 02 c0       	push   0xc002f2a4
c001df30:	e8 25 aa 00 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df35:	83 c4 10             	add    esp,0x10
c001df38:	39 f8                	cmp    eax,edi
c001df3a:	74 49                	je     c001df85 <Thr::processFromPID(int)+0x7f>
c001df3c:	83 ec 0c             	sub    esp,0xc
c001df3f:	68 a4 f2 02 c0       	push   0xc002f2a4
c001df44:	e8 11 aa 00 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df49:	c7 04 24 a4 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2a4
c001df50:	89 c3                	mov    ebx,eax
c001df52:	e8 0b aa 00 00       	call   c0028962 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df57:	58                   	pop    eax
c001df58:	5a                   	pop    edx
c001df59:	53                   	push   ebx
c001df5a:	68 a4 f2 02 c0       	push   0xc002f2a4
c001df5f:	e8 ac aa 00 00       	call   c0028a10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df64:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df67:	83 c4 10             	add    esp,0x10
c001df6a:	39 30                	cmp    DWORD PTR [eax],esi
c001df6c:	75 ba                	jne    c001df28 <Thr::processFromPID(int)+0x22>
c001df6e:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001df73:	48                   	dec    eax
c001df74:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001df79:	74 07                	je     c001df82 <Thr::processFromPID(int)+0x7c>
c001df7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df7e:	5b                   	pop    ebx
c001df7f:	5e                   	pop    esi
c001df80:	5f                   	pop    edi
c001df81:	c3                   	ret    
c001df82:	fb                   	sti    
c001df83:	eb f6                	jmp    c001df7b <Thr::processFromPID(int)+0x75>
c001df85:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001df8a:	48                   	dec    eax
c001df8b:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001df90:	75 05                	jne    c001df97 <Thr::processFromPID(int)+0x91>
c001df92:	fb                   	sti    
c001df93:	5b                   	pop    ebx
c001df94:	5e                   	pop    esi
c001df95:	5f                   	pop    edi
c001df96:	c3                   	ret    
c001df97:	5b                   	pop    ebx
c001df98:	31 c0                	xor    eax,eax
c001df9a:	5e                   	pop    esi
c001df9b:	5f                   	pop    edi
c001df9c:	c3                   	ret    

c001df9d <unblockTask(ThreadControlBlock*)>:
c001df9d:	53                   	push   ebx
c001df9e:	83 ec 08             	sub    esp,0x8
c001dfa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dfa5:	fa                   	cli    
c001dfa6:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001dfac:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dfaf:	85 c0                	test   eax,eax
c001dfb1:	74 5a                	je     c001e00d <unblockTask(ThreadControlBlock*)+0x70>
c001dfb3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dfb6:	48                   	dec    eax
c001dfb7:	74 31                	je     c001dfea <unblockTask(ThreadControlBlock*)+0x4d>
c001dfb9:	83 ec 0c             	sub    esp,0xc
c001dfbc:	68 a4 f2 02 c0       	push   0xc002f2a4
c001dfc1:	e8 94 a9 00 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfc6:	83 c4 10             	add    esp,0x10
c001dfc9:	85 c0                	test   eax,eax
c001dfcb:	75 17                	jne    c001dfe4 <unblockTask(ThreadControlBlock*)+0x47>
c001dfcd:	eb 50                	jmp    c001e01f <unblockTask(ThreadControlBlock*)+0x82>
c001dfcf:	83 ec 08             	sub    esp,0x8
c001dfd2:	50                   	push   eax
c001dfd3:	68 a4 f2 02 c0       	push   0xc002f2a4
c001dfd8:	e8 05 ad 00 00       	call   c0028ce2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dfdd:	83 c4 10             	add    esp,0x10
c001dfe0:	85 c0                	test   eax,eax
c001dfe2:	74 3b                	je     c001e01f <unblockTask(ThreadControlBlock*)+0x82>
c001dfe4:	39 c3                	cmp    ebx,eax
c001dfe6:	75 e7                	jne    c001dfcf <unblockTask(ThreadControlBlock*)+0x32>
c001dfe8:	eb 10                	jmp    c001dffa <unblockTask(ThreadControlBlock*)+0x5d>
c001dfea:	83 ec 0c             	sub    esp,0xc
c001dfed:	68 42 bf 02 c0       	push   0xc002bf42
c001dff2:	e8 a6 47 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001dff7:	83 c4 10             	add    esp,0x10
c001dffa:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001dfff:	48                   	dec    eax
c001e000:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e005:	75 01                	jne    c001e008 <unblockTask(ThreadControlBlock*)+0x6b>
c001e007:	fb                   	sti    
c001e008:	83 c4 08             	add    esp,0x8
c001e00b:	5b                   	pop    ebx
c001e00c:	c3                   	ret    
c001e00d:	83 ec 0c             	sub    esp,0xc
c001e010:	68 2b bf 02 c0       	push   0xc002bf2b
c001e015:	e8 83 47 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001e01a:	83 c4 10             	add    esp,0x10
c001e01d:	eb db                	jmp    c001dffa <unblockTask(ThreadControlBlock*)+0x5d>
c001e01f:	83 ec 08             	sub    esp,0x8
c001e022:	53                   	push   ebx
c001e023:	68 a4 f2 02 c0       	push   0xc002f2a4
c001e028:	e8 e3 a9 00 00       	call   c0028a10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e02d:	83 c4 10             	add    esp,0x10
c001e030:	eb c8                	jmp    c001dffa <unblockTask(ThreadControlBlock*)+0x5d>

c001e032 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e032:	55                   	push   ebp
c001e033:	57                   	push   edi
c001e034:	56                   	push   esi
c001e035:	53                   	push   ebx
c001e036:	83 ec 1c             	sub    esp,0x1c
c001e039:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e03d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e040:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e046:	85 ff                	test   edi,edi
c001e048:	7e 20                	jle    c001e06a <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e04a:	31 f6                	xor    esi,esi
c001e04c:	83 ec 0c             	sub    esp,0xc
c001e04f:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e056:	46                   	inc    esi
c001e057:	e8 4d 15 ff ff       	call   c000f5a9 <free>
c001e05c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e05f:	83 c4 10             	add    esp,0x10
c001e062:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e068:	7f e2                	jg     c001e04c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e06a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e074:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e079:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e07c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e07f:	d3 c0                	rol    eax,cl
c001e081:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e088:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e08b:	89 f7                	mov    edi,esi
c001e08d:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e095:	0f 85 64 01 00 00    	jne    c001e1ff <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e09b:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e0a1:	85 ed                	test   ebp,ebp
c001e0a3:	74 1b                	je     c001e0c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e0a5:	83 ec 0c             	sub    esp,0xc
c001e0a8:	55                   	push   ebp
c001e0a9:	e8 70 bc ff ff       	call   c0019d1e <EnvVarContainer::~EnvVarContainer()>
c001e0ae:	59                   	pop    ecx
c001e0af:	5e                   	pop    esi
c001e0b0:	6a 0c                	push   0xc
c001e0b2:	55                   	push   ebp
c001e0b3:	e8 0d 46 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001e0b8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0bb:	83 c4 10             	add    esp,0x10
c001e0be:	89 f7                	mov    edi,esi
c001e0c0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e0c6:	85 c0                	test   eax,eax
c001e0c8:	0f 84 aa 00 00 00    	je     c001e178 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e0ce:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e0d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e0d5:	31 c9                	xor    ecx,ecx
c001e0d7:	eb 10                	jmp    c001e0e9 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e0d9:	41                   	inc    ecx
c001e0da:	83 f9 10             	cmp    ecx,0x10
c001e0dd:	0f 84 95 00 00 00    	je     c001e178 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e0e3:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e0e9:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e0f0:	d3 fa                	sar    edx,cl
c001e0f2:	83 e2 01             	and    edx,0x1
c001e0f5:	74 e2                	je     c001e0d9 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0f7:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e0fa:	01 ca                	add    edx,ecx
c001e0fc:	89 d5                	mov    ebp,edx
c001e0fe:	c1 e5 05             	shl    ebp,0x5
c001e101:	01 ea                	add    edx,ebp
c001e103:	01 d0                	add    eax,edx
c001e105:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e10b:	83 fd 07             	cmp    ebp,0x7
c001e10e:	75 c9                	jne    c001e0d9 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e110:	05 40 02 00 00       	add    eax,0x240
c001e115:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e118:	83 fd ff             	cmp    ebp,0xffffffff
c001e11b:	0f 8c e6 00 00 00    	jl     c001e207 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e121:	0f 84 97 01 00 00    	je     c001e2be <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e127:	85 ed                	test   ebp,ebp
c001e129:	0f 84 7e 01 00 00    	je     c001e2ad <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e12f:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e131:	75 a6                	jne    c001e0d9 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e133:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e139:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e13d:	01 d0                	add    eax,edx
c001e13f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e143:	83 ec 0c             	sub    esp,0xc
c001e146:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e14c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e14f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e155:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e15c:	50                   	push   eax
c001e15d:	e8 3b fe ff ff       	call   c001df9d <unblockTask(ThreadControlBlock*)>
c001e162:	83 c4 10             	add    esp,0x10
c001e165:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e168:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e16c:	89 f7                	mov    edi,esi
c001e16e:	41                   	inc    ecx
c001e16f:	83 f9 10             	cmp    ecx,0x10
c001e172:	0f 85 6b ff ff ff    	jne    c001e0e3 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e178:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e17e:	85 c0                	test   eax,eax
c001e180:	74 5d                	je     c001e1df <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e182:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e188:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e18e:	74 4f                	je     c001e1df <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	68 a4 f2 02 c0       	push   0xc002f2a4
c001e198:	e8 bd a7 00 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e19d:	c7 04 24 a4 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2a4
c001e1a4:	89 c7                	mov    edi,eax
c001e1a6:	e8 93 a7 00 00       	call   c002893e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1ab:	83 c4 10             	add    esp,0x10
c001e1ae:	84 c0                	test   al,al
c001e1b0:	0f 84 c2 00 00 00    	je     c001e278 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e1b6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1b9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e1bf:	85 d2                	test   edx,edx
c001e1c1:	74 0f                	je     c001e1d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e1c3:	83 ec 0c             	sub    esp,0xc
c001e1c6:	8b 02                	mov    eax,DWORD PTR [edx]
c001e1c8:	52                   	push   edx
c001e1c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e1cc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1cf:	83 c4 10             	add    esp,0x10
c001e1d2:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e1dc:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e1df:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e1e5:	85 db                	test   ebx,ebx
c001e1e7:	74 16                	je     c001e1ff <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e1e9:	83 ec 0c             	sub    esp,0xc
c001e1ec:	53                   	push   ebx
c001e1ed:	e8 04 37 ff ff       	call   c00118f6 <VAS::~VAS()>
c001e1f2:	58                   	pop    eax
c001e1f3:	5a                   	pop    edx
c001e1f4:	6a 14                	push   0x14
c001e1f6:	53                   	push   ebx
c001e1f7:	e8 c9 44 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c001e1fc:	83 c4 10             	add    esp,0x10
c001e1ff:	83 c4 1c             	add    esp,0x1c
c001e202:	5b                   	pop    ebx
c001e203:	5e                   	pop    esi
c001e204:	5f                   	pop    edi
c001e205:	5d                   	pop    ebp
c001e206:	c3                   	ret    
c001e207:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e20b:	83 ec 0c             	sub    esp,0xc
c001e20e:	68 f4 bf 02 c0       	push   0xc002bff4
c001e213:	e8 61 bd ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001e218:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e21b:	83 c4 10             	add    esp,0x10
c001e21e:	89 f7                	mov    edi,esi
c001e220:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e224:	e9 b0 fe ff ff       	jmp    c001e0d9 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e229:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e22f:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e235:	75 1c                	jne    c001e253 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e237:	83 ec 0c             	sub    esp,0xc
c001e23a:	68 5c c0 02 c0       	push   0xc002c05c
c001e23f:	e8 59 45 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001e244:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e24b:	e8 91 fa ff ff       	call   c001dce1 <blockTask(TaskState)>
c001e250:	83 c4 10             	add    esp,0x10
c001e253:	83 ec 08             	sub    esp,0x8
c001e256:	56                   	push   esi
c001e257:	68 a4 f2 02 c0       	push   0xc002f2a4
c001e25c:	e8 af a7 00 00       	call   c0028a10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e261:	c7 04 24 a4 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2a4
c001e268:	e8 ed a6 00 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e26d:	83 c4 10             	add    esp,0x10
c001e270:	39 f8                	cmp    eax,edi
c001e272:	0f 84 3e ff ff ff    	je     c001e1b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	68 a4 f2 02 c0       	push   0xc002f2a4
c001e280:	e8 d5 a6 00 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e285:	c7 04 24 a4 f2 02 c0 	mov    DWORD PTR [esp],0xc002f2a4
c001e28c:	89 c6                	mov    esi,eax
c001e28e:	e8 cf a6 00 00       	call   c0028962 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e293:	83 c4 10             	add    esp,0x10
c001e296:	39 f3                	cmp    ebx,esi
c001e298:	74 b9                	je     c001e253 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e29a:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e29d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2a0:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e2a6:	75 ab                	jne    c001e253 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e2a8:	e9 7c ff ff ff       	jmp    c001e229 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e2ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e2b1:	83 ec 0c             	sub    esp,0xc
c001e2b4:	68 28 c0 02 c0       	push   0xc002c028
c001e2b9:	e9 55 ff ff ff       	jmp    c001e213 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e2be:	8b 36                	mov    esi,DWORD PTR [esi]
c001e2c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e2c4:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e2c7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2ca:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e2d0:	01 d7                	add    edi,edx
c001e2d2:	89 f8                	mov    eax,edi
c001e2d4:	e9 66 fe ff ff       	jmp    c001e13f <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e2d9 <cleanerTaskFunction(void*)>:
c001e2d9:	53                   	push   ebx
c001e2da:	83 ec 08             	sub    esp,0x8
c001e2dd:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e2e2:	48                   	dec    eax
c001e2e3:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e2e8:	75 01                	jne    c001e2eb <cleanerTaskFunction(void*)+0x12>
c001e2ea:	fb                   	sti    
c001e2eb:	fa                   	cli    
c001e2ec:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e2f1:	80 3d 6c f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f26c,0x0
c001e2f8:	8d 50 01             	lea    edx,[eax+0x1]
c001e2fb:	89 15 88 f2 02 c0    	mov    DWORD PTR ds:0xc002f288,edx
c001e301:	0f 84 a1 00 00 00    	je     c001e3a8 <cleanerTaskFunction(void*)+0xcf>
c001e307:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e30c:	85 c0                	test   eax,eax
c001e30e:	75 01                	jne    c001e311 <cleanerTaskFunction(void*)+0x38>
c001e310:	fb                   	sti    
c001e311:	c6 05 6c f2 02 c0 00 	mov    BYTE PTR ds:0xc002f26c,0x0
c001e318:	fa                   	cli    
c001e319:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001e31f:	ff 05 84 f2 02 c0    	inc    DWORD PTR ds:0xc002f284
c001e325:	fa                   	cli    
c001e326:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001e32c:	eb 26                	jmp    c001e354 <cleanerTaskFunction(void*)+0x7b>
c001e32e:	83 ec 0c             	sub    esp,0xc
c001e331:	68 8c f2 02 c0       	push   0xc002f28c
c001e336:	e8 1f a6 00 00       	call   c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e33b:	c7 04 24 8c f2 02 c0 	mov    DWORD PTR [esp],0xc002f28c
c001e342:	89 c3                	mov    ebx,eax
c001e344:	e8 19 a6 00 00       	call   c0028962 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e349:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e34c:	e8 e1 fc ff ff       	call   c001e032 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e351:	83 c4 10             	add    esp,0x10
c001e354:	83 ec 0c             	sub    esp,0xc
c001e357:	68 8c f2 02 c0       	push   0xc002f28c
c001e35c:	e8 dd a5 00 00       	call   c002893e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e361:	83 c4 10             	add    esp,0x10
c001e364:	84 c0                	test   al,al
c001e366:	74 c6                	je     c001e32e <cleanerTaskFunction(void*)+0x55>
c001e368:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e36d:	48                   	dec    eax
c001e36e:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e373:	75 01                	jne    c001e376 <cleanerTaskFunction(void*)+0x9d>
c001e375:	fb                   	sti    
c001e376:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001e37b:	48                   	dec    eax
c001e37c:	a3 84 f2 02 c0       	mov    ds:0xc002f284,eax
c001e381:	0f 85 56 ff ff ff    	jne    c001e2dd <cleanerTaskFunction(void*)+0x4>
c001e387:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c001e38c:	85 c0                	test   eax,eax
c001e38e:	0f 84 49 ff ff ff    	je     c001e2dd <cleanerTaskFunction(void*)+0x4>
c001e394:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c001e39e:	e8 68 f7 ff ff       	call   c001db0b <schedule()>
c001e3a3:	e9 35 ff ff ff       	jmp    c001e2dd <cleanerTaskFunction(void*)+0x4>
c001e3a8:	83 ec 0c             	sub    esp,0xc
c001e3ab:	6a 02                	push   0x2
c001e3ad:	e8 09 f9 ff ff       	call   c001dcbb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e3b2:	83 c4 10             	add    esp,0x10
c001e3b5:	e9 57 ff ff ff       	jmp    c001e311 <cleanerTaskFunction(void*)+0x38>

c001e3ba <terminateTask(int)>:
c001e3ba:	83 ec 14             	sub    esp,0x14
c001e3bd:	fa                   	cli    
c001e3be:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001e3c4:	ff 05 84 f2 02 c0    	inc    DWORD PTR ds:0xc002f284
c001e3ca:	fa                   	cli    
c001e3cb:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001e3d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e3d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3da:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e3dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3e2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e3e5:	50                   	push   eax
c001e3e6:	68 8c f2 02 c0       	push   0xc002f28c
c001e3eb:	e8 20 a6 00 00       	call   c0028a10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3f5:	83 c4 10             	add    esp,0x10
c001e3f8:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e3ff:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001e404:	85 c0                	test   eax,eax
c001e406:	74 53                	je     c001e45b <terminateTask(int)+0xa1>
c001e408:	83 ec 0c             	sub    esp,0xc
c001e40b:	c6 05 6c f2 02 c0 01 	mov    BYTE PTR ds:0xc002f26c,0x1
c001e412:	50                   	push   eax
c001e413:	e8 85 fb ff ff       	call   c001df9d <unblockTask(ThreadControlBlock*)>
c001e418:	83 c4 10             	add    esp,0x10
c001e41b:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e420:	48                   	dec    eax
c001e421:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e426:	75 01                	jne    c001e429 <terminateTask(int)+0x6f>
c001e428:	fb                   	sti    
c001e429:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001e42e:	48                   	dec    eax
c001e42f:	a3 84 f2 02 c0       	mov    ds:0xc002f284,eax
c001e434:	75 09                	jne    c001e43f <terminateTask(int)+0x85>
c001e436:	83 3d 80 f2 02 c0 00 	cmp    DWORD PTR ds:0xc002f280,0x0
c001e43d:	75 2e                	jne    c001e46d <terminateTask(int)+0xb3>
c001e43f:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e444:	48                   	dec    eax
c001e445:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e44a:	75 01                	jne    c001e44d <terminateTask(int)+0x93>
c001e44c:	fb                   	sti    
c001e44d:	fa                   	cli    
c001e44e:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001e454:	e8 b2 f6 ff ff       	call   c001db0b <schedule()>
c001e459:	eb e4                	jmp    c001e43f <terminateTask(int)+0x85>
c001e45b:	83 ec 0c             	sub    esp,0xc
c001e45e:	68 59 bf 02 c0       	push   0xc002bf59
c001e463:	e8 35 43 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001e468:	83 c4 10             	add    esp,0x10
c001e46b:	eb ae                	jmp    c001e41b <terminateTask(int)+0x61>
c001e46d:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c001e477:	eb db                	jmp    c001e454 <terminateTask(int)+0x9a>

c001e479 <Thr::terminateFromIRQ(int)>:
c001e479:	83 ec 18             	sub    esp,0x18
c001e47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e480:	e8 35 ff ff ff       	call   c001e3ba <terminateTask(int)>
c001e485:	90                   	nop

c001e486 <Semaphore::release()>:
c001e486:	83 ec 0c             	sub    esp,0xc
c001e489:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e48d:	fa                   	cli    
c001e48e:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001e493:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001e499:	8d 48 01             	lea    ecx,[eax+0x1]
c001e49c:	89 0d 84 f2 02 c0    	mov    DWORD PTR ds:0xc002f284,ecx
c001e4a2:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e4a5:	85 c9                	test   ecx,ecx
c001e4a7:	74 3c                	je     c001e4e5 <Semaphore::release()+0x5f>
c001e4a9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e4ac:	83 ec 0c             	sub    esp,0xc
c001e4af:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e4b2:	51                   	push   ecx
c001e4b3:	e8 e5 fa ff ff       	call   c001df9d <unblockTask(ThreadControlBlock*)>
c001e4b8:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c001e4bd:	83 c4 10             	add    esp,0x10
c001e4c0:	48                   	dec    eax
c001e4c1:	a3 84 f2 02 c0       	mov    ds:0xc002f284,eax
c001e4c6:	85 c0                	test   eax,eax
c001e4c8:	75 09                	jne    c001e4d3 <Semaphore::release()+0x4d>
c001e4ca:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c001e4cf:	85 c0                	test   eax,eax
c001e4d1:	75 17                	jne    c001e4ea <Semaphore::release()+0x64>
c001e4d3:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e4d8:	48                   	dec    eax
c001e4d9:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e4de:	75 01                	jne    c001e4e1 <Semaphore::release()+0x5b>
c001e4e0:	fb                   	sti    
c001e4e1:	83 c4 0c             	add    esp,0xc
c001e4e4:	c3                   	ret    
c001e4e5:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e4e8:	eb d7                	jmp    c001e4c1 <Semaphore::release()+0x3b>
c001e4ea:	c7 05 80 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f280,0x0
c001e4f4:	e8 12 f6 ff ff       	call   c001db0b <schedule()>
c001e4f9:	eb d8                	jmp    c001e4d3 <Semaphore::release()+0x4d>

c001e4fb <__static_initialization_and_destruction_0(int, int)>:
c001e4fb:	83 ec 0c             	sub    esp,0xc
c001e4fe:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e503:	0f 85 88 00 00 00    	jne    c001e591 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e509:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e511:	75 7e                	jne    c001e591 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e513:	83 ec 0c             	sub    esp,0xc
c001e516:	68 a4 f2 02 c0       	push   0xc002f2a4
c001e51b:	e8 80 a7 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e520:	83 c4 10             	add    esp,0x10
c001e523:	83 ec 04             	sub    esp,0x4
c001e526:	68 3c cb 02 c0       	push   0xc002cb3c
c001e52b:	68 a4 f2 02 c0       	push   0xc002f2a4
c001e530:	68 54 8c 02 c0       	push   0xc0028c54
c001e535:	e8 05 41 ff ff       	call   c001263f <__cxa_atexit>
c001e53a:	83 c4 10             	add    esp,0x10
c001e53d:	83 ec 0c             	sub    esp,0xc
c001e540:	68 98 f2 02 c0       	push   0xc002f298
c001e545:	e8 56 a7 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e54a:	83 c4 10             	add    esp,0x10
c001e54d:	83 ec 04             	sub    esp,0x4
c001e550:	68 3c cb 02 c0       	push   0xc002cb3c
c001e555:	68 98 f2 02 c0       	push   0xc002f298
c001e55a:	68 54 8c 02 c0       	push   0xc0028c54
c001e55f:	e8 db 40 ff ff       	call   c001263f <__cxa_atexit>
c001e564:	83 c4 10             	add    esp,0x10
c001e567:	83 ec 0c             	sub    esp,0xc
c001e56a:	68 8c f2 02 c0       	push   0xc002f28c
c001e56f:	e8 2c a7 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e574:	83 c4 10             	add    esp,0x10
c001e577:	83 ec 04             	sub    esp,0x4
c001e57a:	68 3c cb 02 c0       	push   0xc002cb3c
c001e57f:	68 8c f2 02 c0       	push   0xc002f28c
c001e584:	68 54 8c 02 c0       	push   0xc0028c54
c001e589:	e8 b1 40 ff ff       	call   c001263f <__cxa_atexit>
c001e58e:	83 c4 10             	add    esp,0x10
c001e591:	90                   	nop
c001e592:	83 c4 0c             	add    esp,0xc
c001e595:	c3                   	ret    

c001e596 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e596:	83 ec 0c             	sub    esp,0xc
c001e599:	83 ec 08             	sub    esp,0x8
c001e59c:	68 ff ff 00 00       	push   0xffff
c001e5a1:	6a 01                	push   0x1
c001e5a3:	e8 53 ff ff ff       	call   c001e4fb <__static_initialization_and_destruction_0(int, int)>
c001e5a8:	83 c4 10             	add    esp,0x10
c001e5ab:	83 c4 0c             	add    esp,0xc
c001e5ae:	c3                   	ret    

c001e5af <Vm::inbv(unsigned short)>:
c001e5af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e5b3:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e5b8:	75 06                	jne    c001e5c0 <Vm::inbv(unsigned short)+0x11>
c001e5ba:	a0 ec f2 02 c0       	mov    al,ds:0xc002f2ec
c001e5bf:	c3                   	ret    
c001e5c0:	ec                   	in     al,dx
c001e5c1:	c3                   	ret    

c001e5c2 <Vm::outbv(unsigned short, unsigned char)>:
c001e5c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e5c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e5ca:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e5cf:	75 25                	jne    c001e5f6 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e5d1:	8b 0d ec f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f2ec
c001e5d7:	8d 51 01             	lea    edx,[ecx+0x1]
c001e5da:	88 81 00 f3 02 c0    	mov    BYTE PTR [ecx-0x3ffd0d00],al
c001e5e0:	89 15 ec f2 02 c0    	mov    DWORD PTR ds:0xc002f2ec,edx
c001e5e6:	83 fa 20             	cmp    edx,0x20
c001e5e9:	75 0c                	jne    c001e5f7 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e5eb:	c7 05 ec f2 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002f2ec,0x1f
c001e5f5:	c3                   	ret    
c001e5f6:	ee                   	out    dx,al
c001e5f7:	c3                   	ret    

c001e5f8 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e5f8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e5fd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e602:	c1 e0 04             	shl    eax,0x4
c001e605:	01 d0                	add    eax,edx
c001e607:	c3                   	ret    

c001e608 <Vm::getSegment(unsigned int)>:
c001e608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e60c:	c1 e8 10             	shr    eax,0x10
c001e60f:	c3                   	ret    

c001e610 <Vm::getOffset(unsigned int)>:
c001e610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e614:	c3                   	ret    

c001e615 <Vm::mainloop2()>:
c001e615:	83 ec 18             	sub    esp,0x18
c001e618:	fa                   	cli    
c001e619:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001e61f:	6a 02                	push   0x2
c001e621:	c6 05 e5 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f2e5,0x1
c001e628:	e8 8e f6 ff ff       	call   c001dcbb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e62d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e632:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e636:	52                   	push   edx
c001e637:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e63b:	52                   	push   edx
c001e63c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e640:	52                   	push   edx
c001e641:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e645:	50                   	push   eax
c001e646:	e8 af 1c fe ff       	call   c00002fa <goToVM86>
c001e64b:	83 c4 2c             	add    esp,0x2c
c001e64e:	c3                   	ret    

c001e64f <Vm::mainVm8086Loop(void*)>:
c001e64f:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e654:	48                   	dec    eax
c001e655:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e65a:	75 01                	jne    c001e65d <Vm::mainVm8086Loop(void*)+0xe>
c001e65c:	fb                   	sti    
c001e65d:	eb b6                	jmp    c001e615 <Vm::mainloop2()>

c001e65f <Vm::mainloop3(unsigned long)>:
c001e65f:	83 ec 18             	sub    esp,0x18
c001e662:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e666:	fa                   	cli    
c001e667:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001e66d:	6a 02                	push   0x2
c001e66f:	c6 05 e4 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f2e4,0x1
c001e676:	a3 e0 f2 02 c0       	mov    ds:0xc002f2e0,eax
c001e67b:	e8 3b f6 ff ff       	call   c001dcbb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e680:	83 c4 1c             	add    esp,0x1c
c001e683:	eb 90                	jmp    c001e615 <Vm::mainloop2()>

c001e685 <Vm::initialise8086()>:
c001e685:	83 ec 0c             	sub    esp,0xc
c001e688:	68 80 00 00 00       	push   0x80
c001e68d:	6a 00                	push   0x0
c001e68f:	68 4f e6 01 c0       	push   0xc001e64f
c001e694:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c001e69a:	e8 47 f2 ff ff       	call   c001d8e6 <Process::createThread(void (*)(void*), void*, int)>
c001e69f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e6a6:	a3 e8 f2 02 c0       	mov    ds:0xc002f2e8,eax
c001e6ab:	68 00 01 00 00       	push   0x100
c001e6b0:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c001e6b5:	6a 00                	push   0x0
c001e6b7:	6a 00                	push   0x0
c001e6b9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e6bf:	e8 a4 36 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e6c4:	83 c4 2c             	add    esp,0x2c
c001e6c7:	c3                   	ret    

c001e6c8 <Vm::finish8086()>:
c001e6c8:	53                   	push   ebx
c001e6c9:	83 ec 08             	sub    esp,0x8
c001e6cc:	fa                   	cli    
c001e6cd:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001e6d3:	80 3d e4 f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f2e4,0x0
c001e6da:	75 15                	jne    c001e6f1 <Vm::finish8086()+0x29>
c001e6dc:	e8 2a f4 ff ff       	call   c001db0b <schedule()>
c001e6e1:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e6e6:	48                   	dec    eax
c001e6e7:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e6ec:	75 de                	jne    c001e6cc <Vm::finish8086()+0x4>
c001e6ee:	fb                   	sti    
c001e6ef:	eb db                	jmp    c001e6cc <Vm::finish8086()+0x4>
c001e6f1:	83 ec 0c             	sub    esp,0xc
c001e6f4:	8b 1d e0 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2e0
c001e6fa:	ff 35 e8 f2 02 c0    	push   DWORD PTR ds:0xc002f2e8
c001e700:	c6 05 e4 f2 02 c0 00 	mov    BYTE PTR ds:0xc002f2e4,0x0
c001e707:	e8 91 f8 ff ff       	call   c001df9d <unblockTask(ThreadControlBlock*)>
c001e70c:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e711:	83 c4 10             	add    esp,0x10
c001e714:	8d 50 ff             	lea    edx,[eax-0x1]
c001e717:	89 15 88 f2 02 c0    	mov    DWORD PTR ds:0xc002f288,edx
c001e71d:	85 d2                	test   edx,edx
c001e71f:	75 01                	jne    c001e722 <Vm::finish8086()+0x5a>
c001e721:	fb                   	sti    
c001e722:	89 d8                	mov    eax,ebx
c001e724:	83 c4 08             	add    esp,0x8
c001e727:	5b                   	pop    ebx
c001e728:	c3                   	ret    

c001e729 <Vm::getOutput8086(unsigned char*)>:
c001e729:	57                   	push   edi
c001e72a:	8b 0d ec f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f2ec
c001e730:	56                   	push   esi
c001e731:	be 00 f3 02 c0       	mov    esi,0xc002f300
c001e736:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e73a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e73c:	a1 ec f2 02 c0       	mov    eax,ds:0xc002f2ec
c001e741:	5e                   	pop    esi
c001e742:	c7 05 ec f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2ec,0x0
c001e74c:	5f                   	pop    edi
c001e74d:	c3                   	ret    

c001e74e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e74e:	55                   	push   ebp
c001e74f:	57                   	push   edi
c001e750:	56                   	push   esi
c001e751:	53                   	push   ebx
c001e752:	83 ec 2c             	sub    esp,0x2c
c001e755:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e759:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e75d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e761:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e765:	fa                   	cli    
c001e766:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c001e76c:	0f b6 35 e5 f2 02 c0 	movzx  esi,BYTE PTR ds:0xc002f2e5
c001e773:	89 f0                	mov    eax,esi
c001e775:	84 c0                	test   al,al
c001e777:	75 1d                	jne    c001e796 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e779:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e77d:	e8 89 f3 ff ff       	call   c001db0b <schedule()>
c001e782:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e787:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e78b:	48                   	dec    eax
c001e78c:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e791:	75 d2                	jne    c001e765 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e793:	fb                   	sti    
c001e794:	eb cf                	jmp    c001e765 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e796:	a1 e8 f2 02 c0       	mov    eax,ds:0xc002f2e8
c001e79b:	c7 05 ec f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2ec,0x0
c001e7a5:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e7a9:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e7ad:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e7b1:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e7b5:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e7b9:	50                   	push   eax
c001e7ba:	6a 20                	push   0x20
c001e7bc:	6a 00                	push   0x0
c001e7be:	68 00 f3 02 c0       	push   0xc002f300
c001e7c3:	e8 88 1f fe ff       	call   c0000750 <memset>
c001e7c8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e7cf:	e8 c5 0d ff ff       	call   c000f599 <malloc>
c001e7d4:	83 c4 0c             	add    esp,0xc
c001e7d7:	89 c3                	mov    ebx,eax
c001e7d9:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c001e7df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e7e3:	50                   	push   eax
c001e7e4:	e8 13 45 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c001e7e9:	83 c4 10             	add    esp,0x10
c001e7ec:	85 db                	test   ebx,ebx
c001e7ee:	75 0a                	jne    c001e7fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	68 84 c0 02 c0       	push   0xc002c084
c001e7f8:	eb 3e                	jmp    c001e838 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e7fa:	50                   	push   eax
c001e7fb:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e7ff:	50                   	push   eax
c001e800:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e804:	50                   	push   eax
c001e805:	53                   	push   ebx
c001e806:	e8 01 48 ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c001e80b:	83 c4 10             	add    esp,0x10
c001e80e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e813:	74 0a                	je     c001e81f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e815:	83 ec 0c             	sub    esp,0xc
c001e818:	68 98 c0 02 c0       	push   0xc002c098
c001e81d:	eb 19                	jmp    c001e838 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e81f:	51                   	push   ecx
c001e820:	51                   	push   ecx
c001e821:	6a 01                	push   0x1
c001e823:	53                   	push   ebx
c001e824:	e8 37 45 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c001e829:	83 c4 10             	add    esp,0x10
c001e82c:	85 c0                	test   eax,eax
c001e82e:	74 24                	je     c001e854 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e830:	83 ec 0c             	sub    esp,0xc
c001e833:	68 b1 c0 02 c0       	push   0xc002c0b1
c001e838:	e8 3c b7 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001e83d:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e842:	83 c4 10             	add    esp,0x10
c001e845:	48                   	dec    eax
c001e846:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e84b:	85 c0                	test   eax,eax
c001e84d:	75 01                	jne    c001e850 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e84f:	fb                   	sti    
c001e850:	31 f6                	xor    esi,esi
c001e852:	eb 58                	jmp    c001e8ac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e854:	0f b7 ed             	movzx  ebp,bp
c001e857:	50                   	push   eax
c001e858:	0f b7 ff             	movzx  edi,di
c001e85b:	50                   	push   eax
c001e85c:	55                   	push   ebp
c001e85d:	57                   	push   edi
c001e85e:	e8 95 fd ff ff       	call   c001e5f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e863:	5a                   	pop    edx
c001e864:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e866:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e86a:	51                   	push   ecx
c001e86b:	50                   	push   eax
c001e86c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e870:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e874:	53                   	push   ebx
c001e875:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e878:	83 c4 14             	add    esp,0x14
c001e87b:	53                   	push   ebx
c001e87c:	e8 3d 45 ff ff       	call   c0012dbe <File::close()>
c001e881:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001e886:	83 c4 10             	add    esp,0x10
c001e889:	48                   	dec    eax
c001e88a:	c6 05 e5 f2 02 c0 00 	mov    BYTE PTR ds:0xc002f2e5,0x0
c001e891:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c001e896:	85 c0                	test   eax,eax
c001e898:	75 01                	jne    c001e89b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e89a:	fb                   	sti    
c001e89b:	83 ec 0c             	sub    esp,0xc
c001e89e:	ff 35 e8 f2 02 c0    	push   DWORD PTR ds:0xc002f2e8
c001e8a4:	e8 f4 f6 ff ff       	call   c001df9d <unblockTask(ThreadControlBlock*)>
c001e8a9:	83 c4 10             	add    esp,0x10
c001e8ac:	83 c4 2c             	add    esp,0x2c
c001e8af:	89 f0                	mov    eax,esi
c001e8b1:	5b                   	pop    ebx
c001e8b2:	5e                   	pop    esi
c001e8b3:	5f                   	pop    edi
c001e8b4:	5d                   	pop    ebp
c001e8b5:	c3                   	ret    

c001e8b6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e8b6:	57                   	push   edi
c001e8b7:	56                   	push   esi
c001e8b8:	53                   	push   ebx
c001e8b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8c5:	83 e8 06             	sub    eax,0x6
c001e8c8:	0f b7 c0             	movzx  eax,ax
c001e8cb:	50                   	push   eax
c001e8cc:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e8d1:	50                   	push   eax
c001e8d2:	e8 21 fd ff ff       	call   c001e5f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e8d7:	5a                   	pop    edx
c001e8d8:	5e                   	pop    esi
c001e8d9:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e8dc:	8d 56 fa             	lea    edx,[esi-0x6]
c001e8df:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e8e5:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e8e8:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e8eb:	83 c2 02             	add    edx,0x2
c001e8ee:	66 89 10             	mov    WORD PTR [eax],dx
c001e8f1:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e8f4:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e8f8:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e8fb:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e8ff:	89 d6                	mov    esi,edx
c001e901:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e907:	66 81 e6 ff fd       	and    si,0xfdff
c001e90c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e910:	74 07                	je     c001e919 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e912:	89 d6                	mov    esi,edx
c001e914:	66 81 ce 00 02       	or     si,0x200
c001e919:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e91d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e922:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e926:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e92e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e931:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e939:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e93c:	5b                   	pop    ebx
c001e93d:	5e                   	pop    esi
c001e93e:	5f                   	pop    edi
c001e93f:	c3                   	ret    

c001e940 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e940:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e945:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e94a:	c1 e0 04             	shl    eax,0x4
c001e94d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e950:	c3                   	ret    

c001e951 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e951:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e956:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e95b:	c1 e0 04             	shl    eax,0x4
c001e95e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e962:	c3                   	ret    

c001e963 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e963:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e968:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e96d:	c1 e0 04             	shl    eax,0x4
c001e970:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e973:	c3                   	ret    

c001e974 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e974:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e979:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e97e:	c1 e0 04             	shl    eax,0x4
c001e981:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e985:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e988:	c3                   	ret    

c001e989 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e989:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e98e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e993:	c1 e0 04             	shl    eax,0x4
c001e996:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e99a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e99e:	c3                   	ret    

c001e99f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e99f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9a4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9a9:	c1 e0 04             	shl    eax,0x4
c001e9ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9b0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e9b3:	c3                   	ret    

c001e9b4 <Vm::faultHandler(regs*)>:
c001e9b4:	55                   	push   ebp
c001e9b5:	57                   	push   edi
c001e9b6:	56                   	push   esi
c001e9b7:	53                   	push   ebx
c001e9b8:	83 ec 1c             	sub    esp,0x1c
c001e9bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e9bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e9c2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e9c6:	0f b7 f8             	movzx  edi,ax
c001e9c9:	52                   	push   edx
c001e9ca:	0f b7 c0             	movzx  eax,ax
c001e9cd:	50                   	push   eax
c001e9ce:	e8 25 fc ff ff       	call   c001e5f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e9d3:	5a                   	pop    edx
c001e9d4:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e9d7:	59                   	pop    ecx
c001e9d8:	89 c1                	mov    ecx,eax
c001e9da:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e9e1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e9ea:	0f b7 c5             	movzx  eax,bp
c001e9ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9f1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e9f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e9f9:	e8 fa fb ff ff       	call   c001e5f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e9fe:	5e                   	pop    esi
c001e9ff:	be 06 00 00 00       	mov    esi,0x6
c001ea04:	5a                   	pop    edx
c001ea05:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ea0a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ea0f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ea12:	80 fa 9d             	cmp    dl,0x9d
c001ea15:	0f 84 2c 02 00 00    	je     c001ec47 <Vm::faultHandler(regs*)+0x293>
c001ea1b:	0f 87 91 00 00 00    	ja     c001eab2 <Vm::faultHandler(regs*)+0xfe>
c001ea21:	80 fa 66             	cmp    dl,0x66
c001ea24:	0f 84 98 01 00 00    	je     c001ebc2 <Vm::faultHandler(regs*)+0x20e>
c001ea2a:	77 47                	ja     c001ea73 <Vm::faultHandler(regs*)+0xbf>
c001ea2c:	80 fa 36             	cmp    dl,0x36
c001ea2f:	0f 84 80 01 00 00    	je     c001ebb5 <Vm::faultHandler(regs*)+0x201>
c001ea35:	77 1a                	ja     c001ea51 <Vm::faultHandler(regs*)+0x9d>
c001ea37:	80 fa 26             	cmp    dl,0x26
c001ea3a:	0f 84 4e 01 00 00    	je     c001eb8e <Vm::faultHandler(regs*)+0x1da>
c001ea40:	80 fa 2e             	cmp    dl,0x2e
c001ea43:	0f 85 e2 05 00 00    	jne    c001f02b <Vm::faultHandler(regs*)+0x677>
c001ea49:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea4c:	31 f6                	xor    esi,esi
c001ea4e:	41                   	inc    ecx
c001ea4f:	eb be                	jmp    c001ea0f <Vm::faultHandler(regs*)+0x5b>
c001ea51:	80 fa 64             	cmp    dl,0x64
c001ea54:	0f 84 41 01 00 00    	je     c001eb9b <Vm::faultHandler(regs*)+0x1e7>
c001ea5a:	0f 87 48 01 00 00    	ja     c001eba8 <Vm::faultHandler(regs*)+0x1f4>
c001ea60:	80 fa 3e             	cmp    dl,0x3e
c001ea63:	0f 85 c2 05 00 00    	jne    c001f02b <Vm::faultHandler(regs*)+0x677>
c001ea69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea6c:	be 01 00 00 00       	mov    esi,0x1
c001ea71:	eb db                	jmp    c001ea4e <Vm::faultHandler(regs*)+0x9a>
c001ea73:	80 fa 6d             	cmp    dl,0x6d
c001ea76:	0f 84 ec 02 00 00    	je     c001ed68 <Vm::faultHandler(regs*)+0x3b4>
c001ea7c:	77 17                	ja     c001ea95 <Vm::faultHandler(regs*)+0xe1>
c001ea7e:	80 fa 67             	cmp    dl,0x67
c001ea81:	0f 84 48 01 00 00    	je     c001ebcf <Vm::faultHandler(regs*)+0x21b>
c001ea87:	80 fa 6c             	cmp    dl,0x6c
c001ea8a:	0f 84 69 02 00 00    	je     c001ecf9 <Vm::faultHandler(regs*)+0x345>
c001ea90:	e9 96 05 00 00       	jmp    c001f02b <Vm::faultHandler(regs*)+0x677>
c001ea95:	80 fa 6f             	cmp    dl,0x6f
c001ea98:	0f 84 f4 03 00 00    	je     c001ee92 <Vm::faultHandler(regs*)+0x4de>
c001ea9e:	0f 82 59 03 00 00    	jb     c001edfd <Vm::faultHandler(regs*)+0x449>
c001eaa4:	80 fa 9c             	cmp    dl,0x9c
c001eaa7:	0f 84 2f 01 00 00    	je     c001ebdc <Vm::faultHandler(regs*)+0x228>
c001eaad:	e9 79 05 00 00       	jmp    c001f02b <Vm::faultHandler(regs*)+0x677>
c001eab2:	80 fa ec             	cmp    dl,0xec
c001eab5:	0f 84 14 05 00 00    	je     c001efcf <Vm::faultHandler(regs*)+0x61b>
c001eabb:	77 7b                	ja     c001eb38 <Vm::faultHandler(regs*)+0x184>
c001eabd:	80 fa e4             	cmp    dl,0xe4
c001eac0:	0f 84 93 04 00 00    	je     c001ef59 <Vm::faultHandler(regs*)+0x5a5>
c001eac6:	77 53                	ja     c001eb1b <Vm::faultHandler(regs*)+0x167>
c001eac8:	80 fa cd             	cmp    dl,0xcd
c001eacb:	0f 84 d9 01 00 00    	je     c001ecaa <Vm::faultHandler(regs*)+0x2f6>
c001ead1:	80 fa cf             	cmp    dl,0xcf
c001ead4:	0f 85 51 05 00 00    	jne    c001f02b <Vm::faultHandler(regs*)+0x677>
c001eada:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eadd:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001eae0:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001eae4:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001eae7:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001eaeb:	81 ca 00 02 02 00    	or     edx,0x20200
c001eaf1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eaf4:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001eaf8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eafe:	66 c1 e8 09          	shr    ax,0x9
c001eb02:	83 e0 01             	and    eax,0x1
c001eb05:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb08:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb0b:	83 c0 06             	add    eax,0x6
c001eb0e:	25 ff ff 00 00       	and    eax,0xffff
c001eb13:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb16:	e9 0c 05 00 00       	jmp    c001f027 <Vm::faultHandler(regs*)+0x673>
c001eb1b:	80 fa e6             	cmp    dl,0xe6
c001eb1e:	0f 84 7f 04 00 00    	je     c001efa3 <Vm::faultHandler(regs*)+0x5ef>
c001eb24:	0f 82 4b 04 00 00    	jb     c001ef75 <Vm::faultHandler(regs*)+0x5c1>
c001eb2a:	80 fa e7             	cmp    dl,0xe7
c001eb2d:	0f 84 87 04 00 00    	je     c001efba <Vm::faultHandler(regs*)+0x606>
c001eb33:	e9 f3 04 00 00       	jmp    c001f02b <Vm::faultHandler(regs*)+0x677>
c001eb38:	80 fa ef             	cmp    dl,0xef
c001eb3b:	0f 84 d1 04 00 00    	je     c001f012 <Vm::faultHandler(regs*)+0x65e>
c001eb41:	77 28                	ja     c001eb6b <Vm::faultHandler(regs*)+0x1b7>
c001eb43:	80 fa ed             	cmp    dl,0xed
c001eb46:	0f 84 9f 04 00 00    	je     c001efeb <Vm::faultHandler(regs*)+0x637>
c001eb4c:	80 fa ee             	cmp    dl,0xee
c001eb4f:	0f 85 d6 04 00 00    	jne    c001f02b <Vm::faultHandler(regs*)+0x677>
c001eb55:	50                   	push   eax
c001eb56:	50                   	push   eax
c001eb57:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001eb5b:	50                   	push   eax
c001eb5c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eb60:	50                   	push   eax
c001eb61:	e8 5c fa ff ff       	call   c001e5c2 <Vm::outbv(unsigned short, unsigned char)>
c001eb66:	e9 9f 04 00 00       	jmp    c001f00a <Vm::faultHandler(regs*)+0x656>
c001eb6b:	80 fa fa             	cmp    dl,0xfa
c001eb6e:	0f 84 69 01 00 00    	je     c001ecdd <Vm::faultHandler(regs*)+0x329>
c001eb74:	80 fa fb             	cmp    dl,0xfb
c001eb77:	0f 84 6e 01 00 00    	je     c001eceb <Vm::faultHandler(regs*)+0x337>
c001eb7d:	80 fa f3             	cmp    dl,0xf3
c001eb80:	0f 85 a5 04 00 00    	jne    c001f02b <Vm::faultHandler(regs*)+0x677>
c001eb86:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb89:	e9 c0 fe ff ff       	jmp    c001ea4e <Vm::faultHandler(regs*)+0x9a>
c001eb8e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb91:	be 02 00 00 00       	mov    esi,0x2
c001eb96:	e9 b3 fe ff ff       	jmp    c001ea4e <Vm::faultHandler(regs*)+0x9a>
c001eb9b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb9e:	be 03 00 00 00       	mov    esi,0x3
c001eba3:	e9 a6 fe ff ff       	jmp    c001ea4e <Vm::faultHandler(regs*)+0x9a>
c001eba8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebab:	be 04 00 00 00       	mov    esi,0x4
c001ebb0:	e9 99 fe ff ff       	jmp    c001ea4e <Vm::faultHandler(regs*)+0x9a>
c001ebb5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebb8:	be 05 00 00 00       	mov    esi,0x5
c001ebbd:	e9 8c fe ff ff       	jmp    c001ea4e <Vm::faultHandler(regs*)+0x9a>
c001ebc2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebc5:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ebca:	e9 7f fe ff ff       	jmp    c001ea4e <Vm::faultHandler(regs*)+0x9a>
c001ebcf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebd2:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ebd7:	e9 72 fe ff ff       	jmp    c001ea4e <Vm::faultHandler(regs*)+0x9a>
c001ebdc:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ebdf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ebe3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ebe8:	74 30                	je     c001ec1a <Vm::faultHandler(regs*)+0x266>
c001ebea:	83 e9 04             	sub    ecx,0x4
c001ebed:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ebf3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ebf9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ebfc:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ebff:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ec05:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ec09:	0f 84 15 04 00 00    	je     c001f024 <Vm::faultHandler(regs*)+0x670>
c001ec0f:	80 ce 02             	or     dh,0x2
c001ec12:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ec15:	e9 0a 04 00 00       	jmp    c001f024 <Vm::faultHandler(regs*)+0x670>
c001ec1a:	83 e9 02             	sub    ecx,0x2
c001ec1d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ec23:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ec26:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ec2a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ec30:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ec34:	74 05                	je     c001ec3b <Vm::faultHandler(regs*)+0x287>
c001ec36:	80 ce 02             	or     dh,0x2
c001ec39:	eb 03                	jmp    c001ec3e <Vm::faultHandler(regs*)+0x28a>
c001ec3b:	80 e6 fd             	and    dh,0xfd
c001ec3e:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ec42:	e9 dd 03 00 00       	jmp    c001f024 <Vm::faultHandler(regs*)+0x670>
c001ec47:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec4c:	74 2a                	je     c001ec78 <Vm::faultHandler(regs*)+0x2c4>
c001ec4e:	8b 10                	mov    edx,DWORD PTR [eax]
c001ec50:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ec56:	81 ca 00 02 02 00    	or     edx,0x20200
c001ec5c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ec5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ec67:	c1 e8 09             	shr    eax,0x9
c001ec6a:	83 e0 01             	and    eax,0x1
c001ec6d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ec70:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ec73:	83 c0 04             	add    eax,0x4
c001ec76:	eb 25                	jmp    c001ec9d <Vm::faultHandler(regs*)+0x2e9>
c001ec78:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ec7b:	81 ca 00 02 02 00    	or     edx,0x20200
c001ec81:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ec84:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ec87:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ec8d:	66 c1 e8 09          	shr    ax,0x9
c001ec91:	83 e0 01             	and    eax,0x1
c001ec94:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ec97:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ec9a:	83 c0 02             	add    eax,0x2
c001ec9d:	25 ff ff 00 00       	and    eax,0xffff
c001eca2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eca5:	e9 7a 03 00 00       	jmp    c001f024 <Vm::faultHandler(regs*)+0x670>
c001ecaa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecae:	3c ee                	cmp    al,0xee
c001ecb0:	75 10                	jne    c001ecc2 <Vm::faultHandler(regs*)+0x30e>
c001ecb2:	83 ec 0c             	sub    esp,0xc
c001ecb5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ecb8:	e8 a2 f9 ff ff       	call   c001e65f <Vm::mainloop3(unsigned long)>
c001ecbd:	e9 4b 03 00 00       	jmp    c001f00d <Vm::faultHandler(regs*)+0x659>
c001ecc2:	83 ec 0c             	sub    esp,0xc
c001ecc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ecc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eccd:	51                   	push   ecx
c001ecce:	50                   	push   eax
c001eccf:	53                   	push   ebx
c001ecd0:	e8 e1 fb ff ff       	call   c001e8b6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ecd5:	83 c4 20             	add    esp,0x20
c001ecd8:	e9 4a 03 00 00       	jmp    c001f027 <Vm::faultHandler(regs*)+0x673>
c001ecdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ece2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ece6:	e9 39 03 00 00       	jmp    c001f024 <Vm::faultHandler(regs*)+0x670>
c001eceb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ecf0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ecf4:	e9 2b 03 00 00       	jmp    c001f024 <Vm::faultHandler(regs*)+0x670>
c001ecf9:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ecfc:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed01:	74 2b                	je     c001ed2e <Vm::faultHandler(regs*)+0x37a>
c001ed03:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ed0a:	76 22                	jbe    c001ed2e <Vm::faultHandler(regs*)+0x37a>
c001ed0c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed10:	50                   	push   eax
c001ed11:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed15:	50                   	push   eax
c001ed16:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed1a:	50                   	push   eax
c001ed1b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed1f:	50                   	push   eax
c001ed20:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed24:	50                   	push   eax
c001ed25:	6a 6c                	push   0x6c
c001ed27:	6a 6c                	push   0x6c
c001ed29:	e9 b9 01 00 00       	jmp    c001eee7 <Vm::faultHandler(regs*)+0x533>
c001ed2e:	83 ec 0c             	sub    esp,0xc
c001ed31:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed35:	0f b7 f6             	movzx  esi,si
c001ed38:	50                   	push   eax
c001ed39:	e8 71 f8 ff ff       	call   c001e5af <Vm::inbv(unsigned short)>
c001ed3e:	83 c4 0c             	add    esp,0xc
c001ed41:	0f b6 c0             	movzx  eax,al
c001ed44:	50                   	push   eax
c001ed45:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ed49:	50                   	push   eax
c001ed4a:	56                   	push   esi
c001ed4b:	e8 24 fc ff ff       	call   c001e974 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ed50:	83 c4 10             	add    esp,0x10
c001ed53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ed56:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed5a:	74 03                	je     c001ed5f <Vm::faultHandler(regs*)+0x3ab>
c001ed5c:	48                   	dec    eax
c001ed5d:	eb 01                	jmp    c001ed60 <Vm::faultHandler(regs*)+0x3ac>
c001ed5f:	40                   	inc    eax
c001ed60:	0f b7 c0             	movzx  eax,ax
c001ed63:	e9 8d 00 00 00       	jmp    c001edf5 <Vm::faultHandler(regs*)+0x441>
c001ed68:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ed6b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ed6e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed73:	74 29                	je     c001ed9e <Vm::faultHandler(regs*)+0x3ea>
c001ed75:	3d ff ff 00 00       	cmp    eax,0xffff
c001ed7a:	76 22                	jbe    c001ed9e <Vm::faultHandler(regs*)+0x3ea>
c001ed7c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed80:	50                   	push   eax
c001ed81:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed85:	50                   	push   eax
c001ed86:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed8a:	50                   	push   eax
c001ed8b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed8f:	50                   	push   eax
c001ed90:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed94:	50                   	push   eax
c001ed95:	6a 6d                	push   0x6d
c001ed97:	6a 6d                	push   0x6d
c001ed99:	e9 49 01 00 00       	jmp    c001eee7 <Vm::faultHandler(regs*)+0x533>
c001ed9e:	0f b7 c8             	movzx  ecx,ax
c001eda1:	0f b7 f6             	movzx  esi,si
c001eda4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eda7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edac:	74 20                	je     c001edce <Vm::faultHandler(regs*)+0x41a>
c001edae:	ed                   	in     eax,dx
c001edaf:	55                   	push   ebp
c001edb0:	50                   	push   eax
c001edb1:	51                   	push   ecx
c001edb2:	56                   	push   esi
c001edb3:	e8 e7 fb ff ff       	call   c001e99f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001edb8:	83 c4 10             	add    esp,0x10
c001edbb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001edbe:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001edc2:	74 05                	je     c001edc9 <Vm::faultHandler(regs*)+0x415>
c001edc4:	83 e8 04             	sub    eax,0x4
c001edc7:	eb 27                	jmp    c001edf0 <Vm::faultHandler(regs*)+0x43c>
c001edc9:	83 c0 04             	add    eax,0x4
c001edcc:	eb 22                	jmp    c001edf0 <Vm::faultHandler(regs*)+0x43c>
c001edce:	66 ed                	in     ax,dx
c001edd0:	0f b7 c0             	movzx  eax,ax
c001edd3:	57                   	push   edi
c001edd4:	50                   	push   eax
c001edd5:	51                   	push   ecx
c001edd6:	56                   	push   esi
c001edd7:	e8 ad fb ff ff       	call   c001e989 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001eddc:	83 c4 10             	add    esp,0x10
c001eddf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ede2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ede6:	74 05                	je     c001eded <Vm::faultHandler(regs*)+0x439>
c001ede8:	83 e8 02             	sub    eax,0x2
c001edeb:	eb 03                	jmp    c001edf0 <Vm::faultHandler(regs*)+0x43c>
c001eded:	83 c0 02             	add    eax,0x2
c001edf0:	25 ff ff 00 00       	and    eax,0xffff
c001edf5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001edf8:	e9 27 02 00 00       	jmp    c001f024 <Vm::faultHandler(regs*)+0x670>
c001edfd:	8d 46 ff             	lea    eax,[esi-0x1]
c001ee00:	3c 05                	cmp    al,0x5
c001ee02:	77 24                	ja     c001ee28 <Vm::faultHandler(regs*)+0x474>
c001ee04:	0f b6 c0             	movzx  eax,al
c001ee07:	ff 24 85 24 c1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3edc]
c001ee0e:	0f b7 fd             	movzx  edi,bp
c001ee11:	eb 15                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x474>
c001ee13:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ee17:	eb 0f                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x474>
c001ee19:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ee1d:	eb 09                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x474>
c001ee1f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ee23:	eb 03                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x474>
c001ee25:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ee28:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ee2b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ee30:	74 29                	je     c001ee5b <Vm::faultHandler(regs*)+0x4a7>
c001ee32:	3d ff ff 00 00       	cmp    eax,0xffff
c001ee37:	76 22                	jbe    c001ee5b <Vm::faultHandler(regs*)+0x4a7>
c001ee39:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ee3d:	50                   	push   eax
c001ee3e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ee42:	50                   	push   eax
c001ee43:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ee47:	50                   	push   eax
c001ee48:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ee4c:	50                   	push   eax
c001ee4d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee51:	50                   	push   eax
c001ee52:	6a 6e                	push   0x6e
c001ee54:	6a 6e                	push   0x6e
c001ee56:	e9 8c 00 00 00       	jmp    c001eee7 <Vm::faultHandler(regs*)+0x533>
c001ee5b:	0f b7 c0             	movzx  eax,ax
c001ee5e:	52                   	push   edx
c001ee5f:	52                   	push   edx
c001ee60:	50                   	push   eax
c001ee61:	57                   	push   edi
c001ee62:	e8 d9 fa ff ff       	call   c001e940 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ee67:	59                   	pop    ecx
c001ee68:	0f b6 c0             	movzx  eax,al
c001ee6b:	5e                   	pop    esi
c001ee6c:	50                   	push   eax
c001ee6d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee71:	50                   	push   eax
c001ee72:	e8 4b f7 ff ff       	call   c001e5c2 <Vm::outbv(unsigned short, unsigned char)>
c001ee77:	83 c4 10             	add    esp,0x10
c001ee7a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ee7d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ee81:	74 03                	je     c001ee86 <Vm::faultHandler(regs*)+0x4d2>
c001ee83:	48                   	dec    eax
c001ee84:	eb 01                	jmp    c001ee87 <Vm::faultHandler(regs*)+0x4d3>
c001ee86:	40                   	inc    eax
c001ee87:	0f b7 c0             	movzx  eax,ax
c001ee8a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ee8d:	e9 92 01 00 00       	jmp    c001f024 <Vm::faultHandler(regs*)+0x670>
c001ee92:	8d 46 ff             	lea    eax,[esi-0x1]
c001ee95:	3c 05                	cmp    al,0x5
c001ee97:	77 1f                	ja     c001eeb8 <Vm::faultHandler(regs*)+0x504>
c001ee99:	0f b6 c0             	movzx  eax,al
c001ee9c:	ff 24 85 3c c1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3ec4]
c001eea3:	89 ef                	mov    edi,ebp
c001eea5:	eb 11                	jmp    c001eeb8 <Vm::faultHandler(regs*)+0x504>
c001eea7:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001eeaa:	eb 0c                	jmp    c001eeb8 <Vm::faultHandler(regs*)+0x504>
c001eeac:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001eeaf:	eb 07                	jmp    c001eeb8 <Vm::faultHandler(regs*)+0x504>
c001eeb1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001eeb4:	eb 02                	jmp    c001eeb8 <Vm::faultHandler(regs*)+0x504>
c001eeb6:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001eeb8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001eebb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eec0:	74 37                	je     c001eef9 <Vm::faultHandler(regs*)+0x545>
c001eec2:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001eec8:	76 2f                	jbe    c001eef9 <Vm::faultHandler(regs*)+0x545>
c001eeca:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eece:	50                   	push   eax
c001eecf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eed3:	50                   	push   eax
c001eed4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eed8:	50                   	push   eax
c001eed9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eedd:	50                   	push   eax
c001eede:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eee2:	50                   	push   eax
c001eee3:	6a 6f                	push   0x6f
c001eee5:	6a 6f                	push   0x6f
c001eee7:	68 ca c0 02 c0       	push   0xc002c0ca
c001eeec:	e8 ac 38 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001eef1:	83 c4 20             	add    esp,0x20
c001eef4:	e9 86 01 00 00       	jmp    c001f07f <Vm::faultHandler(regs*)+0x6cb>
c001eef9:	0f b7 d7             	movzx  edx,di
c001eefc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001eeff:	0f b7 c6             	movzx  eax,si
c001ef02:	81 e1 00 04 00 00    	and    ecx,0x400
c001ef08:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ef0b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef10:	74 1d                	je     c001ef2f <Vm::faultHandler(regs*)+0x57b>
c001ef12:	55                   	push   ebp
c001ef13:	55                   	push   ebp
c001ef14:	50                   	push   eax
c001ef15:	52                   	push   edx
c001ef16:	e8 48 fa ff ff       	call   c001e963 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ef1b:	83 c4 10             	add    esp,0x10
c001ef1e:	89 fa                	mov    edx,edi
c001ef20:	ef                   	out    dx,eax
c001ef21:	85 c9                	test   ecx,ecx
c001ef23:	74 05                	je     c001ef2a <Vm::faultHandler(regs*)+0x576>
c001ef25:	83 ee 04             	sub    esi,0x4
c001ef28:	eb 21                	jmp    c001ef4b <Vm::faultHandler(regs*)+0x597>
c001ef2a:	83 c6 04             	add    esi,0x4
c001ef2d:	eb 1c                	jmp    c001ef4b <Vm::faultHandler(regs*)+0x597>
c001ef2f:	55                   	push   ebp
c001ef30:	55                   	push   ebp
c001ef31:	50                   	push   eax
c001ef32:	52                   	push   edx
c001ef33:	e8 19 fa ff ff       	call   c001e951 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ef38:	83 c4 10             	add    esp,0x10
c001ef3b:	89 fa                	mov    edx,edi
c001ef3d:	66 ef                	out    dx,ax
c001ef3f:	85 c9                	test   ecx,ecx
c001ef41:	74 05                	je     c001ef48 <Vm::faultHandler(regs*)+0x594>
c001ef43:	83 ee 02             	sub    esi,0x2
c001ef46:	eb 03                	jmp    c001ef4b <Vm::faultHandler(regs*)+0x597>
c001ef48:	83 c6 02             	add    esi,0x2
c001ef4b:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ef51:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ef54:	e9 cb 00 00 00       	jmp    c001f024 <Vm::faultHandler(regs*)+0x670>
c001ef59:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ef60:	83 ec 0c             	sub    esp,0xc
c001ef63:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef67:	50                   	push   eax
c001ef68:	e8 42 f6 ff ff       	call   c001e5af <Vm::inbv(unsigned short)>
c001ef6d:	0f b6 c0             	movzx  eax,al
c001ef70:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ef73:	eb 3f                	jmp    c001efb4 <Vm::faultHandler(regs*)+0x600>
c001ef75:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef7a:	74 07                	je     c001ef83 <Vm::faultHandler(regs*)+0x5cf>
c001ef7c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ef80:	ed                   	in     eax,dx
c001ef81:	eb 14                	jmp    c001ef97 <Vm::faultHandler(regs*)+0x5e3>
c001ef83:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ef86:	66 31 f6             	xor    si,si
c001ef89:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ef8c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ef90:	66 ed                	in     ax,dx
c001ef92:	0f b7 c0             	movzx  eax,ax
c001ef95:	09 f0                	or     eax,esi
c001ef97:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ef9a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef9e:	e9 84 00 00 00       	jmp    c001f027 <Vm::faultHandler(regs*)+0x673>
c001efa3:	52                   	push   edx
c001efa4:	52                   	push   edx
c001efa5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001efa9:	50                   	push   eax
c001efaa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001efae:	50                   	push   eax
c001efaf:	e8 0e f6 ff ff       	call   c001e5c2 <Vm::outbv(unsigned short, unsigned char)>
c001efb4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001efb8:	eb 53                	jmp    c001f00d <Vm::faultHandler(regs*)+0x659>
c001efba:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001efbd:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001efc1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001efc6:	74 03                	je     c001efcb <Vm::faultHandler(regs*)+0x617>
c001efc8:	ef                   	out    dx,eax
c001efc9:	eb cf                	jmp    c001ef9a <Vm::faultHandler(regs*)+0x5e6>
c001efcb:	66 ef                	out    dx,ax
c001efcd:	eb cb                	jmp    c001ef9a <Vm::faultHandler(regs*)+0x5e6>
c001efcf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001efd6:	83 ec 0c             	sub    esp,0xc
c001efd9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001efdd:	50                   	push   eax
c001efde:	e8 cc f5 ff ff       	call   c001e5af <Vm::inbv(unsigned short)>
c001efe3:	0f b6 c0             	movzx  eax,al
c001efe6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001efe9:	eb 1f                	jmp    c001f00a <Vm::faultHandler(regs*)+0x656>
c001efeb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001efee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eff3:	74 03                	je     c001eff8 <Vm::faultHandler(regs*)+0x644>
c001eff5:	ed                   	in     eax,dx
c001eff6:	eb 0d                	jmp    c001f005 <Vm::faultHandler(regs*)+0x651>
c001eff8:	66 ed                	in     ax,dx
c001effa:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001effd:	0f b7 c0             	movzx  eax,ax
c001f000:	66 31 d2             	xor    dx,dx
c001f003:	09 d0                	or     eax,edx
c001f005:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f008:	eb 1a                	jmp    c001f024 <Vm::faultHandler(regs*)+0x670>
c001f00a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f00d:	83 c4 10             	add    esp,0x10
c001f010:	eb 15                	jmp    c001f027 <Vm::faultHandler(regs*)+0x673>
c001f012:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f015:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f018:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f01d:	74 03                	je     c001f022 <Vm::faultHandler(regs*)+0x66e>
c001f01f:	ef                   	out    dx,eax
c001f020:	eb 02                	jmp    c001f024 <Vm::faultHandler(regs*)+0x670>
c001f022:	66 ef                	out    dx,ax
c001f024:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f027:	b0 01                	mov    al,0x1
c001f029:	eb 56                	jmp    c001f081 <Vm::faultHandler(regs*)+0x6cd>
c001f02b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f02f:	50                   	push   eax
c001f030:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f034:	50                   	push   eax
c001f035:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f039:	50                   	push   eax
c001f03a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f03e:	50                   	push   eax
c001f03f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f043:	50                   	push   eax
c001f044:	52                   	push   edx
c001f045:	52                   	push   edx
c001f046:	68 f7 c0 02 c0       	push   0xc002c0f7
c001f04b:	e8 4d 37 ff ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c001f050:	83 c4 20             	add    esp,0x20
c001f053:	83 ec 0c             	sub    esp,0xc
c001f056:	6a 60                	push   0x60
c001f058:	e8 52 f5 ff ff       	call   c001e5af <Vm::inbv(unsigned short)>
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	3c 1c                	cmp    al,0x1c
c001f062:	74 04                	je     c001f068 <Vm::faultHandler(regs*)+0x6b4>
c001f064:	3c 5a                	cmp    al,0x5a
c001f066:	75 eb                	jne    c001f053 <Vm::faultHandler(regs*)+0x69f>
c001f068:	3c 5a                	cmp    al,0x5a
c001f06a:	74 04                	je     c001f070 <Vm::faultHandler(regs*)+0x6bc>
c001f06c:	3c 1c                	cmp    al,0x1c
c001f06e:	75 0f                	jne    c001f07f <Vm::faultHandler(regs*)+0x6cb>
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	6a 60                	push   0x60
c001f075:	e8 35 f5 ff ff       	call   c001e5af <Vm::inbv(unsigned short)>
c001f07a:	83 c4 10             	add    esp,0x10
c001f07d:	eb e9                	jmp    c001f068 <Vm::faultHandler(regs*)+0x6b4>
c001f07f:	31 c0                	xor    eax,eax
c001f081:	83 c4 1c             	add    esp,0x1c
c001f084:	5b                   	pop    ebx
c001f085:	5e                   	pop    esi
c001f086:	5f                   	pop    edi
c001f087:	5d                   	pop    ebp
c001f088:	c3                   	ret    

c001f089 <Vm::fpuInternalTo32(unsigned long long)>:
c001f089:	57                   	push   edi
c001f08a:	56                   	push   esi
c001f08b:	53                   	push   ebx
c001f08c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f094:	89 d6                	mov    esi,edx
c001f096:	89 d7                	mov    edi,edx
c001f098:	89 c1                	mov    ecx,eax
c001f09a:	c1 ef 14             	shr    edi,0x14
c001f09d:	89 d3                	mov    ebx,edx
c001f09f:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f0a5:	31 d2                	xor    edx,edx
c001f0a7:	89 f8                	mov    eax,edi
c001f0a9:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f0af:	bf ff 00 00 00       	mov    edi,0xff
c001f0b4:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f0b9:	83 d2 ff             	adc    edx,0xffffffff
c001f0bc:	39 c7                	cmp    edi,eax
c001f0be:	bf 00 00 00 00       	mov    edi,0x0
c001f0c3:	19 d7                	sbb    edi,edx
c001f0c5:	72 15                	jb     c001f0dc <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f0c7:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f0cb:	c1 e0 17             	shl    eax,0x17
c001f0ce:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f0d4:	09 f1                	or     ecx,esi
c001f0d6:	09 c1                	or     ecx,eax
c001f0d8:	89 cf                	mov    edi,ecx
c001f0da:	eb 02                	jmp    c001f0de <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f0dc:	31 ff                	xor    edi,edi
c001f0de:	89 f8                	mov    eax,edi
c001f0e0:	5b                   	pop    ebx
c001f0e1:	5e                   	pop    esi
c001f0e2:	5f                   	pop    edi
c001f0e3:	c3                   	ret    

c001f0e4 <Vm::fpuInternalTo64(unsigned long long)>:
c001f0e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0ec:	c3                   	ret    

c001f0ed <Vm::fpu32ToInternal(unsigned int)>:
c001f0ed:	57                   	push   edi
c001f0ee:	31 ff                	xor    edi,edi
c001f0f0:	56                   	push   esi
c001f0f1:	53                   	push   ebx
c001f0f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0f6:	89 cb                	mov    ebx,ecx
c001f0f8:	89 ce                	mov    esi,ecx
c001f0fa:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f100:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f106:	c1 e9 17             	shr    ecx,0x17
c001f109:	89 f0                	mov    eax,esi
c001f10b:	0f b6 d1             	movzx  edx,cl
c001f10e:	81 c2 80 03 00 00    	add    edx,0x380
c001f114:	89 d1                	mov    ecx,edx
c001f116:	89 fa                	mov    edx,edi
c001f118:	c1 e1 14             	shl    ecx,0x14
c001f11b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f11f:	c1 e0 1d             	shl    eax,0x1d
c001f122:	89 d7                	mov    edi,edx
c001f124:	89 c6                	mov    esi,eax
c001f126:	89 ca                	mov    edx,ecx
c001f128:	89 f0                	mov    eax,esi
c001f12a:	09 fa                	or     edx,edi
c001f12c:	09 da                	or     edx,ebx
c001f12e:	5b                   	pop    ebx
c001f12f:	5e                   	pop    esi
c001f130:	5f                   	pop    edi
c001f131:	c3                   	ret    

c001f132 <Vm::fpu64ToInternal(unsigned long long)>:
c001f132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f136:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f13a:	c3                   	ret    

c001f13b <Vm::fpuFloatToLong(unsigned long long)>:
c001f13b:	57                   	push   edi
c001f13c:	31 c0                	xor    eax,eax
c001f13e:	56                   	push   esi
c001f13f:	31 d2                	xor    edx,edx
c001f141:	53                   	push   ebx
c001f142:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f146:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f14a:	89 d9                	mov    ecx,ebx
c001f14c:	c1 e9 14             	shr    ecx,0x14
c001f14f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f155:	89 cf                	mov    edi,ecx
c001f157:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f15d:	78 33                	js     c001f192 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f15f:	89 d9                	mov    ecx,ebx
c001f161:	89 f0                	mov    eax,esi
c001f163:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f169:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f16f:	89 ca                	mov    edx,ecx
c001f171:	b9 34 00 00 00       	mov    ecx,0x34
c001f176:	29 f9                	sub    ecx,edi
c001f178:	0f ad d0             	shrd   eax,edx,cl
c001f17b:	d3 fa                	sar    edx,cl
c001f17d:	f6 c1 20             	test   cl,0x20
c001f180:	74 05                	je     c001f187 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f182:	89 d0                	mov    eax,edx
c001f184:	c1 fa 1f             	sar    edx,0x1f
c001f187:	85 db                	test   ebx,ebx
c001f189:	79 07                	jns    c001f192 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f18b:	f7 d8                	neg    eax
c001f18d:	83 d2 00             	adc    edx,0x0
c001f190:	f7 da                	neg    edx
c001f192:	5b                   	pop    ebx
c001f193:	5e                   	pop    esi
c001f194:	5f                   	pop    edi
c001f195:	c3                   	ret    

c001f196 <Vm::fpuULongToFloat(unsigned long long)>:
c001f196:	57                   	push   edi
c001f197:	31 c9                	xor    ecx,ecx
c001f199:	56                   	push   esi
c001f19a:	53                   	push   ebx
c001f19b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f19f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f1a3:	0f ba e7 14          	bt     edi,0x14
c001f1a7:	72 07                	jb     c001f1b0 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f1a9:	01 f6                	add    esi,esi
c001f1ab:	11 ff                	adc    edi,edi
c001f1ad:	41                   	inc    ecx
c001f1ae:	eb f3                	jmp    c001f1a3 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f1b0:	89 fa                	mov    edx,edi
c001f1b2:	89 f0                	mov    eax,esi
c001f1b4:	bb 33 04 00 00       	mov    ebx,0x433
c001f1b9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f1bf:	29 cb                	sub    ebx,ecx
c001f1c1:	89 d9                	mov    ecx,ebx
c001f1c3:	5b                   	pop    ebx
c001f1c4:	c1 e1 14             	shl    ecx,0x14
c001f1c7:	5e                   	pop    esi
c001f1c8:	09 ca                	or     edx,ecx
c001f1ca:	5f                   	pop    edi
c001f1cb:	c3                   	ret    

c001f1cc <Vm::fpuLongToFloat(long long)>:
c001f1cc:	56                   	push   esi
c001f1cd:	31 c0                	xor    eax,eax
c001f1cf:	53                   	push   ebx
c001f1d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f1d8:	39 c8                	cmp    eax,ecx
c001f1da:	19 d8                	sbb    eax,ebx
c001f1dc:	7d 04                	jge    c001f1e2 <Vm::fpuLongToFloat(long long)+0x16>
c001f1de:	31 f6                	xor    esi,esi
c001f1e0:	eb 0c                	jmp    c001f1ee <Vm::fpuLongToFloat(long long)+0x22>
c001f1e2:	f7 d9                	neg    ecx
c001f1e4:	be 01 00 00 00       	mov    esi,0x1
c001f1e9:	83 d3 00             	adc    ebx,0x0
c001f1ec:	f7 db                	neg    ebx
c001f1ee:	31 c0                	xor    eax,eax
c001f1f0:	0f ba e3 14          	bt     ebx,0x14
c001f1f4:	72 07                	jb     c001f1fd <Vm::fpuLongToFloat(long long)+0x31>
c001f1f6:	01 c9                	add    ecx,ecx
c001f1f8:	11 db                	adc    ebx,ebx
c001f1fa:	40                   	inc    eax
c001f1fb:	eb f3                	jmp    c001f1f0 <Vm::fpuLongToFloat(long long)+0x24>
c001f1fd:	ba 33 04 00 00       	mov    edx,0x433
c001f202:	29 c2                	sub    edx,eax
c001f204:	89 c8                	mov    eax,ecx
c001f206:	c1 e2 14             	shl    edx,0x14
c001f209:	89 d9                	mov    ecx,ebx
c001f20b:	89 f3                	mov    ebx,esi
c001f20d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f213:	09 ca                	or     edx,ecx
c001f215:	84 db                	test   bl,bl
c001f217:	74 06                	je     c001f21f <Vm::fpuLongToFloat(long long)+0x53>
c001f219:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f21f:	5b                   	pop    ebx
c001f220:	5e                   	pop    esi
c001f221:	c3                   	ret    

c001f222 <Vm::fpuGet0()>:
c001f222:	31 c0                	xor    eax,eax
c001f224:	31 d2                	xor    edx,edx
c001f226:	c3                   	ret    

c001f227 <Vm::fpuGet1()>:
c001f227:	b8 01 00 00 00       	mov    eax,0x1
c001f22c:	31 d2                	xor    edx,edx
c001f22e:	c3                   	ret    

c001f22f <Vm::fpuGetPi()>:
c001f22f:	b8 03 00 00 00       	mov    eax,0x3
c001f234:	31 d2                	xor    edx,edx
c001f236:	c3                   	ret    

c001f237 <Vm::fpuGetLog2E()>:
c001f237:	83 ec 18             	sub    esp,0x18
c001f23a:	68 54 c1 02 c0       	push   0xc002c154
c001f23f:	e8 35 ad ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001f244:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f249:	31 d2                	xor    edx,edx
c001f24b:	83 c4 1c             	add    esp,0x1c
c001f24e:	c3                   	ret    

c001f24f <Vm::fpuGetLogE2()>:
c001f24f:	83 ec 18             	sub    esp,0x18
c001f252:	68 60 c1 02 c0       	push   0xc002c160
c001f257:	e8 1d ad ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001f25c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f261:	31 d2                	xor    edx,edx
c001f263:	83 c4 1c             	add    esp,0x1c
c001f266:	c3                   	ret    

c001f267 <Vm::fpuGetLog210()>:
c001f267:	83 ec 18             	sub    esp,0x18
c001f26a:	68 6c c1 02 c0       	push   0xc002c16c
c001f26f:	e8 05 ad ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001f274:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f279:	31 d2                	xor    edx,edx
c001f27b:	83 c4 1c             	add    esp,0x1c
c001f27e:	c3                   	ret    

c001f27f <Vm::fpuGetLog102()>:
c001f27f:	83 ec 18             	sub    esp,0x18
c001f282:	68 79 c1 02 c0       	push   0xc002c179
c001f287:	e8 ed ac ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001f28c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f291:	31 d2                	xor    edx,edx
c001f293:	83 c4 1c             	add    esp,0x1c
c001f296:	c3                   	ret    

c001f297 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f297:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f29b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f29f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2a3:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f2a7:	0f 92 c0             	setb   al
c001f2aa:	c3                   	ret    

c001f2ab <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f2ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f2af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b3:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f2b7:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f2bb:	09 c2                	or     edx,eax
c001f2bd:	0f 94 c0             	sete   al
c001f2c0:	c3                   	ret    

c001f2c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f2c1:	57                   	push   edi
c001f2c2:	56                   	push   esi
c001f2c3:	53                   	push   ebx
c001f2c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f2cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f2d0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f2d4:	57                   	push   edi
c001f2d5:	56                   	push   esi
c001f2d6:	53                   	push   ebx
c001f2d7:	51                   	push   ecx
c001f2d8:	e8 ce ff ff ff       	call   c001f2ab <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f2dd:	83 c4 10             	add    esp,0x10
c001f2e0:	88 c2                	mov    dl,al
c001f2e2:	31 c0                	xor    eax,eax
c001f2e4:	84 d2                	test   dl,dl
c001f2e6:	75 0c                	jne    c001f2f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f2e8:	57                   	push   edi
c001f2e9:	56                   	push   esi
c001f2ea:	53                   	push   ebx
c001f2eb:	51                   	push   ecx
c001f2ec:	e8 a6 ff ff ff       	call   c001f297 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f2f1:	83 c4 10             	add    esp,0x10
c001f2f4:	83 e0 01             	and    eax,0x1
c001f2f7:	5b                   	pop    ebx
c001f2f8:	88 c1                	mov    cl,al
c001f2fa:	83 e2 01             	and    edx,0x1
c001f2fd:	a0 21 f3 02 c0       	mov    al,ds:0xc002f321
c001f302:	c1 e2 06             	shl    edx,0x6
c001f305:	83 e0 ba             	and    eax,0xffffffba
c001f308:	5e                   	pop    esi
c001f309:	09 c8                	or     eax,ecx
c001f30b:	5f                   	pop    edi
c001f30c:	09 d0                	or     eax,edx
c001f30e:	a2 21 f3 02 c0       	mov    ds:0xc002f321,al
c001f313:	c3                   	ret    

c001f314 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f318:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f31c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f320:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f324:	c3                   	ret    

c001f325 <Vm::fpuAbs(unsigned long long)>:
c001f325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f329:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f32d:	c3                   	ret    

c001f32e <Vm::fpuChs(unsigned long long)>:
c001f32e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f336:	f7 d8                	neg    eax
c001f338:	83 d2 00             	adc    edx,0x0
c001f33b:	f7 da                	neg    edx
c001f33d:	c3                   	ret    

c001f33e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f33e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f342:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f347:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f34b:	eb c7                	jmp    c001f314 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f34d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f34d:	53                   	push   ebx
c001f34e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f35a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f35e:	0f af ca             	imul   ecx,edx
c001f361:	0f af d8             	imul   ebx,eax
c001f364:	f7 e2                	mul    edx
c001f366:	01 d9                	add    ecx,ebx
c001f368:	5b                   	pop    ebx
c001f369:	01 ca                	add    edx,ecx
c001f36b:	c3                   	ret    

c001f36c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f36c:	83 ec 0c             	sub    esp,0xc
c001f36f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f377:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f37b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f37f:	e8 60 75 00 00       	call   c00268e4 <__udivdi3>
c001f384:	83 c4 1c             	add    esp,0x1c
c001f387:	c3                   	ret    

c001f388 <Vm::fpuSquare(unsigned long long)>:
c001f388:	50                   	push   eax
c001f389:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f38d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f391:	52                   	push   edx
c001f392:	50                   	push   eax
c001f393:	52                   	push   edx
c001f394:	50                   	push   eax
c001f395:	e8 b3 ff ff ff       	call   c001f34d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f39a:	83 c4 14             	add    esp,0x14
c001f39d:	c3                   	ret    

c001f39e <Vm::fpuGetReg(int)>:
c001f39e:	83 ec 0c             	sub    esp,0xc
c001f3a1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f3a6:	76 10                	jbe    c001f3b8 <Vm::fpuGetReg(int)+0x1a>
c001f3a8:	83 ec 0c             	sub    esp,0xc
c001f3ab:	68 86 c1 02 c0       	push   0xc002c186
c001f3b0:	e8 c4 ab ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001f3b5:	83 c4 10             	add    esp,0x10
c001f3b8:	a0 21 f3 02 c0       	mov    al,ds:0xc002f321
c001f3bd:	b9 08 00 00 00       	mov    ecx,0x8
c001f3c2:	c0 e8 03             	shr    al,0x3
c001f3c5:	83 e0 07             	and    eax,0x7
c001f3c8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f3cc:	99                   	cdq    
c001f3cd:	f7 f9                	idiv   ecx
c001f3cf:	8b 04 d5 24 f3 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd0cdc]
c001f3d6:	8b 14 d5 28 f3 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd0cd8]
c001f3dd:	83 c4 0c             	add    esp,0xc
c001f3e0:	c3                   	ret    

c001f3e1 <Vm::fpuSetReg(int, unsigned long long)>:
c001f3e1:	57                   	push   edi
c001f3e2:	56                   	push   esi
c001f3e3:	52                   	push   edx
c001f3e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f3e8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f3ec:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f3f1:	76 10                	jbe    c001f403 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f3f3:	83 ec 0c             	sub    esp,0xc
c001f3f6:	68 99 c1 02 c0       	push   0xc002c199
c001f3fb:	e8 79 ab ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c001f400:	83 c4 10             	add    esp,0x10
c001f403:	a0 21 f3 02 c0       	mov    al,ds:0xc002f321
c001f408:	b9 08 00 00 00       	mov    ecx,0x8
c001f40d:	c0 e8 03             	shr    al,0x3
c001f410:	83 e0 07             	and    eax,0x7
c001f413:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f417:	99                   	cdq    
c001f418:	f7 f9                	idiv   ecx
c001f41a:	89 34 d5 24 f3 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0cdc],esi
c001f421:	89 3c d5 28 f3 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0cd8],edi
c001f428:	58                   	pop    eax
c001f429:	5e                   	pop    esi
c001f42a:	5f                   	pop    edi
c001f42b:	c3                   	ret    

c001f42c <Vm::fpuPush(unsigned long long)>:
c001f42c:	a0 21 f3 02 c0       	mov    al,ds:0xc002f321
c001f431:	c0 e8 03             	shr    al,0x3
c001f434:	83 e0 07             	and    eax,0x7
c001f437:	83 c0 07             	add    eax,0x7
c001f43a:	88 c2                	mov    dl,al
c001f43c:	83 e0 07             	and    eax,0x7
c001f43f:	83 e2 07             	and    edx,0x7
c001f442:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f449:	8a 15 21 f3 02 c0    	mov    dl,BYTE PTR ds:0xc002f321
c001f44f:	83 e2 c7             	and    edx,0xffffffc7
c001f452:	09 ca                	or     edx,ecx
c001f454:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f458:	88 15 21 f3 02 c0    	mov    BYTE PTR ds:0xc002f321,dl
c001f45e:	89 0c c5 28 f3 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0cd8],ecx
c001f465:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f469:	89 14 c5 24 f3 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0cdc],edx
c001f470:	a1 64 f3 02 c0       	mov    eax,ds:0xc002f364
c001f475:	83 f8 08             	cmp    eax,0x8
c001f478:	75 08                	jne    c001f482 <Vm::fpuPush(unsigned long long)+0x56>
c001f47a:	80 0d 20 f3 02 c0 40 	or     BYTE PTR ds:0xc002f320,0x40
c001f481:	c3                   	ret    
c001f482:	40                   	inc    eax
c001f483:	a3 64 f3 02 c0       	mov    ds:0xc002f364,eax
c001f488:	c3                   	ret    

c001f489 <Vm::fpuPop()>:
c001f489:	8a 0d 21 f3 02 c0    	mov    cl,BYTE PTR ds:0xc002f321
c001f48f:	53                   	push   ebx
c001f490:	c0 e9 03             	shr    cl,0x3
c001f493:	8a 1d 21 f3 02 c0    	mov    bl,BYTE PTR ds:0xc002f321
c001f499:	83 e1 07             	and    ecx,0x7
c001f49c:	83 e3 c7             	and    ebx,0xffffffc7
c001f49f:	8b 04 cd 24 f3 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd0cdc]
c001f4a6:	8b 14 cd 28 f3 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd0cd8]
c001f4ad:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f4b4:	83 e1 38             	and    ecx,0x38
c001f4b7:	09 d9                	or     ecx,ebx
c001f4b9:	88 0d 21 f3 02 c0    	mov    BYTE PTR ds:0xc002f321,cl
c001f4bf:	8b 0d 64 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f364
c001f4c5:	85 c9                	test   ecx,ecx
c001f4c7:	74 09                	je     c001f4d2 <Vm::fpuPop()+0x49>
c001f4c9:	49                   	dec    ecx
c001f4ca:	89 0d 64 f3 02 c0    	mov    DWORD PTR ds:0xc002f364,ecx
c001f4d0:	eb 07                	jmp    c001f4d9 <Vm::fpuPop()+0x50>
c001f4d2:	80 0d 20 f3 02 c0 40 	or     BYTE PTR ds:0xc002f320,0x40
c001f4d9:	5b                   	pop    ebx
c001f4da:	c3                   	ret    

c001f4db <Vm::x87Handler(regs*)>:
c001f4db:	55                   	push   ebp
c001f4dc:	57                   	push   edi
c001f4dd:	56                   	push   esi
c001f4de:	53                   	push   ebx
c001f4df:	83 ec 1c             	sub    esp,0x1c
c001f4e2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f4e6:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f4eb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f4ee:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f4f6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f4fa:	50                   	push   eax
c001f4fb:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f4ff:	50                   	push   eax
c001f500:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f504:	50                   	push   eax
c001f505:	53                   	push   ebx
c001f506:	e8 87 a1 ff ff       	call   c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f50b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f50e:	83 c4 10             	add    esp,0x10
c001f511:	89 c6                	mov    esi,eax
c001f513:	80 fa d9             	cmp    dl,0xd9
c001f516:	0f 85 52 01 00 00    	jne    c001f66e <Vm::x87Handler(regs*)+0x193>
c001f51c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f520:	8d 50 20             	lea    edx,[eax+0x20]
c001f523:	80 fa 0e             	cmp    dl,0xe
c001f526:	0f 87 86 00 00 00    	ja     c001f5b2 <Vm::x87Handler(regs*)+0xd7>
c001f52c:	0f b6 d2             	movzx  edx,dl
c001f52f:	ff 24 95 ac c1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3e54]
c001f536:	e8 e7 fc ff ff       	call   c001f222 <Vm::fpuGet0()>
c001f53b:	eb 05                	jmp    c001f542 <Vm::x87Handler(regs*)+0x67>
c001f53d:	e8 e5 fc ff ff       	call   c001f227 <Vm::fpuGet1()>
c001f542:	57                   	push   edi
c001f543:	57                   	push   edi
c001f544:	52                   	push   edx
c001f545:	50                   	push   eax
c001f546:	e8 e1 fe ff ff       	call   c001f42c <Vm::fpuPush(unsigned long long)>
c001f54b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f54f:	83 c4 10             	add    esp,0x10
c001f552:	b0 01                	mov    al,0x1
c001f554:	e9 e3 09 00 00       	jmp    c001ff3c <Vm::x87Handler(regs*)+0xa61>
c001f559:	83 ec 0c             	sub    esp,0xc
c001f55c:	6a 00                	push   0x0
c001f55e:	e8 3b fe ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f563:	59                   	pop    ecx
c001f564:	5e                   	pop    esi
c001f565:	52                   	push   edx
c001f566:	50                   	push   eax
c001f567:	e8 c2 fd ff ff       	call   c001f32e <Vm::fpuChs(unsigned long long)>
c001f56c:	eb 13                	jmp    c001f581 <Vm::x87Handler(regs*)+0xa6>
c001f56e:	83 ec 0c             	sub    esp,0xc
c001f571:	6a 00                	push   0x0
c001f573:	e8 26 fe ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f578:	5f                   	pop    edi
c001f579:	5d                   	pop    ebp
c001f57a:	52                   	push   edx
c001f57b:	50                   	push   eax
c001f57c:	e8 a4 fd ff ff       	call   c001f325 <Vm::fpuAbs(unsigned long long)>
c001f581:	83 c4 0c             	add    esp,0xc
c001f584:	52                   	push   edx
c001f585:	50                   	push   eax
c001f586:	6a 00                	push   0x0
c001f588:	e8 54 fe ff ff       	call   c001f3e1 <Vm::fpuSetReg(int, unsigned long long)>
c001f58d:	eb bc                	jmp    c001f54b <Vm::x87Handler(regs*)+0x70>
c001f58f:	e8 d3 fc ff ff       	call   c001f267 <Vm::fpuGetLog210()>
c001f594:	eb ac                	jmp    c001f542 <Vm::x87Handler(regs*)+0x67>
c001f596:	e8 9c fc ff ff       	call   c001f237 <Vm::fpuGetLog2E()>
c001f59b:	eb a5                	jmp    c001f542 <Vm::x87Handler(regs*)+0x67>
c001f59d:	e8 8d fc ff ff       	call   c001f22f <Vm::fpuGetPi()>
c001f5a2:	eb 9e                	jmp    c001f542 <Vm::x87Handler(regs*)+0x67>
c001f5a4:	e8 d6 fc ff ff       	call   c001f27f <Vm::fpuGetLog102()>
c001f5a9:	eb 97                	jmp    c001f542 <Vm::x87Handler(regs*)+0x67>
c001f5ab:	e8 9f fc ff ff       	call   c001f24f <Vm::fpuGetLogE2()>
c001f5b0:	eb 90                	jmp    c001f542 <Vm::x87Handler(regs*)+0x67>
c001f5b2:	8d 50 40             	lea    edx,[eax+0x40]
c001f5b5:	80 fa 07             	cmp    dl,0x7
c001f5b8:	77 15                	ja     c001f5cf <Vm::x87Handler(regs*)+0xf4>
c001f5ba:	83 ec 0c             	sub    esp,0xc
c001f5bd:	2d c0 00 00 00       	sub    eax,0xc0
c001f5c2:	50                   	push   eax
c001f5c3:	e8 d6 fd ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f5c8:	59                   	pop    ecx
c001f5c9:	5e                   	pop    esi
c001f5ca:	e9 75 ff ff ff       	jmp    c001f544 <Vm::x87Handler(regs*)+0x69>
c001f5cf:	8d 50 38             	lea    edx,[eax+0x38]
c001f5d2:	80 fa 07             	cmp    dl,0x7
c001f5d5:	77 3c                	ja     c001f613 <Vm::x87Handler(regs*)+0x138>
c001f5d7:	83 ec 0c             	sub    esp,0xc
c001f5da:	2d c8 00 00 00       	sub    eax,0xc8
c001f5df:	50                   	push   eax
c001f5e0:	e8 b9 fd ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f5e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5ec:	89 c6                	mov    esi,eax
c001f5ee:	89 d7                	mov    edi,edx
c001f5f0:	e8 a9 fd ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f5f5:	83 c4 0c             	add    esp,0xc
c001f5f8:	52                   	push   edx
c001f5f9:	50                   	push   eax
c001f5fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5fe:	2d c8 00 00 00       	sub    eax,0xc8
c001f603:	50                   	push   eax
c001f604:	e8 d8 fd ff ff       	call   c001f3e1 <Vm::fpuSetReg(int, unsigned long long)>
c001f609:	83 c4 0c             	add    esp,0xc
c001f60c:	57                   	push   edi
c001f60d:	56                   	push   esi
c001f60e:	e9 73 ff ff ff       	jmp    c001f586 <Vm::x87Handler(regs*)+0xab>
c001f613:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f617:	84 d2                	test   dl,dl
c001f619:	75 0f                	jne    c001f62a <Vm::x87Handler(regs*)+0x14f>
c001f61b:	83 ec 0c             	sub    esp,0xc
c001f61e:	ff 36                	push   DWORD PTR [esi]
c001f620:	e8 c8 fa ff ff       	call   c001f0ed <Vm::fpu32ToInternal(unsigned int)>
c001f625:	e9 bf 00 00 00       	jmp    c001f6e9 <Vm::x87Handler(regs*)+0x20e>
c001f62a:	80 fa 03             	cmp    dl,0x3
c001f62d:	75 13                	jne    c001f642 <Vm::x87Handler(regs*)+0x167>
c001f62f:	e8 55 fe ff ff       	call   c001f489 <Vm::fpuPop()>
c001f634:	55                   	push   ebp
c001f635:	55                   	push   ebp
c001f636:	52                   	push   edx
c001f637:	50                   	push   eax
c001f638:	e8 4c fa ff ff       	call   c001f089 <Vm::fpuInternalTo32(unsigned long long)>
c001f63d:	e9 88 00 00 00       	jmp    c001f6ca <Vm::x87Handler(regs*)+0x1ef>
c001f642:	80 fa 05             	cmp    dl,0x5
c001f645:	75 0e                	jne    c001f655 <Vm::x87Handler(regs*)+0x17a>
c001f647:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f64a:	66 a3 22 f3 02 c0    	mov    ds:0xc002f322,ax
c001f650:	e9 df 00 00 00       	jmp    c001f734 <Vm::x87Handler(regs*)+0x259>
c001f655:	31 c0                	xor    eax,eax
c001f657:	80 fa 07             	cmp    dl,0x7
c001f65a:	0f 85 dc 08 00 00    	jne    c001ff3c <Vm::x87Handler(regs*)+0xa61>
c001f660:	66 a1 22 f3 02 c0    	mov    ax,ds:0xc002f322
c001f666:	66 89 06             	mov    WORD PTR [esi],ax
c001f669:	e9 c6 00 00 00       	jmp    c001f734 <Vm::x87Handler(regs*)+0x259>
c001f66e:	80 fa d8             	cmp    dl,0xd8
c001f671:	0f 84 c9 00 00 00    	je     c001f740 <Vm::x87Handler(regs*)+0x265>
c001f677:	80 fa dc             	cmp    dl,0xdc
c001f67a:	0f 84 0d 02 00 00    	je     c001f88d <Vm::x87Handler(regs*)+0x3b2>
c001f680:	80 fa de             	cmp    dl,0xde
c001f683:	0f 84 cd 02 00 00    	je     c001f956 <Vm::x87Handler(regs*)+0x47b>
c001f689:	80 fa dd             	cmp    dl,0xdd
c001f68c:	0f 84 5f 04 00 00    	je     c001faf1 <Vm::x87Handler(regs*)+0x616>
c001f692:	80 fa da             	cmp    dl,0xda
c001f695:	0f 84 24 05 00 00    	je     c001fbbf <Vm::x87Handler(regs*)+0x6e4>
c001f69b:	80 fa df             	cmp    dl,0xdf
c001f69e:	0f 84 68 05 00 00    	je     c001fc0c <Vm::x87Handler(regs*)+0x731>
c001f6a4:	31 c0                	xor    eax,eax
c001f6a6:	80 fa db             	cmp    dl,0xdb
c001f6a9:	0f 85 8d 08 00 00    	jne    c001ff3c <Vm::x87Handler(regs*)+0xa61>
c001f6af:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f6b3:	80 fa 03             	cmp    dl,0x3
c001f6b6:	0f 85 70 06 00 00    	jne    c001fd2c <Vm::x87Handler(regs*)+0x851>
c001f6bc:	e8 c8 fd ff ff       	call   c001f489 <Vm::fpuPop()>
c001f6c1:	55                   	push   ebp
c001f6c2:	55                   	push   ebp
c001f6c3:	52                   	push   edx
c001f6c4:	50                   	push   eax
c001f6c5:	e8 71 fa ff ff       	call   c001f13b <Vm::fpuFloatToLong(unsigned long long)>
c001f6ca:	83 c4 10             	add    esp,0x10
c001f6cd:	89 06                	mov    DWORD PTR [esi],eax
c001f6cf:	eb 63                	jmp    c001f734 <Vm::x87Handler(regs*)+0x259>
c001f6d1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f6d5:	84 d2                	test   dl,dl
c001f6d7:	0f 85 e6 05 00 00    	jne    c001fcc3 <Vm::x87Handler(regs*)+0x7e8>
c001f6dd:	57                   	push   edi
c001f6de:	57                   	push   edi
c001f6df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f6e2:	ff 36                	push   DWORD PTR [esi]
c001f6e4:	e8 49 fa ff ff       	call   c001f132 <Vm::fpu64ToInternal(unsigned long long)>
c001f6e9:	5e                   	pop    esi
c001f6ea:	5f                   	pop    edi
c001f6eb:	52                   	push   edx
c001f6ec:	50                   	push   eax
c001f6ed:	e8 3a fd ff ff       	call   c001f42c <Vm::fpuPush(unsigned long long)>
c001f6f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f6f6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f6f9:	e9 51 fe ff ff       	jmp    c001f54f <Vm::x87Handler(regs*)+0x74>
c001f6fe:	80 fa 03             	cmp    dl,0x3
c001f701:	0f 85 d7 06 00 00    	jne    c001fdde <Vm::x87Handler(regs*)+0x903>
c001f707:	57                   	push   edi
c001f708:	57                   	push   edi
c001f709:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f70c:	ff 36                	push   DWORD PTR [esi]
c001f70e:	e8 1f fa ff ff       	call   c001f132 <Vm::fpu64ToInternal(unsigned long long)>
c001f713:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f71a:	89 c6                	mov    esi,eax
c001f71c:	89 d7                	mov    edi,edx
c001f71e:	e8 7b fc ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f723:	57                   	push   edi
c001f724:	56                   	push   esi
c001f725:	52                   	push   edx
c001f726:	50                   	push   eax
c001f727:	e8 95 fb ff ff       	call   c001f2c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f72c:	83 c4 20             	add    esp,0x20
c001f72f:	e8 55 fd ff ff       	call   c001f489 <Vm::fpuPop()>
c001f734:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f738:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f73b:	e9 12 fe ff ff       	jmp    c001f552 <Vm::x87Handler(regs*)+0x77>
c001f740:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f744:	8d 50 40             	lea    edx,[eax+0x40]
c001f747:	80 fa 07             	cmp    dl,0x7
c001f74a:	77 29                	ja     c001f775 <Vm::x87Handler(regs*)+0x29a>
c001f74c:	83 ec 0c             	sub    esp,0xc
c001f74f:	2d c0 00 00 00       	sub    eax,0xc0
c001f754:	50                   	push   eax
c001f755:	e8 44 fc ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f75a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f761:	89 c6                	mov    esi,eax
c001f763:	89 d7                	mov    edi,edx
c001f765:	e8 34 fc ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f76a:	57                   	push   edi
c001f76b:	56                   	push   esi
c001f76c:	52                   	push   edx
c001f76d:	50                   	push   eax
c001f76e:	e8 a1 fb ff ff       	call   c001f314 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f773:	eb 2f                	jmp    c001f7a4 <Vm::x87Handler(regs*)+0x2c9>
c001f775:	8d 50 38             	lea    edx,[eax+0x38]
c001f778:	80 fa 07             	cmp    dl,0x7
c001f77b:	77 2f                	ja     c001f7ac <Vm::x87Handler(regs*)+0x2d1>
c001f77d:	83 ec 0c             	sub    esp,0xc
c001f780:	2d c8 00 00 00       	sub    eax,0xc8
c001f785:	50                   	push   eax
c001f786:	e8 13 fc ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f78b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f792:	89 c6                	mov    esi,eax
c001f794:	89 d7                	mov    edi,edx
c001f796:	e8 03 fc ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f79b:	57                   	push   edi
c001f79c:	56                   	push   esi
c001f79d:	52                   	push   edx
c001f79e:	50                   	push   eax
c001f79f:	e8 a9 fb ff ff       	call   c001f34d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7a4:	83 c4 1c             	add    esp,0x1c
c001f7a7:	e9 d8 fd ff ff       	jmp    c001f584 <Vm::x87Handler(regs*)+0xa9>
c001f7ac:	8d 50 30             	lea    edx,[eax+0x30]
c001f7af:	80 fa 07             	cmp    dl,0x7
c001f7b2:	77 0d                	ja     c001f7c1 <Vm::x87Handler(regs*)+0x2e6>
c001f7b4:	83 ec 0c             	sub    esp,0xc
c001f7b7:	2d d0 00 00 00       	sub    eax,0xd0
c001f7bc:	e9 99 03 00 00       	jmp    c001fb5a <Vm::x87Handler(regs*)+0x67f>
c001f7c1:	8d 50 28             	lea    edx,[eax+0x28]
c001f7c4:	80 fa 07             	cmp    dl,0x7
c001f7c7:	77 0d                	ja     c001f7d6 <Vm::x87Handler(regs*)+0x2fb>
c001f7c9:	83 ec 0c             	sub    esp,0xc
c001f7cc:	2d d8 00 00 00       	sub    eax,0xd8
c001f7d1:	e9 c0 03 00 00       	jmp    c001fb96 <Vm::x87Handler(regs*)+0x6bb>
c001f7d6:	8d 50 20             	lea    edx,[eax+0x20]
c001f7d9:	80 fa 07             	cmp    dl,0x7
c001f7dc:	77 1b                	ja     c001f7f9 <Vm::x87Handler(regs*)+0x31e>
c001f7de:	83 ec 0c             	sub    esp,0xc
c001f7e1:	2d e0 00 00 00       	sub    eax,0xe0
c001f7e6:	50                   	push   eax
c001f7e7:	e8 b2 fb ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f7ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7f3:	89 c6                	mov    esi,eax
c001f7f5:	89 d7                	mov    edi,edx
c001f7f7:	eb 22                	jmp    c001f81b <Vm::x87Handler(regs*)+0x340>
c001f7f9:	8d 50 18             	lea    edx,[eax+0x18]
c001f7fc:	80 fa 07             	cmp    dl,0x7
c001f7ff:	77 2d                	ja     c001f82e <Vm::x87Handler(regs*)+0x353>
c001f801:	83 ec 0c             	sub    esp,0xc
c001f804:	6a 00                	push   0x0
c001f806:	e8 93 fb ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f80b:	89 c6                	mov    esi,eax
c001f80d:	89 d7                	mov    edi,edx
c001f80f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f813:	2d e8 00 00 00       	sub    eax,0xe8
c001f818:	89 04 24             	mov    DWORD PTR [esp],eax
c001f81b:	e8 7e fb ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f820:	57                   	push   edi
c001f821:	56                   	push   esi
c001f822:	52                   	push   edx
c001f823:	50                   	push   eax
c001f824:	e8 15 fb ff ff       	call   c001f33e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f829:	e9 76 ff ff ff       	jmp    c001f7a4 <Vm::x87Handler(regs*)+0x2c9>
c001f82e:	8d 50 10             	lea    edx,[eax+0x10]
c001f831:	80 fa 07             	cmp    dl,0x7
c001f834:	77 1b                	ja     c001f851 <Vm::x87Handler(regs*)+0x376>
c001f836:	83 ec 0c             	sub    esp,0xc
c001f839:	2d f0 00 00 00       	sub    eax,0xf0
c001f83e:	50                   	push   eax
c001f83f:	e8 5a fb ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f844:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f84b:	89 c6                	mov    esi,eax
c001f84d:	89 d7                	mov    edi,edx
c001f84f:	eb 22                	jmp    c001f873 <Vm::x87Handler(regs*)+0x398>
c001f851:	3c f7                	cmp    al,0xf7
c001f853:	0f 86 d1 03 00 00    	jbe    c001fc2a <Vm::x87Handler(regs*)+0x74f>
c001f859:	83 ec 0c             	sub    esp,0xc
c001f85c:	6a 00                	push   0x0
c001f85e:	e8 3b fb ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f863:	89 c6                	mov    esi,eax
c001f865:	89 d7                	mov    edi,edx
c001f867:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f86b:	2d f8 00 00 00       	sub    eax,0xf8
c001f870:	89 04 24             	mov    DWORD PTR [esp],eax
c001f873:	e8 26 fb ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f878:	57                   	push   edi
c001f879:	56                   	push   esi
c001f87a:	52                   	push   edx
c001f87b:	50                   	push   eax
c001f87c:	e8 eb fa ff ff       	call   c001f36c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f881:	83 c4 1c             	add    esp,0x1c
c001f884:	52                   	push   edx
c001f885:	50                   	push   eax
c001f886:	6a 00                	push   0x0
c001f888:	e9 51 02 00 00       	jmp    c001fade <Vm::x87Handler(regs*)+0x603>
c001f88d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f891:	8d 50 40             	lea    edx,[eax+0x40]
c001f894:	80 fa 07             	cmp    dl,0x7
c001f897:	77 37                	ja     c001f8d0 <Vm::x87Handler(regs*)+0x3f5>
c001f899:	83 ec 0c             	sub    esp,0xc
c001f89c:	2d c0 00 00 00       	sub    eax,0xc0
c001f8a1:	50                   	push   eax
c001f8a2:	e8 f7 fa ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f8a7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8ae:	89 c6                	mov    esi,eax
c001f8b0:	89 d7                	mov    edi,edx
c001f8b2:	e8 e7 fa ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f8b7:	57                   	push   edi
c001f8b8:	56                   	push   esi
c001f8b9:	52                   	push   edx
c001f8ba:	50                   	push   eax
c001f8bb:	e8 54 fa ff ff       	call   c001f314 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f8c0:	83 c4 1c             	add    esp,0x1c
c001f8c3:	52                   	push   edx
c001f8c4:	50                   	push   eax
c001f8c5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8c9:	2d c0 00 00 00       	sub    eax,0xc0
c001f8ce:	eb 3d                	jmp    c001f90d <Vm::x87Handler(regs*)+0x432>
c001f8d0:	8d 50 38             	lea    edx,[eax+0x38]
c001f8d3:	80 fa 07             	cmp    dl,0x7
c001f8d6:	77 3b                	ja     c001f913 <Vm::x87Handler(regs*)+0x438>
c001f8d8:	83 ec 0c             	sub    esp,0xc
c001f8db:	2d c8 00 00 00       	sub    eax,0xc8
c001f8e0:	50                   	push   eax
c001f8e1:	e8 b8 fa ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f8e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8ed:	89 c6                	mov    esi,eax
c001f8ef:	89 d7                	mov    edi,edx
c001f8f1:	e8 a8 fa ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f8f6:	57                   	push   edi
c001f8f7:	56                   	push   esi
c001f8f8:	52                   	push   edx
c001f8f9:	50                   	push   eax
c001f8fa:	e8 4e fa ff ff       	call   c001f34d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8ff:	83 c4 1c             	add    esp,0x1c
c001f902:	52                   	push   edx
c001f903:	50                   	push   eax
c001f904:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f908:	2d c8 00 00 00       	sub    eax,0xc8
c001f90d:	50                   	push   eax
c001f90e:	e9 75 fc ff ff       	jmp    c001f588 <Vm::x87Handler(regs*)+0xad>
c001f913:	83 c0 18             	add    eax,0x18
c001f916:	3c 07                	cmp    al,0x7
c001f918:	0f 87 3b 04 00 00    	ja     c001fd59 <Vm::x87Handler(regs*)+0x87e>
c001f91e:	83 ec 0c             	sub    esp,0xc
c001f921:	6a 00                	push   0x0
c001f923:	e8 76 fa ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f928:	89 c6                	mov    esi,eax
c001f92a:	89 d7                	mov    edi,edx
c001f92c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f930:	2d e8 00 00 00       	sub    eax,0xe8
c001f935:	89 04 24             	mov    DWORD PTR [esp],eax
c001f938:	e8 61 fa ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f93d:	57                   	push   edi
c001f93e:	56                   	push   esi
c001f93f:	52                   	push   edx
c001f940:	50                   	push   eax
c001f941:	e8 f8 f9 ff ff       	call   c001f33e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f946:	83 c4 1c             	add    esp,0x1c
c001f949:	52                   	push   edx
c001f94a:	50                   	push   eax
c001f94b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f94f:	2d e8 00 00 00       	sub    eax,0xe8
c001f954:	eb b7                	jmp    c001f90d <Vm::x87Handler(regs*)+0x432>
c001f956:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f95a:	8d 50 40             	lea    edx,[eax+0x40]
c001f95d:	80 fa 07             	cmp    dl,0x7
c001f960:	77 3a                	ja     c001f99c <Vm::x87Handler(regs*)+0x4c1>
c001f962:	83 ec 0c             	sub    esp,0xc
c001f965:	2d c0 00 00 00       	sub    eax,0xc0
c001f96a:	50                   	push   eax
c001f96b:	e8 2e fa ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f970:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f977:	89 c6                	mov    esi,eax
c001f979:	89 d7                	mov    edi,edx
c001f97b:	e8 1e fa ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f980:	57                   	push   edi
c001f981:	56                   	push   esi
c001f982:	52                   	push   edx
c001f983:	50                   	push   eax
c001f984:	e8 8b f9 ff ff       	call   c001f314 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f989:	83 c4 1c             	add    esp,0x1c
c001f98c:	52                   	push   edx
c001f98d:	50                   	push   eax
c001f98e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f992:	2d c0 00 00 00       	sub    eax,0xc0
c001f997:	e9 9e 01 00 00       	jmp    c001fb3a <Vm::x87Handler(regs*)+0x65f>
c001f99c:	8d 50 20             	lea    edx,[eax+0x20]
c001f99f:	80 fa 07             	cmp    dl,0x7
c001f9a2:	77 3a                	ja     c001f9de <Vm::x87Handler(regs*)+0x503>
c001f9a4:	83 ec 0c             	sub    esp,0xc
c001f9a7:	2d e0 00 00 00       	sub    eax,0xe0
c001f9ac:	50                   	push   eax
c001f9ad:	e8 ec f9 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f9b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9b9:	89 c6                	mov    esi,eax
c001f9bb:	89 d7                	mov    edi,edx
c001f9bd:	e8 dc f9 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f9c2:	57                   	push   edi
c001f9c3:	56                   	push   esi
c001f9c4:	52                   	push   edx
c001f9c5:	50                   	push   eax
c001f9c6:	e8 73 f9 ff ff       	call   c001f33e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f9cb:	83 c4 1c             	add    esp,0x1c
c001f9ce:	52                   	push   edx
c001f9cf:	50                   	push   eax
c001f9d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9d4:	2d e0 00 00 00       	sub    eax,0xe0
c001f9d9:	e9 5c 01 00 00       	jmp    c001fb3a <Vm::x87Handler(regs*)+0x65f>
c001f9de:	8d 50 18             	lea    edx,[eax+0x18]
c001f9e1:	80 fa 07             	cmp    dl,0x7
c001f9e4:	77 3b                	ja     c001fa21 <Vm::x87Handler(regs*)+0x546>
c001f9e6:	83 ec 0c             	sub    esp,0xc
c001f9e9:	6a 00                	push   0x0
c001f9eb:	e8 ae f9 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001f9f0:	89 c6                	mov    esi,eax
c001f9f2:	89 d7                	mov    edi,edx
c001f9f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9f8:	2d e8 00 00 00       	sub    eax,0xe8
c001f9fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa00:	e8 99 f9 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fa05:	57                   	push   edi
c001fa06:	56                   	push   esi
c001fa07:	52                   	push   edx
c001fa08:	50                   	push   eax
c001fa09:	e8 30 f9 ff ff       	call   c001f33e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa0e:	83 c4 1c             	add    esp,0x1c
c001fa11:	52                   	push   edx
c001fa12:	50                   	push   eax
c001fa13:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa17:	2d e8 00 00 00       	sub    eax,0xe8
c001fa1c:	e9 19 01 00 00       	jmp    c001fb3a <Vm::x87Handler(regs*)+0x65f>
c001fa21:	8d 50 38             	lea    edx,[eax+0x38]
c001fa24:	80 fa 07             	cmp    dl,0x7
c001fa27:	77 37                	ja     c001fa60 <Vm::x87Handler(regs*)+0x585>
c001fa29:	83 ec 0c             	sub    esp,0xc
c001fa2c:	2d c8 00 00 00       	sub    eax,0xc8
c001fa31:	50                   	push   eax
c001fa32:	e8 67 f9 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fa37:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa3e:	89 c6                	mov    esi,eax
c001fa40:	89 d7                	mov    edi,edx
c001fa42:	e8 57 f9 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fa47:	57                   	push   edi
c001fa48:	56                   	push   esi
c001fa49:	52                   	push   edx
c001fa4a:	50                   	push   eax
c001fa4b:	e8 fd f8 ff ff       	call   c001f34d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa50:	83 c4 1c             	add    esp,0x1c
c001fa53:	52                   	push   edx
c001fa54:	50                   	push   eax
c001fa55:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa59:	2d c8 00 00 00       	sub    eax,0xc8
c001fa5e:	eb 7d                	jmp    c001fadd <Vm::x87Handler(regs*)+0x602>
c001fa60:	3c f7                	cmp    al,0xf7
c001fa62:	76 38                	jbe    c001fa9c <Vm::x87Handler(regs*)+0x5c1>
c001fa64:	83 ec 0c             	sub    esp,0xc
c001fa67:	6a 00                	push   0x0
c001fa69:	e8 30 f9 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fa6e:	89 c6                	mov    esi,eax
c001fa70:	89 d7                	mov    edi,edx
c001fa72:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa76:	2d f8 00 00 00       	sub    eax,0xf8
c001fa7b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa7e:	e8 1b f9 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fa83:	57                   	push   edi
c001fa84:	56                   	push   esi
c001fa85:	52                   	push   edx
c001fa86:	50                   	push   eax
c001fa87:	e8 e0 f8 ff ff       	call   c001f36c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa8c:	83 c4 1c             	add    esp,0x1c
c001fa8f:	52                   	push   edx
c001fa90:	50                   	push   eax
c001fa91:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa95:	2d f8 00 00 00       	sub    eax,0xf8
c001fa9a:	eb 41                	jmp    c001fadd <Vm::x87Handler(regs*)+0x602>
c001fa9c:	8d 50 10             	lea    edx,[eax+0x10]
c001fa9f:	80 fa 07             	cmp    dl,0x7
c001faa2:	0f 87 5a 01 00 00    	ja     c001fc02 <Vm::x87Handler(regs*)+0x727>
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	2d f0 00 00 00       	sub    eax,0xf0
c001fab0:	50                   	push   eax
c001fab1:	e8 e8 f8 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fab6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fabd:	89 c6                	mov    esi,eax
c001fabf:	89 d7                	mov    edi,edx
c001fac1:	e8 d8 f8 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fac6:	57                   	push   edi
c001fac7:	56                   	push   esi
c001fac8:	52                   	push   edx
c001fac9:	50                   	push   eax
c001faca:	e8 9d f8 ff ff       	call   c001f36c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001facf:	83 c4 1c             	add    esp,0x1c
c001fad2:	52                   	push   edx
c001fad3:	50                   	push   eax
c001fad4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad8:	2d f0 00 00 00       	sub    eax,0xf0
c001fadd:	50                   	push   eax
c001fade:	e8 fe f8 ff ff       	call   c001f3e1 <Vm::fpuSetReg(int, unsigned long long)>
c001fae3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fae7:	e8 9d f9 ff ff       	call   c001f489 <Vm::fpuPop()>
c001faec:	e9 5e fa ff ff       	jmp    c001f54f <Vm::x87Handler(regs*)+0x74>
c001faf1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faf5:	8d 50 30             	lea    edx,[eax+0x30]
c001faf8:	80 fa 07             	cmp    dl,0x7
c001fafb:	77 1d                	ja     c001fb1a <Vm::x87Handler(regs*)+0x63f>
c001fafd:	83 ec 0c             	sub    esp,0xc
c001fb00:	6a 00                	push   0x0
c001fb02:	e8 97 f8 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fb07:	83 c4 0c             	add    esp,0xc
c001fb0a:	52                   	push   edx
c001fb0b:	50                   	push   eax
c001fb0c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb10:	2d d0 00 00 00       	sub    eax,0xd0
c001fb15:	e9 f3 fd ff ff       	jmp    c001f90d <Vm::x87Handler(regs*)+0x432>
c001fb1a:	8d 50 28             	lea    edx,[eax+0x28]
c001fb1d:	80 fa 07             	cmp    dl,0x7
c001fb20:	77 28                	ja     c001fb4a <Vm::x87Handler(regs*)+0x66f>
c001fb22:	83 ec 0c             	sub    esp,0xc
c001fb25:	6a 00                	push   0x0
c001fb27:	e8 72 f8 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fb2c:	83 c4 0c             	add    esp,0xc
c001fb2f:	52                   	push   edx
c001fb30:	50                   	push   eax
c001fb31:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb35:	2d d8 00 00 00       	sub    eax,0xd8
c001fb3a:	50                   	push   eax
c001fb3b:	e8 a1 f8 ff ff       	call   c001f3e1 <Vm::fpuSetReg(int, unsigned long long)>
c001fb40:	e8 44 f9 ff ff       	call   c001f489 <Vm::fpuPop()>
c001fb45:	e9 01 fa ff ff       	jmp    c001f54b <Vm::x87Handler(regs*)+0x70>
c001fb4a:	8d 50 20             	lea    edx,[eax+0x20]
c001fb4d:	80 fa 07             	cmp    dl,0x7
c001fb50:	77 30                	ja     c001fb82 <Vm::x87Handler(regs*)+0x6a7>
c001fb52:	83 ec 0c             	sub    esp,0xc
c001fb55:	2d e0 00 00 00       	sub    eax,0xe0
c001fb5a:	50                   	push   eax
c001fb5b:	e8 3e f8 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fb60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb67:	89 c6                	mov    esi,eax
c001fb69:	89 d7                	mov    edi,edx
c001fb6b:	e8 2e f8 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fb70:	57                   	push   edi
c001fb71:	56                   	push   esi
c001fb72:	52                   	push   edx
c001fb73:	50                   	push   eax
c001fb74:	e8 48 f7 ff ff       	call   c001f2c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb79:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb7d:	e9 54 02 00 00       	jmp    c001fdd6 <Vm::x87Handler(regs*)+0x8fb>
c001fb82:	8d 50 18             	lea    edx,[eax+0x18]
c001fb85:	80 fa 07             	cmp    dl,0x7
c001fb88:	0f 87 43 fb ff ff    	ja     c001f6d1 <Vm::x87Handler(regs*)+0x1f6>
c001fb8e:	83 ec 0c             	sub    esp,0xc
c001fb91:	2d e8 00 00 00       	sub    eax,0xe8
c001fb96:	50                   	push   eax
c001fb97:	e8 02 f8 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fb9c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fba3:	89 c6                	mov    esi,eax
c001fba5:	89 d7                	mov    edi,edx
c001fba7:	e8 f2 f7 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fbac:	57                   	push   edi
c001fbad:	56                   	push   esi
c001fbae:	52                   	push   edx
c001fbaf:	50                   	push   eax
c001fbb0:	e8 0c f7 ff ff       	call   c001f2c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fbb5:	83 c4 20             	add    esp,0x20
c001fbb8:	e8 cc f8 ff ff       	call   c001f489 <Vm::fpuPop()>
c001fbbd:	eb 62                	jmp    c001fc21 <Vm::x87Handler(regs*)+0x746>
c001fbbf:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fbc3:	0f 85 0f 01 00 00    	jne    c001fcd8 <Vm::x87Handler(regs*)+0x7fd>
c001fbc9:	83 ec 0c             	sub    esp,0xc
c001fbcc:	6a 01                	push   0x1
c001fbce:	e8 cb f7 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fbd3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbda:	89 c6                	mov    esi,eax
c001fbdc:	89 d7                	mov    edi,edx
c001fbde:	e8 bb f7 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fbe3:	57                   	push   edi
c001fbe4:	56                   	push   esi
c001fbe5:	52                   	push   edx
c001fbe6:	50                   	push   eax
c001fbe7:	e8 d5 f6 ff ff       	call   c001f2c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fbec:	83 c4 20             	add    esp,0x20
c001fbef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbf3:	e8 91 f8 ff ff       	call   c001f489 <Vm::fpuPop()>
c001fbf8:	e8 8c f8 ff ff       	call   c001f489 <Vm::fpuPop()>
c001fbfd:	e9 50 f9 ff ff       	jmp    c001f552 <Vm::x87Handler(regs*)+0x77>
c001fc02:	3c d9                	cmp    al,0xd9
c001fc04:	0f 85 b5 02 00 00    	jne    c001febf <Vm::x87Handler(regs*)+0x9e4>
c001fc0a:	eb bd                	jmp    c001fbc9 <Vm::x87Handler(regs*)+0x6ee>
c001fc0c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fc10:	0f 85 ea 02 00 00    	jne    c001ff00 <Vm::x87Handler(regs*)+0xa25>
c001fc16:	0f b7 05 20 f3 02 c0 	movzx  eax,WORD PTR ds:0xc002f320
c001fc1d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fc21:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc25:	e9 28 f9 ff ff       	jmp    c001f552 <Vm::x87Handler(regs*)+0x77>
c001fc2a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc2e:	84 d2                	test   dl,dl
c001fc30:	75 0f                	jne    c001fc41 <Vm::x87Handler(regs*)+0x766>
c001fc32:	83 ec 0c             	sub    esp,0xc
c001fc35:	ff 36                	push   DWORD PTR [esi]
c001fc37:	e8 b1 f4 ff ff       	call   c001f0ed <Vm::fpu32ToInternal(unsigned int)>
c001fc3c:	e9 2c 01 00 00       	jmp    c001fd6d <Vm::x87Handler(regs*)+0x892>
c001fc41:	80 fa 01             	cmp    dl,0x1
c001fc44:	75 0f                	jne    c001fc55 <Vm::x87Handler(regs*)+0x77a>
c001fc46:	83 ec 0c             	sub    esp,0xc
c001fc49:	ff 36                	push   DWORD PTR [esi]
c001fc4b:	e8 9d f4 ff ff       	call   c001f0ed <Vm::fpu32ToInternal(unsigned int)>
c001fc50:	e9 81 02 00 00       	jmp    c001fed6 <Vm::x87Handler(regs*)+0x9fb>
c001fc55:	80 fa 04             	cmp    dl,0x4
c001fc58:	75 0f                	jne    c001fc69 <Vm::x87Handler(regs*)+0x78e>
c001fc5a:	83 ec 0c             	sub    esp,0xc
c001fc5d:	ff 36                	push   DWORD PTR [esi]
c001fc5f:	e8 89 f4 ff ff       	call   c001f0ed <Vm::fpu32ToInternal(unsigned int)>
c001fc64:	e9 86 01 00 00       	jmp    c001fdef <Vm::x87Handler(regs*)+0x914>
c001fc69:	80 fa 05             	cmp    dl,0x5
c001fc6c:	75 1b                	jne    c001fc89 <Vm::x87Handler(regs*)+0x7ae>
c001fc6e:	83 ec 0c             	sub    esp,0xc
c001fc71:	6a 00                	push   0x0
c001fc73:	e8 26 f7 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fc78:	89 c7                	mov    edi,eax
c001fc7a:	89 d5                	mov    ebp,edx
c001fc7c:	58                   	pop    eax
c001fc7d:	ff 36                	push   DWORD PTR [esi]
c001fc7f:	e8 69 f4 ff ff       	call   c001f0ed <Vm::fpu32ToInternal(unsigned int)>
c001fc84:	e9 a3 01 00 00       	jmp    c001fe2c <Vm::x87Handler(regs*)+0x951>
c001fc89:	80 fa 06             	cmp    dl,0x6
c001fc8c:	75 0f                	jne    c001fc9d <Vm::x87Handler(regs*)+0x7c2>
c001fc8e:	83 ec 0c             	sub    esp,0xc
c001fc91:	ff 36                	push   DWORD PTR [esi]
c001fc93:	e8 55 f4 ff ff       	call   c001f0ed <Vm::fpu32ToInternal(unsigned int)>
c001fc98:	e9 ae 01 00 00       	jmp    c001fe4b <Vm::x87Handler(regs*)+0x970>
c001fc9d:	31 c0                	xor    eax,eax
c001fc9f:	80 fa 07             	cmp    dl,0x7
c001fca2:	0f 85 94 02 00 00    	jne    c001ff3c <Vm::x87Handler(regs*)+0xa61>
c001fca8:	83 ec 0c             	sub    esp,0xc
c001fcab:	6a 00                	push   0x0
c001fcad:	e8 ec f6 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fcb2:	89 c7                	mov    edi,eax
c001fcb4:	89 d5                	mov    ebp,edx
c001fcb6:	58                   	pop    eax
c001fcb7:	ff 36                	push   DWORD PTR [esi]
c001fcb9:	e8 2f f4 ff ff       	call   c001f0ed <Vm::fpu32ToInternal(unsigned int)>
c001fcbe:	e9 cb 01 00 00       	jmp    c001fe8e <Vm::x87Handler(regs*)+0x9b3>
c001fcc3:	80 fa 03             	cmp    dl,0x3
c001fcc6:	0f 85 d3 01 00 00    	jne    c001fe9f <Vm::x87Handler(regs*)+0x9c4>
c001fccc:	e8 b8 f7 ff ff       	call   c001f489 <Vm::fpuPop()>
c001fcd1:	51                   	push   ecx
c001fcd2:	51                   	push   ecx
c001fcd3:	e9 de 01 00 00       	jmp    c001feb6 <Vm::x87Handler(regs*)+0x9db>
c001fcd8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcdc:	80 fa 01             	cmp    dl,0x1
c001fcdf:	75 09                	jne    c001fcea <Vm::x87Handler(regs*)+0x80f>
c001fce1:	57                   	push   edi
c001fce2:	57                   	push   edi
c001fce3:	8b 06                	mov    eax,DWORD PTR [esi]
c001fce5:	e9 e3 01 00 00       	jmp    c001fecd <Vm::x87Handler(regs*)+0x9f2>
c001fcea:	80 fa 04             	cmp    dl,0x4
c001fced:	75 12                	jne    c001fd01 <Vm::x87Handler(regs*)+0x826>
c001fcef:	31 d2                	xor    edx,edx
c001fcf1:	51                   	push   ecx
c001fcf2:	51                   	push   ecx
c001fcf3:	8b 06                	mov    eax,DWORD PTR [esi]
c001fcf5:	52                   	push   edx
c001fcf6:	50                   	push   eax
c001fcf7:	e8 d0 f4 ff ff       	call   c001f1cc <Vm::fpuLongToFloat(long long)>
c001fcfc:	e9 ee 00 00 00       	jmp    c001fdef <Vm::x87Handler(regs*)+0x914>
c001fd01:	31 c0                	xor    eax,eax
c001fd03:	80 fa 07             	cmp    dl,0x7
c001fd06:	0f 85 30 02 00 00    	jne    c001ff3c <Vm::x87Handler(regs*)+0xa61>
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	6a 00                	push   0x0
c001fd11:	e8 88 f6 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fd16:	89 c7                	mov    edi,eax
c001fd18:	89 d5                	mov    ebp,edx
c001fd1a:	58                   	pop    eax
c001fd1b:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd1d:	5a                   	pop    edx
c001fd1e:	31 d2                	xor    edx,edx
c001fd20:	52                   	push   edx
c001fd21:	50                   	push   eax
c001fd22:	e8 a5 f4 ff ff       	call   c001f1cc <Vm::fpuLongToFloat(long long)>
c001fd27:	e9 62 01 00 00       	jmp    c001fe8e <Vm::x87Handler(regs*)+0x9b3>
c001fd2c:	84 d2                	test   dl,dl
c001fd2e:	75 0d                	jne    c001fd3d <Vm::x87Handler(regs*)+0x862>
c001fd30:	31 d2                	xor    edx,edx
c001fd32:	55                   	push   ebp
c001fd33:	55                   	push   ebp
c001fd34:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd36:	52                   	push   edx
c001fd37:	50                   	push   eax
c001fd38:	e9 d3 01 00 00       	jmp    c001ff10 <Vm::x87Handler(regs*)+0xa35>
c001fd3d:	31 c0                	xor    eax,eax
c001fd3f:	80 fa 02             	cmp    dl,0x2
c001fd42:	0f 85 f4 01 00 00    	jne    c001ff3c <Vm::x87Handler(regs*)+0xa61>
c001fd48:	83 ec 0c             	sub    esp,0xc
c001fd4b:	6a 00                	push   0x0
c001fd4d:	e8 4c f6 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fd52:	59                   	pop    ecx
c001fd53:	5f                   	pop    edi
c001fd54:	e9 6a f9 ff ff       	jmp    c001f6c3 <Vm::x87Handler(regs*)+0x1e8>
c001fd59:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd5d:	84 d2                	test   dl,dl
c001fd5f:	75 2a                	jne    c001fd8b <Vm::x87Handler(regs*)+0x8b0>
c001fd61:	50                   	push   eax
c001fd62:	50                   	push   eax
c001fd63:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd66:	ff 36                	push   DWORD PTR [esi]
c001fd68:	e8 c5 f3 ff ff       	call   c001f132 <Vm::fpu64ToInternal(unsigned long long)>
c001fd6d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd74:	89 c6                	mov    esi,eax
c001fd76:	89 d7                	mov    edi,edx
c001fd78:	e8 21 f6 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fd7d:	57                   	push   edi
c001fd7e:	56                   	push   esi
c001fd7f:	52                   	push   edx
c001fd80:	50                   	push   eax
c001fd81:	e8 8e f5 ff ff       	call   c001f314 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd86:	e9 64 01 00 00       	jmp    c001feef <Vm::x87Handler(regs*)+0xa14>
c001fd8b:	80 fa 01             	cmp    dl,0x1
c001fd8e:	75 11                	jne    c001fda1 <Vm::x87Handler(regs*)+0x8c6>
c001fd90:	50                   	push   eax
c001fd91:	50                   	push   eax
c001fd92:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd95:	ff 36                	push   DWORD PTR [esi]
c001fd97:	e8 96 f3 ff ff       	call   c001f132 <Vm::fpu64ToInternal(unsigned long long)>
c001fd9c:	e9 35 01 00 00       	jmp    c001fed6 <Vm::x87Handler(regs*)+0x9fb>
c001fda1:	80 fa 02             	cmp    dl,0x2
c001fda4:	0f 85 54 f9 ff ff    	jne    c001f6fe <Vm::x87Handler(regs*)+0x223>
c001fdaa:	55                   	push   ebp
c001fdab:	55                   	push   ebp
c001fdac:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdaf:	ff 36                	push   DWORD PTR [esi]
c001fdb1:	e8 7c f3 ff ff       	call   c001f132 <Vm::fpu64ToInternal(unsigned long long)>
c001fdb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdbd:	89 c6                	mov    esi,eax
c001fdbf:	89 d7                	mov    edi,edx
c001fdc1:	e8 d8 f5 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fdc6:	57                   	push   edi
c001fdc7:	56                   	push   esi
c001fdc8:	52                   	push   edx
c001fdc9:	50                   	push   eax
c001fdca:	e8 f2 f4 ff ff       	call   c001f2c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fdd3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdd6:	83 c4 20             	add    esp,0x20
c001fdd9:	e9 74 f7 ff ff       	jmp    c001f552 <Vm::x87Handler(regs*)+0x77>
c001fdde:	80 fa 04             	cmp    dl,0x4
c001fde1:	75 2a                	jne    c001fe0d <Vm::x87Handler(regs*)+0x932>
c001fde3:	51                   	push   ecx
c001fde4:	51                   	push   ecx
c001fde5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fde8:	ff 36                	push   DWORD PTR [esi]
c001fdea:	e8 43 f3 ff ff       	call   c001f132 <Vm::fpu64ToInternal(unsigned long long)>
c001fdef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdf6:	89 c6                	mov    esi,eax
c001fdf8:	89 d7                	mov    edi,edx
c001fdfa:	e8 9f f5 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fdff:	57                   	push   edi
c001fe00:	56                   	push   esi
c001fe01:	52                   	push   edx
c001fe02:	50                   	push   eax
c001fe03:	e8 36 f5 ff ff       	call   c001f33e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe08:	e9 e2 00 00 00       	jmp    c001feef <Vm::x87Handler(regs*)+0xa14>
c001fe0d:	80 fa 05             	cmp    dl,0x5
c001fe10:	75 28                	jne    c001fe3a <Vm::x87Handler(regs*)+0x95f>
c001fe12:	83 ec 0c             	sub    esp,0xc
c001fe15:	6a 00                	push   0x0
c001fe17:	e8 82 f5 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fe1c:	89 c7                	mov    edi,eax
c001fe1e:	89 d5                	mov    ebp,edx
c001fe20:	58                   	pop    eax
c001fe21:	5a                   	pop    edx
c001fe22:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe25:	ff 36                	push   DWORD PTR [esi]
c001fe27:	e8 06 f3 ff ff       	call   c001f132 <Vm::fpu64ToInternal(unsigned long long)>
c001fe2c:	83 c4 10             	add    esp,0x10
c001fe2f:	55                   	push   ebp
c001fe30:	57                   	push   edi
c001fe31:	52                   	push   edx
c001fe32:	50                   	push   eax
c001fe33:	e8 06 f5 ff ff       	call   c001f33e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe38:	eb 60                	jmp    c001fe9a <Vm::x87Handler(regs*)+0x9bf>
c001fe3a:	80 fa 06             	cmp    dl,0x6
c001fe3d:	75 2a                	jne    c001fe69 <Vm::x87Handler(regs*)+0x98e>
c001fe3f:	51                   	push   ecx
c001fe40:	51                   	push   ecx
c001fe41:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe44:	ff 36                	push   DWORD PTR [esi]
c001fe46:	e8 e7 f2 ff ff       	call   c001f132 <Vm::fpu64ToInternal(unsigned long long)>
c001fe4b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe52:	89 c6                	mov    esi,eax
c001fe54:	89 d7                	mov    edi,edx
c001fe56:	e8 43 f5 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fe5b:	57                   	push   edi
c001fe5c:	56                   	push   esi
c001fe5d:	52                   	push   edx
c001fe5e:	50                   	push   eax
c001fe5f:	e8 08 f5 ff ff       	call   c001f36c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe64:	e9 86 00 00 00       	jmp    c001feef <Vm::x87Handler(regs*)+0xa14>
c001fe69:	31 c0                	xor    eax,eax
c001fe6b:	80 fa 07             	cmp    dl,0x7
c001fe6e:	0f 85 c8 00 00 00    	jne    c001ff3c <Vm::x87Handler(regs*)+0xa61>
c001fe74:	83 ec 0c             	sub    esp,0xc
c001fe77:	6a 00                	push   0x0
c001fe79:	e8 20 f5 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fe7e:	89 c7                	mov    edi,eax
c001fe80:	89 d5                	mov    ebp,edx
c001fe82:	58                   	pop    eax
c001fe83:	5a                   	pop    edx
c001fe84:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe87:	ff 36                	push   DWORD PTR [esi]
c001fe89:	e8 a4 f2 ff ff       	call   c001f132 <Vm::fpu64ToInternal(unsigned long long)>
c001fe8e:	83 c4 10             	add    esp,0x10
c001fe91:	55                   	push   ebp
c001fe92:	57                   	push   edi
c001fe93:	52                   	push   edx
c001fe94:	50                   	push   eax
c001fe95:	e8 d2 f4 ff ff       	call   c001f36c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe9a:	83 c4 0c             	add    esp,0xc
c001fe9d:	eb 53                	jmp    c001fef2 <Vm::x87Handler(regs*)+0xa17>
c001fe9f:	31 c0                	xor    eax,eax
c001fea1:	80 fa 02             	cmp    dl,0x2
c001fea4:	0f 85 92 00 00 00    	jne    c001ff3c <Vm::x87Handler(regs*)+0xa61>
c001feaa:	83 ec 0c             	sub    esp,0xc
c001fead:	6a 00                	push   0x0
c001feaf:	e8 ea f4 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001feb4:	59                   	pop    ecx
c001feb5:	5f                   	pop    edi
c001feb6:	52                   	push   edx
c001feb7:	50                   	push   eax
c001feb8:	e8 27 f2 ff ff       	call   c001f0e4 <Vm::fpuInternalTo64(unsigned long long)>
c001febd:	eb 70                	jmp    c001ff2f <Vm::x87Handler(regs*)+0xa54>
c001febf:	31 c0                	xor    eax,eax
c001fec1:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fec6:	75 74                	jne    c001ff3c <Vm::x87Handler(regs*)+0xa61>
c001fec8:	50                   	push   eax
c001fec9:	50                   	push   eax
c001feca:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fecd:	31 d2                	xor    edx,edx
c001fecf:	52                   	push   edx
c001fed0:	50                   	push   eax
c001fed1:	e8 f6 f2 ff ff       	call   c001f1cc <Vm::fpuLongToFloat(long long)>
c001fed6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fedd:	89 c6                	mov    esi,eax
c001fedf:	89 d7                	mov    edi,edx
c001fee1:	e8 b8 f4 ff ff       	call   c001f39e <Vm::fpuGetReg(int)>
c001fee6:	57                   	push   edi
c001fee7:	56                   	push   esi
c001fee8:	52                   	push   edx
c001fee9:	50                   	push   eax
c001feea:	e8 5e f4 ff ff       	call   c001f34d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001feef:	83 c4 1c             	add    esp,0x1c
c001fef2:	52                   	push   edx
c001fef3:	50                   	push   eax
c001fef4:	6a 00                	push   0x0
c001fef6:	e8 e6 f4 ff ff       	call   c001f3e1 <Vm::fpuSetReg(int, unsigned long long)>
c001fefb:	e9 f2 f7 ff ff       	jmp    c001f6f2 <Vm::x87Handler(regs*)+0x217>
c001ff00:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff04:	80 fa 05             	cmp    dl,0x5
c001ff07:	75 11                	jne    c001ff1a <Vm::x87Handler(regs*)+0xa3f>
c001ff09:	55                   	push   ebp
c001ff0a:	55                   	push   ebp
c001ff0b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff0e:	ff 36                	push   DWORD PTR [esi]
c001ff10:	e8 81 f2 ff ff       	call   c001f196 <Vm::fpuULongToFloat(unsigned long long)>
c001ff15:	e9 cf f7 ff ff       	jmp    c001f6e9 <Vm::x87Handler(regs*)+0x20e>
c001ff1a:	31 c0                	xor    eax,eax
c001ff1c:	80 fa 07             	cmp    dl,0x7
c001ff1f:	75 1b                	jne    c001ff3c <Vm::x87Handler(regs*)+0xa61>
c001ff21:	e8 63 f5 ff ff       	call   c001f489 <Vm::fpuPop()>
c001ff26:	51                   	push   ecx
c001ff27:	51                   	push   ecx
c001ff28:	52                   	push   edx
c001ff29:	50                   	push   eax
c001ff2a:	e8 0c f2 ff ff       	call   c001f13b <Vm::fpuFloatToLong(unsigned long long)>
c001ff2f:	83 c4 10             	add    esp,0x10
c001ff32:	89 06                	mov    DWORD PTR [esi],eax
c001ff34:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001ff37:	e9 f8 f7 ff ff       	jmp    c001f734 <Vm::x87Handler(regs*)+0x259>
c001ff3c:	83 c4 1c             	add    esp,0x1c
c001ff3f:	5b                   	pop    ebx
c001ff40:	5e                   	pop    esi
c001ff41:	5f                   	pop    edi
c001ff42:	5d                   	pop    ebp
c001ff43:	c3                   	ret    

c001ff44 <__static_initialization_and_destruction_0(int, int)>:
c001ff44:	83 ec 0c             	sub    esp,0xc
c001ff47:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ff4c:	75 1a                	jne    c001ff68 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ff4e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ff56:	75 10                	jne    c001ff68 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	68 20 f3 02 c0       	push   0xc002f320
c001ff60:	e8 85 8d 00 00       	call   c0028cea <Vm::_FPUState::_FPUState()>
c001ff65:	83 c4 10             	add    esp,0x10
c001ff68:	90                   	nop
c001ff69:	83 c4 0c             	add    esp,0xc
c001ff6c:	c3                   	ret    

c001ff6d <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ff6d:	83 ec 0c             	sub    esp,0xc
c001ff70:	83 ec 08             	sub    esp,0x8
c001ff73:	68 ff ff 00 00       	push   0xffff
c001ff78:	6a 01                	push   0x1
c001ff7a:	e8 c5 ff ff ff       	call   c001ff44 <__static_initialization_and_destruction_0(int, int)>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	83 c4 0c             	add    esp,0xc
c001ff85:	c3                   	ret    

c001ff86 <FAT::getName()>:
c001ff86:	b8 e8 c1 02 c0       	mov    eax,0xc002c1e8
c001ff8b:	c3                   	ret    

c001ff8c <FAT::tell(void*, unsigned long long*)>:
c001ff8c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ff91:	75 06                	jne    c001ff99 <FAT::tell(void*, unsigned long long*)+0xd>
c001ff93:	b8 04 00 00 00       	mov    eax,0x4
c001ff98:	c3                   	ret    
c001ff99:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff9e:	75 06                	jne    c001ffa6 <FAT::tell(void*, unsigned long long*)+0x1a>
c001ffa0:	b8 04 00 00 00       	mov    eax,0x4
c001ffa5:	c3                   	ret    
c001ffa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffaa:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ffad:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ffb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ffb4:	89 01                	mov    DWORD PTR [ecx],eax
c001ffb6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ffb9:	b8 00 00 00 00       	mov    eax,0x0
c001ffbe:	c3                   	ret    
c001ffbf:	90                   	nop

c001ffc0 <FAT::stat(void*, unsigned long long*)>:
c001ffc0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ffc5:	75 06                	jne    c001ffcd <FAT::stat(void*, unsigned long long*)+0xd>
c001ffc7:	b8 04 00 00 00       	mov    eax,0x4
c001ffcc:	c3                   	ret    
c001ffcd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ffd2:	75 06                	jne    c001ffda <FAT::stat(void*, unsigned long long*)+0x1a>
c001ffd4:	b8 04 00 00 00       	mov    eax,0x4
c001ffd9:	c3                   	ret    
c001ffda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffde:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ffe1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ffe4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ffe8:	89 01                	mov    DWORD PTR [ecx],eax
c001ffea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ffed:	b8 00 00 00 00       	mov    eax,0x0
c001fff2:	c3                   	ret    
c001fff3:	90                   	nop

c001fff4 <FAT::~FAT()>:
c001fff4:	83 ec 0c             	sub    esp,0xc
c001fff7:	ba 34 c2 02 c0       	mov    edx,0xc002c234
c001fffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020000:	89 10                	mov    DWORD PTR [eax],edx
c0020002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020006:	83 ec 0c             	sub    esp,0xc
c0020009:	50                   	push   eax
c002000a:	e8 bd 2a ff ff       	call   c0012acc <Filesystem::~Filesystem()>
c002000f:	83 c4 10             	add    esp,0x10
c0020012:	90                   	nop
c0020013:	83 c4 0c             	add    esp,0xc
c0020016:	c3                   	ret    
c0020017:	90                   	nop

c0020018 <FAT::~FAT()>:
c0020018:	83 ec 0c             	sub    esp,0xc
c002001b:	83 ec 0c             	sub    esp,0xc
c002001e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020022:	e8 cd ff ff ff       	call   c001fff4 <FAT::~FAT()>
c0020027:	83 c4 10             	add    esp,0x10
c002002a:	83 ec 08             	sub    esp,0x8
c002002d:	6a 08                	push   0x8
c002002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020033:	e8 8d 26 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0020038:	83 c4 10             	add    esp,0x10
c002003b:	83 c4 0c             	add    esp,0xc
c002003e:	c3                   	ret    
c002003f:	90                   	nop

c0020040 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020040:	83 ec 1c             	sub    esp,0x1c
c0020043:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002004a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002004f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020053:	8b 04 85 a0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c60]
c002005a:	83 f8 ff             	cmp    eax,0xffffffff
c002005d:	75 34                	jne    c0020093 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002005f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020063:	88 c2                	mov    dl,al
c0020065:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c002006a:	01 d0                	add    eax,edx
c002006c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020070:	8b 15 80 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f380
c0020076:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002007a:	89 14 85 a0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c60],edx
c0020081:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c0020086:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002008a:	89 14 85 20 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0be0],edx
c0020091:	eb 17                	jmp    c00200aa <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020093:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020097:	88 c2                	mov    dl,al
c0020099:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002009d:	8b 04 85 a0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c60]
c00200a4:	01 d0                	add    eax,edx
c00200a6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00200aa:	83 ec 04             	sub    esp,0x4
c00200ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00200b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00200b5:	8d 44 24 15          	lea    eax,[esp+0x15]
c00200b9:	50                   	push   eax
c00200ba:	e8 3f 6c fe ff       	call   c0006cfe <f_getlabel>
c00200bf:	83 c4 10             	add    esp,0x10
c00200c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00200cb:	75 07                	jne    c00200d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00200cd:	b8 00 00 00 00       	mov    eax,0x0
c00200d2:	eb 05                	jmp    c00200d9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00200d4:	b8 01 00 00 00       	mov    eax,0x1
c00200d9:	83 c4 1c             	add    esp,0x1c
c00200dc:	c3                   	ret    
c00200dd:	90                   	nop

c00200de <FAT::setlabel(LogicalDisk*, int, char*)>:
c00200de:	57                   	push   edi
c00200df:	83 ec 58             	sub    esp,0x58
c00200e2:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00200ea:	8d 54 24 10          	lea    edx,[esp+0x10]
c00200ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00200f3:	b8 00 00 00 00       	mov    eax,0x0
c00200f8:	fc                   	cld    
c00200f9:	89 d7                	mov    edi,edx
c00200fb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00200fd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020101:	8b 04 85 a0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c60]
c0020108:	83 f8 ff             	cmp    eax,0xffffffff
c002010b:	75 34                	jne    c0020141 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002010d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020111:	88 c2                	mov    dl,al
c0020113:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c0020118:	01 d0                	add    eax,edx
c002011a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002011e:	8b 15 80 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f380
c0020124:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020128:	89 14 85 a0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c60],edx
c002012f:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c0020134:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020138:	89 14 85 20 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0be0],edx
c002013f:	eb 17                	jmp    c0020158 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020141:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020145:	88 c2                	mov    dl,al
c0020147:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002014b:	8b 04 85 a0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c60]
c0020152:	01 d0                	add    eax,edx
c0020154:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020158:	83 ec 08             	sub    esp,0x8
c002015b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002015f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020163:	50                   	push   eax
c0020164:	e8 e3 07 fe ff       	call   c000094c <strcat>
c0020169:	83 c4 10             	add    esp,0x10
c002016c:	83 ec 0c             	sub    esp,0xc
c002016f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020173:	50                   	push   eax
c0020174:	e8 73 6d fe ff       	call   c0006eec <f_setlabel>
c0020179:	83 c4 10             	add    esp,0x10
c002017c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020180:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020185:	75 07                	jne    c002018e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020187:	b8 00 00 00 00       	mov    eax,0x0
c002018c:	eb 05                	jmp    c0020193 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002018e:	b8 01 00 00 00       	mov    eax,0x1
c0020193:	83 c4 58             	add    esp,0x58
c0020196:	5f                   	pop    edi
c0020197:	c3                   	ret    

c0020198 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020198:	83 ec 2c             	sub    esp,0x2c
c002019b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00201a3:	83 ec 08             	sub    esp,0x8
c00201a6:	68 0c c2 02 c0       	push   0xc002c20c
c00201ab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00201af:	e8 e4 06 fe ff       	call   c0000898 <strcmp>
c00201b4:	83 c4 10             	add    esp,0x10
c00201b7:	85 c0                	test   eax,eax
c00201b9:	0f 94 c0             	sete   al
c00201bc:	84 c0                	test   al,al
c00201be:	74 0d                	je     c00201cd <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00201c0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00201c8:	e9 a6 00 00 00       	jmp    c0020273 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00201cd:	83 ec 08             	sub    esp,0x8
c00201d0:	68 fe c1 02 c0       	push   0xc002c1fe
c00201d5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00201d9:	e8 ba 06 fe ff       	call   c0000898 <strcmp>
c00201de:	83 c4 10             	add    esp,0x10
c00201e1:	85 c0                	test   eax,eax
c00201e3:	0f 94 c0             	sete   al
c00201e6:	84 c0                	test   al,al
c00201e8:	74 0a                	je     c00201f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00201ea:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00201f2:	eb 7f                	jmp    c0020273 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00201f4:	83 ec 08             	sub    esp,0x8
c00201f7:	68 04 c2 02 c0       	push   0xc002c204
c00201fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020200:	e8 93 06 fe ff       	call   c0000898 <strcmp>
c0020205:	83 c4 10             	add    esp,0x10
c0020208:	85 c0                	test   eax,eax
c002020a:	0f 94 c0             	sete   al
c002020d:	84 c0                	test   al,al
c002020f:	74 0a                	je     c002021b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020211:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020219:	eb 58                	jmp    c0020273 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002021b:	83 ec 08             	sub    esp,0x8
c002021e:	68 4c 94 02 c0       	push   0xc002944c
c0020223:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020227:	e8 6c 06 fe ff       	call   c0000898 <strcmp>
c002022c:	83 c4 10             	add    esp,0x10
c002022f:	85 c0                	test   eax,eax
c0020231:	0f 94 c0             	sete   al
c0020234:	84 c0                	test   al,al
c0020236:	74 0a                	je     c0020242 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020238:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020240:	eb 31                	jmp    c0020273 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020242:	83 ec 08             	sub    esp,0x8
c0020245:	68 0a c2 02 c0       	push   0xc002c20a
c002024a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002024e:	e8 45 06 fe ff       	call   c0000898 <strcmp>
c0020253:	83 c4 10             	add    esp,0x10
c0020256:	85 c0                	test   eax,eax
c0020258:	0f 94 c0             	sete   al
c002025b:	84 c0                	test   al,al
c002025d:	74 0a                	je     c0020269 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002025f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020267:	eb 0a                	jmp    c0020273 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020269:	b8 08 00 00 00       	mov    eax,0x8
c002026e:	e9 df 00 00 00       	jmp    c0020352 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020273:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002027a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002027f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020283:	8b 04 85 a0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c60]
c002028a:	83 f8 ff             	cmp    eax,0xffffffff
c002028d:	75 34                	jne    c00202c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002028f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020293:	88 c2                	mov    dl,al
c0020295:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c002029a:	01 d0                	add    eax,edx
c002029c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00202a0:	8b 15 80 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f380
c00202a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202aa:	89 14 85 a0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c60],edx
c00202b1:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c00202b6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00202ba:	89 14 85 20 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0be0],edx
c00202c1:	eb 17                	jmp    c00202da <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00202c3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00202c7:	88 c2                	mov    dl,al
c00202c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202cd:	8b 04 85 a0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c60]
c00202d4:	01 d0                	add    eax,edx
c00202d6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00202da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202de:	88 04 24             	mov    BYTE PTR [esp],al
c00202e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00202e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00202e9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00202f1:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00202f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00202fe:	83 ec 0c             	sub    esp,0xc
c0020301:	68 00 20 00 00       	push   0x2000
c0020306:	e8 8e f2 fe ff       	call   c000f599 <malloc>
c002030b:	83 c4 10             	add    esp,0x10
c002030e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020312:	68 00 20 00 00       	push   0x2000
c0020317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002031b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002031f:	50                   	push   eax
c0020320:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020324:	50                   	push   eax
c0020325:	e8 0d 70 fe ff       	call   c0007337 <f_mkfs>
c002032a:	83 c4 10             	add    esp,0x10
c002032d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020331:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020336:	75 07                	jne    c002033f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020338:	b8 00 00 00 00       	mov    eax,0x0
c002033d:	eb 13                	jmp    c0020352 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002033f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020344:	75 07                	jne    c002034d <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c0020346:	b8 09 00 00 00       	mov    eax,0x9
c002034b:	eb 05                	jmp    c0020352 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002034d:	b8 01 00 00 00       	mov    eax,0x1
c0020352:	83 c4 2c             	add    esp,0x2c
c0020355:	c3                   	ret    

c0020356 <FAT::tryMount(LogicalDisk*, int)>:
c0020356:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002035c:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c0020361:	83 f8 14             	cmp    eax,0x14
c0020364:	75 17                	jne    c002037d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020366:	83 ec 0c             	sub    esp,0xc
c0020369:	68 10 c2 02 c0       	push   0xc002c210
c002036e:	e8 06 9c ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0020373:	83 c4 10             	add    esp,0x10
c0020376:	b0 00                	mov    al,0x0
c0020378:	e9 d7 01 00 00       	jmp    c0020554 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002037d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020384:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002038a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020390:	3d 00 02 00 00       	cmp    eax,0x200
c0020395:	74 07                	je     c002039e <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020397:	b0 00                	mov    al,0x0
c0020399:	e9 b6 01 00 00       	jmp    c0020554 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002039e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00203a6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00203ad:	8b 04 85 a0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c60]
c00203b4:	83 f8 ff             	cmp    eax,0xffffffff
c00203b7:	74 07                	je     c00203c0 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00203b9:	b0 01                	mov    al,0x1
c00203bb:	e9 94 01 00 00       	jmp    c0020554 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203c0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00203ca:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00203d2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00203d9:	88 c2                	mov    dl,al
c00203db:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c00203e0:	01 d0                	add    eax,edx
c00203e2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00203e9:	8b 15 80 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f380
c00203ef:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00203f6:	89 14 85 a0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c60],edx
c00203fd:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c0020402:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020409:	89 14 85 20 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0be0],edx
c0020410:	83 ec 0c             	sub    esp,0xc
c0020413:	68 54 02 00 00       	push   0x254
c0020418:	e8 7c f1 fe ff       	call   c000f599 <malloc>
c002041d:	83 c4 10             	add    esp,0x10
c0020420:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020427:	83 ec 04             	sub    esp,0x4
c002042a:	6a 00                	push   0x0
c002042c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020433:	50                   	push   eax
c0020434:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002043b:	e8 b5 4a fe ff       	call   c0004ef5 <f_mount>
c0020440:	83 c4 10             	add    esp,0x10
c0020443:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002044a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020452:	74 19                	je     c002046d <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020454:	83 ec 0c             	sub    esp,0xc
c0020457:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002045e:	e8 56 f1 fe ff       	call   c000f5b9 <rfree>
c0020463:	83 c4 10             	add    esp,0x10
c0020466:	b0 00                	mov    al,0x0
c0020468:	e9 e7 00 00 00       	jmp    c0020554 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002046d:	83 ec 04             	sub    esp,0x4
c0020470:	68 00 01 00 00       	push   0x100
c0020475:	6a 00                	push   0x0
c0020477:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002047e:	50                   	push   eax
c002047f:	e8 cc 02 fe ff       	call   c0000750 <memset>
c0020484:	83 c4 10             	add    esp,0x10
c0020487:	83 ec 08             	sub    esp,0x8
c002048a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020491:	50                   	push   eax
c0020492:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020499:	50                   	push   eax
c002049a:	e8 ad 04 fe ff       	call   c000094c <strcat>
c002049f:	83 c4 10             	add    esp,0x10
c00204a2:	83 ec 08             	sub    esp,0x8
c00204a5:	68 1e c2 02 c0       	push   0xc002c21e
c00204aa:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00204b1:	50                   	push   eax
c00204b2:	e8 95 04 fe ff       	call   c000094c <strcat>
c00204b7:	83 c4 10             	add    esp,0x10
c00204ba:	83 ec 04             	sub    esp,0x4
c00204bd:	6a 01                	push   0x1
c00204bf:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00204c6:	50                   	push   eax
c00204c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00204cb:	50                   	push   eax
c00204cc:	e8 86 4a fe ff       	call   c0004f57 <f_open>
c00204d1:	83 c4 10             	add    esp,0x10
c00204d4:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00204db:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00204e2:	85 c0                	test   eax,eax
c00204e4:	74 0a                	je     c00204f0 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00204e6:	78 2d                	js     c0020515 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00204e8:	83 e8 04             	sub    eax,0x4
c00204eb:	83 f8 01             	cmp    eax,0x1
c00204ee:	77 25                	ja     c0020515 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00204f0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00204f8:	83 ec 0c             	sub    esp,0xc
c00204fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00204ff:	50                   	push   eax
c0020500:	e8 a4 55 fe ff       	call   c0005aa9 <f_close>
c0020505:	83 c4 10             	add    esp,0x10
c0020508:	90                   	nop
c0020509:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020511:	74 3a                	je     c002054d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020513:	eb 2d                	jmp    c0020542 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020515:	83 ec 0c             	sub    esp,0xc
c0020518:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002051f:	e8 95 f0 fe ff       	call   c000f5b9 <rfree>
c0020524:	83 c4 10             	add    esp,0x10
c0020527:	83 ec 04             	sub    esp,0x4
c002052a:	6a 00                	push   0x0
c002052c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020533:	50                   	push   eax
c0020534:	6a 00                	push   0x0
c0020536:	e8 ba 49 fe ff       	call   c0004ef5 <f_mount>
c002053b:	83 c4 10             	add    esp,0x10
c002053e:	b0 00                	mov    al,0x0
c0020540:	eb 12                	jmp    c0020554 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020542:	a1 80 f3 02 c0       	mov    eax,ds:0xc002f380
c0020547:	40                   	inc    eax
c0020548:	a3 80 f3 02 c0       	mov    ds:0xc002f380,eax
c002054d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020554:	81 c4 6c 03 00 00    	add    esp,0x36c
c002055a:	c3                   	ret    
c002055b:	90                   	nop

c002055c <FAT::getFileFirstSector(char const*)>:
c002055c:	53                   	push   ebx
c002055d:	83 ec 28             	sub    esp,0x28
c0020560:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020568:	83 ec 0c             	sub    esp,0xc
c002056b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002056f:	e8 25 f0 fe ff       	call   c000f599 <malloc>
c0020574:	83 c4 10             	add    esp,0x10
c0020577:	89 c3                	mov    ebx,eax
c0020579:	a1 b0 f2 02 c0       	mov    eax,ds:0xc002f2b0
c002057e:	83 ec 04             	sub    esp,0x4
c0020581:	50                   	push   eax
c0020582:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020586:	53                   	push   ebx
c0020587:	e8 70 27 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c002058c:	83 c4 10             	add    esp,0x10
c002058f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020593:	83 ec 08             	sub    esp,0x8
c0020596:	6a 01                	push   0x1
c0020598:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002059c:	e8 bf 27 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c00205a1:	83 c4 10             	add    esp,0x10
c00205a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00205aa:	83 c0 0c             	add    eax,0xc
c00205ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00205af:	83 ec 0c             	sub    esp,0xc
c00205b2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00205b6:	52                   	push   edx
c00205b7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00205bb:	52                   	push   edx
c00205bc:	6a 00                	push   0x0
c00205be:	6a 04                	push   0x4
c00205c0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00205c4:	ff d0                	call   eax
c00205c6:	83 c4 20             	add    esp,0x20
c00205c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205cd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00205d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00205d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00205db:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00205de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00205e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00205e5:	83 ec 0c             	sub    esp,0xc
c00205e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00205ec:	e8 cd 27 ff ff       	call   c0012dbe <File::close()>
c00205f1:	83 c4 10             	add    esp,0x10
c00205f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205f8:	ba 00 00 00 00       	mov    edx,0x0
c00205fd:	83 c4 28             	add    esp,0x28
c0020600:	5b                   	pop    ebx
c0020601:	c3                   	ret    

c0020602 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020602:	57                   	push   edi
c0020603:	56                   	push   esi
c0020604:	53                   	push   ebx
c0020605:	81 ec 50 02 00 00    	sub    esp,0x250
c002060b:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020613:	74 0a                	je     c002061f <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020615:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c002061d:	75 0a                	jne    c0020629 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002061f:	b8 04 00 00 00       	mov    eax,0x4
c0020624:	e9 29 01 00 00       	jmp    c0020752 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020629:	83 ec 08             	sub    esp,0x8
c002062c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020633:	50                   	push   eax
c0020634:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002063b:	e8 73 5a fe ff       	call   c00060b3 <f_readdir>
c0020640:	83 c4 10             	add    esp,0x10
c0020643:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002064a:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020651:	83 ec 0c             	sub    esp,0xc
c0020654:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002065b:	83 c0 1a             	add    eax,0x1a
c002065e:	50                   	push   eax
c002065f:	e8 08 01 fe ff       	call   c000076c <strlen>
c0020664:	83 c4 10             	add    esp,0x10
c0020667:	ba 00 00 00 00       	mov    edx,0x0
c002066c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020670:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020674:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002067b:	0f b6 c0             	movzx  eax,al
c002067e:	83 e0 10             	and    eax,0x10
c0020681:	74 07                	je     c002068a <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020683:	b8 02 00 00 00       	mov    eax,0x2
c0020688:	eb 05                	jmp    c002068f <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002068a:	b8 01 00 00 00       	mov    eax,0x1
c002068f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020693:	83 ec 08             	sub    esp,0x8
c0020696:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002069d:	83 c0 1a             	add    eax,0x1a
c00206a0:	50                   	push   eax
c00206a1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00206a5:	83 c0 10             	add    eax,0x10
c00206a8:	50                   	push   eax
c00206a9:	e8 5e 01 fe ff       	call   c000080c <strcpy>
c00206ae:	83 c4 10             	add    esp,0x10
c00206b1:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00206b8:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00206bf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00206c3:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00206ca:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00206d1:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00206d8:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00206df:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00206e6:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00206ed:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00206f4:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00206fb:	89 c6                	mov    esi,eax
c00206fd:	89 d7                	mov    edi,edx
c00206ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020701:	89 c8                	mov    eax,ecx
c0020703:	89 fa                	mov    edx,edi
c0020705:	89 f3                	mov    ebx,esi
c0020707:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002070e:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020715:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c002071c:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020723:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020729:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020730:	84 c0                	test   al,al
c0020732:	75 07                	jne    c002073b <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020734:	b8 07 00 00 00       	mov    eax,0x7
c0020739:	eb 17                	jmp    c0020752 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002073b:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020742:	85 c0                	test   eax,eax
c0020744:	75 07                	jne    c002074d <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020746:	b8 00 00 00 00       	mov    eax,0x0
c002074b:	eb 05                	jmp    c0020752 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002074d:	b8 01 00 00 00       	mov    eax,0x1
c0020752:	81 c4 50 02 00 00    	add    esp,0x250
c0020758:	5b                   	pop    ebx
c0020759:	5e                   	pop    esi
c002075a:	5f                   	pop    edi
c002075b:	c3                   	ret    

c002075c <FAT::read(void*, unsigned long, void*, int*)>:
c002075c:	83 ec 1c             	sub    esp,0x1c
c002075f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020764:	74 07                	je     c002076d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020766:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002076b:	75 07                	jne    c0020774 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002076d:	b8 04 00 00 00       	mov    eax,0x4
c0020772:	eb 3d                	jmp    c00207b1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020774:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020778:	50                   	push   eax
c0020779:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002077d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020781:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020785:	e8 09 4c fe ff       	call   c0005393 <f_read>
c002078a:	83 c4 10             	add    esp,0x10
c002078d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020791:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020795:	89 c2                	mov    edx,eax
c0020797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002079b:	89 10                	mov    DWORD PTR [eax],edx
c002079d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207a1:	85 c0                	test   eax,eax
c00207a3:	75 07                	jne    c00207ac <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00207a5:	b8 00 00 00 00       	mov    eax,0x0
c00207aa:	eb 05                	jmp    c00207b1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00207ac:	b8 01 00 00 00       	mov    eax,0x1
c00207b1:	83 c4 1c             	add    esp,0x1c
c00207b4:	c3                   	ret    
c00207b5:	90                   	nop

c00207b6 <FAT::write(void*, unsigned long, void*, int*)>:
c00207b6:	83 ec 1c             	sub    esp,0x1c
c00207b9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207be:	74 07                	je     c00207c7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00207c0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00207c5:	75 07                	jne    c00207ce <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00207c7:	b8 04 00 00 00       	mov    eax,0x4
c00207cc:	eb 3d                	jmp    c002080b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00207ce:	8d 44 24 08          	lea    eax,[esp+0x8]
c00207d2:	50                   	push   eax
c00207d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00207db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207df:	e8 2f 4e fe ff       	call   c0005613 <f_write>
c00207e4:	83 c4 10             	add    esp,0x10
c00207e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207ef:	89 c2                	mov    edx,eax
c00207f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00207f5:	89 10                	mov    DWORD PTR [eax],edx
c00207f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207fb:	85 c0                	test   eax,eax
c00207fd:	75 07                	jne    c0020806 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00207ff:	b8 00 00 00 00       	mov    eax,0x0
c0020804:	eb 05                	jmp    c002080b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020806:	b8 01 00 00 00       	mov    eax,0x1
c002080b:	83 c4 1c             	add    esp,0x1c
c002080e:	c3                   	ret    
c002080f:	90                   	nop

c0020810 <FAT::close(void*)>:
c0020810:	83 ec 1c             	sub    esp,0x1c
c0020813:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020818:	75 07                	jne    c0020821 <FAT::close(void*)+0x11>
c002081a:	b8 04 00 00 00       	mov    eax,0x4
c002081f:	eb 36                	jmp    c0020857 <FAT::close(void*)+0x47>
c0020821:	83 ec 0c             	sub    esp,0xc
c0020824:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020828:	e8 7c 52 fe ff       	call   c0005aa9 <f_close>
c002082d:	83 c4 10             	add    esp,0x10
c0020830:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020834:	83 ec 0c             	sub    esp,0xc
c0020837:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002083b:	e8 69 ed fe ff       	call   c000f5a9 <free>
c0020840:	83 c4 10             	add    esp,0x10
c0020843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020847:	85 c0                	test   eax,eax
c0020849:	75 07                	jne    c0020852 <FAT::close(void*)+0x42>
c002084b:	b8 00 00 00 00       	mov    eax,0x0
c0020850:	eb 05                	jmp    c0020857 <FAT::close(void*)+0x47>
c0020852:	b8 01 00 00 00       	mov    eax,0x1
c0020857:	83 c4 1c             	add    esp,0x1c
c002085a:	c3                   	ret    
c002085b:	90                   	nop

c002085c <FAT::closeDir(void*)>:
c002085c:	83 ec 1c             	sub    esp,0x1c
c002085f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020864:	75 07                	jne    c002086d <FAT::closeDir(void*)+0x11>
c0020866:	b8 04 00 00 00       	mov    eax,0x4
c002086b:	eb 36                	jmp    c00208a3 <FAT::closeDir(void*)+0x47>
c002086d:	83 ec 0c             	sub    esp,0xc
c0020870:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020874:	e8 18 58 fe ff       	call   c0006091 <f_closedir>
c0020879:	83 c4 10             	add    esp,0x10
c002087c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020880:	83 ec 0c             	sub    esp,0xc
c0020883:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020887:	e8 1d ed fe ff       	call   c000f5a9 <free>
c002088c:	83 c4 10             	add    esp,0x10
c002088f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020893:	85 c0                	test   eax,eax
c0020895:	75 07                	jne    c002089e <FAT::closeDir(void*)+0x42>
c0020897:	b8 00 00 00 00       	mov    eax,0x0
c002089c:	eb 05                	jmp    c00208a3 <FAT::closeDir(void*)+0x47>
c002089e:	b8 01 00 00 00       	mov    eax,0x1
c00208a3:	83 c4 1c             	add    esp,0x1c
c00208a6:	c3                   	ret    
c00208a7:	90                   	nop

c00208a8 <FAT::seek(void*, unsigned long long)>:
c00208a8:	83 ec 2c             	sub    esp,0x2c
c00208ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00208b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00208b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208bb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00208c0:	75 07                	jne    c00208c9 <FAT::seek(void*, unsigned long long)+0x21>
c00208c2:	b8 04 00 00 00       	mov    eax,0x4
c00208c7:	eb 2f                	jmp    c00208f8 <FAT::seek(void*, unsigned long long)+0x50>
c00208c9:	83 ec 04             	sub    esp,0x4
c00208cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00208d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00208d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00208d8:	e8 fb 51 fe ff       	call   c0005ad8 <f_lseek>
c00208dd:	83 c4 10             	add    esp,0x10
c00208e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00208e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208e8:	85 c0                	test   eax,eax
c00208ea:	75 07                	jne    c00208f3 <FAT::seek(void*, unsigned long long)+0x4b>
c00208ec:	b8 00 00 00 00       	mov    eax,0x0
c00208f1:	eb 05                	jmp    c00208f8 <FAT::seek(void*, unsigned long long)+0x50>
c00208f3:	b8 01 00 00 00       	mov    eax,0x1
c00208f8:	83 c4 2c             	add    esp,0x2c
c00208fb:	c3                   	ret    

c00208fc <fatWrapperReadDisk>:
c00208fc:	83 ec 1c             	sub    esp,0x1c
c00208ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020903:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020907:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002090b:	89 04 24             	mov    DWORD PTR [esp],eax
c002090e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020912:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020916:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002091b:	8b 04 85 80 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c80]
c0020922:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020926:	83 ec 0c             	sub    esp,0xc
c0020929:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002092d:	52                   	push   edx
c002092e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020932:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020936:	50                   	push   eax
c0020937:	e8 bc 57 ff ff       	call   c00160f8 <LogicalDisk::read(unsigned long long, int, void*)>
c002093c:	83 c4 20             	add    esp,0x20
c002093f:	83 c4 1c             	add    esp,0x1c
c0020942:	c3                   	ret    

c0020943 <fatWrapperWriteDisk>:
c0020943:	83 ec 1c             	sub    esp,0x1c
c0020946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002094a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002094e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020952:	89 04 24             	mov    DWORD PTR [esp],eax
c0020955:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020959:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002095d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020962:	8b 04 85 80 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c80]
c0020969:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002096d:	83 ec 0c             	sub    esp,0xc
c0020970:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020974:	52                   	push   edx
c0020975:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020979:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002097d:	50                   	push   eax
c002097e:	e8 e1 57 ff ff       	call   c0016164 <LogicalDisk::write(unsigned long long, int, void*)>
c0020983:	83 c4 20             	add    esp,0x20
c0020986:	83 c4 1c             	add    esp,0x1c
c0020989:	c3                   	ret    

c002098a <fatWrapperIoctl>:
c002098a:	53                   	push   ebx
c002098b:	83 ec 28             	sub    esp,0x28
c002098e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020992:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020996:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002099a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002099e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00209a3:	75 31                	jne    c00209d6 <fatWrapperIoctl+0x4c>
c00209a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00209ad:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00209b2:	8b 04 85 80 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c80]
c00209b9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00209c9:	66 89 02             	mov    WORD PTR [edx],ax
c00209cc:	b8 00 00 00 00       	mov    eax,0x0
c00209d1:	e9 b2 00 00 00       	jmp    c0020a88 <fatWrapperIoctl+0xfe>
c00209d6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00209db:	75 6a                	jne    c0020a47 <fatWrapperIoctl+0xbd>
c00209dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209e5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00209ea:	8b 04 85 80 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c80]
c00209f1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209f7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00209fd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020a03:	89 c8                	mov    eax,ecx
c0020a05:	89 da                	mov    edx,ebx
c0020a07:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020a0b:	c1 e0 0a             	shl    eax,0xa
c0020a0e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020a13:	8b 0c 8d 80 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c80]
c0020a1a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020a20:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020a26:	89 cb                	mov    ebx,ecx
c0020a28:	c1 fb 1f             	sar    ebx,0x1f
c0020a2b:	53                   	push   ebx
c0020a2c:	51                   	push   ecx
c0020a2d:	52                   	push   edx
c0020a2e:	50                   	push   eax
c0020a2f:	e8 b0 5e 00 00       	call   c00268e4 <__udivdi3>
c0020a34:	83 c4 10             	add    esp,0x10
c0020a37:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020a3b:	89 01                	mov    DWORD PTR [ecx],eax
c0020a3d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020a40:	b8 00 00 00 00       	mov    eax,0x0
c0020a45:	eb 41                	jmp    c0020a88 <fatWrapperIoctl+0xfe>
c0020a47:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020a4c:	75 07                	jne    c0020a55 <fatWrapperIoctl+0xcb>
c0020a4e:	b8 00 00 00 00       	mov    eax,0x0
c0020a53:	eb 33                	jmp    c0020a88 <fatWrapperIoctl+0xfe>
c0020a55:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020a5a:	75 19                	jne    c0020a75 <fatWrapperIoctl+0xeb>
c0020a5c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a68:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020a6e:	b8 00 00 00 00       	mov    eax,0x0
c0020a73:	eb 13                	jmp    c0020a88 <fatWrapperIoctl+0xfe>
c0020a75:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020a7a:	75 07                	jne    c0020a83 <fatWrapperIoctl+0xf9>
c0020a7c:	b8 00 00 00 00       	mov    eax,0x0
c0020a81:	eb 05                	jmp    c0020a88 <fatWrapperIoctl+0xfe>
c0020a83:	b8 04 00 00 00       	mov    eax,0x4
c0020a88:	83 c4 28             	add    esp,0x28
c0020a8b:	5b                   	pop    ebx
c0020a8c:	c3                   	ret    
c0020a8d:	90                   	nop

c0020a8e <FAT::FAT()>:
c0020a8e:	83 ec 1c             	sub    esp,0x1c
c0020a91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a95:	83 ec 0c             	sub    esp,0xc
c0020a98:	50                   	push   eax
c0020a99:	e8 0a 20 ff ff       	call   c0012aa8 <Filesystem::Filesystem()>
c0020a9e:	83 c4 10             	add    esp,0x10
c0020aa1:	ba 34 c2 02 c0       	mov    edx,0xc002c234
c0020aa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aaa:	89 10                	mov    DWORD PTR [eax],edx
c0020aac:	c7 05 80 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f380,0x0
c0020ab6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020abe:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020ac3:	7f 15                	jg     c0020ada <FAT::FAT()+0x4c>
c0020ac5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ac9:	c7 04 85 a0 f3 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0c60],0xffffffff
c0020ad4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020ad8:	eb e4                	jmp    c0020abe <FAT::FAT()+0x30>
c0020ada:	90                   	nop
c0020adb:	83 c4 1c             	add    esp,0x1c
c0020ade:	c3                   	ret    
c0020adf:	90                   	nop

c0020ae0 <FAT::fixFilepath(char*)>:
c0020ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ae4:	8a 00                	mov    al,BYTE PTR [eax]
c0020ae6:	3c 40                	cmp    al,0x40
c0020ae8:	7e 2c                	jle    c0020b16 <FAT::fixFilepath(char*)+0x36>
c0020aea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020aee:	8a 00                	mov    al,BYTE PTR [eax]
c0020af0:	83 e8 41             	sub    eax,0x41
c0020af3:	88 c2                	mov    dl,al
c0020af5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020af9:	88 10                	mov    BYTE PTR [eax],dl
c0020afb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020aff:	8a 00                	mov    al,BYTE PTR [eax]
c0020b01:	0f be c0             	movsx  eax,al
c0020b04:	8b 04 85 a0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c60]
c0020b0b:	83 c0 30             	add    eax,0x30
c0020b0e:	88 c2                	mov    dl,al
c0020b10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b14:	88 10                	mov    BYTE PTR [eax],dl
c0020b16:	90                   	nop
c0020b17:	c3                   	ret    

c0020b18 <FAT::open(char const*, void**, FileOpenMode)>:
c0020b18:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b1e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b26:	74 0a                	je     c0020b32 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020b28:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b30:	75 0a                	jne    c0020b3c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020b32:	b8 04 00 00 00       	mov    eax,0x4
c0020b37:	e9 fd 00 00 00       	jmp    c0020c39 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020b3c:	83 ec 08             	sub    esp,0x8
c0020b3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b46:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b4a:	50                   	push   eax
c0020b4b:	e8 bc fc fd ff       	call   c000080c <strcpy>
c0020b50:	83 c4 10             	add    esp,0x10
c0020b53:	83 ec 08             	sub    esp,0x8
c0020b56:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020b5a:	50                   	push   eax
c0020b5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b62:	e8 79 ff ff ff       	call   c0020ae0 <FAT::fixFilepath(char*)>
c0020b67:	83 c4 10             	add    esp,0x10
c0020b6a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020b72:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b79:	83 e0 01             	and    eax,0x1
c0020b7c:	74 08                	je     c0020b86 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020b7e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020b86:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b8d:	83 e0 04             	and    eax,0x4
c0020b90:	74 10                	je     c0020ba2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020b92:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020b9a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020ba2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ba9:	83 e0 02             	and    eax,0x2
c0020bac:	74 08                	je     c0020bb6 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020bae:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020bb6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020bbd:	83 e0 08             	and    eax,0x8
c0020bc0:	74 08                	je     c0020bca <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020bc2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020bca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020bd1:	83 e0 10             	and    eax,0x10
c0020bd4:	74 08                	je     c0020bde <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020bd6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020bde:	83 ec 0c             	sub    esp,0xc
c0020be1:	68 50 02 00 00       	push   0x250
c0020be6:	e8 ae e9 fe ff       	call   c000f599 <malloc>
c0020beb:	83 c4 10             	add    esp,0x10
c0020bee:	89 c2                	mov    edx,eax
c0020bf0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020bf7:	89 10                	mov    DWORD PTR [eax],edx
c0020bf9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020c01:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c0a:	83 ec 04             	sub    esp,0x4
c0020c0d:	52                   	push   edx
c0020c0e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020c12:	52                   	push   edx
c0020c13:	50                   	push   eax
c0020c14:	e8 3e 43 fe ff       	call   c0004f57 <f_open>
c0020c19:	83 c4 10             	add    esp,0x10
c0020c1c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020c23:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020c2b:	74 07                	je     c0020c34 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020c2d:	b8 01 00 00 00       	mov    eax,0x1
c0020c32:	eb 05                	jmp    c0020c39 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020c34:	b8 00 00 00 00       	mov    eax,0x0
c0020c39:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c3f:	c3                   	ret    

c0020c40 <FAT::openDir(char const*, void**)>:
c0020c40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c4e:	74 0a                	je     c0020c5a <FAT::openDir(char const*, void**)+0x1a>
c0020c50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020c58:	75 07                	jne    c0020c61 <FAT::openDir(char const*, void**)+0x21>
c0020c5a:	b8 04 00 00 00       	mov    eax,0x4
c0020c5f:	eb 7d                	jmp    c0020cde <FAT::openDir(char const*, void**)+0x9e>
c0020c61:	83 ec 08             	sub    esp,0x8
c0020c64:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c6b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c6f:	50                   	push   eax
c0020c70:	e8 97 fb fd ff       	call   c000080c <strcpy>
c0020c75:	83 c4 10             	add    esp,0x10
c0020c78:	83 ec 08             	sub    esp,0x8
c0020c7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c7f:	50                   	push   eax
c0020c80:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c87:	e8 54 fe ff ff       	call   c0020ae0 <FAT::fixFilepath(char*)>
c0020c8c:	83 c4 10             	add    esp,0x10
c0020c8f:	83 ec 0c             	sub    esp,0xc
c0020c92:	6a 4c                	push   0x4c
c0020c94:	e8 00 e9 fe ff       	call   c000f599 <malloc>
c0020c99:	83 c4 10             	add    esp,0x10
c0020c9c:	89 c2                	mov    edx,eax
c0020c9e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ca5:	89 10                	mov    DWORD PTR [eax],edx
c0020ca7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020cae:	8b 00                	mov    eax,DWORD PTR [eax]
c0020cb0:	83 ec 08             	sub    esp,0x8
c0020cb3:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020cb7:	52                   	push   edx
c0020cb8:	50                   	push   eax
c0020cb9:	e8 d1 52 fe ff       	call   c0005f8f <f_opendir>
c0020cbe:	83 c4 10             	add    esp,0x10
c0020cc1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020cc8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020cd0:	74 07                	je     c0020cd9 <FAT::openDir(char const*, void**)+0x99>
c0020cd2:	b8 01 00 00 00       	mov    eax,0x1
c0020cd7:	eb 05                	jmp    c0020cde <FAT::openDir(char const*, void**)+0x9e>
c0020cd9:	b8 00 00 00 00       	mov    eax,0x0
c0020cde:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ce4:	c3                   	ret    
c0020ce5:	90                   	nop

c0020ce6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020ce6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020cec:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020cf4:	75 0a                	jne    c0020d00 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020cf6:	b8 04 00 00 00       	mov    eax,0x4
c0020cfb:	e9 c9 00 00 00       	jmp    c0020dc9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d00:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020d08:	75 0a                	jne    c0020d14 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020d0a:	b8 04 00 00 00       	mov    eax,0x4
c0020d0f:	e9 b5 00 00 00       	jmp    c0020dc9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d14:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020d1c:	75 0a                	jne    c0020d28 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020d1e:	b8 04 00 00 00       	mov    eax,0x4
c0020d23:	e9 a1 00 00 00       	jmp    c0020dc9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d28:	83 ec 08             	sub    esp,0x8
c0020d2b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020d32:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020d39:	50                   	push   eax
c0020d3a:	e8 cd fa fd ff       	call   c000080c <strcpy>
c0020d3f:	83 c4 10             	add    esp,0x10
c0020d42:	83 ec 08             	sub    esp,0x8
c0020d45:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020d4c:	50                   	push   eax
c0020d4d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020d54:	e8 87 fd ff ff       	call   c0020ae0 <FAT::fixFilepath(char*)>
c0020d59:	83 c4 10             	add    esp,0x10
c0020d5c:	83 ec 08             	sub    esp,0x8
c0020d5f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d63:	50                   	push   eax
c0020d64:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020d6b:	50                   	push   eax
c0020d6c:	e8 dd 53 fe ff       	call   c000614e <f_stat>
c0020d71:	83 c4 10             	add    esp,0x10
c0020d74:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020d7b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020d82:	85 c0                	test   eax,eax
c0020d84:	74 07                	je     c0020d8d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020d86:	83 f8 04             	cmp    eax,0x4
c0020d89:	74 32                	je     c0020dbd <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020d8b:	eb 37                	jmp    c0020dc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020d8d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d91:	0f b6 c0             	movzx  eax,al
c0020d94:	83 e0 10             	and    eax,0x10
c0020d97:	0f 95 c2             	setne  dl
c0020d9a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020da1:	88 10                	mov    BYTE PTR [eax],dl
c0020da3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020da6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020daa:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020db1:	89 01                	mov    DWORD PTR [ecx],eax
c0020db3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020db6:	b8 00 00 00 00       	mov    eax,0x0
c0020dbb:	eb 0c                	jmp    c0020dc9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020dbd:	b8 02 00 00 00       	mov    eax,0x2
c0020dc2:	eb 05                	jmp    c0020dc9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020dc4:	b8 01 00 00 00       	mov    eax,0x1
c0020dc9:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020dcf:	c3                   	ret    

c0020dd0 <FAT::unlink(char const*)>:
c0020dd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020dd6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020dde:	75 07                	jne    c0020de7 <FAT::unlink(char const*)+0x17>
c0020de0:	b8 04 00 00 00       	mov    eax,0x4
c0020de5:	eb 5c                	jmp    c0020e43 <FAT::unlink(char const*)+0x73>
c0020de7:	83 ec 08             	sub    esp,0x8
c0020dea:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020df1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020df5:	50                   	push   eax
c0020df6:	e8 11 fa fd ff       	call   c000080c <strcpy>
c0020dfb:	83 c4 10             	add    esp,0x10
c0020dfe:	83 ec 08             	sub    esp,0x8
c0020e01:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e05:	50                   	push   eax
c0020e06:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e0d:	e8 ce fc ff ff       	call   c0020ae0 <FAT::fixFilepath(char*)>
c0020e12:	83 c4 10             	add    esp,0x10
c0020e15:	83 ec 0c             	sub    esp,0xc
c0020e18:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e1c:	50                   	push   eax
c0020e1d:	e8 7e 56 fe ff       	call   c00064a0 <f_unlink>
c0020e22:	83 c4 10             	add    esp,0x10
c0020e25:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e2c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e33:	85 c0                	test   eax,eax
c0020e35:	75 07                	jne    c0020e3e <FAT::unlink(char const*)+0x6e>
c0020e37:	b8 00 00 00 00       	mov    eax,0x0
c0020e3c:	eb 05                	jmp    c0020e43 <FAT::unlink(char const*)+0x73>
c0020e3e:	b8 01 00 00 00       	mov    eax,0x1
c0020e43:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e49:	c3                   	ret    

c0020e4a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020e4a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020e50:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020e57:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020e5e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e66:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020e6e:	75 0a                	jne    c0020e7a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020e70:	b8 04 00 00 00       	mov    eax,0x4
c0020e75:	e9 1c 01 00 00       	jmp    c0020f96 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e7a:	83 ec 08             	sub    esp,0x8
c0020e7d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020e84:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e88:	50                   	push   eax
c0020e89:	e8 7e f9 fd ff       	call   c000080c <strcpy>
c0020e8e:	83 c4 10             	add    esp,0x10
c0020e91:	83 ec 08             	sub    esp,0x8
c0020e94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020e98:	50                   	push   eax
c0020e99:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020ea0:	e8 3b fc ff ff       	call   c0020ae0 <FAT::fixFilepath(char*)>
c0020ea5:	83 c4 10             	add    esp,0x10
c0020ea8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020eb0:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020eb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ebd:	83 e0 01             	and    eax,0x1
c0020ec0:	74 08                	je     c0020eca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020ec2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020eca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ecf:	83 e0 02             	and    eax,0x2
c0020ed2:	74 08                	je     c0020edc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020ed4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020edc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ee1:	83 e0 04             	and    eax,0x4
c0020ee4:	74 08                	je     c0020eee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020ee6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020eee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ef3:	83 e0 08             	and    eax,0x8
c0020ef6:	74 08                	je     c0020f00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020ef8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020f00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f05:	83 e0 01             	and    eax,0x1
c0020f08:	74 08                	je     c0020f12 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020f0a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020f12:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f17:	83 e0 02             	and    eax,0x2
c0020f1a:	74 08                	je     c0020f24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020f1c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020f24:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f29:	83 e0 04             	and    eax,0x4
c0020f2c:	74 08                	je     c0020f36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020f2e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020f36:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f3b:	83 e0 08             	and    eax,0x8
c0020f3e:	74 08                	je     c0020f48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020f40:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020f48:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020f4f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020f56:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020f5e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020f66:	83 ec 04             	sub    esp,0x4
c0020f69:	52                   	push   edx
c0020f6a:	50                   	push   eax
c0020f6b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020f6f:	50                   	push   eax
c0020f70:	e8 cd 5b fe ff       	call   c0006b42 <f_chmod>
c0020f75:	83 c4 10             	add    esp,0x10
c0020f78:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020f7f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020f86:	85 c0                	test   eax,eax
c0020f88:	75 07                	jne    c0020f91 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020f8a:	b8 00 00 00 00       	mov    eax,0x0
c0020f8f:	eb 05                	jmp    c0020f96 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020f91:	b8 01 00 00 00       	mov    eax,0x1
c0020f96:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020f9c:	c3                   	ret    
c0020f9d:	90                   	nop

c0020f9e <FAT::rename(char const*, char const*)>:
c0020f9e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020fa4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020fac:	74 0a                	je     c0020fb8 <FAT::rename(char const*, char const*)+0x1a>
c0020fae:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020fb6:	75 0a                	jne    c0020fc2 <FAT::rename(char const*, char const*)+0x24>
c0020fb8:	b8 04 00 00 00       	mov    eax,0x4
c0020fbd:	e9 98 00 00 00       	jmp    c002105a <FAT::rename(char const*, char const*)+0xbc>
c0020fc2:	83 ec 08             	sub    esp,0x8
c0020fc5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020fcc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020fd3:	50                   	push   eax
c0020fd4:	e8 33 f8 fd ff       	call   c000080c <strcpy>
c0020fd9:	83 c4 10             	add    esp,0x10
c0020fdc:	83 ec 08             	sub    esp,0x8
c0020fdf:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020fe6:	50                   	push   eax
c0020fe7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020fee:	e8 ed fa ff ff       	call   c0020ae0 <FAT::fixFilepath(char*)>
c0020ff3:	83 c4 10             	add    esp,0x10
c0020ff6:	83 ec 08             	sub    esp,0x8
c0020ff9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021000:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021004:	50                   	push   eax
c0021005:	e8 02 f8 fd ff       	call   c000080c <strcpy>
c002100a:	83 c4 10             	add    esp,0x10
c002100d:	83 ec 08             	sub    esp,0x8
c0021010:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021014:	50                   	push   eax
c0021015:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002101c:	e8 bf fa ff ff       	call   c0020ae0 <FAT::fixFilepath(char*)>
c0021021:	83 c4 10             	add    esp,0x10
c0021024:	83 ec 08             	sub    esp,0x8
c0021027:	8d 44 24 14          	lea    eax,[esp+0x14]
c002102b:	50                   	push   eax
c002102c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021033:	50                   	push   eax
c0021034:	e8 16 58 fe ff       	call   c000684f <f_rename>
c0021039:	83 c4 10             	add    esp,0x10
c002103c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021043:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002104a:	85 c0                	test   eax,eax
c002104c:	75 07                	jne    c0021055 <FAT::rename(char const*, char const*)+0xb7>
c002104e:	b8 00 00 00 00       	mov    eax,0x0
c0021053:	eb 05                	jmp    c002105a <FAT::rename(char const*, char const*)+0xbc>
c0021055:	b8 01 00 00 00       	mov    eax,0x1
c002105a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021060:	c3                   	ret    
c0021061:	90                   	nop

c0021062 <FAT::mkdir(char const*)>:
c0021062:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021068:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021070:	75 07                	jne    c0021079 <FAT::mkdir(char const*)+0x17>
c0021072:	b8 04 00 00 00       	mov    eax,0x4
c0021077:	eb 5c                	jmp    c00210d5 <FAT::mkdir(char const*)+0x73>
c0021079:	83 ec 08             	sub    esp,0x8
c002107c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021083:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021087:	50                   	push   eax
c0021088:	e8 7f f7 fd ff       	call   c000080c <strcpy>
c002108d:	83 c4 10             	add    esp,0x10
c0021090:	83 ec 08             	sub    esp,0x8
c0021093:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021097:	50                   	push   eax
c0021098:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002109f:	e8 3c fa ff ff       	call   c0020ae0 <FAT::fixFilepath(char*)>
c00210a4:	83 c4 10             	add    esp,0x10
c00210a7:	83 ec 0c             	sub    esp,0xc
c00210aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210ae:	50                   	push   eax
c00210af:	e8 6f 55 fe ff       	call   c0006623 <f_mkdir>
c00210b4:	83 c4 10             	add    esp,0x10
c00210b7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00210be:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00210c5:	85 c0                	test   eax,eax
c00210c7:	75 07                	jne    c00210d0 <FAT::mkdir(char const*)+0x6e>
c00210c9:	b8 00 00 00 00       	mov    eax,0x0
c00210ce:	eb 05                	jmp    c00210d5 <FAT::mkdir(char const*)+0x73>
c00210d0:	b8 01 00 00 00       	mov    eax,0x1
c00210d5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210db:	c3                   	ret    

c00210dc <FAT::exists(char const*)>:
c00210dc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00210e2:	83 ec 08             	sub    esp,0x8
c00210e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00210f0:	50                   	push   eax
c00210f1:	e8 16 f7 fd ff       	call   c000080c <strcpy>
c00210f6:	83 c4 10             	add    esp,0x10
c00210f9:	83 ec 08             	sub    esp,0x8
c00210fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021100:	50                   	push   eax
c0021101:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021108:	e8 d3 f9 ff ff       	call   c0020ae0 <FAT::fixFilepath(char*)>
c002110d:	83 c4 10             	add    esp,0x10
c0021110:	83 ec 08             	sub    esp,0x8
c0021113:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002111a:	50                   	push   eax
c002111b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002111f:	50                   	push   eax
c0021120:	e8 29 50 fe ff       	call   c000614e <f_stat>
c0021125:	83 c4 10             	add    esp,0x10
c0021128:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002112f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021136:	85 c0                	test   eax,eax
c0021138:	75 04                	jne    c002113e <FAT::exists(char const*)+0x62>
c002113a:	b0 01                	mov    al,0x1
c002113c:	eb 02                	jmp    c0021140 <FAT::exists(char const*)+0x64>
c002113e:	b0 00                	mov    al,0x0
c0021140:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021146:	c3                   	ret    
c0021147:	90                   	nop

c0021148 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021148:	b8 08 00 00 00       	mov    eax,0x8
c002114d:	c3                   	ret    

c002114e <ISO9660::seek(void*, unsigned long long)>:
c002114e:	53                   	push   ebx
c002114f:	b8 04 00 00 00       	mov    eax,0x4
c0021154:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021158:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002115c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021160:	85 d2                	test   edx,edx
c0021162:	74 17                	je     c002117b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021164:	89 c8                	mov    eax,ecx
c0021166:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021169:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002116c:	b8 01 00 00 00       	mov    eax,0x1
c0021171:	73 08                	jae    c002117b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021173:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021176:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021179:	31 c0                	xor    eax,eax
c002117b:	5b                   	pop    ebx
c002117c:	c3                   	ret    
c002117d:	90                   	nop

c002117e <ISO9660::tell(void*, unsigned long long*)>:
c002117e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021186:	85 d2                	test   edx,edx
c0021188:	74 12                	je     c002119c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002118a:	85 c0                	test   eax,eax
c002118c:	74 0e                	je     c002119c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002118e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021191:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021194:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021197:	89 10                	mov    DWORD PTR [eax],edx
c0021199:	31 c0                	xor    eax,eax
c002119b:	c3                   	ret    
c002119c:	b8 04 00 00 00       	mov    eax,0x4
c00211a1:	c3                   	ret    

c00211a2 <ISO9660::getName()>:
c00211a2:	b8 94 c2 02 c0       	mov    eax,0xc002c294
c00211a7:	c3                   	ret    

c00211a8 <ISO9660::stat(void*, unsigned long long*)>:
c00211a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00211ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211b0:	85 d2                	test   edx,edx
c00211b2:	74 12                	je     c00211c6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00211b4:	85 c0                	test   eax,eax
c00211b6:	74 0e                	je     c00211c6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00211b8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00211bb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00211be:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00211c1:	89 10                	mov    DWORD PTR [eax],edx
c00211c3:	31 c0                	xor    eax,eax
c00211c5:	c3                   	ret    
c00211c6:	b8 04 00 00 00       	mov    eax,0x4
c00211cb:	c3                   	ret    

c00211cc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00211cc:	b8 01 00 00 00       	mov    eax,0x1
c00211d1:	c3                   	ret    

c00211d2 <ISO9660::unlink(char const*)>:
c00211d2:	b8 01 00 00 00       	mov    eax,0x1
c00211d7:	c3                   	ret    

c00211d8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00211d8:	b8 01 00 00 00       	mov    eax,0x1
c00211dd:	c3                   	ret    

c00211de <ISO9660::rename(char const*, char const*)>:
c00211de:	b8 01 00 00 00       	mov    eax,0x1
c00211e3:	c3                   	ret    

c00211e4 <ISO9660::mkdir(char const*)>:
c00211e4:	b8 01 00 00 00       	mov    eax,0x1
c00211e9:	c3                   	ret    

c00211ea <ISO9660::close(void*)>:
c00211ea:	83 ec 0c             	sub    esp,0xc
c00211ed:	b8 04 00 00 00       	mov    eax,0x4
c00211f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00211f6:	85 d2                	test   edx,edx
c00211f8:	74 0e                	je     c0021208 <ISO9660::close(void*)+0x1e>
c00211fa:	83 ec 0c             	sub    esp,0xc
c00211fd:	52                   	push   edx
c00211fe:	e8 a6 e3 fe ff       	call   c000f5a9 <free>
c0021203:	83 c4 10             	add    esp,0x10
c0021206:	31 c0                	xor    eax,eax
c0021208:	83 c4 0c             	add    esp,0xc
c002120b:	c3                   	ret    

c002120c <ISO9660::closeDir(void*)>:
c002120c:	83 ec 0c             	sub    esp,0xc
c002120f:	b8 04 00 00 00       	mov    eax,0x4
c0021214:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021218:	85 d2                	test   edx,edx
c002121a:	74 0e                	je     c002122a <ISO9660::closeDir(void*)+0x1e>
c002121c:	83 ec 0c             	sub    esp,0xc
c002121f:	52                   	push   edx
c0021220:	e8 84 e3 fe ff       	call   c000f5a9 <free>
c0021225:	83 c4 10             	add    esp,0x10
c0021228:	31 c0                	xor    eax,eax
c002122a:	83 c4 0c             	add    esp,0xc
c002122d:	c3                   	ret    

c002122e <ISO9660::~ISO9660()>:
c002122e:	83 ec 0c             	sub    esp,0xc
c0021231:	ba b8 c2 02 c0       	mov    edx,0xc002c2b8
c0021236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002123a:	89 10                	mov    DWORD PTR [eax],edx
c002123c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021240:	83 ec 0c             	sub    esp,0xc
c0021243:	50                   	push   eax
c0021244:	e8 83 18 ff ff       	call   c0012acc <Filesystem::~Filesystem()>
c0021249:	83 c4 10             	add    esp,0x10
c002124c:	90                   	nop
c002124d:	83 c4 0c             	add    esp,0xc
c0021250:	c3                   	ret    
c0021251:	90                   	nop

c0021252 <ISO9660::~ISO9660()>:
c0021252:	83 ec 0c             	sub    esp,0xc
c0021255:	83 ec 0c             	sub    esp,0xc
c0021258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002125c:	e8 cd ff ff ff       	call   c002122e <ISO9660::~ISO9660()>
c0021261:	83 c4 10             	add    esp,0x10
c0021264:	83 ec 08             	sub    esp,0x8
c0021267:	6a 08                	push   0x8
c0021269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002126d:	e8 53 14 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0021272:	83 c4 10             	add    esp,0x10
c0021275:	83 c4 0c             	add    esp,0xc
c0021278:	c3                   	ret    

c0021279 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021279:	55                   	push   ebp
c002127a:	31 c9                	xor    ecx,ecx
c002127c:	57                   	push   edi
c002127d:	56                   	push   esi
c002127e:	53                   	push   ebx
c002127f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021283:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021287:	89 eb                	mov    ebx,ebp
c0021289:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002128d:	39 ce                	cmp    esi,ecx
c002128f:	7e 17                	jle    c00212a8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021291:	31 d2                	xor    edx,edx
c0021293:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021297:	7d 13                	jge    c00212ac <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021299:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002129d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00212a0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00212a3:	75 0d                	jne    c00212b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00212a5:	42                   	inc    edx
c00212a6:	eb eb                	jmp    c0021293 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00212a8:	31 c0                	xor    eax,eax
c00212aa:	eb 0a                	jmp    c00212b6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00212ac:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00212b0:	eb 04                	jmp    c00212b6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00212b2:	41                   	inc    ecx
c00212b3:	43                   	inc    ebx
c00212b4:	eb d7                	jmp    c002128d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00212b6:	5b                   	pop    ebx
c00212b7:	5e                   	pop    esi
c00212b8:	5f                   	pop    edi
c00212b9:	5d                   	pop    ebp
c00212ba:	c3                   	ret    

c00212bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00212bb:	57                   	push   edi
c00212bc:	56                   	push   esi
c00212bd:	53                   	push   ebx
c00212be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00212c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00212c6:	39 0d 80 f4 02 c0    	cmp    DWORD PTR ds:0xc002f480,ecx
c00212cc:	75 08                	jne    c00212d6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00212ce:	38 05 14 d3 02 c0    	cmp    BYTE PTR ds:0xc002d314,al
c00212d4:	74 2b                	je     c0021301 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00212d6:	83 ec 0c             	sub    esp,0xc
c00212d9:	a2 14 d3 02 c0       	mov    ds:0xc002d314,al
c00212de:	68 a0 f4 02 c0       	push   0xc002f4a0
c00212e3:	0f be c0             	movsx  eax,al
c00212e6:	6a 01                	push   0x1
c00212e8:	89 0d 80 f4 02 c0    	mov    DWORD PTR ds:0xc002f480,ecx
c00212ee:	31 db                	xor    ebx,ebx
c00212f0:	53                   	push   ebx
c00212f1:	51                   	push   ecx
c00212f2:	ff 34 85 7c e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1d84]
c00212f9:	e8 fa 4d ff ff       	call   c00160f8 <LogicalDisk::read(unsigned long long, int, void*)>
c00212fe:	83 c4 20             	add    esp,0x20
c0021301:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021305:	be a0 f4 02 c0       	mov    esi,0xc002f4a0
c002130a:	b9 00 08 00 00       	mov    ecx,0x800
c002130f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021311:	5b                   	pop    ebx
c0021312:	5e                   	pop    esi
c0021313:	5f                   	pop    edi
c0021314:	c3                   	ret    
c0021315:	90                   	nop

c0021316 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021316:	81 ec 10 08 00 00    	sub    esp,0x810
c002131c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021323:	83 c0 41             	add    eax,0x41
c0021326:	0f be c0             	movsx  eax,al
c0021329:	50                   	push   eax
c002132a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002132e:	50                   	push   eax
c002132f:	6a 10                	push   0x10
c0021331:	e8 85 ff ff ff       	call   c00212bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021336:	83 c4 10             	add    esp,0x10
c0021339:	31 c0                	xor    eax,eax
c002133b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021340:	75 1d                	jne    c002135f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021342:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021347:	75 16                	jne    c002135f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021349:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002134e:	75 0f                	jne    c002135f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021350:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021355:	75 08                	jne    c002135f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021357:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002135c:	0f 94 c0             	sete   al
c002135f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021365:	c3                   	ret    

c0021366 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021366:	55                   	push   ebp
c0021367:	57                   	push   edi
c0021368:	56                   	push   esi
c0021369:	53                   	push   ebx
c002136a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021370:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021377:	85 ed                	test   ebp,ebp
c0021379:	0f 84 da 01 00 00    	je     c0021559 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002137f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021387:	0f 84 cc 01 00 00    	je     c0021559 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002138d:	b8 01 00 00 00       	mov    eax,0x1
c0021392:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021396:	0f 85 c2 01 00 00    	jne    c002155e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002139c:	31 d2                	xor    edx,edx
c002139e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00213a5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00213a8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00213ab:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00213ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00213b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00213b5:	01 c8                	add    eax,ecx
c00213b7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00213ba:	11 da                	adc    edx,ebx
c00213bc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00213c0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00213c4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00213c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00213cc:	19 d7                	sbb    edi,edx
c00213ce:	72 11                	jb     c00213e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00213d0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00213d3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00213d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00213df:	eb 0c                	jmp    c00213ed <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00213e1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00213e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00213e9:	29 ce                	sub    esi,ecx
c00213eb:	19 df                	sbb    edi,ebx
c00213ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00213f0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00213f3:	0f a4 c2 0b          	shld   edx,eax,0xb
c00213f7:	c1 e0 0b             	shl    eax,0xb
c00213fa:	01 c8                	add    eax,ecx
c00213fc:	11 da                	adc    edx,ebx
c00213fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0021401:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021405:	51                   	push   ecx
c0021406:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002140a:	50                   	push   eax
c002140b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002140f:	53                   	push   ebx
c0021410:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021414:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021418:	0f ac d0 0b          	shrd   eax,edx,0xb
c002141c:	50                   	push   eax
c002141d:	e8 99 fe ff ff       	call   c00212bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021422:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021425:	b8 00 08 00 00       	mov    eax,0x800
c002142a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021430:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021434:	29 d0                	sub    eax,edx
c0021436:	83 c4 10             	add    esp,0x10
c0021439:	89 f9                	mov    ecx,edi
c002143b:	39 c6                	cmp    esi,eax
c002143d:	83 d9 00             	sbb    ecx,0x0
c0021440:	7d 1b                	jge    c002145d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021442:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021447:	75 12                	jne    c002145b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021449:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021450:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021456:	e9 fa 00 00 00       	jmp    c0021555 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002145b:	89 f0                	mov    eax,esi
c002145d:	01 d3                	add    ebx,edx
c002145f:	31 d2                	xor    edx,edx
c0021461:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021465:	39 c2                	cmp    edx,eax
c0021467:	7d 14                	jge    c002147d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021469:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021470:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021474:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021477:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002147a:	42                   	inc    edx
c002147b:	eb e8                	jmp    c0021465 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002147d:	89 c2                	mov    edx,eax
c002147f:	85 c0                	test   eax,eax
c0021481:	79 02                	jns    c0021485 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021483:	31 d2                	xor    edx,edx
c0021485:	01 c2                	add    edx,eax
c0021487:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002148a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021491:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021495:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021499:	99                   	cdq    
c002149a:	01 c1                	add    ecx,eax
c002149c:	11 d3                	adc    ebx,edx
c002149e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00214a2:	29 c6                	sub    esi,eax
c00214a4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00214a8:	19 d7                	sbb    edi,edx
c00214aa:	89 34 24             	mov    DWORD PTR [esp],esi
c00214ad:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00214b1:	b8 ff 07 00 00       	mov    eax,0x7ff
c00214b6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00214b9:	b8 00 00 00 00       	mov    eax,0x0
c00214be:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00214c2:	7d 43                	jge    c0021507 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00214c4:	52                   	push   edx
c00214c5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214c9:	50                   	push   eax
c00214ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00214ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214d2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00214d6:	0f ac d0 0b          	shrd   eax,edx,0xb
c00214da:	50                   	push   eax
c00214db:	e8 db fd ff ff       	call   c00212bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214e0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00214e8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00214ed:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00214f5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00214fd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021502:	83 c4 10             	add    esp,0x10
c0021505:	eb aa                	jmp    c00214b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002150b:	0b 04 24             	or     eax,DWORD PTR [esp]
c002150e:	74 2a                	je     c002153a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021510:	50                   	push   eax
c0021511:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021515:	50                   	push   eax
c0021516:	8d 74 24 28          	lea    esi,[esp+0x28]
c002151a:	56                   	push   esi
c002151b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002151f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021523:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021527:	51                   	push   ecx
c0021528:	e8 8e fd ff ff       	call   c00212bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002152d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021531:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021535:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021537:	83 c4 10             	add    esp,0x10
c002153a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021541:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021545:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021549:	89 18                	mov    DWORD PTR [eax],ebx
c002154b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002154f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021552:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021555:	31 c0                	xor    eax,eax
c0021557:	eb 05                	jmp    c002155e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021559:	b8 04 00 00 00       	mov    eax,0x4
c002155e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021564:	5b                   	pop    ebx
c0021565:	5e                   	pop    esi
c0021566:	5f                   	pop    edi
c0021567:	5d                   	pop    ebp
c0021568:	c3                   	ret    
c0021569:	90                   	nop

c002156a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002156a:	55                   	push   ebp
c002156b:	57                   	push   edi
c002156c:	56                   	push   esi
c002156d:	53                   	push   ebx
c002156e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021574:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002157b:	85 ed                	test   ebp,ebp
c002157d:	0f 84 51 02 00 00    	je     c00217d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021583:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002158b:	0f 84 43 02 00 00    	je     c00217d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021591:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021594:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021597:	75 0a                	jne    c00215a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021599:	b8 07 00 00 00       	mov    eax,0x7
c002159e:	e9 36 02 00 00       	jmp    c00217d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00215a3:	50                   	push   eax
c00215a4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00215a8:	50                   	push   eax
c00215a9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00215b0:	53                   	push   ebx
c00215b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00215b4:	c1 e0 0b             	shl    eax,0xb
c00215b7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00215ba:	c1 e8 0b             	shr    eax,0xb
c00215bd:	50                   	push   eax
c00215be:	e8 f8 fc ff ff       	call   c00212bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215c6:	83 c4 10             	add    esp,0x10
c00215c9:	89 c1                	mov    ecx,eax
c00215cb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00215ce:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00215d4:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00215d7:	84 db                	test   bl,bl
c00215d9:	0f 85 8b 00 00 00    	jne    c002166a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00215df:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00215e5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00215e8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00215ee:	29 c6                	sub    esi,eax
c00215f0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00215f4:	89 f3                	mov    ebx,esi
c00215f6:	89 f1                	mov    ecx,esi
c00215f8:	c1 fb 1f             	sar    ebx,0x1f
c00215fb:	01 f0                	add    eax,esi
c00215fd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021600:	11 da                	adc    edx,ebx
c0021602:	89 04 24             	mov    DWORD PTR [esp],eax
c0021605:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021609:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002160c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002160f:	89 d8                	mov    eax,ebx
c0021611:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021615:	ba 00 00 00 00       	mov    edx,0x0
c002161a:	19 f8                	sbb    eax,edi
c002161c:	b8 00 00 00 00       	mov    eax,0x0
c0021621:	73 08                	jae    c002162b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021623:	89 f0                	mov    eax,esi
c0021625:	89 fa                	mov    edx,edi
c0021627:	29 c8                	sub    eax,ecx
c0021629:	19 da                	sbb    edx,ebx
c002162b:	89 d7                	mov    edi,edx
c002162d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021630:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021633:	09 c7                	or     edi,eax
c0021635:	0f 84 5e ff ff ff    	je     c0021599 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002163b:	57                   	push   edi
c002163c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021640:	50                   	push   eax
c0021641:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021648:	53                   	push   ebx
c0021649:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002164c:	c1 e0 0b             	shl    eax,0xb
c002164f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021653:	c1 e8 0b             	shr    eax,0xb
c0021656:	50                   	push   eax
c0021657:	e8 5f fc ff ff       	call   c00212bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002165c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002165f:	83 c4 10             	add    esp,0x10
c0021662:	25 ff 07 00 00       	and    eax,0x7ff
c0021667:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002166a:	31 ff                	xor    edi,edi
c002166c:	56                   	push   esi
c002166d:	6a 28                	push   0x28
c002166f:	6a 00                	push   0x0
c0021671:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021675:	50                   	push   eax
c0021676:	e8 d5 f0 fd ff       	call   c0000750 <memset>
c002167b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002167e:	25 ff 07 00 00       	and    eax,0x7ff
c0021683:	89 c6                	mov    esi,eax
c0021685:	83 c6 21             	add    esi,0x21
c0021688:	83 d7 00             	adc    edi,0x0
c002168b:	83 c4 10             	add    esp,0x10
c002168e:	31 c9                	xor    ecx,ecx
c0021690:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021697:	83 f9 28             	cmp    ecx,0x28
c002169a:	88 04 24             	mov    BYTE PTR [esp],al
c002169d:	0f 94 c2             	sete   dl
c00216a0:	88 d0                	mov    al,dl
c00216a2:	ba ff 07 00 00       	mov    edx,0x7ff
c00216a7:	39 f2                	cmp    edx,esi
c00216a9:	ba 00 00 00 00       	mov    edx,0x0
c00216ae:	19 fa                	sbb    edx,edi
c00216b0:	0f 92 c2             	setb   dl
c00216b3:	09 c2                	or     edx,eax
c00216b5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00216b9:	0f 94 c0             	sete   al
c00216bc:	08 d0                	or     al,dl
c00216be:	75 16                	jne    c00216d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00216c0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00216c4:	74 10                	je     c00216d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00216c6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00216c9:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00216cd:	41                   	inc    ecx
c00216ce:	83 c6 01             	add    esi,0x1
c00216d1:	83 d7 00             	adc    edi,0x0
c00216d4:	eb ba                	jmp    c0021690 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00216d6:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00216dd:	83 ec 0c             	sub    esp,0xc
c00216e0:	8d 74 24 24          	lea    esi,[esp+0x24]
c00216e4:	56                   	push   esi
c00216e5:	e8 82 f0 fd ff       	call   c000076c <strlen>
c00216ea:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00216f1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00216f5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00216fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021700:	5a                   	pop    edx
c0021701:	25 ff 07 00 00       	and    eax,0x7ff
c0021706:	59                   	pop    ecx
c0021707:	01 f8                	add    eax,edi
c0021709:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002170f:	83 e0 02             	and    eax,0x2
c0021712:	3c 01                	cmp    al,0x1
c0021714:	19 c0                	sbb    eax,eax
c0021716:	83 c0 02             	add    eax,0x2
c0021719:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002171d:	56                   	push   esi
c002171e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021722:	50                   	push   eax
c0021723:	e8 e4 f0 fd ff       	call   c000080c <strcpy>
c0021728:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002172c:	83 c4 10             	add    esp,0x10
c002172f:	84 c0                	test   al,al
c0021731:	75 21                	jne    c0021754 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021733:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002173b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021743:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002174b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021752:	eb 28                	jmp    c002177c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021754:	fe c8                	dec    al
c0021756:	75 24                	jne    c002177c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021758:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021760:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021768:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021770:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021777:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002177c:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021780:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021787:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002178e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021790:	0f b6 f3             	movzx  esi,bl
c0021793:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002179a:	31 db                	xor    ebx,ebx
c002179c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00217a2:	89 df                	mov    edi,ebx
c00217a4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00217a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217aa:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00217ad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00217b0:	39 c6                	cmp    esi,eax
c00217b2:	19 d7                	sbb    edi,edx
c00217b4:	72 10                	jb     c00217c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00217b6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00217bd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00217c4:	eb 0a                	jmp    c00217d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00217c6:	29 f0                	sub    eax,esi
c00217c8:	19 da                	sbb    edx,ebx
c00217ca:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00217cd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00217d0:	31 c0                	xor    eax,eax
c00217d2:	eb 05                	jmp    c00217d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00217d4:	b8 04 00 00 00       	mov    eax,0x4
c00217d9:	81 c4 5c 09 00 00    	add    esp,0x95c
c00217df:	5b                   	pop    ebx
c00217e0:	5e                   	pop    esi
c00217e1:	5f                   	pop    edi
c00217e2:	5d                   	pop    ebp
c00217e3:	c3                   	ret    

c00217e4 <readRoot(unsigned int*, unsigned int*, char)>:
c00217e4:	57                   	push   edi
c00217e5:	56                   	push   esi
c00217e6:	81 ec 38 08 00 00    	sub    esp,0x838
c00217ec:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00217f4:	50                   	push   eax
c00217f5:	8d 44 24 38          	lea    eax,[esp+0x38]
c00217f9:	50                   	push   eax
c00217fa:	6a 10                	push   0x10
c00217fc:	e8 ba fa ff ff       	call   c00212bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021801:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021808:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c002180c:	b9 22 00 00 00       	mov    ecx,0x22
c0021811:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021813:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002181a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002181e:	89 10                	mov    DWORD PTR [eax],edx
c0021820:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021827:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002182b:	89 10                	mov    DWORD PTR [eax],edx
c002182d:	81 c4 44 08 00 00    	add    esp,0x844
c0021833:	b0 01                	mov    al,0x1
c0021835:	5e                   	pop    esi
c0021836:	5f                   	pop    edi
c0021837:	c3                   	ret    

c0021838 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021838:	55                   	push   ebp
c0021839:	57                   	push   edi
c002183a:	56                   	push   esi
c002183b:	53                   	push   ebx
c002183c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021842:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021849:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021850:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021854:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021858:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002185c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021860:	75 03                	jne    c0021865 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021862:	83 c3 02             	add    ebx,0x2
c0021865:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021868:	75 03                	jne    c002186d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002186a:	43                   	inc    ebx
c002186b:	eb f8                	jmp    c0021865 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002186d:	51                   	push   ecx
c002186e:	68 00 01 00 00       	push   0x100
c0021873:	6a 00                	push   0x0
c0021875:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021879:	50                   	push   eax
c002187a:	e8 d1 ee fd ff       	call   c0000750 <memset>
c002187f:	83 c4 10             	add    esp,0x10
c0021882:	31 d2                	xor    edx,edx
c0021884:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021887:	84 c0                	test   al,al
c0021889:	74 21                	je     c00218ac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002188b:	3c 2f                	cmp    al,0x2f
c002188d:	75 0b                	jne    c002189a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002188f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021893:	bd 01 00 00 00       	mov    ebp,0x1
c0021898:	eb 14                	jmp    c00218ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002189a:	8d 48 9f             	lea    ecx,[eax-0x61]
c002189d:	80 f9 19             	cmp    cl,0x19
c00218a0:	77 03                	ja     c00218a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00218a2:	83 e8 20             	sub    eax,0x20
c00218a5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00218a9:	42                   	inc    edx
c00218aa:	eb d8                	jmp    c0021884 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00218ac:	31 ed                	xor    ebp,ebp
c00218ae:	83 ec 0c             	sub    esp,0xc
c00218b1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00218b8:	e8 dc dc fe ff       	call   c000f599 <malloc>
c00218bd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00218c4:	89 c6                	mov    esi,eax
c00218c6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00218cc:	c1 ef 0b             	shr    edi,0xb
c00218cf:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00218d6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00218da:	83 c4 10             	add    esp,0x10
c00218dd:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00218e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00218e6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00218ed:	74 28                	je     c0021917 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00218ef:	52                   	push   edx
c00218f0:	57                   	push   edi
c00218f1:	50                   	push   eax
c00218f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00218f6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00218fd:	e8 b9 f9 ff ff       	call   c00212bb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021902:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021906:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002190d:	05 00 08 00 00       	add    eax,0x800
c0021912:	83 c4 10             	add    esp,0x10
c0021915:	eb cb                	jmp    c00218e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021917:	83 ec 0c             	sub    esp,0xc
c002191a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002191e:	57                   	push   edi
c002191f:	e8 48 ee fd ff       	call   c000076c <strlen>
c0021924:	50                   	push   eax
c0021925:	57                   	push   edi
c0021926:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002192d:	56                   	push   esi
c002192e:	e8 46 f9 ff ff       	call   c0021279 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021933:	83 c4 20             	add    esp,0x20
c0021936:	85 c0                	test   eax,eax
c0021938:	75 13                	jne    c002194d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002193a:	83 ec 0c             	sub    esp,0xc
c002193d:	56                   	push   esi
c002193e:	e8 66 dc fe ff       	call   c000f5a9 <free>
c0021943:	83 c4 10             	add    esp,0x10
c0021946:	31 c0                	xor    eax,eax
c0021948:	e9 b3 00 00 00       	jmp    c0021a00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002194d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021951:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021955:	c1 e7 08             	shl    edi,0x8
c0021958:	c1 e2 10             	shl    edx,0x10
c002195b:	09 d7                	or     edi,edx
c002195d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021961:	09 d7                	or     edi,edx
c0021963:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021967:	c1 e2 18             	shl    edx,0x18
c002196a:	09 d7                	or     edi,edx
c002196c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021970:	89 d1                	mov    ecx,edx
c0021972:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021976:	c1 e1 08             	shl    ecx,0x8
c0021979:	c1 e2 10             	shl    edx,0x10
c002197c:	09 ca                	or     edx,ecx
c002197e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021982:	09 ca                	or     edx,ecx
c0021984:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021988:	c1 e1 18             	shl    ecx,0x18
c002198b:	09 ca                	or     edx,ecx
c002198d:	89 e9                	mov    ecx,ebp
c002198f:	84 c9                	test   cl,cl
c0021991:	74 3c                	je     c00219cf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021993:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021997:	83 ec 0c             	sub    esp,0xc
c002199a:	56                   	push   esi
c002199b:	e8 09 dc fe ff       	call   c000f5a9 <free>
c00219a0:	83 c4 0c             	add    esp,0xc
c00219a3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00219aa:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00219af:	50                   	push   eax
c00219b0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00219b7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00219be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00219c2:	52                   	push   edx
c00219c3:	57                   	push   edi
c00219c4:	53                   	push   ebx
c00219c5:	e8 6e fe ff ff       	call   c0021838 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00219ca:	83 c4 20             	add    esp,0x20
c00219cd:	eb 31                	jmp    c0021a00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00219cf:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00219d2:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00219d9:	d0 e8                	shr    al,1
c00219db:	89 3b                	mov    DWORD PTR [ebx],edi
c00219dd:	83 e0 01             	and    eax,0x1
c00219e0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00219e7:	83 ec 0c             	sub    esp,0xc
c00219ea:	89 13                	mov    DWORD PTR [ebx],edx
c00219ec:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00219f3:	89 03                	mov    DWORD PTR [ebx],eax
c00219f5:	56                   	push   esi
c00219f6:	e8 ae db fe ff       	call   c000f5a9 <free>
c00219fb:	83 c4 10             	add    esp,0x10
c00219fe:	b0 01                	mov    al,0x1
c0021a00:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a06:	5b                   	pop    ebx
c0021a07:	5e                   	pop    esi
c0021a08:	5f                   	pop    edi
c0021a09:	5d                   	pop    ebp
c0021a0a:	c3                   	ret    

c0021a0b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021a0b:	55                   	push   ebp
c0021a0c:	57                   	push   edi
c0021a0d:	56                   	push   esi
c0021a0e:	53                   	push   ebx
c0021a0f:	83 ec 20             	sub    esp,0x20
c0021a12:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021a16:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021a1a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021a1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a26:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021a2e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021a33:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021a39:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021a3f:	57                   	push   edi
c0021a40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a44:	50                   	push   eax
c0021a45:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a49:	50                   	push   eax
c0021a4a:	e8 95 fd ff ff       	call   c00217e4 <readRoot(unsigned int*, unsigned int*, char)>
c0021a4f:	5a                   	pop    edx
c0021a50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021a54:	e8 13 ed fd ff       	call   c000076c <strlen>
c0021a59:	83 c4 10             	add    esp,0x10
c0021a5c:	83 f8 03             	cmp    eax,0x3
c0021a5f:	77 17                	ja     c0021a78 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021a61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a65:	89 03                	mov    DWORD PTR [ebx],eax
c0021a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a6b:	89 06                	mov    DWORD PTR [esi],eax
c0021a6d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021a74:	b0 01                	mov    al,0x1
c0021a76:	eb 19                	jmp    c0021a91 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021a78:	50                   	push   eax
c0021a79:	55                   	push   ebp
c0021a7a:	57                   	push   edi
c0021a7b:	56                   	push   esi
c0021a7c:	53                   	push   ebx
c0021a7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021a81:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021a85:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021a89:	e8 aa fd ff ff       	call   c0021838 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021a8e:	83 c4 20             	add    esp,0x20
c0021a91:	83 c4 1c             	add    esp,0x1c
c0021a94:	5b                   	pop    ebx
c0021a95:	5e                   	pop    esi
c0021a96:	5f                   	pop    edi
c0021a97:	5d                   	pop    ebp
c0021a98:	c3                   	ret    
c0021a99:	90                   	nop

c0021a9a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021a9a:	57                   	push   edi
c0021a9b:	56                   	push   esi
c0021a9c:	53                   	push   ebx
c0021a9d:	83 ec 10             	sub    esp,0x10
c0021aa0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021aa4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021aa8:	85 ff                	test   edi,edi
c0021aaa:	0f 84 8b 00 00 00    	je     c0021b3b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021ab0:	85 f6                	test   esi,esi
c0021ab2:	0f 84 83 00 00 00    	je     c0021b3b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021ab8:	b8 03 00 00 00       	mov    eax,0x3
c0021abd:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021ac2:	75 7c                	jne    c0021b40 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021ac4:	83 ec 0c             	sub    esp,0xc
c0021ac7:	6a 1c                	push   0x1c
c0021ac9:	e8 cb da fe ff       	call   c000f599 <malloc>
c0021ace:	89 07                	mov    DWORD PTR [edi],eax
c0021ad0:	89 c3                	mov    ebx,eax
c0021ad2:	58                   	pop    eax
c0021ad3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ad7:	50                   	push   eax
c0021ad8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021adb:	50                   	push   eax
c0021adc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ae0:	50                   	push   eax
c0021ae1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ae5:	50                   	push   eax
c0021ae6:	56                   	push   esi
c0021ae7:	e8 1f ff ff ff       	call   c0021a0b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021aec:	83 c4 20             	add    esp,0x20
c0021aef:	84 c0                	test   al,al
c0021af1:	74 07                	je     c0021afa <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021af3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021af8:	74 0b                	je     c0021b05 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021afa:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021afe:	b8 01 00 00 00       	mov    eax,0x1
c0021b03:	eb 3b                	jmp    c0021b40 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021b05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b09:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b0d:	89 03                	mov    DWORD PTR [ebx],eax
c0021b0f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b1a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b21:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b2b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b32:	8a 06                	mov    al,BYTE PTR [esi]
c0021b34:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b37:	31 c0                	xor    eax,eax
c0021b39:	eb 05                	jmp    c0021b40 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021b3b:	b8 04 00 00 00       	mov    eax,0x4
c0021b40:	83 c4 10             	add    esp,0x10
c0021b43:	5b                   	pop    ebx
c0021b44:	5e                   	pop    esi
c0021b45:	5f                   	pop    edi
c0021b46:	c3                   	ret    
c0021b47:	90                   	nop

c0021b48 <ISO9660::exists(char const*)>:
c0021b48:	83 ec 28             	sub    esp,0x28
c0021b4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b4f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021b53:	52                   	push   edx
c0021b54:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021b57:	52                   	push   edx
c0021b58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021b5c:	52                   	push   edx
c0021b5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021b61:	52                   	push   edx
c0021b62:	50                   	push   eax
c0021b63:	e8 a3 fe ff ff       	call   c0021a0b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b68:	83 c4 3c             	add    esp,0x3c
c0021b6b:	c3                   	ret    

c0021b6c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021b6c:	56                   	push   esi
c0021b6d:	53                   	push   ebx
c0021b6e:	83 ec 14             	sub    esp,0x14
c0021b71:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021b75:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021b79:	85 db                	test   ebx,ebx
c0021b7b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021b7f:	0f 94 c2             	sete   dl
c0021b82:	85 f6                	test   esi,esi
c0021b84:	0f 94 c0             	sete   al
c0021b87:	08 c2                	or     dl,al
c0021b89:	75 68                	jne    c0021bf3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021b8b:	85 c9                	test   ecx,ecx
c0021b8d:	74 64                	je     c0021bf3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021b8f:	83 ec 0c             	sub    esp,0xc
c0021b92:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021b95:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b99:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021b9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ba6:	50                   	push   eax
c0021ba7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021baa:	50                   	push   eax
c0021bab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021baf:	50                   	push   eax
c0021bb0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021bb4:	50                   	push   eax
c0021bb5:	51                   	push   ecx
c0021bb6:	e8 50 fe ff ff       	call   c0021a0b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021bbb:	83 c4 20             	add    esp,0x20
c0021bbe:	ba 01 00 00 00       	mov    edx,0x1
c0021bc3:	84 c0                	test   al,al
c0021bc5:	74 31                	je     c0021bf8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021bc7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bcb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021bd2:	89 03                	mov    DWORD PTR [ebx],eax
c0021bd4:	ba 00 00 00 00       	mov    edx,0x0
c0021bd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021bdd:	85 c0                	test   eax,eax
c0021bdf:	0f 95 06             	setne  BYTE PTR [esi]
c0021be2:	74 14                	je     c0021bf8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021be4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021bea:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021bf1:	eb 05                	jmp    c0021bf8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021bf3:	ba 04 00 00 00       	mov    edx,0x4
c0021bf8:	83 c4 14             	add    esp,0x14
c0021bfb:	89 d0                	mov    eax,edx
c0021bfd:	5b                   	pop    ebx
c0021bfe:	5e                   	pop    esi
c0021bff:	c3                   	ret    

c0021c00 <ISO9660::openDir(char const*, void**)>:
c0021c00:	57                   	push   edi
c0021c01:	56                   	push   esi
c0021c02:	53                   	push   ebx
c0021c03:	83 ec 10             	sub    esp,0x10
c0021c06:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c0a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021c0e:	85 ff                	test   edi,edi
c0021c10:	74 7b                	je     c0021c8d <ISO9660::openDir(char const*, void**)+0x8d>
c0021c12:	85 f6                	test   esi,esi
c0021c14:	74 77                	je     c0021c8d <ISO9660::openDir(char const*, void**)+0x8d>
c0021c16:	83 ec 0c             	sub    esp,0xc
c0021c19:	6a 1c                	push   0x1c
c0021c1b:	e8 79 d9 fe ff       	call   c000f599 <malloc>
c0021c20:	89 07                	mov    DWORD PTR [edi],eax
c0021c22:	89 c3                	mov    ebx,eax
c0021c24:	58                   	pop    eax
c0021c25:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c29:	50                   	push   eax
c0021c2a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021c2d:	50                   	push   eax
c0021c2e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c32:	50                   	push   eax
c0021c33:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c37:	50                   	push   eax
c0021c38:	56                   	push   esi
c0021c39:	e8 cd fd ff ff       	call   c0021a0b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021c3e:	83 c4 20             	add    esp,0x20
c0021c41:	84 c0                	test   al,al
c0021c43:	74 07                	je     c0021c4c <ISO9660::openDir(char const*, void**)+0x4c>
c0021c45:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021c4a:	75 0b                	jne    c0021c57 <ISO9660::openDir(char const*, void**)+0x57>
c0021c4c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021c50:	b8 01 00 00 00       	mov    eax,0x1
c0021c55:	eb 3b                	jmp    c0021c92 <ISO9660::openDir(char const*, void**)+0x92>
c0021c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c5b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0021c61:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021c68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c6c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021c73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021c7a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021c7d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021c84:	8a 06                	mov    al,BYTE PTR [esi]
c0021c86:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021c89:	31 c0                	xor    eax,eax
c0021c8b:	eb 05                	jmp    c0021c92 <ISO9660::openDir(char const*, void**)+0x92>
c0021c8d:	b8 04 00 00 00       	mov    eax,0x4
c0021c92:	83 c4 10             	add    esp,0x10
c0021c95:	5b                   	pop    ebx
c0021c96:	5e                   	pop    esi
c0021c97:	5f                   	pop    edi
c0021c98:	c3                   	ret    
c0021c99:	90                   	nop

c0021c9a <ISO9660::ISO9660()>:
c0021c9a:	83 ec 0c             	sub    esp,0xc
c0021c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca1:	83 ec 0c             	sub    esp,0xc
c0021ca4:	50                   	push   eax
c0021ca5:	e8 fe 0d ff ff       	call   c0012aa8 <Filesystem::Filesystem()>
c0021caa:	83 c4 10             	add    esp,0x10
c0021cad:	ba b8 c2 02 c0       	mov    edx,0xc002c2b8
c0021cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb6:	89 10                	mov    DWORD PTR [eax],edx
c0021cb8:	90                   	nop
c0021cb9:	83 c4 0c             	add    esp,0xc
c0021cbc:	c3                   	ret    
c0021cbd:	90                   	nop

c0021cbe <SoundChannel::SoundChannel(int, int, int, int)>:
c0021cbe:	83 ec 1c             	sub    esp,0x1c
c0021cc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cc5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021cc9:	89 10                	mov    DWORD PTR [eax],edx
c0021ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ccf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021cd3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021cd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cda:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021cde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ce1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021ce6:	75 23                	jne    c0021d0b <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cec:	8b 10                	mov    edx,DWORD PTR [eax]
c0021cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cf5:	0f af c2             	imul   eax,edx
c0021cf8:	85 c0                	test   eax,eax
c0021cfa:	79 03                	jns    c0021cff <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021cfc:	83 c0 03             	add    eax,0x3
c0021cff:	c1 f8 02             	sar    eax,0x2
c0021d02:	05 a0 0f 00 00       	add    eax,0xfa0
c0021d07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d0f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021d13:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021d16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d1a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d25:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021d2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d30:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021d33:	c1 e0 02             	shl    eax,0x2
c0021d36:	83 ec 0c             	sub    esp,0xc
c0021d39:	50                   	push   eax
c0021d3a:	e8 5a d8 fe ff       	call   c000f599 <malloc>
c0021d3f:	83 c4 10             	add    esp,0x10
c0021d42:	89 c2                	mov    edx,eax
c0021d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d48:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021d4b:	83 ec 04             	sub    esp,0x4
c0021d4e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021d52:	50                   	push   eax
c0021d53:	6a 01                	push   0x1
c0021d55:	6a 04                	push   0x4
c0021d57:	e8 09 6e fe ff       	call   c0008b65 <src_new>
c0021d5c:	83 c4 10             	add    esp,0x10
c0021d5f:	89 c2                	mov    edx,eax
c0021d61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d65:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d6c:	85 c0                	test   eax,eax
c0021d6e:	74 10                	je     c0021d80 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021d70:	83 ec 0c             	sub    esp,0xc
c0021d73:	68 18 c3 02 c0       	push   0xc002c318
c0021d78:	e8 fc 81 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0021d7d:	83 c4 10             	add    esp,0x10
c0021d80:	a0 a0 00 03 c0       	mov    al,ds:0xc00300a0
c0021d85:	83 f0 01             	xor    eax,0x1
c0021d88:	84 c0                	test   al,al
c0021d8a:	74 57                	je     c0021de3 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021d8c:	a1 34 c3 02 c0       	mov    eax,ds:0xc002c334
c0021d91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021d95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d9d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021da5:	7f 35                	jg     c0021ddc <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021da7:	83 ec 0c             	sub    esp,0xc
c0021daa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021dae:	e8 5c 54 00 00       	call   c002720f <__floatsisf>
c0021db3:	83 c4 10             	add    esp,0x10
c0021db6:	8b 15 34 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c334
c0021dbc:	83 ec 08             	sub    esp,0x8
c0021dbf:	52                   	push   edx
c0021dc0:	50                   	push   eax
c0021dc1:	e8 5b 50 00 00       	call   c0026e21 <__mulsf3>
c0021dc6:	83 c4 10             	add    esp,0x10
c0021dc9:	89 c2                	mov    edx,eax
c0021dcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021dcf:	89 14 85 a0 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0360],edx
c0021dd6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021dda:	eb c1                	jmp    c0021d9d <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021ddc:	c6 05 a0 00 03 c0 01 	mov    BYTE PTR ds:0xc00300a0,0x1
c0021de3:	90                   	nop
c0021de4:	83 c4 1c             	add    esp,0x1c
c0021de7:	c3                   	ret    

c0021de8 <SoundChannel::~SoundChannel()>:
c0021de8:	83 ec 0c             	sub    esp,0xc
c0021deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021def:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021df2:	83 ec 0c             	sub    esp,0xc
c0021df5:	50                   	push   eax
c0021df6:	e8 ae d7 fe ff       	call   c000f5a9 <free>
c0021dfb:	83 c4 10             	add    esp,0x10
c0021dfe:	90                   	nop
c0021dff:	83 c4 0c             	add    esp,0xc
c0021e02:	c3                   	ret    
c0021e03:	90                   	nop

c0021e04 <SoundChannel::getSampleRate()>:
c0021e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e08:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e0a:	c3                   	ret    
c0021e0b:	90                   	nop

c0021e0c <SoundChannel::getBits()>:
c0021e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e13:	c3                   	ret    

c0021e14 <SoundChannel::getBufferUsed()>:
c0021e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e18:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021e1b:	c3                   	ret    

c0021e1c <SoundChannel::getBufferSize()>:
c0021e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021e23:	c3                   	ret    

c0021e24 <SoundChannel::unbuffer(float*, int, int)>:
c0021e24:	56                   	push   esi
c0021e25:	53                   	push   ebx
c0021e26:	83 ec 40             	sub    esp,0x40
c0021e29:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021e30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e34:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021e37:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021e3b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021e3f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021e43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021e47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021e4b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021e4f:	e8 bb 53 00 00       	call   c002720f <__floatsisf>
c0021e54:	5a                   	pop    edx
c0021e55:	89 c6                	mov    esi,eax
c0021e57:	ff 33                	push   DWORD PTR [ebx]
c0021e59:	e8 b1 53 00 00       	call   c002720f <__floatsisf>
c0021e5e:	59                   	pop    ecx
c0021e5f:	5a                   	pop    edx
c0021e60:	50                   	push   eax
c0021e61:	56                   	push   esi
c0021e62:	e8 7d 51 00 00       	call   c0026fe4 <__divsf3>
c0021e67:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e6a:	e8 70 66 00 00       	call   c00284df <__extendsfdf2>
c0021e6f:	59                   	pop    ecx
c0021e70:	5e                   	pop    esi
c0021e71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021e75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021e79:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021e81:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e85:	50                   	push   eax
c0021e86:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021e89:	e8 cc 68 fe ff       	call   c000875a <src_process>
c0021e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021e92:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021e95:	83 c4 0c             	add    esp,0xc
c0021e98:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021e9b:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021e9e:	29 d0                	sub    eax,edx
c0021ea0:	c1 e0 02             	shl    eax,0x2
c0021ea3:	50                   	push   eax
c0021ea4:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021ea7:	50                   	push   eax
c0021ea8:	51                   	push   ecx
c0021ea9:	e8 da e7 fd ff       	call   c0000688 <memmove>
c0021eae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021eb2:	83 c4 44             	add    esp,0x44
c0021eb5:	5b                   	pop    ebx
c0021eb6:	5e                   	pop    esi
c0021eb7:	c3                   	ret    

c0021eb8 <SoundChannel::buffer16(short*, int)>:
c0021eb8:	55                   	push   ebp
c0021eb9:	57                   	push   edi
c0021eba:	56                   	push   esi
c0021ebb:	53                   	push   ebx
c0021ebc:	83 ec 1c             	sub    esp,0x1c
c0021ebf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021ec3:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021ec6:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021ec9:	0f 84 d2 00 00 00    	je     c0021fa1 <SoundChannel::buffer16(short*, int)+0xe9>
c0021ecf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021ed3:	85 ed                	test   ebp,ebp
c0021ed5:	0f 8e c6 00 00 00    	jle    c0021fa1 <SoundChannel::buffer16(short*, int)+0xe9>
c0021edb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021edf:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021ee4:	83 ec 0c             	sub    esp,0xc
c0021ee7:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021eea:	50                   	push   eax
c0021eeb:	e8 1f 53 00 00       	call   c002720f <__floatsisf>
c0021ef0:	59                   	pop    ecx
c0021ef1:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021ef4:	5f                   	pop    edi
c0021ef5:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021ef8:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021efb:	55                   	push   ebp
c0021efc:	50                   	push   eax
c0021efd:	e8 1f 4f 00 00       	call   c0026e21 <__mulsf3>
c0021f02:	83 c4 10             	add    esp,0x10
c0021f05:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021f08:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021f0b:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021f0e:	0f 84 99 00 00 00    	je     c0021fad <SoundChannel::buffer16(short*, int)+0xf5>
c0021f14:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021f19:	74 78                	je     c0021f93 <SoundChannel::buffer16(short*, int)+0xdb>
c0021f1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021f1f:	83 ec 0c             	sub    esp,0xc
c0021f22:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021f26:	50                   	push   eax
c0021f27:	e8 e3 52 00 00       	call   c002720f <__floatsisf>
c0021f2c:	5f                   	pop    edi
c0021f2d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021f30:	5a                   	pop    edx
c0021f31:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021f34:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021f37:	55                   	push   ebp
c0021f38:	50                   	push   eax
c0021f39:	e8 e3 4e 00 00       	call   c0026e21 <__mulsf3>
c0021f3e:	83 c4 10             	add    esp,0x10
c0021f41:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021f44:	be 02 00 00 00       	mov    esi,0x2
c0021f49:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021f4c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021f4f:	74 46                	je     c0021f97 <SoundChannel::buffer16(short*, int)+0xdf>
c0021f51:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021f55:	eb 36                	jmp    c0021f8d <SoundChannel::buffer16(short*, int)+0xd5>
c0021f57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021f5b:	83 ec 0c             	sub    esp,0xc
c0021f5e:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021f62:	46                   	inc    esi
c0021f63:	50                   	push   eax
c0021f64:	e8 a6 52 00 00       	call   c002720f <__floatsisf>
c0021f69:	5a                   	pop    edx
c0021f6a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021f6d:	59                   	pop    ecx
c0021f6e:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021f71:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021f74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f78:	50                   	push   eax
c0021f79:	e8 a3 4e 00 00       	call   c0026e21 <__mulsf3>
c0021f7e:	83 c4 10             	add    esp,0x10
c0021f81:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021f85:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021f88:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021f8b:	74 0a                	je     c0021f97 <SoundChannel::buffer16(short*, int)+0xdf>
c0021f8d:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021f91:	75 c4                	jne    c0021f57 <SoundChannel::buffer16(short*, int)+0x9f>
c0021f93:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021f97:	83 c4 1c             	add    esp,0x1c
c0021f9a:	89 f0                	mov    eax,esi
c0021f9c:	5b                   	pop    ebx
c0021f9d:	5e                   	pop    esi
c0021f9e:	5f                   	pop    edi
c0021f9f:	5d                   	pop    ebp
c0021fa0:	c3                   	ret    
c0021fa1:	83 c4 1c             	add    esp,0x1c
c0021fa4:	31 f6                	xor    esi,esi
c0021fa6:	5b                   	pop    ebx
c0021fa7:	89 f0                	mov    eax,esi
c0021fa9:	5e                   	pop    esi
c0021faa:	5f                   	pop    edi
c0021fab:	5d                   	pop    ebp
c0021fac:	c3                   	ret    
c0021fad:	be 01 00 00 00       	mov    esi,0x1
c0021fb2:	eb e3                	jmp    c0021f97 <SoundChannel::buffer16(short*, int)+0xdf>

c0021fb4 <SoundChannel::buffer8(unsigned char*, int)>:
c0021fb4:	55                   	push   ebp
c0021fb5:	57                   	push   edi
c0021fb6:	56                   	push   esi
c0021fb7:	53                   	push   ebx
c0021fb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fbc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021fc0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021fc3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021fc7:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021fca:	74 7a                	je     c0022046 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021fcc:	85 ff                	test   edi,edi
c0021fce:	7e 76                	jle    c0022046 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021fd0:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021fd4:	8d 70 01             	lea    esi,[eax+0x1]
c0021fd7:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021fda:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021fdd:	8b 1c 9d a0 fc 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0360]
c0021fe4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021fe7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021fea:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021fed:	74 5e                	je     c002204d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021fef:	83 ff 01             	cmp    edi,0x1
c0021ff2:	74 4b                	je     c002203f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021ff4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021ff8:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021ffb:	8d 70 01             	lea    esi,[eax+0x1]
c0021ffe:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022001:	8b 1c 9d a0 fc 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0360]
c0022008:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002200b:	b8 02 00 00 00       	mov    eax,0x2
c0022010:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022013:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022016:	75 23                	jne    c002203b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022018:	eb 27                	jmp    c0022041 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002201a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002201f:	8d 71 01             	lea    esi,[ecx+0x1]
c0022022:	40                   	inc    eax
c0022023:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022026:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022029:	8b 1c 9d a0 fc 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0360]
c0022030:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022033:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022036:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022039:	74 06                	je     c0022041 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002203b:	39 c7                	cmp    edi,eax
c002203d:	75 db                	jne    c002201a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002203f:	89 f8                	mov    eax,edi
c0022041:	5b                   	pop    ebx
c0022042:	5e                   	pop    esi
c0022043:	5f                   	pop    edi
c0022044:	5d                   	pop    ebp
c0022045:	c3                   	ret    
c0022046:	5b                   	pop    ebx
c0022047:	31 c0                	xor    eax,eax
c0022049:	5e                   	pop    esi
c002204a:	5f                   	pop    edi
c002204b:	5d                   	pop    ebp
c002204c:	c3                   	ret    
c002204d:	b8 01 00 00 00       	mov    eax,0x1
c0022052:	eb ed                	jmp    c0022041 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022054 <SoundDevice::SoundDevice(char const*)>:
c0022054:	83 ec 1c             	sub    esp,0x1c
c0022057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002205b:	83 ec 08             	sub    esp,0x8
c002205e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022062:	50                   	push   eax
c0022063:	e8 72 1d ff ff       	call   c0013dda <Device::Device(char const*)>
c0022068:	83 c4 10             	add    esp,0x10
c002206b:	ba 40 c3 02 c0       	mov    edx,0xc002c340
c0022070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022074:	89 10                	mov    DWORD PTR [eax],edx
c0022076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002207a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022088:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022092:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002209a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002209f:	7f 19                	jg     c00220ba <SoundDevice::SoundDevice(char const*)+0x66>
c00220a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220a9:	83 c2 54             	add    edx,0x54
c00220ac:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00220b4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00220b8:	eb e0                	jmp    c002209a <SoundDevice::SoundDevice(char const*)+0x46>
c00220ba:	90                   	nop
c00220bb:	83 c4 1c             	add    esp,0x1c
c00220be:	c3                   	ret    
c00220bf:	90                   	nop

c00220c0 <SoundDevice::~SoundDevice()>:
c00220c0:	53                   	push   ebx
c00220c1:	83 ec 18             	sub    esp,0x18
c00220c4:	ba 40 c3 02 c0       	mov    edx,0xc002c340
c00220c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220cd:	89 10                	mov    DWORD PTR [eax],edx
c00220cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220d7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00220dc:	7f 46                	jg     c0022124 <SoundDevice::~SoundDevice()+0x64>
c00220de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220e6:	83 c2 54             	add    edx,0x54
c00220e9:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00220ed:	85 c0                	test   eax,eax
c00220ef:	74 2d                	je     c002211e <SoundDevice::~SoundDevice()+0x5e>
c00220f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220f9:	83 c2 54             	add    edx,0x54
c00220fc:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022100:	85 db                	test   ebx,ebx
c0022102:	74 1a                	je     c002211e <SoundDevice::~SoundDevice()+0x5e>
c0022104:	83 ec 0c             	sub    esp,0xc
c0022107:	53                   	push   ebx
c0022108:	e8 db fc ff ff       	call   c0021de8 <SoundChannel::~SoundChannel()>
c002210d:	83 c4 10             	add    esp,0x10
c0022110:	83 ec 08             	sub    esp,0x8
c0022113:	6a 2c                	push   0x2c
c0022115:	53                   	push   ebx
c0022116:	e8 aa 05 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c002211b:	83 c4 10             	add    esp,0x10
c002211e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022122:	eb b3                	jmp    c00220d7 <SoundDevice::~SoundDevice()+0x17>
c0022124:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022128:	83 ec 0c             	sub    esp,0xc
c002212b:	50                   	push   eax
c002212c:	e8 73 19 ff ff       	call   c0013aa4 <Device::~Device()>
c0022131:	83 c4 10             	add    esp,0x10
c0022134:	90                   	nop
c0022135:	83 c4 18             	add    esp,0x18
c0022138:	5b                   	pop    ebx
c0022139:	c3                   	ret    

c002213a <SoundDevice::~SoundDevice()>:
c002213a:	83 ec 0c             	sub    esp,0xc
c002213d:	83 ec 0c             	sub    esp,0xc
c0022140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022144:	e8 77 ff ff ff       	call   c00220c0 <SoundDevice::~SoundDevice()>
c0022149:	83 c4 10             	add    esp,0x10
c002214c:	83 ec 08             	sub    esp,0x8
c002214f:	68 e4 01 00 00       	push   0x1e4
c0022154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022158:	e8 68 05 ff ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c002215d:	83 c4 10             	add    esp,0x10
c0022160:	83 c4 0c             	add    esp,0xc
c0022163:	c3                   	ret    

c0022164 <SoundDevice::getFreeChannelNum()>:
c0022164:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022168:	31 c0                	xor    eax,eax
c002216a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022172:	74 09                	je     c002217d <SoundDevice::getFreeChannelNum()+0x19>
c0022174:	40                   	inc    eax
c0022175:	83 f8 20             	cmp    eax,0x20
c0022178:	75 f0                	jne    c002216a <SoundDevice::getFreeChannelNum()+0x6>
c002217a:	83 c8 ff             	or     eax,0xffffffff
c002217d:	c3                   	ret    

c002217e <SoundDevice::addChannel(SoundChannel*)>:
c002217e:	56                   	push   esi
c002217f:	53                   	push   ebx
c0022180:	51                   	push   ecx
c0022181:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022185:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022189:	53                   	push   ebx
c002218a:	e8 d5 ff ff ff       	call   c0022164 <SoundDevice::getFreeChannelNum()>
c002218f:	5a                   	pop    edx
c0022190:	83 f8 ff             	cmp    eax,0xffffffff
c0022193:	74 51                	je     c00221e6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022195:	85 f6                	test   esi,esi
c0022197:	74 4d                	je     c00221e6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022199:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00221a0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00221a7:	75 30                	jne    c00221d9 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00221a9:	83 ec 0c             	sub    esp,0xc
c00221ac:	56                   	push   esi
c00221ad:	e8 52 fc ff ff       	call   c0021e04 <SoundChannel::getSampleRate()>
c00221b2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00221b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00221bb:	e8 4c fc ff ff       	call   c0021e0c <SoundChannel::getBits()>
c00221c0:	83 c4 0c             	add    esp,0xc
c00221c3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00221c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00221cb:	50                   	push   eax
c00221cc:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00221d2:	53                   	push   ebx
c00221d3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00221d6:	83 c4 10             	add    esp,0x10
c00221d9:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00221df:	b8 01 00 00 00       	mov    eax,0x1
c00221e4:	eb 03                	jmp    c00221e9 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00221e6:	83 c8 ff             	or     eax,0xffffffff
c00221e9:	5a                   	pop    edx
c00221ea:	5b                   	pop    ebx
c00221eb:	5e                   	pop    esi
c00221ec:	c3                   	ret    
c00221ed:	90                   	nop

c00221ee <SoundDevice::removeChannel(int)>:
c00221ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221f6:	83 fa 1f             	cmp    edx,0x1f
c00221f9:	77 23                	ja     c002221e <SoundDevice::removeChannel(int)+0x30>
c00221fb:	8d 14 90             	lea    edx,[eax+edx*4]
c00221fe:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022205:	74 17                	je     c002221e <SoundDevice::removeChannel(int)+0x30>
c0022207:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022211:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022217:	75 05                	jne    c002221e <SoundDevice::removeChannel(int)+0x30>
c0022219:	8b 00                	mov    eax,DWORD PTR [eax]
c002221b:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c002221e:	c3                   	ret    
c002221f:	90                   	nop

c0022220 <SoundDevice::floatTo16(float*, short*, int)>:
c0022220:	57                   	push   edi
c0022221:	56                   	push   esi
c0022222:	53                   	push   ebx
c0022223:	31 db                	xor    ebx,ebx
c0022225:	83 ec 10             	sub    esp,0x10
c0022228:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002222c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022230:	0f 8d d0 00 00 00    	jge    c0022306 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022236:	83 ec 0c             	sub    esp,0xc
c0022239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002223d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022240:	e8 9a 62 00 00       	call   c00284df <__extendsfdf2>
c0022245:	83 c4 10             	add    esp,0x10
c0022248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002224c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022250:	68 00 00 f0 3f       	push   0x3ff00000
c0022255:	6a 00                	push   0x0
c0022257:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002225b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002225f:	e8 07 52 00 00       	call   c002746b <__adddf3>
c0022264:	83 c4 10             	add    esp,0x10
c0022267:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002226b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002226f:	68 00 00 e0 3f       	push   0x3fe00000
c0022274:	6a 00                	push   0x0
c0022276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002227a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002227e:	e8 65 58 00 00       	call   c0027ae8 <__muldf3>
c0022283:	83 c4 10             	add    esp,0x10
c0022286:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002228a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002228e:	68 c0 ff df 40       	push   0x40dfffc0
c0022293:	6a 00                	push   0x0
c0022295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022299:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002229d:	e8 46 58 00 00       	call   c0027ae8 <__muldf3>
c00222a2:	59                   	pop    ecx
c00222a3:	5f                   	pop    edi
c00222a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00222a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00222ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222b4:	e8 02 61 00 00       	call   c00283bb <__truncdfsf2>
c00222b9:	5a                   	pop    edx
c00222ba:	89 c7                	mov    edi,eax
c00222bc:	59                   	pop    ecx
c00222bd:	68 00 fe ff 46       	push   0x46fffe00
c00222c2:	50                   	push   eax
c00222c3:	e8 9d 51 00 00       	call   c0027465 <__gesf2>
c00222c8:	83 c4 10             	add    esp,0x10
c00222cb:	85 c0                	test   eax,eax
c00222cd:	78 08                	js     c00222d7 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00222cf:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00222d5:	eb 29                	jmp    c0022300 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00222d7:	50                   	push   eax
c00222d8:	50                   	push   eax
c00222d9:	6a 00                	push   0x0
c00222db:	57                   	push   edi
c00222dc:	e8 88 51 00 00       	call   c0027469 <__lesf2>
c00222e1:	83 c4 10             	add    esp,0x10
c00222e4:	85 c0                	test   eax,eax
c00222e6:	7f 08                	jg     c00222f0 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00222e8:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00222ee:	eb 10                	jmp    c0022300 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00222f0:	83 ec 0c             	sub    esp,0xc
c00222f3:	57                   	push   edi
c00222f4:	e8 83 62 00 00       	call   c002857c <lrintf>
c00222f9:	83 c4 10             	add    esp,0x10
c00222fc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022300:	43                   	inc    ebx
c0022301:	e9 26 ff ff ff       	jmp    c002222c <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022306:	83 c4 10             	add    esp,0x10
c0022309:	5b                   	pop    ebx
c002230a:	5e                   	pop    esi
c002230b:	5f                   	pop    edi
c002230c:	c3                   	ret    
c002230d:	90                   	nop

c002230e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002230e:	57                   	push   edi
c002230f:	56                   	push   esi
c0022310:	53                   	push   ebx
c0022311:	31 db                	xor    ebx,ebx
c0022313:	83 ec 10             	sub    esp,0x10
c0022316:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002231a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002231e:	0f 8d cb 00 00 00    	jge    c00223ef <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022324:	83 ec 0c             	sub    esp,0xc
c0022327:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002232b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002232e:	e8 ac 61 00 00       	call   c00284df <__extendsfdf2>
c0022333:	83 c4 10             	add    esp,0x10
c0022336:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002233a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002233e:	68 00 00 f0 3f       	push   0x3ff00000
c0022343:	6a 00                	push   0x0
c0022345:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022349:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002234d:	e8 19 51 00 00       	call   c002746b <__adddf3>
c0022352:	83 c4 10             	add    esp,0x10
c0022355:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022359:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002235d:	68 00 00 e0 3f       	push   0x3fe00000
c0022362:	6a 00                	push   0x0
c0022364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002236c:	e8 77 57 00 00       	call   c0027ae8 <__muldf3>
c0022371:	83 c4 10             	add    esp,0x10
c0022374:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022378:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002237c:	68 00 00 60 40       	push   0x40600000
c0022381:	6a 00                	push   0x0
c0022383:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022387:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002238b:	e8 58 57 00 00       	call   c0027ae8 <__muldf3>
c0022390:	59                   	pop    ecx
c0022391:	5f                   	pop    edi
c0022392:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022396:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002239a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002239e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223a2:	e8 14 60 00 00       	call   c00283bb <__truncdfsf2>
c00223a7:	5a                   	pop    edx
c00223a8:	89 c7                	mov    edi,eax
c00223aa:	59                   	pop    ecx
c00223ab:	68 00 00 fe 42       	push   0x42fe0000
c00223b0:	50                   	push   eax
c00223b1:	e8 af 50 00 00       	call   c0027465 <__gesf2>
c00223b6:	83 c4 10             	add    esp,0x10
c00223b9:	85 c0                	test   eax,eax
c00223bb:	78 06                	js     c00223c3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00223bd:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00223c1:	eb 26                	jmp    c00223e9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00223c3:	50                   	push   eax
c00223c4:	50                   	push   eax
c00223c5:	6a 00                	push   0x0
c00223c7:	57                   	push   edi
c00223c8:	e8 9c 50 00 00       	call   c0027469 <__lesf2>
c00223cd:	83 c4 10             	add    esp,0x10
c00223d0:	85 c0                	test   eax,eax
c00223d2:	7f 06                	jg     c00223da <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00223d4:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00223d8:	eb 0f                	jmp    c00223e9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00223da:	83 ec 0c             	sub    esp,0xc
c00223dd:	57                   	push   edi
c00223de:	e8 99 61 00 00       	call   c002857c <lrintf>
c00223e3:	83 c4 10             	add    esp,0x10
c00223e6:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00223e9:	43                   	inc    ebx
c00223ea:	e9 2b ff ff ff       	jmp    c002231a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00223ef:	83 c4 10             	add    esp,0x10
c00223f2:	5b                   	pop    ebx
c00223f3:	5e                   	pop    esi
c00223f4:	5f                   	pop    edi
c00223f5:	c3                   	ret    

c00223f6 <SoundDevice::getAudio(int, float*, float*)>:
c00223f6:	55                   	push   ebp
c00223f7:	31 ed                	xor    ebp,ebp
c00223f9:	57                   	push   edi
c00223fa:	56                   	push   esi
c00223fb:	31 f6                	xor    esi,esi
c00223fd:	53                   	push   ebx
c00223fe:	83 ec 20             	sub    esp,0x20
c0022401:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022405:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022409:	c1 e0 02             	shl    eax,0x2
c002240c:	50                   	push   eax
c002240d:	6a 00                	push   0x0
c002240f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022413:	e8 38 e3 fd ff       	call   c0000750 <memset>
c0022418:	83 c4 10             	add    esp,0x10
c002241b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022423:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c002242a:	85 c9                	test   ecx,ecx
c002242c:	74 52                	je     c0022480 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c002242e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022432:	99                   	cdq    
c0022433:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022439:	50                   	push   eax
c002243a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022440:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022444:	51                   	push   ecx
c0022445:	e8 da f9 ff ff       	call   c0021e24 <SoundChannel::unbuffer(float*, int, int)>
c002244a:	31 d2                	xor    edx,edx
c002244c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022450:	83 c4 10             	add    esp,0x10
c0022453:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022457:	7d 1e                	jge    c0022477 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022459:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c002245d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022461:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022464:	89 cf                	mov    edi,ecx
c0022466:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002246c:	0f af ca             	imul   ecx,edx
c002246f:	42                   	inc    edx
c0022470:	01 e9                	add    ecx,ebp
c0022472:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022475:	eb dc                	jmp    c0022453 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022477:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002247b:	45                   	inc    ebp
c002247c:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022480:	46                   	inc    esi
c0022481:	83 fe 20             	cmp    esi,0x20
c0022484:	75 9d                	jne    c0022423 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022486:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002248a:	83 c4 1c             	add    esp,0x1c
c002248d:	5b                   	pop    ebx
c002248e:	5e                   	pop    esi
c002248f:	5f                   	pop    edi
c0022490:	5d                   	pop    ebp
c0022491:	c3                   	ret    

c0022492 <PCI::open(int, int, void*)>:
c0022492:	83 ec 18             	sub    esp,0x18
c0022495:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022499:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002249d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00224a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00224a5:	50                   	push   eax
c00224a6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00224a9:	31 c0                	xor    eax,eax
c00224ab:	83 c4 1c             	add    esp,0x1c
c00224ae:	c3                   	ret    
c00224af:	90                   	nop

c00224b0 <PCI::close(int, int, void*)>:
c00224b0:	31 c0                	xor    eax,eax
c00224b2:	c3                   	ret    
c00224b3:	90                   	nop

c00224b4 <PCI::PCI()>:
c00224b4:	83 ec 0c             	sub    esp,0xc
c00224b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224bb:	83 ec 08             	sub    esp,0x8
c00224be:	68 70 c3 02 c0       	push   0xc002c370
c00224c3:	50                   	push   eax
c00224c4:	e8 75 0f ff ff       	call   c001343e <Bus::Bus(char const*)>
c00224c9:	83 c4 10             	add    esp,0x10
c00224cc:	ba 5c c4 02 c0       	mov    edx,0xc002c45c
c00224d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224d5:	89 10                	mov    DWORD PTR [eax],edx
c00224d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224db:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00224e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224e9:	a3 a4 00 03 c0       	mov    ds:0xc00300a4,eax
c00224ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224f8:	0f b6 d0             	movzx  edx,al
c00224fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ff:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002250a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022510:	0f b6 d0             	movzx  edx,al
c0022513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022517:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002251c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022520:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022526:	8d 50 01             	lea    edx,[eax+0x1]
c0022529:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002252d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022533:	0f b6 d0             	movzx  edx,al
c0022536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002253e:	83 c9 c0             	or     ecx,0xffffffc0
c0022541:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022545:	90                   	nop
c0022546:	83 c4 0c             	add    esp,0xc
c0022549:	c3                   	ret    

c002254a <PCI::readBAR8(unsigned int, int)>:
c002254a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002254e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022552:	f6 c2 01             	test   dl,0x1
c0022555:	74 07                	je     c002255e <PCI::readBAR8(unsigned int, int)+0x14>
c0022557:	83 e2 fc             	and    edx,0xfffffffc
c002255a:	01 c2                	add    edx,eax
c002255c:	ec                   	in     al,dx
c002255d:	c3                   	ret    
c002255e:	83 e2 f0             	and    edx,0xfffffff0
c0022561:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022564:	c3                   	ret    
c0022565:	90                   	nop

c0022566 <PCI::readBAR16(unsigned int, int)>:
c0022566:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002256a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002256e:	f6 c2 01             	test   dl,0x1
c0022571:	74 08                	je     c002257b <PCI::readBAR16(unsigned int, int)+0x15>
c0022573:	83 e2 fc             	and    edx,0xfffffffc
c0022576:	01 c2                	add    edx,eax
c0022578:	66 ed                	in     ax,dx
c002257a:	c3                   	ret    
c002257b:	83 e2 f0             	and    edx,0xfffffff0
c002257e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022582:	c3                   	ret    
c0022583:	90                   	nop

c0022584 <PCI::readBAR32(unsigned int, int)>:
c0022584:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002258c:	f6 c2 01             	test   dl,0x1
c002258f:	74 07                	je     c0022598 <PCI::readBAR32(unsigned int, int)+0x14>
c0022591:	83 e2 fc             	and    edx,0xfffffffc
c0022594:	01 c2                	add    edx,eax
c0022596:	ed                   	in     eax,dx
c0022597:	c3                   	ret    
c0022598:	83 e2 f0             	and    edx,0xfffffff0
c002259b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002259e:	c3                   	ret    
c002259f:	90                   	nop

c00225a0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00225a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00225ac:	f6 c2 01             	test   dl,0x1
c00225af:	74 07                	je     c00225b8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00225b1:	83 e2 fc             	and    edx,0xfffffffc
c00225b4:	01 ca                	add    edx,ecx
c00225b6:	ee                   	out    dx,al
c00225b7:	c3                   	ret    
c00225b8:	83 e2 f0             	and    edx,0xfffffff0
c00225bb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00225be:	c3                   	ret    
c00225bf:	90                   	nop

c00225c0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00225c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00225cc:	f6 c2 01             	test   dl,0x1
c00225cf:	74 08                	je     c00225d9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00225d1:	83 e2 fc             	and    edx,0xfffffffc
c00225d4:	01 ca                	add    edx,ecx
c00225d6:	66 ef                	out    dx,ax
c00225d8:	c3                   	ret    
c00225d9:	83 e2 f0             	and    edx,0xfffffff0
c00225dc:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00225e0:	c3                   	ret    
c00225e1:	90                   	nop

c00225e2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00225e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00225ee:	f6 c2 01             	test   dl,0x1
c00225f1:	74 07                	je     c00225fa <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00225f3:	83 e2 fc             	and    edx,0xfffffffc
c00225f6:	01 ca                	add    edx,ecx
c00225f8:	ef                   	out    dx,eax
c00225f9:	c3                   	ret    
c00225fa:	83 e2 f0             	and    edx,0xfffffff0
c00225fd:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022600:	c3                   	ret    
c0022601:	90                   	nop

c0022602 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022602:	55                   	push   ebp
c0022603:	57                   	push   edi
c0022604:	56                   	push   esi
c0022605:	53                   	push   ebx
c0022606:	83 ec 0c             	sub    esp,0xc
c0022609:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002260d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022611:	89 f0                	mov    eax,esi
c0022613:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022617:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002261b:	3c 07                	cmp    al,0x7
c002261d:	76 10                	jbe    c002262f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002261f:	83 ec 0c             	sub    esp,0xc
c0022622:	68 78 c3 02 c0       	push   0xc002c378
c0022627:	e8 4d 79 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c002262c:	83 c4 10             	add    esp,0x10
c002262f:	80 fb 0f             	cmp    bl,0xf
c0022632:	76 10                	jbe    c0022644 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022634:	83 ec 0c             	sub    esp,0xc
c0022637:	68 a8 c3 02 c0       	push   0xc002c3a8
c002263c:	e8 38 79 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0022641:	83 c4 10             	add    esp,0x10
c0022644:	8d 04 36             	lea    eax,[esi+esi*1]
c0022647:	ba f8 0c 00 00       	mov    edx,0xcf8
c002264c:	83 c8 f0             	or     eax,0xfffffff0
c002264f:	ee                   	out    dx,al
c0022650:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022655:	89 e8                	mov    eax,ebp
c0022657:	ee                   	out    dx,al
c0022658:	83 c4 0c             	add    esp,0xc
c002265b:	89 d8                	mov    eax,ebx
c002265d:	66 81 e7 fc 00       	and    di,0xfc
c0022662:	5b                   	pop    ebx
c0022663:	c1 e0 08             	shl    eax,0x8
c0022666:	5e                   	pop    esi
c0022667:	09 f8                	or     eax,edi
c0022669:	5f                   	pop    edi
c002266a:	66 0d 00 c0          	or     ax,0xc000
c002266e:	5d                   	pop    ebp
c002266f:	c3                   	ret    

c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022670:	57                   	push   edi
c0022671:	56                   	push   esi
c0022672:	53                   	push   ebx
c0022673:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022677:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002267b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022681:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022685:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022689:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002268d:	83 ff 01             	cmp    edi,0x1
c0022690:	75 3e                	jne    c00226d0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022692:	89 de                	mov    esi,ebx
c0022694:	0f b6 c0             	movzx  eax,al
c0022697:	81 e6 fc 00 00 00    	and    esi,0xfc
c002269d:	c1 e0 10             	shl    eax,0x10
c00226a0:	0f b6 c9             	movzx  ecx,cl
c00226a3:	09 f0                	or     eax,esi
c00226a5:	c1 e1 08             	shl    ecx,0x8
c00226a8:	0f b6 d2             	movzx  edx,dl
c00226ab:	09 c8                	or     eax,ecx
c00226ad:	c1 e2 0b             	shl    edx,0xb
c00226b0:	09 d0                	or     eax,edx
c00226b2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00226b7:	0d 00 00 00 80       	or     eax,0x80000000
c00226bc:	ef                   	out    dx,eax
c00226bd:	ba fc 0c 00 00       	mov    edx,0xcfc
c00226c2:	ed                   	in     eax,dx
c00226c3:	83 e3 02             	and    ebx,0x2
c00226c6:	0f b6 cb             	movzx  ecx,bl
c00226c9:	c1 e1 03             	shl    ecx,0x3
c00226cc:	d3 e8                	shr    eax,cl
c00226ce:	eb 43                	jmp    c0022713 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00226d0:	83 ff 02             	cmp    edi,0x2
c00226d3:	75 2c                	jne    c0022701 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00226d5:	83 ec 0c             	sub    esp,0xc
c00226d8:	0f b6 c9             	movzx  ecx,cl
c00226db:	0f b6 d2             	movzx  edx,dl
c00226de:	0f b6 fb             	movzx  edi,bl
c00226e1:	0f b6 c0             	movzx  eax,al
c00226e4:	57                   	push   edi
c00226e5:	51                   	push   ecx
c00226e6:	52                   	push   edx
c00226e7:	50                   	push   eax
c00226e8:	56                   	push   esi
c00226e9:	e8 14 ff ff ff       	call   c0022602 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226ee:	89 c2                	mov    edx,eax
c00226f0:	ed                   	in     eax,dx
c00226f1:	83 e3 02             	and    ebx,0x2
c00226f4:	83 c4 20             	add    esp,0x20
c00226f7:	0f b6 cb             	movzx  ecx,bl
c00226fa:	c1 e1 03             	shl    ecx,0x3
c00226fd:	d3 e8                	shr    eax,cl
c00226ff:	eb 12                	jmp    c0022713 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022701:	83 ec 0c             	sub    esp,0xc
c0022704:	68 d8 c3 02 c0       	push   0xc002c3d8
c0022709:	e8 6b 78 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c002270e:	83 c4 10             	add    esp,0x10
c0022711:	31 c0                	xor    eax,eax
c0022713:	5b                   	pop    ebx
c0022714:	5e                   	pop    esi
c0022715:	5f                   	pop    edi
c0022716:	c3                   	ret    
c0022717:	90                   	nop

c0022718 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022718:	83 ec 18             	sub    esp,0x18
c002271b:	6a 00                	push   0x0
c002271d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022722:	50                   	push   eax
c0022723:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022728:	50                   	push   eax
c0022729:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002272e:	50                   	push   eax
c002272f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022733:	e8 38 ff ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022738:	83 c4 2c             	add    esp,0x2c
c002273b:	c3                   	ret    

c002273c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002273c:	83 ec 18             	sub    esp,0x18
c002273f:	6a 0e                	push   0xe
c0022741:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022746:	50                   	push   eax
c0022747:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002274c:	50                   	push   eax
c002274d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022752:	50                   	push   eax
c0022753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022757:	e8 14 ff ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002275c:	83 c4 2c             	add    esp,0x2c
c002275f:	0f b6 c0             	movzx  eax,al
c0022762:	c3                   	ret    
c0022763:	90                   	nop

c0022764 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022764:	55                   	push   ebp
c0022765:	57                   	push   edi
c0022766:	56                   	push   esi
c0022767:	53                   	push   ebx
c0022768:	83 ec 18             	sub    esp,0x18
c002276b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022770:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022775:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002277a:	6a 0a                	push   0xa
c002277c:	56                   	push   esi
c002277d:	55                   	push   ebp
c002277e:	57                   	push   edi
c002277f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022783:	e8 e8 fe ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022788:	83 c4 14             	add    esp,0x14
c002278b:	89 c3                	mov    ebx,eax
c002278d:	6a 0a                	push   0xa
c002278f:	0f b6 db             	movzx  ebx,bl
c0022792:	56                   	push   esi
c0022793:	55                   	push   ebp
c0022794:	57                   	push   edi
c0022795:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022799:	e8 d2 fe ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002279e:	83 c4 2c             	add    esp,0x2c
c00227a1:	25 00 ff 00 00       	and    eax,0xff00
c00227a6:	09 d8                	or     eax,ebx
c00227a8:	5b                   	pop    ebx
c00227a9:	5e                   	pop    esi
c00227aa:	5f                   	pop    edi
c00227ab:	5d                   	pop    ebp
c00227ac:	c3                   	ret    
c00227ad:	90                   	nop

c00227ae <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00227ae:	83 ec 18             	sub    esp,0x18
c00227b1:	6a 08                	push   0x8
c00227b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227b8:	50                   	push   eax
c00227b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227be:	50                   	push   eax
c00227bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227c4:	50                   	push   eax
c00227c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00227c9:	e8 a2 fe ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227ce:	83 c4 2c             	add    esp,0x2c
c00227d1:	0f b6 c4             	movzx  eax,ah
c00227d4:	c3                   	ret    
c00227d5:	90                   	nop

c00227d6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00227d6:	83 ec 18             	sub    esp,0x18
c00227d9:	6a 08                	push   0x8
c00227db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227e0:	50                   	push   eax
c00227e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227e6:	50                   	push   eax
c00227e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227ec:	50                   	push   eax
c00227ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00227f1:	e8 7a fe ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227f6:	83 c4 2c             	add    esp,0x2c
c00227f9:	c3                   	ret    

c00227fa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00227fa:	83 ec 18             	sub    esp,0x18
c00227fd:	6a 3c                	push   0x3c
c00227ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022804:	50                   	push   eax
c0022805:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002280a:	50                   	push   eax
c002280b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022810:	50                   	push   eax
c0022811:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022815:	e8 56 fe ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002281a:	83 c4 2c             	add    esp,0x2c
c002281d:	c3                   	ret    

c002281e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002281e:	83 ec 18             	sub    esp,0x18
c0022821:	6a 18                	push   0x18
c0022823:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022828:	50                   	push   eax
c0022829:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002282e:	50                   	push   eax
c002282f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022834:	50                   	push   eax
c0022835:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022839:	e8 32 fe ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002283e:	83 c4 2c             	add    esp,0x2c
c0022841:	0f b6 c4             	movzx  eax,ah
c0022844:	c3                   	ret    
c0022845:	90                   	nop

c0022846 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022846:	55                   	push   ebp
c0022847:	57                   	push   edi
c0022848:	56                   	push   esi
c0022849:	53                   	push   ebx
c002284a:	83 ec 28             	sub    esp,0x28
c002284d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022851:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022856:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002285b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022860:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022867:	8d 43 12             	lea    eax,[ebx+0x12]
c002286a:	83 c3 10             	add    ebx,0x10
c002286d:	0f b6 c0             	movzx  eax,al
c0022870:	0f b6 db             	movzx  ebx,bl
c0022873:	50                   	push   eax
c0022874:	51                   	push   ecx
c0022875:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022879:	57                   	push   edi
c002287a:	55                   	push   ebp
c002287b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002287f:	e8 ec fd ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022884:	83 c4 14             	add    esp,0x14
c0022887:	89 c6                	mov    esi,eax
c0022889:	53                   	push   ebx
c002288a:	c1 e6 10             	shl    esi,0x10
c002288d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022891:	51                   	push   ecx
c0022892:	57                   	push   edi
c0022893:	55                   	push   ebp
c0022894:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022898:	e8 d3 fd ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002289d:	83 c4 3c             	add    esp,0x3c
c00228a0:	0f b7 c0             	movzx  eax,ax
c00228a3:	5b                   	pop    ebx
c00228a4:	09 f0                	or     eax,esi
c00228a6:	5e                   	pop    esi
c00228a7:	5f                   	pop    edi
c00228a8:	5d                   	pop    ebp
c00228a9:	c3                   	ret    

c00228aa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00228aa:	55                   	push   ebp
c00228ab:	57                   	push   edi
c00228ac:	56                   	push   esi
c00228ad:	53                   	push   ebx
c00228ae:	83 ec 0c             	sub    esp,0xc
c00228b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00228b5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00228b9:	89 f5                	mov    ebp,esi
c00228bb:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00228c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00228c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00228c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00228cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00228d1:	83 f9 01             	cmp    ecx,0x1
c00228d4:	75 5d                	jne    c0022933 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00228d6:	0f b6 c8             	movzx  ecx,al
c00228d9:	0f b6 d2             	movzx  edx,dl
c00228dc:	c1 e1 10             	shl    ecx,0x10
c00228df:	c1 e2 0b             	shl    edx,0xb
c00228e2:	89 f0                	mov    eax,esi
c00228e4:	25 fc 00 00 00       	and    eax,0xfc
c00228e9:	09 c1                	or     ecx,eax
c00228eb:	89 e8                	mov    eax,ebp
c00228ed:	0f b6 c0             	movzx  eax,al
c00228f0:	c1 e0 08             	shl    eax,0x8
c00228f3:	09 c1                	or     ecx,eax
c00228f5:	09 d1                	or     ecx,edx
c00228f7:	ba f8 0c 00 00       	mov    edx,0xcf8
c00228fc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022902:	89 c8                	mov    eax,ecx
c0022904:	ef                   	out    dx,eax
c0022905:	ba fc 0c 00 00       	mov    edx,0xcfc
c002290a:	ed                   	in     eax,dx
c002290b:	0f b7 db             	movzx  ebx,bx
c002290e:	83 e6 02             	and    esi,0x2
c0022911:	74 0a                	je     c002291d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022913:	0f b7 d0             	movzx  edx,ax
c0022916:	c1 e3 10             	shl    ebx,0x10
c0022919:	09 d3                	or     ebx,edx
c002291b:	eb 05                	jmp    c0022922 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002291d:	66 31 c0             	xor    ax,ax
c0022920:	09 c3                	or     ebx,eax
c0022922:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022927:	89 c8                	mov    eax,ecx
c0022929:	ef                   	out    dx,eax
c002292a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002292f:	89 d8                	mov    eax,ebx
c0022931:	eb 41                	jmp    c0022974 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022933:	83 f9 02             	cmp    ecx,0x2
c0022936:	75 45                	jne    c002297d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022938:	83 ec 0c             	sub    esp,0xc
c002293b:	0f b6 d2             	movzx  edx,dl
c002293e:	89 f1                	mov    ecx,esi
c0022940:	0f b6 c0             	movzx  eax,al
c0022943:	0f b6 f1             	movzx  esi,cl
c0022946:	89 e9                	mov    ecx,ebp
c0022948:	56                   	push   esi
c0022949:	0f b6 c9             	movzx  ecx,cl
c002294c:	51                   	push   ecx
c002294d:	52                   	push   edx
c002294e:	50                   	push   eax
c002294f:	57                   	push   edi
c0022950:	e8 ad fc ff ff       	call   c0022602 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022955:	89 c2                	mov    edx,eax
c0022957:	ed                   	in     eax,dx
c0022958:	83 c4 20             	add    esp,0x20
c002295b:	0f b7 db             	movzx  ebx,bx
c002295e:	f6 c2 02             	test   dl,0x2
c0022961:	74 0c                	je     c002296f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022963:	0f b7 c8             	movzx  ecx,ax
c0022966:	89 d8                	mov    eax,ebx
c0022968:	c1 e0 10             	shl    eax,0x10
c002296b:	09 c8                	or     eax,ecx
c002296d:	eb 05                	jmp    c0022974 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002296f:	66 31 c0             	xor    ax,ax
c0022972:	09 d8                	or     eax,ebx
c0022974:	ef                   	out    dx,eax
c0022975:	83 c4 0c             	add    esp,0xc
c0022978:	5b                   	pop    ebx
c0022979:	5e                   	pop    esi
c002297a:	5f                   	pop    edi
c002297b:	5d                   	pop    ebp
c002297c:	c3                   	ret    
c002297d:	c7 44 24 20 d8 c3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c3d8
c0022985:	83 c4 0c             	add    esp,0xc
c0022988:	5b                   	pop    ebx
c0022989:	5e                   	pop    esi
c002298a:	5f                   	pop    edi
c002298b:	5d                   	pop    ebp
c002298c:	e9 e8 75 ff ff       	jmp    c0019f79 <Krnl::panic(char const*)>
c0022991:	90                   	nop

c0022992 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022992:	55                   	push   ebp
c0022993:	57                   	push   edi
c0022994:	56                   	push   esi
c0022995:	53                   	push   ebx
c0022996:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002299c:	80 3d b0 00 03 c0 00 	cmp    BYTE PTR ds:0xc00300b0,0x0
c00229a3:	0f 85 84 00 00 00    	jne    c0022a2d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00229a9:	83 ec 0c             	sub    esp,0xc
c00229ac:	68 14 01 00 00       	push   0x114
c00229b1:	e8 e3 cb fe ff       	call   c000f599 <malloc>
c00229b6:	83 c4 0c             	add    esp,0xc
c00229b9:	89 c3                	mov    ebx,eax
c00229bb:	ff 35 b0 f2 02 c0    	push   DWORD PTR ds:0xc002f2b0
c00229c1:	68 de c3 02 c0       	push   0xc002c3de
c00229c6:	50                   	push   eax
c00229c7:	e8 30 03 ff ff       	call   c0012cfc <File::File(char const*, Process*)>
c00229cc:	5a                   	pop    edx
c00229cd:	59                   	pop    ecx
c00229ce:	6a 01                	push   0x1
c00229d0:	53                   	push   ebx
c00229d1:	e8 8a 03 ff ff       	call   c0012d60 <File::open(FileOpenMode)>
c00229d6:	83 c4 0c             	add    esp,0xc
c00229d9:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00229dd:	50                   	push   eax
c00229de:	8d 44 24 28          	lea    eax,[esp+0x28]
c00229e2:	50                   	push   eax
c00229e3:	53                   	push   ebx
c00229e4:	e8 23 06 ff ff       	call   c001300c <File::stat(unsigned long long*, bool*)>
c00229e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00229ed:	40                   	inc    eax
c00229ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00229f1:	e8 a3 cb fe ff       	call   c000f599 <malloc>
c00229f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00229fa:	a3 ac 00 03 c0       	mov    ds:0xc00300ac,eax
c00229ff:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022a03:	5e                   	pop    esi
c0022a04:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022a06:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022a0a:	51                   	push   ecx
c0022a0b:	50                   	push   eax
c0022a0c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a10:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a14:	53                   	push   ebx
c0022a15:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022a18:	83 c4 14             	add    esp,0x14
c0022a1b:	53                   	push   ebx
c0022a1c:	e8 9d 03 ff ff       	call   c0012dbe <File::close()>
c0022a21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a25:	83 c4 10             	add    esp,0x10
c0022a28:	a3 a8 00 03 c0       	mov    ds:0xc00300a8,eax
c0022a2d:	a1 a8 00 03 c0       	mov    eax,ds:0xc00300a8
c0022a32:	8b 15 ac 00 03 c0    	mov    edx,DWORD PTR ds:0xc00300ac
c0022a38:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a3b:	31 ff                	xor    edi,edi
c0022a3d:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022a45:	31 f6                	xor    esi,esi
c0022a47:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022a4c:	31 db                	xor    ebx,ebx
c0022a4e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022a56:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022a5b:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022a62:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022a66:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022a6d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022a71:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022a74:	0f 8e 6b 01 00 00    	jle    c0022be5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022a7a:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022a7d:	d4 40                	aam    0x40
c0022a7f:	d5 39                	aad    0x39
c0022a81:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022a85:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022a89:	d4 40                	aam    0x40
c0022a8b:	d5 39                	aad    0x39
c0022a8d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022a91:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022a95:	d4 40                	aam    0x40
c0022a97:	d5 39                	aad    0x39
c0022a99:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022a9d:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022aa1:	d4 40                	aam    0x40
c0022aa3:	d5 39                	aad    0x39
c0022aa5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022aa9:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022aad:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022ab1:	3c 56                	cmp    al,0x56
c0022ab3:	74 45                	je     c0022afa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022ab5:	d4 40                	aam    0x40
c0022ab7:	d5 39                	aad    0x39
c0022ab9:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022abc:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022ac0:	0f b6 c9             	movzx  ecx,cl
c0022ac3:	c1 e1 04             	shl    ecx,0x4
c0022ac6:	d4 40                	aam    0x40
c0022ac8:	d5 39                	aad    0x39
c0022aca:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022acd:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022ad1:	0f b6 db             	movzx  ebx,bl
c0022ad4:	09 cb                	or     ebx,ecx
c0022ad6:	c1 e3 04             	shl    ebx,0x4
c0022ad9:	d4 40                	aam    0x40
c0022adb:	d5 39                	aad    0x39
c0022add:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022ae0:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022ae4:	0f b6 c9             	movzx  ecx,cl
c0022ae7:	09 cb                	or     ebx,ecx
c0022ae9:	c1 e3 04             	shl    ebx,0x4
c0022aec:	89 d9                	mov    ecx,ebx
c0022aee:	d4 40                	aam    0x40
c0022af0:	d5 39                	aad    0x39
c0022af2:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022af5:	0f b6 db             	movzx  ebx,bl
c0022af8:	09 cb                	or     ebx,ecx
c0022afa:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022afe:	80 f9 44             	cmp    cl,0x44
c0022b01:	74 47                	je     c0022b4a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022b03:	88 c8                	mov    al,cl
c0022b05:	d4 40                	aam    0x40
c0022b07:	d5 39                	aad    0x39
c0022b09:	83 e8 30             	sub    eax,0x30
c0022b0c:	0f b6 e8             	movzx  ebp,al
c0022b0f:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022b13:	c1 e5 04             	shl    ebp,0x4
c0022b16:	d4 40                	aam    0x40
c0022b18:	d5 39                	aad    0x39
c0022b1a:	83 e8 30             	sub    eax,0x30
c0022b1d:	0f b6 f0             	movzx  esi,al
c0022b20:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022b24:	09 ee                	or     esi,ebp
c0022b26:	c1 e6 04             	shl    esi,0x4
c0022b29:	d4 40                	aam    0x40
c0022b2b:	d5 39                	aad    0x39
c0022b2d:	83 e8 30             	sub    eax,0x30
c0022b30:	0f b6 e8             	movzx  ebp,al
c0022b33:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022b37:	09 ee                	or     esi,ebp
c0022b39:	c1 e6 04             	shl    esi,0x4
c0022b3c:	89 f5                	mov    ebp,esi
c0022b3e:	d4 40                	aam    0x40
c0022b40:	d5 39                	aad    0x39
c0022b42:	83 e8 30             	sub    eax,0x30
c0022b45:	0f b6 f0             	movzx  esi,al
c0022b48:	09 ee                	or     esi,ebp
c0022b4a:	83 c7 10             	add    edi,0x10
c0022b4d:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022b51:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022b54:	3c 0a                	cmp    al,0xa
c0022b56:	74 09                	je     c0022b61 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022b58:	45                   	inc    ebp
c0022b59:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022b5c:	75 16                	jne    c0022b74 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022b5e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022b61:	3c 0a                	cmp    al,0xa
c0022b63:	0f 94 c0             	sete   al
c0022b66:	0f b6 c0             	movzx  eax,al
c0022b69:	01 c7                	add    edi,eax
c0022b6b:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022b70:	75 0c                	jne    c0022b7e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022b72:	eb 15                	jmp    c0022b89 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022b74:	47                   	inc    edi
c0022b75:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022b78:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022b7c:	eb d3                	jmp    c0022b51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022b7e:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022b83:	0f 85 e8 fe ff ff    	jne    c0022a71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022b89:	80 f9 44             	cmp    cl,0x44
c0022b8c:	74 0b                	je     c0022b99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022b8e:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022b93:	0f 85 d8 fe ff ff    	jne    c0022a71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022b99:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022b9d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022ba1:	c1 e1 04             	shl    ecx,0x4
c0022ba4:	83 e8 30             	sub    eax,0x30
c0022ba7:	09 c8                	or     eax,ecx
c0022ba9:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022bad:	0f 85 be fe ff ff    	jne    c0022a71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022bb3:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022bb7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022bbb:	c1 e1 04             	shl    ecx,0x4
c0022bbe:	83 e8 30             	sub    eax,0x30
c0022bc1:	09 c8                	or     eax,ecx
c0022bc3:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022bc7:	0f 85 a4 fe ff ff    	jne    c0022a71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022bcd:	50                   	push   eax
c0022bce:	50                   	push   eax
c0022bcf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022bd3:	50                   	push   eax
c0022bd4:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022bdb:	e8 2c dc fd ff       	call   c000080c <strcpy>
c0022be0:	83 c4 10             	add    esp,0x10
c0022be3:	eb 15                	jmp    c0022bfa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022be5:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022bec:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022bf7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022bfa:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022c01:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022c07:	5b                   	pop    ebx
c0022c08:	5e                   	pop    esi
c0022c09:	5f                   	pop    edi
c0022c0a:	5d                   	pop    ebp
c0022c0b:	c3                   	ret    

c0022c0c <PCI::checkBus(unsigned char)>:
c0022c0c:	56                   	push   esi
c0022c0d:	53                   	push   ebx
c0022c0e:	31 db                	xor    ebx,ebx
c0022c10:	51                   	push   ecx
c0022c11:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c16:	52                   	push   edx
c0022c17:	53                   	push   ebx
c0022c18:	43                   	inc    ebx
c0022c19:	56                   	push   esi
c0022c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c1e:	e8 37 03 00 00       	call   c0022f5a <PCI::checkDevice(unsigned char, unsigned char)>
c0022c23:	83 c4 10             	add    esp,0x10
c0022c26:	83 fb 20             	cmp    ebx,0x20
c0022c29:	75 eb                	jne    c0022c16 <PCI::checkBus(unsigned char)+0xa>
c0022c2b:	58                   	pop    eax
c0022c2c:	5b                   	pop    ebx
c0022c2d:	5e                   	pop    esi
c0022c2e:	c3                   	ret    
c0022c2f:	90                   	nop

c0022c30 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c30:	55                   	push   ebp
c0022c31:	57                   	push   edi
c0022c32:	56                   	push   esi
c0022c33:	53                   	push   ebx
c0022c34:	83 ec 1c             	sub    esp,0x1c
c0022c37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c3b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c41:	0f 84 52 01 00 00    	je     c0022d99 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c47:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c4b:	66 81 f9 06 04       	cmp    cx,0x406
c0022c50:	75 2c                	jne    c0022c7e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c52:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c57:	50                   	push   eax
c0022c58:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c5d:	50                   	push   eax
c0022c5e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c63:	50                   	push   eax
c0022c64:	56                   	push   esi
c0022c65:	e8 b4 fb ff ff       	call   c002281e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c6a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c6e:	0f b6 c0             	movzx  eax,al
c0022c71:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c75:	83 c4 2c             	add    esp,0x2c
c0022c78:	5b                   	pop    ebx
c0022c79:	5e                   	pop    esi
c0022c7a:	5f                   	pop    edi
c0022c7b:	5d                   	pop    ebp
c0022c7c:	eb 8e                	jmp    c0022c0c <PCI::checkBus(unsigned char)>
c0022c7e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c82:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c8c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c90:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c94:	88 d3                	mov    bl,dl
c0022c96:	85 c0                	test   eax,eax
c0022c98:	74 33                	je     c0022ccd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c9a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c9d:	85 d2                	test   edx,edx
c0022c9f:	74 28                	je     c0022cc9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ca1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022ca7:	31 ef                	xor    edi,ebp
c0022ca9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022caf:	75 18                	jne    c0022cc9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cb1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022cb5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022cbb:	75 0c                	jne    c0022cc9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cbd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cc3:	0f 84 d0 00 00 00    	je     c0022d99 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ccb:	eb c9                	jmp    c0022c96 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022ccd:	66 81 f9 01 06       	cmp    cx,0x601
c0022cd2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022cd6:	75 19                	jne    c0022cf1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022cd8:	83 ec 0c             	sub    esp,0xc
c0022cdb:	68 64 01 00 00       	push   0x164
c0022ce0:	e8 b4 c8 fe ff       	call   c000f599 <malloc>
c0022ce5:	89 c5                	mov    ebp,eax
c0022ce7:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cea:	e8 85 0e 00 00       	call   c0023b74 <SATABus::SATABus()>
c0022cef:	eb 1e                	jmp    c0022d0f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022cf1:	66 81 f9 01 01       	cmp    cx,0x101
c0022cf6:	75 60                	jne    c0022d58 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022cf8:	83 ec 0c             	sub    esp,0xc
c0022cfb:	68 70 02 00 00       	push   0x270
c0022d00:	e8 94 c8 fe ff       	call   c000f599 <malloc>
c0022d05:	89 c5                	mov    ebp,eax
c0022d07:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d0a:	e8 0f 03 00 00       	call   c002301e <IDE::IDE()>
c0022d0f:	58                   	pop    eax
c0022d10:	5a                   	pop    edx
c0022d11:	55                   	push   ebp
c0022d12:	56                   	push   esi
c0022d13:	e8 be 0e ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0022d18:	83 ec 1c             	sub    esp,0x1c
c0022d1b:	b9 09 00 00 00       	mov    ecx,0x9
c0022d20:	fc                   	cld    
c0022d21:	89 e7                	mov    edi,esp
c0022d23:	89 de                	mov    esi,ebx
c0022d25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d27:	55                   	push   ebp
c0022d28:	e8 bb 0d ff ff       	call   c0013ae8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d2d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d30:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d34:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d3c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d44:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d4f:	83 c4 4c             	add    esp,0x4c
c0022d52:	5b                   	pop    ebx
c0022d53:	5e                   	pop    esi
c0022d54:	5f                   	pop    edi
c0022d55:	5d                   	pop    ebp
c0022d56:	ff e0                	jmp    eax
c0022d58:	83 ec 0c             	sub    esp,0xc
c0022d5b:	68 58 01 00 00       	push   0x158
c0022d60:	e8 34 c8 fe ff       	call   c000f599 <malloc>
c0022d65:	89 c5                	mov    ebp,eax
c0022d67:	58                   	pop    eax
c0022d68:	5a                   	pop    edx
c0022d69:	68 f7 c3 02 c0       	push   0xc002c3f7
c0022d6e:	55                   	push   ebp
c0022d6f:	e8 6c 11 ff ff       	call   c0013ee0 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d74:	59                   	pop    ecx
c0022d75:	5f                   	pop    edi
c0022d76:	55                   	push   ebp
c0022d77:	56                   	push   esi
c0022d78:	e8 59 0e ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c0022d7d:	b9 09 00 00 00       	mov    ecx,0x9
c0022d82:	fc                   	cld    
c0022d83:	89 df                	mov    edi,ebx
c0022d85:	89 de                	mov    esi,ebx
c0022d87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d89:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d8d:	83 c4 2c             	add    esp,0x2c
c0022d90:	5b                   	pop    ebx
c0022d91:	5e                   	pop    esi
c0022d92:	5f                   	pop    edi
c0022d93:	5d                   	pop    ebp
c0022d94:	e9 4f 0d ff ff       	jmp    c0013ae8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d99:	83 c4 1c             	add    esp,0x1c
c0022d9c:	5b                   	pop    ebx
c0022d9d:	5e                   	pop    esi
c0022d9e:	5f                   	pop    edi
c0022d9f:	5d                   	pop    ebp
c0022da0:	c3                   	ret    
c0022da1:	90                   	nop

c0022da2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022da2:	55                   	push   ebp
c0022da3:	57                   	push   edi
c0022da4:	56                   	push   esi
c0022da5:	53                   	push   ebx
c0022da6:	83 ec 68             	sub    esp,0x68
c0022da9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022dad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022db4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022dbf:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022dc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022dc8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022dcf:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022dd8:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022ddd:	6a 0c                	push   0xc
c0022ddf:	57                   	push   edi
c0022de0:	53                   	push   ebx
c0022de1:	56                   	push   esi
c0022de2:	55                   	push   ebp
c0022de3:	e8 88 f8 ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022de8:	83 c4 20             	add    esp,0x20
c0022deb:	57                   	push   edi
c0022dec:	53                   	push   ebx
c0022ded:	56                   	push   esi
c0022dee:	55                   	push   ebp
c0022def:	e8 70 f9 ff ff       	call   c0022764 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022df4:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022df9:	57                   	push   edi
c0022dfa:	53                   	push   ebx
c0022dfb:	56                   	push   esi
c0022dfc:	55                   	push   ebp
c0022dfd:	e8 f8 f9 ff ff       	call   c00227fa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e02:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022e06:	83 c4 14             	add    esp,0x14
c0022e09:	6a 3c                	push   0x3c
c0022e0b:	57                   	push   edi
c0022e0c:	53                   	push   ebx
c0022e0d:	56                   	push   esi
c0022e0e:	55                   	push   ebp
c0022e0f:	e8 5c f8 ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e14:	0f b6 c4             	movzx  eax,ah
c0022e17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022e1b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022e1f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022e23:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0022e28:	83 c4 20             	add    esp,0x20
c0022e2b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e31:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e38:	74 7c                	je     c0022eb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022e3a:	31 c0                	xor    eax,eax
c0022e3c:	8b 15 88 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd88
c0022e42:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e48:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022e4e:	7e 66                	jle    c0022eb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022e50:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022e53:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e5a:	39 cb                	cmp    ebx,ecx
c0022e5c:	75 55                	jne    c0022eb3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022e5e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e65:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022e69:	75 48                	jne    c0022eb3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022e6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022e6f:	83 ec 0c             	sub    esp,0xc
c0022e72:	68 11 c4 02 c0       	push   0xc002c411
c0022e77:	e8 21 f9 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0022e7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e80:	8b 15 88 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd88
c0022e86:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022e8a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e90:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022e98:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022e9c:	52                   	push   edx
c0022e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ea1:	53                   	push   ebx
c0022ea2:	68 36 c4 02 c0       	push   0xc002c436
c0022ea7:	e8 f1 f8 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0022eac:	83 c4 20             	add    esp,0x20
c0022eaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022eb3:	40                   	inc    eax
c0022eb4:	eb 86                	jmp    c0022e3c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022eb6:	31 d2                	xor    edx,edx
c0022eb8:	83 ec 0c             	sub    esp,0xc
c0022ebb:	57                   	push   edi
c0022ebc:	53                   	push   ebx
c0022ebd:	56                   	push   esi
c0022ebe:	52                   	push   edx
c0022ebf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022ec3:	55                   	push   ebp
c0022ec4:	e8 7d f9 ff ff       	call   c0022846 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ec9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022ecd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022ed1:	42                   	inc    edx
c0022ed2:	83 c4 20             	add    esp,0x20
c0022ed5:	83 fa 06             	cmp    edx,0x6
c0022ed8:	75 de                	jne    c0022eb8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022eda:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022edf:	83 ec 0c             	sub    esp,0xc
c0022ee2:	86 e0                	xchg   al,ah
c0022ee4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022ee9:	6a 02                	push   0x2
c0022eeb:	57                   	push   edi
c0022eec:	53                   	push   ebx
c0022eed:	56                   	push   esi
c0022eee:	55                   	push   ebp
c0022eef:	e8 7c f7 ff ff       	call   c0022670 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ef4:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022ef9:	83 c4 20             	add    esp,0x20
c0022efc:	57                   	push   edi
c0022efd:	53                   	push   ebx
c0022efe:	56                   	push   esi
c0022eff:	55                   	push   ebp
c0022f00:	e8 a9 f8 ff ff       	call   c00227ae <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f05:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f09:	57                   	push   edi
c0022f0a:	53                   	push   ebx
c0022f0b:	56                   	push   esi
c0022f0c:	55                   	push   ebp
c0022f0d:	e8 06 f8 ff ff       	call   c0022718 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f12:	b9 09 00 00 00       	mov    ecx,0x9
c0022f17:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022f1c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022f20:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022f24:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022f28:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022f2c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022f30:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022f34:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022f38:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022f3c:	83 ec 0c             	sub    esp,0xc
c0022f3f:	fc                   	cld    
c0022f40:	89 e7                	mov    edi,esp
c0022f42:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022f46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f48:	55                   	push   ebp
c0022f49:	e8 e2 fc ff ff       	call   c0022c30 <PCI::foundDevice(PCIDeviceInfo)>
c0022f4e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f54:	5b                   	pop    ebx
c0022f55:	5e                   	pop    esi
c0022f56:	5f                   	pop    edi
c0022f57:	5d                   	pop    ebp
c0022f58:	c3                   	ret    
c0022f59:	90                   	nop

c0022f5a <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f5a:	55                   	push   ebp
c0022f5b:	57                   	push   edi
c0022f5c:	56                   	push   esi
c0022f5d:	53                   	push   ebx
c0022f5e:	83 ec 0c             	sub    esp,0xc
c0022f61:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f65:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f6a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f6f:	6a 00                	push   0x0
c0022f71:	56                   	push   esi
c0022f72:	57                   	push   edi
c0022f73:	55                   	push   ebp
c0022f74:	e8 9f f7 ff ff       	call   c0022718 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f79:	6a 00                	push   0x0
c0022f7b:	56                   	push   esi
c0022f7c:	57                   	push   edi
c0022f7d:	55                   	push   ebp
c0022f7e:	e8 1f fe ff ff       	call   c0022da2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f83:	83 c4 20             	add    esp,0x20
c0022f86:	6a 00                	push   0x0
c0022f88:	56                   	push   esi
c0022f89:	57                   	push   edi
c0022f8a:	55                   	push   ebp
c0022f8b:	e8 ac f7 ff ff       	call   c002273c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f90:	83 c4 10             	add    esp,0x10
c0022f93:	84 c0                	test   al,al
c0022f95:	79 27                	jns    c0022fbe <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f97:	bb 01 00 00 00       	mov    ebx,0x1
c0022f9c:	53                   	push   ebx
c0022f9d:	56                   	push   esi
c0022f9e:	57                   	push   edi
c0022f9f:	55                   	push   ebp
c0022fa0:	e8 73 f7 ff ff       	call   c0022718 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fa5:	83 c4 10             	add    esp,0x10
c0022fa8:	66 40                	inc    ax
c0022faa:	74 0c                	je     c0022fb8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022fac:	53                   	push   ebx
c0022fad:	56                   	push   esi
c0022fae:	57                   	push   edi
c0022faf:	55                   	push   ebp
c0022fb0:	e8 ed fd ff ff       	call   c0022da2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fb5:	83 c4 10             	add    esp,0x10
c0022fb8:	43                   	inc    ebx
c0022fb9:	83 fb 08             	cmp    ebx,0x8
c0022fbc:	75 de                	jne    c0022f9c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fbe:	83 c4 0c             	add    esp,0xc
c0022fc1:	5b                   	pop    ebx
c0022fc2:	5e                   	pop    esi
c0022fc3:	5f                   	pop    edi
c0022fc4:	5d                   	pop    ebp
c0022fc5:	c3                   	ret    

c0022fc6 <PCI::detect()>:
c0022fc6:	56                   	push   esi
c0022fc7:	53                   	push   ebx
c0022fc8:	53                   	push   ebx
c0022fc9:	31 db                	xor    ebx,ebx
c0022fcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022fcf:	6a 00                	push   0x0
c0022fd1:	6a 00                	push   0x0
c0022fd3:	6a 00                	push   0x0
c0022fd5:	56                   	push   esi
c0022fd6:	e8 61 f7 ff ff       	call   c002273c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fdb:	83 c4 10             	add    esp,0x10
c0022fde:	a8 80                	test   al,0x80
c0022fe0:	75 21                	jne    c0023003 <PCI::detect()+0x3d>
c0022fe2:	51                   	push   ecx
c0022fe3:	51                   	push   ecx
c0022fe4:	6a 00                	push   0x0
c0022fe6:	56                   	push   esi
c0022fe7:	e8 20 fc ff ff       	call   c0022c0c <PCI::checkBus(unsigned char)>
c0022fec:	83 c4 10             	add    esp,0x10
c0022fef:	eb 24                	jmp    c0023015 <PCI::detect()+0x4f>
c0022ff1:	52                   	push   edx
c0022ff2:	52                   	push   edx
c0022ff3:	53                   	push   ebx
c0022ff4:	43                   	inc    ebx
c0022ff5:	56                   	push   esi
c0022ff6:	e8 11 fc ff ff       	call   c0022c0c <PCI::checkBus(unsigned char)>
c0022ffb:	83 c4 10             	add    esp,0x10
c0022ffe:	83 fb 08             	cmp    ebx,0x8
c0023001:	74 12                	je     c0023015 <PCI::detect()+0x4f>
c0023003:	53                   	push   ebx
c0023004:	6a 00                	push   0x0
c0023006:	6a 00                	push   0x0
c0023008:	56                   	push   esi
c0023009:	e8 0a f7 ff ff       	call   c0022718 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002300e:	83 c4 10             	add    esp,0x10
c0023011:	66 40                	inc    ax
c0023013:	74 dc                	je     c0022ff1 <PCI::detect()+0x2b>
c0023015:	58                   	pop    eax
c0023016:	5b                   	pop    ebx
c0023017:	5e                   	pop    esi
c0023018:	c3                   	ret    
c0023019:	90                   	nop

c002301a <IDE::close(int, int, void*)>:
c002301a:	83 c8 ff             	or     eax,0xffffffff
c002301d:	c3                   	ret    

c002301e <IDE::IDE()>:
c002301e:	83 ec 0c             	sub    esp,0xc
c0023021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023025:	83 ec 08             	sub    esp,0x8
c0023028:	68 80 c4 02 c0       	push   0xc002c480
c002302d:	50                   	push   eax
c002302e:	e8 51 0f ff ff       	call   c0013f84 <HardDiskController::HardDiskController(char const*)>
c0023033:	83 c4 10             	add    esp,0x10
c0023036:	ba 10 c5 02 c0       	mov    edx,0xc002c510
c002303b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002303f:	89 10                	mov    DWORD PTR [eax],edx
c0023041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023045:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002304c:	90                   	nop
c002304d:	83 c4 0c             	add    esp,0xc
c0023050:	c3                   	ret    
c0023051:	90                   	nop

c0023052 <IDE::prepareInterrupt(unsigned char)>:
c0023052:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002305b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023063:	c3                   	ret    

c0023064 <selectDrive(unsigned char, unsigned char)>:
c0023064:	c3                   	ret    
c0023065:	90                   	nop

c0023066 <IDE::getBase(unsigned char)>:
c0023066:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002306b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002306f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023077:	c3                   	ret    

c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023078:	55                   	push   ebp
c0023079:	57                   	push   edi
c002307a:	56                   	push   esi
c002307b:	53                   	push   ebx
c002307c:	83 ec 1c             	sub    esp,0x1c
c002307f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023083:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023087:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002308a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002308e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023092:	80 f9 03             	cmp    cl,0x3
c0023095:	77 51                	ja     c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023097:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002309b:	0f b6 f2             	movzx  esi,dl
c002309e:	0f b6 db             	movzx  ebx,bl
c00230a1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230a4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00230a8:	83 ca 80             	or     edx,0xffffff80
c00230ab:	0f b6 d2             	movzx  edx,dl
c00230ae:	52                   	push   edx
c00230af:	6a 0c                	push   0xc
c00230b1:	56                   	push   esi
c00230b2:	57                   	push   edi
c00230b3:	e8 c0 ff ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230b8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00230bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230c1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230c5:	ee                   	out    dx,al
c00230c6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230cb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230cf:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00230d3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00230d7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00230df:	83 c4 2c             	add    esp,0x2c
c00230e2:	5b                   	pop    ebx
c00230e3:	5e                   	pop    esi
c00230e4:	5f                   	pop    edi
c00230e5:	5d                   	pop    ebp
c00230e6:	eb 90                	jmp    c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e8:	80 fb 07             	cmp    bl,0x7
c00230eb:	77 12                	ja     c00230ff <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00230ed:	0f b6 d2             	movzx  edx,dl
c00230f0:	0f b6 db             	movzx  ebx,bl
c00230f3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00230fb:	89 da                	mov    edx,ebx
c00230fd:	eb 2f                	jmp    c002312e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230ff:	80 fb 0d             	cmp    bl,0xd
c0023102:	77 13                	ja     c0023117 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023104:	0f b6 d2             	movzx  edx,dl
c0023107:	0f b6 db             	movzx  ebx,bl
c002310a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023111:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023115:	eb 17                	jmp    c002312e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023117:	80 fb 15             	cmp    bl,0x15
c002311a:	77 13                	ja     c002312f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002311c:	0f b6 d2             	movzx  edx,dl
c002311f:	0f b6 db             	movzx  ebx,bl
c0023122:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002312a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002312e:	ee                   	out    dx,al
c002312f:	83 c4 1c             	add    esp,0x1c
c0023132:	5b                   	pop    ebx
c0023133:	5e                   	pop    esi
c0023134:	5f                   	pop    edi
c0023135:	5d                   	pop    ebp
c0023136:	c3                   	ret    
c0023137:	90                   	nop

c0023138 <IDE::read(unsigned char, unsigned char)>:
c0023138:	55                   	push   ebp
c0023139:	57                   	push   edi
c002313a:	56                   	push   esi
c002313b:	53                   	push   ebx
c002313c:	83 ec 1c             	sub    esp,0x1c
c002313f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023143:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023147:	8d 43 f8             	lea    eax,[ebx-0x8]
c002314a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002314e:	3c 03                	cmp    al,0x3
c0023150:	77 43                	ja     c0023195 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023152:	0f b6 f2             	movzx  esi,dl
c0023155:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023158:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002315c:	83 c8 80             	or     eax,0xffffff80
c002315f:	0f b6 c0             	movzx  eax,al
c0023162:	50                   	push   eax
c0023163:	6a 0c                	push   0xc
c0023165:	56                   	push   esi
c0023166:	57                   	push   edi
c0023167:	e8 0c ff ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002316c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023171:	0f b6 c3             	movzx  eax,bl
c0023174:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023178:	ec                   	in     al,dx
c0023179:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002317d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023182:	52                   	push   edx
c0023183:	6a 0c                	push   0xc
c0023185:	56                   	push   esi
c0023186:	57                   	push   edi
c0023187:	e8 ec fe ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002318c:	83 c4 20             	add    esp,0x20
c002318f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023193:	eb 49                	jmp    c00231de <IDE::read(unsigned char, unsigned char)+0xa6>
c0023195:	80 fb 07             	cmp    bl,0x7
c0023198:	77 12                	ja     c00231ac <IDE::read(unsigned char, unsigned char)+0x74>
c002319a:	0f b6 d2             	movzx  edx,dl
c002319d:	0f b6 c3             	movzx  eax,bl
c00231a0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00231a8:	89 c2                	mov    edx,eax
c00231aa:	eb 31                	jmp    c00231dd <IDE::read(unsigned char, unsigned char)+0xa5>
c00231ac:	80 fb 0d             	cmp    bl,0xd
c00231af:	77 13                	ja     c00231c4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00231b1:	0f b6 d2             	movzx  edx,dl
c00231b4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00231bb:	0f b6 d3             	movzx  edx,bl
c00231be:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231c2:	eb 19                	jmp    c00231dd <IDE::read(unsigned char, unsigned char)+0xa5>
c00231c4:	31 c0                	xor    eax,eax
c00231c6:	80 fb 15             	cmp    bl,0x15
c00231c9:	77 13                	ja     c00231de <IDE::read(unsigned char, unsigned char)+0xa6>
c00231cb:	0f b6 d2             	movzx  edx,dl
c00231ce:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00231d6:	0f b6 d3             	movzx  edx,bl
c00231d9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00231dd:	ec                   	in     al,dx
c00231de:	83 c4 1c             	add    esp,0x1c
c00231e1:	5b                   	pop    ebx
c00231e2:	5e                   	pop    esi
c00231e3:	5f                   	pop    edi
c00231e4:	5d                   	pop    ebp
c00231e5:	c3                   	ret    

c00231e6 <IDE::waitInterrupt(unsigned char)>:
c00231e6:	55                   	push   ebp
c00231e7:	57                   	push   edi
c00231e8:	56                   	push   esi
c00231e9:	53                   	push   ebx
c00231ea:	31 db                	xor    ebx,ebx
c00231ec:	83 ec 0c             	sub    esp,0xc
c00231ef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00231f3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00231f8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023200:	89 e8                	mov    eax,ebp
c0023202:	84 c0                	test   al,al
c0023204:	75 34                	jne    c002323a <IDE::waitInterrupt(unsigned char)+0x54>
c0023206:	52                   	push   edx
c0023207:	6a 0c                	push   0xc
c0023209:	56                   	push   esi
c002320a:	57                   	push   edi
c002320b:	e8 28 ff ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023210:	83 c4 10             	add    esp,0x10
c0023213:	a8 01                	test   al,0x1
c0023215:	75 2b                	jne    c0023242 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023217:	f6 c3 04             	test   bl,0x4
c002321a:	75 16                	jne    c0023232 <IDE::waitInterrupt(unsigned char)+0x4c>
c002321c:	83 fb 32             	cmp    ebx,0x32
c002321f:	7e 11                	jle    c0023232 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023221:	50                   	push   eax
c0023222:	50                   	push   eax
c0023223:	6a 00                	push   0x0
c0023225:	68 80 96 98 00       	push   0x989680
c002322a:	e8 b6 ab ff ff       	call   c001dde5 <nanoSleep(unsigned long long)>
c002322f:	83 c4 10             	add    esp,0x10
c0023232:	83 fb 3c             	cmp    ebx,0x3c
c0023235:	74 0b                	je     c0023242 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023237:	43                   	inc    ebx
c0023238:	eb be                	jmp    c00231f8 <IDE::waitInterrupt(unsigned char)+0x12>
c002323a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023242:	83 c4 0c             	add    esp,0xc
c0023245:	89 e8                	mov    eax,ebp
c0023247:	5b                   	pop    ebx
c0023248:	5e                   	pop    esi
c0023249:	5f                   	pop    edi
c002324a:	5d                   	pop    ebp
c002324b:	c3                   	ret    

c002324c <ideChannel0IRQHandler(regs*, void*)>:
c002324c:	83 ec 10             	sub    esp,0x10
c002324f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023253:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002325a:	6a 07                	push   0x7
c002325c:	6a 00                	push   0x0
c002325e:	50                   	push   eax
c002325f:	e8 d4 fe ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023264:	83 c4 1c             	add    esp,0x1c
c0023267:	c3                   	ret    

c0023268 <ideChannel1IRQHandler(regs*, void*)>:
c0023268:	83 ec 10             	sub    esp,0x10
c002326b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002326f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023276:	6a 07                	push   0x7
c0023278:	6a 01                	push   0x1
c002327a:	50                   	push   eax
c002327b:	e8 b8 fe ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023280:	83 c4 1c             	add    esp,0x1c
c0023283:	c3                   	ret    

c0023284 <IDE::enableIRQs(unsigned char, bool)>:
c0023284:	57                   	push   edi
c0023285:	56                   	push   esi
c0023286:	be 04 00 00 00       	mov    esi,0x4
c002328b:	53                   	push   ebx
c002328c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023291:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023295:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002329a:	0f 94 c0             	sete   al
c002329d:	d1 e0                	shl    eax,1
c002329f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232a6:	0f b6 c0             	movzx  eax,al
c00232a9:	50                   	push   eax
c00232aa:	6a 0c                	push   0xc
c00232ac:	57                   	push   edi
c00232ad:	53                   	push   ebx
c00232ae:	e8 c5 fd ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232b3:	83 c4 10             	add    esp,0x10
c00232b6:	50                   	push   eax
c00232b7:	6a 0c                	push   0xc
c00232b9:	57                   	push   edi
c00232ba:	53                   	push   ebx
c00232bb:	e8 78 fe ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c00232c0:	83 c4 10             	add    esp,0x10
c00232c3:	4e                   	dec    esi
c00232c4:	75 f0                	jne    c00232b6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232c6:	5b                   	pop    ebx
c00232c7:	5e                   	pop    esi
c00232c8:	5f                   	pop    edi
c00232c9:	c3                   	ret    

c00232ca <IDE::open(int, int, void*)>:
c00232ca:	55                   	push   ebp
c00232cb:	57                   	push   edi
c00232cc:	56                   	push   esi
c00232cd:	53                   	push   ebx
c00232ce:	83 ec 1c             	sub    esp,0x1c
c00232d1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00232d5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00232de:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00232e7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00232ee:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00232f5:	0f 85 b0 02 00 00    	jne    c00235ab <IDE::open(int, int, void*)+0x2e1>
c00232fb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023301:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023305:	83 e0 7f             	and    eax,0x7f
c0023308:	3c 05                	cmp    al,0x5
c002330a:	74 04                	je     c0023310 <IDE::open(int, int, void*)+0x46>
c002330c:	3c 0f                	cmp    al,0xf
c002330e:	75 32                	jne    c0023342 <IDE::open(int, int, void*)+0x78>
c0023310:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023316:	83 e0 fc             	and    eax,0xfffffffc
c0023319:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023320:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023326:	83 e0 fc             	and    eax,0xfffffffc
c0023329:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023330:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023336:	83 e0 fc             	and    eax,0xfffffffc
c0023339:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023340:	eb 14                	jmp    c0023356 <IDE::open(int, int, void*)+0x8c>
c0023342:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002334c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023356:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002335d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023364:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023368:	89 c6                	mov    esi,eax
c002336a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002336f:	c1 e6 10             	shl    esi,0x10
c0023372:	89 e8                	mov    eax,ebp
c0023374:	89 fa                	mov    edx,edi
c0023376:	c1 e0 0b             	shl    eax,0xb
c0023379:	09 f0                	or     eax,esi
c002337b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023382:	c1 e6 08             	shl    esi,0x8
c0023385:	09 c6                	or     esi,eax
c0023387:	89 f0                	mov    eax,esi
c0023389:	0d 08 00 00 80       	or     eax,0x80000008
c002338e:	ef                   	out    dx,eax
c002338f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023394:	89 ca                	mov    edx,ecx
c0023396:	ed                   	in     eax,dx
c0023397:	c1 e8 10             	shr    eax,0x10
c002339a:	3d ff ff 00 00       	cmp    eax,0xffff
c002339f:	0f 84 f5 00 00 00    	je     c002349a <IDE::open(int, int, void*)+0x1d0>
c00233a5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00233ab:	89 fa                	mov    edx,edi
c00233ad:	89 f0                	mov    eax,esi
c00233af:	ef                   	out    dx,eax
c00233b0:	b0 fe                	mov    al,0xfe
c00233b2:	89 ca                	mov    edx,ecx
c00233b4:	ee                   	out    dx,al
c00233b5:	89 f0                	mov    eax,esi
c00233b7:	89 fa                	mov    edx,edi
c00233b9:	ef                   	out    dx,eax
c00233ba:	89 ca                	mov    edx,ecx
c00233bc:	ed                   	in     eax,dx
c00233bd:	3c fe                	cmp    al,0xfe
c00233bf:	0f 85 a9 00 00 00    	jne    c002346e <IDE::open(int, int, void*)+0x1a4>
c00233c5:	8b 15 88 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd88
c00233cb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00233d2:	74 33                	je     c0023407 <IDE::open(int, int, void*)+0x13d>
c00233d4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00233da:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00233de:	40                   	inc    eax
c00233df:	83 ec 0c             	sub    esp,0xc
c00233e2:	0f b6 c0             	movzx  eax,al
c00233e5:	50                   	push   eax
c00233e6:	55                   	push   ebp
c00233e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233eb:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00233f1:	51                   	push   ecx
c00233f2:	e8 3b 48 ff ff       	call   c0017c32 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00233f7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00233fc:	83 c4 1c             	add    esp,0x1c
c00233ff:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023405:	eb 0a                	jmp    c0023411 <IDE::open(int, int, void*)+0x147>
c0023407:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023411:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023418:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002341f:	c1 e1 10             	shl    ecx,0x10
c0023422:	c1 e0 08             	shl    eax,0x8
c0023425:	bf f8 0c 00 00       	mov    edi,0xcf8
c002342a:	09 c1                	or     ecx,eax
c002342c:	89 fa                	mov    edx,edi
c002342e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023435:	c1 e0 0b             	shl    eax,0xb
c0023438:	09 c1                	or     ecx,eax
c002343a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023440:	89 c8                	mov    eax,ecx
c0023442:	ef                   	out    dx,eax
c0023443:	be fc 0c 00 00       	mov    esi,0xcfc
c0023448:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002344e:	89 f2                	mov    edx,esi
c0023450:	ee                   	out    dx,al
c0023451:	89 c8                	mov    eax,ecx
c0023453:	89 fa                	mov    edx,edi
c0023455:	ef                   	out    dx,eax
c0023456:	89 f2                	mov    edx,esi
c0023458:	ed                   	in     eax,dx
c0023459:	0f b6 c0             	movzx  eax,al
c002345c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023462:	74 46                	je     c00234aa <IDE::open(int, int, void*)+0x1e0>
c0023464:	83 ec 0c             	sub    esp,0xc
c0023467:	68 98 c4 02 c0       	push   0xc002c498
c002346c:	eb 34                	jmp    c00234a2 <IDE::open(int, int, void*)+0x1d8>
c002346e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023477:	75 17                	jne    c0023490 <IDE::open(int, int, void*)+0x1c6>
c0023479:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002347e:	74 07                	je     c0023487 <IDE::open(int, int, void*)+0x1bd>
c0023480:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023485:	75 09                	jne    c0023490 <IDE::open(int, int, void*)+0x1c6>
c0023487:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002348e:	eb 1a                	jmp    c00234aa <IDE::open(int, int, void*)+0x1e0>
c0023490:	83 ec 0c             	sub    esp,0xc
c0023493:	68 a0 c4 02 c0       	push   0xc002c4a0
c0023498:	eb 08                	jmp    c00234a2 <IDE::open(int, int, void*)+0x1d8>
c002349a:	83 ec 0c             	sub    esp,0xc
c002349d:	68 d1 c4 02 c0       	push   0xc002c4d1
c00234a2:	e8 d2 6a ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c00234a7:	83 c4 10             	add    esp,0x10
c00234aa:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00234b1:	79 1a                	jns    c00234cd <IDE::open(int, int, void*)+0x203>
c00234b3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00234b9:	83 e0 fc             	and    eax,0xfffffffc
c00234bc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234c3:	83 c0 08             	add    eax,0x8
c00234c6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234cd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00234d3:	89 c2                	mov    edx,eax
c00234d5:	83 e2 0f             	and    edx,0xf
c00234d8:	66 83 fa 08          	cmp    dx,0x8
c00234dc:	75 0a                	jne    c00234e8 <IDE::open(int, int, void*)+0x21e>
c00234de:	83 e8 02             	sub    eax,0x2
c00234e1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234e8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00234ee:	89 c2                	mov    edx,eax
c00234f0:	83 e2 0f             	and    edx,0xf
c00234f3:	66 83 fa 08          	cmp    dx,0x8
c00234f7:	75 0a                	jne    c0023503 <IDE::open(int, int, void*)+0x239>
c00234f9:	83 e8 02             	sub    eax,0x2
c00234fc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023503:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002350a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023511:	89 d0                	mov    eax,edx
c0023513:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023516:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002351a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002351e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023521:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023526:	0f b6 c9             	movzx  ecx,cl
c0023529:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023530:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023533:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023537:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002353b:	8d 50 02             	lea    edx,[eax+0x2]
c002353e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023543:	0f b6 d2             	movzx  edx,dl
c0023546:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002354c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002354f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023553:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023557:	8d 48 03             	lea    ecx,[eax+0x3]
c002355a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002355f:	0f b6 c9             	movzx  ecx,cl
c0023562:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023568:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002356b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002356f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023573:	8d 50 04             	lea    edx,[eax+0x4]
c0023576:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002357c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023581:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023588:	66 85 f6             	test   si,si
c002358b:	74 5b                	je     c00235e8 <IDE::open(int, int, void*)+0x31e>
c002358d:	0f b6 d2             	movzx  edx,dl
c0023590:	83 c0 05             	add    eax,0x5
c0023593:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023596:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002359a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002359e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235a4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235a9:	eb 3d                	jmp    c00235e8 <IDE::open(int, int, void*)+0x31e>
c00235ab:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00235b1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235b8:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00235bf:	66 05 06 02          	add    ax,0x206
c00235c3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00235ca:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00235d1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00235d8:	66 05 06 02          	add    ax,0x206
c00235dc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00235e3:	e9 e5 fe ff ff       	jmp    c00234cd <IDE::open(int, int, void*)+0x203>
c00235e8:	50                   	push   eax
c00235e9:	50                   	push   eax
c00235ea:	6a 00                	push   0x0
c00235ec:	53                   	push   ebx
c00235ed:	e8 60 fa ff ff       	call   c0023052 <IDE::prepareInterrupt(unsigned char)>
c00235f2:	5a                   	pop    edx
c00235f3:	59                   	pop    ecx
c00235f4:	6a 01                	push   0x1
c00235f6:	53                   	push   ebx
c00235f7:	e8 56 fa ff ff       	call   c0023052 <IDE::prepareInterrupt(unsigned char)>
c00235fc:	83 c4 0c             	add    esp,0xc
c00235ff:	6a 00                	push   0x0
c0023601:	6a 00                	push   0x0
c0023603:	53                   	push   ebx
c0023604:	e8 7b fc ff ff       	call   c0023284 <IDE::enableIRQs(unsigned char, bool)>
c0023609:	83 c4 0c             	add    esp,0xc
c002360c:	6a 00                	push   0x0
c002360e:	6a 01                	push   0x1
c0023610:	53                   	push   ebx
c0023611:	e8 6e fc ff ff       	call   c0023284 <IDE::enableIRQs(unsigned char, bool)>
c0023616:	83 c4 10             	add    esp,0x10
c0023619:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023620:	74 34                	je     c0023656 <IDE::open(int, int, void*)+0x38c>
c0023622:	83 ec 0c             	sub    esp,0xc
c0023625:	53                   	push   ebx
c0023626:	6a 01                	push   0x1
c0023628:	68 4c 32 02 c0       	push   0xc002324c
c002362d:	6a 0e                	push   0xe
c002362f:	53                   	push   ebx
c0023630:	e8 19 05 ff ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023635:	83 c4 14             	add    esp,0x14
c0023638:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002363e:	53                   	push   ebx
c002363f:	6a 01                	push   0x1
c0023641:	68 68 32 02 c0       	push   0xc0023268
c0023646:	6a 0f                	push   0xf
c0023648:	53                   	push   ebx
c0023649:	e8 00 05 ff ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002364e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023654:	eb 38                	jmp    c002368e <IDE::open(int, int, void*)+0x3c4>
c0023656:	83 ec 0c             	sub    esp,0xc
c0023659:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023663:	53                   	push   ebx
c0023664:	6a 00                	push   0x0
c0023666:	68 4c 32 02 c0       	push   0xc002324c
c002366b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023671:	53                   	push   ebx
c0023672:	e8 d7 04 ff ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023677:	83 c4 14             	add    esp,0x14
c002367a:	53                   	push   ebx
c002367b:	6a 00                	push   0x0
c002367d:	68 68 32 02 c0       	push   0xc0023268
c0023682:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023688:	53                   	push   ebx
c0023689:	e8 c0 04 ff ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002368e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023690:	83 c4 20             	add    esp,0x20
c0023693:	83 ec 0c             	sub    esp,0xc
c0023696:	53                   	push   ebx
c0023697:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002369a:	83 c4 0c             	add    esp,0xc
c002369d:	6a 07                	push   0x7
c002369f:	6a 00                	push   0x0
c00236a1:	53                   	push   ebx
c00236a2:	e8 91 fa ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c00236a7:	83 c4 0c             	add    esp,0xc
c00236aa:	6a 07                	push   0x7
c00236ac:	6a 01                	push   0x1
c00236ae:	53                   	push   ebx
c00236af:	e8 84 fa ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c00236b4:	83 c4 0c             	add    esp,0xc
c00236b7:	6a 01                	push   0x1
c00236b9:	6a 00                	push   0x0
c00236bb:	53                   	push   ebx
c00236bc:	e8 c3 fb ff ff       	call   c0023284 <IDE::enableIRQs(unsigned char, bool)>
c00236c1:	83 c4 0c             	add    esp,0xc
c00236c4:	6a 01                	push   0x1
c00236c6:	6a 01                	push   0x1
c00236c8:	53                   	push   ebx
c00236c9:	e8 b6 fb ff ff       	call   c0023284 <IDE::enableIRQs(unsigned char, bool)>
c00236ce:	83 c4 2c             	add    esp,0x2c
c00236d1:	31 c0                	xor    eax,eax
c00236d3:	5b                   	pop    ebx
c00236d4:	5e                   	pop    esi
c00236d5:	5f                   	pop    edi
c00236d6:	5d                   	pop    ebp
c00236d7:	c3                   	ret    

c00236d8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00236d8:	55                   	push   ebp
c00236d9:	57                   	push   edi
c00236da:	56                   	push   esi
c00236db:	53                   	push   ebx
c00236dc:	83 ec 1c             	sub    esp,0x1c
c00236df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00236e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00236e7:	8d 50 f8             	lea    edx,[eax-0x8]
c00236ea:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236ee:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00236f2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00236f6:	80 fa 03             	cmp    dl,0x3
c00236f9:	77 5d                	ja     c0023758 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00236fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023703:	0f b6 db             	movzx  ebx,bl
c0023706:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023709:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002370d:	83 ca 80             	or     edx,0xffffff80
c0023710:	0f b6 d2             	movzx  edx,dl
c0023713:	52                   	push   edx
c0023714:	6a 0c                	push   0xc
c0023716:	53                   	push   ebx
c0023717:	56                   	push   esi
c0023718:	e8 5b f9 ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002371d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023722:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023726:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002372a:	0f b6 c0             	movzx  eax,al
c002372d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023731:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023733:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023738:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002373c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023740:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023744:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002374c:	83 c4 2c             	add    esp,0x2c
c002374f:	5b                   	pop    ebx
c0023750:	5e                   	pop    esi
c0023751:	5f                   	pop    edi
c0023752:	5d                   	pop    ebp
c0023753:	e9 20 f9 ff ff       	jmp    c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023758:	3c 07                	cmp    al,0x7
c002375a:	77 10                	ja     c002376c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002375c:	0f b6 db             	movzx  ebx,bl
c002375f:	0f b6 d0             	movzx  edx,al
c0023762:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002376a:	eb 2d                	jmp    c0023799 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002376c:	3c 0d                	cmp    al,0xd
c002376e:	77 13                	ja     c0023783 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023770:	0f b6 db             	movzx  ebx,bl
c0023773:	0f b6 c0             	movzx  eax,al
c0023776:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002377d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023781:	eb 16                	jmp    c0023799 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023783:	3c 15                	cmp    al,0x15
c0023785:	77 14                	ja     c002379b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023787:	0f b6 db             	movzx  ebx,bl
c002378a:	0f b6 c0             	movzx  eax,al
c002378d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023795:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023799:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002379b:	83 c4 1c             	add    esp,0x1c
c002379e:	5b                   	pop    ebx
c002379f:	5e                   	pop    esi
c00237a0:	5f                   	pop    edi
c00237a1:	5d                   	pop    ebp
c00237a2:	c3                   	ret    
c00237a3:	90                   	nop

c00237a4 <IDE::detect()>:
c00237a4:	55                   	push   ebp
c00237a5:	57                   	push   edi
c00237a6:	56                   	push   esi
c00237a7:	53                   	push   ebx
c00237a8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00237ae:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00237b5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00237bc:	0f 85 9d 02 00 00    	jne    c0023a5f <IDE::detect()+0x2bb>
c00237c2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237c9:	31 f6                	xor    esi,esi
c00237cb:	31 ed                	xor    ebp,ebp
c00237cd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237d5:	89 e8                	mov    eax,ebp
c00237d7:	c1 e0 06             	shl    eax,0x6
c00237da:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00237e2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00237e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00237ea:	c1 e0 04             	shl    eax,0x4
c00237ed:	83 c8 a0             	or     eax,0xffffffa0
c00237f0:	0f b6 c0             	movzx  eax,al
c00237f3:	50                   	push   eax
c00237f4:	6a 06                	push   0x6
c00237f6:	56                   	push   esi
c00237f7:	53                   	push   ebx
c00237f8:	e8 7b f8 ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237fd:	83 c4 0c             	add    esp,0xc
c0023800:	6a 0c                	push   0xc
c0023802:	56                   	push   esi
c0023803:	53                   	push   ebx
c0023804:	e8 2f f9 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023809:	83 c4 0c             	add    esp,0xc
c002380c:	6a 0c                	push   0xc
c002380e:	56                   	push   esi
c002380f:	53                   	push   ebx
c0023810:	e8 23 f9 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023815:	83 c4 0c             	add    esp,0xc
c0023818:	6a 0c                	push   0xc
c002381a:	56                   	push   esi
c002381b:	53                   	push   ebx
c002381c:	e8 17 f9 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023821:	83 c4 0c             	add    esp,0xc
c0023824:	6a 0c                	push   0xc
c0023826:	56                   	push   esi
c0023827:	53                   	push   ebx
c0023828:	e8 0b f9 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c002382d:	68 ec 00 00 00       	push   0xec
c0023832:	6a 07                	push   0x7
c0023834:	56                   	push   esi
c0023835:	53                   	push   ebx
c0023836:	e8 3d f8 ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002383b:	83 c4 1c             	add    esp,0x1c
c002383e:	6a 0c                	push   0xc
c0023840:	56                   	push   esi
c0023841:	53                   	push   ebx
c0023842:	e8 f1 f8 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023847:	83 c4 0c             	add    esp,0xc
c002384a:	6a 0c                	push   0xc
c002384c:	56                   	push   esi
c002384d:	53                   	push   ebx
c002384e:	e8 e5 f8 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023853:	83 c4 0c             	add    esp,0xc
c0023856:	6a 0c                	push   0xc
c0023858:	56                   	push   esi
c0023859:	53                   	push   ebx
c002385a:	e8 d9 f8 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c002385f:	83 c4 0c             	add    esp,0xc
c0023862:	6a 0c                	push   0xc
c0023864:	56                   	push   esi
c0023865:	53                   	push   ebx
c0023866:	e8 cd f8 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c002386b:	83 c4 0c             	add    esp,0xc
c002386e:	6a 0c                	push   0xc
c0023870:	56                   	push   esi
c0023871:	53                   	push   ebx
c0023872:	e8 c1 f8 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023877:	83 c4 10             	add    esp,0x10
c002387a:	84 c0                	test   al,al
c002387c:	0f 84 63 01 00 00    	je     c00239e5 <IDE::detect()+0x241>
c0023882:	31 ff                	xor    edi,edi
c0023884:	50                   	push   eax
c0023885:	6a 0c                	push   0xc
c0023887:	56                   	push   esi
c0023888:	53                   	push   ebx
c0023889:	e8 aa f8 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c002388e:	83 c4 10             	add    esp,0x10
c0023891:	a8 01                	test   al,0x1
c0023893:	0f 85 6d 01 00 00    	jne    c0023a06 <IDE::detect()+0x262>
c0023899:	84 c0                	test   al,al
c002389b:	78 04                	js     c00238a1 <IDE::detect()+0xfd>
c002389d:	a8 08                	test   al,0x8
c002389f:	75 27                	jne    c00238c8 <IDE::detect()+0x124>
c00238a1:	47                   	inc    edi
c00238a2:	81 ff 17 01 00 00    	cmp    edi,0x117
c00238a8:	7e da                	jle    c0023884 <IDE::detect()+0xe0>
c00238aa:	50                   	push   eax
c00238ab:	50                   	push   eax
c00238ac:	6a 00                	push   0x0
c00238ae:	68 40 4b 4c 00       	push   0x4c4b40
c00238b3:	e8 2d a5 ff ff       	call   c001dde5 <nanoSleep(unsigned long long)>
c00238b8:	83 c4 10             	add    esp,0x10
c00238bb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238c1:	75 c1                	jne    c0023884 <IDE::detect()+0xe0>
c00238c3:	e9 3e 01 00 00       	jmp    c0023a06 <IDE::detect()+0x262>
c00238c8:	31 c9                	xor    ecx,ecx
c00238ca:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238ce:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00238d2:	83 ec 0c             	sub    esp,0xc
c00238d5:	68 80 00 00 00       	push   0x80
c00238da:	57                   	push   edi
c00238db:	6a 00                	push   0x0
c00238dd:	56                   	push   esi
c00238de:	53                   	push   ebx
c00238df:	e8 f4 fd ff ff       	call   c00236d8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00238e4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00238e9:	89 e8                	mov    eax,ebp
c00238eb:	89 d1                	mov    ecx,edx
c00238ed:	c1 e0 06             	shl    eax,0x6
c00238f0:	01 d8                	add    eax,ebx
c00238f2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00238f9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023900:	89 f2                	mov    edx,esi
c0023902:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023908:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002390c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023912:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023916:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002391d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023925:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002392c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023934:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002393a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023941:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023947:	8d 54 24 58          	lea    edx,[esp+0x58]
c002394b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002394f:	83 c4 20             	add    esp,0x20
c0023952:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023955:	83 c0 02             	add    eax,0x2
c0023958:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002395e:	83 c7 02             	add    edi,0x2
c0023961:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023964:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002396a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002396e:	75 e2                	jne    c0023952 <IDE::detect()+0x1ae>
c0023970:	89 e8                	mov    eax,ebp
c0023972:	c1 e0 06             	shl    eax,0x6
c0023975:	01 d8                	add    eax,ebx
c0023977:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002397d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023984:	66 c1 ea 09          	shr    dx,0x9
c0023988:	83 e2 01             	and    edx,0x1
c002398b:	84 c9                	test   cl,cl
c002398d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023993:	75 22                	jne    c00239b7 <IDE::detect()+0x213>
c0023995:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002399c:	74 46                	je     c00239e4 <IDE::detect()+0x240>
c002399e:	83 ec 0c             	sub    esp,0xc
c00239a1:	68 7c 01 00 00       	push   0x17c
c00239a6:	e8 ee bb fe ff       	call   c000f599 <malloc>
c00239ab:	89 c7                	mov    edi,eax
c00239ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00239b0:	e8 15 05 00 00       	call   c0023eca <ATA::ATA()>
c00239b5:	eb 17                	jmp    c00239ce <IDE::detect()+0x22a>
c00239b7:	83 ec 0c             	sub    esp,0xc
c00239ba:	68 80 01 00 00       	push   0x180
c00239bf:	e8 d5 bb fe ff       	call   c000f599 <malloc>
c00239c4:	89 c7                	mov    edi,eax
c00239c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00239c9:	e8 88 0b 00 00       	call   c0024556 <ATAPI::ATAPI()>
c00239ce:	5a                   	pop    edx
c00239cf:	59                   	pop    ecx
c00239d0:	57                   	push   edi
c00239d1:	53                   	push   ebx
c00239d2:	e8 ff 01 ff ff       	call   c0013bd6 <Device::addChild(Device*)>
c00239d7:	8b 07                	mov    eax,DWORD PTR [edi]
c00239d9:	53                   	push   ebx
c00239da:	55                   	push   ebp
c00239db:	6a 00                	push   0x0
c00239dd:	57                   	push   edi
c00239de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239e1:	83 c4 20             	add    esp,0x20
c00239e4:	45                   	inc    ebp
c00239e5:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00239ea:	74 0d                	je     c00239f9 <IDE::detect()+0x255>
c00239ec:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00239f4:	e9 dc fd ff ff       	jmp    c00237d5 <IDE::detect()+0x31>
c00239f9:	4e                   	dec    esi
c00239fa:	74 63                	je     c0023a5f <IDE::detect()+0x2bb>
c00239fc:	be 01 00 00 00       	mov    esi,0x1
c0023a01:	e9 c7 fd ff ff       	jmp    c00237cd <IDE::detect()+0x29>
c0023a06:	50                   	push   eax
c0023a07:	6a 04                	push   0x4
c0023a09:	56                   	push   esi
c0023a0a:	53                   	push   ebx
c0023a0b:	e8 28 f7 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023a10:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a14:	83 c4 0c             	add    esp,0xc
c0023a17:	6a 05                	push   0x5
c0023a19:	56                   	push   esi
c0023a1a:	53                   	push   ebx
c0023a1b:	e8 18 f7 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023a20:	83 c4 10             	add    esp,0x10
c0023a23:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a27:	80 fa 14             	cmp    dl,0x14
c0023a2a:	75 04                	jne    c0023a30 <IDE::detect()+0x28c>
c0023a2c:	3c eb                	cmp    al,0xeb
c0023a2e:	eb 07                	jmp    c0023a37 <IDE::detect()+0x293>
c0023a30:	3c 96                	cmp    al,0x96
c0023a32:	75 b1                	jne    c00239e5 <IDE::detect()+0x241>
c0023a34:	80 fa 69             	cmp    dl,0x69
c0023a37:	75 ac                	jne    c00239e5 <IDE::detect()+0x241>
c0023a39:	68 a1 00 00 00       	push   0xa1
c0023a3e:	6a 07                	push   0x7
c0023a40:	56                   	push   esi
c0023a41:	53                   	push   ebx
c0023a42:	e8 31 f6 ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a47:	5f                   	pop    edi
c0023a48:	58                   	pop    eax
c0023a49:	6a 00                	push   0x0
c0023a4b:	68 40 42 0f 00       	push   0xf4240
c0023a50:	e8 90 a3 ff ff       	call   c001dde5 <nanoSleep(unsigned long long)>
c0023a55:	83 c4 10             	add    esp,0x10
c0023a58:	b1 01                	mov    cl,0x1
c0023a5a:	e9 6b fe ff ff       	jmp    c00238ca <IDE::detect()+0x126>
c0023a5f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a65:	5b                   	pop    ebx
c0023a66:	5e                   	pop    esi
c0023a67:	5f                   	pop    edi
c0023a68:	5d                   	pop    ebp
c0023a69:	c3                   	ret    

c0023a6a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a6a:	55                   	push   ebp
c0023a6b:	57                   	push   edi
c0023a6c:	56                   	push   esi
c0023a6d:	53                   	push   ebx
c0023a6e:	83 ec 1c             	sub    esp,0x1c
c0023a71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a75:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a79:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a7d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a81:	88 c3                	mov    bl,al
c0023a83:	84 c0                	test   al,al
c0023a85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a89:	0f 84 81 00 00 00    	je     c0023b10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a8f:	83 ec 0c             	sub    esp,0xc
c0023a92:	68 fb c4 02 c0       	push   0xc002c4fb
c0023a97:	e8 01 ed fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0023a9c:	83 c4 10             	add    esp,0x10
c0023a9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023aa3:	3c 01                	cmp    al,0x1
c0023aa5:	74 63                	je     c0023b0a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023aa7:	3c 02                	cmp    al,0x2
c0023aa9:	75 53                	jne    c0023afe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023aab:	d1 e6                	shl    esi,1
c0023aad:	09 ee                	or     esi,ebp
c0023aaf:	50                   	push   eax
c0023ab0:	89 f0                	mov    eax,esi
c0023ab2:	6a 01                	push   0x1
c0023ab4:	0f b6 f0             	movzx  esi,al
c0023ab7:	c1 e6 06             	shl    esi,0x6
c0023aba:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023ac2:	50                   	push   eax
c0023ac3:	57                   	push   edi
c0023ac4:	e8 6f f6 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023ac9:	83 c4 10             	add    esp,0x10
c0023acc:	a8 01                	test   al,0x1
c0023ace:	74 02                	je     c0023ad2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023ad0:	b3 07                	mov    bl,0x7
c0023ad2:	a8 02                	test   al,0x2
c0023ad4:	74 02                	je     c0023ad8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023ad6:	b3 03                	mov    bl,0x3
c0023ad8:	a8 04                	test   al,0x4
c0023ada:	74 02                	je     c0023ade <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023adc:	b3 14                	mov    bl,0x14
c0023ade:	a8 08                	test   al,0x8
c0023ae0:	74 02                	je     c0023ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023ae2:	b3 03                	mov    bl,0x3
c0023ae4:	a8 10                	test   al,0x10
c0023ae6:	74 02                	je     c0023aea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023ae8:	b3 15                	mov    bl,0x15
c0023aea:	a8 20                	test   al,0x20
c0023aec:	74 02                	je     c0023af0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023aee:	b3 03                	mov    bl,0x3
c0023af0:	a8 40                	test   al,0x40
c0023af2:	74 02                	je     c0023af6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023af4:	b3 16                	mov    bl,0x16
c0023af6:	84 c0                	test   al,al
c0023af8:	79 16                	jns    c0023b10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023afa:	b3 0d                	mov    bl,0xd
c0023afc:	eb 12                	jmp    c0023b10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023afe:	3c 03                	cmp    al,0x3
c0023b00:	74 0c                	je     c0023b0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023b02:	3c 04                	cmp    al,0x4
c0023b04:	75 0a                	jne    c0023b10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b06:	b3 08                	mov    bl,0x8
c0023b08:	eb 06                	jmp    c0023b10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b0a:	b3 13                	mov    bl,0x13
c0023b0c:	eb 02                	jmp    c0023b10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b0e:	b3 17                	mov    bl,0x17
c0023b10:	83 c4 1c             	add    esp,0x1c
c0023b13:	88 d8                	mov    al,bl
c0023b15:	5b                   	pop    ebx
c0023b16:	5e                   	pop    esi
c0023b17:	5f                   	pop    edi
c0023b18:	5d                   	pop    ebp
c0023b19:	c3                   	ret    

c0023b1a <IDE::polling(unsigned char, unsigned int)>:
c0023b1a:	57                   	push   edi
c0023b1b:	56                   	push   esi
c0023b1c:	53                   	push   ebx
c0023b1d:	bb 04 00 00 00       	mov    ebx,0x4
c0023b22:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b26:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b2b:	52                   	push   edx
c0023b2c:	6a 0c                	push   0xc
c0023b2e:	56                   	push   esi
c0023b2f:	57                   	push   edi
c0023b30:	e8 03 f6 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023b35:	83 c4 10             	add    esp,0x10
c0023b38:	4b                   	dec    ebx
c0023b39:	75 f0                	jne    c0023b2b <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b3b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b40:	50                   	push   eax
c0023b41:	6a 0c                	push   0xc
c0023b43:	56                   	push   esi
c0023b44:	57                   	push   edi
c0023b45:	e8 ee f5 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023b4a:	83 c4 10             	add    esp,0x10
c0023b4d:	a8 01                	test   al,0x1
c0023b4f:	75 17                	jne    c0023b68 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023b51:	a8 20                	test   al,0x20
c0023b53:	75 0f                	jne    c0023b64 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023b55:	4b                   	dec    ebx
c0023b56:	74 10                	je     c0023b68 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023b58:	84 c0                	test   al,al
c0023b5a:	78 e4                	js     c0023b40 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023b5c:	a8 08                	test   al,0x8
c0023b5e:	74 e0                	je     c0023b40 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023b60:	31 c0                	xor    eax,eax
c0023b62:	eb 06                	jmp    c0023b6a <IDE::polling(unsigned char, unsigned int)+0x50>
c0023b64:	b0 01                	mov    al,0x1
c0023b66:	eb 02                	jmp    c0023b6a <IDE::polling(unsigned char, unsigned int)+0x50>
c0023b68:	b0 02                	mov    al,0x2
c0023b6a:	5b                   	pop    ebx
c0023b6b:	5e                   	pop    esi
c0023b6c:	5f                   	pop    edi
c0023b6d:	c3                   	ret    

c0023b6e <SATABus::close(int, int, void*)>:
c0023b6e:	31 c0                	xor    eax,eax
c0023b70:	c3                   	ret    
c0023b71:	90                   	nop

c0023b72 <SATABus::detect()>:
c0023b72:	c3                   	ret    
c0023b73:	90                   	nop

c0023b74 <SATABus::SATABus()>:
c0023b74:	83 ec 0c             	sub    esp,0xc
c0023b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b7b:	83 ec 08             	sub    esp,0x8
c0023b7e:	68 34 c5 02 c0       	push   0xc002c534
c0023b83:	50                   	push   eax
c0023b84:	e8 fb 03 ff ff       	call   c0013f84 <HardDiskController::HardDiskController(char const*)>
c0023b89:	83 c4 10             	add    esp,0x10
c0023b8c:	ba 88 c5 02 c0       	mov    edx,0xc002c588
c0023b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b95:	89 10                	mov    DWORD PTR [eax],edx
c0023b97:	83 ec 0c             	sub    esp,0xc
c0023b9a:	6a 50                	push   0x50
c0023b9c:	e8 ec be fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023ba1:	83 c4 10             	add    esp,0x10
c0023ba4:	89 c2                	mov    edx,eax
c0023ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023baa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023bb0:	83 ec 0c             	sub    esp,0xc
c0023bb3:	6a 50                	push   0x50
c0023bb5:	e8 65 d6 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0023bba:	83 c4 10             	add    esp,0x10
c0023bbd:	89 c2                	mov    edx,eax
c0023bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023bc9:	a1 f0 de 02 c0       	mov    eax,ds:0xc002def0
c0023bce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023bd2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023bd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023bdc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023be2:	83 ec 0c             	sub    esp,0xc
c0023be5:	6a 03                	push   0x3
c0023be7:	6a 50                	push   0x50
c0023be9:	51                   	push   ecx
c0023bea:	52                   	push   edx
c0023beb:	50                   	push   eax
c0023bec:	e8 77 e1 fe ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023bf1:	83 c4 20             	add    esp,0x20
c0023bf4:	90                   	nop
c0023bf5:	83 c4 0c             	add    esp,0xc
c0023bf8:	c3                   	ret    
c0023bf9:	90                   	nop

c0023bfa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023bfa:	83 ec 0c             	sub    esp,0xc
c0023bfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c01:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c04:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023c07:	09 c2                	or     edx,eax
c0023c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c13:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c15:	31 c0                	xor    eax,eax
c0023c17:	c1 e9 08             	shr    ecx,0x8
c0023c1a:	83 e1 0f             	and    ecx,0xf
c0023c1d:	39 c8                	cmp    eax,ecx
c0023c1f:	74 0a                	je     c0023c2b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023c21:	f6 c2 01             	test   dl,0x1
c0023c24:	74 18                	je     c0023c3e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c26:	d1 ea                	shr    edx,1
c0023c28:	40                   	inc    eax
c0023c29:	eb f2                	jmp    c0023c1d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023c2b:	83 ec 0c             	sub    esp,0xc
c0023c2e:	68 58 c5 02 c0       	push   0xc002c558
c0023c33:	e8 41 63 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0023c38:	83 c4 10             	add    esp,0x10
c0023c3b:	83 c8 ff             	or     eax,0xffffffff
c0023c3e:	83 c4 0c             	add    esp,0xc
c0023c41:	c3                   	ret    

c0023c42 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023c42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023c46:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023c49:	89 c2                	mov    edx,eax
c0023c4b:	c1 ea 08             	shr    edx,0x8
c0023c4e:	83 e2 0f             	and    edx,0xf
c0023c51:	fe ca                	dec    dl
c0023c53:	75 31                	jne    c0023c86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c55:	83 e0 0f             	and    eax,0xf
c0023c58:	3c 03                	cmp    al,0x3
c0023c5a:	75 2a                	jne    c0023c86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c5c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023c5f:	b8 02 00 00 00       	mov    eax,0x2
c0023c64:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023c6a:	74 1c                	je     c0023c88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023c6c:	b8 04 00 00 00       	mov    eax,0x4
c0023c71:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023c77:	74 0f                	je     c0023c88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023c79:	31 c0                	xor    eax,eax
c0023c7b:	83 fa 03             	cmp    edx,0x3
c0023c7e:	0f 94 c0             	sete   al
c0023c81:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023c85:	c3                   	ret    
c0023c86:	31 c0                	xor    eax,eax
c0023c88:	c3                   	ret    
c0023c89:	90                   	nop

c0023c8a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c91:	0f ba e2 0f          	bt     edx,0xf
c0023c95:	72 f7                	jb     c0023c8e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023c97:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c9a:	83 ca 10             	or     edx,0x10
c0023c9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ca0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ca3:	83 ca 01             	or     edx,0x1
c0023ca6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ca9:	c3                   	ret    

c0023caa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023caa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023cae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cb1:	83 e2 fe             	and    edx,0xfffffffe
c0023cb4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cb7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cba:	83 e2 ef             	and    edx,0xffffffef
c0023cbd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cc3:	0f ba e2 0e          	bt     edx,0xe
c0023cc7:	72 f7                	jb     c0023cc0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023cc9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ccc:	0f ba e2 0f          	bt     edx,0xf
c0023cd0:	72 ee                	jb     c0023cc0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023cd2:	c3                   	ret    
c0023cd3:	90                   	nop

c0023cd4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023cd4:	55                   	push   ebp
c0023cd5:	57                   	push   edi
c0023cd6:	56                   	push   esi
c0023cd7:	53                   	push   ebx
c0023cd8:	83 ec 1c             	sub    esp,0x1c
c0023cdb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023cdf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023ce3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023ce7:	53                   	push   ebx
c0023ce8:	89 fd                	mov    ebp,edi
c0023cea:	56                   	push   esi
c0023ceb:	c1 e5 0a             	shl    ebp,0xa
c0023cee:	e8 b7 ff ff ff       	call   c0023caa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023cf3:	83 ec 0c             	sub    esp,0xc
c0023cf6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023cfc:	01 e8                	add    eax,ebp
c0023cfe:	89 03                	mov    DWORD PTR [ebx],eax
c0023d00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d02:	68 00 04 00 00       	push   0x400
c0023d07:	6a 00                	push   0x0
c0023d09:	50                   	push   eax
c0023d0a:	e8 41 ca fd ff       	call   c0000750 <memset>
c0023d0f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023d15:	89 fa                	mov    edx,edi
c0023d17:	01 e8                	add    eax,ebp
c0023d19:	c1 e7 0d             	shl    edi,0xd
c0023d1c:	89 03                	mov    DWORD PTR [ebx],eax
c0023d1e:	c1 e2 08             	shl    edx,0x8
c0023d21:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023d28:	81 c2 00 80 00 00    	add    edx,0x8000
c0023d2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023d32:	89 d0                	mov    eax,edx
c0023d34:	83 c4 1c             	add    esp,0x1c
c0023d37:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d3d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023d40:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023d43:	68 00 01 00 00       	push   0x100
c0023d48:	6a 00                	push   0x0
c0023d4a:	50                   	push   eax
c0023d4b:	e8 00 ca fd ff       	call   c0000750 <memset>
c0023d50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023d54:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023d5a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023d60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023d64:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023d67:	83 c4 10             	add    esp,0x10
c0023d6a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023d71:	31 ff                	xor    edi,edi
c0023d73:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023d79:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023d7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d83:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d89:	83 c5 20             	add    ebp,0x20
c0023d8c:	01 f8                	add    eax,edi
c0023d8e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d91:	52                   	push   edx
c0023d92:	68 00 01 00 00       	push   0x100
c0023d97:	6a 00                	push   0x0
c0023d99:	50                   	push   eax
c0023d9a:	e8 b1 c9 fd ff       	call   c0000750 <memset>
c0023d9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023da3:	83 c4 10             	add    esp,0x10
c0023da6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023dac:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023db3:	01 f8                	add    eax,edi
c0023db5:	81 c7 00 01 00 00    	add    edi,0x100
c0023dbb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023dbe:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023dc4:	75 b3                	jne    c0023d79 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023dc6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023dca:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023dce:	83 c4 1c             	add    esp,0x1c
c0023dd1:	5b                   	pop    ebx
c0023dd2:	5e                   	pop    esi
c0023dd3:	5f                   	pop    edi
c0023dd4:	5d                   	pop    ebp
c0023dd5:	e9 b0 fe ff ff       	jmp    c0023c8a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023dda <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023dda:	55                   	push   ebp
c0023ddb:	57                   	push   edi
c0023ddc:	56                   	push   esi
c0023ddd:	53                   	push   ebx
c0023dde:	31 db                	xor    ebx,ebx
c0023de0:	83 ec 0c             	sub    esp,0xc
c0023de3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023de7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023deb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023dee:	f7 c7 01 00 00 00    	test   edi,0x1
c0023df4:	74 7a                	je     c0023e70 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023df6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023dfa:	89 d8                	mov    eax,ebx
c0023dfc:	c1 e0 07             	shl    eax,0x7
c0023dff:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023e06:	55                   	push   ebp
c0023e07:	56                   	push   esi
c0023e08:	e8 35 fe ff ff       	call   c0023c42 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023e0d:	5a                   	pop    edx
c0023e0e:	83 f8 01             	cmp    eax,0x1
c0023e11:	59                   	pop    ecx
c0023e12:	75 21                	jne    c0023e35 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023e14:	50                   	push   eax
c0023e15:	53                   	push   ebx
c0023e16:	55                   	push   ebp
c0023e17:	56                   	push   esi
c0023e18:	e8 b7 fe ff ff       	call   c0023cd4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e1d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023e24:	e8 70 b7 fe ff       	call   c000f599 <malloc>
c0023e29:	89 c5                	mov    ebp,eax
c0023e2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e2e:	e8 87 0d 00 00       	call   c0024bba <SATA::SATA()>
c0023e33:	eb 24                	jmp    c0023e59 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023e35:	83 f8 04             	cmp    eax,0x4
c0023e38:	75 36                	jne    c0023e70 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023e3a:	51                   	push   ecx
c0023e3b:	53                   	push   ebx
c0023e3c:	55                   	push   ebp
c0023e3d:	56                   	push   esi
c0023e3e:	e8 91 fe ff ff       	call   c0023cd4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e43:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023e4a:	e8 4a b7 fe ff       	call   c000f599 <malloc>
c0023e4f:	89 c5                	mov    ebp,eax
c0023e51:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e54:	e8 d7 10 00 00       	call   c0024f30 <SATAPI::SATAPI()>
c0023e59:	58                   	pop    eax
c0023e5a:	5a                   	pop    edx
c0023e5b:	55                   	push   ebp
c0023e5c:	56                   	push   esi
c0023e5d:	e8 74 fd fe ff       	call   c0013bd6 <Device::addChild(Device*)>
c0023e62:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023e65:	56                   	push   esi
c0023e66:	6a 00                	push   0x0
c0023e68:	53                   	push   ebx
c0023e69:	55                   	push   ebp
c0023e6a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023e6d:	83 c4 20             	add    esp,0x20
c0023e70:	d1 ef                	shr    edi,1
c0023e72:	43                   	inc    ebx
c0023e73:	83 fb 20             	cmp    ebx,0x20
c0023e76:	0f 85 72 ff ff ff    	jne    c0023dee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023e7c:	83 c4 0c             	add    esp,0xc
c0023e7f:	5b                   	pop    ebx
c0023e80:	5e                   	pop    esi
c0023e81:	5f                   	pop    edi
c0023e82:	5d                   	pop    ebp
c0023e83:	c3                   	ret    

c0023e84 <SATABus::open(int, int, void*)>:
c0023e84:	83 ec 14             	sub    esp,0x14
c0023e87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e8b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023e91:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023e97:	52                   	push   edx
c0023e98:	50                   	push   eax
c0023e99:	e8 3c ff ff ff       	call   c0023dda <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023e9e:	31 c0                	xor    eax,eax
c0023ea0:	83 c4 1c             	add    esp,0x1c
c0023ea3:	c3                   	ret    

c0023ea4 <ATA::close(int, int, void*)>:
c0023ea4:	83 ec 0c             	sub    esp,0xc
c0023ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023eab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023eb1:	85 c0                	test   eax,eax
c0023eb3:	74 0c                	je     c0023ec1 <ATA::close(int, int, void*)+0x1d>
c0023eb5:	83 ec 0c             	sub    esp,0xc
c0023eb8:	8b 10                	mov    edx,DWORD PTR [eax]
c0023eba:	50                   	push   eax
c0023ebb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023ebe:	83 c4 10             	add    esp,0x10
c0023ec1:	31 c0                	xor    eax,eax
c0023ec3:	83 c4 0c             	add    esp,0xc
c0023ec6:	c3                   	ret    
c0023ec7:	90                   	nop

c0023ec8 <ATA::powerSaving(PowerSavingLevel)>:
c0023ec8:	c3                   	ret    
c0023ec9:	90                   	nop

c0023eca <ATA::ATA()>:
c0023eca:	83 ec 0c             	sub    esp,0xc
c0023ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ed1:	83 ec 04             	sub    esp,0x4
c0023ed4:	68 00 02 00 00       	push   0x200
c0023ed9:	68 7d c6 02 c0       	push   0xc002c67d
c0023ede:	50                   	push   eax
c0023edf:	e8 28 01 ff ff       	call   c001400c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023ee4:	83 c4 10             	add    esp,0x10
c0023ee7:	ba 00 c6 02 c0       	mov    edx,0xc002c600
c0023eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ef0:	89 10                	mov    DWORD PTR [eax],edx
c0023ef2:	90                   	nop
c0023ef3:	83 c4 0c             	add    esp,0xc
c0023ef6:	c3                   	ret    
c0023ef7:	90                   	nop

c0023ef8 <ATA::flush(bool)>:
c0023ef8:	53                   	push   ebx
c0023ef9:	83 ec 08             	sub    esp,0x8
c0023efc:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f05:	19 c0                	sbb    eax,eax
c0023f07:	83 e0 fd             	and    eax,0xfffffffd
c0023f0a:	05 ea 00 00 00       	add    eax,0xea
c0023f0f:	50                   	push   eax
c0023f10:	6a 07                	push   0x7
c0023f12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f19:	50                   	push   eax
c0023f1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f20:	e8 53 f1 ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f25:	83 c4 0c             	add    esp,0xc
c0023f28:	6a 00                	push   0x0
c0023f2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f31:	50                   	push   eax
c0023f32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f38:	e8 dd fb ff ff       	call   c0023b1a <IDE::polling(unsigned char, unsigned int)>
c0023f3d:	83 c4 18             	add    esp,0x18
c0023f40:	5b                   	pop    ebx
c0023f41:	c3                   	ret    

c0023f42 <ATA::readyForCommand()>:
c0023f42:	56                   	push   esi
c0023f43:	53                   	push   ebx
c0023f44:	31 db                	xor    ebx,ebx
c0023f46:	50                   	push   eax
c0023f47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023f4b:	50                   	push   eax
c0023f4c:	6a 0c                	push   0xc
c0023f4e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023f55:	50                   	push   eax
c0023f56:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023f5c:	e8 d7 f1 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0023f61:	83 c4 10             	add    esp,0x10
c0023f64:	a8 88                	test   al,0x88
c0023f66:	74 23                	je     c0023f8b <ATA::readyForCommand()+0x49>
c0023f68:	43                   	inc    ebx
c0023f69:	83 fb 63             	cmp    ebx,0x63
c0023f6c:	7e dd                	jle    c0023f4b <ATA::readyForCommand()+0x9>
c0023f6e:	51                   	push   ecx
c0023f6f:	51                   	push   ecx
c0023f70:	6a 00                	push   0x0
c0023f72:	68 40 42 0f 00       	push   0xf4240
c0023f77:	e8 69 9e ff ff       	call   c001dde5 <nanoSleep(unsigned long long)>
c0023f7c:	83 c4 10             	add    esp,0x10
c0023f7f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023f85:	75 c4                	jne    c0023f4b <ATA::readyForCommand()+0x9>
c0023f87:	31 c0                	xor    eax,eax
c0023f89:	eb 02                	jmp    c0023f8d <ATA::readyForCommand()+0x4b>
c0023f8b:	b0 01                	mov    al,0x1
c0023f8d:	5a                   	pop    edx
c0023f8e:	5b                   	pop    ebx
c0023f8f:	5e                   	pop    esi
c0023f90:	c3                   	ret    
c0023f91:	90                   	nop

c0023f92 <ATA::access(unsigned long long, int, void*, bool)>:
c0023f92:	55                   	push   ebp
c0023f93:	57                   	push   edi
c0023f94:	56                   	push   esi
c0023f95:	53                   	push   ebx
c0023f96:	83 ec 38             	sub    esp,0x38
c0023f99:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0023f9d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0023fa1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0023fa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023fa9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0023fad:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023fb1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0023fb5:	68 ac c5 02 c0       	push   0xc002c5ac
c0023fba:	e8 de e7 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0023fbf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023fc9:	83 c4 10             	add    esp,0x10
c0023fcc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023fd2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023fd6:	c1 e0 06             	shl    eax,0x6
c0023fd9:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023fe1:	74 5d                	je     c0024040 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c0023fe3:	89 fa                	mov    edx,edi
c0023fe5:	89 f0                	mov    eax,esi
c0023fe7:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023feb:	c1 ea 1c             	shr    edx,0x1c
c0023fee:	89 d1                	mov    ecx,edx
c0023ff0:	09 c1                	or     ecx,eax
c0023ff2:	74 25                	je     c0024019 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c0023ff4:	31 ed                	xor    ebp,ebp
c0023ff6:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023ffd:	89 fa                	mov    edx,edi
c0023fff:	89 f0                	mov    eax,esi
c0024001:	0f ad d0             	shrd   eax,edx,cl
c0024004:	d3 ea                	shr    edx,cl
c0024006:	f6 c1 20             	test   cl,0x20
c0024009:	74 02                	je     c002400d <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c002400b:	89 d0                	mov    eax,edx
c002400d:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024011:	45                   	inc    ebp
c0024012:	83 fd 06             	cmp    ebp,0x6
c0024015:	75 df                	jne    c0023ff6 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c0024017:	eb 76                	jmp    c002408f <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c0024019:	89 f0                	mov    eax,esi
c002401b:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024020:	89 fa                	mov    edx,edi
c0024022:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024029:	0f ac d0 10          	shrd   eax,edx,0x10
c002402d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024032:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024036:	c1 ee 18             	shr    esi,0x18
c0024039:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002403e:	eb 56                	jmp    c0024096 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024040:	6a 00                	push   0x0
c0024042:	6a 3f                	push   0x3f
c0024044:	57                   	push   edi
c0024045:	56                   	push   esi
c0024046:	e8 99 29 00 00       	call   c00269e4 <__umoddi3>
c002404b:	83 c4 10             	add    esp,0x10
c002404e:	40                   	inc    eax
c002404f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024053:	6a 00                	push   0x0
c0024055:	68 f0 03 00 00       	push   0x3f0
c002405a:	57                   	push   edi
c002405b:	56                   	push   esi
c002405c:	e8 83 28 00 00       	call   c00268e4 <__udivdi3>
c0024061:	83 c4 10             	add    esp,0x10
c0024064:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024069:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024070:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024075:	6a 00                	push   0x0
c0024077:	6a 3f                	push   0x3f
c0024079:	57                   	push   edi
c002407a:	56                   	push   esi
c002407b:	e8 64 28 00 00       	call   c00268e4 <__udivdi3>
c0024080:	83 c4 10             	add    esp,0x10
c0024083:	89 c6                	mov    esi,eax
c0024085:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002408a:	83 e6 0f             	and    esi,0xf
c002408d:	eb 07                	jmp    c0024096 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c002408f:	31 f6                	xor    esi,esi
c0024091:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024096:	bf 01 00 00 00       	mov    edi,0x1
c002409b:	50                   	push   eax
c002409c:	6a 00                	push   0x0
c002409e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a5:	50                   	push   eax
c00240a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00240aa:	e8 d5 f1 ff ff       	call   c0023284 <IDE::enableIRQs(unsigned char, bool)>
c00240af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240b2:	e8 8b fe ff ff       	call   c0023f42 <ATA::readyForCommand()>
c00240b7:	83 c4 10             	add    esp,0x10
c00240ba:	84 c0                	test   al,al
c00240bc:	0f 84 bc 02 00 00    	je     c002437e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00240c2:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00240c8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00240ce:	c1 e0 04             	shl    eax,0x4
c00240d1:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00240d8:	09 c6                	or     esi,eax
c00240da:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00240df:	75 05                	jne    c00240e6 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c00240e1:	83 ce a0             	or     esi,0xffffffa0
c00240e4:	eb 03                	jmp    c00240e9 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c00240e6:	83 ce e0             	or     esi,0xffffffe0
c00240e9:	89 f0                	mov    eax,esi
c00240eb:	0f b6 f0             	movzx  esi,al
c00240ee:	56                   	push   esi
c00240ef:	6a 06                	push   0x6
c00240f1:	51                   	push   ecx
c00240f2:	52                   	push   edx
c00240f3:	e8 80 ef ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240f8:	83 c4 10             	add    esp,0x10
c00240fb:	6a 00                	push   0x0
c00240fd:	6a 01                	push   0x1
c00240ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024106:	50                   	push   eax
c0024107:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002410d:	e8 66 ef ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024112:	83 c4 10             	add    esp,0x10
c0024115:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002411a:	75 6e                	jne    c002418a <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c002411c:	6a 00                	push   0x0
c002411e:	6a 08                	push   0x8
c0024120:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024127:	50                   	push   eax
c0024128:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002412e:	e8 45 ef ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024133:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024138:	50                   	push   eax
c0024139:	6a 09                	push   0x9
c002413b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024142:	50                   	push   eax
c0024143:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024149:	e8 2a ef ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002414e:	83 c4 20             	add    esp,0x20
c0024151:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024156:	50                   	push   eax
c0024157:	6a 0a                	push   0xa
c0024159:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024160:	50                   	push   eax
c0024161:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024167:	e8 0c ef ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002416c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024171:	50                   	push   eax
c0024172:	6a 0b                	push   0xb
c0024174:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002417b:	50                   	push   eax
c002417c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024182:	e8 f1 ee ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024187:	83 c4 20             	add    esp,0x20
c002418a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002418f:	50                   	push   eax
c0024190:	6a 02                	push   0x2
c0024192:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024199:	50                   	push   eax
c002419a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241a0:	e8 d3 ee ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241a5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00241aa:	50                   	push   eax
c00241ab:	6a 03                	push   0x3
c00241ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241b4:	50                   	push   eax
c00241b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241bb:	e8 b8 ee ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241c0:	83 c4 20             	add    esp,0x20
c00241c3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00241c8:	50                   	push   eax
c00241c9:	6a 04                	push   0x4
c00241cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241d2:	50                   	push   eax
c00241d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241d9:	e8 9a ee ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241de:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00241e3:	50                   	push   eax
c00241e4:	6a 05                	push   0x5
c00241e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241ed:	50                   	push   eax
c00241ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241f4:	e8 7f ee ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241f9:	83 c4 20             	add    esp,0x20
c00241fc:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024201:	0f 94 c0             	sete   al
c0024204:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024209:	74 09                	je     c0024214 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c002420b:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024212:	eb 07                	jmp    c002421b <ATA::access(unsigned long long, int, void*, bool)+0x289>
c0024214:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002421b:	0f b6 c0             	movzx  eax,al
c002421e:	50                   	push   eax
c002421f:	6a 07                	push   0x7
c0024221:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024228:	50                   	push   eax
c0024229:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002422f:	e8 44 ee ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024234:	c7 04 24 b9 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5b9
c002423b:	e8 5d e5 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0024240:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024244:	83 c4 10             	add    esp,0x10
c0024247:	85 f6                	test   esi,esi
c0024249:	0f 84 f7 00 00 00    	je     c0024346 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c002424f:	83 ec 0c             	sub    esp,0xc
c0024252:	68 bc c5 02 c0       	push   0xc002c5bc
c0024257:	e8 41 e5 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c002425c:	83 c4 0c             	add    esp,0xc
c002425f:	6a 01                	push   0x1
c0024261:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024268:	50                   	push   eax
c0024269:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002426f:	e8 a6 f8 ff ff       	call   c0023b1a <IDE::polling(unsigned char, unsigned int)>
c0024274:	c7 04 24 bf c5 02 c0 	mov    DWORD PTR [esp],0xc002c5bf
c002427b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002427f:	e8 19 e5 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0024284:	83 c4 10             	add    esp,0x10
c0024287:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c002428b:	84 c0                	test   al,al
c002428d:	74 2b                	je     c00242ba <ATA::access(unsigned long long, int, void*, bool)+0x328>
c002428f:	0f b6 f8             	movzx  edi,al
c0024292:	57                   	push   edi
c0024293:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002429a:	50                   	push   eax
c002429b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242a2:	50                   	push   eax
c00242a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a9:	e8 bc f7 ff ff       	call   c0023a6a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00242ae:	c7 04 24 c2 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5c2
c00242b5:	e9 bc 00 00 00       	jmp    c0024376 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c00242ba:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00242bf:	74 50                	je     c0024311 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c00242c1:	83 ec 0c             	sub    esp,0xc
c00242c4:	31 ed                	xor    ebp,ebp
c00242c6:	68 cd c5 02 c0       	push   0xc002c5cd
c00242cb:	e8 cd e4 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00242d0:	83 c4 10             	add    esp,0x10
c00242d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00242d7:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00242db:	50                   	push   eax
c00242dc:	50                   	push   eax
c00242dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e4:	50                   	push   eax
c00242e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242eb:	e8 76 ed ff ff       	call   c0023066 <IDE::getBase(unsigned char)>
c00242f0:	89 c2                	mov    edx,eax
c00242f2:	89 f8                	mov    eax,edi
c00242f4:	66 ef                	out    dx,ax
c00242f6:	45                   	inc    ebp
c00242f7:	83 c4 10             	add    esp,0x10
c00242fa:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024300:	75 d1                	jne    c00242d3 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c0024302:	83 ec 0c             	sub    esp,0xc
c0024305:	68 d0 c5 02 c0       	push   0xc002c5d0
c002430a:	e8 8e e4 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c002430f:	eb 24                	jmp    c0024335 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c0024311:	51                   	push   ecx
c0024312:	51                   	push   ecx
c0024313:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002431a:	50                   	push   eax
c002431b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024321:	e8 40 ed ff ff       	call   c0023066 <IDE::getBase(unsigned char)>
c0024326:	b9 00 01 00 00       	mov    ecx,0x100
c002432b:	89 c2                	mov    edx,eax
c002432d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024331:	fc                   	cld    
c0024332:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024335:	83 c4 10             	add    esp,0x10
c0024338:	4e                   	dec    esi
c0024339:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024341:	e9 01 ff ff ff       	jmp    c0024247 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c0024346:	31 ff                	xor    edi,edi
c0024348:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002434d:	74 2f                	je     c002437e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c002434f:	83 ec 0c             	sub    esp,0xc
c0024352:	68 d3 c5 02 c0       	push   0xc002c5d3
c0024357:	e8 41 e4 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c002435c:	58                   	pop    eax
c002435d:	31 c0                	xor    eax,eax
c002435f:	5a                   	pop    edx
c0024360:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024365:	0f 94 c0             	sete   al
c0024368:	50                   	push   eax
c0024369:	53                   	push   ebx
c002436a:	e8 89 fb ff ff       	call   c0023ef8 <ATA::flush(bool)>
c002436f:	c7 04 24 d6 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5d6
c0024376:	e8 22 e4 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c002437b:	83 c4 10             	add    esp,0x10
c002437e:	83 c4 2c             	add    esp,0x2c
c0024381:	89 f8                	mov    eax,edi
c0024383:	5b                   	pop    ebx
c0024384:	5e                   	pop    esi
c0024385:	5f                   	pop    edi
c0024386:	5d                   	pop    ebp
c0024387:	c3                   	ret    

c0024388 <ATA::read(unsigned long long, int, void*)>:
c0024388:	57                   	push   edi
c0024389:	b8 04 00 00 00       	mov    eax,0x4
c002438e:	56                   	push   esi
c002438f:	53                   	push   ebx
c0024390:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024394:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024398:	8d 7a ff             	lea    edi,[edx-0x1]
c002439b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002439f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00243a3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00243a9:	77 25                	ja     c00243d0 <ATA::read(unsigned long long, int, void*)+0x48>
c00243ab:	b8 06 00 00 00       	mov    eax,0x6
c00243b0:	85 f6                	test   esi,esi
c00243b2:	74 1c                	je     c00243d0 <ATA::read(unsigned long long, int, void*)+0x48>
c00243b4:	50                   	push   eax
c00243b5:	50                   	push   eax
c00243b6:	6a 00                	push   0x0
c00243b8:	56                   	push   esi
c00243b9:	52                   	push   edx
c00243ba:	53                   	push   ebx
c00243bb:	51                   	push   ecx
c00243bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00243c0:	e8 cd fb ff ff       	call   c0023f92 <ATA::access(unsigned long long, int, void*, bool)>
c00243c5:	83 c4 20             	add    esp,0x20
c00243c8:	85 c0                	test   eax,eax
c00243ca:	0f 95 c0             	setne  al
c00243cd:	0f b6 c0             	movzx  eax,al
c00243d0:	5b                   	pop    ebx
c00243d1:	5e                   	pop    esi
c00243d2:	5f                   	pop    edi
c00243d3:	c3                   	ret    

c00243d4 <ATA::write(unsigned long long, int, void*)>:
c00243d4:	55                   	push   ebp
c00243d5:	57                   	push   edi
c00243d6:	56                   	push   esi
c00243d7:	53                   	push   ebx
c00243d8:	83 ec 18             	sub    esp,0x18
c00243db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00243df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00243e3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00243e7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00243eb:	68 d9 c5 02 c0       	push   0xc002c5d9
c00243f0:	e8 a8 e3 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00243f5:	8d 53 ff             	lea    edx,[ebx-0x1]
c00243f8:	83 c4 10             	add    esp,0x10
c00243fb:	b8 04 00 00 00       	mov    eax,0x4
c0024400:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0024406:	77 25                	ja     c002442d <ATA::write(unsigned long long, int, void*)+0x59>
c0024408:	b8 06 00 00 00       	mov    eax,0x6
c002440d:	85 f6                	test   esi,esi
c002440f:	74 1c                	je     c002442d <ATA::write(unsigned long long, int, void*)+0x59>
c0024411:	50                   	push   eax
c0024412:	50                   	push   eax
c0024413:	6a 01                	push   0x1
c0024415:	56                   	push   esi
c0024416:	53                   	push   ebx
c0024417:	55                   	push   ebp
c0024418:	57                   	push   edi
c0024419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002441d:	e8 70 fb ff ff       	call   c0023f92 <ATA::access(unsigned long long, int, void*, bool)>
c0024422:	83 c4 20             	add    esp,0x20
c0024425:	85 c0                	test   eax,eax
c0024427:	0f 95 c0             	setne  al
c002442a:	0f b6 c0             	movzx  eax,al
c002442d:	83 c4 0c             	add    esp,0xc
c0024430:	5b                   	pop    ebx
c0024431:	5e                   	pop    esi
c0024432:	5f                   	pop    edi
c0024433:	5d                   	pop    ebp
c0024434:	c3                   	ret    
c0024435:	90                   	nop

c0024436 <ATA::detectCHS()>:
c0024436:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002443a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024440:	c1 e0 06             	shl    eax,0x6
c0024443:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024449:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024453:	c7 44 24 04 e5 c5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c5e5
c002445b:	e9 19 5b ff ff       	jmp    c0019f79 <Krnl::panic(char const*)>

c0024460 <ATA::open(int, int, void*)>:
c0024460:	53                   	push   ebx
c0024461:	83 ec 08             	sub    esp,0x8
c0024464:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024468:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002446c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024470:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024476:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002447c:	c1 e0 06             	shl    eax,0x6
c002447f:	01 d0                	add    eax,edx
c0024481:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024488:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002448e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024495:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002449f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00244a5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00244ac:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00244b3:	75 0c                	jne    c00244c1 <ATA::open(int, int, void*)+0x61>
c00244b5:	83 ec 0c             	sub    esp,0xc
c00244b8:	53                   	push   ebx
c00244b9:	e8 78 ff ff ff       	call   c0024436 <ATA::detectCHS()>
c00244be:	83 c4 10             	add    esp,0x10
c00244c1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00244c7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00244cd:	c1 e0 06             	shl    eax,0x6
c00244d0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00244d7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00244e1:	d1 e8                	shr    eax,1
c00244e3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00244e9:	6a 04                	push   0x4
c00244eb:	6a 0c                	push   0xc
c00244ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244f4:	50                   	push   eax
c00244f5:	52                   	push   edx
c00244f6:	e8 7d eb ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244fb:	90                   	nop
c00244fc:	90                   	nop
c00244fd:	6a 00                	push   0x0
c00244ff:	6a 0c                	push   0xc
c0024501:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024508:	50                   	push   eax
c0024509:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002450f:	e8 64 eb ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024514:	83 c4 14             	add    esp,0x14
c0024517:	53                   	push   ebx
c0024518:	e8 57 fb fe ff       	call   c0014074 <PhysicalDisk::startCache()>
c002451d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024520:	e8 d7 1d ff ff       	call   c00162fc <createPartitionsForDisk(PhysicalDisk*)>
c0024525:	31 c0                	xor    eax,eax
c0024527:	83 c4 18             	add    esp,0x18
c002452a:	5b                   	pop    ebx
c002452b:	c3                   	ret    

c002452c <ATAPI::write(unsigned long long, int, void*)>:
c002452c:	b8 03 00 00 00       	mov    eax,0x3
c0024531:	c3                   	ret    

c0024532 <ATAPI::close(int, int, void*)>:
c0024532:	83 ec 0c             	sub    esp,0xc
c0024535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024539:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002453f:	85 c0                	test   eax,eax
c0024541:	74 0c                	je     c002454f <ATAPI::close(int, int, void*)+0x1d>
c0024543:	83 ec 0c             	sub    esp,0xc
c0024546:	8b 10                	mov    edx,DWORD PTR [eax]
c0024548:	50                   	push   eax
c0024549:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002454c:	83 c4 10             	add    esp,0x10
c002454f:	31 c0                	xor    eax,eax
c0024551:	83 c4 0c             	add    esp,0xc
c0024554:	c3                   	ret    
c0024555:	90                   	nop

c0024556 <ATAPI::ATAPI()>:
c0024556:	83 ec 0c             	sub    esp,0xc
c0024559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002455d:	83 ec 04             	sub    esp,0x4
c0024560:	68 00 08 00 00       	push   0x800
c0024565:	68 1d c7 02 c0       	push   0xc002c71d
c002456a:	50                   	push   eax
c002456b:	e8 9c fa fe ff       	call   c001400c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024570:	83 c4 10             	add    esp,0x10
c0024573:	ba 38 c6 02 c0       	mov    edx,0xc002c638
c0024578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002457c:	89 10                	mov    DWORD PTR [eax],edx
c002457e:	90                   	nop
c002457f:	83 c4 0c             	add    esp,0xc
c0024582:	c3                   	ret    
c0024583:	90                   	nop

c0024584 <ATAPI::readyForCommand()>:
c0024584:	56                   	push   esi
c0024585:	53                   	push   ebx
c0024586:	31 db                	xor    ebx,ebx
c0024588:	50                   	push   eax
c0024589:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002458d:	50                   	push   eax
c002458e:	6a 0c                	push   0xc
c0024590:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024597:	50                   	push   eax
c0024598:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002459e:	e8 95 eb ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c00245a3:	83 c4 10             	add    esp,0x10
c00245a6:	a8 88                	test   al,0x88
c00245a8:	74 23                	je     c00245cd <ATAPI::readyForCommand()+0x49>
c00245aa:	43                   	inc    ebx
c00245ab:	83 fb 63             	cmp    ebx,0x63
c00245ae:	7e dd                	jle    c002458d <ATAPI::readyForCommand()+0x9>
c00245b0:	51                   	push   ecx
c00245b1:	51                   	push   ecx
c00245b2:	6a 00                	push   0x0
c00245b4:	68 40 42 0f 00       	push   0xf4240
c00245b9:	e8 27 98 ff ff       	call   c001dde5 <nanoSleep(unsigned long long)>
c00245be:	83 c4 10             	add    esp,0x10
c00245c1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00245c7:	75 c4                	jne    c002458d <ATAPI::readyForCommand()+0x9>
c00245c9:	31 c0                	xor    eax,eax
c00245cb:	eb 02                	jmp    c00245cf <ATAPI::readyForCommand()+0x4b>
c00245cd:	b0 01                	mov    al,0x1
c00245cf:	5a                   	pop    edx
c00245d0:	5b                   	pop    ebx
c00245d1:	5e                   	pop    esi
c00245d2:	c3                   	ret    
c00245d3:	90                   	nop

c00245d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00245d4:	55                   	push   ebp
c00245d5:	57                   	push   edi
c00245d6:	56                   	push   esi
c00245d7:	53                   	push   ebx
c00245d8:	83 ec 20             	sub    esp,0x20
c00245db:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00245df:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00245e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00245e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00245eb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00245ef:	6a 01                	push   0x1
c00245f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245f8:	50                   	push   eax
c00245f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245ff:	e8 80 ec ff ff       	call   c0023284 <IDE::enableIRQs(unsigned char, bool)>
c0024604:	5e                   	pop    esi
c0024605:	58                   	pop    eax
c0024606:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002460d:	50                   	push   eax
c002460e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024614:	e8 39 ea ff ff       	call   c0023052 <IDE::prepareInterrupt(unsigned char)>
c0024619:	89 3c 24             	mov    DWORD PTR [esp],edi
c002461c:	e8 63 ff ff ff       	call   c0024584 <ATAPI::readyForCommand()>
c0024621:	83 c4 10             	add    esp,0x10
c0024624:	84 c0                	test   al,al
c0024626:	75 0a                	jne    c0024632 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024628:	bb 01 00 00 00       	mov    ebx,0x1
c002462d:	e9 57 02 00 00       	jmp    c0024889 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024632:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024638:	c1 e0 04             	shl    eax,0x4
c002463b:	0f b6 c0             	movzx  eax,al
c002463e:	50                   	push   eax
c002463f:	6a 06                	push   0x6
c0024641:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024648:	50                   	push   eax
c0024649:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002464f:	e8 24 ea ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024654:	6a 00                	push   0x0
c0024656:	6a 01                	push   0x1
c0024658:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002465f:	50                   	push   eax
c0024660:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024666:	e8 0d ea ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002466b:	83 c4 20             	add    esp,0x20
c002466e:	0f b6 c3             	movzx  eax,bl
c0024671:	0f b6 df             	movzx  ebx,bh
c0024674:	50                   	push   eax
c0024675:	6a 04                	push   0x4
c0024677:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002467e:	50                   	push   eax
c002467f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024685:	e8 ee e9 ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002468a:	53                   	push   ebx
c002468b:	6a 05                	push   0x5
c002468d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024694:	50                   	push   eax
c0024695:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002469b:	e8 d8 e9 ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246a0:	83 c4 20             	add    esp,0x20
c00246a3:	68 a0 00 00 00       	push   0xa0
c00246a8:	6a 07                	push   0x7
c00246aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b1:	50                   	push   eax
c00246b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246b8:	e8 bb e9 ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246bd:	83 c4 0c             	add    esp,0xc
c00246c0:	6a 01                	push   0x1
c00246c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c9:	50                   	push   eax
c00246ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246d0:	e8 45 f4 ff ff       	call   c0023b1a <IDE::polling(unsigned char, unsigned int)>
c00246d5:	83 c4 10             	add    esp,0x10
c00246d8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00246de:	84 c0                	test   al,al
c00246e0:	74 23                	je     c0024705 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00246e2:	0f b6 d8             	movzx  ebx,al
c00246e5:	0f b6 d2             	movzx  edx,dl
c00246e8:	53                   	push   ebx
c00246e9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00246f0:	50                   	push   eax
c00246f1:	52                   	push   edx
c00246f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f8:	e8 6d f3 ff ff       	call   c0023a6a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00246fd:	83 c4 10             	add    esp,0x10
c0024700:	e9 84 01 00 00       	jmp    c0024889 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024705:	0f b6 d2             	movzx  edx,dl
c0024708:	53                   	push   ebx
c0024709:	53                   	push   ebx
c002470a:	52                   	push   edx
c002470b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024711:	e8 50 e9 ff ff       	call   c0023066 <IDE::getBase(unsigned char)>
c0024716:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002471a:	b9 06 00 00 00       	mov    ecx,0x6
c002471f:	89 c2                	mov    edx,eax
c0024721:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024724:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024728:	83 c4 10             	add    esp,0x10
c002472b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024731:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024738:	85 db                	test   ebx,ebx
c002473a:	0f 84 ec 00 00 00    	je     c002482c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024740:	51                   	push   ecx
c0024741:	51                   	push   ecx
c0024742:	52                   	push   edx
c0024743:	50                   	push   eax
c0024744:	e8 9d ea ff ff       	call   c00231e6 <IDE::waitInterrupt(unsigned char)>
c0024749:	83 c4 10             	add    esp,0x10
c002474c:	84 c0                	test   al,al
c002474e:	0f 84 d4 fe ff ff    	je     c0024628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024754:	56                   	push   esi
c0024755:	56                   	push   esi
c0024756:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002475d:	50                   	push   eax
c002475e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024764:	e8 e9 e8 ff ff       	call   c0023052 <IDE::prepareInterrupt(unsigned char)>
c0024769:	83 c4 0c             	add    esp,0xc
c002476c:	6a 04                	push   0x4
c002476e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024775:	50                   	push   eax
c0024776:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002477c:	e8 b7 e9 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c0024781:	83 c4 0c             	add    esp,0xc
c0024784:	89 c6                	mov    esi,eax
c0024786:	6a 05                	push   0x5
c0024788:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002478f:	50                   	push   eax
c0024790:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024796:	e8 9d e9 ff ff       	call   c0023138 <IDE::read(unsigned char, unsigned char)>
c002479b:	89 f1                	mov    ecx,esi
c002479d:	0f b6 c0             	movzx  eax,al
c00247a0:	0f b6 f1             	movzx  esi,cl
c00247a3:	c1 e0 08             	shl    eax,0x8
c00247a6:	09 c6                	or     esi,eax
c00247a8:	d1 fe                	sar    esi,1
c00247aa:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00247ae:	83 c4 10             	add    esp,0x10
c00247b1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00247b6:	74 41                	je     c00247f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00247b8:	31 c9                	xor    ecx,ecx
c00247ba:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247c0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247c7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00247cb:	75 0a                	jne    c00247d7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00247cd:	01 c9                	add    ecx,ecx
c00247cf:	01 cd                	add    ebp,ecx
c00247d1:	4b                   	dec    ebx
c00247d2:	e9 54 ff ff ff       	jmp    c002472b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00247d7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00247dc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00247e0:	51                   	push   ecx
c00247e1:	51                   	push   ecx
c00247e2:	52                   	push   edx
c00247e3:	50                   	push   eax
c00247e4:	e8 7d e8 ff ff       	call   c0023066 <IDE::getBase(unsigned char)>
c00247e9:	89 c2                	mov    edx,eax
c00247eb:	89 f0                	mov    eax,esi
c00247ed:	66 ef                	out    dx,ax
c00247ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00247f3:	83 c4 10             	add    esp,0x10
c00247f6:	41                   	inc    ecx
c00247f7:	eb c1                	jmp    c00247ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00247f9:	31 f6                	xor    esi,esi
c00247fb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024801:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024808:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002480c:	75 06                	jne    c0024814 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002480e:	01 f6                	add    esi,esi
c0024810:	01 f5                	add    ebp,esi
c0024812:	eb bd                	jmp    c00247d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024814:	51                   	push   ecx
c0024815:	51                   	push   ecx
c0024816:	52                   	push   edx
c0024817:	50                   	push   eax
c0024818:	e8 49 e8 ff ff       	call   c0023066 <IDE::getBase(unsigned char)>
c002481d:	89 c2                	mov    edx,eax
c002481f:	66 ed                	in     ax,dx
c0024821:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024826:	83 c4 10             	add    esp,0x10
c0024829:	46                   	inc    esi
c002482a:	eb cf                	jmp    c00247fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002482c:	51                   	push   ecx
c002482d:	51                   	push   ecx
c002482e:	52                   	push   edx
c002482f:	50                   	push   eax
c0024830:	e8 b1 e9 ff ff       	call   c00231e6 <IDE::waitInterrupt(unsigned char)>
c0024835:	83 c4 10             	add    esp,0x10
c0024838:	84 c0                	test   al,al
c002483a:	0f 84 e8 fd ff ff    	je     c0024628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024840:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024845:	52                   	push   edx
c0024846:	52                   	push   edx
c0024847:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002484e:	50                   	push   eax
c002484f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024855:	e8 f8 e7 ff ff       	call   c0023052 <IDE::prepareInterrupt(unsigned char)>
c002485a:	83 c4 10             	add    esp,0x10
c002485d:	50                   	push   eax
c002485e:	50                   	push   eax
c002485f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024866:	50                   	push   eax
c0024867:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002486d:	e8 f4 e7 ff ff       	call   c0023066 <IDE::getBase(unsigned char)>
c0024872:	8d 50 07             	lea    edx,[eax+0x7]
c0024875:	ec                   	in     al,dx
c0024876:	83 c4 10             	add    esp,0x10
c0024879:	a8 88                	test   al,0x88
c002487b:	74 0a                	je     c0024887 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002487d:	4b                   	dec    ebx
c002487e:	75 dd                	jne    c002485d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024880:	bb 02 00 00 00       	mov    ebx,0x2
c0024885:	eb 02                	jmp    c0024889 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024887:	31 db                	xor    ebx,ebx
c0024889:	83 c4 1c             	add    esp,0x1c
c002488c:	89 d8                	mov    eax,ebx
c002488e:	5b                   	pop    ebx
c002488f:	5e                   	pop    esi
c0024890:	5f                   	pop    edi
c0024891:	5d                   	pop    ebp
c0024892:	c3                   	ret    
c0024893:	90                   	nop

c0024894 <ATAPI::diskRemoved()>:
c0024894:	83 ec 18             	sub    esp,0x18
c0024897:	68 29 c7 02 c0       	push   0xc002c729
c002489c:	e8 fc de fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00248a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248a5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00248ac:	83 c4 1c             	add    esp,0x1c
c00248af:	c3                   	ret    

c00248b0 <ATAPI::eject()>:
c00248b0:	57                   	push   edi
c00248b1:	b9 03 00 00 00       	mov    ecx,0x3
c00248b6:	53                   	push   ebx
c00248b7:	83 ec 14             	sub    esp,0x14
c00248ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00248be:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248c2:	fc                   	cld    
c00248c3:	31 c0                	xor    eax,eax
c00248c5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248c7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00248cc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00248d1:	50                   	push   eax
c00248d2:	50                   	push   eax
c00248d3:	6a 00                	push   0x0
c00248d5:	6a 00                	push   0x0
c00248d7:	6a 00                	push   0x0
c00248d9:	6a 02                	push   0x2
c00248db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248df:	50                   	push   eax
c00248e0:	53                   	push   ebx
c00248e1:	e8 ee fc ff ff       	call   c00245d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248e6:	83 c4 14             	add    esp,0x14
c00248e9:	53                   	push   ebx
c00248ea:	e8 a5 ff ff ff       	call   c0024894 <ATAPI::diskRemoved()>
c00248ef:	83 c4 24             	add    esp,0x24
c00248f2:	31 c0                	xor    eax,eax
c00248f4:	5b                   	pop    ebx
c00248f5:	5f                   	pop    edi
c00248f6:	c3                   	ret    
c00248f7:	90                   	nop

c00248f8 <ATAPI::diskInserted()>:
c00248f8:	53                   	push   ebx
c00248f9:	83 ec 14             	sub    esp,0x14
c00248fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024900:	68 40 c7 02 c0       	push   0xc002c740
c0024905:	e8 93 de fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c002490a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024911:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024914:	e8 5b f7 fe ff       	call   c0014074 <PhysicalDisk::startCache()>
c0024919:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002491d:	83 c4 18             	add    esp,0x18
c0024920:	5b                   	pop    ebx
c0024921:	e9 d6 19 ff ff       	jmp    c00162fc <createPartitionsForDisk(PhysicalDisk*)>

c0024926 <ATAPI::detectMedia()>:
c0024926:	56                   	push   esi
c0024927:	53                   	push   ebx
c0024928:	83 ec 28             	sub    esp,0x28
c002492b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002492f:	6a 0c                	push   0xc
c0024931:	6a 00                	push   0x0
c0024933:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024937:	56                   	push   esi
c0024938:	e8 13 be fd ff       	call   c0000750 <memset>
c002493d:	58                   	pop    eax
c002493e:	5a                   	pop    edx
c002493f:	6a 00                	push   0x0
c0024941:	6a 00                	push   0x0
c0024943:	6a 00                	push   0x0
c0024945:	6a 00                	push   0x0
c0024947:	56                   	push   esi
c0024948:	53                   	push   ebx
c0024949:	e8 86 fc ff ff       	call   c00245d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002494e:	83 c4 1c             	add    esp,0x1c
c0024951:	6a 0c                	push   0xc
c0024953:	6a 00                	push   0x0
c0024955:	56                   	push   esi
c0024956:	e8 f5 bd fd ff       	call   c0000750 <memset>
c002495b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024960:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024965:	59                   	pop    ecx
c0024966:	58                   	pop    eax
c0024967:	6a 01                	push   0x1
c0024969:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002496d:	50                   	push   eax
c002496e:	6a 00                	push   0x0
c0024970:	6a 12                	push   0x12
c0024972:	56                   	push   esi
c0024973:	53                   	push   ebx
c0024974:	e8 5b fc ff ff       	call   c00245d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024979:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002497d:	83 c4 20             	add    esp,0x20
c0024980:	83 e0 7f             	and    eax,0x7f
c0024983:	3c 70                	cmp    al,0x70
c0024985:	74 15                	je     c002499c <ATAPI::detectMedia()+0x76>
c0024987:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002498e:	75 0c                	jne    c002499c <ATAPI::detectMedia()+0x76>
c0024990:	83 ec 0c             	sub    esp,0xc
c0024993:	53                   	push   ebx
c0024994:	e8 5f ff ff ff       	call   c00248f8 <ATAPI::diskInserted()>
c0024999:	83 c4 10             	add    esp,0x10
c002499c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00249a0:	83 e0 0f             	and    eax,0xf
c00249a3:	3c 02                	cmp    al,0x2
c00249a5:	75 1b                	jne    c00249c2 <ATAPI::detectMedia()+0x9c>
c00249a7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00249ac:	75 2d                	jne    c00249db <ATAPI::detectMedia()+0xb5>
c00249ae:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249b5:	74 24                	je     c00249db <ATAPI::detectMedia()+0xb5>
c00249b7:	83 ec 0c             	sub    esp,0xc
c00249ba:	53                   	push   ebx
c00249bb:	e8 d4 fe ff ff       	call   c0024894 <ATAPI::diskRemoved()>
c00249c0:	eb 16                	jmp    c00249d8 <ATAPI::detectMedia()+0xb2>
c00249c2:	84 c0                	test   al,al
c00249c4:	75 15                	jne    c00249db <ATAPI::detectMedia()+0xb5>
c00249c6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249cd:	75 0c                	jne    c00249db <ATAPI::detectMedia()+0xb5>
c00249cf:	83 ec 0c             	sub    esp,0xc
c00249d2:	53                   	push   ebx
c00249d3:	e8 20 ff ff ff       	call   c00248f8 <ATAPI::diskInserted()>
c00249d8:	83 c4 10             	add    esp,0x10
c00249db:	83 c4 24             	add    esp,0x24
c00249de:	5b                   	pop    ebx
c00249df:	5e                   	pop    esi
c00249e0:	c3                   	ret    
c00249e1:	90                   	nop

c00249e2 <ATAPI::open(int, int, void*)>:
c00249e2:	53                   	push   ebx
c00249e3:	83 ec 08             	sub    esp,0x8
c00249e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00249ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00249ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249f2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249f8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00249fe:	c1 e0 06             	shl    eax,0x6
c0024a01:	01 d0                	add    eax,edx
c0024a03:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a0a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a10:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a17:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a21:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a27:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024a2e:	6a 04                	push   0x4
c0024a30:	6a 0c                	push   0xc
c0024a32:	51                   	push   ecx
c0024a33:	52                   	push   edx
c0024a34:	e8 3f e6 ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a39:	90                   	nop
c0024a3a:	90                   	nop
c0024a3b:	6a 00                	push   0x0
c0024a3d:	6a 0c                	push   0xc
c0024a3f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a46:	50                   	push   eax
c0024a47:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a4d:	e8 26 e6 ff ff       	call   c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a52:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024a59:	83 c4 14             	add    esp,0x14
c0024a5c:	53                   	push   ebx
c0024a5d:	e8 c4 fe ff ff       	call   c0024926 <ATAPI::detectMedia()>
c0024a62:	31 c0                	xor    eax,eax
c0024a64:	83 c4 18             	add    esp,0x18
c0024a67:	5b                   	pop    ebx
c0024a68:	c3                   	ret    
c0024a69:	90                   	nop

c0024a6a <ATAPI::read(unsigned long long, int, void*)>:
c0024a6a:	55                   	push   ebp
c0024a6b:	57                   	push   edi
c0024a6c:	56                   	push   esi
c0024a6d:	53                   	push   ebx
c0024a6e:	83 ec 1c             	sub    esp,0x1c
c0024a71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024a75:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a79:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024a7d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a84:	74 41                	je     c0024ac7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024a86:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a8a:	b9 03 00 00 00       	mov    ecx,0x3
c0024a8f:	fc                   	cld    
c0024a90:	31 c0                	xor    eax,eax
c0024a92:	86 fb                	xchg   bl,bh
c0024a94:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a96:	c1 c3 10             	rol    ebx,0x10
c0024a99:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024a9e:	89 e8                	mov    eax,ebp
c0024aa0:	86 fb                	xchg   bl,bh
c0024aa2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024aa6:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024aaa:	50                   	push   eax
c0024aab:	50                   	push   eax
c0024aac:	55                   	push   ebp
c0024aad:	c1 e5 0b             	shl    ebp,0xb
c0024ab0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024ab4:	6a 00                	push   0x0
c0024ab6:	55                   	push   ebp
c0024ab7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024abb:	50                   	push   eax
c0024abc:	56                   	push   esi
c0024abd:	e8 12 fb ff ff       	call   c00245d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ac2:	83 c4 20             	add    esp,0x20
c0024ac5:	eb 1a                	jmp    c0024ae1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024ac7:	83 ec 0c             	sub    esp,0xc
c0024aca:	56                   	push   esi
c0024acb:	e8 56 fe ff ff       	call   c0024926 <ATAPI::detectMedia()>
c0024ad0:	83 c4 10             	add    esp,0x10
c0024ad3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024ada:	75 aa                	jne    c0024a86 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024adc:	b8 02 00 00 00       	mov    eax,0x2
c0024ae1:	83 c4 1c             	add    esp,0x1c
c0024ae4:	5b                   	pop    ebx
c0024ae5:	5e                   	pop    esi
c0024ae6:	5f                   	pop    edi
c0024ae7:	5d                   	pop    ebp
c0024ae8:	c3                   	ret    
c0024ae9:	90                   	nop

c0024aea <SATA::close(int, int, void*)>:
c0024aea:	83 ec 0c             	sub    esp,0xc
c0024aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024af1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024af7:	85 c0                	test   eax,eax
c0024af9:	74 0c                	je     c0024b07 <SATA::close(int, int, void*)+0x1d>
c0024afb:	83 ec 0c             	sub    esp,0xc
c0024afe:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b00:	50                   	push   eax
c0024b01:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b04:	83 c4 10             	add    esp,0x10
c0024b07:	31 c0                	xor    eax,eax
c0024b09:	83 c4 0c             	add    esp,0xc
c0024b0c:	c3                   	ret    
c0024b0d:	90                   	nop

c0024b0e <SATA::powerSaving(PowerSavingLevel)>:
c0024b0e:	c3                   	ret    
c0024b0f:	90                   	nop

c0024b10 <SATA::open(int, int, void*)>:
c0024b10:	56                   	push   esi
c0024b11:	53                   	push   ebx
c0024b12:	50                   	push   eax
c0024b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b1b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b25:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b2b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b39:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b43:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b49:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024b50:	e8 40 ae fe ff       	call   c000f995 <Phys::allocatePage()>
c0024b55:	89 c6                	mov    esi,eax
c0024b57:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b5d:	81 c6 00 10 00 00    	add    esi,0x1000
c0024b63:	e8 2d ae fe ff       	call   c000f995 <Phys::allocatePage()>
c0024b68:	39 c6                	cmp    esi,eax
c0024b6a:	74 10                	je     c0024b7c <SATA::open(int, int, void*)+0x6c>
c0024b6c:	83 ec 0c             	sub    esp,0xc
c0024b6f:	68 68 c6 02 c0       	push   0xc002c668
c0024b74:	e8 00 54 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0024b79:	83 c4 10             	add    esp,0x10
c0024b7c:	83 ec 0c             	sub    esp,0xc
c0024b7f:	6a 02                	push   0x2
c0024b81:	e8 99 c6 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0024b86:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b8c:	6a 03                	push   0x3
c0024b8e:	50                   	push   eax
c0024b8f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024b95:	ff 35 f0 de 02 c0    	push   DWORD PTR ds:0xc002def0
c0024b9b:	e8 d2 ce fe ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024ba0:	83 c4 14             	add    esp,0x14
c0024ba3:	53                   	push   ebx
c0024ba4:	e8 cb f4 fe ff       	call   c0014074 <PhysicalDisk::startCache()>
c0024ba9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bac:	e8 4b 17 ff ff       	call   c00162fc <createPartitionsForDisk(PhysicalDisk*)>
c0024bb1:	83 c4 14             	add    esp,0x14
c0024bb4:	31 c0                	xor    eax,eax
c0024bb6:	5b                   	pop    ebx
c0024bb7:	5e                   	pop    esi
c0024bb8:	c3                   	ret    
c0024bb9:	90                   	nop

c0024bba <SATA::SATA()>:
c0024bba:	83 ec 0c             	sub    esp,0xc
c0024bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bc1:	83 ec 04             	sub    esp,0x4
c0024bc4:	68 00 02 00 00       	push   0x200
c0024bc9:	68 7c c6 02 c0       	push   0xc002c67c
c0024bce:	50                   	push   eax
c0024bcf:	e8 38 f4 fe ff       	call   c001400c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024bd4:	83 c4 10             	add    esp,0x10
c0024bd7:	ba ec c6 02 c0       	mov    edx,0xc002c6ec
c0024bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024be0:	89 10                	mov    DWORD PTR [eax],edx
c0024be2:	90                   	nop
c0024be3:	83 c4 0c             	add    esp,0xc
c0024be6:	c3                   	ret    
c0024be7:	90                   	nop

c0024be8 <SATA::access(unsigned long long, int, void*, bool)>:
c0024be8:	55                   	push   ebp
c0024be9:	57                   	push   edi
c0024bea:	56                   	push   esi
c0024beb:	53                   	push   ebx
c0024bec:	83 ec 2c             	sub    esp,0x2c
c0024bef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024bf3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024bf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024bfb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024bff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c03:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c0c:	7e 10                	jle    c0024c1e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c0e:	83 ec 0c             	sub    esp,0xc
c0024c11:	68 8c c6 02 c0       	push   0xc002c68c
c0024c16:	e8 5e 53 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0024c1b:	83 c4 10             	add    esp,0x10
c0024c1e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024c24:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024c2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024c34:	89 d0                	mov    eax,edx
c0024c36:	c1 e0 07             	shl    eax,0x7
c0024c39:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024c3d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c47:	51                   	push   ecx
c0024c48:	8d 42 02             	lea    eax,[edx+0x2]
c0024c4b:	51                   	push   ecx
c0024c4c:	c1 e0 07             	shl    eax,0x7
c0024c4f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024c53:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024c57:	50                   	push   eax
c0024c58:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024c5e:	e8 97 ef ff ff       	call   c0023bfa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024c63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024c67:	83 c4 10             	add    esp,0x10
c0024c6a:	b8 01 00 00 00       	mov    eax,0x1
c0024c6f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024c74:	0f 84 cb 01 00 00    	je     c0024e45 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c7a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024c7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c82:	c1 e0 09             	shl    eax,0x9
c0024c85:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024c8e:	74 0e                	je     c0024c9e <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024c90:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024c96:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024c9a:	89 c1                	mov    ecx,eax
c0024c9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024ca2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024ca8:	8d 42 02             	lea    eax,[edx+0x2]
c0024cab:	c1 e0 07             	shl    eax,0x7
c0024cae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cb4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024cba:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024cc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024cc4:	c1 e1 05             	shl    ecx,0x5
c0024cc7:	01 c8                	add    eax,ecx
c0024cc9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024ccd:	83 e1 01             	and    ecx,0x1
c0024cd0:	89 ce                	mov    esi,ecx
c0024cd2:	8a 08                	mov    cl,BYTE PTR [eax]
c0024cd4:	c1 e6 06             	shl    esi,0x6
c0024cd7:	83 e1 bf             	and    ecx,0xffffffbf
c0024cda:	09 f1                	or     ecx,esi
c0024cdc:	88 08                	mov    BYTE PTR [eax],cl
c0024cde:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024ce0:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024ce6:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024cec:	89 08                	mov    DWORD PTR [eax],ecx
c0024cee:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024cf4:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024cfa:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024d00:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024d03:	50                   	push   eax
c0024d04:	68 90 00 00 00       	push   0x90
c0024d09:	6a 00                	push   0x0
c0024d0b:	56                   	push   esi
c0024d0c:	e8 3f ba fd ff       	call   c0000750 <memset>
c0024d11:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024d17:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024d1b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024d21:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024d25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024d29:	83 c4 10             	add    esp,0x10
c0024d2c:	48                   	dec    eax
c0024d2d:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024d32:	89 c1                	mov    ecx,eax
c0024d34:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024d3a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d3f:	09 c8                	or     eax,ecx
c0024d41:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024d47:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024d4a:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024d51:	66 25 00 7f          	and    ax,0x7f00
c0024d55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d59:	66 0d 27 80          	or     ax,0x8027
c0024d5d:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024d62:	66 89 06             	mov    WORD PTR [esi],ax
c0024d65:	19 c0                	sbb    eax,eax
c0024d67:	83 e0 f0             	and    eax,0xfffffff0
c0024d6a:	83 c0 35             	add    eax,0x35
c0024d6d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024d70:	89 e8                	mov    eax,ebp
c0024d72:	c1 e8 10             	shr    eax,0x10
c0024d75:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024d78:	89 e8                	mov    eax,ebp
c0024d7a:	c1 e8 18             	shr    eax,0x18
c0024d7d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024d80:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024d84:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024d87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d8b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024d8e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d92:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024d96:	89 d6                	mov    esi,edx
c0024d98:	31 c0                	xor    eax,eax
c0024d9a:	c1 e6 07             	shl    esi,0x7
c0024d9d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024da1:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024da7:	80 e1 88             	and    cl,0x88
c0024daa:	74 0a                	je     c0024db6 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024dac:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024db1:	74 0a                	je     c0024dbd <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024db3:	40                   	inc    eax
c0024db4:	eb eb                	jmp    c0024da1 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024db6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024dbb:	75 0a                	jne    c0024dc7 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024dbd:	83 ec 0c             	sub    esp,0xc
c0024dc0:	68 c5 c6 02 c0       	push   0xc002c6c5
c0024dc5:	eb 56                	jmp    c0024e1d <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024dc7:	b8 01 00 00 00       	mov    eax,0x1
c0024dcc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024dd0:	c1 e2 07             	shl    edx,0x7
c0024dd3:	d3 e0                	shl    eax,cl
c0024dd5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024dd9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024ddf:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024de5:	85 c8                	test   eax,ecx
c0024de7:	74 20                	je     c0024e09 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024de9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024def:	0f ba e1 1e          	bt     ecx,0x1e
c0024df3:	73 ea                	jae    c0024ddf <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024df5:	83 ec 0c             	sub    esp,0xc
c0024df8:	68 d3 c6 02 c0       	push   0xc002c6d3
c0024dfd:	e8 77 51 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0024e02:	83 c4 10             	add    esp,0x10
c0024e05:	31 c0                	xor    eax,eax
c0024e07:	eb 3c                	jmp    c0024e45 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024e09:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024e0f:	0f ba e0 1e          	bt     eax,0x1e
c0024e13:	73 17                	jae    c0024e2c <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024e15:	83 ec 0c             	sub    esp,0xc
c0024e18:	68 d3 c6 02 c0       	push   0xc002c6d3
c0024e1d:	e8 57 51 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0024e22:	83 c4 10             	add    esp,0x10
c0024e25:	b8 01 00 00 00       	mov    eax,0x1
c0024e2a:	eb 19                	jmp    c0024e45 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024e2c:	31 c0                	xor    eax,eax
c0024e2e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024e33:	75 10                	jne    c0024e45 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024e35:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024e3b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024e3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e45:	83 c4 2c             	add    esp,0x2c
c0024e48:	5b                   	pop    ebx
c0024e49:	5e                   	pop    esi
c0024e4a:	5f                   	pop    edi
c0024e4b:	5d                   	pop    ebp
c0024e4c:	c3                   	ret    
c0024e4d:	90                   	nop

c0024e4e <SATA::read(unsigned long long, int, void*)>:
c0024e4e:	57                   	push   edi
c0024e4f:	b8 04 00 00 00       	mov    eax,0x4
c0024e54:	56                   	push   esi
c0024e55:	53                   	push   ebx
c0024e56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e5a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e5e:	8d 7a ff             	lea    edi,[edx-0x1]
c0024e61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024e65:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024e69:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024e6f:	77 25                	ja     c0024e96 <SATA::read(unsigned long long, int, void*)+0x48>
c0024e71:	b8 06 00 00 00       	mov    eax,0x6
c0024e76:	85 f6                	test   esi,esi
c0024e78:	74 1c                	je     c0024e96 <SATA::read(unsigned long long, int, void*)+0x48>
c0024e7a:	50                   	push   eax
c0024e7b:	50                   	push   eax
c0024e7c:	6a 00                	push   0x0
c0024e7e:	56                   	push   esi
c0024e7f:	52                   	push   edx
c0024e80:	53                   	push   ebx
c0024e81:	51                   	push   ecx
c0024e82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e86:	e8 5d fd ff ff       	call   c0024be8 <SATA::access(unsigned long long, int, void*, bool)>
c0024e8b:	83 c4 20             	add    esp,0x20
c0024e8e:	85 c0                	test   eax,eax
c0024e90:	0f 95 c0             	setne  al
c0024e93:	0f b6 c0             	movzx  eax,al
c0024e96:	5b                   	pop    ebx
c0024e97:	5e                   	pop    esi
c0024e98:	5f                   	pop    edi
c0024e99:	c3                   	ret    

c0024e9a <SATA::write(unsigned long long, int, void*)>:
c0024e9a:	55                   	push   ebp
c0024e9b:	b8 04 00 00 00       	mov    eax,0x4
c0024ea0:	57                   	push   edi
c0024ea1:	56                   	push   esi
c0024ea2:	53                   	push   ebx
c0024ea3:	83 ec 0c             	sub    esp,0xc
c0024ea6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024eaa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024eae:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024eb1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024eb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024eb9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024ebf:	77 3d                	ja     c0024efe <SATA::write(unsigned long long, int, void*)+0x64>
c0024ec1:	b8 06 00 00 00       	mov    eax,0x6
c0024ec6:	85 ed                	test   ebp,ebp
c0024ec8:	74 34                	je     c0024efe <SATA::write(unsigned long long, int, void*)+0x64>
c0024eca:	c1 e3 09             	shl    ebx,0x9
c0024ecd:	01 eb                	add    ebx,ebp
c0024ecf:	89 d6                	mov    esi,edx
c0024ed1:	89 cf                	mov    edi,ecx
c0024ed3:	83 c6 01             	add    esi,0x1
c0024ed6:	83 d7 00             	adc    edi,0x0
c0024ed9:	50                   	push   eax
c0024eda:	50                   	push   eax
c0024edb:	6a 01                	push   0x1
c0024edd:	55                   	push   ebp
c0024ede:	81 c5 00 02 00 00    	add    ebp,0x200
c0024ee4:	6a 01                	push   0x1
c0024ee6:	51                   	push   ecx
c0024ee7:	52                   	push   edx
c0024ee8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024eec:	e8 f7 fc ff ff       	call   c0024be8 <SATA::access(unsigned long long, int, void*, bool)>
c0024ef1:	83 c4 20             	add    esp,0x20
c0024ef4:	89 f2                	mov    edx,esi
c0024ef6:	89 f9                	mov    ecx,edi
c0024ef8:	39 dd                	cmp    ebp,ebx
c0024efa:	75 d3                	jne    c0024ecf <SATA::write(unsigned long long, int, void*)+0x35>
c0024efc:	31 c0                	xor    eax,eax
c0024efe:	83 c4 0c             	add    esp,0xc
c0024f01:	5b                   	pop    ebx
c0024f02:	5e                   	pop    esi
c0024f03:	5f                   	pop    edi
c0024f04:	5d                   	pop    ebp
c0024f05:	c3                   	ret    

c0024f06 <SATAPI::write(unsigned long long, int, void*)>:
c0024f06:	b8 03 00 00 00       	mov    eax,0x3
c0024f0b:	c3                   	ret    

c0024f0c <SATAPI::close(int, int, void*)>:
c0024f0c:	83 ec 0c             	sub    esp,0xc
c0024f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f13:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f19:	85 c0                	test   eax,eax
c0024f1b:	74 0c                	je     c0024f29 <SATAPI::close(int, int, void*)+0x1d>
c0024f1d:	83 ec 0c             	sub    esp,0xc
c0024f20:	8b 10                	mov    edx,DWORD PTR [eax]
c0024f22:	50                   	push   eax
c0024f23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024f26:	83 c4 10             	add    esp,0x10
c0024f29:	31 c0                	xor    eax,eax
c0024f2b:	83 c4 0c             	add    esp,0xc
c0024f2e:	c3                   	ret    
c0024f2f:	90                   	nop

c0024f30 <SATAPI::SATAPI()>:
c0024f30:	83 ec 0c             	sub    esp,0xc
c0024f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f37:	83 ec 04             	sub    esp,0x4
c0024f3a:	68 00 08 00 00       	push   0x800
c0024f3f:	68 1c c7 02 c0       	push   0xc002c71c
c0024f44:	50                   	push   eax
c0024f45:	e8 c2 f0 fe ff       	call   c001400c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f4a:	83 c4 10             	add    esp,0x10
c0024f4d:	ba c8 c7 02 c0       	mov    edx,0xc002c7c8
c0024f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f56:	89 10                	mov    DWORD PTR [eax],edx
c0024f58:	90                   	nop
c0024f59:	83 c4 0c             	add    esp,0xc
c0024f5c:	c3                   	ret    
c0024f5d:	90                   	nop

c0024f5e <SATAPI::diskRemoved()>:
c0024f5e:	83 ec 18             	sub    esp,0x18
c0024f61:	68 28 c7 02 c0       	push   0xc002c728
c0024f66:	e8 32 d8 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0024f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f6f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024f76:	83 c4 1c             	add    esp,0x1c
c0024f79:	c3                   	ret    

c0024f7a <SATAPI::diskInserted()>:
c0024f7a:	53                   	push   ebx
c0024f7b:	83 ec 14             	sub    esp,0x14
c0024f7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024f82:	68 3f c7 02 c0       	push   0xc002c73f
c0024f87:	e8 11 d8 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0024f8c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024f93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f96:	e8 d9 f0 fe ff       	call   c0014074 <PhysicalDisk::startCache()>
c0024f9b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024f9f:	83 c4 18             	add    esp,0x18
c0024fa2:	5b                   	pop    ebx
c0024fa3:	e9 54 13 ff ff       	jmp    c00162fc <createPartitionsForDisk(PhysicalDisk*)>

c0024fa8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024fa8:	55                   	push   ebp
c0024fa9:	57                   	push   edi
c0024faa:	56                   	push   esi
c0024fab:	53                   	push   ebx
c0024fac:	83 ec 34             	sub    esp,0x34
c0024faf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024fb3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024fb7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024fbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024fbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024fc3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024fc9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024fcf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024fd3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024fd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024fdd:	c1 e0 07             	shl    eax,0x7
c0024fe0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024fe4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024fe8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ff2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ff6:	8d 58 02             	lea    ebx,[eax+0x2]
c0024ff9:	c1 e3 07             	shl    ebx,0x7
c0024ffc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025000:	53                   	push   ebx
c0025001:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025007:	e8 ee eb ff ff       	call   c0023bfa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002500c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025010:	83 c4 10             	add    esp,0x10
c0025013:	b8 01 00 00 00       	mov    eax,0x1
c0025018:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002501d:	0f 84 85 01 00 00    	je     c00251a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025023:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025029:	8b 03                	mov    eax,DWORD PTR [ebx]
c002502b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025031:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025037:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002503b:	c1 e1 05             	shl    ecx,0x5
c002503e:	01 c8                	add    eax,ecx
c0025040:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025042:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025048:	81 c9 25 00 01 00    	or     ecx,0x10025
c002504e:	89 08                	mov    DWORD PTR [eax],ecx
c0025050:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025056:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002505c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025062:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025065:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025068:	50                   	push   eax
c0025069:	68 90 00 00 00       	push   0x90
c002506e:	6a 00                	push   0x0
c0025070:	53                   	push   ebx
c0025071:	e8 da b6 fd ff       	call   c0000750 <memset>
c0025076:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002507a:	b9 0c 00 00 00       	mov    ecx,0xc
c002507f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025081:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025087:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002508b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025091:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025095:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025099:	48                   	dec    eax
c002509a:	25 ff ff 3f 00       	and    eax,0x3fffff
c002509f:	89 c1                	mov    ecx,eax
c00250a1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00250a7:	25 00 00 c0 ff       	and    eax,0xffc00000
c00250ac:	09 c8                	or     eax,ecx
c00250ae:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00250b4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00250b7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00250be:	66 25 00 7f          	and    ax,0x7f00
c00250c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00250c6:	66 0d 27 80          	or     ax,0x8027
c00250ca:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00250ce:	66 89 03             	mov    WORD PTR [ebx],ax
c00250d1:	89 d0                	mov    eax,edx
c00250d3:	c1 ea 18             	shr    edx,0x18
c00250d6:	c1 e8 10             	shr    eax,0x10
c00250d9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00250dc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00250df:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00250e3:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00250e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00250ea:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00250ed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00250f1:	83 c4 10             	add    esp,0x10
c00250f4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00250f8:	31 c0                	xor    eax,eax
c00250fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00250fe:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025104:	80 e2 88             	and    dl,0x88
c0025107:	74 0a                	je     c0025113 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025109:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002510e:	74 0a                	je     c002511a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025110:	40                   	inc    eax
c0025111:	eb eb                	jmp    c00250fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025113:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025118:	75 0f                	jne    c0025129 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c002511a:	83 ec 0c             	sub    esp,0xc
c002511d:	68 c5 c6 02 c0       	push   0xc002c6c5
c0025122:	e8 52 4e ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0025127:	eb 3f                	jmp    c0025168 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025129:	ba 01 00 00 00       	mov    edx,0x1
c002512e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025132:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025136:	d3 e2                	shl    edx,cl
c0025138:	c1 e0 07             	shl    eax,0x7
c002513b:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025141:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025145:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c002514b:	85 ca                	test   edx,ecx
c002514d:	74 23                	je     c0025172 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002514f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025155:	0f ba e1 1e          	bt     ecx,0x1e
c0025159:	73 ea                	jae    c0025145 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c002515b:	83 ec 0c             	sub    esp,0xc
c002515e:	68 57 c7 02 c0       	push   0xc002c757
c0025163:	e8 35 d6 fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0025168:	83 c4 10             	add    esp,0x10
c002516b:	b8 01 00 00 00       	mov    eax,0x1
c0025170:	eb 36                	jmp    c00251a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025172:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025178:	0f ba e0 1e          	bt     eax,0x1e
c002517c:	73 0a                	jae    c0025188 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c002517e:	83 ec 0c             	sub    esp,0xc
c0025181:	68 6a c7 02 c0       	push   0xc002c76a
c0025186:	eb db                	jmp    c0025163 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025188:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002518d:	74 17                	je     c00251a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002518f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025194:	74 10                	je     c00251a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025196:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c002519c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00251a0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00251a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00251a6:	31 c0                	xor    eax,eax
c00251a8:	83 c4 2c             	add    esp,0x2c
c00251ab:	5b                   	pop    ebx
c00251ac:	5e                   	pop    esi
c00251ad:	5f                   	pop    edi
c00251ae:	5d                   	pop    ebp
c00251af:	c3                   	ret    

c00251b0 <SATAPI::eject()>:
c00251b0:	57                   	push   edi
c00251b1:	b9 03 00 00 00       	mov    ecx,0x3
c00251b6:	53                   	push   ebx
c00251b7:	83 ec 14             	sub    esp,0x14
c00251ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00251be:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251c2:	fc                   	cld    
c00251c3:	31 c0                	xor    eax,eax
c00251c5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251c7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00251cc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00251d1:	50                   	push   eax
c00251d2:	6a 00                	push   0x0
c00251d4:	6a 00                	push   0x0
c00251d6:	6a 00                	push   0x0
c00251d8:	6a 00                	push   0x0
c00251da:	6a 02                	push   0x2
c00251dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251e0:	50                   	push   eax
c00251e1:	53                   	push   ebx
c00251e2:	e8 c1 fd ff ff       	call   c0024fa8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251e7:	83 c4 14             	add    esp,0x14
c00251ea:	53                   	push   ebx
c00251eb:	e8 6e fd ff ff       	call   c0024f5e <SATAPI::diskRemoved()>
c00251f0:	83 c4 24             	add    esp,0x24
c00251f3:	31 c0                	xor    eax,eax
c00251f5:	5b                   	pop    ebx
c00251f6:	5f                   	pop    edi
c00251f7:	c3                   	ret    

c00251f8 <SATAPI::detectMedia()>:
c00251f8:	56                   	push   esi
c00251f9:	53                   	push   ebx
c00251fa:	83 ec 28             	sub    esp,0x28
c00251fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025201:	6a 0c                	push   0xc
c0025203:	6a 00                	push   0x0
c0025205:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025209:	56                   	push   esi
c002520a:	e8 41 b5 fd ff       	call   c0000750 <memset>
c002520f:	83 c4 0c             	add    esp,0xc
c0025212:	6a 00                	push   0x0
c0025214:	6a 00                	push   0x0
c0025216:	6a 00                	push   0x0
c0025218:	6a 00                	push   0x0
c002521a:	6a 00                	push   0x0
c002521c:	56                   	push   esi
c002521d:	53                   	push   ebx
c002521e:	e8 85 fd ff ff       	call   c0024fa8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025223:	83 c4 1c             	add    esp,0x1c
c0025226:	6a 0c                	push   0xc
c0025228:	6a 00                	push   0x0
c002522a:	56                   	push   esi
c002522b:	e8 20 b5 fd ff       	call   c0000750 <memset>
c0025230:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025235:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002523a:	83 c4 0c             	add    esp,0xc
c002523d:	6a 01                	push   0x1
c002523f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025243:	50                   	push   eax
c0025244:	6a 00                	push   0x0
c0025246:	6a 00                	push   0x0
c0025248:	6a 12                	push   0x12
c002524a:	56                   	push   esi
c002524b:	53                   	push   ebx
c002524c:	e8 57 fd ff ff       	call   c0024fa8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025251:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025255:	83 c4 20             	add    esp,0x20
c0025258:	83 e0 7f             	and    eax,0x7f
c002525b:	3c 70                	cmp    al,0x70
c002525d:	74 15                	je     c0025274 <SATAPI::detectMedia()+0x7c>
c002525f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025266:	75 0c                	jne    c0025274 <SATAPI::detectMedia()+0x7c>
c0025268:	83 ec 0c             	sub    esp,0xc
c002526b:	53                   	push   ebx
c002526c:	e8 09 fd ff ff       	call   c0024f7a <SATAPI::diskInserted()>
c0025271:	83 c4 10             	add    esp,0x10
c0025274:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025278:	83 e0 0f             	and    eax,0xf
c002527b:	3c 02                	cmp    al,0x2
c002527d:	75 1b                	jne    c002529a <SATAPI::detectMedia()+0xa2>
c002527f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025284:	75 2d                	jne    c00252b3 <SATAPI::detectMedia()+0xbb>
c0025286:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002528d:	74 24                	je     c00252b3 <SATAPI::detectMedia()+0xbb>
c002528f:	83 ec 0c             	sub    esp,0xc
c0025292:	53                   	push   ebx
c0025293:	e8 c6 fc ff ff       	call   c0024f5e <SATAPI::diskRemoved()>
c0025298:	eb 16                	jmp    c00252b0 <SATAPI::detectMedia()+0xb8>
c002529a:	84 c0                	test   al,al
c002529c:	75 15                	jne    c00252b3 <SATAPI::detectMedia()+0xbb>
c002529e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252a5:	75 0c                	jne    c00252b3 <SATAPI::detectMedia()+0xbb>
c00252a7:	83 ec 0c             	sub    esp,0xc
c00252aa:	53                   	push   ebx
c00252ab:	e8 ca fc ff ff       	call   c0024f7a <SATAPI::diskInserted()>
c00252b0:	83 c4 10             	add    esp,0x10
c00252b3:	83 c4 24             	add    esp,0x24
c00252b6:	5b                   	pop    ebx
c00252b7:	5e                   	pop    esi
c00252b8:	c3                   	ret    
c00252b9:	90                   	nop

c00252ba <SATAPI::open(int, int, void*)>:
c00252ba:	56                   	push   esi
c00252bb:	53                   	push   ebx
c00252bc:	50                   	push   eax
c00252bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00252c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00252c5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00252cf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00252d5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00252df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252e3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00252ed:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00252f3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00252fa:	e8 96 a6 fe ff       	call   c000f995 <Phys::allocatePage()>
c00252ff:	89 c6                	mov    esi,eax
c0025301:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025307:	81 c6 00 10 00 00    	add    esi,0x1000
c002530d:	e8 83 a6 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025312:	39 c6                	cmp    esi,eax
c0025314:	74 10                	je     c0025326 <SATAPI::open(int, int, void*)+0x6c>
c0025316:	83 ec 0c             	sub    esp,0xc
c0025319:	68 7f c7 02 c0       	push   0xc002c77f
c002531e:	e8 56 4c ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0025323:	83 c4 10             	add    esp,0x10
c0025326:	83 ec 0c             	sub    esp,0xc
c0025329:	6a 02                	push   0x2
c002532b:	e8 ef be fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0025330:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025336:	6a 03                	push   0x3
c0025338:	50                   	push   eax
c0025339:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002533f:	ff 35 f0 de 02 c0    	push   DWORD PTR ds:0xc002def0
c0025345:	e8 28 c7 fe ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c002534a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025351:	83 c4 14             	add    esp,0x14
c0025354:	53                   	push   ebx
c0025355:	e8 9e fe ff ff       	call   c00251f8 <SATAPI::detectMedia()>
c002535a:	83 c4 14             	add    esp,0x14
c002535d:	31 c0                	xor    eax,eax
c002535f:	5b                   	pop    ebx
c0025360:	5e                   	pop    esi
c0025361:	c3                   	ret    

c0025362 <SATAPI::read(unsigned long long, int, void*)>:
c0025362:	55                   	push   ebp
c0025363:	57                   	push   edi
c0025364:	56                   	push   esi
c0025365:	53                   	push   ebx
c0025366:	83 ec 1c             	sub    esp,0x1c
c0025369:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002536d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025371:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025375:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002537c:	74 19                	je     c0025397 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002537e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025383:	7e 2e                	jle    c00253b3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025385:	83 ec 0c             	sub    esp,0xc
c0025388:	68 95 c7 02 c0       	push   0xc002c795
c002538d:	e8 e7 4b ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0025392:	83 c4 10             	add    esp,0x10
c0025395:	eb 1c                	jmp    c00253b3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025397:	83 ec 0c             	sub    esp,0xc
c002539a:	55                   	push   ebp
c002539b:	e8 58 fe ff ff       	call   c00251f8 <SATAPI::detectMedia()>
c00253a0:	83 c4 10             	add    esp,0x10
c00253a3:	b8 02 00 00 00       	mov    eax,0x2
c00253a8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00253af:	75 cd                	jne    c002537e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00253b1:	eb 49                	jmp    c00253fc <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00253b3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00253b7:	b9 03 00 00 00       	mov    ecx,0x3
c00253bc:	fc                   	cld    
c00253bd:	31 c0                	xor    eax,eax
c00253bf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253c1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00253c6:	89 d8                	mov    eax,ebx
c00253c8:	86 e0                	xchg   al,ah
c00253ca:	c1 c0 10             	rol    eax,0x10
c00253cd:	86 e0                	xchg   al,ah
c00253cf:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00253d3:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00253d7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253db:	50                   	push   eax
c00253dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00253e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00253e4:	56                   	push   esi
c00253e5:	53                   	push   ebx
c00253e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00253ea:	c1 e0 0b             	shl    eax,0xb
c00253ed:	50                   	push   eax
c00253ee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253f2:	50                   	push   eax
c00253f3:	55                   	push   ebp
c00253f4:	e8 af fb ff ff       	call   c0024fa8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253f9:	83 c4 20             	add    esp,0x20
c00253fc:	83 c4 1c             	add    esp,0x1c
c00253ff:	5b                   	pop    ebx
c0025400:	5e                   	pop    esi
c0025401:	5f                   	pop    edi
c0025402:	5d                   	pop    ebp
c0025403:	c3                   	ret    

c0025404 <AVX::open(int, int, void*)>:
c0025404:	83 ec 0c             	sub    esp,0xc
c0025407:	e8 3c 11 00 00       	call   c0026548 <avxInit>
c002540c:	b8 00 00 00 00       	mov    eax,0x0
c0025411:	83 c4 0c             	add    esp,0xc
c0025414:	c3                   	ret    
c0025415:	90                   	nop

c0025416 <AVX::close(int, int, void*)>:
c0025416:	83 ec 0c             	sub    esp,0xc
c0025419:	e8 2b 11 00 00       	call   c0026549 <avxClose>
c002541e:	b8 00 00 00 00       	mov    eax,0x0
c0025423:	83 c4 0c             	add    esp,0xc
c0025426:	c3                   	ret    
c0025427:	90                   	nop

c0025428 <AVX::available()>:
c0025428:	83 ec 0c             	sub    esp,0xc
c002542b:	e8 10 11 00 00       	call   c0026540 <avxDetect>
c0025430:	85 c0                	test   eax,eax
c0025432:	0f 95 c0             	setne  al
c0025435:	83 c4 0c             	add    esp,0xc
c0025438:	c3                   	ret    
c0025439:	90                   	nop

c002543a <AVX::save(void*)>:
c002543a:	83 ec 0c             	sub    esp,0xc
c002543d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025441:	83 ec 0c             	sub    esp,0xc
c0025444:	50                   	push   eax
c0025445:	e8 fc 10 00 00       	call   c0026546 <avxSave>
c002544a:	83 c4 10             	add    esp,0x10
c002544d:	90                   	nop
c002544e:	83 c4 0c             	add    esp,0xc
c0025451:	c3                   	ret    

c0025452 <AVX::load(void*)>:
c0025452:	83 ec 0c             	sub    esp,0xc
c0025455:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025459:	83 ec 0c             	sub    esp,0xc
c002545c:	50                   	push   eax
c002545d:	e8 e5 10 00 00       	call   c0026547 <avxLoad>
c0025462:	83 c4 10             	add    esp,0x10
c0025465:	90                   	nop
c0025466:	83 c4 0c             	add    esp,0xc
c0025469:	c3                   	ret    

c002546a <AVX::AVX()>:
c002546a:	83 ec 0c             	sub    esp,0xc
c002546d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025471:	83 ec 08             	sub    esp,0x8
c0025474:	68 f8 c7 02 c0       	push   0xc002c7f8
c0025479:	50                   	push   eax
c002547a:	e8 6b ec fe ff       	call   c00140ea <FPU::FPU(char const*)>
c002547f:	83 c4 10             	add    esp,0x10
c0025482:	ba 08 c8 02 c0       	mov    edx,0xc002c808
c0025487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002548b:	89 10                	mov    DWORD PTR [eax],edx
c002548d:	90                   	nop
c002548e:	83 c4 0c             	add    esp,0xc
c0025491:	c3                   	ret    

c0025492 <MMX::available()>:
c0025492:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0025497:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002549d:	83 e0 20             	and    eax,0x20
c00254a0:	84 c0                	test   al,al
c00254a2:	0f 95 c0             	setne  al
c00254a5:	c3                   	ret    

c00254a6 <MMX::open(int, int, void*)>:
c00254a6:	83 ec 0c             	sub    esp,0xc
c00254a9:	e8 24 11 00 00       	call   c00265d2 <x87Init>
c00254ae:	b8 00 00 00 00       	mov    eax,0x0
c00254b3:	83 c4 0c             	add    esp,0xc
c00254b6:	c3                   	ret    
c00254b7:	90                   	nop

c00254b8 <MMX::close(int, int, void*)>:
c00254b8:	83 ec 0c             	sub    esp,0xc
c00254bb:	e8 2c 11 00 00       	call   c00265ec <x87Close>
c00254c0:	b8 00 00 00 00       	mov    eax,0x0
c00254c5:	83 c4 0c             	add    esp,0xc
c00254c8:	c3                   	ret    
c00254c9:	90                   	nop

c00254ca <MMX::save(void*)>:
c00254ca:	83 ec 0c             	sub    esp,0xc
c00254cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254d1:	83 ec 0c             	sub    esp,0xc
c00254d4:	50                   	push   eax
c00254d5:	e8 e7 10 00 00       	call   c00265c1 <x87Save>
c00254da:	83 c4 10             	add    esp,0x10
c00254dd:	90                   	nop
c00254de:	83 c4 0c             	add    esp,0xc
c00254e1:	c3                   	ret    

c00254e2 <MMX::load(void*)>:
c00254e2:	83 ec 0c             	sub    esp,0xc
c00254e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254e9:	83 ec 0c             	sub    esp,0xc
c00254ec:	50                   	push   eax
c00254ed:	e8 d8 10 00 00       	call   c00265ca <x87Load>
c00254f2:	83 c4 10             	add    esp,0x10
c00254f5:	90                   	nop
c00254f6:	83 c4 0c             	add    esp,0xc
c00254f9:	c3                   	ret    

c00254fa <MMX::MMX()>:
c00254fa:	83 ec 0c             	sub    esp,0xc
c00254fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025501:	83 ec 08             	sub    esp,0x8
c0025504:	68 38 c8 02 c0       	push   0xc002c838
c0025509:	50                   	push   eax
c002550a:	e8 db eb fe ff       	call   c00140ea <FPU::FPU(char const*)>
c002550f:	83 c4 10             	add    esp,0x10
c0025512:	ba 48 c8 02 c0       	mov    edx,0xc002c848
c0025517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002551b:	89 10                	mov    DWORD PTR [eax],edx
c002551d:	90                   	nop
c002551e:	83 c4 0c             	add    esp,0xc
c0025521:	c3                   	ret    

c0025522 <SSE::open(int, int, void*)>:
c0025522:	83 ec 0c             	sub    esp,0xc
c0025525:	e8 5a 10 00 00       	call   c0026584 <sseInit>
c002552a:	b8 00 00 00 00       	mov    eax,0x0
c002552f:	83 c4 0c             	add    esp,0xc
c0025532:	c3                   	ret    
c0025533:	90                   	nop

c0025534 <SSE::close(int, int, void*)>:
c0025534:	83 ec 0c             	sub    esp,0xc
c0025537:	e8 58 10 00 00       	call   c0026594 <sseClose>
c002553c:	b8 00 00 00 00       	mov    eax,0x0
c0025541:	83 c4 0c             	add    esp,0xc
c0025544:	c3                   	ret    
c0025545:	90                   	nop

c0025546 <SSE::available()>:
c0025546:	83 ec 1c             	sub    esp,0x1c
c0025549:	e8 12 10 00 00       	call   c0026560 <absolutelyNoChanceInHell>
c002554e:	85 c0                	test   eax,eax
c0025550:	0f 95 c0             	setne  al
c0025553:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025557:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002555b:	83 c4 1c             	add    esp,0x1c
c002555e:	c3                   	ret    
c002555f:	90                   	nop

c0025560 <SSE::save(void*)>:
c0025560:	83 ec 0c             	sub    esp,0xc
c0025563:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025567:	83 ec 0c             	sub    esp,0xc
c002556a:	50                   	push   eax
c002556b:	e8 08 10 00 00       	call   c0026578 <sseSave>
c0025570:	83 c4 10             	add    esp,0x10
c0025573:	90                   	nop
c0025574:	83 c4 0c             	add    esp,0xc
c0025577:	c3                   	ret    

c0025578 <SSE::load(void*)>:
c0025578:	83 ec 0c             	sub    esp,0xc
c002557b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002557f:	83 ec 0c             	sub    esp,0xc
c0025582:	50                   	push   eax
c0025583:	e8 f6 0f 00 00       	call   c002657e <sseLoad>
c0025588:	83 c4 10             	add    esp,0x10
c002558b:	90                   	nop
c002558c:	83 c4 0c             	add    esp,0xc
c002558f:	c3                   	ret    

c0025590 <SSE::SSE()>:
c0025590:	83 ec 0c             	sub    esp,0xc
c0025593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025597:	83 ec 08             	sub    esp,0x8
c002559a:	68 78 c8 02 c0       	push   0xc002c878
c002559f:	50                   	push   eax
c00255a0:	e8 45 eb fe ff       	call   c00140ea <FPU::FPU(char const*)>
c00255a5:	83 c4 10             	add    esp,0x10
c00255a8:	ba 88 c8 02 c0       	mov    edx,0xc002c888
c00255ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b1:	89 10                	mov    DWORD PTR [eax],edx
c00255b3:	90                   	nop
c00255b4:	83 c4 0c             	add    esp,0xc
c00255b7:	c3                   	ret    

c00255b8 <x87::open(int, int, void*)>:
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	e8 12 10 00 00       	call   c00265d2 <x87Init>
c00255c0:	b8 00 00 00 00       	mov    eax,0x0
c00255c5:	83 c4 0c             	add    esp,0xc
c00255c8:	c3                   	ret    
c00255c9:	90                   	nop

c00255ca <x87::close(int, int, void*)>:
c00255ca:	83 ec 0c             	sub    esp,0xc
c00255cd:	e8 1a 10 00 00       	call   c00265ec <x87Close>
c00255d2:	b8 00 00 00 00       	mov    eax,0x0
c00255d7:	83 c4 0c             	add    esp,0xc
c00255da:	c3                   	ret    
c00255db:	90                   	nop

c00255dc <x87::available()>:
c00255dc:	83 ec 0c             	sub    esp,0xc
c00255df:	e8 c2 0f 00 00       	call   c00265a6 <x87Detect>
c00255e4:	85 c0                	test   eax,eax
c00255e6:	0f 95 c0             	setne  al
c00255e9:	83 c4 0c             	add    esp,0xc
c00255ec:	c3                   	ret    
c00255ed:	90                   	nop

c00255ee <x87::save(void*)>:
c00255ee:	83 ec 0c             	sub    esp,0xc
c00255f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255f5:	83 ec 0c             	sub    esp,0xc
c00255f8:	50                   	push   eax
c00255f9:	e8 c3 0f 00 00       	call   c00265c1 <x87Save>
c00255fe:	83 c4 10             	add    esp,0x10
c0025601:	90                   	nop
c0025602:	83 c4 0c             	add    esp,0xc
c0025605:	c3                   	ret    

c0025606 <x87::load(void*)>:
c0025606:	83 ec 0c             	sub    esp,0xc
c0025609:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002560d:	83 ec 0c             	sub    esp,0xc
c0025610:	50                   	push   eax
c0025611:	e8 b4 0f 00 00       	call   c00265ca <x87Load>
c0025616:	83 c4 10             	add    esp,0x10
c0025619:	90                   	nop
c002561a:	83 c4 0c             	add    esp,0xc
c002561d:	c3                   	ret    

c002561e <x87::x87()>:
c002561e:	83 ec 0c             	sub    esp,0xc
c0025621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025625:	83 ec 08             	sub    esp,0x8
c0025628:	68 b8 c8 02 c0       	push   0xc002c8b8
c002562d:	50                   	push   eax
c002562e:	e8 b7 ea fe ff       	call   c00140ea <FPU::FPU(char const*)>
c0025633:	83 c4 10             	add    esp,0x10
c0025636:	ba c8 c8 02 c0       	mov    edx,0xc002c8c8
c002563b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002563f:	89 10                	mov    DWORD PTR [eax],edx
c0025641:	90                   	nop
c0025642:	83 c4 0c             	add    esp,0xc
c0025645:	c3                   	ret    

c0025646 <APIC::disable()>:
c0025646:	90                   	nop
c0025647:	c3                   	ret    

c0025648 <APIC::close(int, int, void*)>:
c0025648:	55                   	push   ebp
c0025649:	89 e5                	mov    ebp,esp
c002564b:	83 ec 08             	sub    esp,0x8
c002564e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025651:	8b 00                	mov    eax,DWORD PTR [eax]
c0025653:	83 c0 3c             	add    eax,0x3c
c0025656:	8b 00                	mov    eax,DWORD PTR [eax]
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002565e:	ff d0                	call   eax
c0025660:	83 c4 10             	add    esp,0x10
c0025663:	b8 00 00 00 00       	mov    eax,0x0
c0025668:	c9                   	leave  
c0025669:	c3                   	ret    

c002566a <IOAPIC::close(int, int, void*)>:
c002566a:	b8 00 00 00 00       	mov    eax,0x0
c002566f:	c3                   	ret    

c0025670 <APIC::io_wait()>:
c0025670:	eb 00                	jmp    c0025672 <APIC::io_wait()+0x2>
c0025672:	eb 00                	jmp    c0025674 <APIC::io_wait()+0x4>
c0025674:	90                   	nop
c0025675:	c3                   	ret    

c0025676 <APIC::getBase()>:
c0025676:	55                   	push   ebp
c0025677:	89 e5                	mov    ebp,esp
c0025679:	83 ec 18             	sub    esp,0x18
c002567c:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0025681:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025687:	83 e0 08             	and    eax,0x8
c002568a:	84 c0                	test   al,al
c002568c:	75 07                	jne    c0025695 <APIC::getBase()+0x1f>
c002568e:	b8 00 00 00 00       	mov    eax,0x0
c0025693:	eb 21                	jmp    c00256b6 <APIC::getBase()+0x40>
c0025695:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c002569a:	83 ec 08             	sub    esp,0x8
c002569d:	6a 1b                	push   0x1b
c002569f:	50                   	push   eax
c00256a0:	e8 9b 94 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00256a5:	83 c4 10             	add    esp,0x10
c00256a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00256ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00256ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00256b6:	c9                   	leave  
c00256b7:	c3                   	ret    

c00256b8 <APIC::eoi(unsigned char)>:
c00256b8:	55                   	push   ebp
c00256b9:	89 e5                	mov    ebp,esp
c00256bb:	83 ec 28             	sub    esp,0x28
c00256be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256c1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00256c4:	83 ec 0c             	sub    esp,0xc
c00256c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256ca:	e8 a7 ff ff ff       	call   c0025676 <APIC::getBase()>
c00256cf:	83 c4 10             	add    esp,0x10
c00256d2:	05 b0 00 00 00       	add    eax,0xb0
c00256d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00256da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00256dd:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00256e3:	90                   	nop
c00256e4:	c9                   	leave  
c00256e5:	c3                   	ret    

c00256e6 <APIC::open(int, int, void*)>:
c00256e6:	55                   	push   ebp
c00256e7:	89 e5                	mov    ebp,esp
c00256e9:	57                   	push   edi
c00256ea:	56                   	push   esi
c00256eb:	53                   	push   ebx
c00256ec:	83 ec 2c             	sub    esp,0x2c
c00256ef:	83 ec 0c             	sub    esp,0xc
c00256f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256f5:	e8 7c ff ff ff       	call   c0025676 <APIC::getBase()>
c00256fa:	83 c4 10             	add    esp,0x10
c00256fd:	89 c2                	mov    edx,eax
c00256ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025702:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025708:	0f b6 f8             	movzx  edi,al
c002570b:	89 d0                	mov    eax,edx
c002570d:	ba 00 00 00 00       	mov    edx,0x0
c0025712:	89 c1                	mov    ecx,eax
c0025714:	80 e5 ff             	and    ch,0xff
c0025717:	89 cb                	mov    ebx,ecx
c0025719:	0f b6 f2             	movzx  esi,dl
c002571c:	89 d8                	mov    eax,ebx
c002571e:	89 f2                	mov    edx,esi
c0025720:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025723:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025726:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002572a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002572e:	83 e0 00             	and    eax,0x0
c0025731:	09 d0                	or     eax,edx
c0025733:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002573a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025740:	8d 50 01             	lea    edx,[eax+0x1]
c0025743:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025746:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002574c:	0f b6 d0             	movzx  edx,al
c002574f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025752:	83 c2 08             	add    edx,0x8
c0025755:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025759:	0f b6 c9             	movzx  ecx,cl
c002575c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025762:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025766:	83 ec 0c             	sub    esp,0xc
c0025769:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002576c:	e8 05 ff ff ff       	call   c0025676 <APIC::getBase()>
c0025771:	83 c4 10             	add    esp,0x10
c0025774:	05 f0 00 00 00       	add    eax,0xf0
c0025779:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002577c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002577f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025781:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025784:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002578b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025792:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025795:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025798:	89 10                	mov    DWORD PTR [eax],edx
c002579a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00257a1:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c00257a6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00257a9:	7d 7c                	jge    c0025827 <APIC::open(int, int, void*)+0x141>
c00257ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00257ae:	8b 04 85 40 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19c0]
c00257b5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00257b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00257bb:	8b 04 85 40 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19c0]
c00257c2:	c1 e8 08             	shr    eax,0x8
c00257c5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00257c9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00257cc:	8b 04 85 40 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19c0]
c00257d3:	c1 e8 18             	shr    eax,0x18
c00257d6:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00257d9:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00257dd:	75 40                	jne    c002581f <APIC::open(int, int, void*)+0x139>
c00257df:	83 ec 0c             	sub    esp,0xc
c00257e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257e5:	e8 8c fe ff ff       	call   c0025676 <APIC::getBase()>
c00257ea:	83 c4 10             	add    esp,0x10
c00257ed:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00257f1:	75 07                	jne    c00257fa <APIC::open(int, int, void*)+0x114>
c00257f3:	ba 60 03 00 00       	mov    edx,0x360
c00257f8:	eb 05                	jmp    c00257ff <APIC::open(int, int, void*)+0x119>
c00257fa:	ba 50 03 00 00       	mov    edx,0x350
c00257ff:	01 d0                	add    eax,edx
c0025801:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025804:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025807:	8b 00                	mov    eax,DWORD PTR [eax]
c0025809:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002580c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025813:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025817:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002581a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002581d:	89 10                	mov    DWORD PTR [eax],edx
c002581f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025822:	e9 7a ff ff ff       	jmp    c00257a1 <APIC::open(int, int, void*)+0xbb>
c0025827:	b8 00 00 00 00       	mov    eax,0x0
c002582c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002582f:	5b                   	pop    ebx
c0025830:	5e                   	pop    esi
c0025831:	5f                   	pop    edi
c0025832:	5d                   	pop    ebp
c0025833:	c3                   	ret    

c0025834 <IOAPIC::IOAPIC()>:
c0025834:	83 ec 0c             	sub    esp,0xc
c0025837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002583b:	83 ec 08             	sub    esp,0x8
c002583e:	68 f8 c8 02 c0       	push   0xc002c8f8
c0025843:	50                   	push   eax
c0025844:	e8 91 e5 fe ff       	call   c0013dda <Device::Device(char const*)>
c0025849:	83 c4 10             	add    esp,0x10
c002584c:	ba 20 ca 02 c0       	mov    edx,0xc002ca20
c0025851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025855:	89 10                	mov    DWORD PTR [eax],edx
c0025857:	90                   	nop
c0025858:	83 c4 0c             	add    esp,0xc
c002585b:	c3                   	ret    

c002585c <APIC::APIC()>:
c002585c:	53                   	push   ebx
c002585d:	83 ec 18             	sub    esp,0x18
c0025860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025864:	83 ec 08             	sub    esp,0x8
c0025867:	68 00 c9 02 c0       	push   0xc002c900
c002586c:	50                   	push   eax
c002586d:	e8 d2 ec fe ff       	call   c0014544 <InterruptController::InterruptController(char const*)>
c0025872:	83 c4 10             	add    esp,0x10
c0025875:	ba d8 c9 02 c0       	mov    edx,0xc002c9d8
c002587a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002587e:	89 10                	mov    DWORD PTR [eax],edx
c0025880:	a0 00 01 03 c0       	mov    al,ds:0xc0030100
c0025885:	83 f0 01             	xor    eax,0x1
c0025888:	84 c0                	test   al,al
c002588a:	0f 84 a1 00 00 00    	je     c0025931 <APIC::APIC()+0xd5>
c0025890:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025895:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c002589a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002589e:	0f 83 86 00 00 00    	jae    c002592a <APIC::APIC()+0xce>
c00258a4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00258ac:	83 ec 0c             	sub    esp,0xc
c00258af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00258b3:	e8 e1 9c fe ff       	call   c000f599 <malloc>
c00258b8:	83 c4 10             	add    esp,0x10
c00258bb:	89 c3                	mov    ebx,eax
c00258bd:	83 ec 0c             	sub    esp,0xc
c00258c0:	53                   	push   ebx
c00258c1:	e8 6e ff ff ff       	call   c0025834 <IOAPIC::IOAPIC()>
c00258c6:	83 c4 10             	add    esp,0x10
c00258c9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00258cd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00258d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00258d6:	89 14 85 e0 00 03 c0 	mov    DWORD PTR [eax*4-0x3ffcff20],edx
c00258dd:	a1 c0 00 03 c0       	mov    eax,ds:0xc00300c0
c00258e2:	40                   	inc    eax
c00258e3:	a3 c0 00 03 c0       	mov    ds:0xc00300c0,eax
c00258e8:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00258ed:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00258f3:	83 ec 08             	sub    esp,0x8
c00258f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00258fa:	50                   	push   eax
c00258fb:	e8 d6 e2 fe ff       	call   c0013bd6 <Device::addChild(Device*)>
c0025900:	83 c4 10             	add    esp,0x10
c0025903:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025907:	8b 00                	mov    eax,DWORD PTR [eax]
c0025909:	83 c0 08             	add    eax,0x8
c002590c:	8b 00                	mov    eax,DWORD PTR [eax]
c002590e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025913:	6a 00                	push   0x0
c0025915:	6a 00                	push   0x0
c0025917:	52                   	push   edx
c0025918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002591c:	ff d0                	call   eax
c002591e:	83 c4 10             	add    esp,0x10
c0025921:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025925:	e9 6b ff ff ff       	jmp    c0025895 <APIC::APIC()+0x39>
c002592a:	c6 05 00 01 03 c0 01 	mov    BYTE PTR ds:0xc0030100,0x1
c0025931:	90                   	nop
c0025932:	83 c4 18             	add    esp,0x18
c0025935:	5b                   	pop    ebx
c0025936:	c3                   	ret    
c0025937:	90                   	nop

c0025938 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025938:	55                   	push   ebp
c0025939:	89 e5                	mov    ebp,esp
c002593b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002593e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025944:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025947:	72 1d                	jb     c0025966 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002594c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025955:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002595b:	01 d0                	add    eax,edx
c002595d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025960:	73 04                	jae    c0025966 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025962:	b0 01                	mov    al,0x1
c0025964:	eb 02                	jmp    c0025968 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025966:	b0 00                	mov    al,0x0
c0025968:	5d                   	pop    ebp
c0025969:	c3                   	ret    

c002596a <IOAPIC::read(int)>:
c002596a:	55                   	push   ebp
c002596b:	89 e5                	mov    ebp,esp
c002596d:	83 ec 10             	sub    esp,0x10
c0025970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025973:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025979:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002597c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002597f:	0f b6 d0             	movzx  edx,al
c0025982:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025985:	89 10                	mov    DWORD PTR [eax],edx
c0025987:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002598a:	83 c0 10             	add    eax,0x10
c002598d:	8b 00                	mov    eax,DWORD PTR [eax]
c002598f:	c9                   	leave  
c0025990:	c3                   	ret    
c0025991:	90                   	nop

c0025992 <IOAPIC::open(int, int, void*)>:
c0025992:	55                   	push   ebp
c0025993:	89 e5                	mov    ebp,esp
c0025995:	57                   	push   edi
c0025996:	56                   	push   esi
c0025997:	53                   	push   ebx
c0025998:	83 ec 0c             	sub    esp,0xc
c002599b:	83 ec 0c             	sub    esp,0xc
c002599e:	68 2b c9 02 c0       	push   0xc002c92b
c00259a3:	e8 f5 cd fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c00259a8:	83 c4 10             	add    esp,0x10
c00259ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259b1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00259b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00259c0:	8b 14 85 20 e7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd18e0]
c00259c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00259d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00259d9:	8b 14 85 a0 e7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1860]
c00259e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259e3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00259e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00259f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259fb:	0f b6 f8             	movzx  edi,al
c00259fe:	89 d0                	mov    eax,edx
c0025a00:	ba 00 00 00 00       	mov    edx,0x0
c0025a05:	89 c1                	mov    ecx,eax
c0025a07:	80 e5 ff             	and    ch,0xff
c0025a0a:	89 cb                	mov    ebx,ecx
c0025a0c:	0f b6 f2             	movzx  esi,dl
c0025a0f:	89 d8                	mov    eax,ebx
c0025a11:	89 f2                	mov    edx,esi
c0025a13:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a16:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025a19:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025a1d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025a21:	83 e0 00             	and    eax,0x0
c0025a24:	09 d0                	or     eax,edx
c0025a26:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a2d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a33:	8d 50 01             	lea    edx,[eax+0x1]
c0025a36:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a39:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025a3f:	0f b6 d0             	movzx  edx,al
c0025a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a45:	83 c2 08             	add    edx,0x8
c0025a48:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025a4c:	0f b6 c9             	movzx  ecx,cl
c0025a4f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025a55:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025a59:	83 ec 08             	sub    esp,0x8
c0025a5c:	6a 01                	push   0x1
c0025a5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a61:	e8 04 ff ff ff       	call   c002596a <IOAPIC::read(int)>
c0025a66:	83 c4 10             	add    esp,0x10
c0025a69:	c1 f8 10             	sar    eax,0x10
c0025a6c:	0f b6 c0             	movzx  eax,al
c0025a6f:	8d 50 01             	lea    edx,[eax+0x1]
c0025a72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a75:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025a7b:	b8 00 00 00 00       	mov    eax,0x0
c0025a80:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a83:	5b                   	pop    ebx
c0025a84:	5e                   	pop    esi
c0025a85:	5f                   	pop    edi
c0025a86:	5d                   	pop    ebp
c0025a87:	c3                   	ret    

c0025a88 <IOAPIC::write(int, int)>:
c0025a88:	55                   	push   ebp
c0025a89:	89 e5                	mov    ebp,esp
c0025a8b:	83 ec 10             	sub    esp,0x10
c0025a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a97:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a9d:	0f b6 d0             	movzx  edx,al
c0025aa0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025aa3:	89 10                	mov    DWORD PTR [eax],edx
c0025aa5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025aa8:	8d 50 10             	lea    edx,[eax+0x10]
c0025aab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025aae:	89 02                	mov    DWORD PTR [edx],eax
c0025ab0:	90                   	nop
c0025ab1:	c9                   	leave  
c0025ab2:	c3                   	ret    
c0025ab3:	90                   	nop

c0025ab4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025ab4:	55                   	push   ebp
c0025ab5:	89 e5                	mov    ebp,esp
c0025ab7:	53                   	push   ebx
c0025ab8:	83 ec 2c             	sub    esp,0x2c
c0025abb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025abe:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025ac1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025ac4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025ac7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025aca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025acd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025ad0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ad3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ad6:	88 d8                	mov    al,bl
c0025ad8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025adb:	88 c8                	mov    al,cl
c0025add:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025ae0:	88 d0                	mov    al,dl
c0025ae2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025ae5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025ae9:	83 c0 08             	add    eax,0x8
c0025aec:	01 c0                	add    eax,eax
c0025aee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025af1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025af5:	83 c0 08             	add    eax,0x8
c0025af8:	01 c0                	add    eax,eax
c0025afa:	40                   	inc    eax
c0025afb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025afe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b01:	50                   	push   eax
c0025b02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b05:	e8 60 fe ff ff       	call   c002596a <IOAPIC::read(int)>
c0025b0a:	83 c4 08             	add    esp,0x8
c0025b0d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025b10:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025b17:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025b1a:	c1 e0 18             	shl    eax,0x18
c0025b1d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025b20:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025b23:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b26:	52                   	push   edx
c0025b27:	50                   	push   eax
c0025b28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b2b:	e8 58 ff ff ff       	call   c0025a88 <IOAPIC::write(int, int)>
c0025b30:	83 c4 0c             	add    esp,0xc
c0025b33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b36:	50                   	push   eax
c0025b37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b3a:	e8 2b fe ff ff       	call   c002596a <IOAPIC::read(int)>
c0025b3f:	83 c4 08             	add    esp,0x8
c0025b42:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025b45:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025b4c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025b53:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025b5a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b5e:	74 09                	je     c0025b69 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025b60:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025b67:	eb 07                	jmp    c0025b70 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025b69:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025b70:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025b74:	74 09                	je     c0025b7f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025b76:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025b7d:	eb 07                	jmp    c0025b86 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025b7f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025b86:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025b8d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025b91:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025b94:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025b97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b9a:	52                   	push   edx
c0025b9b:	50                   	push   eax
c0025b9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b9f:	e8 e4 fe ff ff       	call   c0025a88 <IOAPIC::write(int, int)>
c0025ba4:	83 c4 0c             	add    esp,0xc
c0025ba7:	90                   	nop
c0025ba8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025bab:	c9                   	leave  
c0025bac:	c3                   	ret    
c0025bad:	90                   	nop

c0025bae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025bae:	55                   	push   ebp
c0025baf:	89 e5                	mov    ebp,esp
c0025bb1:	57                   	push   edi
c0025bb2:	56                   	push   esi
c0025bb3:	53                   	push   ebx
c0025bb4:	83 ec 2c             	sub    esp,0x2c
c0025bb7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bba:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bbd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025bc1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025bc5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025bc9:	74 5a                	je     c0025c25 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025bcb:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025bcf:	7f 44                	jg     c0025c15 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025bd1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bd4:	05 e0 cf 02 c0       	add    eax,0xc002cfe0
c0025bd9:	8a 00                	mov    al,BYTE PTR [eax]
c0025bdb:	0f b6 c0             	movzx  eax,al
c0025bde:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025be1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025be4:	66 8b 84 00 c0 e6 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1940]
c0025bec:	0f b7 c0             	movzx  eax,ax
c0025bef:	83 e0 02             	and    eax,0x2
c0025bf2:	85 c0                	test   eax,eax
c0025bf4:	74 04                	je     c0025bfa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025bf6:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025bfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bfd:	66 8b 84 00 c0 e6 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1940]
c0025c05:	0f b7 c0             	movzx  eax,ax
c0025c08:	83 e0 08             	and    eax,0x8
c0025c0b:	85 c0                	test   eax,eax
c0025c0d:	74 16                	je     c0025c25 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c0f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c13:	eb 10                	jmp    c0025c25 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c15:	83 ec 0c             	sub    esp,0xc
c0025c18:	68 3c c9 02 c0       	push   0xc002c93c
c0025c1d:	e8 57 43 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0025c22:	83 c4 10             	add    esp,0x10
c0025c25:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025c29:	a1 c0 00 03 c0       	mov    eax,ds:0xc00300c0
c0025c2e:	83 ec 08             	sub    esp,0x8
c0025c31:	50                   	push   eax
c0025c32:	68 74 c9 02 c0       	push   0xc002c974
c0025c37:	e8 61 cb fe ff       	call   c001279d <Dbg::kprintf(char const*, ...)>
c0025c3c:	83 c4 10             	add    esp,0x10
c0025c3f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025c46:	a1 c0 00 03 c0       	mov    eax,ds:0xc00300c0
c0025c4b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025c4e:	7d 67                	jge    c0025cb7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c50:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c53:	8b 04 85 e0 00 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcff20]
c0025c5a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c5d:	83 ec 08             	sub    esp,0x8
c0025c60:	52                   	push   edx
c0025c61:	50                   	push   eax
c0025c62:	e8 d1 fc ff ff       	call   c0025938 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025c67:	83 c4 10             	add    esp,0x10
c0025c6a:	84 c0                	test   al,al
c0025c6c:	74 44                	je     c0025cb2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025c6e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c71:	8b 1c 85 e0 00 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcff20]
c0025c78:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025c7c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c7f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025c83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c86:	83 c0 20             	add    eax,0x20
c0025c89:	0f b6 f0             	movzx  esi,al
c0025c8c:	b8 00 00 00 00       	mov    eax,0x0
c0025c91:	99                   	cdq    
c0025c92:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025c95:	0f b6 c9             	movzx  ecx,cl
c0025c98:	83 ec 04             	sub    esp,0x4
c0025c9b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025c9e:	57                   	push   edi
c0025c9f:	56                   	push   esi
c0025ca0:	52                   	push   edx
c0025ca1:	50                   	push   eax
c0025ca2:	51                   	push   ecx
c0025ca3:	53                   	push   ebx
c0025ca4:	e8 0b fe ff ff       	call   c0025ab4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025ca9:	83 c4 20             	add    esp,0x20
c0025cac:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025cb0:	eb 05                	jmp    c0025cb7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025cb2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025cb5:	eb 8f                	jmp    c0025c46 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025cb7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025cba:	83 f0 01             	xor    eax,0x1
c0025cbd:	84 c0                	test   al,al
c0025cbf:	74 10                	je     c0025cd1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025cc1:	83 ec 0c             	sub    esp,0xc
c0025cc4:	68 8b c9 02 c0       	push   0xc002c98b
c0025cc9:	e8 ab 42 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0025cce:	83 c4 10             	add    esp,0x10
c0025cd1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025cd5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025cdc:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025ce0:	7f 65                	jg     c0025d47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ce5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ce8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025cef:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025cf2:	01 ca                	add    edx,ecx
c0025cf4:	83 c2 54             	add    edx,0x54
c0025cf7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025cfb:	85 c0                	test   eax,eax
c0025cfd:	75 43                	jne    c0025d42 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d02:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d05:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d0c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d0f:	01 ca                	add    edx,ecx
c0025d11:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025d14:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025d17:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d1e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d21:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d28:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d2b:	01 ca                	add    edx,ecx
c0025d2d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025d33:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025d36:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d3d:	83 e8 20             	sub    eax,0x20
c0025d40:	eb 1a                	jmp    c0025d5c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025d42:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025d45:	eb 95                	jmp    c0025cdc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025d47:	83 ec 0c             	sub    esp,0xc
c0025d4a:	68 98 c9 02 c0       	push   0xc002c998
c0025d4f:	e8 25 42 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0025d54:	83 c4 10             	add    esp,0x10
c0025d57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025d5c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d5f:	5b                   	pop    ebx
c0025d60:	5e                   	pop    esi
c0025d61:	5f                   	pop    edi
c0025d62:	5d                   	pop    ebp
c0025d63:	c3                   	ret    

c0025d64 <PIC::disable()>:
c0025d64:	55                   	push   ebp
c0025d65:	89 e5                	mov    ebp,esp
c0025d67:	83 ec 10             	sub    esp,0x10
c0025d6a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025d70:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025d74:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d77:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d7b:	ee                   	out    dx,al
c0025d7c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025d82:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025d86:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d89:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025d8d:	ee                   	out    dx,al
c0025d8e:	90                   	nop
c0025d8f:	c9                   	leave  
c0025d90:	c3                   	ret    
c0025d91:	90                   	nop

c0025d92 <PIC::close(int, int, void*)>:
c0025d92:	55                   	push   ebp
c0025d93:	89 e5                	mov    ebp,esp
c0025d95:	83 ec 08             	sub    esp,0x8
c0025d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d9d:	83 c0 3c             	add    eax,0x3c
c0025da0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025da2:	83 ec 0c             	sub    esp,0xc
c0025da5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025da8:	ff d0                	call   eax
c0025daa:	83 c4 10             	add    esp,0x10
c0025dad:	b8 00 00 00 00       	mov    eax,0x0
c0025db2:	c9                   	leave  
c0025db3:	c3                   	ret    

c0025db4 <PIC::PIC()>:
c0025db4:	83 ec 0c             	sub    esp,0xc
c0025db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dbb:	83 ec 08             	sub    esp,0x8
c0025dbe:	68 44 ca 02 c0       	push   0xc002ca44
c0025dc3:	50                   	push   eax
c0025dc4:	e8 7b e7 fe ff       	call   c0014544 <InterruptController::InterruptController(char const*)>
c0025dc9:	83 c4 10             	add    esp,0x10
c0025dcc:	ba 70 ca 02 c0       	mov    edx,0xc002ca70
c0025dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd5:	89 10                	mov    DWORD PTR [eax],edx
c0025dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ddb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025de1:	0f b6 d0             	movzx  edx,al
c0025de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025de8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025df9:	0f b6 d0             	movzx  edx,al
c0025dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e00:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e0f:	8d 50 01             	lea    edx,[eax+0x1]
c0025e12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e16:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e1c:	0f b6 d0             	movzx  edx,al
c0025e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e23:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e27:	83 e1 3f             	and    ecx,0x3f
c0025e2a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e32:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e38:	0f b6 d0             	movzx  edx,al
c0025e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e3f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e50:	0f b6 d0             	movzx  edx,al
c0025e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e57:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e60:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e66:	8d 50 01             	lea    edx,[eax+0x1]
c0025e69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e6d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e73:	0f b6 d0             	movzx  edx,al
c0025e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e7a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e7e:	83 e1 3f             	and    ecx,0x3f
c0025e81:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e85:	90                   	nop
c0025e86:	83 c4 0c             	add    esp,0xc
c0025e89:	c3                   	ret    

c0025e8a <PIC::ioWait()>:
c0025e8a:	eb 00                	jmp    c0025e8c <PIC::ioWait()+0x2>
c0025e8c:	eb 00                	jmp    c0025e8e <PIC::ioWait()+0x4>
c0025e8e:	90                   	nop
c0025e8f:	c3                   	ret    

c0025e90 <PIC::getIRQReg(int)>:
c0025e90:	55                   	push   ebp
c0025e91:	89 e5                	mov    ebp,esp
c0025e93:	83 ec 10             	sub    esp,0x10
c0025e96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e99:	0f b6 c0             	movzx  eax,al
c0025e9c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025ea2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025ea5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ea8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025eac:	ee                   	out    dx,al
c0025ead:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025eb0:	0f b6 c0             	movzx  eax,al
c0025eb3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025eb9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025ebc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ebf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ec3:	ee                   	out    dx,al
c0025ec4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025eca:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025ece:	89 c2                	mov    edx,eax
c0025ed0:	ec                   	in     al,dx
c0025ed1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025ed4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ed7:	0f b6 c0             	movzx  eax,al
c0025eda:	c1 e0 08             	shl    eax,0x8
c0025edd:	89 c1                	mov    ecx,eax
c0025edf:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025ee5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025ee9:	89 c2                	mov    edx,eax
c0025eeb:	ec                   	in     al,dx
c0025eec:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025eef:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ef2:	0f b6 c0             	movzx  eax,al
c0025ef5:	09 c8                	or     eax,ecx
c0025ef7:	c9                   	leave  
c0025ef8:	c3                   	ret    
c0025ef9:	90                   	nop

c0025efa <PIC::eoi(unsigned char)>:
c0025efa:	55                   	push   ebp
c0025efb:	89 e5                	mov    ebp,esp
c0025efd:	83 ec 14             	sub    esp,0x14
c0025f00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f03:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025f06:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f0a:	75 1e                	jne    c0025f2a <PIC::eoi(unsigned char)+0x30>
c0025f0c:	6a 0b                	push   0xb
c0025f0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f11:	e8 7a ff ff ff       	call   c0025e90 <PIC::getIRQReg(int)>
c0025f16:	83 c4 08             	add    esp,0x8
c0025f19:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025f1d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025f21:	25 80 00 00 00       	and    eax,0x80
c0025f26:	85 c0                	test   eax,eax
c0025f28:	74 5f                	je     c0025f89 <PIC::eoi(unsigned char)+0x8f>
c0025f2a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025f2e:	75 2d                	jne    c0025f5d <PIC::eoi(unsigned char)+0x63>
c0025f30:	6a 0b                	push   0xb
c0025f32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f35:	e8 56 ff ff ff       	call   c0025e90 <PIC::getIRQReg(int)>
c0025f3a:	83 c4 08             	add    esp,0x8
c0025f3d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025f41:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f44:	66 85 c0             	test   ax,ax
c0025f47:	78 14                	js     c0025f5d <PIC::eoi(unsigned char)+0x63>
c0025f49:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025f4f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025f53:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f56:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f5a:	ee                   	out    dx,al
c0025f5b:	eb 2d                	jmp    c0025f8a <PIC::eoi(unsigned char)+0x90>
c0025f5d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f61:	76 12                	jbe    c0025f75 <PIC::eoi(unsigned char)+0x7b>
c0025f63:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f69:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025f6d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f70:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f74:	ee                   	out    dx,al
c0025f75:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f7b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025f7f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f82:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f86:	ee                   	out    dx,al
c0025f87:	eb 01                	jmp    c0025f8a <PIC::eoi(unsigned char)+0x90>
c0025f89:	90                   	nop
c0025f8a:	c9                   	leave  
c0025f8b:	c3                   	ret    

c0025f8c <PIC::remap()>:
c0025f8c:	55                   	push   ebp
c0025f8d:	89 e5                	mov    ebp,esp
c0025f8f:	83 ec 48             	sub    esp,0x48
c0025f92:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025f99:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025fa0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025fa6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025fa9:	89 c2                	mov    edx,eax
c0025fab:	ec                   	in     al,dx
c0025fac:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025faf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025fb2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025fb5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025fbb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025fbe:	89 c2                	mov    edx,eax
c0025fc0:	ec                   	in     al,dx
c0025fc1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025fc4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025fc7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025fca:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025fd0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025fd4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025fd7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025fda:	ee                   	out    dx,al
c0025fdb:	83 ec 0c             	sub    esp,0xc
c0025fde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe1:	e8 a4 fe ff ff       	call   c0025e8a <PIC::ioWait()>
c0025fe6:	83 c4 10             	add    esp,0x10
c0025fe9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025fef:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025ff3:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025ff6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025ff9:	ee                   	out    dx,al
c0025ffa:	83 ec 0c             	sub    esp,0xc
c0025ffd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026000:	e8 85 fe ff ff       	call   c0025e8a <PIC::ioWait()>
c0026005:	83 c4 10             	add    esp,0x10
c0026008:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002600b:	0f b6 c0             	movzx  eax,al
c002600e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026014:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026017:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002601a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002601d:	ee                   	out    dx,al
c002601e:	83 ec 0c             	sub    esp,0xc
c0026021:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026024:	e8 61 fe ff ff       	call   c0025e8a <PIC::ioWait()>
c0026029:	83 c4 10             	add    esp,0x10
c002602c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002602f:	0f b6 c0             	movzx  eax,al
c0026032:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026038:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002603b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002603e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026041:	ee                   	out    dx,al
c0026042:	83 ec 0c             	sub    esp,0xc
c0026045:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026048:	e8 3d fe ff ff       	call   c0025e8a <PIC::ioWait()>
c002604d:	83 c4 10             	add    esp,0x10
c0026050:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026056:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002605a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002605d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026060:	ee                   	out    dx,al
c0026061:	83 ec 0c             	sub    esp,0xc
c0026064:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026067:	e8 1e fe ff ff       	call   c0025e8a <PIC::ioWait()>
c002606c:	83 c4 10             	add    esp,0x10
c002606f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026075:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026079:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002607c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002607f:	ee                   	out    dx,al
c0026080:	83 ec 0c             	sub    esp,0xc
c0026083:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026086:	e8 ff fd ff ff       	call   c0025e8a <PIC::ioWait()>
c002608b:	83 c4 10             	add    esp,0x10
c002608e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026094:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026098:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002609b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002609e:	ee                   	out    dx,al
c002609f:	83 ec 0c             	sub    esp,0xc
c00260a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a5:	e8 e0 fd ff ff       	call   c0025e8a <PIC::ioWait()>
c00260aa:	83 c4 10             	add    esp,0x10
c00260ad:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00260b3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00260b7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00260ba:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00260bd:	ee                   	out    dx,al
c00260be:	83 ec 0c             	sub    esp,0xc
c00260c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c4:	e8 c1 fd ff ff       	call   c0025e8a <PIC::ioWait()>
c00260c9:	83 c4 10             	add    esp,0x10
c00260cc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00260d0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00260d6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00260d9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00260dc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00260df:	ee                   	out    dx,al
c00260e0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00260e4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00260ea:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00260ed:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00260f0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00260f3:	ee                   	out    dx,al
c00260f4:	90                   	nop
c00260f5:	c9                   	leave  
c00260f6:	c3                   	ret    
c00260f7:	90                   	nop

c00260f8 <PIC::open(int, int, void*)>:
c00260f8:	55                   	push   ebp
c00260f9:	89 e5                	mov    ebp,esp
c00260fb:	83 ec 18             	sub    esp,0x18
c00260fe:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026104:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026108:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002610b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002610f:	ee                   	out    dx,al
c0026110:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026116:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002611a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002611d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026121:	ee                   	out    dx,al
c0026122:	83 ec 0c             	sub    esp,0xc
c0026125:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026128:	e8 5f fe ff ff       	call   c0025f8c <PIC::remap()>
c002612d:	83 c4 10             	add    esp,0x10
c0026130:	b8 00 00 00 00       	mov    eax,0x0
c0026135:	c9                   	leave  
c0026136:	c3                   	ret    
c0026137:	90                   	nop

c0026138 <APICTimer::close(int, int, void*)>:
c0026138:	b8 00 00 00 00       	mov    eax,0x0
c002613d:	c3                   	ret    

c002613e <apicTimerHandler(regs*, void*)>:
c002613e:	83 ec 0c             	sub    esp,0xc
c0026141:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026145:	8b 00                	mov    eax,DWORD PTR [eax]
c0026147:	99                   	cdq    
c0026148:	52                   	push   edx
c0026149:	50                   	push   eax
c002614a:	6a 00                	push   0x0
c002614c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026151:	e8 8e 07 00 00       	call   c00268e4 <__udivdi3>
c0026156:	83 c4 10             	add    esp,0x10
c0026159:	83 ec 08             	sub    esp,0x8
c002615c:	52                   	push   edx
c002615d:	50                   	push   eax
c002615e:	e8 3e 05 ff ff       	call   c00166a1 <timerHandler(unsigned long long)>
c0026163:	83 c4 10             	add    esp,0x10
c0026166:	90                   	nop
c0026167:	83 c4 0c             	add    esp,0xc
c002616a:	c3                   	ret    
c002616b:	90                   	nop

c002616c <APICTimer::write(int)>:
c002616c:	53                   	push   ebx
c002616d:	83 ec 28             	sub    esp,0x28
c0026170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026174:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026178:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002617e:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0026183:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026189:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002618f:	83 ec 0c             	sub    esp,0xc
c0026192:	50                   	push   eax
c0026193:	e8 de f4 ff ff       	call   c0025676 <APIC::getBase()>
c0026198:	83 c4 10             	add    esp,0x10
c002619b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002619f:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c00261a4:	8b 15 f4 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3f4
c00261aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00261ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00261b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261b6:	05 e0 03 00 00       	add    eax,0x3e0
c00261bb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00261c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261c5:	05 80 03 00 00       	add    eax,0x380
c00261ca:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00261d0:	fb                   	sti    
c00261d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00261d9:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00261de:	83 d2 00             	adc    edx,0x0
c00261e1:	89 c1                	mov    ecx,eax
c00261e3:	89 d3                	mov    ebx,edx
c00261e5:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c00261ea:	8b 15 f4 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3f4
c00261f0:	39 c8                	cmp    eax,ecx
c00261f2:	89 d0                	mov    eax,edx
c00261f4:	19 d8                	sbb    eax,ebx
c00261f6:	73 02                	jae    c00261fa <APICTimer::write(int)+0x8e>
c00261f8:	eb d7                	jmp    c00261d1 <APICTimer::write(int)+0x65>
c00261fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261fe:	05 20 03 00 00       	add    eax,0x320
c0026203:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026209:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002620d:	05 90 03 00 00       	add    eax,0x390
c0026212:	8b 00                	mov    eax,DWORD PTR [eax]
c0026214:	f7 d0                	not    eax
c0026216:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002621a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002621e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026222:	ba 00 00 00 00       	mov    edx,0x0
c0026227:	f7 f3                	div    ebx
c0026229:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002622d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026231:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026237:	0d 00 00 02 00       	or     eax,0x20000
c002623c:	89 c2                	mov    edx,eax
c002623e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026242:	05 20 03 00 00       	add    eax,0x320
c0026247:	89 10                	mov    DWORD PTR [eax],edx
c0026249:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002624d:	05 e0 03 00 00       	add    eax,0x3e0
c0026252:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026258:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002625c:	05 80 03 00 00       	add    eax,0x380
c0026261:	89 c2                	mov    edx,eax
c0026263:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026267:	89 02                	mov    DWORD PTR [edx],eax
c0026269:	90                   	nop
c002626a:	83 c4 28             	add    esp,0x28
c002626d:	5b                   	pop    ebx
c002626e:	c3                   	ret    
c002626f:	90                   	nop

c0026270 <APICTimer::open(int, int, void*)>:
c0026270:	57                   	push   edi
c0026271:	56                   	push   esi
c0026272:	53                   	push   ebx
c0026273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026277:	8b 00                	mov    eax,DWORD PTR [eax]
c0026279:	83 c0 24             	add    eax,0x24
c002627c:	8b 00                	mov    eax,DWORD PTR [eax]
c002627e:	83 ec 08             	sub    esp,0x8
c0026281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026289:	ff d0                	call   eax
c002628b:	83 c4 10             	add    esp,0x10
c002628e:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c0026293:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026299:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002629f:	83 ec 0c             	sub    esp,0xc
c00262a2:	50                   	push   eax
c00262a3:	e8 ce f3 ff ff       	call   c0025676 <APIC::getBase()>
c00262a8:	83 c4 10             	add    esp,0x10
c00262ab:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00262b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262bb:	0f b6 f8             	movzx  edi,al
c00262be:	89 d0                	mov    eax,edx
c00262c0:	ba 00 00 00 00       	mov    edx,0x0
c00262c5:	89 c1                	mov    ecx,eax
c00262c7:	80 e5 ff             	and    ch,0xff
c00262ca:	89 cb                	mov    ebx,ecx
c00262cc:	0f b6 f2             	movzx  esi,dl
c00262cf:	89 d8                	mov    eax,ebx
c00262d1:	89 f2                	mov    edx,esi
c00262d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262d7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262da:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262de:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262e2:	83 e0 00             	and    eax,0x0
c00262e5:	09 d0                	or     eax,edx
c00262e7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ef:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262f5:	8d 50 01             	lea    edx,[eax+0x1]
c00262f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262fc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026302:	0f b6 d0             	movzx  edx,al
c0026305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026309:	83 c2 08             	add    edx,0x8
c002630c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026310:	0f b6 c9             	movzx  ecx,cl
c0026313:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026319:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002631d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026321:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026325:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002632b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002632f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026333:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026339:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002633d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026343:	83 ec 0c             	sub    esp,0xc
c0026346:	51                   	push   ecx
c0026347:	6a 01                	push   0x1
c0026349:	68 3e 61 02 c0       	push   0xc002613e
c002634e:	52                   	push   edx
c002634f:	50                   	push   eax
c0026350:	e8 f9 d7 fe ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026355:	83 c4 20             	add    esp,0x20
c0026358:	89 c2                	mov    edx,eax
c002635a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002635e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026364:	b8 00 00 00 00       	mov    eax,0x0
c0026369:	5b                   	pop    ebx
c002636a:	5e                   	pop    esi
c002636b:	5f                   	pop    edi
c002636c:	c3                   	ret    
c002636d:	90                   	nop

c002636e <APICTimer::APICTimer()>:
c002636e:	83 ec 0c             	sub    esp,0xc
c0026371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026375:	83 ec 08             	sub    esp,0x8
c0026378:	68 b0 ca 02 c0       	push   0xc002cab0
c002637d:	50                   	push   eax
c002637e:	e8 8f 02 ff ff       	call   c0016612 <Timer::Timer(char const*)>
c0026383:	83 c4 10             	add    esp,0x10
c0026386:	ba c4 ca 02 c0       	mov    edx,0xc002cac4
c002638b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002638f:	89 10                	mov    DWORD PTR [eax],edx
c0026391:	90                   	nop
c0026392:	83 c4 0c             	add    esp,0xc
c0026395:	c3                   	ret    

c0026396 <PIT::write(int)>:
c0026396:	83 ec 10             	sub    esp,0x10
c0026399:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263a1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00263a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00263ab:	a3 04 01 03 c0       	mov    ds:0xc0030104,eax
c00263b0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00263b5:	99                   	cdq    
c00263b6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00263ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263be:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00263c5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00263ca:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00263ce:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00263d3:	ee                   	out    dx,al
c00263d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263d8:	0f b6 c0             	movzx  eax,al
c00263db:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00263e2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00263e6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00263ea:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00263ef:	ee                   	out    dx,al
c00263f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263f4:	c1 f8 08             	sar    eax,0x8
c00263f7:	0f b6 c0             	movzx  eax,al
c00263fa:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026401:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026405:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026409:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002640e:	ee                   	out    dx,al
c002640f:	90                   	nop
c0026410:	83 c4 10             	add    esp,0x10
c0026413:	c3                   	ret    

c0026414 <pitHandler(regs*, void*)>:
c0026414:	83 ec 0c             	sub    esp,0xc
c0026417:	a1 04 01 03 c0       	mov    eax,ds:0xc0030104
c002641c:	99                   	cdq    
c002641d:	52                   	push   edx
c002641e:	50                   	push   eax
c002641f:	6a 00                	push   0x0
c0026421:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026426:	e8 b9 04 00 00       	call   c00268e4 <__udivdi3>
c002642b:	83 c4 10             	add    esp,0x10
c002642e:	83 ec 08             	sub    esp,0x8
c0026431:	52                   	push   edx
c0026432:	50                   	push   eax
c0026433:	e8 69 02 ff ff       	call   c00166a1 <timerHandler(unsigned long long)>
c0026438:	83 c4 10             	add    esp,0x10
c002643b:	90                   	nop
c002643c:	83 c4 0c             	add    esp,0xc
c002643f:	c3                   	ret    

c0026440 <PIT::open(int, int, void*)>:
c0026440:	83 ec 0c             	sub    esp,0xc
c0026443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026447:	8b 00                	mov    eax,DWORD PTR [eax]
c0026449:	83 c0 24             	add    eax,0x24
c002644c:	8b 00                	mov    eax,DWORD PTR [eax]
c002644e:	83 ec 08             	sub    esp,0x8
c0026451:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026459:	ff d0                	call   eax
c002645b:	83 c4 10             	add    esp,0x10
c002645e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026462:	83 ec 0c             	sub    esp,0xc
c0026465:	6a 00                	push   0x0
c0026467:	6a 01                	push   0x1
c0026469:	68 14 64 02 c0       	push   0xc0026414
c002646e:	6a 00                	push   0x0
c0026470:	50                   	push   eax
c0026471:	e8 d8 d6 fe ff       	call   c0013b4e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026476:	83 c4 20             	add    esp,0x20
c0026479:	89 c2                	mov    edx,eax
c002647b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026485:	b8 00 00 00 00       	mov    eax,0x0
c002648a:	83 c4 0c             	add    esp,0xc
c002648d:	c3                   	ret    

c002648e <PIT::close(int, int, void*)>:
c002648e:	83 ec 0c             	sub    esp,0xc
c0026491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026495:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002649f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a3:	6a 01                	push   0x1
c00264a5:	68 14 64 02 c0       	push   0xc0026414
c00264aa:	6a 00                	push   0x0
c00264ac:	50                   	push   eax
c00264ad:	e8 e6 d6 fe ff       	call   c0013b98 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00264b2:	83 c4 10             	add    esp,0x10
c00264b5:	b8 00 00 00 00       	mov    eax,0x0
c00264ba:	83 c4 0c             	add    esp,0xc
c00264bd:	c3                   	ret    

c00264be <PIT::PIT()>:
c00264be:	83 ec 0c             	sub    esp,0xc
c00264c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c5:	83 ec 08             	sub    esp,0x8
c00264c8:	68 ec ca 02 c0       	push   0xc002caec
c00264cd:	50                   	push   eax
c00264ce:	e8 3f 01 ff ff       	call   c0016612 <Timer::Timer(char const*)>
c00264d3:	83 c4 10             	add    esp,0x10
c00264d6:	ba 14 cb 02 c0       	mov    edx,0xc002cb14
c00264db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264df:	89 10                	mov    DWORD PTR [eax],edx
c00264e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264eb:	0f b6 d0             	movzx  edx,al
c00264ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f2:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00264f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026503:	0f b6 d0             	movzx  edx,al
c0026506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002650f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026513:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026519:	8d 50 01             	lea    edx,[eax+0x1]
c002651c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026520:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026526:	0f b6 d0             	movzx  edx,al
c0026529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002652d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026531:	83 e1 3f             	and    ecx,0x3f
c0026534:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026538:	90                   	nop
c0026539:	83 c4 0c             	add    esp,0xc
c002653c:	c3                   	ret    
c002653d:	66 90                	xchg   ax,ax
c002653f:	90                   	nop

c0026540 <avxDetect>:
c0026540:	b8 00 00 00 00       	mov    eax,0x0
c0026545:	c3                   	ret    

c0026546 <avxSave>:
c0026546:	c3                   	ret    

c0026547 <avxLoad>:
c0026547:	c3                   	ret    

c0026548 <avxInit>:
c0026548:	c3                   	ret    

c0026549 <avxClose>:
c0026549:	c3                   	ret    

c002654a <wouldSheSayYes>:
c002654a:	c3                   	ret    
c002654b:	49                   	dec    ecx
c002654c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026550:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026554:	75 20                	jne    c0026576 <sseDetect.noSSE+0x1>
c0026556:	4e                   	dec    esi
c0026557:	79 61                	jns    c00265ba <x87Detect+0x14>
c0026559:	68 2e 2e 2e 00       	push   0x2e2e2e
c002655e:	66 90                	xchg   ax,ax

c0026560 <absolutelyNoChanceInHell>:
c0026560:	b8 01 00 00 00       	mov    eax,0x1
c0026565:	0f a2                	cpuid  
c0026567:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002656d:	74 06                	je     c0026575 <sseDetect.noSSE>
c002656f:	b8 01 00 00 00       	mov    eax,0x1
c0026574:	c3                   	ret    

c0026575 <sseDetect.noSSE>:
c0026575:	31 c0                	xor    eax,eax
c0026577:	c3                   	ret    

c0026578 <sseSave>:
c0026578:	0f ae 44 24 04       	fxsave [esp+0x4]
c002657d:	c3                   	ret    

c002657e <sseLoad>:
c002657e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026583:	c3                   	ret    

c0026584 <sseInit>:
c0026584:	e8 49 00 00 00       	call   c00265d2 <x87Init>
c0026589:	0f 20 e0             	mov    eax,cr4
c002658c:	66 0d 00 06          	or     ax,0x600
c0026590:	0f 22 e0             	mov    cr4,eax
c0026593:	c3                   	ret    

c0026594 <sseClose>:
c0026594:	c3                   	ret    
c0026595:	66 90                	xchg   ax,ax
c0026597:	66 90                	xchg   ax,ax
c0026599:	66 90                	xchg   ax,ax
c002659b:	66 90                	xchg   ax,ax
c002659d:	66 90                	xchg   ax,ax
c002659f:	90                   	nop

c00265a0 <value_37F>:
c00265a0:	7f 03                	jg     c00265a5 <value_37A+0x1>

c00265a2 <value_37E>:
c00265a2:	7e 03                	jle    c00265a7 <x87Detect+0x1>

c00265a4 <value_37A>:
c00265a4:	7a 03                	jp     c00265a9 <x87Detect+0x3>

c00265a6 <x87Detect>:
c00265a6:	b8 01 00 00 00       	mov    eax,0x1
c00265ab:	0f a2                	cpuid  
c00265ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00265b3:	74 06                	je     c00265bb <x87Detect.nox87>
c00265b5:	b8 01 00 00 00       	mov    eax,0x1
c00265ba:	c3                   	ret    

c00265bb <x87Detect.nox87>:
c00265bb:	b8 00 00 00 00       	mov    eax,0x0
c00265c0:	c3                   	ret    

c00265c1 <x87Save>:
c00265c1:	55                   	push   ebp
c00265c2:	89 e5                	mov    ebp,esp
c00265c4:	9b dd 75 08          	fsave  [ebp+0x8]
c00265c8:	c9                   	leave  
c00265c9:	c3                   	ret    

c00265ca <x87Load>:
c00265ca:	55                   	push   ebp
c00265cb:	89 e5                	mov    ebp,esp
c00265cd:	dd 65 08             	frstor [ebp+0x8]
c00265d0:	c9                   	leave  
c00265d1:	c3                   	ret    

c00265d2 <x87Init>:
c00265d2:	9b db e3             	finit  
c00265d5:	0f 20 c0             	mov    eax,cr0
c00265d8:	66 25 fb ff          	and    ax,0xfffb
c00265dc:	66 0d 22 00          	or     ax,0x22
c00265e0:	0f 22 c0             	mov    cr0,eax
c00265e3:	0f 06                	clts   
c00265e5:	d9 2d a4 65 02 c0    	fldcw  WORD PTR ds:0xc00265a4
c00265eb:	c3                   	ret    

c00265ec <x87Close>:
c00265ec:	c3                   	ret    
c00265ed:	66 90                	xchg   ax,ax
c00265ef:	90                   	nop

c00265f0 <__do_global_ctors_aux>:
c00265f0:	a1 e4 91 02 c0       	mov    eax,ds:0xc00291e4
c00265f5:	83 f8 ff             	cmp    eax,0xffffffff
c00265f8:	74 1a                	je     c0026614 <__do_global_ctors_aux+0x24>
c00265fa:	55                   	push   ebp
c00265fb:	89 e5                	mov    ebp,esp
c00265fd:	53                   	push   ebx
c00265fe:	52                   	push   edx
c00265ff:	bb e4 91 02 c0       	mov    ebx,0xc00291e4
c0026604:	ff d0                	call   eax
c0026606:	83 eb 04             	sub    ebx,0x4
c0026609:	8b 03                	mov    eax,DWORD PTR [ebx]
c002660b:	83 f8 ff             	cmp    eax,0xffffffff
c002660e:	75 f4                	jne    c0026604 <__do_global_ctors_aux+0x14>
c0026610:	58                   	pop    eax
c0026611:	5b                   	pop    ebx
c0026612:	5d                   	pop    ebp
c0026613:	c3                   	ret    
c0026614:	c3                   	ret    
c0026615:	66 90                	xchg   ax,ax
c0026617:	90                   	nop

c0026618 <__divdi3>:
c0026618:	55                   	push   ebp
c0026619:	57                   	push   edi
c002661a:	56                   	push   esi
c002661b:	53                   	push   ebx
c002661c:	83 ec 1c             	sub    esp,0x1c
c002661f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026623:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026627:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002662a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002662e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026632:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026636:	85 db                	test   ebx,ebx
c0026638:	0f 88 8e 00 00 00    	js     c00266cc <__divdi3+0xb4>
c002663e:	89 dd                	mov    ebp,ebx
c0026640:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026648:	89 d3                	mov    ebx,edx
c002664a:	85 d2                	test   edx,edx
c002664c:	79 0d                	jns    c002665b <__divdi3+0x43>
c002664e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026652:	f7 d8                	neg    eax
c0026654:	83 d2 00             	adc    edx,0x0
c0026657:	f7 da                	neg    edx
c0026659:	89 d3                	mov    ebx,edx
c002665b:	89 c7                	mov    edi,eax
c002665d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026660:	85 db                	test   ebx,ebx
c0026662:	75 48                	jne    c00266ac <__divdi3+0x94>
c0026664:	39 ef                	cmp    edi,ebp
c0026666:	76 24                	jbe    c002668c <__divdi3+0x74>
c0026668:	89 ea                	mov    edx,ebp
c002666a:	f7 f7                	div    edi
c002666c:	89 c1                	mov    ecx,eax
c002666e:	31 f6                	xor    esi,esi
c0026670:	89 c8                	mov    eax,ecx
c0026672:	89 f2                	mov    edx,esi
c0026674:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026678:	85 c9                	test   ecx,ecx
c002667a:	74 07                	je     c0026683 <__divdi3+0x6b>
c002667c:	f7 d8                	neg    eax
c002667e:	83 d2 00             	adc    edx,0x0
c0026681:	f7 da                	neg    edx
c0026683:	83 c4 1c             	add    esp,0x1c
c0026686:	5b                   	pop    ebx
c0026687:	5e                   	pop    esi
c0026688:	5f                   	pop    edi
c0026689:	5d                   	pop    ebp
c002668a:	c3                   	ret    
c002668b:	90                   	nop
c002668c:	85 ff                	test   edi,edi
c002668e:	75 0b                	jne    c002669b <__divdi3+0x83>
c0026690:	b8 01 00 00 00       	mov    eax,0x1
c0026695:	31 d2                	xor    edx,edx
c0026697:	f7 f3                	div    ebx
c0026699:	89 c7                	mov    edi,eax
c002669b:	31 d2                	xor    edx,edx
c002669d:	89 e8                	mov    eax,ebp
c002669f:	f7 f7                	div    edi
c00266a1:	89 c6                	mov    esi,eax
c00266a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266a6:	f7 f7                	div    edi
c00266a8:	89 c1                	mov    ecx,eax
c00266aa:	eb c4                	jmp    c0026670 <__divdi3+0x58>
c00266ac:	39 eb                	cmp    ebx,ebp
c00266ae:	77 3c                	ja     c00266ec <__divdi3+0xd4>
c00266b0:	0f bd f3             	bsr    esi,ebx
c00266b3:	83 f6 1f             	xor    esi,0x1f
c00266b6:	75 40                	jne    c00266f8 <__divdi3+0xe0>
c00266b8:	39 eb                	cmp    ebx,ebp
c00266ba:	72 09                	jb     c00266c5 <__divdi3+0xad>
c00266bc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00266bf:	0f 87 97 00 00 00    	ja     c002675c <__divdi3+0x144>
c00266c5:	b9 01 00 00 00       	mov    ecx,0x1
c00266ca:	eb a4                	jmp    c0026670 <__divdi3+0x58>
c00266cc:	f7 d9                	neg    ecx
c00266ce:	83 d3 00             	adc    ebx,0x0
c00266d1:	f7 db                	neg    ebx
c00266d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266da:	89 dd                	mov    ebp,ebx
c00266dc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00266e4:	e9 5f ff ff ff       	jmp    c0026648 <__divdi3+0x30>
c00266e9:	8d 76 00             	lea    esi,[esi+0x0]
c00266ec:	31 f6                	xor    esi,esi
c00266ee:	31 c9                	xor    ecx,ecx
c00266f0:	e9 7b ff ff ff       	jmp    c0026670 <__divdi3+0x58>
c00266f5:	8d 76 00             	lea    esi,[esi+0x0]
c00266f8:	b8 20 00 00 00       	mov    eax,0x20
c00266fd:	29 f0                	sub    eax,esi
c00266ff:	89 f1                	mov    ecx,esi
c0026701:	d3 e3                	shl    ebx,cl
c0026703:	89 fa                	mov    edx,edi
c0026705:	88 c1                	mov    cl,al
c0026707:	d3 ea                	shr    edx,cl
c0026709:	09 da                	or     edx,ebx
c002670b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002670f:	89 f1                	mov    ecx,esi
c0026711:	d3 e7                	shl    edi,cl
c0026713:	89 eb                	mov    ebx,ebp
c0026715:	88 c1                	mov    cl,al
c0026717:	d3 eb                	shr    ebx,cl
c0026719:	89 f1                	mov    ecx,esi
c002671b:	d3 e5                	shl    ebp,cl
c002671d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026720:	88 c1                	mov    cl,al
c0026722:	d3 ea                	shr    edx,cl
c0026724:	09 d5                	or     ebp,edx
c0026726:	89 e8                	mov    eax,ebp
c0026728:	89 da                	mov    edx,ebx
c002672a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002672e:	89 d3                	mov    ebx,edx
c0026730:	89 c5                	mov    ebp,eax
c0026732:	f7 e7                	mul    edi
c0026734:	39 d3                	cmp    ebx,edx
c0026736:	72 18                	jb     c0026750 <__divdi3+0x138>
c0026738:	74 0a                	je     c0026744 <__divdi3+0x12c>
c002673a:	89 e9                	mov    ecx,ebp
c002673c:	31 f6                	xor    esi,esi
c002673e:	e9 2d ff ff ff       	jmp    c0026670 <__divdi3+0x58>
c0026743:	90                   	nop
c0026744:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026747:	89 f1                	mov    ecx,esi
c0026749:	d3 e7                	shl    edi,cl
c002674b:	39 c7                	cmp    edi,eax
c002674d:	73 eb                	jae    c002673a <__divdi3+0x122>
c002674f:	90                   	nop
c0026750:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026753:	31 f6                	xor    esi,esi
c0026755:	e9 16 ff ff ff       	jmp    c0026670 <__divdi3+0x58>
c002675a:	66 90                	xchg   ax,ax
c002675c:	31 c9                	xor    ecx,ecx
c002675e:	e9 0d ff ff ff       	jmp    c0026670 <__divdi3+0x58>
c0026763:	90                   	nop

c0026764 <__moddi3>:
c0026764:	55                   	push   ebp
c0026765:	57                   	push   edi
c0026766:	56                   	push   esi
c0026767:	53                   	push   ebx
c0026768:	83 ec 2c             	sub    esp,0x2c
c002676b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002676f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026773:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026777:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002677b:	85 db                	test   ebx,ebx
c002677d:	0f 88 85 00 00 00    	js     c0026808 <__moddi3+0xa4>
c0026783:	89 de                	mov    esi,ebx
c0026785:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002678d:	89 d7                	mov    edi,edx
c002678f:	85 d2                	test   edx,edx
c0026791:	79 09                	jns    c002679c <__moddi3+0x38>
c0026793:	f7 d8                	neg    eax
c0026795:	83 d2 00             	adc    edx,0x0
c0026798:	f7 da                	neg    edx
c002679a:	89 d7                	mov    edi,edx
c002679c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00267a0:	89 cd                	mov    ebp,ecx
c00267a2:	85 ff                	test   edi,edi
c00267a4:	75 52                	jne    c00267f8 <__moddi3+0x94>
c00267a6:	89 c3                	mov    ebx,eax
c00267a8:	39 f0                	cmp    eax,esi
c00267aa:	76 24                	jbe    c00267d0 <__moddi3+0x6c>
c00267ac:	89 c8                	mov    eax,ecx
c00267ae:	89 f2                	mov    edx,esi
c00267b0:	f7 f3                	div    ebx
c00267b2:	89 d6                	mov    esi,edx
c00267b4:	89 f0                	mov    eax,esi
c00267b6:	31 d2                	xor    edx,edx
c00267b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267bc:	85 c9                	test   ecx,ecx
c00267be:	74 07                	je     c00267c7 <__moddi3+0x63>
c00267c0:	f7 d8                	neg    eax
c00267c2:	83 d2 00             	adc    edx,0x0
c00267c5:	f7 da                	neg    edx
c00267c7:	83 c4 2c             	add    esp,0x2c
c00267ca:	5b                   	pop    ebx
c00267cb:	5e                   	pop    esi
c00267cc:	5f                   	pop    edi
c00267cd:	5d                   	pop    ebp
c00267ce:	c3                   	ret    
c00267cf:	90                   	nop
c00267d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00267d4:	85 db                	test   ebx,ebx
c00267d6:	75 0d                	jne    c00267e5 <__moddi3+0x81>
c00267d8:	b8 01 00 00 00       	mov    eax,0x1
c00267dd:	31 d2                	xor    edx,edx
c00267df:	f7 f7                	div    edi
c00267e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00267e5:	89 f0                	mov    eax,esi
c00267e7:	31 d2                	xor    edx,edx
c00267e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00267ed:	f7 f7                	div    edi
c00267ef:	89 e8                	mov    eax,ebp
c00267f1:	f7 f7                	div    edi
c00267f3:	89 d6                	mov    esi,edx
c00267f5:	eb bd                	jmp    c00267b4 <__moddi3+0x50>
c00267f7:	90                   	nop
c00267f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00267fc:	39 f7                	cmp    edi,esi
c00267fe:	76 20                	jbe    c0026820 <__moddi3+0xbc>
c0026800:	89 c8                	mov    eax,ecx
c0026802:	89 f2                	mov    edx,esi
c0026804:	eb b2                	jmp    c00267b8 <__moddi3+0x54>
c0026806:	66 90                	xchg   ax,ax
c0026808:	f7 d9                	neg    ecx
c002680a:	83 d3 00             	adc    ebx,0x0
c002680d:	f7 db                	neg    ebx
c002680f:	89 de                	mov    esi,ebx
c0026811:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026819:	e9 6f ff ff ff       	jmp    c002678d <__moddi3+0x29>
c002681e:	66 90                	xchg   ax,ax
c0026820:	0f bd c7             	bsr    eax,edi
c0026823:	83 f0 1f             	xor    eax,0x1f
c0026826:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002682a:	75 24                	jne    c0026850 <__moddi3+0xec>
c002682c:	39 f7                	cmp    edi,esi
c002682e:	72 06                	jb     c0026836 <__moddi3+0xd2>
c0026830:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026834:	77 0c                	ja     c0026842 <__moddi3+0xde>
c0026836:	89 e9                	mov    ecx,ebp
c0026838:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002683c:	19 fe                	sbb    esi,edi
c002683e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026842:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026846:	89 f2                	mov    edx,esi
c0026848:	e9 6b ff ff ff       	jmp    c00267b8 <__moddi3+0x54>
c002684d:	8d 76 00             	lea    esi,[esi+0x0]
c0026850:	b8 20 00 00 00       	mov    eax,0x20
c0026855:	89 c2                	mov    edx,eax
c0026857:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002685b:	29 da                	sub    edx,ebx
c002685d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026861:	88 d9                	mov    cl,bl
c0026863:	d3 e7                	shl    edi,cl
c0026865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026869:	88 d1                	mov    cl,dl
c002686b:	d3 e8                	shr    eax,cl
c002686d:	09 c7                	or     edi,eax
c002686f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026873:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026877:	89 d8                	mov    eax,ebx
c0026879:	88 d9                	mov    cl,bl
c002687b:	d3 e7                	shl    edi,cl
c002687d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026881:	89 f3                	mov    ebx,esi
c0026883:	88 d1                	mov    cl,dl
c0026885:	d3 eb                	shr    ebx,cl
c0026887:	89 c7                	mov    edi,eax
c0026889:	88 c1                	mov    cl,al
c002688b:	d3 e6                	shl    esi,cl
c002688d:	89 e8                	mov    eax,ebp
c002688f:	88 d1                	mov    cl,dl
c0026891:	d3 e8                	shr    eax,cl
c0026893:	09 f0                	or     eax,esi
c0026895:	89 f9                	mov    ecx,edi
c0026897:	d3 e5                	shl    ebp,cl
c0026899:	89 da                	mov    edx,ebx
c002689b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002689f:	89 d3                	mov    ebx,edx
c00268a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268a5:	89 c6                	mov    esi,eax
c00268a7:	89 d1                	mov    ecx,edx
c00268a9:	39 d3                	cmp    ebx,edx
c00268ab:	72 27                	jb     c00268d4 <__moddi3+0x170>
c00268ad:	74 21                	je     c00268d0 <__moddi3+0x16c>
c00268af:	29 f5                	sub    ebp,esi
c00268b1:	19 cb                	sbb    ebx,ecx
c00268b3:	89 de                	mov    esi,ebx
c00268b5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00268b9:	d3 e6                	shl    esi,cl
c00268bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00268bf:	89 f9                	mov    ecx,edi
c00268c1:	d3 ed                	shr    ebp,cl
c00268c3:	09 ee                	or     esi,ebp
c00268c5:	89 f0                	mov    eax,esi
c00268c7:	d3 eb                	shr    ebx,cl
c00268c9:	89 da                	mov    edx,ebx
c00268cb:	e9 e8 fe ff ff       	jmp    c00267b8 <__moddi3+0x54>
c00268d0:	39 c5                	cmp    ebp,eax
c00268d2:	73 db                	jae    c00268af <__moddi3+0x14b>
c00268d4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00268d8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00268dc:	89 d1                	mov    ecx,edx
c00268de:	89 c6                	mov    esi,eax
c00268e0:	eb cd                	jmp    c00268af <__moddi3+0x14b>
c00268e2:	66 90                	xchg   ax,ax

c00268e4 <__udivdi3>:
c00268e4:	55                   	push   ebp
c00268e5:	57                   	push   edi
c00268e6:	56                   	push   esi
c00268e7:	53                   	push   ebx
c00268e8:	83 ec 1c             	sub    esp,0x1c
c00268eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00268ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00268f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00268f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00268fb:	85 d2                	test   edx,edx
c00268fd:	75 41                	jne    c0026940 <__udivdi3+0x5c>
c00268ff:	39 f7                	cmp    edi,esi
c0026901:	76 15                	jbe    c0026918 <__udivdi3+0x34>
c0026903:	89 e8                	mov    eax,ebp
c0026905:	89 f2                	mov    edx,esi
c0026907:	f7 f7                	div    edi
c0026909:	31 db                	xor    ebx,ebx
c002690b:	89 da                	mov    edx,ebx
c002690d:	83 c4 1c             	add    esp,0x1c
c0026910:	5b                   	pop    ebx
c0026911:	5e                   	pop    esi
c0026912:	5f                   	pop    edi
c0026913:	5d                   	pop    ebp
c0026914:	c3                   	ret    
c0026915:	8d 76 00             	lea    esi,[esi+0x0]
c0026918:	89 f9                	mov    ecx,edi
c002691a:	85 ff                	test   edi,edi
c002691c:	75 0b                	jne    c0026929 <__udivdi3+0x45>
c002691e:	b8 01 00 00 00       	mov    eax,0x1
c0026923:	31 d2                	xor    edx,edx
c0026925:	f7 f7                	div    edi
c0026927:	89 c1                	mov    ecx,eax
c0026929:	31 d2                	xor    edx,edx
c002692b:	89 f0                	mov    eax,esi
c002692d:	f7 f1                	div    ecx
c002692f:	89 c3                	mov    ebx,eax
c0026931:	89 e8                	mov    eax,ebp
c0026933:	f7 f1                	div    ecx
c0026935:	89 da                	mov    edx,ebx
c0026937:	83 c4 1c             	add    esp,0x1c
c002693a:	5b                   	pop    ebx
c002693b:	5e                   	pop    esi
c002693c:	5f                   	pop    edi
c002693d:	5d                   	pop    ebp
c002693e:	c3                   	ret    
c002693f:	90                   	nop
c0026940:	39 f2                	cmp    edx,esi
c0026942:	77 1c                	ja     c0026960 <__udivdi3+0x7c>
c0026944:	0f bd da             	bsr    ebx,edx
c0026947:	83 f3 1f             	xor    ebx,0x1f
c002694a:	75 24                	jne    c0026970 <__udivdi3+0x8c>
c002694c:	39 f2                	cmp    edx,esi
c002694e:	72 08                	jb     c0026958 <__udivdi3+0x74>
c0026950:	39 ef                	cmp    edi,ebp
c0026952:	0f 87 84 00 00 00    	ja     c00269dc <__udivdi3+0xf8>
c0026958:	b8 01 00 00 00       	mov    eax,0x1
c002695d:	eb ac                	jmp    c002690b <__udivdi3+0x27>
c002695f:	90                   	nop
c0026960:	31 db                	xor    ebx,ebx
c0026962:	31 c0                	xor    eax,eax
c0026964:	89 da                	mov    edx,ebx
c0026966:	83 c4 1c             	add    esp,0x1c
c0026969:	5b                   	pop    ebx
c002696a:	5e                   	pop    esi
c002696b:	5f                   	pop    edi
c002696c:	5d                   	pop    ebp
c002696d:	c3                   	ret    
c002696e:	66 90                	xchg   ax,ax
c0026970:	b8 20 00 00 00       	mov    eax,0x20
c0026975:	29 d8                	sub    eax,ebx
c0026977:	88 d9                	mov    cl,bl
c0026979:	d3 e2                	shl    edx,cl
c002697b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002697f:	89 fa                	mov    edx,edi
c0026981:	88 c1                	mov    cl,al
c0026983:	d3 ea                	shr    edx,cl
c0026985:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026989:	09 d1                	or     ecx,edx
c002698b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002698f:	88 d9                	mov    cl,bl
c0026991:	d3 e7                	shl    edi,cl
c0026993:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026997:	89 f7                	mov    edi,esi
c0026999:	88 c1                	mov    cl,al
c002699b:	d3 ef                	shr    edi,cl
c002699d:	88 d9                	mov    cl,bl
c002699f:	d3 e6                	shl    esi,cl
c00269a1:	89 ea                	mov    edx,ebp
c00269a3:	88 c1                	mov    cl,al
c00269a5:	d3 ea                	shr    edx,cl
c00269a7:	09 d6                	or     esi,edx
c00269a9:	89 f0                	mov    eax,esi
c00269ab:	89 fa                	mov    edx,edi
c00269ad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00269b1:	89 d7                	mov    edi,edx
c00269b3:	89 c6                	mov    esi,eax
c00269b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269b9:	39 d7                	cmp    edi,edx
c00269bb:	72 13                	jb     c00269d0 <__udivdi3+0xec>
c00269bd:	74 09                	je     c00269c8 <__udivdi3+0xe4>
c00269bf:	89 f0                	mov    eax,esi
c00269c1:	31 db                	xor    ebx,ebx
c00269c3:	e9 43 ff ff ff       	jmp    c002690b <__udivdi3+0x27>
c00269c8:	88 d9                	mov    cl,bl
c00269ca:	d3 e5                	shl    ebp,cl
c00269cc:	39 c5                	cmp    ebp,eax
c00269ce:	73 ef                	jae    c00269bf <__udivdi3+0xdb>
c00269d0:	8d 46 ff             	lea    eax,[esi-0x1]
c00269d3:	31 db                	xor    ebx,ebx
c00269d5:	e9 31 ff ff ff       	jmp    c002690b <__udivdi3+0x27>
c00269da:	66 90                	xchg   ax,ax
c00269dc:	31 c0                	xor    eax,eax
c00269de:	e9 28 ff ff ff       	jmp    c002690b <__udivdi3+0x27>
c00269e3:	90                   	nop

c00269e4 <__umoddi3>:
c00269e4:	55                   	push   ebp
c00269e5:	57                   	push   edi
c00269e6:	56                   	push   esi
c00269e7:	53                   	push   ebx
c00269e8:	83 ec 1c             	sub    esp,0x1c
c00269eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00269ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00269f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00269fb:	89 da                	mov    edx,ebx
c00269fd:	85 c0                	test   eax,eax
c00269ff:	75 37                	jne    c0026a38 <__umoddi3+0x54>
c0026a01:	39 df                	cmp    edi,ebx
c0026a03:	76 13                	jbe    c0026a18 <__umoddi3+0x34>
c0026a05:	89 f0                	mov    eax,esi
c0026a07:	f7 f7                	div    edi
c0026a09:	89 d0                	mov    eax,edx
c0026a0b:	31 d2                	xor    edx,edx
c0026a0d:	83 c4 1c             	add    esp,0x1c
c0026a10:	5b                   	pop    ebx
c0026a11:	5e                   	pop    esi
c0026a12:	5f                   	pop    edi
c0026a13:	5d                   	pop    ebp
c0026a14:	c3                   	ret    
c0026a15:	8d 76 00             	lea    esi,[esi+0x0]
c0026a18:	89 fd                	mov    ebp,edi
c0026a1a:	85 ff                	test   edi,edi
c0026a1c:	75 0b                	jne    c0026a29 <__umoddi3+0x45>
c0026a1e:	b8 01 00 00 00       	mov    eax,0x1
c0026a23:	31 d2                	xor    edx,edx
c0026a25:	f7 f7                	div    edi
c0026a27:	89 c5                	mov    ebp,eax
c0026a29:	89 d8                	mov    eax,ebx
c0026a2b:	31 d2                	xor    edx,edx
c0026a2d:	f7 f5                	div    ebp
c0026a2f:	89 f0                	mov    eax,esi
c0026a31:	f7 f5                	div    ebp
c0026a33:	89 d0                	mov    eax,edx
c0026a35:	eb d4                	jmp    c0026a0b <__umoddi3+0x27>
c0026a37:	90                   	nop
c0026a38:	89 f1                	mov    ecx,esi
c0026a3a:	39 d8                	cmp    eax,ebx
c0026a3c:	76 0a                	jbe    c0026a48 <__umoddi3+0x64>
c0026a3e:	89 f0                	mov    eax,esi
c0026a40:	83 c4 1c             	add    esp,0x1c
c0026a43:	5b                   	pop    ebx
c0026a44:	5e                   	pop    esi
c0026a45:	5f                   	pop    edi
c0026a46:	5d                   	pop    ebp
c0026a47:	c3                   	ret    
c0026a48:	0f bd e8             	bsr    ebp,eax
c0026a4b:	83 f5 1f             	xor    ebp,0x1f
c0026a4e:	75 1c                	jne    c0026a6c <__umoddi3+0x88>
c0026a50:	39 d8                	cmp    eax,ebx
c0026a52:	72 04                	jb     c0026a58 <__umoddi3+0x74>
c0026a54:	39 f7                	cmp    edi,esi
c0026a56:	77 08                	ja     c0026a60 <__umoddi3+0x7c>
c0026a58:	89 da                	mov    edx,ebx
c0026a5a:	29 fe                	sub    esi,edi
c0026a5c:	19 c2                	sbb    edx,eax
c0026a5e:	89 f1                	mov    ecx,esi
c0026a60:	89 c8                	mov    eax,ecx
c0026a62:	83 c4 1c             	add    esp,0x1c
c0026a65:	5b                   	pop    ebx
c0026a66:	5e                   	pop    esi
c0026a67:	5f                   	pop    edi
c0026a68:	5d                   	pop    ebp
c0026a69:	c3                   	ret    
c0026a6a:	66 90                	xchg   ax,ax
c0026a6c:	ba 20 00 00 00       	mov    edx,0x20
c0026a71:	29 ea                	sub    edx,ebp
c0026a73:	89 e9                	mov    ecx,ebp
c0026a75:	d3 e0                	shl    eax,cl
c0026a77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a7b:	89 f8                	mov    eax,edi
c0026a7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026a81:	88 d1                	mov    cl,dl
c0026a83:	d3 e8                	shr    eax,cl
c0026a85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a89:	09 c1                	or     ecx,eax
c0026a8b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a8f:	89 e9                	mov    ecx,ebp
c0026a91:	d3 e7                	shl    edi,cl
c0026a93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a97:	89 d8                	mov    eax,ebx
c0026a99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026a9d:	88 d1                	mov    cl,dl
c0026a9f:	d3 e8                	shr    eax,cl
c0026aa1:	89 c7                	mov    edi,eax
c0026aa3:	89 e9                	mov    ecx,ebp
c0026aa5:	d3 e3                	shl    ebx,cl
c0026aa7:	89 f0                	mov    eax,esi
c0026aa9:	88 d1                	mov    cl,dl
c0026aab:	d3 e8                	shr    eax,cl
c0026aad:	09 d8                	or     eax,ebx
c0026aaf:	89 e9                	mov    ecx,ebp
c0026ab1:	d3 e6                	shl    esi,cl
c0026ab3:	89 f3                	mov    ebx,esi
c0026ab5:	89 fa                	mov    edx,edi
c0026ab7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026abb:	89 d1                	mov    ecx,edx
c0026abd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ac1:	89 c6                	mov    esi,eax
c0026ac3:	89 d7                	mov    edi,edx
c0026ac5:	39 d1                	cmp    ecx,edx
c0026ac7:	72 27                	jb     c0026af0 <__umoddi3+0x10c>
c0026ac9:	74 21                	je     c0026aec <__umoddi3+0x108>
c0026acb:	89 ca                	mov    edx,ecx
c0026acd:	29 f3                	sub    ebx,esi
c0026acf:	19 fa                	sbb    edx,edi
c0026ad1:	89 d0                	mov    eax,edx
c0026ad3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026ad7:	d3 e0                	shl    eax,cl
c0026ad9:	89 e9                	mov    ecx,ebp
c0026adb:	d3 eb                	shr    ebx,cl
c0026add:	09 d8                	or     eax,ebx
c0026adf:	d3 ea                	shr    edx,cl
c0026ae1:	83 c4 1c             	add    esp,0x1c
c0026ae4:	5b                   	pop    ebx
c0026ae5:	5e                   	pop    esi
c0026ae6:	5f                   	pop    edi
c0026ae7:	5d                   	pop    ebp
c0026ae8:	c3                   	ret    
c0026ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0026aec:	39 c3                	cmp    ebx,eax
c0026aee:	73 db                	jae    c0026acb <__umoddi3+0xe7>
c0026af0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026af4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026af8:	89 d7                	mov    edi,edx
c0026afa:	89 c6                	mov    esi,eax
c0026afc:	eb cd                	jmp    c0026acb <__umoddi3+0xe7>

c0026afe <__addsf3>:
c0026afe:	55                   	push   ebp
c0026aff:	89 e5                	mov    ebp,esp
c0026b01:	57                   	push   edi
c0026b02:	56                   	push   esi
c0026b03:	53                   	push   ebx
c0026b04:	83 ec 08             	sub    esp,0x8
c0026b07:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026b0a:	89 fa                	mov    edx,edi
c0026b0c:	89 f8                	mov    eax,edi
c0026b0e:	c1 f8 17             	sar    eax,0x17
c0026b11:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026b14:	c1 e2 08             	shl    edx,0x8
c0026b17:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026b1d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026b20:	89 de                	mov    esi,ebx
c0026b22:	c1 fe 17             	sar    esi,0x17
c0026b25:	c1 e3 08             	shl    ebx,0x8
c0026b28:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026b2e:	31 f0                	xor    eax,esi
c0026b30:	0f 88 3b 01 00 00    	js     c0026c71 <__addsf3+0x173>
c0026b36:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026b39:	29 f1                	sub    ecx,esi
c0026b3b:	85 c9                	test   ecx,ecx
c0026b3d:	7e 54                	jle    c0026b93 <__addsf3+0x95>
c0026b3f:	89 f0                	mov    eax,esi
c0026b41:	84 c0                	test   al,al
c0026b43:	75 10                	jne    c0026b55 <__addsf3+0x57>
c0026b45:	85 db                	test   ebx,ebx
c0026b47:	0f 84 aa 02 00 00    	je     c0026df7 <__addsf3+0x2f9>
c0026b4d:	49                   	dec    ecx
c0026b4e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b51:	74 38                	je     c0026b8b <__addsf3+0x8d>
c0026b53:	eb 13                	jmp    c0026b68 <__addsf3+0x6a>
c0026b55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b58:	f7 d0                	not    eax
c0026b5a:	84 c0                	test   al,al
c0026b5c:	0f 84 95 02 00 00    	je     c0026df7 <__addsf3+0x2f9>
c0026b62:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b68:	83 f9 1f             	cmp    ecx,0x1f
c0026b6b:	0f 8f 86 02 00 00    	jg     c0026df7 <__addsf3+0x2f9>
c0026b71:	89 de                	mov    esi,ebx
c0026b73:	d3 ee                	shr    esi,cl
c0026b75:	b8 20 00 00 00       	mov    eax,0x20
c0026b7a:	29 c8                	sub    eax,ecx
c0026b7c:	89 c1                	mov    ecx,eax
c0026b7e:	d3 e3                	shl    ebx,cl
c0026b80:	31 c0                	xor    eax,eax
c0026b82:	85 db                	test   ebx,ebx
c0026b84:	0f 95 c0             	setne  al
c0026b87:	09 f0                	or     eax,esi
c0026b89:	01 d0                	add    eax,edx
c0026b8b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b8e:	e9 b6 00 00 00       	jmp    c0026c49 <__addsf3+0x14b>
c0026b93:	74 5c                	je     c0026bf1 <__addsf3+0xf3>
c0026b95:	89 f1                	mov    ecx,esi
c0026b97:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026b9a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b9d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ba1:	75 14                	jne    c0026bb7 <__addsf3+0xb9>
c0026ba3:	85 d2                	test   edx,edx
c0026ba5:	0f 84 4c 02 00 00    	je     c0026df7 <__addsf3+0x2f9>
c0026bab:	49                   	dec    ecx
c0026bac:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026baf:	0f 84 94 00 00 00    	je     c0026c49 <__addsf3+0x14b>
c0026bb5:	eb 12                	jmp    c0026bc9 <__addsf3+0xcb>
c0026bb7:	89 f0                	mov    eax,esi
c0026bb9:	f7 d0                	not    eax
c0026bbb:	84 c0                	test   al,al
c0026bbd:	0f 84 34 02 00 00    	je     c0026df7 <__addsf3+0x2f9>
c0026bc3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026bc9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bcc:	83 f9 1f             	cmp    ecx,0x1f
c0026bcf:	0f 8f 22 02 00 00    	jg     c0026df7 <__addsf3+0x2f9>
c0026bd5:	89 d7                	mov    edi,edx
c0026bd7:	d3 ef                	shr    edi,cl
c0026bd9:	b8 20 00 00 00       	mov    eax,0x20
c0026bde:	29 c8                	sub    eax,ecx
c0026be0:	89 c1                	mov    ecx,eax
c0026be2:	d3 e2                	shl    edx,cl
c0026be4:	31 c0                	xor    eax,eax
c0026be6:	85 d2                	test   edx,edx
c0026be8:	0f 95 c0             	setne  al
c0026beb:	09 f8                	or     eax,edi
c0026bed:	01 d8                	add    eax,ebx
c0026bef:	eb 58                	jmp    c0026c49 <__addsf3+0x14b>
c0026bf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bf4:	8d 70 01             	lea    esi,[eax+0x1]
c0026bf7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026bfd:	75 32                	jne    c0026c31 <__addsf3+0x133>
c0026bff:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c03:	75 1f                	jne    c0026c24 <__addsf3+0x126>
c0026c05:	85 d2                	test   edx,edx
c0026c07:	0f 84 e0 01 00 00    	je     c0026ded <__addsf3+0x2ef>
c0026c0d:	85 db                	test   ebx,ebx
c0026c0f:	0f 84 e2 01 00 00    	je     c0026df7 <__addsf3+0x2f9>
c0026c15:	89 d0                	mov    eax,edx
c0026c17:	01 d8                	add    eax,ebx
c0026c19:	0f 89 a9 01 00 00    	jns    c0026dc8 <__addsf3+0x2ca>
c0026c1f:	e9 9d 01 00 00       	jmp    c0026dc1 <__addsf3+0x2c3>
c0026c24:	85 d2                	test   edx,edx
c0026c26:	0f 85 cb 01 00 00    	jne    c0026df7 <__addsf3+0x2f9>
c0026c2c:	e9 bc 01 00 00       	jmp    c0026ded <__addsf3+0x2ef>
c0026c31:	31 c0                	xor    eax,eax
c0026c33:	89 f1                	mov    ecx,esi
c0026c35:	f7 d1                	not    ecx
c0026c37:	84 c9                	test   cl,cl
c0026c39:	0f 84 90 01 00 00    	je     c0026dcf <__addsf3+0x2d1>
c0026c3f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c42:	d1 e8                	shr    eax,1
c0026c44:	e9 86 01 00 00       	jmp    c0026dcf <__addsf3+0x2d1>
c0026c49:	85 c0                	test   eax,eax
c0026c4b:	0f 89 7e 01 00 00    	jns    c0026dcf <__addsf3+0x2d1>
c0026c51:	46                   	inc    esi
c0026c52:	89 f2                	mov    edx,esi
c0026c54:	f7 d2                	not    edx
c0026c56:	84 d2                	test   dl,dl
c0026c58:	0f 84 6f 01 00 00    	je     c0026dcd <__addsf3+0x2cf>
c0026c5e:	89 c2                	mov    edx,eax
c0026c60:	83 e2 01             	and    edx,0x1
c0026c63:	d1 e8                	shr    eax,1
c0026c65:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026c6a:	09 d0                	or     eax,edx
c0026c6c:	e9 5e 01 00 00       	jmp    c0026dcf <__addsf3+0x2d1>
c0026c71:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026c75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026c78:	89 f0                	mov    eax,esi
c0026c7a:	0f b6 c0             	movzx  eax,al
c0026c7d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c80:	29 c1                	sub    ecx,eax
c0026c82:	85 c9                	test   ecx,ecx
c0026c84:	7e 55                	jle    c0026cdb <__addsf3+0x1dd>
c0026c86:	85 c0                	test   eax,eax
c0026c88:	75 11                	jne    c0026c9b <__addsf3+0x19d>
c0026c8a:	85 db                	test   ebx,ebx
c0026c8c:	0f 84 65 01 00 00    	je     c0026df7 <__addsf3+0x2f9>
c0026c92:	49                   	dec    ecx
c0026c93:	75 19                	jne    c0026cae <__addsf3+0x1b0>
c0026c95:	89 d0                	mov    eax,edx
c0026c97:	29 d8                	sub    eax,ebx
c0026c99:	eb 38                	jmp    c0026cd3 <__addsf3+0x1d5>
c0026c9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c9e:	f7 d0                	not    eax
c0026ca0:	84 c0                	test   al,al
c0026ca2:	0f 84 4f 01 00 00    	je     c0026df7 <__addsf3+0x2f9>
c0026ca8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026cae:	83 f9 1f             	cmp    ecx,0x1f
c0026cb1:	0f 8f 40 01 00 00    	jg     c0026df7 <__addsf3+0x2f9>
c0026cb7:	89 de                	mov    esi,ebx
c0026cb9:	d3 ee                	shr    esi,cl
c0026cbb:	b8 20 00 00 00       	mov    eax,0x20
c0026cc0:	29 c8                	sub    eax,ecx
c0026cc2:	89 c1                	mov    ecx,eax
c0026cc4:	d3 e3                	shl    ebx,cl
c0026cc6:	31 c0                	xor    eax,eax
c0026cc8:	85 db                	test   ebx,ebx
c0026cca:	0f 95 c0             	setne  al
c0026ccd:	09 f0                	or     eax,esi
c0026ccf:	29 c2                	sub    edx,eax
c0026cd1:	89 d0                	mov    eax,edx
c0026cd3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026cd6:	e9 af 00 00 00       	jmp    c0026d8a <__addsf3+0x28c>
c0026cdb:	74 5c                	je     c0026d39 <__addsf3+0x23b>
c0026cdd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026ce0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ce3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ce7:	75 14                	jne    c0026cfd <__addsf3+0x1ff>
c0026ce9:	85 d2                	test   edx,edx
c0026ceb:	0f 84 06 01 00 00    	je     c0026df7 <__addsf3+0x2f9>
c0026cf1:	48                   	dec    eax
c0026cf2:	75 1b                	jne    c0026d0f <__addsf3+0x211>
c0026cf4:	89 d8                	mov    eax,ebx
c0026cf6:	29 d0                	sub    eax,edx
c0026cf8:	e9 8d 00 00 00       	jmp    c0026d8a <__addsf3+0x28c>
c0026cfd:	89 f1                	mov    ecx,esi
c0026cff:	f7 d1                	not    ecx
c0026d01:	84 c9                	test   cl,cl
c0026d03:	0f 84 ee 00 00 00    	je     c0026df7 <__addsf3+0x2f9>
c0026d09:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d0f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d12:	83 f8 1f             	cmp    eax,0x1f
c0026d15:	0f 8f dc 00 00 00    	jg     c0026df7 <__addsf3+0x2f9>
c0026d1b:	89 d7                	mov    edi,edx
c0026d1d:	88 c1                	mov    cl,al
c0026d1f:	d3 ef                	shr    edi,cl
c0026d21:	b9 20 00 00 00       	mov    ecx,0x20
c0026d26:	29 c1                	sub    ecx,eax
c0026d28:	d3 e2                	shl    edx,cl
c0026d2a:	31 c0                	xor    eax,eax
c0026d2c:	85 d2                	test   edx,edx
c0026d2e:	0f 95 c0             	setne  al
c0026d31:	09 f8                	or     eax,edi
c0026d33:	29 c3                	sub    ebx,eax
c0026d35:	89 d8                	mov    eax,ebx
c0026d37:	eb 51                	jmp    c0026d8a <__addsf3+0x28c>
c0026d39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d3c:	40                   	inc    eax
c0026d3d:	a8 fe                	test   al,0xfe
c0026d3f:	75 3d                	jne    c0026d7e <__addsf3+0x280>
c0026d41:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d45:	0f 85 a7 00 00 00    	jne    c0026df2 <__addsf3+0x2f4>
c0026d4b:	85 d2                	test   edx,edx
c0026d4d:	75 12                	jne    c0026d61 <__addsf3+0x263>
c0026d4f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d52:	85 db                	test   ebx,ebx
c0026d54:	0f 85 9d 00 00 00    	jne    c0026df7 <__addsf3+0x2f9>
c0026d5a:	31 ff                	xor    edi,edi
c0026d5c:	e9 96 00 00 00       	jmp    c0026df7 <__addsf3+0x2f9>
c0026d61:	85 db                	test   ebx,ebx
c0026d63:	0f 84 8e 00 00 00    	je     c0026df7 <__addsf3+0x2f9>
c0026d69:	89 d0                	mov    eax,edx
c0026d6b:	29 d8                	sub    eax,ebx
c0026d6d:	79 06                	jns    c0026d75 <__addsf3+0x277>
c0026d6f:	89 d8                	mov    eax,ebx
c0026d71:	29 d0                	sub    eax,edx
c0026d73:	eb 5a                	jmp    c0026dcf <__addsf3+0x2d1>
c0026d75:	bf 00 00 00 00       	mov    edi,0x0
c0026d7a:	74 7b                	je     c0026df7 <__addsf3+0x2f9>
c0026d7c:	eb 4a                	jmp    c0026dc8 <__addsf3+0x2ca>
c0026d7e:	89 d0                	mov    eax,edx
c0026d80:	29 d8                	sub    eax,ebx
c0026d82:	79 12                	jns    c0026d96 <__addsf3+0x298>
c0026d84:	89 d8                	mov    eax,ebx
c0026d86:	29 d0                	sub    eax,edx
c0026d88:	eb 09                	jmp    c0026d93 <__addsf3+0x295>
c0026d8a:	85 c0                	test   eax,eax
c0026d8c:	79 41                	jns    c0026dcf <__addsf3+0x2d1>
c0026d8e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d93:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026d96:	31 f6                	xor    esi,esi
c0026d98:	85 c0                	test   eax,eax
c0026d9a:	74 33                	je     c0026dcf <__addsf3+0x2d1>
c0026d9c:	0f bd c8             	bsr    ecx,eax
c0026d9f:	83 f1 1f             	xor    ecx,0x1f
c0026da2:	d3 e0                	shl    eax,cl
c0026da4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026da8:	39 ca                	cmp    edx,ecx
c0026daa:	7f 10                	jg     c0026dbc <__addsf3+0x2be>
c0026dac:	29 d1                	sub    ecx,edx
c0026dae:	41                   	inc    ecx
c0026daf:	d3 e8                	shr    eax,cl
c0026db1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026db4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026dba:	eb 13                	jmp    c0026dcf <__addsf3+0x2d1>
c0026dbc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dbf:	29 ce                	sub    esi,ecx
c0026dc1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026dc6:	eb 07                	jmp    c0026dcf <__addsf3+0x2d1>
c0026dc8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dcb:	eb 02                	jmp    c0026dcf <__addsf3+0x2d1>
c0026dcd:	31 c0                	xor    eax,eax
c0026dcf:	89 c2                	mov    edx,eax
c0026dd1:	c1 ea 08             	shr    edx,0x8
c0026dd4:	a8 7f                	test   al,0x7f
c0026dd6:	0f 95 c1             	setne  cl
c0026dd9:	09 d1                	or     ecx,edx
c0026ddb:	83 e1 01             	and    ecx,0x1
c0026dde:	c1 e8 07             	shr    eax,0x7
c0026de1:	21 c8                	and    eax,ecx
c0026de3:	c1 e6 17             	shl    esi,0x17
c0026de6:	09 d6                	or     esi,edx
c0026de8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026deb:	eb 0a                	jmp    c0026df7 <__addsf3+0x2f9>
c0026ded:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026df0:	eb 05                	jmp    c0026df7 <__addsf3+0x2f9>
c0026df2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026df7:	89 f8                	mov    eax,edi
c0026df9:	5a                   	pop    edx
c0026dfa:	59                   	pop    ecx
c0026dfb:	5b                   	pop    ebx
c0026dfc:	5e                   	pop    esi
c0026dfd:	5f                   	pop    edi
c0026dfe:	5d                   	pop    ebp
c0026dff:	c3                   	ret    

c0026e00 <__subsf3>:
c0026e00:	55                   	push   ebp
c0026e01:	89 e5                	mov    ebp,esp
c0026e03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e06:	05 00 00 00 80       	add    eax,0x80000000
c0026e0b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026e0e:	5d                   	pop    ebp
c0026e0f:	e9 ea fc ff ff       	jmp    c0026afe <__addsf3>

c0026e14 <__negsf2>:
c0026e14:	55                   	push   ebp
c0026e15:	89 e5                	mov    ebp,esp
c0026e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026e1a:	05 00 00 00 80       	add    eax,0x80000000
c0026e1f:	5d                   	pop    ebp
c0026e20:	c3                   	ret    

c0026e21 <__mulsf3>:
c0026e21:	55                   	push   ebp
c0026e22:	89 e5                	mov    ebp,esp
c0026e24:	57                   	push   edi
c0026e25:	56                   	push   esi
c0026e26:	53                   	push   ebx
c0026e27:	83 ec 1c             	sub    esp,0x1c
c0026e2a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026e2d:	89 f0                	mov    eax,esi
c0026e2f:	89 f1                	mov    ecx,esi
c0026e31:	c1 f9 17             	sar    ecx,0x17
c0026e34:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e37:	c1 e0 08             	shl    eax,0x8
c0026e3a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e3f:	89 c1                	mov    ecx,eax
c0026e41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e44:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e47:	89 c7                	mov    edi,eax
c0026e49:	c1 ff 17             	sar    edi,0x17
c0026e4c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e50:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e53:	89 f8                	mov    eax,edi
c0026e55:	0f b6 c0             	movzx  eax,al
c0026e58:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026e5b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026e5f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e62:	42                   	inc    edx
c0026e63:	80 e2 fe             	and    dl,0xfe
c0026e66:	75 7b                	jne    c0026ee3 <__mulsf3+0xc2>
c0026e68:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e6c:	74 54                	je     c0026ec2 <__mulsf3+0xa1>
c0026e6e:	85 c9                	test   ecx,ecx
c0026e70:	0f 85 64 01 00 00    	jne    c0026fda <__mulsf3+0x1b9>
c0026e76:	8d 57 01             	lea    edx,[edi+0x1]
c0026e79:	80 e2 fe             	and    dl,0xfe
c0026e7c:	75 1f                	jne    c0026e9d <__mulsf3+0x7c>
c0026e7e:	85 c0                	test   eax,eax
c0026e80:	b8 00 00 00 00       	mov    eax,0x0
c0026e85:	74 29                	je     c0026eb0 <__mulsf3+0x8f>
c0026e87:	53                   	push   ebx
c0026e88:	53                   	push   ebx
c0026e89:	50                   	push   eax
c0026e8a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e8d:	e8 96 05 00 00       	call   c0027428 <__nesf2>
c0026e92:	83 c4 10             	add    esp,0x10
c0026e95:	85 c0                	test   eax,eax
c0026e97:	0f 85 3a 01 00 00    	jne    c0026fd7 <__mulsf3+0x1b6>
c0026e9d:	85 ff                	test   edi,edi
c0026e9f:	0f 89 35 01 00 00    	jns    c0026fda <__mulsf3+0x1b9>
c0026ea5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026eab:	e9 2a 01 00 00       	jmp    c0026fda <__mulsf3+0x1b9>
c0026eb0:	51                   	push   ecx
c0026eb1:	51                   	push   ecx
c0026eb2:	50                   	push   eax
c0026eb3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eb6:	e8 6d 05 00 00       	call   c0027428 <__nesf2>
c0026ebb:	83 c4 10             	add    esp,0x10
c0026ebe:	85 c0                	test   eax,eax
c0026ec0:	eb 15                	jmp    c0026ed7 <__mulsf3+0xb6>
c0026ec2:	85 c9                	test   ecx,ecx
c0026ec4:	74 0b                	je     c0026ed1 <__mulsf3+0xb0>
c0026ec6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026ec9:	01 c9                	add    ecx,ecx
c0026ecb:	78 16                	js     c0026ee3 <__mulsf3+0xc2>
c0026ecd:	89 d3                	mov    ebx,edx
c0026ecf:	eb f5                	jmp    c0026ec6 <__mulsf3+0xa5>
c0026ed1:	89 f8                	mov    eax,edi
c0026ed3:	f7 d0                	not    eax
c0026ed5:	84 c0                	test   al,al
c0026ed7:	75 c4                	jne    c0026e9d <__mulsf3+0x7c>
c0026ed9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026ede:	e9 f7 00 00 00       	jmp    c0026fda <__mulsf3+0x1b9>
c0026ee3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026ee6:	c1 e6 08             	shl    esi,0x8
c0026ee9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026eef:	8d 57 01             	lea    edx,[edi+0x1]
c0026ef2:	80 e2 fe             	and    dl,0xfe
c0026ef5:	75 63                	jne    c0026f5a <__mulsf3+0x139>
c0026ef7:	85 c0                	test   eax,eax
c0026ef9:	74 2f                	je     c0026f2a <__mulsf3+0x109>
c0026efb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026eff:	0f 89 d2 00 00 00    	jns    c0026fd7 <__mulsf3+0x1b6>
c0026f05:	52                   	push   edx
c0026f06:	52                   	push   edx
c0026f07:	6a 00                	push   0x0
c0026f09:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f0c:	e8 dc 04 00 00       	call   c00273ed <__eqsf2>
c0026f11:	83 c4 10             	add    esp,0x10
c0026f14:	85 c0                	test   eax,eax
c0026f16:	0f 85 bb 00 00 00    	jne    c0026fd7 <__mulsf3+0x1b6>
c0026f1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f1f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026f25:	e9 b0 00 00 00       	jmp    c0026fda <__mulsf3+0x1b9>
c0026f2a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f2d:	50                   	push   eax
c0026f2e:	50                   	push   eax
c0026f2f:	6a 00                	push   0x0
c0026f31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f34:	e8 b4 04 00 00       	call   c00273ed <__eqsf2>
c0026f39:	83 c4 10             	add    esp,0x10
c0026f3c:	85 c0                	test   eax,eax
c0026f3e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f41:	75 0c                	jne    c0026f4f <__mulsf3+0x12e>
c0026f43:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f47:	0f 89 8a 00 00 00    	jns    c0026fd7 <__mulsf3+0x1b6>
c0026f4d:	eb cd                	jmp    c0026f1c <__mulsf3+0xfb>
c0026f4f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026f52:	01 f6                	add    esi,esi
c0026f54:	78 04                	js     c0026f5a <__mulsf3+0x139>
c0026f56:	89 c3                	mov    ebx,eax
c0026f58:	eb f5                	jmp    c0026f4f <__mulsf3+0x12e>
c0026f5a:	89 c8                	mov    eax,ecx
c0026f5c:	0d 00 00 00 80       	or     eax,0x80000000
c0026f61:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026f67:	f7 e6                	mul    esi
c0026f69:	85 c0                	test   eax,eax
c0026f6b:	0f 95 c0             	setne  al
c0026f6e:	0f b6 c0             	movzx  eax,al
c0026f71:	09 c2                	or     edx,eax
c0026f73:	78 03                	js     c0026f78 <__mulsf3+0x157>
c0026f75:	01 d2                	add    edx,edx
c0026f77:	4b                   	dec    ebx
c0026f78:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026f7e:	7f 22                	jg     c0026fa2 <__mulsf3+0x181>
c0026f80:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f86:	85 db                	test   ebx,ebx
c0026f88:	7f 23                	jg     c0026fad <__mulsf3+0x18c>
c0026f8a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026f8d:	7c 1a                	jl     c0026fa9 <__mulsf3+0x188>
c0026f8f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f95:	b9 01 00 00 00       	mov    ecx,0x1
c0026f9a:	29 d9                	sub    ecx,ebx
c0026f9c:	d3 ea                	shr    edx,cl
c0026f9e:	31 db                	xor    ebx,ebx
c0026fa0:	eb 0b                	jmp    c0026fad <__mulsf3+0x18c>
c0026fa2:	bb ff 00 00 00       	mov    ebx,0xff
c0026fa7:	eb 02                	jmp    c0026fab <__mulsf3+0x18a>
c0026fa9:	31 db                	xor    ebx,ebx
c0026fab:	31 d2                	xor    edx,edx
c0026fad:	89 d0                	mov    eax,edx
c0026faf:	c1 e8 08             	shr    eax,0x8
c0026fb2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026fb5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026fbb:	09 fb                	or     ebx,edi
c0026fbd:	c1 e3 17             	shl    ebx,0x17
c0026fc0:	09 c3                	or     ebx,eax
c0026fc2:	f6 c2 7f             	test   dl,0x7f
c0026fc5:	0f 95 c1             	setne  cl
c0026fc8:	09 c8                	or     eax,ecx
c0026fca:	83 e0 01             	and    eax,0x1
c0026fcd:	c1 ea 07             	shr    edx,0x7
c0026fd0:	21 c2                	and    edx,eax
c0026fd2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026fd5:	eb 03                	jmp    c0026fda <__mulsf3+0x1b9>
c0026fd7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026fda:	89 f0                	mov    eax,esi
c0026fdc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026fdf:	5b                   	pop    ebx
c0026fe0:	5e                   	pop    esi
c0026fe1:	5f                   	pop    edi
c0026fe2:	5d                   	pop    ebp
c0026fe3:	c3                   	ret    

c0026fe4 <__divsf3>:
c0026fe4:	55                   	push   ebp
c0026fe5:	89 e5                	mov    ebp,esp
c0026fe7:	57                   	push   edi
c0026fe8:	56                   	push   esi
c0026fe9:	53                   	push   ebx
c0026fea:	83 ec 1c             	sub    esp,0x1c
c0026fed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026ff0:	89 d8                	mov    eax,ebx
c0026ff2:	89 d9                	mov    ecx,ebx
c0026ff4:	c1 f9 17             	sar    ecx,0x17
c0026ff7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026ffa:	c1 e0 08             	shl    eax,0x8
c0026ffd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027002:	89 c1                	mov    ecx,eax
c0027004:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027007:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002700a:	89 c7                	mov    edi,eax
c002700c:	c1 ff 17             	sar    edi,0x17
c002700f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027013:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027016:	89 f8                	mov    eax,edi
c0027018:	0f b6 c0             	movzx  eax,al
c002701b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002701e:	29 c6                	sub    esi,eax
c0027020:	83 c6 7f             	add    esi,0x7f
c0027023:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027026:	42                   	inc    edx
c0027027:	80 e2 fe             	and    dl,0xfe
c002702a:	0f 85 9c 00 00 00    	jne    c00270cc <__divsf3+0xe8>
c0027030:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027034:	74 33                	je     c0027069 <__divsf3+0x85>
c0027036:	85 c9                	test   ecx,ecx
c0027038:	0f 85 c7 01 00 00    	jne    c0027205 <__divsf3+0x221>
c002703e:	8d 57 01             	lea    edx,[edi+0x1]
c0027041:	80 e2 fe             	and    dl,0xfe
c0027044:	75 2f                	jne    c0027075 <__divsf3+0x91>
c0027046:	85 c0                	test   eax,eax
c0027048:	74 2b                	je     c0027075 <__divsf3+0x91>
c002704a:	51                   	push   ecx
c002704b:	51                   	push   ecx
c002704c:	6a 00                	push   0x0
c002704e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027051:	e8 d2 03 00 00       	call   c0027428 <__nesf2>
c0027056:	83 c4 10             	add    esp,0x10
c0027059:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002705c:	85 c0                	test   eax,eax
c002705e:	0f 85 a1 01 00 00    	jne    c0027205 <__divsf3+0x221>
c0027064:	e9 92 01 00 00       	jmp    c00271fb <__divsf3+0x217>
c0027069:	85 c9                	test   ecx,ecx
c002706b:	75 1b                	jne    c0027088 <__divsf3+0xa4>
c002706d:	8d 57 01             	lea    edx,[edi+0x1]
c0027070:	80 e2 fe             	and    dl,0xfe
c0027073:	74 1e                	je     c0027093 <__divsf3+0xaf>
c0027075:	85 ff                	test   edi,edi
c0027077:	0f 89 88 01 00 00    	jns    c0027205 <__divsf3+0x221>
c002707d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027083:	e9 7d 01 00 00       	jmp    c0027205 <__divsf3+0x221>
c0027088:	8d 56 ff             	lea    edx,[esi-0x1]
c002708b:	01 c9                	add    ecx,ecx
c002708d:	78 3d                	js     c00270cc <__divsf3+0xe8>
c002708f:	89 d6                	mov    esi,edx
c0027091:	eb f5                	jmp    c0027088 <__divsf3+0xa4>
c0027093:	85 c0                	test   eax,eax
c0027095:	b8 00 00 00 00       	mov    eax,0x0
c002709a:	74 18                	je     c00270b4 <__divsf3+0xd0>
c002709c:	52                   	push   edx
c002709d:	52                   	push   edx
c002709e:	50                   	push   eax
c002709f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270a2:	e8 81 03 00 00       	call   c0027428 <__nesf2>
c00270a7:	83 c4 10             	add    esp,0x10
c00270aa:	85 c0                	test   eax,eax
c00270ac:	0f 85 50 01 00 00    	jne    c0027202 <__divsf3+0x21e>
c00270b2:	eb c1                	jmp    c0027075 <__divsf3+0x91>
c00270b4:	56                   	push   esi
c00270b5:	56                   	push   esi
c00270b6:	50                   	push   eax
c00270b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ba:	e8 69 03 00 00       	call   c0027428 <__nesf2>
c00270bf:	83 c4 10             	add    esp,0x10
c00270c2:	85 c0                	test   eax,eax
c00270c4:	0f 84 31 01 00 00    	je     c00271fb <__divsf3+0x217>
c00270ca:	eb a9                	jmp    c0027075 <__divsf3+0x91>
c00270cc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00270cf:	c1 e3 08             	shl    ebx,0x8
c00270d2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00270d8:	8d 57 01             	lea    edx,[edi+0x1]
c00270db:	80 e2 fe             	and    dl,0xfe
c00270de:	75 71                	jne    c0027151 <__divsf3+0x16d>
c00270e0:	85 c0                	test   eax,eax
c00270e2:	ba 00 00 00 00       	mov    edx,0x0
c00270e7:	74 2f                	je     c0027118 <__divsf3+0x134>
c00270e9:	51                   	push   ecx
c00270ea:	51                   	push   ecx
c00270eb:	52                   	push   edx
c00270ec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ef:	e8 f9 02 00 00       	call   c00273ed <__eqsf2>
c00270f4:	83 c4 10             	add    esp,0x10
c00270f7:	85 c0                	test   eax,eax
c00270f9:	0f 85 03 01 00 00    	jne    c0027202 <__divsf3+0x21e>
c00270ff:	31 d2                	xor    edx,edx
c0027101:	89 d3                	mov    ebx,edx
c0027103:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027106:	31 f8                	xor    eax,edi
c0027108:	0f 89 f7 00 00 00    	jns    c0027205 <__divsf3+0x221>
c002710e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027113:	e9 ed 00 00 00       	jmp    c0027205 <__divsf3+0x221>
c0027118:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002711b:	50                   	push   eax
c002711c:	50                   	push   eax
c002711d:	52                   	push   edx
c002711e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027121:	e8 c7 02 00 00       	call   c00273ed <__eqsf2>
c0027126:	83 c4 10             	add    esp,0x10
c0027129:	85 c0                	test   eax,eax
c002712b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002712e:	75 16                	jne    c0027146 <__divsf3+0x162>
c0027130:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027133:	31 fb                	xor    ebx,edi
c0027135:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002713b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027141:	e9 bf 00 00 00       	jmp    c0027205 <__divsf3+0x221>
c0027146:	8d 46 01             	lea    eax,[esi+0x1]
c0027149:	01 db                	add    ebx,ebx
c002714b:	78 04                	js     c0027151 <__divsf3+0x16d>
c002714d:	89 c6                	mov    esi,eax
c002714f:	eb f5                	jmp    c0027146 <__divsf3+0x162>
c0027151:	89 c8                	mov    eax,ecx
c0027153:	0d 00 00 00 80       	or     eax,0x80000000
c0027158:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002715e:	31 d2                	xor    edx,edx
c0027160:	39 d8                	cmp    eax,ebx
c0027162:	72 07                	jb     c002716b <__divsf3+0x187>
c0027164:	29 d8                	sub    eax,ebx
c0027166:	ba 01 00 00 00       	mov    edx,0x1
c002716b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027172:	01 d2                	add    edx,edx
c0027174:	89 c1                	mov    ecx,eax
c0027176:	01 c0                	add    eax,eax
c0027178:	85 c9                	test   ecx,ecx
c002717a:	78 04                	js     c0027180 <__divsf3+0x19c>
c002717c:	39 c3                	cmp    ebx,eax
c002717e:	77 05                	ja     c0027185 <__divsf3+0x1a1>
c0027180:	29 d8                	sub    eax,ebx
c0027182:	83 ca 01             	or     edx,0x1
c0027185:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027188:	75 e8                	jne    c0027172 <__divsf3+0x18e>
c002718a:	85 c0                	test   eax,eax
c002718c:	0f 95 c0             	setne  al
c002718f:	0f b6 c0             	movzx  eax,al
c0027192:	c1 e2 06             	shl    edx,0x6
c0027195:	09 c2                	or     edx,eax
c0027197:	78 03                	js     c002719c <__divsf3+0x1b8>
c0027199:	01 d2                	add    edx,edx
c002719b:	4e                   	dec    esi
c002719c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00271a2:	7f 22                	jg     c00271c6 <__divsf3+0x1e2>
c00271a4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00271aa:	85 f6                	test   esi,esi
c00271ac:	7f 23                	jg     c00271d1 <__divsf3+0x1ed>
c00271ae:	83 fe e9             	cmp    esi,0xffffffe9
c00271b1:	7c 1a                	jl     c00271cd <__divsf3+0x1e9>
c00271b3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00271b9:	b9 01 00 00 00       	mov    ecx,0x1
c00271be:	29 f1                	sub    ecx,esi
c00271c0:	d3 ea                	shr    edx,cl
c00271c2:	31 f6                	xor    esi,esi
c00271c4:	eb 0b                	jmp    c00271d1 <__divsf3+0x1ed>
c00271c6:	be ff 00 00 00       	mov    esi,0xff
c00271cb:	eb 02                	jmp    c00271cf <__divsf3+0x1eb>
c00271cd:	31 f6                	xor    esi,esi
c00271cf:	31 d2                	xor    edx,edx
c00271d1:	89 d0                	mov    eax,edx
c00271d3:	c1 e8 08             	shr    eax,0x8
c00271d6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00271d9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00271df:	09 fe                	or     esi,edi
c00271e1:	c1 e6 17             	shl    esi,0x17
c00271e4:	09 c6                	or     esi,eax
c00271e6:	f6 c2 7f             	test   dl,0x7f
c00271e9:	0f 95 c1             	setne  cl
c00271ec:	09 c8                	or     eax,ecx
c00271ee:	83 e0 01             	and    eax,0x1
c00271f1:	c1 ea 07             	shr    edx,0x7
c00271f4:	21 c2                	and    edx,eax
c00271f6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00271f9:	eb 0a                	jmp    c0027205 <__divsf3+0x221>
c00271fb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027200:	eb 03                	jmp    c0027205 <__divsf3+0x221>
c0027202:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027205:	89 d8                	mov    eax,ebx
c0027207:	8d 65 f4             	lea    esp,[ebp-0xc]
c002720a:	5b                   	pop    ebx
c002720b:	5e                   	pop    esi
c002720c:	5f                   	pop    edi
c002720d:	5d                   	pop    ebp
c002720e:	c3                   	ret    

c002720f <__floatsisf>:
c002720f:	55                   	push   ebp
c0027210:	89 e5                	mov    ebp,esp
c0027212:	53                   	push   ebx
c0027213:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027216:	85 d2                	test   edx,edx
c0027218:	7e 2b                	jle    c0027245 <__floatsisf+0x36>
c002721a:	0f bd ca             	bsr    ecx,edx
c002721d:	83 f1 1f             	xor    ecx,0x1f
c0027220:	d3 e2                	shl    edx,cl
c0027222:	89 d0                	mov    eax,edx
c0027224:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027229:	89 c3                	mov    ebx,eax
c002722b:	c1 eb 08             	shr    ebx,0x8
c002722e:	80 e2 7f             	and    dl,0x7f
c0027231:	0f 95 c2             	setne  dl
c0027234:	09 da                	or     edx,ebx
c0027236:	83 e2 01             	and    edx,0x1
c0027239:	c1 e8 07             	shr    eax,0x7
c002723c:	21 c2                	and    edx,eax
c002723e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027243:	eb 32                	jmp    c0027277 <__floatsisf+0x68>
c0027245:	b8 00 00 00 00       	mov    eax,0x0
c002724a:	74 34                	je     c0027280 <__floatsisf+0x71>
c002724c:	f7 da                	neg    edx
c002724e:	0f bd ca             	bsr    ecx,edx
c0027251:	83 f1 1f             	xor    ecx,0x1f
c0027254:	d3 e2                	shl    edx,cl
c0027256:	89 d0                	mov    eax,edx
c0027258:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002725d:	89 c3                	mov    ebx,eax
c002725f:	c1 eb 08             	shr    ebx,0x8
c0027262:	80 e2 7f             	and    dl,0x7f
c0027265:	0f 95 c2             	setne  dl
c0027268:	09 da                	or     edx,ebx
c002726a:	83 e2 01             	and    edx,0x1
c002726d:	c1 e8 07             	shr    eax,0x7
c0027270:	21 c2                	and    edx,eax
c0027272:	b8 9e 01 00 00       	mov    eax,0x19e
c0027277:	29 c8                	sub    eax,ecx
c0027279:	c1 e0 17             	shl    eax,0x17
c002727c:	09 d8                	or     eax,ebx
c002727e:	01 d0                	add    eax,edx
c0027280:	5b                   	pop    ebx
c0027281:	5d                   	pop    ebp
c0027282:	c3                   	ret    

c0027283 <__floatunsisf>:
c0027283:	55                   	push   ebp
c0027284:	89 e5                	mov    ebp,esp
c0027286:	53                   	push   ebx
c0027287:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002728a:	31 c0                	xor    eax,eax
c002728c:	85 d2                	test   edx,edx
c002728e:	74 32                	je     c00272c2 <__floatunsisf+0x3f>
c0027290:	0f bd ca             	bsr    ecx,edx
c0027293:	83 f1 1f             	xor    ecx,0x1f
c0027296:	d3 e2                	shl    edx,cl
c0027298:	89 d0                	mov    eax,edx
c002729a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002729f:	89 c3                	mov    ebx,eax
c00272a1:	c1 eb 08             	shr    ebx,0x8
c00272a4:	80 e2 7f             	and    dl,0x7f
c00272a7:	0f 95 c2             	setne  dl
c00272aa:	09 da                	or     edx,ebx
c00272ac:	83 e2 01             	and    edx,0x1
c00272af:	c1 e8 07             	shr    eax,0x7
c00272b2:	21 c2                	and    edx,eax
c00272b4:	b8 9e 00 00 00       	mov    eax,0x9e
c00272b9:	29 c8                	sub    eax,ecx
c00272bb:	c1 e0 17             	shl    eax,0x17
c00272be:	09 d8                	or     eax,ebx
c00272c0:	01 d0                	add    eax,edx
c00272c2:	5b                   	pop    ebx
c00272c3:	5d                   	pop    ebp
c00272c4:	c3                   	ret    

c00272c5 <__fixsfsi>:
c00272c5:	55                   	push   ebp
c00272c6:	89 e5                	mov    ebp,esp
c00272c8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272cb:	89 d1                	mov    ecx,edx
c00272cd:	c1 e1 08             	shl    ecx,0x8
c00272d0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00272d6:	c1 fa 17             	sar    edx,0x17
c00272d9:	78 1c                	js     c00272f7 <__fixsfsi+0x32>
c00272db:	83 ea 7f             	sub    edx,0x7f
c00272de:	31 c0                	xor    eax,eax
c00272e0:	83 fa 1e             	cmp    edx,0x1e
c00272e3:	77 40                	ja     c0027325 <__fixsfsi+0x60>
c00272e5:	89 c8                	mov    eax,ecx
c00272e7:	0d 00 00 00 80       	or     eax,0x80000000
c00272ec:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272f1:	29 d1                	sub    ecx,edx
c00272f3:	d3 e8                	shr    eax,cl
c00272f5:	eb 2e                	jmp    c0027325 <__fixsfsi+0x60>
c00272f7:	31 c0                	xor    eax,eax
c00272f9:	81 c2 81 00 00 00    	add    edx,0x81
c00272ff:	78 24                	js     c0027325 <__fixsfsi+0x60>
c0027301:	83 fa 1e             	cmp    edx,0x1e
c0027304:	7e 09                	jle    c002730f <__fixsfsi+0x4a>
c0027306:	83 fa 1f             	cmp    edx,0x1f
c0027309:	75 18                	jne    c0027323 <__fixsfsi+0x5e>
c002730b:	85 c9                	test   ecx,ecx
c002730d:	75 14                	jne    c0027323 <__fixsfsi+0x5e>
c002730f:	89 c8                	mov    eax,ecx
c0027311:	0d 00 00 00 80       	or     eax,0x80000000
c0027316:	b9 1f 00 00 00       	mov    ecx,0x1f
c002731b:	29 d1                	sub    ecx,edx
c002731d:	d3 e8                	shr    eax,cl
c002731f:	f7 d8                	neg    eax
c0027321:	eb 02                	jmp    c0027325 <__fixsfsi+0x60>
c0027323:	31 c0                	xor    eax,eax
c0027325:	5d                   	pop    ebp
c0027326:	c3                   	ret    

c0027327 <__fixunssfsi>:
c0027327:	55                   	push   ebp
c0027328:	89 e5                	mov    ebp,esp
c002732a:	53                   	push   ebx
c002732b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002732e:	89 d3                	mov    ebx,edx
c0027330:	c1 fb 17             	sar    ebx,0x17
c0027333:	83 eb 7f             	sub    ebx,0x7f
c0027336:	31 c0                	xor    eax,eax
c0027338:	83 fb 1f             	cmp    ebx,0x1f
c002733b:	77 18                	ja     c0027355 <__fixunssfsi+0x2e>
c002733d:	89 d0                	mov    eax,edx
c002733f:	c1 e0 08             	shl    eax,0x8
c0027342:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027347:	0d 00 00 00 80       	or     eax,0x80000000
c002734c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027351:	29 d9                	sub    ecx,ebx
c0027353:	d3 e8                	shr    eax,cl
c0027355:	5b                   	pop    ebx
c0027356:	5d                   	pop    ebp
c0027357:	c3                   	ret    

c0027358 <__cmpsf2>:
c0027358:	55                   	push   ebp
c0027359:	89 e5                	mov    ebp,esp
c002735b:	57                   	push   edi
c002735c:	56                   	push   esi
c002735d:	53                   	push   ebx
c002735e:	83 ec 24             	sub    esp,0x24
c0027361:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027364:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027367:	e8 4f 10 00 00       	call   c00283bb <__truncdfsf2>
c002736c:	5a                   	pop    edx
c002736d:	59                   	pop    ecx
c002736e:	89 c3                	mov    ebx,eax
c0027370:	c1 e8 17             	shr    eax,0x17
c0027373:	0f b6 f0             	movzx  esi,al
c0027376:	89 d8                	mov    eax,ebx
c0027378:	c1 e8 1f             	shr    eax,0x1f
c002737b:	31 c6                	xor    esi,eax
c002737d:	c1 e3 08             	shl    ebx,0x8
c0027380:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027383:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027386:	e8 30 10 00 00       	call   c00283bb <__truncdfsf2>
c002738b:	83 c4 10             	add    esp,0x10
c002738e:	89 c1                	mov    ecx,eax
c0027390:	c1 e9 17             	shr    ecx,0x17
c0027393:	0f b6 c9             	movzx  ecx,cl
c0027396:	89 c7                	mov    edi,eax
c0027398:	c1 ef 1f             	shr    edi,0x1f
c002739b:	89 ca                	mov    edx,ecx
c002739d:	31 fa                	xor    edx,edi
c002739f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00273a2:	c1 e0 08             	shl    eax,0x8
c00273a5:	89 c2                	mov    edx,eax
c00273a7:	89 d8                	mov    eax,ebx
c00273a9:	09 d0                	or     eax,edx
c00273ab:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273b0:	09 f0                	or     eax,esi
c00273b2:	75 08                	jne    c00273bc <__cmpsf2+0x64>
c00273b4:	31 c0                	xor    eax,eax
c00273b6:	39 f9                	cmp    ecx,edi
c00273b8:	75 0c                	jne    c00273c6 <__cmpsf2+0x6e>
c00273ba:	eb 29                	jmp    c00273e5 <__cmpsf2+0x8d>
c00273bc:	b8 01 00 00 00       	mov    eax,0x1
c00273c1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00273c4:	7f 1f                	jg     c00273e5 <__cmpsf2+0x8d>
c00273c6:	83 c8 ff             	or     eax,0xffffffff
c00273c9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00273cc:	7c 17                	jl     c00273e5 <__cmpsf2+0x8d>
c00273ce:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00273d4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273da:	b8 01 00 00 00       	mov    eax,0x1
c00273df:	39 d3                	cmp    ebx,edx
c00273e1:	77 02                	ja     c00273e5 <__cmpsf2+0x8d>
c00273e3:	19 c0                	sbb    eax,eax
c00273e5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273e8:	5b                   	pop    ebx
c00273e9:	5e                   	pop    esi
c00273ea:	5f                   	pop    edi
c00273eb:	5d                   	pop    ebp
c00273ec:	c3                   	ret    

c00273ed <__eqsf2>:
c00273ed:	55                   	push   ebp
c00273ee:	89 e5                	mov    ebp,esp
c00273f0:	83 ec 24             	sub    esp,0x24
c00273f3:	6a 01                	push   0x1
c00273f5:	83 ec 0c             	sub    esp,0xc
c00273f8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273fb:	e8 df 10 00 00       	call   c00284df <__extendsfdf2>
c0027400:	83 c4 10             	add    esp,0x10
c0027403:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027406:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027409:	52                   	push   edx
c002740a:	50                   	push   eax
c002740b:	50                   	push   eax
c002740c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002740f:	e8 cb 10 00 00       	call   c00284df <__extendsfdf2>
c0027414:	59                   	pop    ecx
c0027415:	59                   	pop    ecx
c0027416:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027419:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002741c:	52                   	push   edx
c002741d:	50                   	push   eax
c002741e:	e8 35 ff ff ff       	call   c0027358 <__cmpsf2>
c0027423:	83 c4 20             	add    esp,0x20
c0027426:	c9                   	leave  
c0027427:	c3                   	ret    

c0027428 <__nesf2>:
c0027428:	eb c3                	jmp    c00273ed <__eqsf2>

c002742a <__gtsf2>:
c002742a:	55                   	push   ebp
c002742b:	89 e5                	mov    ebp,esp
c002742d:	83 ec 24             	sub    esp,0x24
c0027430:	6a ff                	push   0xffffffff
c0027432:	83 ec 0c             	sub    esp,0xc
c0027435:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027438:	e8 a2 10 00 00       	call   c00284df <__extendsfdf2>
c002743d:	83 c4 10             	add    esp,0x10
c0027440:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027443:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027446:	52                   	push   edx
c0027447:	50                   	push   eax
c0027448:	50                   	push   eax
c0027449:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002744c:	e8 8e 10 00 00       	call   c00284df <__extendsfdf2>
c0027451:	59                   	pop    ecx
c0027452:	59                   	pop    ecx
c0027453:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027456:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027459:	52                   	push   edx
c002745a:	50                   	push   eax
c002745b:	e8 f8 fe ff ff       	call   c0027358 <__cmpsf2>
c0027460:	83 c4 20             	add    esp,0x20
c0027463:	c9                   	leave  
c0027464:	c3                   	ret    

c0027465 <__gesf2>:
c0027465:	eb c3                	jmp    c002742a <__gtsf2>

c0027467 <__ltsf2>:
c0027467:	eb 84                	jmp    c00273ed <__eqsf2>

c0027469 <__lesf2>:
c0027469:	eb 82                	jmp    c00273ed <__eqsf2>

c002746b <__adddf3>:
c002746b:	55                   	push   ebp
c002746c:	89 e5                	mov    ebp,esp
c002746e:	57                   	push   edi
c002746f:	56                   	push   esi
c0027470:	53                   	push   ebx
c0027471:	83 ec 24             	sub    esp,0x24
c0027474:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027477:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002747a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002747d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027480:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027483:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027486:	89 c8                	mov    eax,ecx
c0027488:	89 ce                	mov    esi,ecx
c002748a:	c1 fe 14             	sar    esi,0x14
c002748d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027490:	89 fb                	mov    ebx,edi
c0027492:	89 fa                	mov    edx,edi
c0027494:	c1 e2 0b             	shl    edx,0xb
c0027497:	c1 e0 0b             	shl    eax,0xb
c002749a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002749f:	c1 eb 15             	shr    ebx,0x15
c00274a2:	09 d8                	or     eax,ebx
c00274a4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00274a7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00274aa:	c1 fe 14             	sar    esi,0x14
c00274ad:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274b0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00274b3:	89 f3                	mov    ebx,esi
c00274b5:	c1 e3 0b             	shl    ebx,0xb
c00274b8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00274bb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00274be:	c1 e3 0b             	shl    ebx,0xb
c00274c1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00274c7:	c1 ee 15             	shr    esi,0x15
c00274ca:	09 f3                	or     ebx,esi
c00274cc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00274cf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274d2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00274d5:	0f 88 5f 02 00 00    	js     c002773a <__adddf3+0x2cf>
c00274db:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274de:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00274e1:	85 db                	test   ebx,ebx
c00274e3:	0f 8e c7 00 00 00    	jle    c00275b0 <__adddf3+0x145>
c00274e9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00274f0:	75 1a                	jne    c002750c <__adddf3+0xa1>
c00274f2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274f5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274f8:	0f 84 b2 05 00 00    	je     c0027ab0 <__adddf3+0x645>
c00274fe:	4b                   	dec    ebx
c00274ff:	75 23                	jne    c0027524 <__adddf3+0xb9>
c0027501:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027504:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027507:	e9 99 00 00 00       	jmp    c00275a5 <__adddf3+0x13a>
c002750c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002750f:	f7 d6                	not    esi
c0027511:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027517:	0f 84 93 05 00 00    	je     c0027ab0 <__adddf3+0x645>
c002751d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027524:	83 fb 1f             	cmp    ebx,0x1f
c0027527:	7e 42                	jle    c002756b <__adddf3+0x100>
c0027529:	83 fb 3f             	cmp    ebx,0x3f
c002752c:	0f 8f 7e 05 00 00    	jg     c0027ab0 <__adddf3+0x645>
c0027532:	83 e3 1f             	and    ebx,0x1f
c0027535:	89 d9                	mov    ecx,ebx
c0027537:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002753a:	d3 ef                	shr    edi,cl
c002753c:	31 db                	xor    ebx,ebx
c002753e:	85 c9                	test   ecx,ecx
c0027540:	74 15                	je     c0027557 <__adddf3+0xec>
c0027542:	be 20 00 00 00       	mov    esi,0x20
c0027547:	29 ce                	sub    esi,ecx
c0027549:	89 f1                	mov    ecx,esi
c002754b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002754e:	d3 e6                	shl    esi,cl
c0027550:	31 db                	xor    ebx,ebx
c0027552:	85 f6                	test   esi,esi
c0027554:	0f 95 c3             	setne  bl
c0027557:	31 c9                	xor    ecx,ecx
c0027559:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002755d:	0f 95 c1             	setne  cl
c0027560:	09 cf                	or     edi,ecx
c0027562:	09 fb                	or     ebx,edi
c0027564:	01 da                	add    edx,ebx
c0027566:	83 d0 00             	adc    eax,0x0
c0027569:	eb 3a                	jmp    c00275a5 <__adddf3+0x13a>
c002756b:	bf 20 00 00 00       	mov    edi,0x20
c0027570:	29 df                	sub    edi,ebx
c0027572:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027575:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027578:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002757b:	d3 e6                	shl    esi,cl
c002757d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027580:	88 d9                	mov    cl,bl
c0027582:	d3 ef                	shr    edi,cl
c0027584:	09 fe                	or     esi,edi
c0027586:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027589:	88 d9                	mov    cl,bl
c002758b:	d3 ef                	shr    edi,cl
c002758d:	89 fb                	mov    ebx,edi
c002758f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027592:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027595:	d3 e7                	shl    edi,cl
c0027597:	85 ff                	test   edi,edi
c0027599:	0f 95 c1             	setne  cl
c002759c:	0f b6 c9             	movzx  ecx,cl
c002759f:	09 ce                	or     esi,ecx
c00275a1:	01 f2                	add    edx,esi
c00275a3:	11 d8                	adc    eax,ebx
c00275a5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275a8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275ab:	e9 52 01 00 00       	jmp    c0027702 <__adddf3+0x297>
c00275b0:	0f 84 d5 00 00 00    	je     c002768b <__adddf3+0x220>
c00275b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00275b9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00275bc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275bf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275c2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00275c9:	75 20                	jne    c00275eb <__adddf3+0x180>
c00275cb:	89 d6                	mov    esi,edx
c00275cd:	09 c6                	or     esi,eax
c00275cf:	0f 84 db 04 00 00    	je     c0027ab0 <__adddf3+0x645>
c00275d5:	4b                   	dec    ebx
c00275d6:	75 29                	jne    c0027601 <__adddf3+0x196>
c00275d8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275db:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00275de:	01 d1                	add    ecx,edx
c00275e0:	11 c6                	adc    esi,eax
c00275e2:	89 f0                	mov    eax,esi
c00275e4:	89 ca                	mov    edx,ecx
c00275e6:	e9 17 01 00 00       	jmp    c0027702 <__adddf3+0x297>
c00275eb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00275ee:	f7 d6                	not    esi
c00275f0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275f6:	0f 84 b4 04 00 00    	je     c0027ab0 <__adddf3+0x645>
c00275fc:	0d 00 00 00 80       	or     eax,0x80000000
c0027601:	83 fb 1f             	cmp    ebx,0x1f
c0027604:	7e 48                	jle    c002764e <__adddf3+0x1e3>
c0027606:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027609:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002760c:	83 fb 3f             	cmp    ebx,0x3f
c002760f:	0f 8f 9b 04 00 00    	jg     c0027ab0 <__adddf3+0x645>
c0027615:	83 e3 1f             	and    ebx,0x1f
c0027618:	89 d9                	mov    ecx,ebx
c002761a:	89 c7                	mov    edi,eax
c002761c:	d3 ef                	shr    edi,cl
c002761e:	31 db                	xor    ebx,ebx
c0027620:	85 c9                	test   ecx,ecx
c0027622:	74 12                	je     c0027636 <__adddf3+0x1cb>
c0027624:	be 20 00 00 00       	mov    esi,0x20
c0027629:	29 ce                	sub    esi,ecx
c002762b:	89 f1                	mov    ecx,esi
c002762d:	d3 e0                	shl    eax,cl
c002762f:	31 db                	xor    ebx,ebx
c0027631:	85 c0                	test   eax,eax
c0027633:	0f 95 c3             	setne  bl
c0027636:	31 c0                	xor    eax,eax
c0027638:	85 d2                	test   edx,edx
c002763a:	0f 95 c0             	setne  al
c002763d:	09 c7                	or     edi,eax
c002763f:	09 fb                	or     ebx,edi
c0027641:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027644:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027647:	01 da                	add    edx,ebx
c0027649:	83 d6 00             	adc    esi,0x0
c002764c:	eb 39                	jmp    c0027687 <__adddf3+0x21c>
c002764e:	be 20 00 00 00       	mov    esi,0x20
c0027653:	29 de                	sub    esi,ebx
c0027655:	89 c7                	mov    edi,eax
c0027657:	89 f1                	mov    ecx,esi
c0027659:	d3 e7                	shl    edi,cl
c002765b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002765e:	89 d7                	mov    edi,edx
c0027660:	88 d9                	mov    cl,bl
c0027662:	d3 ef                	shr    edi,cl
c0027664:	89 f9                	mov    ecx,edi
c0027666:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027669:	09 cf                	or     edi,ecx
c002766b:	88 d9                	mov    cl,bl
c002766d:	d3 e8                	shr    eax,cl
c002766f:	89 f1                	mov    ecx,esi
c0027671:	d3 e2                	shl    edx,cl
c0027673:	85 d2                	test   edx,edx
c0027675:	0f 95 c2             	setne  dl
c0027678:	0f b6 d2             	movzx  edx,dl
c002767b:	09 d7                	or     edi,edx
c002767d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027680:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027683:	01 fa                	add    edx,edi
c0027685:	11 c6                	adc    esi,eax
c0027687:	89 f0                	mov    eax,esi
c0027689:	eb 77                	jmp    c0027702 <__adddf3+0x297>
c002768b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002768e:	46                   	inc    esi
c002768f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027692:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027698:	75 41                	jne    c00276db <__adddf3+0x270>
c002769a:	89 d3                	mov    ebx,edx
c002769c:	09 c3                	or     ebx,eax
c002769e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276a5:	75 27                	jne    c00276ce <__adddf3+0x263>
c00276a7:	85 db                	test   ebx,ebx
c00276a9:	0f 84 fb 03 00 00    	je     c0027aaa <__adddf3+0x63f>
c00276af:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276b2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00276b5:	0f 84 f5 03 00 00    	je     c0027ab0 <__adddf3+0x645>
c00276bb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276be:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276c1:	85 c0                	test   eax,eax
c00276c3:	0f 89 91 03 00 00    	jns    c0027a5a <__adddf3+0x5ef>
c00276c9:	e9 85 03 00 00       	jmp    c0027a53 <__adddf3+0x5e8>
c00276ce:	85 db                	test   ebx,ebx
c00276d0:	0f 85 da 03 00 00    	jne    c0027ab0 <__adddf3+0x645>
c00276d6:	e9 cf 03 00 00       	jmp    c0027aaa <__adddf3+0x63f>
c00276db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276e1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276e4:	f7 d1                	not    ecx
c00276e6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00276ec:	0f 84 70 03 00 00    	je     c0027a62 <__adddf3+0x5f7>
c00276f2:	d1 ea                	shr    edx,1
c00276f4:	89 c1                	mov    ecx,eax
c00276f6:	c1 e1 1f             	shl    ecx,0x1f
c00276f9:	09 ca                	or     edx,ecx
c00276fb:	d1 e8                	shr    eax,1
c00276fd:	e9 6f 03 00 00       	jmp    c0027a71 <__adddf3+0x606>
c0027702:	85 c0                	test   eax,eax
c0027704:	0f 89 67 03 00 00    	jns    c0027a71 <__adddf3+0x606>
c002770a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002770d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027710:	f7 d1                	not    ecx
c0027712:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027718:	0f 84 44 03 00 00    	je     c0027a62 <__adddf3+0x5f7>
c002771e:	89 d1                	mov    ecx,edx
c0027720:	d1 e9                	shr    ecx,1
c0027722:	83 e2 01             	and    edx,0x1
c0027725:	09 ca                	or     edx,ecx
c0027727:	89 c1                	mov    ecx,eax
c0027729:	c1 e1 1f             	shl    ecx,0x1f
c002772c:	09 ca                	or     edx,ecx
c002772e:	d1 e8                	shr    eax,1
c0027730:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027735:	e9 37 03 00 00       	jmp    c0027a71 <__adddf3+0x606>
c002773a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002773d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027743:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027746:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027749:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002774f:	29 de                	sub    esi,ebx
c0027751:	85 f6                	test   esi,esi
c0027753:	0f 8e bd 00 00 00    	jle    c0027816 <__adddf3+0x3ab>
c0027759:	85 db                	test   ebx,ebx
c002775b:	75 17                	jne    c0027774 <__adddf3+0x309>
c002775d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027760:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027763:	0f 84 47 03 00 00    	je     c0027ab0 <__adddf3+0x645>
c0027769:	4e                   	dec    esi
c002776a:	75 20                	jne    c002778c <__adddf3+0x321>
c002776c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002776f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027772:	eb 5b                	jmp    c00277cf <__adddf3+0x364>
c0027774:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027777:	f7 d3                	not    ebx
c0027779:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002777f:	0f 84 2b 03 00 00    	je     c0027ab0 <__adddf3+0x645>
c0027785:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002778c:	83 fe 1f             	cmp    esi,0x1f
c002778f:	7e 49                	jle    c00277da <__adddf3+0x36f>
c0027791:	83 fe 3f             	cmp    esi,0x3f
c0027794:	0f 8f 16 03 00 00    	jg     c0027ab0 <__adddf3+0x645>
c002779a:	83 e6 1f             	and    esi,0x1f
c002779d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277a0:	89 f1                	mov    ecx,esi
c00277a2:	d3 ef                	shr    edi,cl
c00277a4:	31 db                	xor    ebx,ebx
c00277a6:	85 f6                	test   esi,esi
c00277a8:	74 13                	je     c00277bd <__adddf3+0x352>
c00277aa:	b9 20 00 00 00       	mov    ecx,0x20
c00277af:	29 f1                	sub    ecx,esi
c00277b1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277b4:	d3 e6                	shl    esi,cl
c00277b6:	31 db                	xor    ebx,ebx
c00277b8:	85 f6                	test   esi,esi
c00277ba:	0f 95 c3             	setne  bl
c00277bd:	31 c9                	xor    ecx,ecx
c00277bf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00277c3:	0f 95 c1             	setne  cl
c00277c6:	09 cf                	or     edi,ecx
c00277c8:	09 fb                	or     ebx,edi
c00277ca:	29 da                	sub    edx,ebx
c00277cc:	83 d8 00             	sbb    eax,0x0
c00277cf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277d5:	e9 aa 01 00 00       	jmp    c0027984 <__adddf3+0x519>
c00277da:	bf 20 00 00 00       	mov    edi,0x20
c00277df:	29 f7                	sub    edi,esi
c00277e1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277e4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00277e7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00277ea:	d3 e3                	shl    ebx,cl
c00277ec:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00277ef:	89 f1                	mov    ecx,esi
c00277f1:	d3 ef                	shr    edi,cl
c00277f3:	09 fb                	or     ebx,edi
c00277f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277f8:	89 f1                	mov    ecx,esi
c00277fa:	d3 ef                	shr    edi,cl
c00277fc:	89 fe                	mov    esi,edi
c00277fe:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027801:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027804:	d3 e7                	shl    edi,cl
c0027806:	85 ff                	test   edi,edi
c0027808:	0f 95 c1             	setne  cl
c002780b:	0f b6 c9             	movzx  ecx,cl
c002780e:	09 cb                	or     ebx,ecx
c0027810:	29 da                	sub    edx,ebx
c0027812:	19 f0                	sbb    eax,esi
c0027814:	eb b9                	jmp    c00277cf <__adddf3+0x364>
c0027816:	0f 84 cd 00 00 00    	je     c00278e9 <__adddf3+0x47e>
c002781c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002781f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027822:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027825:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027829:	75 1b                	jne    c0027846 <__adddf3+0x3db>
c002782b:	89 d6                	mov    esi,edx
c002782d:	09 c6                	or     esi,eax
c002782f:	0f 84 7b 02 00 00    	je     c0027ab0 <__adddf3+0x645>
c0027835:	4b                   	dec    ebx
c0027836:	75 24                	jne    c002785c <__adddf3+0x3f1>
c0027838:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002783b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002783e:	29 d1                	sub    ecx,edx
c0027840:	19 c6                	sbb    esi,eax
c0027842:	89 ca                	mov    edx,ecx
c0027844:	eb 61                	jmp    c00278a7 <__adddf3+0x43c>
c0027846:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027849:	f7 d6                	not    esi
c002784b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027851:	0f 84 59 02 00 00    	je     c0027ab0 <__adddf3+0x645>
c0027857:	0d 00 00 00 80       	or     eax,0x80000000
c002785c:	83 fb 1f             	cmp    ebx,0x1f
c002785f:	7e 4d                	jle    c00278ae <__adddf3+0x443>
c0027861:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027864:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027867:	83 fb 3f             	cmp    ebx,0x3f
c002786a:	0f 8f 40 02 00 00    	jg     c0027ab0 <__adddf3+0x645>
c0027870:	83 e3 1f             	and    ebx,0x1f
c0027873:	89 d9                	mov    ecx,ebx
c0027875:	89 c7                	mov    edi,eax
c0027877:	d3 ef                	shr    edi,cl
c0027879:	31 db                	xor    ebx,ebx
c002787b:	85 c9                	test   ecx,ecx
c002787d:	74 12                	je     c0027891 <__adddf3+0x426>
c002787f:	be 20 00 00 00       	mov    esi,0x20
c0027884:	29 ce                	sub    esi,ecx
c0027886:	89 f1                	mov    ecx,esi
c0027888:	d3 e0                	shl    eax,cl
c002788a:	31 db                	xor    ebx,ebx
c002788c:	85 c0                	test   eax,eax
c002788e:	0f 95 c3             	setne  bl
c0027891:	31 c0                	xor    eax,eax
c0027893:	85 d2                	test   edx,edx
c0027895:	0f 95 c0             	setne  al
c0027898:	09 c7                	or     edi,eax
c002789a:	09 fb                	or     ebx,edi
c002789c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002789f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278a2:	29 da                	sub    edx,ebx
c00278a4:	83 de 00             	sbb    esi,0x0
c00278a7:	89 f0                	mov    eax,esi
c00278a9:	e9 d6 00 00 00       	jmp    c0027984 <__adddf3+0x519>
c00278ae:	be 20 00 00 00       	mov    esi,0x20
c00278b3:	29 de                	sub    esi,ebx
c00278b5:	89 c7                	mov    edi,eax
c00278b7:	89 f1                	mov    ecx,esi
c00278b9:	d3 e7                	shl    edi,cl
c00278bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00278be:	89 d7                	mov    edi,edx
c00278c0:	88 d9                	mov    cl,bl
c00278c2:	d3 ef                	shr    edi,cl
c00278c4:	89 f9                	mov    ecx,edi
c00278c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278c9:	09 cf                	or     edi,ecx
c00278cb:	88 d9                	mov    cl,bl
c00278cd:	d3 e8                	shr    eax,cl
c00278cf:	89 f1                	mov    ecx,esi
c00278d1:	d3 e2                	shl    edx,cl
c00278d3:	85 d2                	test   edx,edx
c00278d5:	0f 95 c2             	setne  dl
c00278d8:	0f b6 d2             	movzx  edx,dl
c00278db:	09 d7                	or     edi,edx
c00278dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278e3:	29 fa                	sub    edx,edi
c00278e5:	19 c6                	sbb    esi,eax
c00278e7:	eb be                	jmp    c00278a7 <__adddf3+0x43c>
c00278e9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278ec:	8d 5e 01             	lea    ebx,[esi+0x1]
c00278ef:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00278f5:	75 6a                	jne    c0027961 <__adddf3+0x4f6>
c00278f7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278fb:	75 58                	jne    c0027955 <__adddf3+0x4ea>
c00278fd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027900:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027903:	89 d6                	mov    esi,edx
c0027905:	09 c6                	or     esi,eax
c0027907:	75 17                	jne    c0027920 <__adddf3+0x4b5>
c0027909:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002790c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002790f:	85 db                	test   ebx,ebx
c0027911:	0f 85 99 01 00 00    	jne    c0027ab0 <__adddf3+0x645>
c0027917:	31 ff                	xor    edi,edi
c0027919:	31 c9                	xor    ecx,ecx
c002791b:	e9 90 01 00 00       	jmp    c0027ab0 <__adddf3+0x645>
c0027920:	85 db                	test   ebx,ebx
c0027922:	0f 84 88 01 00 00    	je     c0027ab0 <__adddf3+0x645>
c0027928:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002792b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002792e:	85 c0                	test   eax,eax
c0027930:	79 10                	jns    c0027942 <__adddf3+0x4d7>
c0027932:	31 c9                	xor    ecx,ecx
c0027934:	f7 da                	neg    edx
c0027936:	0f 95 c1             	setne  cl
c0027939:	01 c8                	add    eax,ecx
c002793b:	f7 d8                	neg    eax
c002793d:	e9 2f 01 00 00       	jmp    c0027a71 <__adddf3+0x606>
c0027942:	31 ff                	xor    edi,edi
c0027944:	31 c9                	xor    ecx,ecx
c0027946:	89 c3                	mov    ebx,eax
c0027948:	09 d3                	or     ebx,edx
c002794a:	0f 84 60 01 00 00    	je     c0027ab0 <__adddf3+0x645>
c0027950:	e9 05 01 00 00       	jmp    c0027a5a <__adddf3+0x5ef>
c0027955:	31 ff                	xor    edi,edi
c0027957:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002795c:	e9 4f 01 00 00       	jmp    c0027ab0 <__adddf3+0x645>
c0027961:	89 c1                	mov    ecx,eax
c0027963:	89 d0                	mov    eax,edx
c0027965:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027968:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002796b:	89 ca                	mov    edx,ecx
c002796d:	85 c9                	test   ecx,ecx
c002796f:	79 2c                	jns    c002799d <__adddf3+0x532>
c0027971:	31 c9                	xor    ecx,ecx
c0027973:	f7 d8                	neg    eax
c0027975:	0f 95 c1             	setne  cl
c0027978:	01 ca                	add    edx,ecx
c002797a:	f7 da                	neg    edx
c002797c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002797f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027982:	eb 19                	jmp    c002799d <__adddf3+0x532>
c0027984:	85 c0                	test   eax,eax
c0027986:	0f 89 e5 00 00 00    	jns    c0027a71 <__adddf3+0x606>
c002798c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027991:	89 c1                	mov    ecx,eax
c0027993:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027996:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027999:	89 d0                	mov    eax,edx
c002799b:	89 ca                	mov    edx,ecx
c002799d:	85 d2                	test   edx,edx
c002799f:	74 59                	je     c00279fa <__adddf3+0x58f>
c00279a1:	0f bd da             	bsr    ebx,edx
c00279a4:	83 f3 1f             	xor    ebx,0x1f
c00279a7:	88 d9                	mov    cl,bl
c00279a9:	d3 e2                	shl    edx,cl
c00279ab:	bf 20 00 00 00       	mov    edi,0x20
c00279b0:	89 f9                	mov    ecx,edi
c00279b2:	29 d9                	sub    ecx,ebx
c00279b4:	89 c6                	mov    esi,eax
c00279b6:	d3 ee                	shr    esi,cl
c00279b8:	09 d6                	or     esi,edx
c00279ba:	88 d9                	mov    cl,bl
c00279bc:	d3 e0                	shl    eax,cl
c00279be:	89 c2                	mov    edx,eax
c00279c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279c3:	25 ff 07 00 00       	and    eax,0x7ff
c00279c8:	39 d8                	cmp    eax,ebx
c00279ca:	7f 22                	jg     c00279ee <__adddf3+0x583>
c00279cc:	29 c3                	sub    ebx,eax
c00279ce:	43                   	inc    ebx
c00279cf:	88 d9                	mov    cl,bl
c00279d1:	d3 ea                	shr    edx,cl
c00279d3:	29 df                	sub    edi,ebx
c00279d5:	89 f9                	mov    ecx,edi
c00279d7:	89 f0                	mov    eax,esi
c00279d9:	d3 e0                	shl    eax,cl
c00279db:	09 c2                	or     edx,eax
c00279dd:	89 f0                	mov    eax,esi
c00279df:	88 d9                	mov    cl,bl
c00279e1:	d3 e8                	shr    eax,cl
c00279e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279e6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00279ec:	eb 6f                	jmp    c0027a5d <__adddf3+0x5f2>
c00279ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279f1:	29 d8                	sub    eax,ebx
c00279f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279f6:	89 f0                	mov    eax,esi
c00279f8:	eb 59                	jmp    c0027a53 <__adddf3+0x5e8>
c00279fa:	85 c0                	test   eax,eax
c00279fc:	74 6a                	je     c0027a68 <__adddf3+0x5fd>
c00279fe:	0f bd c8             	bsr    ecx,eax
c0027a01:	83 f1 1f             	xor    ecx,0x1f
c0027a04:	d3 e0                	shl    eax,cl
c0027a06:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a09:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a0f:	83 c1 20             	add    ecx,0x20
c0027a12:	39 cb                	cmp    ebx,ecx
c0027a14:	7f 35                	jg     c0027a4b <__adddf3+0x5e0>
c0027a16:	29 d9                	sub    ecx,ebx
c0027a18:	8d 71 01             	lea    esi,[ecx+0x1]
c0027a1b:	83 fe 1f             	cmp    esi,0x1f
c0027a1e:	7e 09                	jle    c0027a29 <__adddf3+0x5be>
c0027a20:	83 e9 1f             	sub    ecx,0x1f
c0027a23:	d3 e8                	shr    eax,cl
c0027a25:	89 c3                	mov    ebx,eax
c0027a27:	eb 11                	jmp    c0027a3a <__adddf3+0x5cf>
c0027a29:	b9 20 00 00 00       	mov    ecx,0x20
c0027a2e:	29 f1                	sub    ecx,esi
c0027a30:	89 c3                	mov    ebx,eax
c0027a32:	d3 e3                	shl    ebx,cl
c0027a34:	89 f1                	mov    ecx,esi
c0027a36:	d3 e8                	shr    eax,cl
c0027a38:	89 c2                	mov    edx,eax
c0027a3a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a3d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027a42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a45:	89 d0                	mov    eax,edx
c0027a47:	89 da                	mov    edx,ebx
c0027a49:	eb 26                	jmp    c0027a71 <__adddf3+0x606>
c0027a4b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a4e:	29 cf                	sub    edi,ecx
c0027a50:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a53:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a58:	eb 17                	jmp    c0027a71 <__adddf3+0x606>
c0027a5a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a5d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a60:	eb 0f                	jmp    c0027a71 <__adddf3+0x606>
c0027a62:	31 d2                	xor    edx,edx
c0027a64:	31 c0                	xor    eax,eax
c0027a66:	eb 09                	jmp    c0027a71 <__adddf3+0x606>
c0027a68:	89 c2                	mov    edx,eax
c0027a6a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027a71:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a74:	c1 e1 14             	shl    ecx,0x14
c0027a77:	89 c3                	mov    ebx,eax
c0027a79:	c1 eb 0b             	shr    ebx,0xb
c0027a7c:	09 d9                	or     ecx,ebx
c0027a7e:	89 d3                	mov    ebx,edx
c0027a80:	c1 eb 0b             	shr    ebx,0xb
c0027a83:	c1 e0 15             	shl    eax,0x15
c0027a86:	09 d8                	or     eax,ebx
c0027a88:	89 c7                	mov    edi,eax
c0027a8a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027a90:	0f 95 c0             	setne  al
c0027a93:	89 c6                	mov    esi,eax
c0027a95:	09 f3                	or     ebx,esi
c0027a97:	83 e3 01             	and    ebx,0x1
c0027a9a:	c1 ea 0a             	shr    edx,0xa
c0027a9d:	21 da                	and    edx,ebx
c0027a9f:	89 f8                	mov    eax,edi
c0027aa1:	01 d0                	add    eax,edx
c0027aa3:	83 d1 00             	adc    ecx,0x0
c0027aa6:	89 c7                	mov    edi,eax
c0027aa8:	eb 06                	jmp    c0027ab0 <__adddf3+0x645>
c0027aaa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027aad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ab0:	89 f8                	mov    eax,edi
c0027ab2:	89 ca                	mov    edx,ecx
c0027ab4:	83 c4 24             	add    esp,0x24
c0027ab7:	5b                   	pop    ebx
c0027ab8:	5e                   	pop    esi
c0027ab9:	5f                   	pop    edi
c0027aba:	5d                   	pop    ebp
c0027abb:	c3                   	ret    

c0027abc <__subdf3>:
c0027abc:	55                   	push   ebp
c0027abd:	89 e5                	mov    ebp,esp
c0027abf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ac2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027ac5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027acb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027ace:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027ad1:	5d                   	pop    ebp
c0027ad2:	e9 94 f9 ff ff       	jmp    c002746b <__adddf3>

c0027ad7 <__negdf2>:
c0027ad7:	55                   	push   ebp
c0027ad8:	89 e5                	mov    ebp,esp
c0027ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027add:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ae0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ae6:	5d                   	pop    ebp
c0027ae7:	c3                   	ret    

c0027ae8 <__muldf3>:
c0027ae8:	55                   	push   ebp
c0027ae9:	89 e5                	mov    ebp,esp
c0027aeb:	57                   	push   edi
c0027aec:	56                   	push   esi
c0027aed:	53                   	push   ebx
c0027aee:	83 ec 24             	sub    esp,0x24
c0027af1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027af4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027af7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027afa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027afd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b00:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027b03:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b06:	89 c8                	mov    eax,ecx
c0027b08:	c1 f8 14             	sar    eax,0x14
c0027b0b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b0e:	89 f8                	mov    eax,edi
c0027b10:	89 fb                	mov    ebx,edi
c0027b12:	c1 e3 0b             	shl    ebx,0xb
c0027b15:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027b18:	c1 e1 0b             	shl    ecx,0xb
c0027b1b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b21:	c1 e8 15             	shr    eax,0x15
c0027b24:	09 c1                	or     ecx,eax
c0027b26:	89 d6                	mov    esi,edx
c0027b28:	89 d0                	mov    eax,edx
c0027b2a:	c1 f8 14             	sar    eax,0x14
c0027b2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027b30:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027b33:	89 c3                	mov    ebx,eax
c0027b35:	c1 e3 0b             	shl    ebx,0xb
c0027b38:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027b3b:	c1 e6 0b             	shl    esi,0xb
c0027b3e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b44:	c1 e8 15             	shr    eax,0x15
c0027b47:	09 c6                	or     esi,eax
c0027b49:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b4c:	25 ff 07 00 00       	and    eax,0x7ff
c0027b51:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b54:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b57:	25 ff 07 00 00       	and    eax,0x7ff
c0027b5c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b5f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b62:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b65:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027b6c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b6f:	40                   	inc    eax
c0027b70:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b75:	0f 85 8d 00 00 00    	jne    c0027c08 <__muldf3+0x120>
c0027b7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b7e:	09 c8                	or     eax,ecx
c0027b80:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027b84:	74 44                	je     c0027bca <__muldf3+0xe2>
c0027b86:	85 c0                	test   eax,eax
c0027b88:	0f 85 31 02 00 00    	jne    c0027dbf <__muldf3+0x2d7>
c0027b8e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b91:	40                   	inc    eax
c0027b92:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b97:	75 13                	jne    c0027bac <__muldf3+0xc4>
c0027b99:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b9c:	09 f1                	or     ecx,esi
c0027b9e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ba2:	74 22                	je     c0027bc6 <__muldf3+0xde>
c0027ba4:	85 c9                	test   ecx,ecx
c0027ba6:	0f 85 0d 02 00 00    	jne    c0027db9 <__muldf3+0x2d1>
c0027bac:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027bb0:	0f 89 09 02 00 00    	jns    c0027dbf <__muldf3+0x2d7>
c0027bb6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027bb9:	05 00 00 00 80       	add    eax,0x80000000
c0027bbe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bc1:	e9 f9 01 00 00       	jmp    c0027dbf <__muldf3+0x2d7>
c0027bc6:	85 c9                	test   ecx,ecx
c0027bc8:	eb 2e                	jmp    c0027bf8 <__muldf3+0x110>
c0027bca:	85 c0                	test   eax,eax
c0027bcc:	74 20                	je     c0027bee <__muldf3+0x106>
c0027bce:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027bd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bd7:	c1 ef 1f             	shr    edi,0x1f
c0027bda:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027bdd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027be0:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027be3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027be6:	09 f9                	or     ecx,edi
c0027be8:	78 1e                	js     c0027c08 <__muldf3+0x120>
c0027bea:	89 c3                	mov    ebx,eax
c0027bec:	eb e0                	jmp    c0027bce <__muldf3+0xe6>
c0027bee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bf1:	f7 d0                	not    eax
c0027bf3:	a9 ff 07 00 00       	test   eax,0x7ff
c0027bf8:	75 b2                	jne    c0027bac <__muldf3+0xc4>
c0027bfa:	31 ff                	xor    edi,edi
c0027bfc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027c03:	e9 b7 01 00 00       	jmp    c0027dbf <__muldf3+0x2d7>
c0027c08:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c0b:	40                   	inc    eax
c0027c0c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c11:	75 57                	jne    c0027c6a <__muldf3+0x182>
c0027c13:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027c16:	09 f0                	or     eax,esi
c0027c18:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c1c:	74 23                	je     c0027c41 <__muldf3+0x159>
c0027c1e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c22:	0f 89 91 01 00 00    	jns    c0027db9 <__muldf3+0x2d1>
c0027c28:	85 c0                	test   eax,eax
c0027c2a:	0f 85 89 01 00 00    	jne    c0027db9 <__muldf3+0x2d1>
c0027c30:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027c33:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027c39:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c3c:	e9 7e 01 00 00       	jmp    c0027dbf <__muldf3+0x2d7>
c0027c41:	85 c0                	test   eax,eax
c0027c43:	75 0c                	jne    c0027c51 <__muldf3+0x169>
c0027c45:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c49:	0f 89 6a 01 00 00    	jns    c0027db9 <__muldf3+0x2d1>
c0027c4f:	eb df                	jmp    c0027c30 <__muldf3+0x148>
c0027c51:	01 f6                	add    esi,esi
c0027c53:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027c56:	c1 ea 1f             	shr    edx,0x1f
c0027c59:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c5c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027c5f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c62:	09 d6                	or     esi,edx
c0027c64:	78 04                	js     c0027c6a <__muldf3+0x182>
c0027c66:	89 c3                	mov    ebx,eax
c0027c68:	eb e7                	jmp    c0027c51 <__muldf3+0x169>
c0027c6a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027c70:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c76:	89 c8                	mov    eax,ecx
c0027c78:	f7 e6                	mul    esi
c0027c7a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027c7d:	89 c7                	mov    edi,eax
c0027c7f:	89 c8                	mov    eax,ecx
c0027c81:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c84:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027c87:	89 c1                	mov    ecx,eax
c0027c89:	89 f0                	mov    eax,esi
c0027c8b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027c8e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027c91:	89 c6                	mov    esi,eax
c0027c93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c96:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c99:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027c9c:	31 c0                	xor    eax,eax
c0027c9e:	01 f1                	add    ecx,esi
c0027ca0:	0f 92 c0             	setb   al
c0027ca3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027ca6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ca9:	83 d6 00             	adc    esi,0x0
c0027cac:	01 c7                	add    edi,eax
c0027cae:	83 d6 00             	adc    esi,0x0
c0027cb1:	01 ca                	add    edx,ecx
c0027cb3:	0f 92 c1             	setb   cl
c0027cb6:	0f b6 c9             	movzx  ecx,cl
c0027cb9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027cbc:	83 d6 00             	adc    esi,0x0
c0027cbf:	01 cf                	add    edi,ecx
c0027cc1:	83 d6 00             	adc    esi,0x0
c0027cc4:	31 c9                	xor    ecx,ecx
c0027cc6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027cc9:	0f 95 c1             	setne  cl
c0027ccc:	09 cf                	or     edi,ecx
c0027cce:	85 f6                	test   esi,esi
c0027cd0:	78 0c                	js     c0027cde <__muldf3+0x1f6>
c0027cd2:	01 f6                	add    esi,esi
c0027cd4:	89 f8                	mov    eax,edi
c0027cd6:	c1 e8 1f             	shr    eax,0x1f
c0027cd9:	09 c6                	or     esi,eax
c0027cdb:	01 ff                	add    edi,edi
c0027cdd:	4b                   	dec    ebx
c0027cde:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027ce4:	0f 8f 85 00 00 00    	jg     c0027d6f <__muldf3+0x287>
c0027cea:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027cf0:	85 db                	test   ebx,ebx
c0027cf2:	0f 8f 84 00 00 00    	jg     c0027d7c <__muldf3+0x294>
c0027cf8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027cfb:	7c 79                	jl     c0027d76 <__muldf3+0x28e>
c0027cfd:	ba 01 00 00 00       	mov    edx,0x1
c0027d02:	29 da                	sub    edx,ebx
c0027d04:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d0a:	83 fa 1f             	cmp    edx,0x1f
c0027d0d:	7e 30                	jle    c0027d3f <__muldf3+0x257>
c0027d0f:	83 fa 20             	cmp    edx,0x20
c0027d12:	75 0b                	jne    c0027d1f <__muldf3+0x237>
c0027d14:	31 c0                	xor    eax,eax
c0027d16:	85 ff                	test   edi,edi
c0027d18:	0f 95 c0             	setne  al
c0027d1b:	89 c7                	mov    edi,eax
c0027d1d:	eb 1a                	jmp    c0027d39 <__muldf3+0x251>
c0027d1f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027d22:	89 f0                	mov    eax,esi
c0027d24:	d3 e0                	shl    eax,cl
c0027d26:	09 f8                	or     eax,edi
c0027d28:	0f 95 c0             	setne  al
c0027d2b:	0f b6 c0             	movzx  eax,al
c0027d2e:	89 c7                	mov    edi,eax
c0027d30:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027d35:	29 d9                	sub    ecx,ebx
c0027d37:	d3 ee                	shr    esi,cl
c0027d39:	09 f7                	or     edi,esi
c0027d3b:	31 db                	xor    ebx,ebx
c0027d3d:	eb 3b                	jmp    c0027d7a <__muldf3+0x292>
c0027d3f:	83 c3 1f             	add    ebx,0x1f
c0027d42:	89 f0                	mov    eax,esi
c0027d44:	88 d9                	mov    cl,bl
c0027d46:	d3 e0                	shl    eax,cl
c0027d48:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d4b:	89 f8                	mov    eax,edi
c0027d4d:	88 d1                	mov    cl,dl
c0027d4f:	d3 e8                	shr    eax,cl
c0027d51:	89 c1                	mov    ecx,eax
c0027d53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d56:	09 c8                	or     eax,ecx
c0027d58:	88 d9                	mov    cl,bl
c0027d5a:	d3 e7                	shl    edi,cl
c0027d5c:	31 db                	xor    ebx,ebx
c0027d5e:	85 ff                	test   edi,edi
c0027d60:	0f 95 c3             	setne  bl
c0027d63:	89 df                	mov    edi,ebx
c0027d65:	09 c7                	or     edi,eax
c0027d67:	88 d1                	mov    cl,dl
c0027d69:	d3 ee                	shr    esi,cl
c0027d6b:	31 db                	xor    ebx,ebx
c0027d6d:	eb 0d                	jmp    c0027d7c <__muldf3+0x294>
c0027d6f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027d74:	eb 02                	jmp    c0027d78 <__muldf3+0x290>
c0027d76:	31 db                	xor    ebx,ebx
c0027d78:	31 ff                	xor    edi,edi
c0027d7a:	31 f6                	xor    esi,esi
c0027d7c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d7f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027d82:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027d87:	09 c3                	or     ebx,eax
c0027d89:	c1 e3 14             	shl    ebx,0x14
c0027d8c:	89 f0                	mov    eax,esi
c0027d8e:	c1 e8 0b             	shr    eax,0xb
c0027d91:	09 c3                	or     ebx,eax
c0027d93:	89 f8                	mov    eax,edi
c0027d95:	c1 e8 0b             	shr    eax,0xb
c0027d98:	c1 e6 15             	shl    esi,0x15
c0027d9b:	09 c6                	or     esi,eax
c0027d9d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027da3:	0f 95 c1             	setne  cl
c0027da6:	09 c8                	or     eax,ecx
c0027da8:	83 e0 01             	and    eax,0x1
c0027dab:	c1 ef 0a             	shr    edi,0xa
c0027dae:	21 c7                	and    edi,eax
c0027db0:	01 f7                	add    edi,esi
c0027db2:	83 d3 00             	adc    ebx,0x0
c0027db5:	89 da                	mov    edx,ebx
c0027db7:	eb 03                	jmp    c0027dbc <__muldf3+0x2d4>
c0027db9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027dbc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027dbf:	89 f8                	mov    eax,edi
c0027dc1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027dc4:	83 c4 24             	add    esp,0x24
c0027dc7:	5b                   	pop    ebx
c0027dc8:	5e                   	pop    esi
c0027dc9:	5f                   	pop    edi
c0027dca:	5d                   	pop    ebp
c0027dcb:	c3                   	ret    

c0027dcc <__divdf3>:
c0027dcc:	55                   	push   ebp
c0027dcd:	89 e5                	mov    ebp,esp
c0027dcf:	57                   	push   edi
c0027dd0:	56                   	push   esi
c0027dd1:	53                   	push   ebx
c0027dd2:	83 ec 2c             	sub    esp,0x2c
c0027dd5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027dd8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ddb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027dde:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027de1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027de4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027de7:	89 ce                	mov    esi,ecx
c0027de9:	89 c8                	mov    eax,ecx
c0027deb:	c1 f8 14             	sar    eax,0x14
c0027dee:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027df1:	89 f8                	mov    eax,edi
c0027df3:	89 fb                	mov    ebx,edi
c0027df5:	c1 e3 0b             	shl    ebx,0xb
c0027df8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027dfb:	c1 e6 0b             	shl    esi,0xb
c0027dfe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e04:	c1 e8 15             	shr    eax,0x15
c0027e07:	09 c6                	or     esi,eax
c0027e09:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027e0c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027e0f:	89 c2                	mov    edx,eax
c0027e11:	c1 fa 14             	sar    edx,0x14
c0027e14:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027e17:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027e1a:	89 de                	mov    esi,ebx
c0027e1c:	c1 e6 0b             	shl    esi,0xb
c0027e1f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027e22:	c1 e0 0b             	shl    eax,0xb
c0027e25:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027e2a:	c1 eb 15             	shr    ebx,0x15
c0027e2d:	09 d8                	or     eax,ebx
c0027e2f:	89 c2                	mov    edx,eax
c0027e31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e34:	25 ff 07 00 00       	and    eax,0x7ff
c0027e39:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027e3c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e3f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027e45:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027e48:	29 d8                	sub    eax,ebx
c0027e4a:	05 ff 03 00 00       	add    eax,0x3ff
c0027e4f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027e52:	46                   	inc    esi
c0027e53:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027e59:	0f 85 a5 00 00 00    	jne    c0027f04 <__divdf3+0x138>
c0027e5f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027e62:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027e65:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027e69:	74 2a                	je     c0027e95 <__divdf3+0xc9>
c0027e6b:	85 f6                	test   esi,esi
c0027e6d:	0f 85 cc 02 00 00    	jne    c002813f <__divdf3+0x373>
c0027e73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e76:	40                   	inc    eax
c0027e77:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e7c:	75 26                	jne    c0027ea4 <__divdf3+0xd8>
c0027e7e:	85 db                	test   ebx,ebx
c0027e80:	74 22                	je     c0027ea4 <__divdf3+0xd8>
c0027e82:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e85:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e88:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e8b:	09 d0                	or     eax,edx
c0027e8d:	0f 85 ac 02 00 00    	jne    c002813f <__divdf3+0x373>
c0027e93:	eb 63                	jmp    c0027ef8 <__divdf3+0x12c>
c0027e95:	85 f6                	test   esi,esi
c0027e97:	75 22                	jne    c0027ebb <__divdf3+0xef>
c0027e99:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e9c:	40                   	inc    eax
c0027e9d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ea2:	74 36                	je     c0027eda <__divdf3+0x10e>
c0027ea4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ea8:	0f 89 91 02 00 00    	jns    c002813f <__divdf3+0x373>
c0027eae:	89 f8                	mov    eax,edi
c0027eb0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027eb6:	e9 80 02 00 00       	jmp    c002813b <__divdf3+0x36f>
c0027ebb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ebe:	01 f6                	add    esi,esi
c0027ec0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ec3:	c1 ef 1f             	shr    edi,0x1f
c0027ec6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ec9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027ecc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027ecf:	09 f7                	or     edi,esi
c0027ed1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027ed4:	78 2e                	js     c0027f04 <__divdf3+0x138>
c0027ed6:	89 c8                	mov    eax,ecx
c0027ed8:	eb e1                	jmp    c0027ebb <__divdf3+0xef>
c0027eda:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027edd:	09 d0                	or     eax,edx
c0027edf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ee3:	74 0f                	je     c0027ef4 <__divdf3+0x128>
c0027ee5:	85 c0                	test   eax,eax
c0027ee7:	74 bb                	je     c0027ea4 <__divdf3+0xd8>
c0027ee9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027eec:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027eef:	e9 4b 02 00 00       	jmp    c002813f <__divdf3+0x373>
c0027ef4:	85 c0                	test   eax,eax
c0027ef6:	75 ac                	jne    c0027ea4 <__divdf3+0xd8>
c0027ef8:	31 ff                	xor    edi,edi
c0027efa:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027eff:	e9 3b 02 00 00       	jmp    c002813f <__divdf3+0x373>
c0027f04:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f07:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027f0a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027f10:	75 6b                	jne    c0027f7d <__divdf3+0x1b1>
c0027f12:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f15:	09 d6                	or     esi,edx
c0027f17:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f1b:	74 28                	je     c0027f45 <__divdf3+0x179>
c0027f1d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f20:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f23:	85 f6                	test   esi,esi
c0027f25:	0f 85 14 02 00 00    	jne    c002813f <__divdf3+0x373>
c0027f2b:	31 ff                	xor    edi,edi
c0027f2d:	31 c9                	xor    ecx,ecx
c0027f2f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f32:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027f35:	0f 89 04 02 00 00    	jns    c002813f <__divdf3+0x373>
c0027f3b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027f40:	e9 fa 01 00 00       	jmp    c002813f <__divdf3+0x373>
c0027f45:	85 f6                	test   esi,esi
c0027f47:	75 1b                	jne    c0027f64 <__divdf3+0x198>
c0027f49:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f4c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027f4f:	25 00 00 00 80       	and    eax,0x80000000
c0027f54:	31 c9                	xor    ecx,ecx
c0027f56:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027f5b:	89 cf                	mov    edi,ecx
c0027f5d:	89 c1                	mov    ecx,eax
c0027f5f:	e9 db 01 00 00       	jmp    c002813f <__divdf3+0x373>
c0027f64:	01 d2                	add    edx,edx
c0027f66:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f69:	c1 eb 1f             	shr    ebx,0x1f
c0027f6c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f6f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027f72:	8d 48 01             	lea    ecx,[eax+0x1]
c0027f75:	09 da                	or     edx,ebx
c0027f77:	78 04                	js     c0027f7d <__divdf3+0x1b1>
c0027f79:	89 c8                	mov    eax,ecx
c0027f7b:	eb e7                	jmp    c0027f64 <__divdf3+0x198>
c0027f7d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f80:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f86:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f8c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027f8f:	39 d6                	cmp    esi,edx
c0027f91:	77 0d                	ja     c0027fa0 <__divdf3+0x1d4>
c0027f93:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027f96:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027f99:	72 1b                	jb     c0027fb6 <__divdf3+0x1ea>
c0027f9b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027f9e:	75 16                	jne    c0027fb6 <__divdf3+0x1ea>
c0027fa0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027fa3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027fa6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027fa9:	83 de 00             	sbb    esi,0x0
c0027fac:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027faf:	ba 01 00 00 00       	mov    edx,0x1
c0027fb4:	eb 02                	jmp    c0027fb8 <__divdf3+0x1ec>
c0027fb6:	31 d2                	xor    edx,edx
c0027fb8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027fbf:	31 ff                	xor    edi,edi
c0027fc1:	01 ff                	add    edi,edi
c0027fc3:	89 d1                	mov    ecx,edx
c0027fc5:	c1 e9 1f             	shr    ecx,0x1f
c0027fc8:	09 cf                	or     edi,ecx
c0027fca:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027fcd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027fd0:	89 da                	mov    edx,ebx
c0027fd2:	89 f3                	mov    ebx,esi
c0027fd4:	8d 34 36             	lea    esi,[esi+esi*1]
c0027fd7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fda:	c1 e9 1f             	shr    ecx,0x1f
c0027fdd:	09 ce                	or     esi,ecx
c0027fdf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fe2:	01 c9                	add    ecx,ecx
c0027fe4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027fe7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027fea:	85 db                	test   ebx,ebx
c0027fec:	78 29                	js     c0028017 <__divdf3+0x24b>
c0027fee:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027ff1:	72 07                	jb     c0027ffa <__divdf3+0x22e>
c0027ff3:	75 3c                	jne    c0028031 <__divdf3+0x265>
c0027ff5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027ff8:	77 37                	ja     c0028031 <__divdf3+0x265>
c0027ffa:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027ffd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028000:	31 d2                	xor    edx,edx
c0028002:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028005:	0f 97 c2             	seta   dl
c0028008:	29 d6                	sub    esi,edx
c002800a:	89 d9                	mov    ecx,ebx
c002800c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002800f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028012:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028015:	eb 17                	jmp    c002802e <__divdf3+0x262>
c0028017:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002801a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002801d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028020:	0f 97 c1             	seta   cl
c0028023:	0f b6 c9             	movzx  ecx,cl
c0028026:	29 ce                	sub    esi,ecx
c0028028:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002802b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002802e:	83 ca 01             	or     edx,0x1
c0028031:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028034:	75 8b                	jne    c0027fc1 <__divdf3+0x1f5>
c0028036:	c1 e7 09             	shl    edi,0x9
c0028039:	89 d1                	mov    ecx,edx
c002803b:	c1 e9 17             	shr    ecx,0x17
c002803e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028041:	09 f3                	or     ebx,esi
c0028043:	0f 95 c3             	setne  bl
c0028046:	0f b6 db             	movzx  ebx,bl
c0028049:	c1 e2 09             	shl    edx,0x9
c002804c:	09 d3                	or     ebx,edx
c002804e:	89 ca                	mov    edx,ecx
c0028050:	09 fa                	or     edx,edi
c0028052:	78 0c                	js     c0028060 <__divdf3+0x294>
c0028054:	01 d2                	add    edx,edx
c0028056:	89 d9                	mov    ecx,ebx
c0028058:	c1 e9 1f             	shr    ecx,0x1f
c002805b:	09 ca                	or     edx,ecx
c002805d:	01 db                	add    ebx,ebx
c002805f:	48                   	dec    eax
c0028060:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028065:	0f 8f 83 00 00 00    	jg     c00280ee <__divdf3+0x322>
c002806b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028071:	85 c0                	test   eax,eax
c0028073:	0f 8f 82 00 00 00    	jg     c00280fb <__divdf3+0x32f>
c0028079:	83 f8 cc             	cmp    eax,0xffffffcc
c002807c:	7c 77                	jl     c00280f5 <__divdf3+0x329>
c002807e:	be 01 00 00 00       	mov    esi,0x1
c0028083:	29 c6                	sub    esi,eax
c0028085:	81 ca 00 00 00 80    	or     edx,0x80000000
c002808b:	83 fe 1f             	cmp    esi,0x1f
c002808e:	7e 2f                	jle    c00280bf <__divdf3+0x2f3>
c0028090:	83 fe 20             	cmp    esi,0x20
c0028093:	75 0a                	jne    c002809f <__divdf3+0x2d3>
c0028095:	85 db                	test   ebx,ebx
c0028097:	0f 95 c3             	setne  bl
c002809a:	0f b6 db             	movzx  ebx,bl
c002809d:	eb 1a                	jmp    c00280b9 <__divdf3+0x2ed>
c002809f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00280a2:	89 d7                	mov    edi,edx
c00280a4:	d3 e7                	shl    edi,cl
c00280a6:	89 f9                	mov    ecx,edi
c00280a8:	09 d9                	or     ecx,ebx
c00280aa:	0f 95 c3             	setne  bl
c00280ad:	0f b6 db             	movzx  ebx,bl
c00280b0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00280b5:	29 c1                	sub    ecx,eax
c00280b7:	d3 ea                	shr    edx,cl
c00280b9:	09 d3                	or     ebx,edx
c00280bb:	31 c0                	xor    eax,eax
c00280bd:	eb 3a                	jmp    c00280f9 <__divdf3+0x32d>
c00280bf:	83 c0 1f             	add    eax,0x1f
c00280c2:	89 d7                	mov    edi,edx
c00280c4:	88 c1                	mov    cl,al
c00280c6:	d3 e7                	shl    edi,cl
c00280c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280cb:	89 df                	mov    edi,ebx
c00280cd:	89 f1                	mov    ecx,esi
c00280cf:	d3 ef                	shr    edi,cl
c00280d1:	89 f9                	mov    ecx,edi
c00280d3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00280d6:	09 cf                	or     edi,ecx
c00280d8:	88 c1                	mov    cl,al
c00280da:	d3 e3                	shl    ebx,cl
c00280dc:	85 db                	test   ebx,ebx
c00280de:	0f 95 c3             	setne  bl
c00280e1:	0f b6 db             	movzx  ebx,bl
c00280e4:	09 fb                	or     ebx,edi
c00280e6:	89 f1                	mov    ecx,esi
c00280e8:	d3 ea                	shr    edx,cl
c00280ea:	31 c0                	xor    eax,eax
c00280ec:	eb 0d                	jmp    c00280fb <__divdf3+0x32f>
c00280ee:	b8 ff 07 00 00       	mov    eax,0x7ff
c00280f3:	eb 02                	jmp    c00280f7 <__divdf3+0x32b>
c00280f5:	31 c0                	xor    eax,eax
c00280f7:	31 db                	xor    ebx,ebx
c00280f9:	31 d2                	xor    edx,edx
c00280fb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00280fe:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028101:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028107:	09 c8                	or     eax,ecx
c0028109:	c1 e0 14             	shl    eax,0x14
c002810c:	89 d1                	mov    ecx,edx
c002810e:	c1 e9 0b             	shr    ecx,0xb
c0028111:	09 c8                	or     eax,ecx
c0028113:	89 c6                	mov    esi,eax
c0028115:	89 d9                	mov    ecx,ebx
c0028117:	c1 e9 0b             	shr    ecx,0xb
c002811a:	c1 e2 15             	shl    edx,0x15
c002811d:	09 ca                	or     edx,ecx
c002811f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028125:	0f 95 c0             	setne  al
c0028128:	09 c1                	or     ecx,eax
c002812a:	83 e1 01             	and    ecx,0x1
c002812d:	c1 eb 0a             	shr    ebx,0xa
c0028130:	21 cb                	and    ebx,ecx
c0028132:	01 d3                	add    ebx,edx
c0028134:	89 d8                	mov    eax,ebx
c0028136:	83 d6 00             	adc    esi,0x0
c0028139:	89 f2                	mov    edx,esi
c002813b:	89 c7                	mov    edi,eax
c002813d:	89 d1                	mov    ecx,edx
c002813f:	89 f8                	mov    eax,edi
c0028141:	89 ca                	mov    edx,ecx
c0028143:	83 c4 2c             	add    esp,0x2c
c0028146:	5b                   	pop    ebx
c0028147:	5e                   	pop    esi
c0028148:	5f                   	pop    edi
c0028149:	5d                   	pop    ebp
c002814a:	c3                   	ret    

c002814b <__floatsidf>:
c002814b:	55                   	push   ebp
c002814c:	89 e5                	mov    ebp,esp
c002814e:	56                   	push   esi
c002814f:	53                   	push   ebx
c0028150:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028153:	85 db                	test   ebx,ebx
c0028155:	7e 15                	jle    c002816c <__floatsidf+0x21>
c0028157:	0f bd cb             	bsr    ecx,ebx
c002815a:	83 f1 1f             	xor    ecx,0x1f
c002815d:	d3 e3                	shl    ebx,cl
c002815f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028165:	b8 1e 04 00 00       	mov    eax,0x41e
c002816a:	eb 21                	jmp    c002818d <__floatsidf+0x42>
c002816c:	b8 00 00 00 00       	mov    eax,0x0
c0028171:	ba 00 00 00 00       	mov    edx,0x0
c0028176:	74 2a                	je     c00281a2 <__floatsidf+0x57>
c0028178:	f7 db                	neg    ebx
c002817a:	0f bd cb             	bsr    ecx,ebx
c002817d:	83 f1 1f             	xor    ecx,0x1f
c0028180:	d3 e3                	shl    ebx,cl
c0028182:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028188:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002818d:	29 c8                	sub    eax,ecx
c002818f:	c1 e0 14             	shl    eax,0x14
c0028192:	89 c1                	mov    ecx,eax
c0028194:	89 de                	mov    esi,ebx
c0028196:	c1 ee 0b             	shr    esi,0xb
c0028199:	09 f1                	or     ecx,esi
c002819b:	89 ca                	mov    edx,ecx
c002819d:	c1 e3 15             	shl    ebx,0x15
c00281a0:	89 d8                	mov    eax,ebx
c00281a2:	5b                   	pop    ebx
c00281a3:	5e                   	pop    esi
c00281a4:	5d                   	pop    ebp
c00281a5:	c3                   	ret    

c00281a6 <__floatunsidf>:
c00281a6:	55                   	push   ebp
c00281a7:	89 e5                	mov    ebp,esp
c00281a9:	56                   	push   esi
c00281aa:	53                   	push   ebx
c00281ab:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281ae:	85 db                	test   ebx,ebx
c00281b0:	74 2a                	je     c00281dc <__floatunsidf+0x36>
c00281b2:	0f bd cb             	bsr    ecx,ebx
c00281b5:	83 f1 1f             	xor    ecx,0x1f
c00281b8:	d3 e3                	shl    ebx,cl
c00281ba:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281c0:	b8 1e 04 00 00       	mov    eax,0x41e
c00281c5:	29 c8                	sub    eax,ecx
c00281c7:	c1 e0 14             	shl    eax,0x14
c00281ca:	89 c1                	mov    ecx,eax
c00281cc:	89 de                	mov    esi,ebx
c00281ce:	c1 ee 0b             	shr    esi,0xb
c00281d1:	09 f1                	or     ecx,esi
c00281d3:	89 ca                	mov    edx,ecx
c00281d5:	c1 e3 15             	shl    ebx,0x15
c00281d8:	89 d8                	mov    eax,ebx
c00281da:	eb 04                	jmp    c00281e0 <__floatunsidf+0x3a>
c00281dc:	31 c0                	xor    eax,eax
c00281de:	31 d2                	xor    edx,edx
c00281e0:	5b                   	pop    ebx
c00281e1:	5e                   	pop    esi
c00281e2:	5d                   	pop    ebp
c00281e3:	c3                   	ret    

c00281e4 <__fixdfsi>:
c00281e4:	55                   	push   ebp
c00281e5:	89 e5                	mov    ebp,esp
c00281e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281ea:	89 d1                	mov    ecx,edx
c00281ec:	c1 e1 0b             	shl    ecx,0xb
c00281ef:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00281f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00281f8:	c1 e8 15             	shr    eax,0x15
c00281fb:	09 c1                	or     ecx,eax
c00281fd:	c1 fa 14             	sar    edx,0x14
c0028200:	78 1f                	js     c0028221 <__fixdfsi+0x3d>
c0028202:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028208:	31 c0                	xor    eax,eax
c002820a:	83 fa 1e             	cmp    edx,0x1e
c002820d:	77 40                	ja     c002824f <__fixdfsi+0x6b>
c002820f:	89 c8                	mov    eax,ecx
c0028211:	0d 00 00 00 80       	or     eax,0x80000000
c0028216:	b9 1f 00 00 00       	mov    ecx,0x1f
c002821b:	29 d1                	sub    ecx,edx
c002821d:	d3 e8                	shr    eax,cl
c002821f:	eb 2e                	jmp    c002824f <__fixdfsi+0x6b>
c0028221:	31 c0                	xor    eax,eax
c0028223:	81 c2 01 04 00 00    	add    edx,0x401
c0028229:	78 24                	js     c002824f <__fixdfsi+0x6b>
c002822b:	83 fa 1e             	cmp    edx,0x1e
c002822e:	7e 09                	jle    c0028239 <__fixdfsi+0x55>
c0028230:	83 fa 1f             	cmp    edx,0x1f
c0028233:	75 18                	jne    c002824d <__fixdfsi+0x69>
c0028235:	85 c9                	test   ecx,ecx
c0028237:	75 14                	jne    c002824d <__fixdfsi+0x69>
c0028239:	89 c8                	mov    eax,ecx
c002823b:	0d 00 00 00 80       	or     eax,0x80000000
c0028240:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028245:	29 d1                	sub    ecx,edx
c0028247:	d3 e8                	shr    eax,cl
c0028249:	f7 d8                	neg    eax
c002824b:	eb 02                	jmp    c002824f <__fixdfsi+0x6b>
c002824d:	31 c0                	xor    eax,eax
c002824f:	5d                   	pop    ebp
c0028250:	c3                   	ret    

c0028251 <__fixunsdfsi>:
c0028251:	55                   	push   ebp
c0028252:	89 e5                	mov    ebp,esp
c0028254:	53                   	push   ebx
c0028255:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028258:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002825b:	89 d3                	mov    ebx,edx
c002825d:	c1 fb 14             	sar    ebx,0x14
c0028260:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028266:	31 c0                	xor    eax,eax
c0028268:	83 fb 1f             	cmp    ebx,0x1f
c002826b:	77 1d                	ja     c002828a <__fixunsdfsi+0x39>
c002826d:	89 d0                	mov    eax,edx
c002826f:	c1 e0 0b             	shl    eax,0xb
c0028272:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028277:	c1 e9 15             	shr    ecx,0x15
c002827a:	09 c8                	or     eax,ecx
c002827c:	0d 00 00 00 80       	or     eax,0x80000000
c0028281:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028286:	29 d9                	sub    ecx,ebx
c0028288:	d3 e8                	shr    eax,cl
c002828a:	5b                   	pop    ebx
c002828b:	5d                   	pop    ebp
c002828c:	c3                   	ret    

c002828d <__cmpdf2>:
c002828d:	55                   	push   ebp
c002828e:	89 e5                	mov    ebp,esp
c0028290:	57                   	push   edi
c0028291:	56                   	push   esi
c0028292:	53                   	push   ebx
c0028293:	83 ec 0c             	sub    esp,0xc
c0028296:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028299:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002829c:	89 ca                	mov    edx,ecx
c002829e:	c1 ea 14             	shr    edx,0x14
c00282a1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00282a7:	89 cb                	mov    ebx,ecx
c00282a9:	c1 fb 1f             	sar    ebx,0x1f
c00282ac:	31 da                	xor    edx,ebx
c00282ae:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282b1:	89 df                	mov    edi,ebx
c00282b3:	c1 e7 0b             	shl    edi,0xb
c00282b6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282b9:	c1 e1 0b             	shl    ecx,0xb
c00282bc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282c2:	c1 eb 15             	shr    ebx,0x15
c00282c5:	09 d9                	or     ecx,ebx
c00282c7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00282ca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00282cd:	89 ce                	mov    esi,ecx
c00282cf:	c1 ee 14             	shr    esi,0x14
c00282d2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00282d8:	89 cb                	mov    ebx,ecx
c00282da:	c1 fb 1f             	sar    ebx,0x1f
c00282dd:	31 de                	xor    esi,ebx
c00282df:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00282e2:	89 df                	mov    edi,ebx
c00282e4:	c1 e7 0b             	shl    edi,0xb
c00282e7:	c1 e1 0b             	shl    ecx,0xb
c00282ea:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282f0:	c1 eb 15             	shr    ebx,0x15
c00282f3:	09 d9                	or     ecx,ebx
c00282f5:	89 d3                	mov    ebx,edx
c00282f7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00282fd:	43                   	inc    ebx
c00282fe:	83 fb 01             	cmp    ebx,0x1
c0028301:	77 08                	ja     c002830b <__cmpdf2+0x7e>
c0028303:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028306:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028309:	75 68                	jne    c0028373 <__cmpdf2+0xe6>
c002830b:	89 f3                	mov    ebx,esi
c002830d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028313:	43                   	inc    ebx
c0028314:	83 fb 01             	cmp    ebx,0x1
c0028317:	77 06                	ja     c002831f <__cmpdf2+0x92>
c0028319:	89 fb                	mov    ebx,edi
c002831b:	09 cb                	or     ebx,ecx
c002831d:	75 54                	jne    c0028373 <__cmpdf2+0xe6>
c002831f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028322:	09 f8                	or     eax,edi
c0028324:	09 c8                	or     eax,ecx
c0028326:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028329:	75 12                	jne    c002833d <__cmpdf2+0xb0>
c002832b:	8d 42 01             	lea    eax,[edx+0x1]
c002832e:	83 f8 01             	cmp    eax,0x1
c0028331:	77 0a                	ja     c002833d <__cmpdf2+0xb0>
c0028333:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028336:	31 c0                	xor    eax,eax
c0028338:	83 fb 01             	cmp    ebx,0x1
c002833b:	76 36                	jbe    c0028373 <__cmpdf2+0xe6>
c002833d:	b8 01 00 00 00       	mov    eax,0x1
c0028342:	39 f2                	cmp    edx,esi
c0028344:	7f 2d                	jg     c0028373 <__cmpdf2+0xe6>
c0028346:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002834b:	7c 26                	jl     c0028373 <__cmpdf2+0xe6>
c002834d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028350:	77 07                	ja     c0028359 <__cmpdf2+0xcc>
c0028352:	72 16                	jb     c002836a <__cmpdf2+0xdd>
c0028354:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028357:	76 0a                	jbe    c0028363 <__cmpdf2+0xd6>
c0028359:	89 d0                	mov    eax,edx
c002835b:	c1 f8 1f             	sar    eax,0x1f
c002835e:	83 c8 01             	or     eax,0x1
c0028361:	eb 10                	jmp    c0028373 <__cmpdf2+0xe6>
c0028363:	b8 00 00 00 00       	mov    eax,0x0
c0028368:	73 09                	jae    c0028373 <__cmpdf2+0xe6>
c002836a:	89 d0                	mov    eax,edx
c002836c:	c1 f8 1f             	sar    eax,0x1f
c002836f:	83 e0 02             	and    eax,0x2
c0028372:	48                   	dec    eax
c0028373:	83 c4 0c             	add    esp,0xc
c0028376:	5b                   	pop    ebx
c0028377:	5e                   	pop    esi
c0028378:	5f                   	pop    edi
c0028379:	5d                   	pop    ebp
c002837a:	c3                   	ret    

c002837b <__eqdf2>:
c002837b:	55                   	push   ebp
c002837c:	89 e5                	mov    ebp,esp
c002837e:	50                   	push   eax
c002837f:	6a 01                	push   0x1
c0028381:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028384:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028387:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002838a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002838d:	e8 fb fe ff ff       	call   c002828d <__cmpdf2>
c0028392:	83 c4 18             	add    esp,0x18
c0028395:	c9                   	leave  
c0028396:	c3                   	ret    

c0028397 <__nedf2>:
c0028397:	eb e2                	jmp    c002837b <__eqdf2>

c0028399 <__gtdf2>:
c0028399:	55                   	push   ebp
c002839a:	89 e5                	mov    ebp,esp
c002839c:	50                   	push   eax
c002839d:	6a ff                	push   0xffffffff
c002839f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00283a2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00283a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00283a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00283ab:	e8 dd fe ff ff       	call   c002828d <__cmpdf2>
c00283b0:	83 c4 18             	add    esp,0x18
c00283b3:	c9                   	leave  
c00283b4:	c3                   	ret    

c00283b5 <__gedf2>:
c00283b5:	eb e2                	jmp    c0028399 <__gtdf2>

c00283b7 <__ltdf2>:
c00283b7:	eb c2                	jmp    c002837b <__eqdf2>

c00283b9 <__ledf2>:
c00283b9:	eb c0                	jmp    c002837b <__eqdf2>

c00283bb <__truncdfsf2>:
c00283bb:	55                   	push   ebp
c00283bc:	89 e5                	mov    ebp,esp
c00283be:	57                   	push   edi
c00283bf:	56                   	push   esi
c00283c0:	53                   	push   ebx
c00283c1:	83 ec 0c             	sub    esp,0xc
c00283c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283c7:	89 d1                	mov    ecx,edx
c00283c9:	c1 f9 14             	sar    ecx,0x14
c00283cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283cf:	89 df                	mov    edi,ebx
c00283d1:	c1 e7 0b             	shl    edi,0xb
c00283d4:	89 d0                	mov    eax,edx
c00283d6:	c1 e0 0b             	shl    eax,0xb
c00283d9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283de:	c1 eb 15             	shr    ebx,0x15
c00283e1:	09 d8                	or     eax,ebx
c00283e3:	89 cb                	mov    ebx,ecx
c00283e5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00283eb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00283f1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00283f7:	0f 86 9e 00 00 00    	jbe    c002849b <__truncdfsf2+0xe0>
c00283fd:	85 db                	test   ebx,ebx
c00283ff:	75 0a                	jne    c002840b <__truncdfsf2+0x50>
c0028401:	c1 fa 17             	sar    edx,0x17
c0028404:	30 d2                	xor    dl,dl
c0028406:	e9 84 00 00 00       	jmp    c002848f <__truncdfsf2+0xd4>
c002840b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028411:	83 fe 83             	cmp    esi,0xffffff83
c0028414:	7d 4b                	jge    c0028461 <__truncdfsf2+0xa6>
c0028416:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002841b:	29 f1                	sub    ecx,esi
c002841d:	83 f9 1f             	cmp    ecx,0x1f
c0028420:	7f 6b                	jg     c002848d <__truncdfsf2+0xd2>
c0028422:	0d 00 00 00 80       	or     eax,0x80000000
c0028427:	89 c3                	mov    ebx,eax
c0028429:	d3 eb                	shr    ebx,cl
c002842b:	be 01 00 00 00       	mov    esi,0x1
c0028430:	d3 e6                	shl    esi,cl
c0028432:	4e                   	dec    esi
c0028433:	21 f0                	and    eax,esi
c0028435:	09 f8                	or     eax,edi
c0028437:	0f 95 c0             	setne  al
c002843a:	0f b6 c0             	movzx  eax,al
c002843d:	09 c3                	or     ebx,eax
c002843f:	89 d9                	mov    ecx,ebx
c0028441:	c1 e9 08             	shr    ecx,0x8
c0028444:	f6 c3 7f             	test   bl,0x7f
c0028447:	0f 95 c0             	setne  al
c002844a:	09 c8                	or     eax,ecx
c002844c:	83 e0 01             	and    eax,0x1
c002844f:	c1 eb 07             	shr    ebx,0x7
c0028452:	21 c3                	and    ebx,eax
c0028454:	81 e2 00 00 00 80    	and    edx,0x80000000
c002845a:	09 d1                	or     ecx,edx
c002845c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002845f:	eb 76                	jmp    c00284d7 <__truncdfsf2+0x11c>
c0028461:	83 c6 80             	add    esi,0xffffff80
c0028464:	7e 1d                	jle    c0028483 <__truncdfsf2+0xc8>
c0028466:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002846c:	75 0b                	jne    c0028479 <__truncdfsf2+0xbe>
c002846e:	09 f8                	or     eax,edi
c0028470:	74 09                	je     c002847b <__truncdfsf2+0xc0>
c0028472:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028477:	eb 02                	jmp    c002847b <__truncdfsf2+0xc0>
c0028479:	31 c0                	xor    eax,eax
c002847b:	c1 fa 17             	sar    edx,0x17
c002847e:	80 ca ff             	or     dl,0xff
c0028481:	eb 0e                	jmp    c0028491 <__truncdfsf2+0xd6>
c0028483:	c1 fa 1f             	sar    edx,0x1f
c0028486:	c1 e2 08             	shl    edx,0x8
c0028489:	09 ca                	or     edx,ecx
c002848b:	eb 04                	jmp    c0028491 <__truncdfsf2+0xd6>
c002848d:	31 d2                	xor    edx,edx
c002848f:	31 c0                	xor    eax,eax
c0028491:	c1 e2 17             	shl    edx,0x17
c0028494:	c1 e8 08             	shr    eax,0x8
c0028497:	09 d0                	or     eax,edx
c0028499:	eb 3c                	jmp    c00284d7 <__truncdfsf2+0x11c>
c002849b:	81 e9 80 03 00 00    	sub    ecx,0x380
c00284a1:	89 ca                	mov    edx,ecx
c00284a3:	c1 fa 0b             	sar    edx,0xb
c00284a6:	c1 e2 08             	shl    edx,0x8
c00284a9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00284ac:	31 db                	xor    ebx,ebx
c00284ae:	85 ff                	test   edi,edi
c00284b0:	0f 95 c3             	setne  bl
c00284b3:	09 d8                	or     eax,ebx
c00284b5:	89 c3                	mov    ebx,eax
c00284b7:	c1 eb 08             	shr    ebx,0x8
c00284ba:	a8 7f                	test   al,0x7f
c00284bc:	0f 95 c2             	setne  dl
c00284bf:	89 d6                	mov    esi,edx
c00284c1:	09 de                	or     esi,ebx
c00284c3:	83 e6 01             	and    esi,0x1
c00284c6:	c1 e8 07             	shr    eax,0x7
c00284c9:	21 f0                	and    eax,esi
c00284cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00284ce:	09 ca                	or     edx,ecx
c00284d0:	c1 e2 17             	shl    edx,0x17
c00284d3:	09 da                	or     edx,ebx
c00284d5:	01 d0                	add    eax,edx
c00284d7:	83 c4 0c             	add    esp,0xc
c00284da:	5b                   	pop    ebx
c00284db:	5e                   	pop    esi
c00284dc:	5f                   	pop    edi
c00284dd:	5d                   	pop    ebp
c00284de:	c3                   	ret    

c00284df <__extendsfdf2>:
c00284df:	55                   	push   ebp
c00284e0:	89 e5                	mov    ebp,esp
c00284e2:	57                   	push   edi
c00284e3:	56                   	push   esi
c00284e4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00284e7:	89 d1                	mov    ecx,edx
c00284e9:	c1 f9 17             	sar    ecx,0x17
c00284ec:	c1 e2 08             	shl    edx,0x8
c00284ef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00284f5:	89 c8                	mov    eax,ecx
c00284f7:	80 e4 f8             	and    ah,0xf8
c00284fa:	8d 71 01             	lea    esi,[ecx+0x1]
c00284fd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028503:	75 27                	jne    c002852c <__extendsfdf2+0x4d>
c0028505:	81 e1 ff 00 00 00    	and    ecx,0xff
c002850b:	75 18                	jne    c0028525 <__extendsfdf2+0x46>
c002850d:	85 d2                	test   edx,edx
c002850f:	74 20                	je     c0028531 <__extendsfdf2+0x52>
c0028511:	41                   	inc    ecx
c0028512:	01 d2                	add    edx,edx
c0028514:	79 fb                	jns    c0028511 <__extendsfdf2+0x32>
c0028516:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002851c:	29 c8                	sub    eax,ecx
c002851e:	05 81 03 00 00       	add    eax,0x381
c0028523:	eb 0c                	jmp    c0028531 <__extendsfdf2+0x52>
c0028525:	05 00 07 00 00       	add    eax,0x700
c002852a:	eb 05                	jmp    c0028531 <__extendsfdf2+0x52>
c002852c:	05 80 03 00 00       	add    eax,0x380
c0028531:	c1 e0 14             	shl    eax,0x14
c0028534:	89 c1                	mov    ecx,eax
c0028536:	89 d0                	mov    eax,edx
c0028538:	c1 e8 0b             	shr    eax,0xb
c002853b:	09 c1                	or     ecx,eax
c002853d:	c1 e2 15             	shl    edx,0x15
c0028540:	89 d0                	mov    eax,edx
c0028542:	89 ca                	mov    edx,ecx
c0028544:	5e                   	pop    esi
c0028545:	5f                   	pop    edi
c0028546:	5d                   	pop    ebp
c0028547:	c3                   	ret    
c0028548:	66 90                	xchg   ax,ax
c002854a:	66 90                	xchg   ax,ax
c002854c:	66 90                	xchg   ax,ax
c002854e:	66 90                	xchg   ax,ax

c0028550 <fabs>:
c0028550:	83 ec 0c             	sub    esp,0xc
c0028553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028557:	89 04 24             	mov    DWORD PTR [esp],eax
c002855a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002855e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028563:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028567:	dd 04 24             	fld    QWORD PTR [esp]
c002856a:	83 c4 0c             	add    esp,0xc
c002856d:	c3                   	ret    
c002856e:	66 90                	xchg   ax,ax

c0028570 <lrint>:
c0028570:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028574:	83 ec 04             	sub    esp,0x4
c0028577:	db 1c 24             	fistp  DWORD PTR [esp]
c002857a:	58                   	pop    eax
c002857b:	c3                   	ret    

c002857c <lrintf>:
c002857c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028580:	83 ec 04             	sub    esp,0x4
c0028583:	db 1c 24             	fistp  DWORD PTR [esp]
c0028586:	58                   	pop    eax
c0028587:	c3                   	ret    

Disassembly of section .init:

c0028588 <_init>:
c0028588:	55                   	push   ebp
c0028589:	89 e5                	mov    ebp,esp
c002858b:	e8 88 7b fd ff       	call   c0000118 <frame_dummy>
c0028590:	e8 5b e0 ff ff       	call   c00265f0 <__do_global_ctors_aux>
c0028595:	5d                   	pop    ebp
c0028596:	c3                   	ret    

Disassembly of section .fini:

c0028597 <_fini>:
c0028597:	55                   	push   ebp
c0028598:	89 e5                	mov    ebp,esp
c002859a:	e8 09 7b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002859f:	5d                   	pop    ebp
c00285a0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00285a2 <Computer::~Computer()>:
c00285a2:	83 ec 0c             	sub    esp,0xc
c00285a5:	ba 1c a1 02 c0       	mov    edx,0xc002a11c
c00285aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ae:	89 10                	mov    DWORD PTR [eax],edx
c00285b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b4:	83 ec 0c             	sub    esp,0xc
c00285b7:	50                   	push   eax
c00285b8:	e8 e7 b4 fe ff       	call   c0013aa4 <Device::~Device()>
c00285bd:	83 c4 10             	add    esp,0x10
c00285c0:	90                   	nop
c00285c1:	83 c4 0c             	add    esp,0xc
c00285c4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00285c6 <Computer::~Computer()>:
c00285c6:	83 ec 0c             	sub    esp,0xc
c00285c9:	83 ec 0c             	sub    esp,0xc
c00285cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285d0:	e8 cd ff ff ff       	call   c00285a2 <Computer::~Computer()>
c00285d5:	83 c4 10             	add    esp,0x10
c00285d8:	83 ec 08             	sub    esp,0x8
c00285db:	68 ec 01 00 00       	push   0x1ec
c00285e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285e4:	e8 dc a0 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00285e9:	83 c4 10             	add    esp,0x10
c00285ec:	83 c4 0c             	add    esp,0xc
c00285ef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00285f0 <idleCommon()>:
c00285f0:	83 ec 0c             	sub    esp,0xc
c00285f3:	fa                   	cli    
c00285f4:	ff 05 88 f2 02 c0    	inc    DWORD PTR ds:0xc002f288
c00285fa:	e8 0c 55 ff ff       	call   c001db0b <schedule()>
c00285ff:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0028604:	48                   	dec    eax
c0028605:	a3 88 f2 02 c0       	mov    ds:0xc002f288,eax
c002860a:	75 01                	jne    c002860d <idleCommon()+0x1d>
c002860c:	fb                   	sti    
c002860d:	83 c4 0c             	add    esp,0xc
c0028610:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028612 <LinkedList<UnixFile>::~LinkedList()>:
c0028612:	90                   	nop
c0028613:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028614 <LinkedList<UnixFile>::LinkedList()>:
c0028614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028618:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002861e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028622:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002862d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028638:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002863e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028642:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002864d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028654:	90                   	nop
c0028655:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028656 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028656:	83 ec 0c             	sub    esp,0xc
c0028659:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002865e:	75 10                	jne    c0028670 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028660:	83 ec 0c             	sub    esp,0xc
c0028663:	68 d4 a3 02 c0       	push   0xc002a3d4
c0028668:	e8 0c 19 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c002866d:	83 c4 10             	add    esp,0x10
c0028670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028674:	8b 00                	mov    eax,DWORD PTR [eax]
c0028676:	85 c0                	test   eax,eax
c0028678:	74 34                	je     c00286ae <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002867a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028681:	85 c0                	test   eax,eax
c0028683:	74 29                	je     c00286ae <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028689:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002868c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028690:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028697:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002869b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002869e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286ac:	eb 65                	jmp    c0028713 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00286ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286b4:	85 c0                	test   eax,eax
c00286b6:	75 4b                	jne    c0028703 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286bf:	85 c0                	test   eax,eax
c00286c1:	75 40                	jne    c0028703 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00286c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286cb:	89 10                	mov    DWORD PTR [eax],edx
c00286cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286ed:	85 c0                	test   eax,eax
c00286ef:	74 22                	je     c0028713 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00286f1:	83 ec 0c             	sub    esp,0xc
c00286f4:	68 f6 a3 02 c0       	push   0xc002a3f6
c00286f9:	e8 7b 18 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c00286fe:	83 c4 10             	add    esp,0x10
c0028701:	eb 10                	jmp    c0028713 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028703:	83 ec 0c             	sub    esp,0xc
c0028706:	68 00 a4 02 c0       	push   0xc002a400
c002870b:	e8 69 18 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0028710:	83 c4 10             	add    esp,0x10
c0028713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028717:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002871a:	8d 50 01             	lea    edx,[eax+0x1]
c002871d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028721:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028724:	90                   	nop
c0028725:	83 c4 0c             	add    esp,0xc
c0028728:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002872a <LinkedList<UnixFile>::getFirstElement()>:
c002872a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002872e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028730:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028732 <LinkedList<UnixFile>::removeFirst()>:
c0028732:	83 ec 0c             	sub    esp,0xc
c0028735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028739:	8b 00                	mov    eax,DWORD PTR [eax]
c002873b:	85 c0                	test   eax,eax
c002873d:	75 12                	jne    c0028751 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002873f:	83 ec 0c             	sub    esp,0xc
c0028742:	68 0c a4 02 c0       	push   0xc002a40c
c0028747:	e8 2d 18 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c002874c:	83 c4 10             	add    esp,0x10
c002874f:	eb 7e                	jmp    c00287cf <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028755:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028758:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002875b:	85 c0                	test   eax,eax
c002875d:	74 10                	je     c002876f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002875f:	83 ec 0c             	sub    esp,0xc
c0028762:	68 57 a4 02 c0       	push   0xc002a457
c0028767:	e8 0d 18 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c002876c:	83 c4 10             	add    esp,0x10
c002876f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028773:	8b 00                	mov    eax,DWORD PTR [eax]
c0028775:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028778:	85 c0                	test   eax,eax
c002877a:	75 33                	jne    c00287af <LinkedList<UnixFile>::removeFirst()+0x7d>
c002877c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028780:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028795:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028798:	83 f8 01             	cmp    eax,0x1
c002879b:	74 21                	je     c00287be <LinkedList<UnixFile>::removeFirst()+0x8c>
c002879d:	83 ec 0c             	sub    esp,0xc
c00287a0:	68 30 a4 02 c0       	push   0xc002a430
c00287a5:	e8 cf 17 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c00287aa:	83 c4 10             	add    esp,0x10
c00287ad:	eb 0f                	jmp    c00287be <LinkedList<UnixFile>::removeFirst()+0x8c>
c00287af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00287b5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00287b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bc:	89 10                	mov    DWORD PTR [eax],edx
c00287be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287c5:	8d 50 ff             	lea    edx,[eax-0x1]
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287cf:	83 c4 0c             	add    esp,0xc
c00287d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00287d4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00287d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287db:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00287dc <DriverlessDevice::~DriverlessDevice()>:
c00287dc:	ba 5c ad 02 c0       	mov    edx,0xc002ad5c
c00287e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287e5:	89 10                	mov    DWORD PTR [eax],edx
c00287e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287eb:	50                   	push   eax
c00287ec:	e8 b3 b2 fe ff       	call   c0013aa4 <Device::~Device()>
c00287f1:	83 c4 04             	add    esp,0x4
c00287f4:	90                   	nop
c00287f5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00287f6 <DriverlessDevice::~DriverlessDevice()>:
c00287f6:	83 ec 0c             	sub    esp,0xc
c00287f9:	83 ec 0c             	sub    esp,0xc
c00287fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028800:	e8 d7 ff ff ff       	call   c00287dc <DriverlessDevice::~DriverlessDevice()>
c0028805:	83 c4 10             	add    esp,0x10
c0028808:	83 ec 08             	sub    esp,0x8
c002880b:	68 58 01 00 00       	push   0x158
c0028810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028814:	e8 ac 9e fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028819:	83 c4 10             	add    esp,0x10
c002881c:	83 c4 0c             	add    esp,0xc
c002881f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028820 <LinkedList<Device>::addElement(Device*)>:
c0028820:	83 ec 0c             	sub    esp,0xc
c0028823:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028828:	75 10                	jne    c002883a <LinkedList<Device>::addElement(Device*)+0x1a>
c002882a:	83 ec 0c             	sub    esp,0xc
c002882d:	68 d4 a3 02 c0       	push   0xc002a3d4
c0028832:	e8 42 17 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0028837:	83 c4 10             	add    esp,0x10
c002883a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028840:	85 c0                	test   eax,eax
c0028842:	74 3a                	je     c002887e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002884b:	85 c0                	test   eax,eax
c002884d:	74 2f                	je     c002887e <LinkedList<Device>::addElement(Device*)+0x5e>
c002884f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028853:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028856:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002885a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028868:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002886b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028872:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002887c:	eb 68                	jmp    c00288e6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002887e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028882:	8b 00                	mov    eax,DWORD PTR [eax]
c0028884:	85 c0                	test   eax,eax
c0028886:	75 4e                	jne    c00288d6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002888f:	85 c0                	test   eax,eax
c0028891:	75 43                	jne    c00288d6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028897:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002889b:	89 10                	mov    DWORD PTR [eax],edx
c002889d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288af:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00288b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c0:	85 c0                	test   eax,eax
c00288c2:	74 22                	je     c00288e6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00288c4:	83 ec 0c             	sub    esp,0xc
c00288c7:	68 f6 a3 02 c0       	push   0xc002a3f6
c00288cc:	e8 a8 16 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c00288d1:	83 c4 10             	add    esp,0x10
c00288d4:	eb 10                	jmp    c00288e6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00288d6:	83 ec 0c             	sub    esp,0xc
c00288d9:	68 00 a4 02 c0       	push   0xc002a400
c00288de:	e8 96 16 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c00288e3:	83 c4 10             	add    esp,0x10
c00288e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288ed:	8d 50 01             	lea    edx,[eax+0x1]
c00288f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288f7:	90                   	nop
c00288f8:	83 c4 0c             	add    esp,0xc
c00288fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00288fc <LinkedList<Device>::LinkedList()>:
c00288fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028900:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002890a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028911:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028915:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002891c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028920:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002892a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028935:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002893c:	90                   	nop
c002893d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002893e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002893e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028942:	8b 00                	mov    eax,DWORD PTR [eax]
c0028944:	85 c0                	test   eax,eax
c0028946:	75 0e                	jne    c0028956 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002894c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002894f:	85 c0                	test   eax,eax
c0028951:	75 03                	jne    c0028956 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028953:	b0 01                	mov    al,0x1
c0028955:	c3                   	ret    
c0028956:	b0 00                	mov    al,0x0
c0028958:	90                   	nop
c0028959:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002895a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002895a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002895e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028960:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028962 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028962:	83 ec 0c             	sub    esp,0xc
c0028965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028969:	8b 00                	mov    eax,DWORD PTR [eax]
c002896b:	85 c0                	test   eax,eax
c002896d:	75 15                	jne    c0028984 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002896f:	83 ec 0c             	sub    esp,0xc
c0028972:	68 0c a4 02 c0       	push   0xc002a40c
c0028977:	e8 fd 15 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c002897c:	83 c4 10             	add    esp,0x10
c002897f:	e9 88 00 00 00       	jmp    c0028a0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028988:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002898b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002898e:	85 c0                	test   eax,eax
c0028990:	0f 95 c0             	setne  al
c0028993:	84 c0                	test   al,al
c0028995:	74 10                	je     c00289a7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028997:	83 ec 0c             	sub    esp,0xc
c002899a:	68 57 a4 02 c0       	push   0xc002a457
c002899f:	e8 d5 15 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c00289a4:	83 c4 10             	add    esp,0x10
c00289a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00289b0:	85 c0                	test   eax,eax
c00289b2:	0f 94 c0             	sete   al
c00289b5:	84 c0                	test   al,al
c00289b7:	74 33                	je     c00289ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00289b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289d5:	83 f8 01             	cmp    eax,0x1
c00289d8:	74 21                	je     c00289fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00289da:	83 ec 0c             	sub    esp,0xc
c00289dd:	68 30 a4 02 c0       	push   0xc002a430
c00289e2:	e8 92 15 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c00289e7:	83 c4 10             	add    esp,0x10
c00289ea:	eb 0f                	jmp    c00289fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00289ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00289f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00289f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f9:	89 10                	mov    DWORD PTR [eax],edx
c00289fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a02:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a09:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a0c:	83 c4 0c             	add    esp,0xc
c0028a0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028a10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028a10:	83 ec 0c             	sub    esp,0xc
c0028a13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a18:	75 10                	jne    c0028a2a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028a1a:	83 ec 0c             	sub    esp,0xc
c0028a1d:	68 d4 a3 02 c0       	push   0xc002a3d4
c0028a22:	e8 52 15 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0028a27:	83 c4 10             	add    esp,0x10
c0028a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a30:	85 c0                	test   eax,eax
c0028a32:	74 34                	je     c0028a68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a3b:	85 c0                	test   eax,eax
c0028a3d:	74 29                	je     c0028a68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a4a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a5f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a66:	eb 65                	jmp    c0028acd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a6e:	85 c0                	test   eax,eax
c0028a70:	75 4b                	jne    c0028abd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a79:	85 c0                	test   eax,eax
c0028a7b:	75 40                	jne    c0028abd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a85:	89 10                	mov    DWORD PTR [eax],edx
c0028a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa7:	85 c0                	test   eax,eax
c0028aa9:	74 22                	je     c0028acd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028aab:	83 ec 0c             	sub    esp,0xc
c0028aae:	68 f6 a3 02 c0       	push   0xc002a3f6
c0028ab3:	e8 c1 14 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0028ab8:	83 c4 10             	add    esp,0x10
c0028abb:	eb 10                	jmp    c0028acd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028abd:	83 ec 0c             	sub    esp,0xc
c0028ac0:	68 00 a4 02 c0       	push   0xc002a400
c0028ac5:	e8 af 14 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0028aca:	83 c4 10             	add    esp,0x10
c0028acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ad4:	8d 50 01             	lea    edx,[eax+0x1]
c0028ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028adb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ade:	90                   	nop
c0028adf:	83 c4 0c             	add    esp,0xc
c0028ae2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028ae4 <ACPI::~ACPI()>:
c0028ae4:	83 ec 0c             	sub    esp,0xc
c0028ae7:	ba c0 b6 02 c0       	mov    edx,0xc002b6c0
c0028aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af0:	89 10                	mov    DWORD PTR [eax],edx
c0028af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af6:	83 ec 0c             	sub    esp,0xc
c0028af9:	50                   	push   eax
c0028afa:	e8 a5 af fe ff       	call   c0013aa4 <Device::~Device()>
c0028aff:	83 c4 10             	add    esp,0x10
c0028b02:	90                   	nop
c0028b03:	83 c4 0c             	add    esp,0xc
c0028b06:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028b08 <ACPI::~ACPI()>:
c0028b08:	83 ec 0c             	sub    esp,0xc
c0028b0b:	83 ec 0c             	sub    esp,0xc
c0028b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b12:	e8 cd ff ff ff       	call   c0028ae4 <ACPI::~ACPI()>
c0028b17:	83 c4 10             	add    esp,0x10
c0028b1a:	83 ec 08             	sub    esp,0x8
c0028b1d:	68 64 12 00 00       	push   0x1264
c0028b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b26:	e8 9a 9b fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028b2b:	83 c4 10             	add    esp,0x10
c0028b2e:	83 c4 0c             	add    esp,0xc
c0028b31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028b32 <LinkedList<Device>::~LinkedList()>:
c0028b32:	90                   	nop
c0028b33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028b34 <LinkedList<Device>::isEmpty()>:
c0028b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b3a:	85 c0                	test   eax,eax
c0028b3c:	75 0e                	jne    c0028b4c <LinkedList<Device>::isEmpty()+0x18>
c0028b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b45:	85 c0                	test   eax,eax
c0028b47:	75 03                	jne    c0028b4c <LinkedList<Device>::isEmpty()+0x18>
c0028b49:	b0 01                	mov    al,0x1
c0028b4b:	c3                   	ret    
c0028b4c:	b0 00                	mov    al,0x0
c0028b4e:	90                   	nop
c0028b4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028b50 <LinkedList<Device>::getFirstElement()>:
c0028b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b54:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b56:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028b58 <LinkedList<Device>::removeFirst()>:
c0028b58:	83 ec 0c             	sub    esp,0xc
c0028b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b61:	85 c0                	test   eax,eax
c0028b63:	75 15                	jne    c0028b7a <LinkedList<Device>::removeFirst()+0x22>
c0028b65:	83 ec 0c             	sub    esp,0xc
c0028b68:	68 0c a4 02 c0       	push   0xc002a40c
c0028b6d:	e8 07 14 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0028b72:	83 c4 10             	add    esp,0x10
c0028b75:	e9 87 00 00 00       	jmp    c0028c01 <LinkedList<Device>::removeFirst()+0xa9>
c0028b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b81:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028b87:	85 c0                	test   eax,eax
c0028b89:	74 10                	je     c0028b9b <LinkedList<Device>::removeFirst()+0x43>
c0028b8b:	83 ec 0c             	sub    esp,0xc
c0028b8e:	68 57 a4 02 c0       	push   0xc002a457
c0028b93:	e8 e1 13 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0028b98:	83 c4 10             	add    esp,0x10
c0028b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ba1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028ba7:	85 c0                	test   eax,eax
c0028ba9:	75 33                	jne    c0028bde <LinkedList<Device>::removeFirst()+0x86>
c0028bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bc7:	83 f8 01             	cmp    eax,0x1
c0028bca:	74 24                	je     c0028bf0 <LinkedList<Device>::removeFirst()+0x98>
c0028bcc:	83 ec 0c             	sub    esp,0xc
c0028bcf:	68 30 a4 02 c0       	push   0xc002a430
c0028bd4:	e8 a0 13 ff ff       	call   c0019f79 <Krnl::panic(char const*)>
c0028bd9:	83 c4 10             	add    esp,0x10
c0028bdc:	eb 12                	jmp    c0028bf0 <LinkedList<Device>::removeFirst()+0x98>
c0028bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028be4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bee:	89 10                	mov    DWORD PTR [eax],edx
c0028bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bf7:	8d 50 ff             	lea    edx,[eax-0x1]
c0028bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c01:	83 c4 0c             	add    esp,0xc
c0028c04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c06 <CPU::~CPU()>:
c0028c06:	83 ec 0c             	sub    esp,0xc
c0028c09:	ba 10 b9 02 c0       	mov    edx,0xc002b910
c0028c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c12:	89 10                	mov    DWORD PTR [eax],edx
c0028c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c18:	83 ec 0c             	sub    esp,0xc
c0028c1b:	50                   	push   eax
c0028c1c:	e8 83 ae fe ff       	call   c0013aa4 <Device::~Device()>
c0028c21:	83 c4 10             	add    esp,0x10
c0028c24:	90                   	nop
c0028c25:	83 c4 0c             	add    esp,0xc
c0028c28:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c2a <CPU::~CPU()>:
c0028c2a:	83 ec 0c             	sub    esp,0xc
c0028c2d:	83 ec 0c             	sub    esp,0xc
c0028c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c34:	e8 cd ff ff ff       	call   c0028c06 <CPU::~CPU()>
c0028c39:	83 c4 10             	add    esp,0x10
c0028c3c:	83 ec 08             	sub    esp,0x8
c0028c3f:	68 98 11 00 00       	push   0x1198
c0028c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c48:	e8 78 9a fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028c4d:	83 c4 10             	add    esp,0x10
c0028c50:	83 c4 0c             	add    esp,0xc
c0028c53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c54 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c54:	90                   	nop
c0028c55:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c56 <ThreadControlBlock::ThreadControlBlock()>:
c0028c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c5a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c65:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c70:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c7b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c86:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028c8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c91:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028c95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c99:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028c9d:	90                   	nop
c0028c9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ce0:	90                   	nop
c0028ce1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028ce2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ce6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ce9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028cea <Vm::_FPUState::_FPUState()>:
c0028cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cee:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028cf5:	90                   	nop
c0028cf6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028cf8 <PCI::~PCI()>:
c0028cf8:	83 ec 0c             	sub    esp,0xc
c0028cfb:	ba 5c c4 02 c0       	mov    edx,0xc002c45c
c0028d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d04:	89 10                	mov    DWORD PTR [eax],edx
c0028d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0a:	83 ec 0c             	sub    esp,0xc
c0028d0d:	50                   	push   eax
c0028d0e:	e8 61 a7 fe ff       	call   c0013474 <Bus::~Bus()>
c0028d13:	83 c4 10             	add    esp,0x10
c0028d16:	90                   	nop
c0028d17:	83 c4 0c             	add    esp,0xc
c0028d1a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d1c <PCI::~PCI()>:
c0028d1c:	83 ec 0c             	sub    esp,0xc
c0028d1f:	83 ec 0c             	sub    esp,0xc
c0028d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d26:	e8 cd ff ff ff       	call   c0028cf8 <PCI::~PCI()>
c0028d2b:	83 c4 10             	add    esp,0x10
c0028d2e:	83 ec 08             	sub    esp,0x8
c0028d31:	68 5c 01 00 00       	push   0x15c
c0028d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3a:	e8 86 99 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028d3f:	83 c4 10             	add    esp,0x10
c0028d42:	83 c4 0c             	add    esp,0xc
c0028d45:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d46 <IDE::~IDE()>:
c0028d46:	83 ec 0c             	sub    esp,0xc
c0028d49:	ba 10 c5 02 c0       	mov    edx,0xc002c510
c0028d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d52:	89 10                	mov    DWORD PTR [eax],edx
c0028d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d58:	83 ec 0c             	sub    esp,0xc
c0028d5b:	50                   	push   eax
c0028d5c:	e8 59 b2 fe ff       	call   c0013fba <HardDiskController::~HardDiskController()>
c0028d61:	83 c4 10             	add    esp,0x10
c0028d64:	90                   	nop
c0028d65:	83 c4 0c             	add    esp,0xc
c0028d68:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d6a <IDE::~IDE()>:
c0028d6a:	83 ec 0c             	sub    esp,0xc
c0028d6d:	83 ec 0c             	sub    esp,0xc
c0028d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d74:	e8 cd ff ff ff       	call   c0028d46 <IDE::~IDE()>
c0028d79:	83 c4 10             	add    esp,0x10
c0028d7c:	83 ec 08             	sub    esp,0x8
c0028d7f:	68 70 02 00 00       	push   0x270
c0028d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d88:	e8 38 99 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028d8d:	83 c4 10             	add    esp,0x10
c0028d90:	83 c4 0c             	add    esp,0xc
c0028d93:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028d94 <SATABus::~SATABus()>:
c0028d94:	83 ec 0c             	sub    esp,0xc
c0028d97:	ba 88 c5 02 c0       	mov    edx,0xc002c588
c0028d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da0:	89 10                	mov    DWORD PTR [eax],edx
c0028da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da6:	83 ec 0c             	sub    esp,0xc
c0028da9:	50                   	push   eax
c0028daa:	e8 0b b2 fe ff       	call   c0013fba <HardDiskController::~HardDiskController()>
c0028daf:	83 c4 10             	add    esp,0x10
c0028db2:	90                   	nop
c0028db3:	83 c4 0c             	add    esp,0xc
c0028db6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028db8 <SATABus::~SATABus()>:
c0028db8:	83 ec 0c             	sub    esp,0xc
c0028dbb:	83 ec 0c             	sub    esp,0xc
c0028dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc2:	e8 cd ff ff ff       	call   c0028d94 <SATABus::~SATABus()>
c0028dc7:	83 c4 10             	add    esp,0x10
c0028dca:	83 ec 08             	sub    esp,0x8
c0028dcd:	68 64 01 00 00       	push   0x164
c0028dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd6:	e8 ea 98 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028ddb:	83 c4 10             	add    esp,0x10
c0028dde:	83 c4 0c             	add    esp,0xc
c0028de1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028de2 <ATA::~ATA()>:
c0028de2:	83 ec 0c             	sub    esp,0xc
c0028de5:	ba 00 c6 02 c0       	mov    edx,0xc002c600
c0028dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dee:	89 10                	mov    DWORD PTR [eax],edx
c0028df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df4:	83 ec 0c             	sub    esp,0xc
c0028df7:	50                   	push   eax
c0028df8:	e8 9f b2 fe ff       	call   c001409c <PhysicalDisk::~PhysicalDisk()>
c0028dfd:	83 c4 10             	add    esp,0x10
c0028e00:	90                   	nop
c0028e01:	83 c4 0c             	add    esp,0xc
c0028e04:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e06 <ATA::~ATA()>:
c0028e06:	83 ec 0c             	sub    esp,0xc
c0028e09:	83 ec 0c             	sub    esp,0xc
c0028e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e10:	e8 cd ff ff ff       	call   c0028de2 <ATA::~ATA()>
c0028e15:	83 c4 10             	add    esp,0x10
c0028e18:	83 ec 08             	sub    esp,0x8
c0028e1b:	68 7c 01 00 00       	push   0x17c
c0028e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e24:	e8 9c 98 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028e29:	83 c4 10             	add    esp,0x10
c0028e2c:	83 c4 0c             	add    esp,0xc
c0028e2f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e30 <ATAPI::~ATAPI()>:
c0028e30:	83 ec 0c             	sub    esp,0xc
c0028e33:	ba 38 c6 02 c0       	mov    edx,0xc002c638
c0028e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3c:	89 10                	mov    DWORD PTR [eax],edx
c0028e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e42:	83 ec 0c             	sub    esp,0xc
c0028e45:	50                   	push   eax
c0028e46:	e8 51 b2 fe ff       	call   c001409c <PhysicalDisk::~PhysicalDisk()>
c0028e4b:	83 c4 10             	add    esp,0x10
c0028e4e:	90                   	nop
c0028e4f:	83 c4 0c             	add    esp,0xc
c0028e52:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e54 <ATAPI::~ATAPI()>:
c0028e54:	83 ec 0c             	sub    esp,0xc
c0028e57:	83 ec 0c             	sub    esp,0xc
c0028e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e5e:	e8 cd ff ff ff       	call   c0028e30 <ATAPI::~ATAPI()>
c0028e63:	83 c4 10             	add    esp,0x10
c0028e66:	83 ec 08             	sub    esp,0x8
c0028e69:	68 80 01 00 00       	push   0x180
c0028e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e72:	e8 4e 98 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028e77:	83 c4 10             	add    esp,0x10
c0028e7a:	83 c4 0c             	add    esp,0xc
c0028e7d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e7e <SATA::~SATA()>:
c0028e7e:	83 ec 0c             	sub    esp,0xc
c0028e81:	ba ec c6 02 c0       	mov    edx,0xc002c6ec
c0028e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8a:	89 10                	mov    DWORD PTR [eax],edx
c0028e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e90:	83 ec 0c             	sub    esp,0xc
c0028e93:	50                   	push   eax
c0028e94:	e8 03 b2 fe ff       	call   c001409c <PhysicalDisk::~PhysicalDisk()>
c0028e99:	83 c4 10             	add    esp,0x10
c0028e9c:	90                   	nop
c0028e9d:	83 c4 0c             	add    esp,0xc
c0028ea0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ea2 <SATA::~SATA()>:
c0028ea2:	83 ec 0c             	sub    esp,0xc
c0028ea5:	83 ec 0c             	sub    esp,0xc
c0028ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eac:	e8 cd ff ff ff       	call   c0028e7e <SATA::~SATA()>
c0028eb1:	83 c4 10             	add    esp,0x10
c0028eb4:	83 ec 08             	sub    esp,0x8
c0028eb7:	68 7c 01 00 00       	push   0x17c
c0028ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec0:	e8 00 98 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028ec5:	83 c4 10             	add    esp,0x10
c0028ec8:	83 c4 0c             	add    esp,0xc
c0028ecb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ecc <SATAPI::~SATAPI()>:
c0028ecc:	83 ec 0c             	sub    esp,0xc
c0028ecf:	ba c8 c7 02 c0       	mov    edx,0xc002c7c8
c0028ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed8:	89 10                	mov    DWORD PTR [eax],edx
c0028eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ede:	83 ec 0c             	sub    esp,0xc
c0028ee1:	50                   	push   eax
c0028ee2:	e8 b5 b1 fe ff       	call   c001409c <PhysicalDisk::~PhysicalDisk()>
c0028ee7:	83 c4 10             	add    esp,0x10
c0028eea:	90                   	nop
c0028eeb:	83 c4 0c             	add    esp,0xc
c0028eee:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028ef0 <SATAPI::~SATAPI()>:
c0028ef0:	83 ec 0c             	sub    esp,0xc
c0028ef3:	83 ec 0c             	sub    esp,0xc
c0028ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efa:	e8 cd ff ff ff       	call   c0028ecc <SATAPI::~SATAPI()>
c0028eff:	83 c4 10             	add    esp,0x10
c0028f02:	83 ec 08             	sub    esp,0x8
c0028f05:	68 80 01 00 00       	push   0x180
c0028f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f0e:	e8 b2 97 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028f13:	83 c4 10             	add    esp,0x10
c0028f16:	83 c4 0c             	add    esp,0xc
c0028f19:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f1a <AVX::~AVX()>:
c0028f1a:	83 ec 0c             	sub    esp,0xc
c0028f1d:	ba 08 c8 02 c0       	mov    edx,0xc002c808
c0028f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f26:	89 10                	mov    DWORD PTR [eax],edx
c0028f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2c:	83 ec 0c             	sub    esp,0xc
c0028f2f:	50                   	push   eax
c0028f30:	e8 eb b1 fe ff       	call   c0014120 <FPU::~FPU()>
c0028f35:	83 c4 10             	add    esp,0x10
c0028f38:	90                   	nop
c0028f39:	83 c4 0c             	add    esp,0xc
c0028f3c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f3e <AVX::~AVX()>:
c0028f3e:	83 ec 0c             	sub    esp,0xc
c0028f41:	83 ec 0c             	sub    esp,0xc
c0028f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f48:	e8 cd ff ff ff       	call   c0028f1a <AVX::~AVX()>
c0028f4d:	83 c4 10             	add    esp,0x10
c0028f50:	83 ec 08             	sub    esp,0x8
c0028f53:	68 58 01 00 00       	push   0x158
c0028f58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f5c:	e8 64 97 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028f61:	83 c4 10             	add    esp,0x10
c0028f64:	83 c4 0c             	add    esp,0xc
c0028f67:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f68 <MMX::~MMX()>:
c0028f68:	83 ec 0c             	sub    esp,0xc
c0028f6b:	ba 48 c8 02 c0       	mov    edx,0xc002c848
c0028f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f74:	89 10                	mov    DWORD PTR [eax],edx
c0028f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7a:	83 ec 0c             	sub    esp,0xc
c0028f7d:	50                   	push   eax
c0028f7e:	e8 9d b1 fe ff       	call   c0014120 <FPU::~FPU()>
c0028f83:	83 c4 10             	add    esp,0x10
c0028f86:	90                   	nop
c0028f87:	83 c4 0c             	add    esp,0xc
c0028f8a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028f8c <MMX::~MMX()>:
c0028f8c:	83 ec 0c             	sub    esp,0xc
c0028f8f:	83 ec 0c             	sub    esp,0xc
c0028f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f96:	e8 cd ff ff ff       	call   c0028f68 <MMX::~MMX()>
c0028f9b:	83 c4 10             	add    esp,0x10
c0028f9e:	83 ec 08             	sub    esp,0x8
c0028fa1:	68 58 01 00 00       	push   0x158
c0028fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028faa:	e8 16 97 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028faf:	83 c4 10             	add    esp,0x10
c0028fb2:	83 c4 0c             	add    esp,0xc
c0028fb5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028fb6 <SSE::~SSE()>:
c0028fb6:	83 ec 0c             	sub    esp,0xc
c0028fb9:	ba 88 c8 02 c0       	mov    edx,0xc002c888
c0028fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc2:	89 10                	mov    DWORD PTR [eax],edx
c0028fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc8:	83 ec 0c             	sub    esp,0xc
c0028fcb:	50                   	push   eax
c0028fcc:	e8 4f b1 fe ff       	call   c0014120 <FPU::~FPU()>
c0028fd1:	83 c4 10             	add    esp,0x10
c0028fd4:	90                   	nop
c0028fd5:	83 c4 0c             	add    esp,0xc
c0028fd8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028fda <SSE::~SSE()>:
c0028fda:	83 ec 0c             	sub    esp,0xc
c0028fdd:	83 ec 0c             	sub    esp,0xc
c0028fe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe4:	e8 cd ff ff ff       	call   c0028fb6 <SSE::~SSE()>
c0028fe9:	83 c4 10             	add    esp,0x10
c0028fec:	83 ec 08             	sub    esp,0x8
c0028fef:	68 58 01 00 00       	push   0x158
c0028ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff8:	e8 c8 96 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0028ffd:	83 c4 10             	add    esp,0x10
c0029000:	83 c4 0c             	add    esp,0xc
c0029003:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029004 <x87::~x87()>:
c0029004:	83 ec 0c             	sub    esp,0xc
c0029007:	ba c8 c8 02 c0       	mov    edx,0xc002c8c8
c002900c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029010:	89 10                	mov    DWORD PTR [eax],edx
c0029012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029016:	83 ec 0c             	sub    esp,0xc
c0029019:	50                   	push   eax
c002901a:	e8 01 b1 fe ff       	call   c0014120 <FPU::~FPU()>
c002901f:	83 c4 10             	add    esp,0x10
c0029022:	90                   	nop
c0029023:	83 c4 0c             	add    esp,0xc
c0029026:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029028 <x87::~x87()>:
c0029028:	83 ec 0c             	sub    esp,0xc
c002902b:	83 ec 0c             	sub    esp,0xc
c002902e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029032:	e8 cd ff ff ff       	call   c0029004 <x87::~x87()>
c0029037:	83 c4 10             	add    esp,0x10
c002903a:	83 ec 08             	sub    esp,0x8
c002903d:	68 58 01 00 00       	push   0x158
c0029042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029046:	e8 7a 96 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c002904b:	83 c4 10             	add    esp,0x10
c002904e:	83 c4 0c             	add    esp,0xc
c0029051:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029052 <IOAPIC::~IOAPIC()>:
c0029052:	83 ec 0c             	sub    esp,0xc
c0029055:	ba 20 ca 02 c0       	mov    edx,0xc002ca20
c002905a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905e:	89 10                	mov    DWORD PTR [eax],edx
c0029060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029064:	83 ec 0c             	sub    esp,0xc
c0029067:	50                   	push   eax
c0029068:	e8 37 aa fe ff       	call   c0013aa4 <Device::~Device()>
c002906d:	83 c4 10             	add    esp,0x10
c0029070:	90                   	nop
c0029071:	83 c4 0c             	add    esp,0xc
c0029074:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029076 <IOAPIC::~IOAPIC()>:
c0029076:	83 ec 0c             	sub    esp,0xc
c0029079:	83 ec 0c             	sub    esp,0xc
c002907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029080:	e8 cd ff ff ff       	call   c0029052 <IOAPIC::~IOAPIC()>
c0029085:	83 c4 10             	add    esp,0x10
c0029088:	83 ec 08             	sub    esp,0x8
c002908b:	68 68 01 00 00       	push   0x168
c0029090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029094:	e8 2c 96 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0029099:	83 c4 10             	add    esp,0x10
c002909c:	83 c4 0c             	add    esp,0xc
c002909f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290a0 <APIC::~APIC()>:
c00290a0:	83 ec 0c             	sub    esp,0xc
c00290a3:	ba d8 c9 02 c0       	mov    edx,0xc002c9d8
c00290a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ac:	89 10                	mov    DWORD PTR [eax],edx
c00290ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b2:	83 ec 0c             	sub    esp,0xc
c00290b5:	50                   	push   eax
c00290b6:	e8 2f b5 fe ff       	call   c00145ea <InterruptController::~InterruptController()>
c00290bb:	83 c4 10             	add    esp,0x10
c00290be:	90                   	nop
c00290bf:	83 c4 0c             	add    esp,0xc
c00290c2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290c4 <APIC::~APIC()>:
c00290c4:	83 ec 0c             	sub    esp,0xc
c00290c7:	83 ec 0c             	sub    esp,0xc
c00290ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ce:	e8 cd ff ff ff       	call   c00290a0 <APIC::~APIC()>
c00290d3:	83 c4 10             	add    esp,0x10
c00290d6:	83 ec 08             	sub    esp,0x8
c00290d9:	68 58 21 00 00       	push   0x2158
c00290de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e2:	e8 de 95 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00290e7:	83 c4 10             	add    esp,0x10
c00290ea:	83 c4 0c             	add    esp,0xc
c00290ed:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00290ee <PIC::~PIC()>:
c00290ee:	83 ec 0c             	sub    esp,0xc
c00290f1:	ba 70 ca 02 c0       	mov    edx,0xc002ca70
c00290f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fa:	89 10                	mov    DWORD PTR [eax],edx
c00290fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029100:	83 ec 0c             	sub    esp,0xc
c0029103:	50                   	push   eax
c0029104:	e8 e1 b4 fe ff       	call   c00145ea <InterruptController::~InterruptController()>
c0029109:	83 c4 10             	add    esp,0x10
c002910c:	90                   	nop
c002910d:	83 c4 0c             	add    esp,0xc
c0029110:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029112 <PIC::~PIC()>:
c0029112:	83 ec 0c             	sub    esp,0xc
c0029115:	83 ec 0c             	sub    esp,0xc
c0029118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002911c:	e8 cd ff ff ff       	call   c00290ee <PIC::~PIC()>
c0029121:	83 c4 10             	add    esp,0x10
c0029124:	83 ec 08             	sub    esp,0x8
c0029127:	68 58 21 00 00       	push   0x2158
c002912c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029130:	e8 90 95 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0029135:	83 c4 10             	add    esp,0x10
c0029138:	83 c4 0c             	add    esp,0xc
c002913b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002913c <APICTimer::~APICTimer()>:
c002913c:	83 ec 0c             	sub    esp,0xc
c002913f:	ba c4 ca 02 c0       	mov    edx,0xc002cac4
c0029144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029148:	89 10                	mov    DWORD PTR [eax],edx
c002914a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914e:	83 ec 0c             	sub    esp,0xc
c0029151:	50                   	push   eax
c0029152:	e8 f1 d4 fe ff       	call   c0016648 <Timer::~Timer()>
c0029157:	83 c4 10             	add    esp,0x10
c002915a:	90                   	nop
c002915b:	83 c4 0c             	add    esp,0xc
c002915e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029160 <APICTimer::~APICTimer()>:
c0029160:	83 ec 0c             	sub    esp,0xc
c0029163:	83 ec 0c             	sub    esp,0xc
c0029166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002916a:	e8 cd ff ff ff       	call   c002913c <APICTimer::~APICTimer()>
c002916f:	83 c4 10             	add    esp,0x10
c0029172:	83 ec 08             	sub    esp,0x8
c0029175:	68 60 01 00 00       	push   0x160
c002917a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002917e:	e8 42 95 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c0029183:	83 c4 10             	add    esp,0x10
c0029186:	83 c4 0c             	add    esp,0xc
c0029189:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002918a <PIT::~PIT()>:
c002918a:	83 ec 0c             	sub    esp,0xc
c002918d:	ba 14 cb 02 c0       	mov    edx,0xc002cb14
c0029192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029196:	89 10                	mov    DWORD PTR [eax],edx
c0029198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919c:	83 ec 0c             	sub    esp,0xc
c002919f:	50                   	push   eax
c00291a0:	e8 a3 d4 fe ff       	call   c0016648 <Timer::~Timer()>
c00291a5:	83 c4 10             	add    esp,0x10
c00291a8:	90                   	nop
c00291a9:	83 c4 0c             	add    esp,0xc
c00291ac:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291ae <PIT::~PIT()>:
c00291ae:	83 ec 0c             	sub    esp,0xc
c00291b1:	83 ec 0c             	sub    esp,0xc
c00291b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b8:	e8 cd ff ff ff       	call   c002918a <PIT::~PIT()>
c00291bd:	83 c4 10             	add    esp,0x10
c00291c0:	83 ec 08             	sub    esp,0x8
c00291c3:	68 5c 01 00 00       	push   0x15c
c00291c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291cc:	e8 f4 94 fe ff       	call   c00126c5 <operator delete(void*, unsigned long)>
c00291d1:	83 c4 10             	add    esp,0x10
c00291d4:	83 c4 0c             	add    esp,0xc
c00291d7:	c3                   	ret    
