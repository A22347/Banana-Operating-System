
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 86 02 00       	call   c0028678 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 22 92 02 c0       	mov    ebx,0xc0029222
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 92 02 c0    	cmp    ebx,0xc0029230
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 d9 02 c0       	mov    eax,0xc002d9f8
c0000049:	3d f8 d9 02 c0       	cmp    eax,0xc002d9f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 d9 02 c0       	push   0xc002d9f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 d9 02 c0       	mov    eax,0xc002d9f8
c0000075:	2d f8 d9 02 c0       	sub    eax,0xc002d9f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 d9 02 c0       	push   0xc002d9f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e028,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 92 02 c0       	mov    ebx,0xc0029238
c00000bb:	81 eb 34 92 02 c0    	sub    ebx,0xc0029234
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 92 02 c0       	mov    esi,0xc0029234
c00000ca:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c e0 02 c0       	mov    ds:0xc002e02c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 d9 02 c0       	push   0xc002d9f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e028,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 e0 02 c0       	push   0xc002e030
c000012c:	68 f8 d9 02 c0       	push   0xc002d9f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 27 d6 01 00       	call   c001d9c2 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 85 29 01 00       	call   c0012d38 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 05 d6 01 00       	call   c001d9c2 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 53 da 01 00       	call   c001de2f <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 01 e0 01 00       	call   c001e3e6 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 70 e4 02 c0 	lgdtd  ds:0xc002e470
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 62 46 01 00       	call   c0014c3b <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 48 e0 02 c0       	mov    ds:0xc002e048,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 48 e0 02 c0    	mov    DWORD PTR ds:0xc002e048,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 48 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e048
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 40 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6dc0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 40 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6dc0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 40 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6dc0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 40 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6dc0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 40 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6dc0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 60 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e060
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 60 e0 02 c0    	mov    DWORD PTR ds:0xc002e060,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 64 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f9c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 64 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f9c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 60 e0 02 c0    	mov    DWORD PTR ds:0xc002e060,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 8c e0 02 c0    	cmp    DWORD PTR ds:0xc002e08c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 9c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e09c
c0000e60:	c7 42 0c 94 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e094
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 9c e0 02 c0    	mov    DWORD PTR ds:0xc002e09c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 8c e0 02 c0    	mov    DWORD PTR ds:0xc002e08c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 60 e0 02 c0 02 	test   BYTE PTR ds:0xc002e060,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 60 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e060
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 64 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f9c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 64 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1f9c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 94 e0 02 c0 	lea    edx,[eax*8-0x3ffd1f6c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d a0 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a0
c00011e2:	81 fb 94 e0 02 c0    	cmp    ebx,0xc002e094
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 94 e0 02 c0       	cmp    eax,0xc002e094
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 90 e0 02 c0    	cmp    DWORD PTR ds:0xc002e090,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 9c e0 02 c0       	mov    ds:0xc002e09c,eax
c000121e:	a3 a0 e0 02 c0       	mov    ds:0xc002e0a0,eax
c0001223:	a3 90 e0 02 c0       	mov    ds:0xc002e090,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 94 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e094
c0001231:	c7 40 0c 94 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e094
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 a0 e0 02 c0       	mov    ds:0xc002e0a0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 94 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e094
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 58 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1fa8]
c0001282:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 60 e0 02 c0 	lea    ecx,[edx*4-0x3ffd1fa0]
c000129d:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 94 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1c6c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 94 e0 02 c0 	lea    eax,[eax*8-0x3ffd1f6c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 9c e0 02 c0    	mov    DWORD PTR ds:0xc002e09c,ecx
c0001357:	89 0d a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,ecx
c000135d:	c7 41 08 94 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e094
c0001364:	c7 41 0c 94 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e094
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 8c e0 02 c0 	lea    edx,[ecx*8-0x3ffd1f74]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 94 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c6c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 94 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c6c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 8c e0 02 c0 	lea    edx,[eax*4-0x3ffd1f74]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 94 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1c6c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 9c e0 02 c0    	mov    DWORD PTR ds:0xc002e09c,edi
c000142a:	89 3d a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,edi
c0001430:	c7 47 08 94 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e094
c0001437:	c7 47 0c 94 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e094
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 90 e0 02 c0    	mov    DWORD PTR ds:0xc002e090,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 8c e0 02 c0    	mov    DWORD PTR ds:0xc002e08c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 60 e0 02 c0       	mov    edx,0xc002e060
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 60 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e060,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d b4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3b4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 b4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3b4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d b4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 8c e0 02 c0    	cmp    DWORD PTR ds:0xc002e08c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 8c e0 02 c0    	mov    DWORD PTR ds:0xc002e08c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 60 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e060,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 bc e3 02 c0    	push   DWORD PTR ds:0xc002e3bc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 60 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e060,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 bc e3 02 c0       	mov    eax,ds:0xc002e3bc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 8c e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e08c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 64 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f9c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 94 e0 02 c0       	mov    eax,0xc002e094
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 8c e3 02 c0       	cmp    eax,0xc002e38c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 b0 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3b0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 c4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 d4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3d4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 44 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cbc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 60 e0 02 c0       	mov    eax,ds:0xc002e060
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 60 e0 02 c0       	mov    ds:0xc002e060,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d a4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d a8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ac e3 02 c0    	mov    DWORD PTR ds:0xc002e3ac,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 b4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3b4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 40 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4c0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 b2 f1 01 00       	jmp    c0020dde <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 40 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4c0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 e3 f1 01 00       	jmp    c0020e25 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 40 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4c0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 0b f2 01 00       	jmp    c0020e6c <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 98 4a 02 00       	call   c00269dc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 60 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ba0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 60 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ba0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 60 93 02 c0       	mov    edx,0xc0029360
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 80 94 02 c0       	mov    edx,0xc0029480
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 80 c8 02 c0       	mov    edx,0xc002c880
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 8c 94 02 c0       	mov    edx,0xc002948c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 70 94 02 c0       	mov    edx,0xc0029470
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 00 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1c00]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 e0 e3 02 c0    	mov    ax,ds:0xc002e3e0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 e0 e3 02 c0    	mov    ds:0xc002e3e0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 95 38 02 00       	call   c00269dc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 92 94 02 c0       	mov    eax,0xc0029492
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad e0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c20]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 9b 94 02 c0       	mov    eax,0xc002949b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 60 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ba0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 60 22 02 00       	call   c00269dc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 70 94 02 c0       	mov    edx,0xc0029470
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 60 93 02 c0       	mov    edx,0xc0029360
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 00 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c00]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 00 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1c00],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 27 0c 02 00       	call   c00269dc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 0d 0c 02 00       	call   c00269dc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 b7 93 02 c0       	mov    eax,0xc00293b7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 b0 93 02 c0       	mov    eax,0xc00293b0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 00 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c00]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be a0 93 02 c0       	mov    esi,0xc00293a0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 50 f3 01 00       	call   c00269dc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 80 94 02 c0       	mov    edx,0xc0029480
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 80 93 02 c0       	mov    edx,0xc0029380
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ae 94 02 c0       	mov    edx,0xc00294ae
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba c2 94 02 c0       	mov    edx,0xc00294c2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c e0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297e0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 e0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297e0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 e0 95 02 c0       	mov    eax,0xc00295e0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 20 95 02 c0       	mov    eax,0xc0029520
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 a4 fc 01 00       	call   c00284af <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 67 fc 01 00       	call   c0028491 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 3b fc 01 00       	call   c00284af <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ee f2 01 00       	call   c0027bb4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 68 fd 01 00       	call   c0028640 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 b5 fb 01 00       	call   c00284af <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 f7 fa 01 00       	call   c00284af <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 c4 fa 01 00       	call   c0028491 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 b1 f9 01 00       	call   c00284af <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 79 f9 01 00       	call   c0028491 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 85 f7 01 00       	call   c00284af <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 4a f7 01 00       	call   c0028491 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 40 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62c0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 5a f4 01 00       	call   c0028243 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 d8 ed 01 00       	call   c0027be0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 94 f6 01 00       	call   c00284b3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 82 f7 01 00       	call   c00285d7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 6c ed 01 00       	call   c0027be0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 17 f6 01 00       	call   c00284ad <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 f8 f5 01 00       	call   c00284b1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 86 f7 01 00       	call   c0028660 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 38 f3 01 00       	call   c0028243 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 b6 ec 01 00       	call   c0027be0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 72 f5 01 00       	call   c00284b3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 60 f6 01 00       	call   c00285d7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 4a ec 01 00       	call   c0027be0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 f5 f4 01 00       	call   c00284ad <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 d5 f4 01 00       	call   c00284b1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 62 f6 01 00       	call   c0028660 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 10 f4 01 00       	call   c00284af <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 ce f3 01 00       	call   c0028491 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 b6 f3 01 00       	call   c00284af <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 28 f1 01 00       	call   c0028243 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 2a e4 01 00       	call   c0027563 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 8d ea 01 00       	call   c0027be0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 df f0 01 00       	call   c0028243 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 e5 e3 01 00       	call   c0027563 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 b4 f0 01 00       	call   c0028243 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 04 f3 01 00       	call   c00284ad <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 e1 e9 01 00       	call   c0027bb4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 5b f4 01 00       	call   c0028640 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 8a f2 01 00       	call   c0028491 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 85 e9 01 00       	call   c0027bb4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 03 f0 01 00       	call   c0028243 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 86 e9 01 00       	call   c0027be0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 d8 ef 01 00       	call   c0028243 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 3f ec 01 00       	call   c0027ec4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 be e2 01 00       	call   c0027563 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 1e dc 01 00       	call   c0026ef8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 f5 f2 01 00       	call   c00285d7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 de e8 01 00       	call   c0027be0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 c5 f2 01 00       	call   c00285d7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 37 e2 01 00       	call   c0027563 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 70 f1 01 00       	call   c00284b3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 58 eb 01 00       	call   c0027ec4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 de e1 01 00       	call   c0027563 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 c4 f2 01 00       	call   c0028660 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 9e ee 01 00       	call   c0028243 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 f5 e7 01 00       	call   c0027bb4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 d4 f0 01 00       	call   c00284af <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 6d e1 01 00       	call   c0027563 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 99 e7 01 00       	call   c0027bb4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 33 f2 01 00       	call   c0028660 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 ec ed 01 00       	call   c0028243 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 69 e7 01 00       	call   c0027be0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 bc ed 01 00       	call   c0028243 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 c2 e0 01 00       	call   c0027563 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 92 ed 01 00       	call   c0028243 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 e4 ef 01 00       	call   c00284af <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 bb e6 01 00       	call   c0027bb4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 35 f1 01 00       	call   c0028640 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 64 ef 01 00       	call   c0028491 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 5e e6 01 00       	call   c0027bb4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 dc ec 01 00       	call   c0028243 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 5f e6 01 00       	call   c0027be0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 b1 ec 01 00       	call   c0028243 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 18 e9 01 00       	call   c0027ec4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 97 df 01 00       	call   c0027563 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 e7 d8 01 00       	call   c0026ef8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 be ef 01 00       	call   c00285d7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 a7 e5 01 00       	call   c0027be0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 8e ef 01 00       	call   c00285d7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 00 df 01 00       	call   c0027563 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 39 ee 01 00       	call   c00284b3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 20 e8 01 00       	call   c0027ec4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 9f de 01 00       	call   c0027563 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 85 ef 01 00       	call   c0028660 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 5f eb 01 00       	call   c0028243 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 b6 e4 01 00       	call   c0027bb4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 95 ed 01 00       	call   c00284af <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 2e de 01 00       	call   c0027563 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 5a e4 01 00       	call   c0027bb4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 cf ea 01 00       	call   c0028243 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 d5 dd 01 00       	call   c0027563 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 b4 9d 02 c0       	mov    eax,0xc0029db4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 4a e9 01 00       	call   c0028243 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 c8 e2 01 00       	call   c0027be0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 5a d5 01 00       	call   c0026ef8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 31 ec 01 00       	call   c00285d7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 1a e2 01 00       	call   c0027be0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 fd eb 01 00       	call   c00285d7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 6f db 01 00       	call   c0027563 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 cf eb 01 00       	call   c00285d7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 be e1 01 00       	call   c0027be0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 27 db 01 00       	call   c0027563 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 48 d4 01 00       	call   c0026ef8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 1f eb 01 00       	call   c00285d7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 08 e1 01 00       	call   c0027be0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 eb ea 01 00       	call   c00285d7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 5d da 01 00       	call   c0027563 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 bd ea 01 00       	call   c00285d7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 ac e0 01 00       	call   c0027be0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 15 da 01 00       	call   c0027563 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 f3 d9 01 00       	call   c0027563 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 cf d2 01 00       	call   c0026ef8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 a6 e9 01 00       	call   c00285d7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 8f df 01 00       	call   c0027be0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 72 e9 01 00       	call   c00285d7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 e4 d8 01 00       	call   c0027563 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 44 e9 01 00       	call   c00285d7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 2d df 01 00       	call   c0027be0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 96 d8 01 00       	call   c0027563 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 f6 e8 01 00       	call   c00285d7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 df de 01 00       	call   c0027be0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 48 d8 01 00       	call   c0027563 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 5d d1 01 00       	call   c0026ef8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 34 e8 01 00       	call   c00285d7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 1d de 01 00       	call   c0027be0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 04 e8 01 00       	call   c00285d7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 76 d7 01 00       	call   c0027563 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 d6 e7 01 00       	call   c00285d7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 bf dd 01 00       	call   c0027be0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 28 d7 01 00       	call   c0027563 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 88 e7 01 00       	call   c00285d7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 71 dd 01 00       	call   c0027be0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 da d6 01 00       	call   c0027563 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 ae d6 01 00       	call   c0027563 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 0b dd 01 00       	call   c0027be0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 c7 e5 01 00       	call   c00284b3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 56 d6 01 00       	call   c0027563 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 b3 dc 01 00       	call   c0027be0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 6f e5 01 00       	call   c00284b3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 e9 ce 01 00       	call   c0026ef8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 c0 e5 01 00       	call   c00285d7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 a9 db 01 00       	call   c0027be0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 8c e5 01 00       	call   c00285d7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 fe d4 01 00       	call   c0027563 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 5e e5 01 00       	call   c00285d7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 47 db 01 00       	call   c0027be0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 b0 d4 01 00       	call   c0027563 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 10 e5 01 00       	call   c00285d7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 f9 da 01 00       	call   c0027be0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 62 d4 01 00       	call   c0027563 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 c2 e4 01 00       	call   c00285d7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 ab da 01 00       	call   c0027be0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 14 d4 01 00       	call   c0027563 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 74 e4 01 00       	call   c00285d7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 5d da 01 00       	call   c0027be0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 c6 d3 01 00       	call   c0027563 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 c8 cc 01 00       	call   c0026ef8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 9f e3 01 00       	call   c00285d7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 88 d9 01 00       	call   c0027be0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 6f e3 01 00       	call   c00285d7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 e1 d2 01 00       	call   c0027563 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 41 e3 01 00       	call   c00285d7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 2a d9 01 00       	call   c0027be0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 93 d2 01 00       	call   c0027563 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 f3 e2 01 00       	call   c00285d7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 dc d8 01 00       	call   c0027be0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 45 d2 01 00       	call   c0027563 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 a5 e2 01 00       	call   c00285d7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 8e d8 01 00       	call   c0027be0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 f7 d1 01 00       	call   c0027563 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 57 e2 01 00       	call   c00285d7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 40 d8 01 00       	call   c0027be0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 a9 d1 01 00       	call   c0027563 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 7d d1 01 00       	call   c0027563 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 da d7 01 00       	call   c0027be0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 96 e0 01 00       	call   c00284b3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 25 d1 01 00       	call   c0027563 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 82 d7 01 00       	call   c0027be0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 3e e0 01 00       	call   c00284b3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 cc d0 01 00       	call   c0027563 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 29 d7 01 00       	call   c0027be0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 e5 df 01 00       	call   c00284b3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 73 d0 01 00       	call   c0027563 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 d0 d6 01 00       	call   c0027be0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 8c df 01 00       	call   c00284b3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ea c8 01 00       	call   c0026ef8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 c1 df 01 00       	call   c00285d7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 aa d5 01 00       	call   c0027be0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 8d df 01 00       	call   c00285d7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 ff ce 01 00       	call   c0027563 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 5f df 01 00       	call   c00285d7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 48 d5 01 00       	call   c0027be0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 b1 ce 01 00       	call   c0027563 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 11 df 01 00       	call   c00285d7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 fa d4 01 00       	call   c0027be0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 63 ce 01 00       	call   c0027563 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 c3 de 01 00       	call   c00285d7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 ac d4 01 00       	call   c0027be0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 15 ce 01 00       	call   c0027563 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 75 de 01 00       	call   c00285d7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 5e d4 01 00       	call   c0027be0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 c7 cd 01 00       	call   c0027563 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 27 de 01 00       	call   c00285d7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 10 d4 01 00       	call   c0027be0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 76 cd 01 00       	call   c0027563 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 d6 dd 01 00       	call   c00285d7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 bf d3 01 00       	call   c0027be0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 28 cd 01 00       	call   c0027563 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 22 c6 01 00       	call   c0026ef8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 f9 dc 01 00       	call   c00285d7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 e2 d2 01 00       	call   c0027be0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 c2 dc 01 00       	call   c00285d7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 34 cc 01 00       	call   c0027563 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 94 dc 01 00       	call   c00285d7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 7d d2 01 00       	call   c0027be0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 e6 cb 01 00       	call   c0027563 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 46 dc 01 00       	call   c00285d7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 2f d2 01 00       	call   c0027be0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 98 cb 01 00       	call   c0027563 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 f8 db 01 00       	call   c00285d7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 e1 d1 01 00       	call   c0027be0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 4a cb 01 00       	call   c0027563 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 aa db 01 00       	call   c00285d7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 93 d1 01 00       	call   c0027be0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 fc ca 01 00       	call   c0027563 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 5c db 01 00       	call   c00285d7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 45 d1 01 00       	call   c0027be0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 ab ca 01 00       	call   c0027563 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 0b db 01 00       	call   c00285d7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 f4 d0 01 00       	call   c0027be0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 63 ca 01 00       	call   c0027563 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 3c ca 01 00       	call   c0027563 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 9a d0 01 00       	call   c0027be0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 56 d9 01 00       	call   c00284b3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 e5 c9 01 00       	call   c0027563 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 43 d0 01 00       	call   c0027be0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 ff d8 01 00       	call   c00284b3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 8d c9 01 00       	call   c0027563 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 eb cf 01 00       	call   c0027be0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 a7 d8 01 00       	call   c00284b3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 35 c9 01 00       	call   c0027563 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 93 cf 01 00       	call   c0027be0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 4f d8 01 00       	call   c00284b3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 dd c8 01 00       	call   c0027563 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 3b cf 01 00       	call   c0027be0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 f7 d7 01 00       	call   c00284b3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 8b c8 01 00       	call   c0027563 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 e9 ce 01 00       	call   c0027be0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 a5 d7 01 00       	call   c00284b3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 b9 c0 01 00       	call   c0026ef8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 90 d7 01 00       	call   c00285d7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 79 cd 01 00       	call   c0027be0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 60 d7 01 00       	call   c00285d7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 d2 c6 01 00       	call   c0027563 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 e4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd621c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 06 d7 01 00       	call   c00285d7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 ef cc 01 00       	call   c0027be0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 5a c6 01 00       	call   c0027563 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 a7 d6 01 00       	call   c00285d7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 90 cc 01 00       	call   c0027be0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 fb c5 01 00       	call   c0027563 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 48 d6 01 00       	call   c00285d7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 31 cc 01 00       	call   c0027be0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 9c c5 01 00       	call   c0027563 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 e9 d5 01 00       	call   c00285d7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 d2 cb 01 00       	call   c0027be0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 3d c5 01 00       	call   c0027563 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 8a d5 01 00       	call   c00285d7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 73 cb 01 00       	call   c0027be0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 de c4 01 00       	call   c0027563 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 2b d5 01 00       	call   c00285d7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 14 cb 01 00       	call   c0027be0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 7f c4 01 00       	call   c0027563 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 cc d4 01 00       	call   c00285d7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 b5 ca 01 00       	call   c0027be0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 20 c4 01 00       	call   c0027563 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 6d d4 01 00       	call   c00285d7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 56 ca 01 00       	call   c0027be0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 c1 c3 01 00       	call   c0027563 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 cb bc 01 00       	call   c0026ef8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 a2 d3 01 00       	call   c00285d7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 8b c9 01 00       	call   c0027be0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 72 d3 01 00       	call   c00285d7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 e4 c2 01 00       	call   c0027563 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 00 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6200]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 17 d3 01 00       	call   c00285d7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 00 c9 01 00       	call   c0027be0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 6b c2 01 00       	call   c0027563 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 b7 d2 01 00       	call   c00285d7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 a0 c8 01 00       	call   c0027be0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 0b c2 01 00       	call   c0027563 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 57 d2 01 00       	call   c00285d7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 40 c8 01 00       	call   c0027be0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 ab c1 01 00       	call   c0027563 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 f7 d1 01 00       	call   c00285d7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 e0 c7 01 00       	call   c0027be0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 4b c1 01 00       	call   c0027563 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 97 d1 01 00       	call   c00285d7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 80 c7 01 00       	call   c0027be0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 eb c0 01 00       	call   c0027563 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 37 d1 01 00       	call   c00285d7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 20 c7 01 00       	call   c0027be0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 8b c0 01 00       	call   c0027563 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 d7 d0 01 00       	call   c00285d7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 c0 c6 01 00       	call   c0027be0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 2b c0 01 00       	call   c0027563 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 77 d0 01 00       	call   c00285d7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 60 c6 01 00       	call   c0027be0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 cb bf 01 00       	call   c0027563 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 1c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61e4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 70 bf 01 00       	call   c0027563 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 cd c5 01 00       	call   c0027be0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 89 ce 01 00       	call   c00284b3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 13 bf 01 00       	call   c0027563 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 70 c5 01 00       	call   c0027be0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 2c ce 01 00       	call   c00284b3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 b6 be 01 00       	call   c0027563 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 13 c5 01 00       	call   c0027be0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 cf cd 01 00       	call   c00284b3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 59 be 01 00       	call   c0027563 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 b6 c4 01 00       	call   c0027be0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 72 cd 01 00       	call   c00284b3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 fc bd 01 00       	call   c0027563 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 59 c4 01 00       	call   c0027be0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 15 cd 01 00       	call   c00284b3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 9f bd 01 00       	call   c0027563 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 fc c3 01 00       	call   c0027be0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 b8 cc 01 00       	call   c00284b3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 42 bd 01 00       	call   c0027563 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 9f c3 01 00       	call   c0027be0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 5b cc 01 00       	call   c00284b3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 e5 bc 01 00       	call   c0027563 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 42 c3 01 00       	call   c0027be0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 fe cb 01 00       	call   c00284b3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 fa c2 01 00       	call   c0027be0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 6a cd 01 00       	jmp    c0028660 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 dc c9 01 00       	call   c00284af <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 9a c9 01 00       	call   c0028491 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 31 c7 01 00       	call   c0028243 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 32 ba 01 00       	call   c0027563 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 01 c7 01 00       	call   c0028243 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 68 c3 01 00       	call   c0027ec4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 07 c9 01 00       	call   c0028491 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 0a c9 01 00       	call   c00284af <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 dd c8 01 00       	call   c00284af <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 d6 c2 01 00       	call   c0027ec4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 58 ca 01 00       	call   c0028660 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 33 ca 01 00       	call   c0028660 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 0d c6 01 00       	call   c0028243 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 64 bf 01 00       	call   c0027bb4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 43 c8 01 00       	call   c00284af <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 dc b8 01 00       	call   c0027563 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 00 bf 01 00       	call   c0027bb4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 9a c9 01 00       	call   c0028660 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 da c1 01 00       	call   c0027ec4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 57 b8 01 00       	call   c0027563 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 83 c4 01 00       	call   c0028243 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 83 b7 01 00       	call   c0027563 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 63 b7 01 00       	call   c0027563 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 33 c4 01 00       	call   c0028243 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 83 c6 01 00       	call   c00284ad <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 62 bd 01 00       	call   c0027bb4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 dc c7 01 00       	call   c0028640 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 0b c6 01 00       	call   c0028491 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 09 bd 01 00       	call   c0027bb4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 87 c3 01 00       	call   c0028243 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 0a bd 01 00       	call   c0027be0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 5c c3 01 00       	call   c0028243 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 c3 bf 01 00       	call   c0027ec4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 42 b6 01 00       	call   c0027563 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 0c c3 01 00       	call   c0028243 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 58 c5 01 00       	call   c00284af <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 4d bc 01 00       	call   c0027be0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 1f bc 01 00       	call   c0027be0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 58 c2 01 00       	call   c0028243 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 bc be 01 00       	call   c0027ec4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 84 be 01 00       	call   c0027ec4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 03 b5 01 00       	call   c0027563 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 e8 c5 01 00       	call   c0028660 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 c2 c1 01 00       	call   c0028243 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 19 bb 01 00       	call   c0027bb4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 f8 c3 01 00       	call   c00284af <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 90 b4 01 00       	call   c0027563 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 b4 ba 01 00       	call   c0027bb4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 4e c5 01 00       	call   c0028660 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 17 c3 01 00       	call   c00284af <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 d5 c2 01 00       	call   c0028491 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 6c c0 01 00       	call   c0028243 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 6d b3 01 00       	call   c0027563 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 3c c0 01 00       	call   c0028243 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 a3 bc 01 00       	call   c0027ec4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 42 c2 01 00       	call   c0028491 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 45 c2 01 00       	call   c00284af <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 18 c2 01 00       	call   c00284af <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 11 bc 01 00       	call   c0027ec4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 93 c3 01 00       	call   c0028660 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 6e c3 01 00       	call   c0028660 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 48 bf 01 00       	call   c0028243 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 9f b8 01 00       	call   c0027bb4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 7e c1 01 00       	call   c00284af <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 17 b2 01 00       	call   c0027563 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 3b b8 01 00       	call   c0027bb4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 d5 c2 01 00       	call   c0028660 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 15 bb 01 00       	call   c0027ec4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 92 b1 01 00       	call   c0027563 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 bd bd 01 00       	call   c0028243 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 bd b0 01 00       	call   c0027563 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 9d b0 01 00       	call   c0027563 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 6d bd 01 00       	call   c0028243 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 bd bf 01 00       	call   c00284ad <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 9b b6 01 00       	call   c0027bb4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 15 c1 01 00       	call   c0028640 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 44 bf 01 00       	call   c0028491 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 41 b6 01 00       	call   c0027bb4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 bf bc 01 00       	call   c0028243 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 42 b6 01 00       	call   c0027be0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 94 bc 01 00       	call   c0028243 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 fb b8 01 00       	call   c0027ec4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 7a af 01 00       	call   c0027563 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 44 bc 01 00       	call   c0028243 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 90 be 01 00       	call   c00284af <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 85 b5 01 00       	call   c0027be0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 57 b5 01 00       	call   c0027be0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 8e bb 01 00       	call   c0028243 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 f2 b7 01 00       	call   c0027ec4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 bf b7 01 00       	call   c0027ec4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 3e ae 01 00       	call   c0027563 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 23 bf 01 00       	call   c0028660 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 fd ba 01 00       	call   c0028243 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 54 b4 01 00       	call   c0027bb4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 33 bd 01 00       	call   c00284af <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 cb ad 01 00       	call   c0027563 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 ef b3 01 00       	call   c0027bb4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 89 be 01 00       	call   c0028660 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 52 bc 01 00       	call   c00284af <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 10 bc 01 00       	call   c0028491 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 a7 b9 01 00       	call   c0028243 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 a8 ac 01 00       	call   c0027563 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 77 b9 01 00       	call   c0028243 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 de b5 01 00       	call   c0027ec4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 7d bb 01 00       	call   c0028491 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 80 bb 01 00       	call   c00284af <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 53 bb 01 00       	call   c00284af <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 4c b5 01 00       	call   c0027ec4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 ce bc 01 00       	call   c0028660 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 a9 bc 01 00       	call   c0028660 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 83 b8 01 00       	call   c0028243 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 da b1 01 00       	call   c0027bb4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 b9 ba 01 00       	call   c00284af <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 52 ab 01 00       	call   c0027563 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 76 b1 01 00       	call   c0027bb4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 10 bc 01 00       	call   c0028660 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 50 b4 01 00       	call   c0027ec4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 cd aa 01 00       	call   c0027563 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 f8 b6 01 00       	call   c0028243 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 f8 a9 01 00       	call   c0027563 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 d8 a9 01 00       	call   c0027563 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 a8 b6 01 00       	call   c0028243 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 f8 b8 01 00       	call   c00284ad <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 d6 af 01 00       	call   c0027bb4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 50 ba 01 00       	call   c0028640 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 7f b8 01 00       	call   c0028491 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 7c af 01 00       	call   c0027bb4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 fa b5 01 00       	call   c0028243 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 7d af 01 00       	call   c0027be0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 cf b5 01 00       	call   c0028243 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 36 b2 01 00       	call   c0027ec4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 b5 a8 01 00       	call   c0027563 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 7f b5 01 00       	call   c0028243 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 cb b7 01 00       	call   c00284af <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 c0 ae 01 00       	call   c0027be0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 92 ae 01 00       	call   c0027be0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 c9 b4 01 00       	call   c0028243 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 2d b1 01 00       	call   c0027ec4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 fa b0 01 00       	call   c0027ec4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 79 a7 01 00       	call   c0027563 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 5e b8 01 00       	call   c0028660 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 38 b4 01 00       	call   c0028243 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 8f ad 01 00       	call   c0027bb4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 6e b6 01 00       	call   c00284af <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 06 a7 01 00       	call   c0027563 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 2a ad 01 00       	call   c0027bb4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 c4 b7 01 00       	call   c0028660 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 8d b5 01 00       	call   c00284af <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 4b b5 01 00       	call   c0028491 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 e2 b2 01 00       	call   c0028243 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 e3 a5 01 00       	call   c0027563 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 b2 b2 01 00       	call   c0028243 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 19 af 01 00       	call   c0027ec4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 b8 b4 01 00       	call   c0028491 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 bb b4 01 00       	call   c00284af <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 8e b4 01 00       	call   c00284af <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 87 ae 01 00       	call   c0027ec4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 09 b6 01 00       	call   c0028660 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 e4 b5 01 00       	call   c0028660 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 be b1 01 00       	call   c0028243 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 15 ab 01 00       	call   c0027bb4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 f4 b3 01 00       	call   c00284af <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 8d a4 01 00       	call   c0027563 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 b1 aa 01 00       	call   c0027bb4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 4b b5 01 00       	call   c0028660 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 8b ad 01 00       	call   c0027ec4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 08 a4 01 00       	call   c0027563 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 33 b0 01 00       	call   c0028243 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 33 a3 01 00       	call   c0027563 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 13 a3 01 00       	call   c0027563 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 e3 af 01 00       	call   c0028243 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 33 b2 01 00       	call   c00284ad <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 11 a9 01 00       	call   c0027bb4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 8b b3 01 00       	call   c0028640 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 ba b1 01 00       	call   c0028491 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 b7 a8 01 00       	call   c0027bb4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 35 af 01 00       	call   c0028243 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 b8 a8 01 00       	call   c0027be0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 0a af 01 00       	call   c0028243 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 71 ab 01 00       	call   c0027ec4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 f0 a1 01 00       	call   c0027563 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 ba ae 01 00       	call   c0028243 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 06 b1 01 00       	call   c00284af <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 fb a7 01 00       	call   c0027be0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 cd a7 01 00       	call   c0027be0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 04 ae 01 00       	call   c0028243 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 68 aa 01 00       	call   c0027ec4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 35 aa 01 00       	call   c0027ec4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 b4 a0 01 00       	call   c0027563 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 99 b1 01 00       	call   c0028660 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 73 ad 01 00       	call   c0028243 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 ca a6 01 00       	call   c0027bb4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 a9 af 01 00       	call   c00284af <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 41 a0 01 00       	call   c0027563 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 65 a6 01 00       	call   c0027bb4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 ff b0 01 00       	call   c0028660 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 c5 ae 01 00       	call   c00284af <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 83 ae 01 00       	call   c0028491 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 1a ac 01 00       	call   c0028243 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 1b 9f 01 00       	call   c0027563 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ea ab 01 00       	call   c0028243 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 51 a8 01 00       	call   c0027ec4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 f0 ad 01 00       	call   c0028491 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 f3 ad 01 00       	call   c00284af <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 c6 ad 01 00       	call   c00284af <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 bf a7 01 00       	call   c0027ec4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 41 af 01 00       	call   c0028660 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 18 af 01 00       	call   c0028660 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 f2 aa 01 00       	call   c0028243 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 49 a4 01 00       	call   c0027bb4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 28 ad 01 00       	call   c00284af <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 c1 9d 01 00       	call   c0027563 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 e9 a3 01 00       	call   c0027bb4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 83 ae 01 00       	call   c0028660 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 c4 a6 01 00       	call   c0027ec4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 41 9d 01 00       	call   c0027563 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 6d a9 01 00       	call   c0028243 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 6d 9c 01 00       	call   c0027563 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 4d 9c 01 00       	call   c0027563 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 1d a9 01 00       	call   c0028243 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 51 ab 01 00       	call   c0028491 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 48 a2 01 00       	call   c0027bb4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 c2 ac 01 00       	call   c0028640 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 f1 aa 01 00       	call   c0028491 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 eb a1 01 00       	call   c0027bb4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 69 a8 01 00       	call   c0028243 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 ec a1 01 00       	call   c0027be0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 3e a8 01 00       	call   c0028243 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 a5 a4 01 00       	call   c0027ec4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 24 9b 01 00       	call   c0027563 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ee a7 01 00       	call   c0028243 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 3a aa 01 00       	call   c00284af <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 2f a1 01 00       	call   c0027be0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 01 a1 01 00       	call   c0027be0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 45 a7 01 00       	call   c0028243 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 ac a3 01 00       	call   c0027ec4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 95 a0 01 00       	call   c0027be0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 51 a9 01 00       	call   c00284b3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 44 a3 01 00       	call   c0027ec4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 c3 99 01 00       	call   c0027563 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 a8 aa 01 00       	call   c0028660 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 82 a6 01 00       	call   c0028243 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 d9 9f 01 00       	call   c0027bb4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 b8 a8 01 00       	call   c00284af <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 50 99 01 00       	call   c0027563 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 78 9f 01 00       	call   c0027bb4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 12 aa 01 00       	call   c0028660 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 44 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61bc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 38 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61c8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 cd a6 01 00       	call   c00284af <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 8b a6 01 00       	call   c0028491 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 77 a6 01 00       	call   c00284af <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 e9 a3 01 00       	call   c0028243 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 67 9d 01 00       	call   c0027be0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 b9 a3 01 00       	call   c0028243 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 bf 96 01 00       	call   c0027563 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 8e a3 01 00       	call   c0028243 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 de a5 01 00       	call   c00284ad <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 bf 9c 01 00       	call   c0027bb4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 39 a7 01 00       	call   c0028640 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 68 a5 01 00       	call   c0028491 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 67 9c 01 00       	call   c0027bb4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 e5 a2 01 00       	call   c0028243 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 68 9c 01 00       	call   c0027be0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 ba a2 01 00       	call   c0028243 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 21 9f 01 00       	call   c0027ec4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 a0 95 01 00       	call   c0027563 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 c8 9e 01 00       	call   c0027ec4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 4e 95 01 00       	call   c0027563 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 34 a6 01 00       	call   c0028660 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 0e a2 01 00       	call   c0028243 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 65 9b 01 00       	call   c0027bb4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 44 a4 01 00       	call   c00284af <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 dd 94 01 00       	call   c0027563 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 09 9b 01 00       	call   c0027bb4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 a3 a5 01 00       	call   c0028660 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 58 a1 01 00       	call   c0028243 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 d5 9a 01 00       	call   c0027be0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 26 a1 01 00       	call   c0028243 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 2c 94 01 00       	call   c0027563 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 fc a0 01 00       	call   c0028243 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 50 a3 01 00       	call   c00284b1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 29 9a 01 00       	call   c0027bb4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 a3 a4 01 00       	call   c0028640 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 d2 a2 01 00       	call   c0028491 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 d0 99 01 00       	call   c0027bb4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 4e a0 01 00       	call   c0028243 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 d1 99 01 00       	call   c0027be0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 23 a0 01 00       	call   c0028243 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 8a 9c 01 00       	call   c0027ec4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 09 93 01 00       	call   c0027563 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 25 9c 01 00       	call   c0027ec4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 a4 92 01 00       	call   c0027563 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 8a a3 01 00       	call   c0028660 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 64 9f 01 00       	call   c0028243 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 bb 98 01 00       	call   c0027bb4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 9a a1 01 00       	call   c00284af <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 33 92 01 00       	call   c0027563 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 5f 98 01 00       	call   c0027bb4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 d0 9e 01 00       	call   c0028243 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 d6 91 01 00       	call   c0027563 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 5e 9f 02 c0       	mov    eax,0xc0029f5e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 6f 9f 02 c0       	mov    eax,0xc0029f6f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 a6 9f 02 c0       	push   0xc0029fa6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 68 e4 02 c0       	mov    eax,0xc002e468
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 af 9f 02 c0       	push   0xc0029faf
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 dc 69 02 c0       	mov    eax,0xc00269dc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 b9 9f 02 c0       	push   0xc0029fb9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 10 67 02 c0       	mov    eax,0xc0026710
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 cc 9f 02 c0       	push   0xc0029fcc
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 5c 68 02 c0       	mov    eax,0xc002685c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 d5 9f 02 c0       	push   0xc0029fd5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 6c e4 02 c0       	mov    eax,0xc002e46c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 e2 9f 02 c0       	push   0xc0029fe2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 6d e4 02 c0       	mov    eax,0xc002e46d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 d3 5e 00 00       	call   c00144f6 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c000e668:	68 ef 9f 02 c0       	push   0xc0029fef
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 bb f5 00 00       	call   c001dc30 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 a4 f8 00 00       	call   c001df2e <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 8c e7 01 c0       	push   0xc001e78c
c000e693:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c000e699:	e8 90 f8 00 00       	call   c001df2e <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c000e6a6:	c6 05 6d e4 02 c0 01 	mov    BYTE PTR ds:0xc002e46d,0x1
c000e6ad:	e8 5b 04 01 00       	call   c001eb0d <Vm::initialise8086()>
c000e6b2:	e8 27 4c 00 00       	call   c00132de <Fs::initVFS()>
c000e6b7:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 d3 de 00 00       	call   c001c5a6 <Sys::loadSyscalls()>
c000e6d3:	e8 f6 bd 00 00       	call   c001a4ce <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 fc 9f 02 c0       	push   0xc0029ffc
c000e6e2:	68 05 a0 02 c0       	push   0xc002a005
c000e6e7:	e8 08 cb 00 00       	call   c001b1f4 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 d2 56 00 00       	call   c0013dc6 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 c5 5d 00 00       	call   c00144ca <Device::loadDriversForAll()>
c000e705:	e8 0a b9 00 00       	call   c001a014 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 0d a0 02 c0       	push   0xc002a00d
c000e719:	e8 1c f0 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 62 f2 00 00       	call   c001d989 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 5e fb 00 00       	call   c001e292 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 29 a0 02 c0       	push   0xc002a029
c000e749:	50                   	push   eax
c000e74a:	e8 21 5e 00 00       	call   c0014570 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba c8 a1 02 c0       	mov    edx,0xc002a1c8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 81 e4 02 c0 04 	test   BYTE PTR ds:0xc002e481,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 c3 7d 01 00       	call   c00266a6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 08 a4 00 00       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 e1 a3 00 00       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 bf a3 00 00       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 9d a3 00 00       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 80 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e480,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 ab a2 00 00       	call   c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 86 a2 00 00       	call   c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 2d 7c 01 00       	call   c0026660 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 ea 7b 01 00       	call   c0026640 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 a2 a2 00 00       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 39 a0 02 c0       	push   0xc002a039
c000eaaf:	e8 a6 44 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 4c a0 02 c0       	push   0xc002a04c
c000ead2:	e8 83 44 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 5d a0 02 c0       	push   0xc002a05d
c000eaf5:	e8 60 44 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 6e a0 02 c0       	push   0xc002a06e
c000eb18:	e8 3d 44 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 7f a0 02 c0       	push   0xc002a07f
c000eb3b:	e8 1a 44 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 90 a0 02 c0       	push   0xc002a090
c000eb5e:	e8 f7 43 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 a1 a0 02 c0       	push   0xc002a0a1
c000eb81:	e8 d4 43 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 b2 a0 02 c0       	push   0xc002a0b2
c000eba4:	e8 b1 43 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 c3 a0 02 c0       	push   0xc002a0c3
c000ebc7:	e8 8e 43 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 d4 a0 02 c0       	push   0xc002a0d4
c000ebea:	e8 6b 43 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 e5 a0 02 c0       	push   0xc002a0e5
c000ec0d:	e8 48 43 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 f6 a0 02 c0       	push   0xc002a0f6
c000ec30:	e8 25 43 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 07 a1 02 c0       	push   0xc002a107
c000ec53:	e8 02 43 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 18 a1 02 c0       	push   0xc002a118
c000ec76:	e8 df 42 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 29 a1 02 c0       	push   0xc002a129
c000ec99:	e8 bc 42 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 3a a1 02 c0       	push   0xc002a13a
c000ecbc:	e8 99 42 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 4b a1 02 c0       	push   0xc002a14b
c000ecdf:	e8 76 42 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 5c a1 02 c0       	push   0xc002a15c
c000ed02:	e8 53 42 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 6d a1 02 c0       	push   0xc002a16d
c000ed21:	e8 34 42 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 4c bb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bb4c
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 23 42 00 00       	jmp    c0012f5a <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 7e a1 02 c0       	push   0xc002a17e
c000ee0a:	e8 f8 b7 00 00       	call   c001a607 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 84 a1 02 c0       	push   0xc002a184
c000ee42:	e8 c0 b7 00 00       	call   c001a607 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 80 e4 02 c0 04 	test   BYTE PTR ds:0xc002e480,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 a4 d3 02 c0 	sete   BYTE PTR ds:0xc002d3a4
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 41 93 00 00       	call   c00181f6 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 bc 54 00 00       	call   c0014380 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 ea 9e 00 00       	call   c0018dde <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 7d 54 00 00       	call   c0014380 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 e7 59 00 00       	call   c0014906 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 4d 54 00 00       	call   c0014380 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 d9 f0 00 00       	call   c001e02e <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 8a a1 02 c0       	push   0xc002a18a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 b7 3f 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 9b a1 02 c0       	push   0xc002a19b
c000efc0:	e8 42 b6 00 00       	call   c001a607 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 a8 a1 02 c0       	push   0xc002a1a8
c000efd5:	e8 2d b6 00 00       	call   c001a607 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 b2 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1b2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 16 b6 00 00       	jmp    c001a607 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 ec a1 02 c0       	push   0xc002a1ec
c000f086:	e8 cf 3e 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 72 e4 02 c0       	mov    ds:0xc002e472,eax
c000f0c7:	66 89 15 70 e4 02 c0 	mov    WORD PTR ds:0xc002e470,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 20 ec 00 00       	call   c001ddfe <unlockScheduler()>
c000f1de:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 b4 94 01 00       	call   c00286e0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 ab 94 01 00       	call   c00286e0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 78 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e478,0x7ff
c000f323:	a3 7a e4 02 c0       	mov    ds:0xc002e47a,eax
c000f328:	0f 01 1d 78 e4 02 c0 	lidtd  ds:0xc002e478
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 c9 27 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 10 2e 00 00       	call   c0012430 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 36 1e 00 00       	call   c0011474 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 67 1e 00 00       	call   c00114b4 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 94 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d394
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 94 d3 02 c0       	mov    eax,ds:0xc002d394
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 08 a2 02 c0       	push   0xc002a208
c000f6f4:	e8 61 38 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 94 d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d394,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 bf 26 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 94 d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d394
c000f727:	e8 b9 07 00 00       	call   c000fee5 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 f7 2b 00 00       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 94 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d394
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 38 a2 02 c0       	push   0xc002a238
c000f7ad:	e8 55 ae 00 00       	call   c001a607 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 3d a2 02 c0       	push   0xc002a23d
c000f7c3:	e8 3f ae 00 00       	call   c001a607 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 23 e6 00 00       	call   c001ddfc <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 14 e6 00 00       	call   c001ddfe <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 e3 25 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 23 2c 00 00       	call   c0012430 <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 c5 25 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 c6 28 00 00       	call   c00120ec <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 a0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3a0
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 53 0c 00 00       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 15 0c 00 00       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 ac 0c 00 00       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 a0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3a0
c000fb49:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d a0 d3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d3a0,0x8000
c000fba3:	c6 05 00 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e500,0x1
c000fbaa:	c7 05 38 e5 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e538,0xc000fa16
c000fbb4:	c7 05 24 e5 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e524,0xc000f89d
c000fbbe:	c7 05 20 e5 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e520,0xc000f8e8
c000fbc8:	c7 05 2c e5 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e52c,0xc000fa5c
c000fbd2:	c7 05 34 e5 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e534,0xc000f966
c000fbdc:	c7 05 28 e5 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e528,0xc000f9c4
c000fbe6:	c7 05 30 e5 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e530,0xc000f9c5
c000fbf0:	c7 05 3c e5 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e53c,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 20             	sub    esp,0x20
c000fc08:	e8 93 09 00 00       	call   c00105a0 <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 44 a2 02 c0       	push   0xc002a244
c000fc4d:	e8 08 33 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 f3 03 00 00       	call   c001005c <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 94 20 00 00       	call   c0011d02 <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 4d bb 02 c0       	push   0xc002bb4d
c000fc95:	e8 6d a9 00 00       	call   c001a607 <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d 80 e4 02 c0    	mov    DWORD PTR ds:0xc002e480,ebx
c000fca6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 64 22 00 00       	call   c0011f14 <VAS::VAS()>
c000fcb0:	89 1d ec e5 02 c0    	mov    DWORD PTR ds:0xc002e5ec,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 5b a2 02 c0 	mov    DWORD PTR [esp],0xc002a25b
c000fcc2:	e8 93 32 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000fcc7:	e8 b5 20 00 00       	call   c0011d81 <Virt::swappingSetup()>
c000fccc:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd3:	e8 6b fb ff ff       	call   c000f843 <malloc>
c000fcd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcdb:	89 c6                	mov    esi,eax
c000fcdd:	e8 58 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fce2:	58                   	pop    eax
c000fce3:	89 35 68 e4 02 c0    	mov    DWORD PTR ds:0xc002e468,esi
c000fce9:	5a                   	pop    edx
c000fcea:	56                   	push   esi
c000fceb:	68 78 a2 02 c0       	push   0xc002a278
c000fcf0:	e8 65 32 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000fcf5:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000fcfa:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcfc:	6a 00                	push   0x0
c000fcfe:	6a 00                	push   0x0
c000fd00:	6a 00                	push   0x0
c000fd02:	50                   	push   eax
c000fd03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd06:	83 c4 14             	add    esp,0x14
c000fd09:	53                   	push   ebx
c000fd0a:	e8 b5 24 00 00       	call   c00121c4 <VAS::~VAS()>
c000fd0f:	c7 04 24 8b a2 02 c0 	mov    DWORD PTR [esp],0xc002a28b
c000fd16:	e8 ec a8 00 00       	call   c001a607 <Krnl::panic(char const*)>
c000fd1b:	83 c4 30             	add    esp,0x30
c000fd1e:	5b                   	pop    ebx
c000fd1f:	5e                   	pop    esi
c000fd20:	5f                   	pop    edi
c000fd21:	c3                   	ret    

c000fd22 <Phys::allocateDMA(unsigned long)>:
c000fd22:	55                   	push   ebp
c000fd23:	31 d2                	xor    edx,edx
c000fd25:	57                   	push   edi
c000fd26:	31 ed                	xor    ebp,ebp
c000fd28:	56                   	push   esi
c000fd29:	31 c9                	xor    ecx,ecx
c000fd2b:	53                   	push   ebx
c000fd2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd30:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	c1 ee 0c             	shr    esi,0xc
c000fd3b:	eb 17                	jmp    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3d:	85 c9                	test   ecx,ecx
c000fd3f:	75 04                	jne    c000fd45 <Phys::allocateDMA(unsigned long)+0x23>
c000fd41:	89 d5                	mov    ebp,edx
c000fd43:	89 d0                	mov    eax,edx
c000fd45:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd48:	39 de                	cmp    esi,ebx
c000fd4a:	74 20                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x4a>
c000fd4c:	42                   	inc    edx
c000fd4d:	89 d9                	mov    ecx,ebx
c000fd4f:	83 fa 2f             	cmp    edx,0x2f
c000fd52:	7f 11                	jg     c000fd65 <Phys::allocateDMA(unsigned long)+0x43>
c000fd54:	80 ba c0 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1b40],0x0
c000fd5b:	74 e0                	je     c000fd3d <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5d:	31 c9                	xor    ecx,ecx
c000fd5f:	42                   	inc    edx
c000fd60:	83 fa 2f             	cmp    edx,0x2f
c000fd63:	7e ef                	jle    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd65:	5b                   	pop    ebx
c000fd66:	31 c0                	xor    eax,eax
c000fd68:	5e                   	pop    esi
c000fd69:	5f                   	pop    edi
c000fd6a:	5d                   	pop    ebp
c000fd6b:	c3                   	ret    
c000fd6c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6f:	89 d7                	mov    edi,edx
c000fd71:	4f                   	dec    edi
c000fd72:	79 03                	jns    c000fd77 <Phys::allocateDMA(unsigned long)+0x55>
c000fd74:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd77:	c1 ff 04             	sar    edi,0x4
c000fd7a:	89 c2                	mov    edx,eax
c000fd7c:	c1 fa 04             	sar    edx,0x4
c000fd7f:	39 fa                	cmp    edx,edi
c000fd81:	75 2f                	jne    c000fdb2 <Phys::allocateDMA(unsigned long)+0x90>
c000fd83:	85 db                	test   ebx,ebx
c000fd85:	74 1a                	je     c000fda1 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd87:	be c0 e4 02 c0       	mov    esi,0xc002e4c0
c000fd8c:	8d 90 c0 e4 02 c0    	lea    edx,[eax-0x3ffd1b40]
c000fd92:	f7 d6                	not    esi
c000fd94:	29 c6                	sub    esi,eax
c000fd96:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd99:	42                   	inc    edx
c000fd9a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9d:	39 d9                	cmp    ecx,ebx
c000fd9f:	7f f5                	jg     c000fd96 <Phys::allocateDMA(unsigned long)+0x74>
c000fda1:	85 ff                	test   edi,edi
c000fda3:	74 13                	je     c000fdb8 <Phys::allocateDMA(unsigned long)+0x96>
c000fda5:	5b                   	pop    ebx
c000fda6:	05 50 20 0c 00       	add    eax,0xc2050
c000fdab:	5e                   	pop    esi
c000fdac:	c1 e0 0c             	shl    eax,0xc
c000fdaf:	5f                   	pop    edi
c000fdb0:	5d                   	pop    ebp
c000fdb1:	c3                   	ret    
c000fdb2:	89 ea                	mov    edx,ebp
c000fdb4:	31 c9                	xor    ecx,ecx
c000fdb6:	eb a7                	jmp    c000fd5f <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	c1 e0 0c             	shl    eax,0xc
c000fdbc:	5e                   	pop    esi
c000fdbd:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdcd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd3:	c1 e9 0c             	shr    ecx,0xc
c000fdd6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fddb:	76 25                	jbe    c000fe02 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fddd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fde2:	c1 e8 0c             	shr    eax,0xc
c000fde5:	8d 50 10             	lea    edx,[eax+0x10]
c000fde8:	85 c9                	test   ecx,ecx
c000fdea:	74 15                	je     c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdec:	8d 82 c0 e4 02 c0    	lea    eax,[edx-0x3ffd1b40]
c000fdf2:	8d 94 11 c0 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1b40]
c000fdf9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdfc:	40                   	inc    eax
c000fdfd:	39 d0                	cmp    eax,edx
c000fdff:	75 f8                	jne    c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe01:	c3                   	ret    
c000fe02:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe08:	c1 ea 0c             	shr    edx,0xc
c000fe0b:	eb db                	jmp    c000fde8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0d <Phys::setPageState(unsigned long, bool)>:
c000fe0d:	56                   	push   esi
c000fe0e:	ba 01 00 00 00       	mov    edx,0x1
c000fe13:	53                   	push   ebx
c000fe14:	8b 35 98 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d398
c000fe1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe22:	89 c8                	mov    eax,ecx
c000fe24:	83 e1 07             	and    ecx,0x7
c000fe27:	c1 e8 03             	shr    eax,0x3
c000fe2a:	d3 e3                	shl    ebx,cl
c000fe2c:	01 c6                	add    esi,eax
c000fe2e:	d3 e2                	shl    edx,cl
c000fe30:	f7 d2                	not    edx
c000fe32:	20 16                	and    BYTE PTR [esi],dl
c000fe34:	03 05 98 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d398
c000fe3a:	08 18                	or     BYTE PTR [eax],bl
c000fe3c:	5b                   	pop    ebx
c000fe3d:	5e                   	pop    esi
c000fe3e:	c3                   	ret    

c000fe3f <Phys::getPageState(unsigned long)>:
c000fe3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe43:	8b 15 98 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d398
c000fe49:	89 c8                	mov    eax,ecx
c000fe4b:	83 e1 07             	and    ecx,0x7
c000fe4e:	c1 e8 03             	shr    eax,0x3
c000fe51:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe55:	d3 f8                	sar    eax,cl
c000fe57:	83 e0 01             	and    eax,0x1
c000fe5a:	c3                   	ret    

c000fe5b <Phys::freePage(unsigned long)>:
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 08             	sub    esp,0x8
c000fe5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe63:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe69:	76 57                	jbe    c000fec2 <Phys::freePage(unsigned long)+0x67>
c000fe6b:	c1 eb 0c             	shr    ebx,0xc
c000fe6e:	53                   	push   ebx
c000fe6f:	e8 cb ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000fe74:	5a                   	pop    edx
c000fe75:	84 c0                	test   al,al
c000fe77:	74 5b                	je     c000fed4 <Phys::freePage(unsigned long)+0x79>
c000fe79:	a1 b0 e4 02 c0       	mov    eax,ds:0xc002e4b0
c000fe7e:	48                   	dec    eax
c000fe7f:	a3 b0 e4 02 c0       	mov    ds:0xc002e4b0,eax
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8a:	c1 e0 02             	shl    eax,0x2
c000fe8d:	99                   	cdq    
c000fe8e:	f7 3d b4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4b4
c000fe94:	39 05 ac e4 02 c0    	cmp    DWORD PTR ds:0xc002e4ac,eax
c000fe9a:	75 13                	jne    c000feaf <Phys::freePage(unsigned long)+0x54>
c000fe9c:	83 ec 08             	sub    esp,0x8
c000fe9f:	6a 00                	push   0x0
c000fea1:	53                   	push   ebx
c000fea2:	e8 66 ff ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	83 c4 08             	add    esp,0x8
c000fead:	5b                   	pop    ebx
c000feae:	c3                   	ret    
c000feaf:	83 ec 0c             	sub    esp,0xc
c000feb2:	a3 ac e4 02 c0       	mov    ds:0xc002e4ac,eax
c000feb7:	50                   	push   eax
c000feb8:	e8 77 0a 00 00       	call   c0010934 <VgaText::updateRAMUsageDisplay(int)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	eb da                	jmp    c000fe9c <Phys::freePage(unsigned long)+0x41>
c000fec2:	68 00 10 00 00       	push   0x1000
c000fec7:	53                   	push   ebx
c000fec8:	e8 f8 fe ff ff       	call   c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>
c000fecd:	59                   	pop    ecx
c000fece:	5b                   	pop    ebx
c000fecf:	83 c4 08             	add    esp,0x8
c000fed2:	5b                   	pop    ebx
c000fed3:	c3                   	ret    
c000fed4:	c7 44 24 10 a6 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2a6
c000fedc:	83 c4 08             	add    esp,0x8
c000fedf:	5b                   	pop    ebx
c000fee0:	e9 22 a7 00 00       	jmp    c001a607 <Krnl::panic(char const*)>

c000fee5 <Phys::allocatePage()>:
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	51                   	push   ecx
c000fee8:	8b 35 a4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4a4
c000feee:	89 f3                	mov    ebx,esi
c000fef0:	eb 0a                	jmp    c000fefc <Phys::allocatePage()+0x17>
c000fef2:	89 1d a4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a4,ebx
c000fef8:	39 de                	cmp    esi,ebx
c000fefa:	74 24                	je     c000ff20 <Phys::allocatePage()+0x3b>
c000fefc:	53                   	push   ebx
c000fefd:	e8 3d ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff02:	5a                   	pop    edx
c000ff03:	84 c0                	test   al,al
c000ff05:	74 77                	je     c000ff7e <Phys::allocatePage()+0x99>
c000ff07:	43                   	inc    ebx
c000ff08:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0e:	75 e2                	jne    c000fef2 <Phys::allocatePage()+0xd>
c000ff10:	31 db                	xor    ebx,ebx
c000ff12:	c7 05 a4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4a4,0x0
c000ff1c:	39 de                	cmp    esi,ebx
c000ff1e:	75 dc                	jne    c000fefc <Phys::allocatePage()+0x17>
c000ff20:	83 ec 0c             	sub    esp,0xc
c000ff23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff2b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff31:	e8 6a 2d 00 00       	call   c0012ca0 <VAS::scanForEviction()>
c000ff36:	83 c4 10             	add    esp,0x10
c000ff39:	85 c0                	test   eax,eax
c000ff3b:	75 76                	jne    c000ffb3 <Phys::allocatePage()+0xce>
c000ff3d:	83 ec 0c             	sub    esp,0xc
c000ff40:	68 bc a2 02 c0       	push   0xc002a2bc
c000ff45:	e8 10 30 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c000ff4a:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff51:	e8 cc fd ff ff       	call   c000fd22 <Phys::allocateDMA(unsigned long)>
c000ff56:	83 c4 10             	add    esp,0x10
c000ff59:	85 c0                	test   eax,eax
c000ff5b:	75 56                	jne    c000ffb3 <Phys::allocatePage()+0xce>
c000ff5d:	83 ec 0c             	sub    esp,0xc
c000ff60:	68 cd a2 02 c0       	push   0xc002a2cd
c000ff65:	e8 9d a6 00 00       	call   c001a607 <Krnl::panic(char const*)>
c000ff6a:	83 c4 10             	add    esp,0x10
c000ff6d:	8b 1d a4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a4
c000ff73:	53                   	push   ebx
c000ff74:	e8 c6 fe ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff79:	5a                   	pop    edx
c000ff7a:	84 c0                	test   al,al
c000ff7c:	75 89                	jne    c000ff07 <Phys::allocatePage()+0x22>
c000ff7e:	6a 01                	push   0x1
c000ff80:	53                   	push   ebx
c000ff81:	e8 87 fe ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000ff86:	a1 b0 e4 02 c0       	mov    eax,ds:0xc002e4b0
c000ff8b:	59                   	pop    ecx
c000ff8c:	40                   	inc    eax
c000ff8d:	5b                   	pop    ebx
c000ff8e:	a3 b0 e4 02 c0       	mov    ds:0xc002e4b0,eax
c000ff93:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff96:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff99:	c1 e0 02             	shl    eax,0x2
c000ff9c:	99                   	cdq    
c000ff9d:	f7 3d b4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4b4
c000ffa3:	39 05 ac e4 02 c0    	cmp    DWORD PTR ds:0xc002e4ac,eax
c000ffa9:	75 0c                	jne    c000ffb7 <Phys::allocatePage()+0xd2>
c000ffab:	a1 a4 e4 02 c0       	mov    eax,ds:0xc002e4a4
c000ffb0:	c1 e0 0c             	shl    eax,0xc
c000ffb3:	5a                   	pop    edx
c000ffb4:	5b                   	pop    ebx
c000ffb5:	5e                   	pop    esi
c000ffb6:	c3                   	ret    
c000ffb7:	83 ec 0c             	sub    esp,0xc
c000ffba:	a3 ac e4 02 c0       	mov    ds:0xc002e4ac,eax
c000ffbf:	50                   	push   eax
c000ffc0:	e8 6f 09 00 00       	call   c0010934 <VgaText::updateRAMUsageDisplay(int)>
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	eb e1                	jmp    c000ffab <Phys::allocatePage()+0xc6>

c000ffca <Phys::allocateContiguousPages(int)>:
c000ffca:	57                   	push   edi
c000ffcb:	56                   	push   esi
c000ffcc:	53                   	push   ebx
c000ffcd:	31 db                	xor    ebx,ebx
c000ffcf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffd3:	e8 24 de 00 00       	call   c001ddfc <lockScheduler()>
c000ffd8:	85 db                	test   ebx,ebx
c000ffda:	75 11                	jne    c000ffed <Phys::allocateContiguousPages(int)+0x23>
c000ffdc:	e8 04 ff ff ff       	call   c000fee5 <Phys::allocatePage()>
c000ffe1:	83 ff 01             	cmp    edi,0x1
c000ffe4:	89 c6                	mov    esi,eax
c000ffe6:	74 21                	je     c0010009 <Phys::allocateContiguousPages(int)+0x3f>
c000ffe8:	bb 01 00 00 00       	mov    ebx,0x1
c000ffed:	e8 f3 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c000fff2:	89 da                	mov    edx,ebx
c000fff4:	c1 e2 0c             	shl    edx,0xc
c000fff7:	01 f2                	add    edx,esi
c000fff9:	39 c2                	cmp    edx,eax
c000fffb:	74 17                	je     c0010014 <Phys::allocateContiguousPages(int)+0x4a>
c000fffd:	bb 01 00 00 00       	mov    ebx,0x1
c0010002:	89 c6                	mov    esi,eax
c0010004:	83 ff 01             	cmp    edi,0x1
c0010007:	75 e4                	jne    c000ffed <Phys::allocateContiguousPages(int)+0x23>
c0010009:	e8 f0 dd 00 00       	call   c001ddfe <unlockScheduler()>
c001000e:	89 f0                	mov    eax,esi
c0010010:	5b                   	pop    ebx
c0010011:	5e                   	pop    esi
c0010012:	5f                   	pop    edi
c0010013:	c3                   	ret    
c0010014:	43                   	inc    ebx
c0010015:	39 fb                	cmp    ebx,edi
c0010017:	75 bf                	jne    c000ffd8 <Phys::allocateContiguousPages(int)+0xe>
c0010019:	e8 e0 dd 00 00       	call   c001ddfe <unlockScheduler()>
c001001e:	89 f0                	mov    eax,esi
c0010020:	5b                   	pop    ebx
c0010021:	5e                   	pop    esi
c0010022:	5f                   	pop    edi
c0010023:	c3                   	ret    

c0010024 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001002a:	39 1d a8 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4a8,ebx
c0010030:	73 06                	jae    c0010038 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010032:	89 1d a8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a8,ebx
c0010038:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001003c:	c1 eb 0c             	shr    ebx,0xc
c001003f:	c1 e8 0c             	shr    eax,0xc
c0010042:	39 d8                	cmp    eax,ebx
c0010044:	73 13                	jae    c0010059 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010046:	6a 00                	push   0x0
c0010048:	8d 70 01             	lea    esi,[eax+0x1]
c001004b:	50                   	push   eax
c001004c:	e8 bc fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c0010051:	5a                   	pop    edx
c0010052:	89 f0                	mov    eax,esi
c0010054:	59                   	pop    ecx
c0010055:	39 f3                	cmp    ebx,esi
c0010057:	75 ed                	jne    c0010046 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010059:	5b                   	pop    ebx
c001005a:	5e                   	pop    esi
c001005b:	c3                   	ret    

c001005c <Phys::physicalMemorySetup(unsigned int)>:
c001005c:	55                   	push   ebp
c001005d:	57                   	push   edi
c001005e:	56                   	push   esi
c001005f:	53                   	push   ebx
c0010060:	31 db                	xor    ebx,ebx
c0010062:	83 ec 40             	sub    esp,0x40
c0010065:	6a 30                	push   0x30
c0010067:	6a 00                	push   0x0
c0010069:	68 c0 e4 02 c0       	push   0xc002e4c0
c001006e:	e8 05 07 ff ff       	call   c0000778 <memset>
c0010073:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010077:	25 00 f0 ff ff       	and    eax,0xfffff000
c001007c:	05 00 10 00 00       	add    eax,0x1000
c0010081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010085:	83 c4 10             	add    esp,0x10
c0010088:	83 ec 08             	sub    esp,0x8
c001008b:	6a 01                	push   0x1
c001008d:	53                   	push   ebx
c001008e:	43                   	inc    ebx
c001008f:	e8 79 fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001009d:	75 e9                	jne    c0010088 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001009f:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100a6:	66 85 c0             	test   ax,ax
c00100a9:	0f 84 8e 01 00 00    	je     c001023d <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100b3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100bf:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100c8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100d0:	eb 15                	jmp    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100d2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100d6:	83 c3 18             	add    ebx,0x18
c00100d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100dd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100e1:	0f 84 66 01 00 00    	je     c001024d <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100ed:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100f8:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100fa:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100fd:	01 f0                	add    eax,esi
c00100ff:	55                   	push   ebp
c0010100:	11 fa                	adc    edx,edi
c0010102:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010106:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001010a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001010e:	56                   	push   esi
c001010f:	68 08 a3 02 c0       	push   0xc002a308
c0010114:	e8 41 2e 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0010119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001011d:	83 c4 10             	add    esp,0x10
c0010120:	09 f8                	or     eax,edi
c0010122:	0f 85 25 01 00 00    	jne    c001024d <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010128:	4d                   	dec    ebp
c0010129:	75 a7                	jne    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001012b:	ba 00 00 08 00       	mov    edx,0x80000
c0010130:	89 c1                	mov    ecx,eax
c0010132:	39 f2                	cmp    edx,esi
c0010134:	19 f9                	sbb    ecx,edi
c0010136:	0f 82 a7 00 00 00    	jb     c00101e3 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001013c:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010140:	89 c1                	mov    ecx,eax
c0010142:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010146:	0f 83 97 00 00 00    	jae    c00101e3 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001014c:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010151:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010155:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010159:	39 fa                	cmp    edx,edi
c001015b:	19 e8                	sbb    eax,ebp
c001015d:	0f 82 14 01 00 00    	jb     c0010277 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010163:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010167:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001016b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010171:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010176:	83 d5 ff             	adc    ebp,0xffffffff
c0010179:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001017d:	31 c0                	xor    eax,eax
c001017f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010183:	39 fa                	cmp    edx,edi
c0010185:	89 c1                	mov    ecx,eax
c0010187:	19 e9                	sbb    ecx,ebp
c0010189:	0f 83 43 ff ff ff    	jae    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001018f:	be 00 00 08 00       	mov    esi,0x80000
c0010194:	50                   	push   eax
c0010195:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010199:	57                   	push   edi
c001019a:	56                   	push   esi
c001019b:	68 2c a3 02 c0       	push   0xc002a32c
c00101a0:	e8 b5 2d 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00101a5:	5a                   	pop    edx
c00101a6:	59                   	pop    ecx
c00101a7:	57                   	push   edi
c00101a8:	56                   	push   esi
c00101a9:	e8 76 fe ff ff       	call   c0010024 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101b6:	83 c4 0c             	add    esp,0xc
c00101b9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101bd:	03 05 b4 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e4b4
c00101c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101ca:	a3 b4 e4 02 c0       	mov    ds:0xc002e4b4,eax
c00101cf:	52                   	push   edx
c00101d0:	50                   	push   eax
c00101d1:	68 e9 a2 02 c0       	push   0xc002a2e9
c00101d6:	e8 7f 2d 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00101db:	83 c4 10             	add    esp,0x10
c00101de:	e9 ef fe ff ff       	jmp    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101ef:	39 ea                	cmp    edx,ebp
c00101f1:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101f5:	0f 82 d7 fe ff ff    	jb     c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101fb:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010200:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010204:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010208:	0f 83 c4 fe ff ff    	jae    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001020e:	39 ee                	cmp    esi,ebp
c0010210:	89 f8                	mov    eax,edi
c0010212:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010216:	0f 83 78 ff ff ff    	jae    c0010194 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001021c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010220:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010224:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010228:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001022c:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010230:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010234:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010238:	e9 57 ff ff ff       	jmp    c0010194 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001023d:	83 ec 0c             	sub    esp,0xc
c0010240:	68 db a2 02 c0       	push   0xc002a2db
c0010245:	e8 bd a3 00 00       	call   c001a607 <Krnl::panic(char const*)>
c001024a:	83 c4 10             	add    esp,0x10
c001024d:	bb 40 01 00 00       	mov    ebx,0x140
c0010252:	83 ec 08             	sub    esp,0x8
c0010255:	6a 00                	push   0x0
c0010257:	53                   	push   ebx
c0010258:	43                   	inc    ebx
c0010259:	e8 af fb ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c001025e:	ff 05 b4 e4 02 c0    	inc    DWORD PTR ds:0xc002e4b4
c0010264:	83 c4 10             	add    esp,0x10
c0010267:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001026d:	75 e3                	jne    c0010252 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001026f:	83 c4 3c             	add    esp,0x3c
c0010272:	5b                   	pop    ebx
c0010273:	5e                   	pop    esi
c0010274:	5f                   	pop    edi
c0010275:	5d                   	pop    ebp
c0010276:	c3                   	ret    
c0010277:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001027f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010287:	e9 d7 fe ff ff       	jmp    c0010163 <Phys::physicalMemorySetup(unsigned int)+0x107>

c001028c <Pipe::isAtty()>:
c001028c:	31 c0                	xor    eax,eax
c001028e:	c3                   	ret    
c001028f:	90                   	nop

c0010290 <Pipe::~Pipe()>:
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	ba 98 a3 02 c0       	mov    edx,0xc002a398
c0010298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029c:	89 10                	mov    DWORD PTR [eax],edx
c001029e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a2:	83 ec 0c             	sub    esp,0xc
c00102a5:	50                   	push   eax
c00102a6:	e8 37 16 00 00       	call   c00118e2 <UnixFile::~UnixFile()>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	90                   	nop
c00102af:	83 c4 0c             	add    esp,0xc
c00102b2:	c3                   	ret    
c00102b3:	90                   	nop

c00102b4 <Pipe::~Pipe()>:
c00102b4:	83 ec 0c             	sub    esp,0xc
c00102b7:	83 ec 0c             	sub    esp,0xc
c00102ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102be:	e8 cd ff ff ff       	call   c0010290 <Pipe::~Pipe()>
c00102c3:	83 c4 10             	add    esp,0x10
c00102c6:	83 ec 08             	sub    esp,0x8
c00102c9:	6a 20                	push   0x20
c00102cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102cf:	e8 a6 2b 00 00       	call   c0012e7a <operator delete(void*, unsigned long)>
c00102d4:	83 c4 10             	add    esp,0x10
c00102d7:	83 c4 0c             	add    esp,0xc
c00102da:	c3                   	ret    
c00102db:	90                   	nop

c00102dc <Pipe::read(unsigned long long, void*, int*)>:
c00102dc:	55                   	push   ebp
c00102dd:	57                   	push   edi
c00102de:	56                   	push   esi
c00102df:	53                   	push   ebx
c00102e0:	83 ec 1c             	sub    esp,0x1c
c00102e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102eb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102ef:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102f2:	89 c8                	mov    eax,ecx
c00102f4:	99                   	cdq    
c00102f5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102f9:	74 19                	je     c0010314 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102fb:	39 f9                	cmp    ecx,edi
c00102fd:	89 d1                	mov    ecx,edx
c00102ff:	19 f1                	sbb    ecx,esi
c0010301:	73 11                	jae    c0010314 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010303:	e8 f4 da 00 00       	call   c001ddfc <lockScheduler()>
c0010308:	e8 2b de 00 00       	call   c001e138 <schedule()>
c001030d:	e8 ec da 00 00       	call   c001ddfe <unlockScheduler()>
c0010312:	eb db                	jmp    c00102ef <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010314:	39 f8                	cmp    eax,edi
c0010316:	89 d1                	mov    ecx,edx
c0010318:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001031c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010320:	19 f1                	sbb    ecx,esi
c0010322:	73 08                	jae    c001032c <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010324:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010328:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001032c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001032f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010332:	29 c6                	sub    esi,eax
c0010334:	89 f1                	mov    ecx,esi
c0010336:	c1 f9 1f             	sar    ecx,0x1f
c0010339:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001033d:	89 ca                	mov    edx,ecx
c001033f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010343:	19 d1                	sbb    ecx,edx
c0010345:	73 04                	jae    c001034b <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010347:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001034b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001034f:	89 fd                	mov    ebp,edi
c0010351:	29 f5                	sub    ebp,esi
c0010353:	85 f6                	test   esi,esi
c0010355:	74 12                	je     c0010369 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010357:	52                   	push   edx
c0010358:	56                   	push   esi
c0010359:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001035c:	50                   	push   eax
c001035d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010361:	e8 de 03 ff ff       	call   c0000744 <memcpy>
c0010366:	83 c4 10             	add    esp,0x10
c0010369:	85 ed                	test   ebp,ebp
c001036b:	74 12                	je     c001037f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001036d:	50                   	push   eax
c001036e:	55                   	push   ebp
c001036f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010372:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010376:	56                   	push   esi
c0010377:	e8 c8 03 ff ff       	call   c0000744 <memcpy>
c001037c:	83 c4 10             	add    esp,0x10
c001037f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010382:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010385:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010388:	99                   	cdq    
c0010389:	89 f7                	mov    edi,esi
c001038b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001038f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010393:	c1 ff 1f             	sar    edi,0x1f
c0010396:	57                   	push   edi
c0010397:	56                   	push   esi
c0010398:	52                   	push   edx
c0010399:	50                   	push   eax
c001039a:	e8 3d 67 01 00       	call   c0026adc <__umoddi3>
c001039f:	83 c4 10             	add    esp,0x10
c00103a2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103a5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103aa:	75 10                	jne    c00103bc <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	68 55 a3 02 c0       	push   0xc002a355
c00103b4:	e8 4e a2 00 00       	call   c001a607 <Krnl::panic(char const*)>
c00103b9:	83 c4 10             	add    esp,0x10
c00103bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103c4:	89 10                	mov    DWORD PTR [eax],edx
c00103c6:	83 c4 1c             	add    esp,0x1c
c00103c9:	31 c0                	xor    eax,eax
c00103cb:	5b                   	pop    ebx
c00103cc:	5e                   	pop    esi
c00103cd:	5f                   	pop    edi
c00103ce:	5d                   	pop    ebp
c00103cf:	c3                   	ret    

c00103d0 <Pipe::write(unsigned long long, void*, int*)>:
c00103d0:	55                   	push   ebp
c00103d1:	57                   	push   edi
c00103d2:	56                   	push   esi
c00103d3:	53                   	push   ebx
c00103d4:	83 ec 1c             	sub    esp,0x1c
c00103d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00103e6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103e9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103f0:	89 de                	mov    esi,ebx
c00103f2:	89 df                	mov    edi,ebx
c00103f4:	c1 ff 1f             	sar    edi,0x1f
c00103f7:	01 c6                	add    esi,eax
c00103f9:	89 c8                	mov    eax,ecx
c00103fb:	11 d7                	adc    edi,edx
c00103fd:	99                   	cdq    
c00103fe:	39 f1                	cmp    ecx,esi
c0010400:	89 d0                	mov    eax,edx
c0010402:	19 f8                	sbb    eax,edi
c0010404:	b8 01 00 00 00       	mov    eax,0x1
c0010409:	0f 82 80 00 00 00    	jb     c001048f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001040f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010412:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010415:	01 d8                	add    eax,ebx
c0010417:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001041b:	99                   	cdq    
c001041c:	f7 f9                	idiv   ecx
c001041e:	29 d1                	sub    ecx,edx
c0010420:	89 d7                	mov    edi,edx
c0010422:	89 c8                	mov    eax,ecx
c0010424:	99                   	cdq    
c0010425:	39 ce                	cmp    esi,ecx
c0010427:	19 d3                	sbb    ebx,edx
c0010429:	bb 00 00 00 00       	mov    ebx,0x0
c001042e:	72 04                	jb     c0010434 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010430:	89 f3                	mov    ebx,esi
c0010432:	29 cb                	sub    ebx,ecx
c0010434:	89 f1                	mov    ecx,esi
c0010436:	29 d9                	sub    ecx,ebx
c0010438:	74 1a                	je     c0010454 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001043a:	52                   	push   edx
c001043b:	51                   	push   ecx
c001043c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010440:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010444:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010447:	57                   	push   edi
c0010448:	e8 f7 02 ff ff       	call   c0000744 <memcpy>
c001044d:	83 c4 10             	add    esp,0x10
c0010450:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010454:	85 db                	test   ebx,ebx
c0010456:	74 12                	je     c001046a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010458:	50                   	push   eax
c0010459:	53                   	push   ebx
c001045a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001045e:	51                   	push   ecx
c001045f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010462:	e8 dd 02 ff ff       	call   c0000744 <memcpy>
c0010467:	83 c4 10             	add    esp,0x10
c001046a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001046d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010472:	75 10                	jne    c0010484 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	68 71 a3 02 c0       	push   0xc002a371
c001047c:	e8 86 a1 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010488:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001048b:	89 38                	mov    DWORD PTR [eax],edi
c001048d:	31 c0                	xor    eax,eax
c001048f:	83 c4 1c             	add    esp,0x1c
c0010492:	5b                   	pop    ebx
c0010493:	5e                   	pop    esi
c0010494:	5f                   	pop    edi
c0010495:	5d                   	pop    ebp
c0010496:	c3                   	ret    
c0010497:	90                   	nop

c0010498 <Pipe::Pipe(int)>:
c0010498:	83 ec 0c             	sub    esp,0xc
c001049b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049f:	83 ec 08             	sub    esp,0x8
c00104a2:	6a 00                	push   0x0
c00104a4:	50                   	push   eax
c00104a5:	e8 56 12 00 00       	call   c0011700 <UnixFile::UnixFile(int)>
c00104aa:	83 c4 10             	add    esp,0x10
c00104ad:	ba 98 a3 02 c0       	mov    edx,0xc002a398
c00104b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b6:	89 10                	mov    DWORD PTR [eax],edx
c00104b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104c0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104dd:	83 ec 0c             	sub    esp,0xc
c00104e0:	50                   	push   eax
c00104e1:	e8 5d f3 ff ff       	call   c000f843 <malloc>
c00104e6:	83 c4 10             	add    esp,0x10
c00104e9:	89 c2                	mov    edx,eax
c00104eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104fa:	90                   	nop
c00104fb:	83 c4 0c             	add    esp,0xc
c00104fe:	c3                   	ret    
c00104ff:	90                   	nop

c0010500 <VgaText::isAtty()>:
c0010500:	b0 01                	mov    al,0x1
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <VgaText::~VgaText()>:
c0010504:	83 ec 0c             	sub    esp,0xc
c0010507:	ba 54 a4 02 c0       	mov    edx,0xc002a454
c001050c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010510:	89 10                	mov    DWORD PTR [eax],edx
c0010512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010516:	83 ec 0c             	sub    esp,0xc
c0010519:	50                   	push   eax
c001051a:	e8 c3 13 00 00       	call   c00118e2 <UnixFile::~UnixFile()>
c001051f:	83 c4 10             	add    esp,0x10
c0010522:	90                   	nop
c0010523:	83 c4 0c             	add    esp,0xc
c0010526:	c3                   	ret    
c0010527:	90                   	nop

c0010528 <VgaText::~VgaText()>:
c0010528:	83 ec 0c             	sub    esp,0xc
c001052b:	83 ec 0c             	sub    esp,0xc
c001052e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010532:	e8 cd ff ff ff       	call   c0010504 <VgaText::~VgaText()>
c0010537:	83 c4 10             	add    esp,0x10
c001053a:	83 ec 08             	sub    esp,0x8
c001053d:	68 60 12 00 00       	push   0x1260
c0010542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010546:	e8 2f 29 00 00       	call   c0012e7a <operator delete(void*, unsigned long)>
c001054b:	83 c4 10             	add    esp,0x10
c001054e:	83 c4 0c             	add    esp,0xc
c0010551:	c3                   	ret    

c0010552 <VgaText::read(unsigned long long, void*, int*)>:
c0010552:	83 ec 10             	sub    esp,0x10
c0010555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010559:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001055d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010561:	e8 a2 5d 00 00       	call   c0016308 <readKeyboard(VgaText*, char*, unsigned long)>
c0010566:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001056a:	89 02                	mov    DWORD PTR [edx],eax
c001056c:	31 c0                	xor    eax,eax
c001056e:	83 c4 1c             	add    esp,0x1c
c0010571:	c3                   	ret    

c0010572 <setTerminalScrollLock(bool)>:
c0010572:	c3                   	ret    

c0010573 <addToTerminalCycle(VgaText*)>:
c0010573:	8b 15 40 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e540
c0010579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001057d:	85 d2                	test   edx,edx
c001057f:	75 0c                	jne    c001058d <addToTerminalCycle(VgaText*)+0x1a>
c0010581:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010587:	a3 40 e5 02 c0       	mov    ds:0xc002e540,eax
c001058c:	c3                   	ret    
c001058d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010593:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010599:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001059f:	c3                   	ret    

c00105a0 <installVgaTextImplementation()>:
c00105a0:	83 ec 10             	sub    esp,0x10
c00105a3:	6a 20                	push   0x20
c00105a5:	6a 00                	push   0x0
c00105a7:	68 20 e5 02 c0       	push   0xc002e520
c00105ac:	e8 c7 01 ff ff       	call   c0000778 <memset>
c00105b1:	83 c4 1c             	add    esp,0x1c
c00105b4:	c3                   	ret    

c00105b5 <scrollTerminalScrollLock(int)>:
c00105b5:	c3                   	ret    

c00105b6 <VgaText::load()>:
c00105b6:	53                   	push   ebx
c00105b7:	31 c0                	xor    eax,eax
c00105b9:	83 ec 58             	sub    esp,0x58
c00105bc:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105c0:	89 e2                	mov    edx,esp
c00105c2:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105c6:	40                   	inc    eax
c00105c7:	83 f8 50             	cmp    eax,0x50
c00105ca:	75 f6                	jne    c00105c2 <VgaText::load()+0xc>
c00105cc:	31 c0                	xor    eax,eax
c00105ce:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105d5:	84 c9                	test   cl,cl
c00105d7:	74 06                	je     c00105df <VgaText::load()+0x29>
c00105d9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105dc:	40                   	inc    eax
c00105dd:	eb ef                	jmp    c00105ce <VgaText::load()+0x18>
c00105df:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105e5:	85 c0                	test   eax,eax
c00105e7:	74 09                	je     c00105f2 <VgaText::load()+0x3c>
c00105e9:	51                   	push   ecx
c00105ea:	51                   	push   ecx
c00105eb:	52                   	push   edx
c00105ec:	53                   	push   ebx
c00105ed:	ff d0                	call   eax
c00105ef:	83 c4 10             	add    esp,0x10
c00105f2:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105f8:	85 c0                	test   eax,eax
c00105fa:	74 09                	je     c0010605 <VgaText::load()+0x4f>
c00105fc:	83 ec 0c             	sub    esp,0xc
c00105ff:	53                   	push   ebx
c0010600:	ff d0                	call   eax
c0010602:	83 c4 10             	add    esp,0x10
c0010605:	83 c4 58             	add    esp,0x58
c0010608:	5b                   	pop    ebx
c0010609:	c3                   	ret    

c001060a <VgaText::updateCursor()>:
c001060a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001060e:	39 05 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,eax
c0010614:	75 0c                	jne    c0010622 <VgaText::updateCursor()+0x18>
c0010616:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001061c:	85 c0                	test   eax,eax
c001061e:	74 02                	je     c0010622 <VgaText::updateCursor()+0x18>
c0010620:	ff e0                	jmp    eax
c0010622:	c3                   	ret    
c0010623:	90                   	nop

c0010624 <VgaText::showCursor(bool)>:
c0010624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001062c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010632:	c3                   	ret    
c0010633:	90                   	nop

c0010634 <VgaText::disableBlink(bool)>:
c0010634:	56                   	push   esi
c0010635:	53                   	push   ebx
c0010636:	51                   	push   ecx
c0010637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001063f:	39 1d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ebx
c0010645:	75 18                	jne    c001065f <VgaText::disableBlink(bool)+0x2b>
c0010647:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001064d:	85 c0                	test   eax,eax
c001064f:	74 0e                	je     c001065f <VgaText::disableBlink(bool)+0x2b>
c0010651:	89 f1                	mov    ecx,esi
c0010653:	52                   	push   edx
c0010654:	52                   	push   edx
c0010655:	0f b6 d1             	movzx  edx,cl
c0010658:	52                   	push   edx
c0010659:	53                   	push   ebx
c001065a:	ff d0                	call   eax
c001065c:	83 c4 10             	add    esp,0x10
c001065f:	89 f0                	mov    eax,esi
c0010661:	83 f0 01             	xor    eax,0x1
c0010664:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001066a:	58                   	pop    eax
c001066b:	5b                   	pop    ebx
c001066c:	5e                   	pop    esi
c001066d:	c3                   	ret    

c001066e <VgaText::doANSI_SGR(int)>:
c001066e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010676:	85 d2                	test   edx,edx
c0010678:	75 14                	jne    c001068e <VgaText::doANSI_SGR(int)+0x20>
c001067a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010680:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010686:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001068c:	eb 65                	jmp    c00106f3 <VgaText::doANSI_SGR(int)+0x85>
c001068e:	83 fa 07             	cmp    edx,0x7
c0010691:	75 14                	jne    c00106a7 <VgaText::doANSI_SGR(int)+0x39>
c0010693:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010699:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001069f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106a5:	eb 4c                	jmp    c00106f3 <VgaText::doANSI_SGR(int)+0x85>
c00106a7:	83 fa 1b             	cmp    edx,0x1b
c00106aa:	74 ce                	je     c001067a <VgaText::doANSI_SGR(int)+0xc>
c00106ac:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106af:	83 f9 07             	cmp    ecx,0x7
c00106b2:	77 09                	ja     c00106bd <VgaText::doANSI_SGR(int)+0x4f>
c00106b4:	8b 14 8d c0 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c40]
c00106bb:	eb 20                	jmp    c00106dd <VgaText::doANSI_SGR(int)+0x6f>
c00106bd:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106c0:	83 f9 07             	cmp    ecx,0x7
c00106c3:	77 09                	ja     c00106ce <VgaText::doANSI_SGR(int)+0x60>
c00106c5:	8b 14 8d c0 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c40]
c00106cc:	eb 25                	jmp    c00106f3 <VgaText::doANSI_SGR(int)+0x85>
c00106ce:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106d1:	83 f9 07             	cmp    ecx,0x7
c00106d4:	77 0e                	ja     c00106e4 <VgaText::doANSI_SGR(int)+0x76>
c00106d6:	8b 14 95 78 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d88]
c00106dd:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e3:	c3                   	ret    
c00106e4:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106e7:	83 f9 07             	cmp    ecx,0x7
c00106ea:	77 0d                	ja     c00106f9 <VgaText::doANSI_SGR(int)+0x8b>
c00106ec:	8b 14 95 50 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2db0]
c00106f3:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106f9:	c3                   	ret    

c00106fa <VgaText::setDefaultBgColour(VgaColour)>:
c00106fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010702:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010708:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001070e:	c3                   	ret    
c001070f:	90                   	nop

c0010710 <VgaText::setDefaultFgColour(VgaColour)>:
c0010710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010718:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001071e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010724:	c3                   	ret    
c0010725:	90                   	nop

c0010726 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010726:	53                   	push   ebx
c0010727:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001072b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001072f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010733:	51                   	push   ecx
c0010734:	e8 c1 ff ff ff       	call   c00106fa <VgaText::setDefaultBgColour(VgaColour)>
c0010739:	58                   	pop    eax
c001073a:	5a                   	pop    edx
c001073b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001073f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010743:	5b                   	pop    ebx
c0010744:	eb ca                	jmp    c0010710 <VgaText::setDefaultFgColour(VgaColour)>

c0010746 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010746:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001074a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001074f:	83 e0 0f             	and    eax,0xf
c0010752:	c1 e2 04             	shl    edx,0x4
c0010755:	09 d0                	or     eax,edx
c0010757:	c3                   	ret    

c0010758 <VgaText::scrollScreen()>:
c0010758:	57                   	push   edi
c0010759:	56                   	push   esi
c001075a:	be 01 00 00 00       	mov    esi,0x1
c001075f:	53                   	push   ebx
c0010760:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010764:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001076a:	31 ff                	xor    edi,edi
c001076c:	01 d9                	add    ecx,ebx
c001076e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010771:	83 fe 17             	cmp    esi,0x17
c0010774:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001077a:	75 28                	jne    c00107a4 <VgaText::scrollScreen()+0x4c>
c001077c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010782:	74 1c                	je     c00107a0 <VgaText::scrollScreen()+0x48>
c0010784:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001078b:	50                   	push   eax
c001078c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010793:	50                   	push   eax
c0010794:	e8 ad ff ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c0010799:	5a                   	pop    edx
c001079a:	5a                   	pop    edx
c001079b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001079e:	eb 04                	jmp    c00107a4 <VgaText::scrollScreen()+0x4c>
c00107a0:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107a4:	47                   	inc    edi
c00107a5:	41                   	inc    ecx
c00107a6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107ac:	75 c0                	jne    c001076e <VgaText::scrollScreen()+0x16>
c00107ae:	46                   	inc    esi
c00107af:	83 fe 18             	cmp    esi,0x18
c00107b2:	75 b0                	jne    c0010764 <VgaText::scrollScreen()+0xc>
c00107b4:	39 1d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ebx
c00107ba:	75 24                	jne    c00107e0 <VgaText::scrollScreen()+0x88>
c00107bc:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107c3:	74 08                	je     c00107cd <VgaText::scrollScreen()+0x75>
c00107c5:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107cb:	eb 13                	jmp    c00107e0 <VgaText::scrollScreen()+0x88>
c00107cd:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107d3:	85 c0                	test   eax,eax
c00107d5:	74 09                	je     c00107e0 <VgaText::scrollScreen()+0x88>
c00107d7:	83 ec 0c             	sub    esp,0xc
c00107da:	53                   	push   ebx
c00107db:	ff d0                	call   eax
c00107dd:	83 c4 10             	add    esp,0x10
c00107e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107e4:	5b                   	pop    ebx
c00107e5:	5e                   	pop    esi
c00107e6:	5f                   	pop    edi
c00107e7:	e9 1e fe ff ff       	jmp    c001060a <VgaText::updateCursor()>

c00107ec <VgaText::combineCharAndColour(char, unsigned char)>:
c00107ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107f1:	c1 e0 08             	shl    eax,0x8
c00107f4:	89 c2                	mov    edx,eax
c00107f6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107fb:	09 d0                	or     eax,edx
c00107fd:	c3                   	ret    

c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107fe:	53                   	push   ebx
c00107ff:	83 ec 08             	sub    esp,0x8
c0010802:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010806:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001080b:	50                   	push   eax
c001080c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010811:	50                   	push   eax
c0010812:	e8 2f ff ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c0010817:	5a                   	pop    edx
c0010818:	0f b6 c0             	movzx  eax,al
c001081b:	5b                   	pop    ebx
c001081c:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010821:	50                   	push   eax
c0010822:	53                   	push   ebx
c0010823:	e8 c4 ff ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010828:	5a                   	pop    edx
c0010829:	5a                   	pop    edx
c001082a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010830:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010834:	0f b7 d2             	movzx  edx,dx
c0010837:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001083c:	39 0d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ecx
c0010842:	75 14                	jne    c0010858 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010844:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001084a:	85 c0                	test   eax,eax
c001084c:	74 0a                	je     c0010858 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001084e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010852:	83 c4 08             	add    esp,0x8
c0010855:	5b                   	pop    ebx
c0010856:	ff e0                	jmp    eax
c0010858:	83 c4 08             	add    esp,0x8
c001085b:	5b                   	pop    ebx
c001085c:	c3                   	ret    
c001085d:	90                   	nop

c001085e <VgaText::getCursorX()>:
c001085e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010862:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010868:	c3                   	ret    
c0010869:	90                   	nop

c001086a <VgaText::getCursorY()>:
c001086a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010874:	c3                   	ret    
c0010875:	90                   	nop

c0010876 <VgaText::setCursor(int, int)>:
c0010876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001087a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001087e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010888:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001088e:	e9 77 fd ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010893:	90                   	nop

c0010894 <VgaText::setCursorX(int)>:
c0010894:	83 ec 10             	sub    esp,0x10
c0010897:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001089b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a5:	50                   	push   eax
c00108a6:	e8 cb ff ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c00108ab:	83 c4 1c             	add    esp,0x1c
c00108ae:	c3                   	ret    
c00108af:	90                   	nop

c00108b0 <VgaText::setCursorY(int)>:
c00108b0:	83 ec 10             	sub    esp,0x10
c00108b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108bb:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108c1:	50                   	push   eax
c00108c2:	e8 af ff ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c00108c7:	83 c4 1c             	add    esp,0x1c
c00108ca:	c3                   	ret    
c00108cb:	90                   	nop

c00108cc <VgaText::incrementCursor(bool)>:
c00108cc:	56                   	push   esi
c00108cd:	53                   	push   ebx
c00108ce:	51                   	push   ecx
c00108cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108d7:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108dd:	40                   	inc    eax
c00108de:	83 f8 50             	cmp    eax,0x50
c00108e1:	74 08                	je     c00108eb <VgaText::incrementCursor(bool)+0x1f>
c00108e3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108e9:	eb 33                	jmp    c001091e <VgaText::incrementCursor(bool)+0x52>
c00108eb:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108f1:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108fb:	8d 50 01             	lea    edx,[eax+0x1]
c00108fe:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010904:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001090a:	75 12                	jne    c001091e <VgaText::incrementCursor(bool)+0x52>
c001090c:	83 ec 0c             	sub    esp,0xc
c001090f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010915:	53                   	push   ebx
c0010916:	e8 3d fe ff ff       	call   c0010758 <VgaText::scrollScreen()>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	89 f0                	mov    eax,esi
c0010920:	84 c0                	test   al,al
c0010922:	74 0c                	je     c0010930 <VgaText::incrementCursor(bool)+0x64>
c0010924:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010928:	5a                   	pop    edx
c0010929:	5b                   	pop    ebx
c001092a:	5e                   	pop    esi
c001092b:	e9 da fc ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010930:	58                   	pop    eax
c0010931:	5b                   	pop    ebx
c0010932:	5e                   	pop    esi
c0010933:	c3                   	ret    

c0010934 <VgaText::updateRAMUsageDisplay(int)>:
c0010934:	56                   	push   esi
c0010935:	8b 35 a0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3a0
c001093b:	53                   	push   ebx
c001093c:	bb 0a 00 00 00       	mov    ebx,0xa
c0010941:	6a 0f                	push   0xf
c0010943:	6a 00                	push   0x0
c0010945:	e8 fc fd ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c001094a:	5a                   	pop    edx
c001094b:	59                   	pop    ecx
c001094c:	0f b6 c8             	movzx  ecx,al
c001094f:	51                   	push   ecx
c0010950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010954:	99                   	cdq    
c0010955:	f7 fb                	idiv   ebx
c0010957:	89 d3                	mov    ebx,edx
c0010959:	83 c0 30             	add    eax,0x30
c001095c:	83 c3 30             	add    ebx,0x30
c001095f:	0f be c0             	movsx  eax,al
c0010962:	0f b6 db             	movzx  ebx,bl
c0010965:	50                   	push   eax
c0010966:	e8 81 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c001096b:	5a                   	pop    edx
c001096c:	5a                   	pop    edx
c001096d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010974:	51                   	push   ecx
c0010975:	53                   	push   ebx
c0010976:	e8 71 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c001097b:	5b                   	pop    ebx
c001097c:	5a                   	pop    edx
c001097d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010984:	51                   	push   ecx
c0010985:	6a 25                	push   0x25
c0010987:	e8 60 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c001098c:	59                   	pop    ecx
c001098d:	5b                   	pop    ebx
c001098e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010995:	5b                   	pop    ebx
c0010996:	5e                   	pop    esi
c0010997:	c3                   	ret    

c0010998 <VgaText::updateDiskUsage()>:
c0010998:	55                   	push   ebp
c0010999:	bd 10 27 00 00       	mov    ebp,0x2710
c001099e:	57                   	push   edi
c001099f:	8b 3d a0 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3a0
c00109a5:	56                   	push   esi
c00109a6:	53                   	push   ebx
c00109a7:	6a 0f                	push   0xf
c00109a9:	6a 00                	push   0x0
c00109ab:	e8 96 fd ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c00109b0:	5a                   	pop    edx
c00109b1:	0f b6 d8             	movzx  ebx,al
c00109b4:	59                   	pop    ecx
c00109b5:	8b 35 c8 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327c8
c00109bb:	53                   	push   ebx
c00109bc:	b9 0a 00 00 00       	mov    ecx,0xa
c00109c1:	89 f0                	mov    eax,esi
c00109c3:	99                   	cdq    
c00109c4:	f7 fd                	idiv   ebp
c00109c6:	99                   	cdq    
c00109c7:	f7 f9                	idiv   ecx
c00109c9:	8d 42 30             	lea    eax,[edx+0x30]
c00109cc:	0f b6 c0             	movzx  eax,al
c00109cf:	50                   	push   eax
c00109d0:	e8 17 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c00109d5:	5d                   	pop    ebp
c00109d6:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109db:	5a                   	pop    edx
c00109dc:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109e0:	53                   	push   ebx
c00109e1:	89 f0                	mov    eax,esi
c00109e3:	99                   	cdq    
c00109e4:	f7 fd                	idiv   ebp
c00109e6:	99                   	cdq    
c00109e7:	f7 f9                	idiv   ecx
c00109e9:	8d 42 30             	lea    eax,[edx+0x30]
c00109ec:	0f b6 c0             	movzx  eax,al
c00109ef:	50                   	push   eax
c00109f0:	e8 f7 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c00109f5:	5d                   	pop    ebp
c00109f6:	bd 64 00 00 00       	mov    ebp,0x64
c00109fb:	5a                   	pop    edx
c00109fc:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a03:	53                   	push   ebx
c0010a04:	89 f0                	mov    eax,esi
c0010a06:	99                   	cdq    
c0010a07:	f7 fd                	idiv   ebp
c0010a09:	99                   	cdq    
c0010a0a:	f7 f9                	idiv   ecx
c0010a0c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0f:	0f b6 c0             	movzx  eax,al
c0010a12:	50                   	push   eax
c0010a13:	e8 d4 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a18:	5d                   	pop    ebp
c0010a19:	5a                   	pop    edx
c0010a1a:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a21:	53                   	push   ebx
c0010a22:	89 f0                	mov    eax,esi
c0010a24:	99                   	cdq    
c0010a25:	f7 f9                	idiv   ecx
c0010a27:	89 d6                	mov    esi,edx
c0010a29:	99                   	cdq    
c0010a2a:	f7 f9                	idiv   ecx
c0010a2c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2f:	0f b6 c0             	movzx  eax,al
c0010a32:	50                   	push   eax
c0010a33:	e8 b4 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a38:	5d                   	pop    ebp
c0010a39:	5a                   	pop    edx
c0010a3a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a41:	53                   	push   ebx
c0010a42:	8d 46 30             	lea    eax,[esi+0x30]
c0010a45:	0f b6 f0             	movzx  esi,al
c0010a48:	56                   	push   esi
c0010a49:	e8 9e fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4e:	5e                   	pop    esi
c0010a4f:	8b 35 c4 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327c4
c0010a55:	5d                   	pop    ebp
c0010a56:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a5d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a62:	53                   	push   ebx
c0010a63:	89 f0                	mov    eax,esi
c0010a65:	99                   	cdq    
c0010a66:	f7 fd                	idiv   ebp
c0010a68:	99                   	cdq    
c0010a69:	f7 f9                	idiv   ecx
c0010a6b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6e:	0f b6 c0             	movzx  eax,al
c0010a71:	50                   	push   eax
c0010a72:	e8 75 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a77:	5a                   	pop    edx
c0010a78:	5d                   	pop    ebp
c0010a79:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a80:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a85:	53                   	push   ebx
c0010a86:	89 f0                	mov    eax,esi
c0010a88:	99                   	cdq    
c0010a89:	f7 fd                	idiv   ebp
c0010a8b:	99                   	cdq    
c0010a8c:	f7 f9                	idiv   ecx
c0010a8e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a91:	0f b6 c0             	movzx  eax,al
c0010a94:	50                   	push   eax
c0010a95:	e8 52 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9a:	5a                   	pop    edx
c0010a9b:	5d                   	pop    ebp
c0010a9c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aa3:	bd 64 00 00 00       	mov    ebp,0x64
c0010aa8:	53                   	push   ebx
c0010aa9:	89 f0                	mov    eax,esi
c0010aab:	99                   	cdq    
c0010aac:	f7 fd                	idiv   ebp
c0010aae:	99                   	cdq    
c0010aaf:	f7 f9                	idiv   ecx
c0010ab1:	83 c2 30             	add    edx,0x30
c0010ab4:	0f b6 d2             	movzx  edx,dl
c0010ab7:	52                   	push   edx
c0010ab8:	e8 2f fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010abd:	5a                   	pop    edx
c0010abe:	5d                   	pop    ebp
c0010abf:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ac6:	53                   	push   ebx
c0010ac7:	89 f0                	mov    eax,esi
c0010ac9:	99                   	cdq    
c0010aca:	f7 f9                	idiv   ecx
c0010acc:	89 d6                	mov    esi,edx
c0010ace:	99                   	cdq    
c0010acf:	f7 f9                	idiv   ecx
c0010ad1:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad4:	0f b6 c0             	movzx  eax,al
c0010ad7:	50                   	push   eax
c0010ad8:	e8 0f fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010add:	5a                   	pop    edx
c0010ade:	59                   	pop    ecx
c0010adf:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ae6:	53                   	push   ebx
c0010ae7:	8d 46 30             	lea    eax,[esi+0x30]
c0010aea:	0f b6 f0             	movzx  esi,al
c0010aed:	56                   	push   esi
c0010aee:	e8 f9 fc ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010af3:	5b                   	pop    ebx
c0010af4:	5e                   	pop    esi
c0010af5:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010afc:	5b                   	pop    ebx
c0010afd:	5e                   	pop    esi
c0010afe:	5f                   	pop    edi
c0010aff:	5d                   	pop    ebp
c0010b00:	c3                   	ret    
c0010b01:	90                   	nop

c0010b02 <VgaText::updateTitle()>:
c0010b02:	53                   	push   ebx
c0010b03:	31 c0                	xor    eax,eax
c0010b05:	83 ec 58             	sub    esp,0x58
c0010b08:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b0c:	89 e1                	mov    ecx,esp
c0010b0e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b12:	40                   	inc    eax
c0010b13:	83 f8 50             	cmp    eax,0x50
c0010b16:	75 f6                	jne    c0010b0e <VgaText::updateTitle()+0xc>
c0010b18:	31 c0                	xor    eax,eax
c0010b1a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b21:	84 db                	test   bl,bl
c0010b23:	74 06                	je     c0010b2b <VgaText::updateTitle()+0x29>
c0010b25:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b28:	40                   	inc    eax
c0010b29:	eb ef                	jmp    c0010b1a <VgaText::updateTitle()+0x18>
c0010b2b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b31:	85 c0                	test   eax,eax
c0010b33:	74 09                	je     c0010b3e <VgaText::updateTitle()+0x3c>
c0010b35:	53                   	push   ebx
c0010b36:	53                   	push   ebx
c0010b37:	51                   	push   ecx
c0010b38:	52                   	push   edx
c0010b39:	ff d0                	call   eax
c0010b3b:	83 c4 10             	add    esp,0x10
c0010b3e:	e8 55 fe ff ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0010b43:	83 c4 58             	add    esp,0x58
c0010b46:	5b                   	pop    ebx
c0010b47:	c3                   	ret    

c0010b48 <VgaText::setTitleTextColour(VgaColour)>:
c0010b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b50:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b56:	eb aa                	jmp    c0010b02 <VgaText::updateTitle()>

c0010b58 <VgaText::setTitleColour(VgaColour)>:
c0010b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b60:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b66:	eb 9a                	jmp    c0010b02 <VgaText::updateTitle()>

c0010b68 <VgaText::setTitle(char*)>:
c0010b68:	53                   	push   ebx
c0010b69:	83 ec 10             	sub    esp,0x10
c0010b6c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b74:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b7a:	50                   	push   eax
c0010b7b:	e8 b4 fc fe ff       	call   c0000834 <strcpy>
c0010b80:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b84:	83 c4 18             	add    esp,0x18
c0010b87:	5b                   	pop    ebx
c0010b88:	e9 75 ff ff ff       	jmp    c0010b02 <VgaText::updateTitle()>
c0010b8d:	90                   	nop

c0010b8e <VgaText::decrementCursor(bool)>:
c0010b8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b96:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b9c:	85 c0                	test   eax,eax
c0010b9e:	74 07                	je     c0010ba7 <VgaText::decrementCursor(bool)+0x19>
c0010ba0:	48                   	dec    eax
c0010ba1:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010ba7:	84 c9                	test   cl,cl
c0010ba9:	74 09                	je     c0010bb4 <VgaText::decrementCursor(bool)+0x26>
c0010bab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010baf:	e9 56 fa ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010bb4:	c3                   	ret    
c0010bb5:	90                   	nop

c0010bb6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bb6:	53                   	push   ebx
c0010bb7:	83 ec 08             	sub    esp,0x8
c0010bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bc6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bca:	3c 07                	cmp    al,0x7
c0010bcc:	75 2a                	jne    c0010bf8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bce:	a1 f4 e5 02 c0       	mov    eax,ds:0xc002e5f4
c0010bd3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bdb:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010be3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010beb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bef:	83 c4 08             	add    esp,0x8
c0010bf2:	5b                   	pop    ebx
c0010bf3:	e9 60 31 00 00       	jmp    c0013d58 <Buzzer::beep(int, int, bool)>
c0010bf8:	3c 0d                	cmp    al,0xd
c0010bfa:	75 0c                	jne    c0010c08 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bfc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c06:	eb 3b                	jmp    c0010c43 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c08:	3c 0a                	cmp    al,0xa
c0010c0a:	75 40                	jne    c0010c4c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c0c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c12:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c1c:	8d 50 01             	lea    edx,[eax+0x1]
c0010c1f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c25:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c2b:	75 12                	jne    c0010c3f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c2d:	83 ec 0c             	sub    esp,0xc
c0010c30:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c36:	53                   	push   ebx
c0010c37:	e8 1c fb ff ff       	call   c0010758 <VgaText::scrollScreen()>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c43:	83 c4 08             	add    esp,0x8
c0010c46:	5b                   	pop    ebx
c0010c47:	e9 be f9 ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010c4c:	3c 08                	cmp    al,0x8
c0010c4e:	75 31                	jne    c0010c81 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c50:	50                   	push   eax
c0010c51:	50                   	push   eax
c0010c52:	6a 01                	push   0x1
c0010c54:	53                   	push   ebx
c0010c55:	e8 34 ff ff ff       	call   c0010b8e <VgaText::decrementCursor(bool)>
c0010c5a:	5a                   	pop    edx
c0010c5b:	59                   	pop    ecx
c0010c5c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c62:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c68:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c6e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c74:	6a 20                	push   0x20
c0010c76:	53                   	push   ebx
c0010c77:	e8 82 fb ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c7c:	83 c4 28             	add    esp,0x28
c0010c7f:	5b                   	pop    ebx
c0010c80:	c3                   	ret    
c0010c81:	83 ec 08             	sub    esp,0x8
c0010c84:	0f be c0             	movsx  eax,al
c0010c87:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c8d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c93:	51                   	push   ecx
c0010c94:	52                   	push   edx
c0010c95:	50                   	push   eax
c0010c96:	53                   	push   ebx
c0010c97:	e8 62 fb ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c9c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ca0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ca8:	83 c4 28             	add    esp,0x28
c0010cab:	5b                   	pop    ebx
c0010cac:	e9 1b fc ff ff       	jmp    c00108cc <VgaText::incrementCursor(bool)>
c0010cb1:	90                   	nop

c0010cb2 <VgaText::isShowingCursor()>:
c0010cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cb6:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cbc:	c3                   	ret    
c0010cbd:	90                   	nop

c0010cbe <VgaText::isBlinkDisabled()>:
c0010cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc2:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cc8:	83 f0 01             	xor    eax,0x1
c0010ccb:	c3                   	ret    

c0010ccc <VgaText::setCursorHeight(int)>:
c0010ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cd4:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cda:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010ce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ce5:	e9 3a f9 ff ff       	jmp    c0010624 <VgaText::showCursor(bool)>

c0010cea <VgaText::getCursorHeight()>:
c0010cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cee:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cf4:	c3                   	ret    

c0010cf5 <setActiveTerminal(VgaText*)>:
c0010cf5:	53                   	push   ebx
c0010cf6:	83 ec 08             	sub    esp,0x8
c0010cf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cfd:	85 db                	test   ebx,ebx
c0010cff:	75 11                	jne    c0010d12 <setActiveTerminal(VgaText*)+0x1d>
c0010d01:	c7 44 24 10 ac a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3ac
c0010d09:	83 c4 08             	add    esp,0x8
c0010d0c:	5b                   	pop    ebx
c0010d0d:	e9 f5 98 00 00       	jmp    c001a607 <Krnl::panic(char const*)>
c0010d12:	50                   	push   eax
c0010d13:	50                   	push   eax
c0010d14:	53                   	push   ebx
c0010d15:	68 ba a3 02 c0       	push   0xc002a3ba
c0010d1a:	e8 3b 22 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0010d1f:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0010d24:	83 c4 10             	add    esp,0x10
c0010d27:	85 c0                	test   eax,eax
c0010d29:	74 0c                	je     c0010d37 <setActiveTerminal(VgaText*)+0x42>
c0010d2b:	83 ec 0c             	sub    esp,0xc
c0010d2e:	50                   	push   eax
c0010d2f:	e8 d6 f8 ff ff       	call   c001060a <VgaText::updateCursor()>
c0010d34:	83 c4 10             	add    esp,0x10
c0010d37:	89 1d 44 e5 02 c0    	mov    DWORD PTR ds:0xc002e544,ebx
c0010d3d:	51                   	push   ecx
c0010d3e:	51                   	push   ecx
c0010d3f:	53                   	push   ebx
c0010d40:	68 d2 a3 02 c0       	push   0xc002a3d2
c0010d45:	e8 10 22 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0010d4a:	83 c4 0c             	add    esp,0xc
c0010d4d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d53:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d59:	53                   	push   ebx
c0010d5a:	e8 17 fb ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c0010d5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d62:	e8 57 ff ff ff       	call   c0010cbe <VgaText::isBlinkDisabled()>
c0010d67:	5a                   	pop    edx
c0010d68:	0f b6 c0             	movzx  eax,al
c0010d6b:	59                   	pop    ecx
c0010d6c:	50                   	push   eax
c0010d6d:	53                   	push   ebx
c0010d6e:	e8 c1 f8 ff ff       	call   c0010634 <VgaText::disableBlink(bool)>
c0010d73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d76:	e8 6f ff ff ff       	call   c0010cea <VgaText::getCursorHeight()>
c0010d7b:	5a                   	pop    edx
c0010d7c:	59                   	pop    ecx
c0010d7d:	50                   	push   eax
c0010d7e:	53                   	push   ebx
c0010d7f:	e8 48 ff ff ff       	call   c0010ccc <VgaText::setCursorHeight(int)>
c0010d84:	83 c4 10             	add    esp,0x10
c0010d87:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d8e:	75 0a                	jne    c0010d9a <setActiveTerminal(VgaText*)+0xa5>
c0010d90:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d9a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d9e:	83 c4 08             	add    esp,0x8
c0010da1:	5b                   	pop    ebx
c0010da2:	e9 0f f8 ff ff       	jmp    c00105b6 <VgaText::load()>

c0010da7 <doTerminalCycle()>:
c0010da7:	83 ec 18             	sub    esp,0x18
c0010daa:	a1 40 e5 02 c0       	mov    eax,ds:0xc002e540
c0010daf:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010db5:	50                   	push   eax
c0010db6:	a3 40 e5 02 c0       	mov    ds:0xc002e540,eax
c0010dbb:	e8 35 ff ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c0010dc0:	83 c4 1c             	add    esp,0x1c
c0010dc3:	c3                   	ret    

c0010dc4 <VgaText::doUpdate()>:
c0010dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc8:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dce:	85 c0                	test   eax,eax
c0010dd0:	74 02                	je     c0010dd4 <VgaText::doUpdate()+0x10>
c0010dd2:	ff e0                	jmp    eax
c0010dd4:	c3                   	ret    
c0010dd5:	90                   	nop

c0010dd6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dd6:	55                   	push   ebp
c0010dd7:	57                   	push   edi
c0010dd8:	56                   	push   esi
c0010dd9:	53                   	push   ebx
c0010dda:	83 ec 1c             	sub    esp,0x1c
c0010ddd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010de1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010de6:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010ded:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010df0:	50                   	push   eax
c0010df1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010df6:	50                   	push   eax
c0010df7:	e8 4a f9 ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c0010dfc:	59                   	pop    ecx
c0010dfd:	0f b6 c0             	movzx  eax,al
c0010e00:	5b                   	pop    ebx
c0010e01:	31 c9                	xor    ecx,ecx
c0010e03:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e0b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e0f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e19:	0f b7 db             	movzx  ebx,bx
c0010e1c:	01 db                	add    ebx,ebx
c0010e1e:	01 fb                	add    ebx,edi
c0010e20:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e23:	84 c0                	test   al,al
c0010e25:	0f 84 38 01 00 00    	je     c0010f63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e2b:	3c 0d                	cmp    al,0xd
c0010e2d:	75 0f                	jne    c0010e3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e2f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e39:	e9 1f 01 00 00       	jmp    c0010f5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e3e:	3c 0a                	cmp    al,0xa
c0010e40:	75 5b                	jne    c0010e9d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e42:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e48:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e52:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e55:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e5b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e61:	75 12                	jne    c0010e75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e63:	83 ec 0c             	sub    esp,0xc
c0010e66:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e6c:	55                   	push   ebp
c0010e6d:	e8 e6 f8 ff ff       	call   c0010758 <VgaText::scrollScreen()>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	83 ec 0c             	sub    esp,0xc
c0010e78:	55                   	push   ebp
c0010e79:	e8 8c f7 ff ff       	call   c001060a <VgaText::updateCursor()>
c0010e7e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e86:	83 c4 10             	add    esp,0x10
c0010e89:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e8f:	31 c9                	xor    ecx,ecx
c0010e91:	0f b7 db             	movzx  ebx,bx
c0010e94:	01 db                	add    ebx,ebx
c0010e96:	01 fb                	add    ebx,edi
c0010e98:	e9 c0 00 00 00       	jmp    c0010f5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e9d:	3c 08                	cmp    al,0x8
c0010e9f:	75 4e                	jne    c0010eef <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ea1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ea5:	53                   	push   ebx
c0010ea6:	53                   	push   ebx
c0010ea7:	6a 01                	push   0x1
c0010ea9:	55                   	push   ebp
c0010eaa:	e8 df fc ff ff       	call   c0010b8e <VgaText::decrementCursor(bool)>
c0010eaf:	58                   	pop    eax
c0010eb0:	5a                   	pop    edx
c0010eb1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eb7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ebd:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ec3:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ec9:	6a 20                	push   0x20
c0010ecb:	55                   	push   ebp
c0010ecc:	e8 2d f9 ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ed1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ed9:	83 c4 20             	add    esp,0x20
c0010edc:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ee2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ee6:	0f b7 db             	movzx  ebx,bx
c0010ee9:	01 db                	add    ebx,ebx
c0010eeb:	01 fb                	add    ebx,edi
c0010eed:	eb 6e                	jmp    c0010f5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010eef:	51                   	push   ecx
c0010ef0:	51                   	push   ecx
c0010ef1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ef5:	50                   	push   eax
c0010ef6:	e8 f1 f8 ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010efb:	83 c4 10             	add    esp,0x10
c0010efe:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f01:	39 2d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ebp
c0010f07:	75 2a                	jne    c0010f33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f09:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f0f:	85 c0                	test   eax,eax
c0010f11:	74 20                	je     c0010f33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f13:	52                   	push   edx
c0010f14:	52                   	push   edx
c0010f15:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f1b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f29:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f2c:	51                   	push   ecx
c0010f2d:	55                   	push   ebp
c0010f2e:	ff d0                	call   eax
c0010f30:	83 c4 20             	add    esp,0x20
c0010f33:	83 c3 02             	add    ebx,0x2
c0010f36:	50                   	push   eax
c0010f37:	50                   	push   eax
c0010f38:	6a 00                	push   0x0
c0010f3a:	55                   	push   ebp
c0010f3b:	e8 8c f9 ff ff       	call   c00108cc <VgaText::incrementCursor(bool)>
c0010f40:	83 c4 10             	add    esp,0x10
c0010f43:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f4a:	75 0f                	jne    c0010f5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f4c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f54:	0f b7 db             	movzx  ebx,bx
c0010f57:	01 db                	add    ebx,ebx
c0010f59:	01 fb                	add    ebx,edi
c0010f5b:	b1 01                	mov    cl,0x1
c0010f5d:	46                   	inc    esi
c0010f5e:	e9 bd fe ff ff       	jmp    c0010e20 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f63:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f67:	83 ec 0c             	sub    esp,0xc
c0010f6a:	55                   	push   ebp
c0010f6b:	e8 9a f6 ff ff       	call   c001060a <VgaText::updateCursor()>
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f77:	84 c9                	test   cl,cl
c0010f79:	74 0c                	je     c0010f87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f7b:	83 ec 0c             	sub    esp,0xc
c0010f7e:	55                   	push   ebp
c0010f7f:	e8 40 fe ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c0010f84:	83 c4 10             	add    esp,0x10
c0010f87:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f8e:	83 c4 1c             	add    esp,0x1c
c0010f91:	5b                   	pop    ebx
c0010f92:	5e                   	pop    esi
c0010f93:	5f                   	pop    edi
c0010f94:	5d                   	pop    ebp
c0010f95:	c3                   	ret    

c0010f96 <VgaText::clearScreen()>:
c0010f96:	57                   	push   edi
c0010f97:	56                   	push   esi
c0010f98:	31 f6                	xor    esi,esi
c0010f9a:	53                   	push   ebx
c0010f9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f9f:	52                   	push   edx
c0010fa0:	6a 00                	push   0x0
c0010fa2:	6a 00                	push   0x0
c0010fa4:	53                   	push   ebx
c0010fa5:	e8 cc f8 ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c0010faa:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fb1:	83 c4 10             	add    esp,0x10
c0010fb4:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fba:	7e 26                	jle    c0010fe2 <VgaText::clearScreen()+0x4c>
c0010fbc:	31 ff                	xor    edi,edi
c0010fbe:	50                   	push   eax
c0010fbf:	50                   	push   eax
c0010fc0:	56                   	push   esi
c0010fc1:	57                   	push   edi
c0010fc2:	47                   	inc    edi
c0010fc3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fc9:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fcf:	6a 20                	push   0x20
c0010fd1:	53                   	push   ebx
c0010fd2:	e8 27 f8 ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fd7:	83 c4 20             	add    esp,0x20
c0010fda:	83 ff 50             	cmp    edi,0x50
c0010fdd:	75 df                	jne    c0010fbe <VgaText::clearScreen()+0x28>
c0010fdf:	46                   	inc    esi
c0010fe0:	eb d2                	jmp    c0010fb4 <VgaText::clearScreen()+0x1e>
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	53                   	push   ebx
c0010fe6:	e8 d9 fd ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c0010feb:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010ff2:	83 c4 10             	add    esp,0x10
c0010ff5:	5b                   	pop    ebx
c0010ff6:	5e                   	pop    esi
c0010ff7:	5f                   	pop    edi
c0010ff8:	c3                   	ret    
c0010ff9:	90                   	nop

c0010ffa <VgaText::putchar(char)>:
c0010ffa:	56                   	push   esi
c0010ffb:	53                   	push   ebx
c0010ffc:	83 ec 14             	sub    esp,0x14
c0010fff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011003:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011007:	3c 5b                	cmp    al,0x5b
c0011009:	75 21                	jne    c001102c <VgaText::putchar(char)+0x32>
c001100b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011012:	74 28                	je     c001103c <VgaText::putchar(char)+0x42>
c0011014:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001101d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011027:	e9 e2 00 00 00       	jmp    c001110e <VgaText::putchar(char)+0x114>
c001102c:	3c 1b                	cmp    al,0x1b
c001102e:	75 0c                	jne    c001103c <VgaText::putchar(char)+0x42>
c0011030:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011037:	e9 d2 00 00 00       	jmp    c001110e <VgaText::putchar(char)+0x114>
c001103c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011042:	84 c9                	test   cl,cl
c0011044:	0f 84 ab 00 00 00    	je     c00110f5 <VgaText::putchar(char)+0xfb>
c001104a:	8d 50 c0             	lea    edx,[eax-0x40]
c001104d:	80 fa 3e             	cmp    dl,0x3e
c0011050:	0f 87 82 00 00 00    	ja     c00110d8 <VgaText::putchar(char)+0xde>
c0011056:	3c 6d                	cmp    al,0x6d
c0011058:	75 4d                	jne    c00110a7 <VgaText::putchar(char)+0xad>
c001105a:	31 f6                	xor    esi,esi
c001105c:	31 d2                	xor    edx,edx
c001105e:	31 c0                	xor    eax,eax
c0011060:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011066:	7e 30                	jle    c0011098 <VgaText::putchar(char)+0x9e>
c0011068:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011070:	80 fa 3b             	cmp    dl,0x3b
c0011073:	75 17                	jne    c001108c <VgaText::putchar(char)+0x92>
c0011075:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011079:	50                   	push   eax
c001107a:	53                   	push   ebx
c001107b:	e8 ee f5 ff ff       	call   c001066e <VgaText::doANSI_SGR(int)>
c0011080:	59                   	pop    ecx
c0011081:	31 d2                	xor    edx,edx
c0011083:	58                   	pop    eax
c0011084:	31 c0                	xor    eax,eax
c0011086:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001108a:	eb 09                	jmp    c0011095 <VgaText::putchar(char)+0x9b>
c001108c:	6b c0 0a             	imul   eax,eax,0xa
c001108f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011093:	88 ca                	mov    dl,cl
c0011095:	46                   	inc    esi
c0011096:	eb c8                	jmp    c0011060 <VgaText::putchar(char)+0x66>
c0011098:	84 d2                	test   dl,dl
c001109a:	74 31                	je     c00110cd <VgaText::putchar(char)+0xd3>
c001109c:	50                   	push   eax
c001109d:	53                   	push   ebx
c001109e:	e8 cb f5 ff ff       	call   c001066e <VgaText::doANSI_SGR(int)>
c00110a3:	58                   	pop    eax
c00110a4:	5a                   	pop    edx
c00110a5:	eb 26                	jmp    c00110cd <VgaText::putchar(char)+0xd3>
c00110a7:	3c 4a                	cmp    al,0x4a
c00110a9:	75 22                	jne    c00110cd <VgaText::putchar(char)+0xd3>
c00110ab:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110b2:	75 19                	jne    c00110cd <VgaText::putchar(char)+0xd3>
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	53                   	push   ebx
c00110b8:	e8 d9 fe ff ff       	call   c0010f96 <VgaText::clearScreen()>
c00110bd:	83 c4 0c             	add    esp,0xc
c00110c0:	6a 00                	push   0x0
c00110c2:	6a 00                	push   0x0
c00110c4:	53                   	push   ebx
c00110c5:	e8 ac f7 ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110d6:	eb 36                	jmp    c001110e <VgaText::putchar(char)+0x114>
c00110d8:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110de:	83 fa 0e             	cmp    edx,0xe
c00110e1:	7f 2b                	jg     c001110e <VgaText::putchar(char)+0x114>
c00110e3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110e6:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110ec:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110f3:	eb 19                	jmp    c001110e <VgaText::putchar(char)+0x114>
c00110f5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110fb:	0f be c0             	movsx  eax,al
c00110fe:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011104:	50                   	push   eax
c0011105:	53                   	push   ebx
c0011106:	e8 ab fa ff ff       	call   c0010bb6 <VgaText::putchar(char, VgaColour, VgaColour)>
c001110b:	83 c4 10             	add    esp,0x10
c001110e:	83 c4 14             	add    esp,0x14
c0011111:	5b                   	pop    ebx
c0011112:	5e                   	pop    esi
c0011113:	c3                   	ret    

c0011114 <VgaText::puts(char const*)>:
c0011114:	53                   	push   ebx
c0011115:	83 ec 08             	sub    esp,0x8
c0011118:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001111c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001111f:	84 c0                	test   al,al
c0011121:	74 12                	je     c0011135 <VgaText::puts(char const*)+0x21>
c0011123:	43                   	inc    ebx
c0011124:	51                   	push   ecx
c0011125:	51                   	push   ecx
c0011126:	50                   	push   eax
c0011127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001112b:	e8 ca fe ff ff       	call   c0010ffa <VgaText::putchar(char)>
c0011130:	83 c4 10             	add    esp,0x10
c0011133:	eb e7                	jmp    c001111c <VgaText::puts(char const*)+0x8>
c0011135:	83 c4 08             	add    esp,0x8
c0011138:	5b                   	pop    ebx
c0011139:	c3                   	ret    

c001113a <VgaText::putx(unsigned int)>:
c001113a:	57                   	push   edi
c001113b:	b9 11 00 00 00       	mov    ecx,0x11
c0011140:	56                   	push   esi
c0011141:	be ee a3 02 c0       	mov    esi,0xc002a3ee
c0011146:	53                   	push   ebx
c0011147:	83 ec 20             	sub    esp,0x20
c001114a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001114e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011152:	fc                   	cld    
c0011153:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011155:	be 08 00 00 00       	mov    esi,0x8
c001115a:	50                   	push   eax
c001115b:	50                   	push   eax
c001115c:	89 d8                	mov    eax,ebx
c001115e:	c1 e3 04             	shl    ebx,0x4
c0011161:	c1 e8 1c             	shr    eax,0x1c
c0011164:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011169:	50                   	push   eax
c001116a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001116e:	e8 87 fe ff ff       	call   c0010ffa <VgaText::putchar(char)>
c0011173:	83 c4 10             	add    esp,0x10
c0011176:	4e                   	dec    esi
c0011177:	75 e1                	jne    c001115a <VgaText::putx(unsigned int)+0x20>
c0011179:	83 c4 20             	add    esp,0x20
c001117c:	5b                   	pop    ebx
c001117d:	5e                   	pop    esi
c001117e:	5f                   	pop    edi
c001117f:	c3                   	ret    

c0011180 <VgaText::VgaText(char const*)>:
c0011180:	57                   	push   edi
c0011181:	56                   	push   esi
c0011182:	53                   	push   ebx
c0011183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011187:	83 ec 08             	sub    esp,0x8
c001118a:	6a 00                	push   0x0
c001118c:	50                   	push   eax
c001118d:	e8 6e 05 00 00       	call   c0011700 <UnixFile::UnixFile(int)>
c0011192:	83 c4 10             	add    esp,0x10
c0011195:	ba 54 a4 02 c0       	mov    edx,0xc002a454
c001119a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119e:	89 10                	mov    DWORD PTR [eax],edx
c00111a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a4:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b2:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c0:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cb:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d6:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e4:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f2:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fd:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011208:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001120e:	bb 20 e5 02 c0       	mov    ebx,0xc002e520
c0011213:	b8 08 00 00 00       	mov    eax,0x8
c0011218:	fc                   	cld    
c0011219:	89 d7                	mov    edi,edx
c001121b:	89 de                	mov    esi,ebx
c001121d:	89 c1                	mov    ecx,eax
c001121f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011225:	05 1e 10 00 00       	add    eax,0x101e
c001122a:	83 ec 08             	sub    esp,0x8
c001122d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011231:	50                   	push   eax
c0011232:	e8 fd f5 fe ff       	call   c0000834 <strcpy>
c0011237:	83 c4 10             	add    esp,0x10
c001123a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124c:	83 c0 0c             	add    eax,0xc
c001124f:	83 ec 04             	sub    esp,0x4
c0011252:	68 00 0f 00 00       	push   0xf00
c0011257:	6a 00                	push   0x0
c0011259:	50                   	push   eax
c001125a:	e8 19 f5 fe ff       	call   c0000778 <memset>
c001125f:	83 c4 10             	add    esp,0x10
c0011262:	83 ec 04             	sub    esp,0x4
c0011265:	6a 00                	push   0x0
c0011267:	6a 07                	push   0x7
c0011269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126d:	e8 b4 f4 ff ff       	call   c0010726 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	83 ec 08             	sub    esp,0x8
c0011278:	6a 02                	push   0x2
c001127a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001127e:	e8 49 fa ff ff       	call   c0010ccc <VgaText::setCursorHeight(int)>
c0011283:	83 c4 10             	add    esp,0x10
c0011286:	83 ec 04             	sub    esp,0x4
c0011289:	6a 00                	push   0x0
c001128b:	6a 00                	push   0x0
c001128d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011291:	e8 e0 f5 ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	83 ec 08             	sub    esp,0x8
c001129c:	6a 01                	push   0x1
c001129e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a2:	e8 7d f3 ff ff       	call   c0010624 <VgaText::showCursor(bool)>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	83 ec 08             	sub    esp,0x8
c00112ad:	6a 01                	push   0x1
c00112af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b3:	e8 7c f3 ff ff       	call   c0010634 <VgaText::disableBlink(bool)>
c00112b8:	83 c4 10             	add    esp,0x10
c00112bb:	83 ec 0c             	sub    esp,0xc
c00112be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c2:	e8 cf fc ff ff       	call   c0010f96 <VgaText::clearScreen()>
c00112c7:	83 c4 10             	add    esp,0x10
c00112ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ce:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d9:	05 9e 10 00 00       	add    eax,0x109e
c00112de:	83 ec 04             	sub    esp,0x4
c00112e1:	68 96 00 00 00       	push   0x96
c00112e6:	6a 00                	push   0x0
c00112e8:	50                   	push   eax
c00112e9:	e8 8a f4 fe ff       	call   c0000778 <memset>
c00112ee:	83 c4 10             	add    esp,0x10
c00112f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f5:	05 34 11 00 00       	add    eax,0x1134
c00112fa:	83 ec 04             	sub    esp,0x4
c00112fd:	68 2c 01 00 00       	push   0x12c
c0011302:	6a 00                	push   0x0
c0011304:	50                   	push   eax
c0011305:	e8 6e f4 fe ff       	call   c0000778 <memset>
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	90                   	nop
c001130e:	5b                   	pop    ebx
c001130f:	5e                   	pop    esi
c0011310:	5f                   	pop    edi
c0011311:	c3                   	ret    

c0011312 <VgaText::receiveKey(unsigned char)>:
c0011312:	55                   	push   ebp
c0011313:	57                   	push   edi
c0011314:	56                   	push   esi
c0011315:	53                   	push   ebx
c0011316:	83 ec 1c             	sub    esp,0x1c
c0011319:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001131d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011321:	84 db                	test   bl,bl
c0011323:	0f 84 c9 00 00 00    	je     c00113f2 <VgaText::receiveKey(unsigned char)+0xe0>
c0011329:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001132f:	80 fb 08             	cmp    bl,0x8
c0011332:	75 2c                	jne    c0011360 <VgaText::receiveKey(unsigned char)+0x4e>
c0011334:	83 ec 0c             	sub    esp,0xc
c0011337:	57                   	push   edi
c0011338:	e8 57 f4 fe ff       	call   c0000794 <strlen>
c001133d:	83 c4 10             	add    esp,0x10
c0011340:	85 c0                	test   eax,eax
c0011342:	74 41                	je     c0011385 <VgaText::receiveKey(unsigned char)+0x73>
c0011344:	50                   	push   eax
c0011345:	50                   	push   eax
c0011346:	6a 08                	push   0x8
c0011348:	56                   	push   esi
c0011349:	e8 ac fc ff ff       	call   c0010ffa <VgaText::putchar(char)>
c001134e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011351:	e8 3e f4 fe ff       	call   c0000794 <strlen>
c0011356:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001135e:	eb 22                	jmp    c0011382 <VgaText::receiveKey(unsigned char)+0x70>
c0011360:	0f be c3             	movsx  eax,bl
c0011363:	52                   	push   edx
c0011364:	52                   	push   edx
c0011365:	50                   	push   eax
c0011366:	56                   	push   esi
c0011367:	e8 8e fc ff ff       	call   c0010ffa <VgaText::putchar(char)>
c001136c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011370:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011375:	59                   	pop    ecx
c0011376:	5d                   	pop    ebp
c0011377:	8d 44 24 16          	lea    eax,[esp+0x16]
c001137b:	50                   	push   eax
c001137c:	57                   	push   edi
c001137d:	e8 f2 f5 fe ff       	call   c0000974 <strcat>
c0011382:	83 c4 10             	add    esp,0x10
c0011385:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001138c:	75 05                	jne    c0011393 <VgaText::receiveKey(unsigned char)+0x81>
c001138e:	80 fb 0a             	cmp    bl,0xa
c0011391:	75 53                	jne    c00113e6 <VgaText::receiveKey(unsigned char)+0xd4>
c0011393:	83 ec 0c             	sub    esp,0xc
c0011396:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001139c:	53                   	push   ebx
c001139d:	e8 f2 f3 fe ff       	call   c0000794 <strlen>
c00113a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113a5:	89 c5                	mov    ebp,eax
c00113a7:	e8 e8 f3 fe ff       	call   c0000794 <strlen>
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113b3:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113b8:	76 10                	jbe    c00113ca <VgaText::receiveKey(unsigned char)+0xb8>
c00113ba:	83 ec 0c             	sub    esp,0xc
c00113bd:	68 ff a3 02 c0       	push   0xc002a3ff
c00113c2:	e8 40 92 00 00       	call   c001a607 <Krnl::panic(char const*)>
c00113c7:	83 c4 10             	add    esp,0x10
c00113ca:	50                   	push   eax
c00113cb:	50                   	push   eax
c00113cc:	57                   	push   edi
c00113cd:	53                   	push   ebx
c00113ce:	e8 a1 f5 fe ff       	call   c0000974 <strcat>
c00113d3:	83 c4 0c             	add    esp,0xc
c00113d6:	68 96 00 00 00       	push   0x96
c00113db:	6a 00                	push   0x0
c00113dd:	57                   	push   edi
c00113de:	e8 95 f3 fe ff       	call   c0000778 <memset>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	83 ec 0c             	sub    esp,0xc
c00113e9:	56                   	push   esi
c00113ea:	e8 d5 f9 ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	83 c4 1c             	add    esp,0x1c
c00113f5:	5b                   	pop    ebx
c00113f6:	5e                   	pop    esi
c00113f7:	5f                   	pop    edi
c00113f8:	5d                   	pop    ebp
c00113f9:	c3                   	ret    

c00113fa <VgaText::write(unsigned long long, void*, int*)>:
c00113fa:	55                   	push   ebp
c00113fb:	57                   	push   edi
c00113fc:	56                   	push   esi
c00113fd:	53                   	push   ebx
c00113fe:	83 ec 0c             	sub    esp,0xc
c0011401:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011405:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011409:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001140d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011414:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011417:	39 eb                	cmp    ebx,ebp
c0011419:	74 13                	je     c001142e <VgaText::write(unsigned long long, void*, int*)+0x34>
c001141b:	43                   	inc    ebx
c001141c:	50                   	push   eax
c001141d:	50                   	push   eax
c001141e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011422:	50                   	push   eax
c0011423:	56                   	push   esi
c0011424:	e8 d1 fb ff ff       	call   c0010ffa <VgaText::putchar(char)>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	eb e9                	jmp    c0011417 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011438:	56                   	push   esi
c0011439:	e8 86 f9 ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c001143e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011442:	89 38                	mov    DWORD PTR [eax],edi
c0011444:	83 c4 1c             	add    esp,0x1c
c0011447:	31 c0                	xor    eax,eax
c0011449:	5b                   	pop    ebx
c001144a:	5e                   	pop    esi
c001144b:	5f                   	pop    edi
c001144c:	5d                   	pop    ebp
c001144d:	c3                   	ret    

c001144e <newTerminal(char*)>:
c001144e:	83 ec 28             	sub    esp,0x28
c0011451:	68 60 12 00 00       	push   0x1260
c0011456:	e8 e8 e3 ff ff       	call   c000f843 <malloc>
c001145b:	5a                   	pop    edx
c001145c:	59                   	pop    ecx
c001145d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011461:	50                   	push   eax
c0011462:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011466:	e8 15 fd ff ff       	call   c0011180 <VgaText::VgaText(char const*)>
c001146b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001146f:	83 c4 2c             	add    esp,0x2c
c0011472:	c3                   	ret    
c0011473:	90                   	nop

c0011474 <TSS::TSS()>:
c0011474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011478:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001147f:	90                   	nop
c0011480:	c3                   	ret    
c0011481:	90                   	nop

c0011482 <TSS::setESP(unsigned long)>:
c0011482:	55                   	push   ebp
c0011483:	89 e5                	mov    ebp,esp
c0011485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011488:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001148b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001148e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011491:	90                   	nop
c0011492:	5d                   	pop    ebp
c0011493:	c3                   	ret    

c0011494 <TSS::flush()>:
c0011494:	55                   	push   ebp
c0011495:	89 e5                	mov    ebp,esp
c0011497:	83 ec 10             	sub    esp,0x10
c001149a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149d:	8b 00                	mov    eax,DWORD PTR [eax]
c001149f:	83 c8 03             	or     eax,0x3
c00114a2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114a6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114aa:	66 89 d0             	mov    ax,dx
c00114ad:	0f 00 d8             	ltr    ax
c00114b0:	90                   	nop
c00114b1:	c9                   	leave  
c00114b2:	c3                   	ret    
c00114b3:	90                   	nop

c00114b4 <TSS::setup(unsigned long, unsigned long)>:
c00114b4:	55                   	push   ebp
c00114b5:	89 e5                	mov    ebp,esp
c00114b7:	83 ec 18             	sub    esp,0x18
c00114ba:	83 ec 0c             	sub    esp,0xc
c00114bd:	6a 68                	push   0x68
c00114bf:	e8 7f e3 ff ff       	call   c000f843 <malloc>
c00114c4:	83 c4 10             	add    esp,0x10
c00114c7:	89 c2                	mov    edx,eax
c00114c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d5:	83 ec 04             	sub    esp,0x4
c00114d8:	6a 68                	push   0x68
c00114da:	6a 00                	push   0x0
c00114dc:	50                   	push   eax
c00114dd:	e8 96 f2 fe ff       	call   c0000778 <memset>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114eb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011503:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011506:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011527:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001155a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011566:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011579:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157c:	0f 20 da             	mov    edx,cr3
c001157f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011582:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011585:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158e:	83 ec 08             	sub    esp,0x8
c0011591:	50                   	push   eax
c0011592:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011595:	50                   	push   eax
c0011596:	e8 83 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c001159b:	83 c4 10             	add    esp,0x10
c001159e:	83 ec 08             	sub    esp,0x8
c00115a1:	6a 68                	push   0x68
c00115a3:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115a6:	50                   	push   eax
c00115a7:	e8 8e da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115ac:	83 c4 10             	add    esp,0x10
c00115af:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115b3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115b6:	83 e0 0f             	and    eax,0xf
c00115b9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115bc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115bf:	83 c8 40             	or     eax,0x40
c00115c2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115c5:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00115ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d0:	05 78 01 00 00       	add    eax,0x178
c00115d5:	83 ec 04             	sub    esp,0x4
c00115d8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115db:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115de:	50                   	push   eax
c00115df:	e8 8a da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115e4:	83 c4 10             	add    esp,0x10
c00115e7:	89 c2                	mov    edx,eax
c00115e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ec:	89 10                	mov    DWORD PTR [eax],edx
c00115ee:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00115f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115f9:	05 78 01 00 00       	add    eax,0x178
c00115fe:	83 ec 0c             	sub    esp,0xc
c0011601:	50                   	push   eax
c0011602:	e8 ab da ff ff       	call   c000f0b2 <GDT::flush()>
c0011607:	83 c4 10             	add    esp,0x10
c001160a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160d:	8b 00                	mov    eax,DWORD PTR [eax]
c001160f:	83 ec 08             	sub    esp,0x8
c0011612:	50                   	push   eax
c0011613:	68 68 a4 02 c0       	push   0xc002a468
c0011618:	e8 3d 19 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011623:	8b 00                	mov    eax,DWORD PTR [eax]
c0011625:	c9                   	leave  
c0011626:	c3                   	ret    
c0011627:	90                   	nop

c0011628 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001162c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011630:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011633:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011638:	75 08                	jne    c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001163a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011640:	eb 38                	jmp    c001167a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011642:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011647:	75 17                	jne    c0011660 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011649:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001164e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011651:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011657:	8b 10                	mov    edx,DWORD PTR [eax]
c0011659:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001165d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011660:	89 c1                	mov    ecx,eax
c0011662:	83 e1 fd             	and    ecx,0xfffffffd
c0011665:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001166b:	74 cd                	je     c001163a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001166d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011672:	83 e0 ef             	and    eax,0xffffffef
c0011675:	83 f8 08             	cmp    eax,0x8
c0011678:	76 c0                	jbe    c001163a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001167a:	31 c0                	xor    eax,eax
c001167c:	c3                   	ret    
c001167d:	90                   	nop

c001167e <ReservedFilename::isAtty()>:
c001167e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011682:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011685:	31 c0                	xor    eax,eax
c0011687:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001168d:	74 09                	je     c0011698 <ReservedFilename::isAtty()+0x1a>
c001168f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011695:	0f 94 c0             	sete   al
c0011698:	c3                   	ret    
c0011699:	90                   	nop

c001169a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001169a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001169e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116a9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116ae:	75 08                	jne    c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116b0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116b6:	eb 3d                	jmp    c00116f5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116b8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116bd:	75 17                	jne    c00116d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116c7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00116cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116d3:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116d6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116db:	75 04                	jne    c00116e1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116dd:	89 0a                	mov    DWORD PTR [edx],ecx
c00116df:	eb 14                	jmp    c00116f5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116e1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116e6:	74 c8                	je     c00116b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116e8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ed:	83 e0 ef             	and    eax,0xffffffef
c00116f0:	83 f8 08             	cmp    eax,0x8
c00116f3:	76 bb                	jbe    c00116b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116f5:	31 c0                	xor    eax,eax
c00116f7:	c3                   	ret    

c00116f8 <UnixFile::getFileDescriptor()>:
c00116f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ff:	c3                   	ret    

c0011700 <UnixFile::UnixFile(int)>:
c0011700:	53                   	push   ebx
c0011701:	83 ec 28             	sub    esp,0x28
c0011704:	ba 54 a5 02 c0       	mov    edx,0xc002a554
c0011709:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001170d:	89 10                	mov    DWORD PTR [eax],edx
c001170f:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011717:	0f 8f 8c 01 00 00    	jg     c00118a9 <UnixFile::UnixFile(int)+0x1a9>
c001171d:	a1 00 d4 02 c0       	mov    eax,ds:0xc002d400
c0011722:	8d 50 01             	lea    edx,[eax+0x1]
c0011725:	89 15 00 d4 02 c0    	mov    DWORD PTR ds:0xc002d400,edx
c001172b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001172f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011732:	83 ec 08             	sub    esp,0x8
c0011735:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011739:	68 d8 e5 02 c0       	push   0xc002e5d8
c001173e:	e8 0d 70 01 00       	call   c0028750 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011743:	83 c4 10             	add    esp,0x10
c0011746:	a0 d4 e5 02 c0       	mov    al,ds:0xc002e5d4
c001174b:	83 f0 01             	xor    eax,0x1
c001174e:	84 c0                	test   al,al
c0011750:	0f 84 54 01 00 00    	je     c00118aa <UnixFile::UnixFile(int)+0x1aa>
c0011756:	c6 05 d4 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5d4,0x1
c001175d:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011765:	83 ec 0c             	sub    esp,0xc
c0011768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001176c:	e8 d2 e0 ff ff       	call   c000f843 <malloc>
c0011771:	83 c4 10             	add    esp,0x10
c0011774:	89 c3                	mov    ebx,eax
c0011776:	83 ec 08             	sub    esp,0x8
c0011779:	68 03 ff ff 0f       	push   0xfffff03
c001177e:	53                   	push   ebx
c001177f:	e8 2c 01 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011784:	83 c4 10             	add    esp,0x10
c0011787:	89 1d cc e5 02 c0    	mov    DWORD PTR ds:0xc002e5cc,ebx
c001178d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011795:	83 ec 0c             	sub    esp,0xc
c0011798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001179c:	e8 a2 e0 ff ff       	call   c000f843 <malloc>
c00117a1:	83 c4 10             	add    esp,0x10
c00117a4:	89 c3                	mov    ebx,eax
c00117a6:	83 ec 08             	sub    esp,0x8
c00117a9:	68 01 ff ff 0f       	push   0xfffff01
c00117ae:	53                   	push   ebx
c00117af:	e8 fc 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c00117b4:	83 c4 10             	add    esp,0x10
c00117b7:	89 1d d0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5d0,ebx
c00117bd:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117c5:	83 ec 0c             	sub    esp,0xc
c00117c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117cc:	e8 72 e0 ff ff       	call   c000f843 <malloc>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	89 c3                	mov    ebx,eax
c00117d6:	83 ec 08             	sub    esp,0x8
c00117d9:	68 00 ff ff 0f       	push   0xfffff00
c00117de:	53                   	push   ebx
c00117df:	e8 cc 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c00117e4:	83 c4 10             	add    esp,0x10
c00117e7:	89 1d c4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c4,ebx
c00117ed:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117f5:	83 ec 0c             	sub    esp,0xc
c00117f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117fc:	e8 42 e0 ff ff       	call   c000f843 <malloc>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	89 c3                	mov    ebx,eax
c0011806:	83 ec 08             	sub    esp,0x8
c0011809:	68 02 ff ff 0f       	push   0xfffff02
c001180e:	53                   	push   ebx
c001180f:	e8 9c 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	89 1d c8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c8,ebx
c001181d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011825:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001182a:	7f 7e                	jg     c00118aa <UnixFile::UnixFile(int)+0x1aa>
c001182c:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011834:	83 ec 0c             	sub    esp,0xc
c0011837:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001183b:	e8 03 e0 ff ff       	call   c000f843 <malloc>
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	89 c3                	mov    ebx,eax
c0011845:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011849:	05 10 ff ff 0f       	add    eax,0xfffff10
c001184e:	83 ec 08             	sub    esp,0x8
c0011851:	50                   	push   eax
c0011852:	53                   	push   ebx
c0011853:	e8 58 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011858:	83 c4 10             	add    esp,0x10
c001185b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001185f:	89 1c 85 a0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a60],ebx
c0011866:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001186e:	83 ec 0c             	sub    esp,0xc
c0011871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011875:	e8 c9 df ff ff       	call   c000f843 <malloc>
c001187a:	83 c4 10             	add    esp,0x10
c001187d:	89 c3                	mov    ebx,eax
c001187f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011883:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011888:	83 ec 08             	sub    esp,0x8
c001188b:	50                   	push   eax
c001188c:	53                   	push   ebx
c001188d:	e8 1e 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011892:	83 c4 10             	add    esp,0x10
c0011895:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011899:	89 1c 85 60 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1aa0],ebx
c00118a0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118a4:	e9 7c ff ff ff       	jmp    c0011825 <UnixFile::UnixFile(int)+0x125>
c00118a9:	90                   	nop
c00118aa:	83 c4 28             	add    esp,0x28
c00118ad:	5b                   	pop    ebx
c00118ae:	c3                   	ret    
c00118af:	90                   	nop

c00118b0 <ReservedFilename::ReservedFilename(int)>:
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b7:	83 ec 08             	sub    esp,0x8
c00118ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118be:	50                   	push   eax
c00118bf:	e8 3c fe ff ff       	call   c0011700 <UnixFile::UnixFile(int)>
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	ba 70 a5 02 c0       	mov    edx,0xc002a570
c00118cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d0:	89 10                	mov    DWORD PTR [eax],edx
c00118d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118dd:	90                   	nop
c00118de:	83 c4 0c             	add    esp,0xc
c00118e1:	c3                   	ret    

c00118e2 <UnixFile::~UnixFile()>:
c00118e2:	83 ec 1c             	sub    esp,0x1c
c00118e5:	ba 54 a5 02 c0       	mov    edx,0xc002a554
c00118ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ee:	89 10                	mov    DWORD PTR [eax],edx
c00118f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118f7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118fc:	7f 73                	jg     c0011971 <UnixFile::~UnixFile()+0x8f>
c00118fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011906:	83 ec 0c             	sub    esp,0xc
c0011909:	68 d8 e5 02 c0       	push   0xc002e5d8
c001190e:	e8 11 6f 01 00       	call   c0028824 <LinkedList<UnixFile>::getFirstElement()>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001191a:	83 ec 0c             	sub    esp,0xc
c001191d:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011922:	e8 05 6f 01 00       	call   c002882c <LinkedList<UnixFile>::removeFirst()>
c0011927:	83 c4 10             	add    esp,0x10
c001192a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001192e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011932:	74 40                	je     c0011974 <UnixFile::~UnixFile()+0x92>
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001193b:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011940:	e8 0b 6e 01 00       	call   c0028750 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011945:	83 c4 10             	add    esp,0x10
c0011948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001194c:	8d 50 01             	lea    edx,[eax+0x1]
c001194f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011953:	3d 88 13 00 00       	cmp    eax,0x1388
c0011958:	0f 94 c0             	sete   al
c001195b:	84 c0                	test   al,al
c001195d:	74 a7                	je     c0011906 <UnixFile::~UnixFile()+0x24>
c001195f:	83 ec 0c             	sub    esp,0xc
c0011962:	68 2c a5 02 c0       	push   0xc002a52c
c0011967:	e8 9b 8c 00 00       	call   c001a607 <Krnl::panic(char const*)>
c001196c:	83 c4 10             	add    esp,0x10
c001196f:	eb 95                	jmp    c0011906 <UnixFile::~UnixFile()+0x24>
c0011971:	90                   	nop
c0011972:	eb 01                	jmp    c0011975 <UnixFile::~UnixFile()+0x93>
c0011974:	90                   	nop
c0011975:	90                   	nop
c0011976:	83 c4 1c             	add    esp,0x1c
c0011979:	c3                   	ret    

c001197a <UnixFile::~UnixFile()>:
c001197a:	83 ec 0c             	sub    esp,0xc
c001197d:	83 ec 0c             	sub    esp,0xc
c0011980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011984:	e8 59 ff ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	83 ec 08             	sub    esp,0x8
c001198f:	6a 0c                	push   0xc
c0011991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011995:	e8 e0 14 00 00       	call   c0012e7a <operator delete(void*, unsigned long)>
c001199a:	83 c4 10             	add    esp,0x10
c001199d:	83 c4 0c             	add    esp,0xc
c00119a0:	c3                   	ret    
c00119a1:	90                   	nop

c00119a2 <ReservedFilename::~ReservedFilename()>:
c00119a2:	83 ec 0c             	sub    esp,0xc
c00119a5:	ba 70 a5 02 c0       	mov    edx,0xc002a570
c00119aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ae:	89 10                	mov    DWORD PTR [eax],edx
c00119b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b4:	83 ec 0c             	sub    esp,0xc
c00119b7:	50                   	push   eax
c00119b8:	e8 25 ff ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	90                   	nop
c00119c1:	83 c4 0c             	add    esp,0xc
c00119c4:	c3                   	ret    
c00119c5:	90                   	nop

c00119c6 <ReservedFilename::~ReservedFilename()>:
c00119c6:	83 ec 0c             	sub    esp,0xc
c00119c9:	83 ec 0c             	sub    esp,0xc
c00119cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d0:	e8 cd ff ff ff       	call   c00119a2 <ReservedFilename::~ReservedFilename()>
c00119d5:	83 c4 10             	add    esp,0x10
c00119d8:	83 ec 08             	sub    esp,0x8
c00119db:	6a 0c                	push   0xc
c00119dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e1:	e8 94 14 00 00       	call   c0012e7a <operator delete(void*, unsigned long)>
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	83 c4 0c             	add    esp,0xc
c00119ec:	c3                   	ret    

c00119ed <getFromFileDescriptor(int)>:
c00119ed:	53                   	push   ebx
c00119ee:	83 ec 08             	sub    esp,0x8
c00119f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119f5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119fb:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a01:	7f 2c                	jg     c0011a2f <getFromFileDescriptor(int)+0x42>
c0011a03:	83 ec 0c             	sub    esp,0xc
c0011a06:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011a0b:	e8 14 6e 01 00       	call   c0028824 <LinkedList<UnixFile>::getFirstElement()>
c0011a10:	83 c4 10             	add    esp,0x10
c0011a13:	85 c0                	test   eax,eax
c0011a15:	75 04                	jne    c0011a1b <getFromFileDescriptor(int)+0x2e>
c0011a17:	31 c0                	xor    eax,eax
c0011a19:	eb 6e                	jmp    c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a1b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a1e:	74 69                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a20:	52                   	push   edx
c0011a21:	52                   	push   edx
c0011a22:	50                   	push   eax
c0011a23:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011a28:	e8 a1 6e 01 00       	call   c00288ce <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a2d:	eb e1                	jmp    c0011a10 <getFromFileDescriptor(int)+0x23>
c0011a2f:	a1 cc e5 02 c0       	mov    eax,ds:0xc002e5cc
c0011a34:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a3a:	74 4d                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a3c:	a1 d0 e5 02 c0       	mov    eax,ds:0xc002e5d0
c0011a41:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a47:	74 40                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a49:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0011a4e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a54:	74 33                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a56:	a1 c4 e5 02 c0       	mov    eax,ds:0xc002e5c4
c0011a5b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a61:	74 26                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a63:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a69:	83 f8 08             	cmp    eax,0x8
c0011a6c:	77 09                	ja     c0011a77 <getFromFileDescriptor(int)+0x8a>
c0011a6e:	8b 04 85 a0 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a60]
c0011a75:	eb 12                	jmp    c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a77:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a7d:	83 fb 08             	cmp    ebx,0x8
c0011a80:	77 95                	ja     c0011a17 <getFromFileDescriptor(int)+0x2a>
c0011a82:	8b 04 9d 60 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1aa0]
c0011a89:	83 c4 08             	add    esp,0x8
c0011a8c:	5b                   	pop    ebx
c0011a8d:	c3                   	ret    

c0011a8e <__static_initialization_and_destruction_0(int, int)>:
c0011a8e:	83 ec 0c             	sub    esp,0xc
c0011a91:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a96:	75 34                	jne    c0011acc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a98:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011aa0:	75 2a                	jne    c0011acc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aa2:	83 ec 0c             	sub    esp,0xc
c0011aa5:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011aaa:	e8 49 6c 01 00       	call   c00286f8 <LinkedList<UnixFile>::LinkedList()>
c0011aaf:	83 c4 10             	add    esp,0x10
c0011ab2:	83 ec 04             	sub    esp,0x4
c0011ab5:	68 90 d3 02 c0       	push   0xc002d390
c0011aba:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011abf:	68 f6 86 02 c0       	push   0xc00286f6
c0011ac4:	e8 2b 13 00 00       	call   c0012df4 <__cxa_atexit>
c0011ac9:	83 c4 10             	add    esp,0x10
c0011acc:	90                   	nop
c0011acd:	83 c4 0c             	add    esp,0xc
c0011ad0:	c3                   	ret    

c0011ad1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ad1:	83 ec 0c             	sub    esp,0xc
c0011ad4:	83 ec 08             	sub    esp,0x8
c0011ad7:	68 ff ff 00 00       	push   0xffff
c0011adc:	6a 01                	push   0x1
c0011ade:	e8 ab ff ff ff       	call   c0011a8e <__static_initialization_and_destruction_0(int, int)>
c0011ae3:	83 c4 10             	add    esp,0x10
c0011ae6:	83 c4 0c             	add    esp,0xc
c0011ae9:	c3                   	ret    

c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011aea:	53                   	push   ebx
c0011aeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011aef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011af3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011af9:	89 c8                	mov    eax,ecx
c0011afb:	d1 e8                	shr    eax,1
c0011afd:	03 05 08 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d408
c0011b03:	83 e1 01             	and    ecx,0x1
c0011b06:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b08:	75 09                	jne    c0011b13 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b0a:	83 e2 f0             	and    edx,0xfffffff0
c0011b0d:	09 da                	or     edx,ebx
c0011b0f:	88 10                	mov    BYTE PTR [eax],dl
c0011b11:	5b                   	pop    ebx
c0011b12:	c3                   	ret    
c0011b13:	c1 e3 04             	shl    ebx,0x4
c0011b16:	83 e2 0f             	and    edx,0xf
c0011b19:	09 da                	or     edx,ebx
c0011b1b:	88 10                	mov    BYTE PTR [eax],dl
c0011b1d:	5b                   	pop    ebx
c0011b1e:	c3                   	ret    

c0011b1f <Virt::getPageState(unsigned long)>:
c0011b1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b23:	8b 0d 08 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d408
c0011b29:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b2f:	89 d0                	mov    eax,edx
c0011b31:	d1 e8                	shr    eax,1
c0011b33:	83 e2 01             	and    edx,0x1
c0011b36:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b39:	75 04                	jne    c0011b3f <Virt::getPageState(unsigned long)+0x20>
c0011b3b:	83 e0 0f             	and    eax,0xf
c0011b3e:	c3                   	ret    
c0011b3f:	c0 e8 04             	shr    al,0x4
c0011b42:	c3                   	ret    

c0011b43 <Virt::allocateKernelVirtualPages(int)>:
c0011b43:	55                   	push   ebp
c0011b44:	31 ed                	xor    ebp,ebp
c0011b46:	57                   	push   edi
c0011b47:	56                   	push   esi
c0011b48:	53                   	push   ebx
c0011b49:	31 db                	xor    ebx,ebx
c0011b4b:	83 ec 1c             	sub    esp,0x1c
c0011b4e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b52:	8b 3d 04 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d404
c0011b58:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b5d:	57                   	push   edi
c0011b5e:	e8 bc ff ff ff       	call   c0011b1f <Virt::getPageState(unsigned long)>
c0011b63:	5a                   	pop    edx
c0011b64:	84 c0                	test   al,al
c0011b66:	75 3a                	jne    c0011ba2 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b68:	85 db                	test   ebx,ebx
c0011b6a:	75 02                	jne    c0011b6e <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b6c:	89 fd                	mov    ebp,edi
c0011b6e:	43                   	inc    ebx
c0011b6f:	39 f3                	cmp    ebx,esi
c0011b71:	74 5a                	je     c0011bcd <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b73:	47                   	inc    edi
c0011b74:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b7a:	76 31                	jbe    c0011bad <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b7c:	c7 05 04 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d404,0xc8000
c0011b86:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b8b:	75 28                	jne    c0011bb5 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b8d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b92:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b97:	57                   	push   edi
c0011b98:	e8 82 ff ff ff       	call   c0011b1f <Virt::getPageState(unsigned long)>
c0011b9d:	5a                   	pop    edx
c0011b9e:	84 c0                	test   al,al
c0011ba0:	74 c6                	je     c0011b68 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011ba2:	31 db                	xor    ebx,ebx
c0011ba4:	47                   	inc    edi
c0011ba5:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bab:	77 cf                	ja     c0011b7c <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bad:	89 3d 04 d4 02 c0    	mov    DWORD PTR ds:0xc002d404,edi
c0011bb3:	eb a8                	jmp    c0011b5d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bb5:	83 ec 0c             	sub    esp,0xc
c0011bb8:	68 84 a5 02 c0       	push   0xc002a584
c0011bbd:	e8 45 8a 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0011bc2:	8b 3d 04 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d404
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	eb 90                	jmp    c0011b5d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bcd:	89 2d 04 d4 02 c0    	mov    DWORD PTR ds:0xc002d404,ebp
c0011bd3:	4b                   	dec    ebx
c0011bd4:	74 5f                	je     c0011c35 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bd6:	85 f6                	test   esi,esi
c0011bd8:	74 3d                	je     c0011c17 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bda:	89 e8                	mov    eax,ebp
c0011bdc:	31 db                	xor    ebx,ebx
c0011bde:	8d 7e ff             	lea    edi,[esi-0x1]
c0011be1:	eb 14                	jmp    c0011bf7 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011be3:	6a 01                	push   0x1
c0011be5:	43                   	inc    ebx
c0011be6:	50                   	push   eax
c0011be7:	e8 fe fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bec:	58                   	pop    eax
c0011bed:	39 f3                	cmp    ebx,esi
c0011bef:	5a                   	pop    edx
c0011bf0:	74 25                	je     c0011c17 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bf2:	a1 04 d4 02 c0       	mov    eax,ds:0xc002d404
c0011bf7:	8d 50 01             	lea    edx,[eax+0x1]
c0011bfa:	85 db                	test   ebx,ebx
c0011bfc:	89 15 04 d4 02 c0    	mov    DWORD PTR ds:0xc002d404,edx
c0011c02:	74 20                	je     c0011c24 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c04:	39 df                	cmp    edi,ebx
c0011c06:	75 db                	jne    c0011be3 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c08:	6a 03                	push   0x3
c0011c0a:	43                   	inc    ebx
c0011c0b:	50                   	push   eax
c0011c0c:	e8 d9 fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c11:	59                   	pop    ecx
c0011c12:	39 f3                	cmp    ebx,esi
c0011c14:	58                   	pop    eax
c0011c15:	75 db                	jne    c0011bf2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c17:	83 c4 1c             	add    esp,0x1c
c0011c1a:	89 e8                	mov    eax,ebp
c0011c1c:	5b                   	pop    ebx
c0011c1d:	c1 e0 0c             	shl    eax,0xc
c0011c20:	5e                   	pop    esi
c0011c21:	5f                   	pop    edi
c0011c22:	5d                   	pop    ebp
c0011c23:	c3                   	ret    
c0011c24:	6a 02                	push   0x2
c0011c26:	bb 01 00 00 00       	mov    ebx,0x1
c0011c2b:	50                   	push   eax
c0011c2c:	e8 b9 fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c31:	58                   	pop    eax
c0011c32:	5a                   	pop    edx
c0011c33:	eb bd                	jmp    c0011bf2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c35:	6a 04                	push   0x4
c0011c37:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c3a:	55                   	push   ebp
c0011c3b:	a3 04 d4 02 c0       	mov    ds:0xc002d404,eax
c0011c40:	e8 a5 fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c45:	59                   	pop    ecx
c0011c46:	89 e8                	mov    eax,ebp
c0011c48:	5b                   	pop    ebx
c0011c49:	c1 e0 0c             	shl    eax,0xc
c0011c4c:	83 c4 1c             	add    esp,0x1c
c0011c4f:	5b                   	pop    ebx
c0011c50:	5e                   	pop    esi
c0011c51:	5f                   	pop    edi
c0011c52:	5d                   	pop    ebp
c0011c53:	c3                   	ret    

c0011c54 <Virt::freeSwapfilePage(unsigned long)>:
c0011c54:	53                   	push   ebx
c0011c55:	8b 15 e8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e8
c0011c5b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c5f:	b8 01 00 00 00       	mov    eax,0x1
c0011c64:	89 cb                	mov    ebx,ecx
c0011c66:	d3 e0                	shl    eax,cl
c0011c68:	c1 eb 05             	shr    ebx,0x5
c0011c6b:	f7 d0                	not    eax
c0011c6d:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c70:	5b                   	pop    ebx
c0011c71:	c3                   	ret    

c0011c72 <Virt::swapIDToSector(unsigned long)>:
c0011c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c76:	0f af 05 0c d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d40c
c0011c7d:	03 05 14 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d414
c0011c83:	c3                   	ret    

c0011c84 <Virt::allocateSwapfilePage()>:
c0011c84:	55                   	push   ebp
c0011c85:	31 d2                	xor    edx,edx
c0011c87:	57                   	push   edi
c0011c88:	56                   	push   esi
c0011c89:	53                   	push   ebx
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	8b 0d 0c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d40c
c0011c93:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011c98:	f7 f1                	div    ecx
c0011c9a:	39 0d 10 d4 02 c0    	cmp    DWORD PTR ds:0xc002d410,ecx
c0011ca0:	72 2d                	jb     c0011ccf <Virt::allocateSwapfilePage()+0x4b>
c0011ca2:	8b 35 e8 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5e8
c0011ca8:	8b 16                	mov    edx,DWORD PTR [esi]
c0011caa:	f6 c2 01             	test   dl,0x1
c0011cad:	74 3c                	je     c0011ceb <Virt::allocateSwapfilePage()+0x67>
c0011caf:	31 c9                	xor    ecx,ecx
c0011cb1:	bf 01 00 00 00       	mov    edi,0x1
c0011cb6:	eb 12                	jmp    c0011cca <Virt::allocateSwapfilePage()+0x46>
c0011cb8:	89 fd                	mov    ebp,edi
c0011cba:	89 ca                	mov    edx,ecx
c0011cbc:	d3 e5                	shl    ebp,cl
c0011cbe:	c1 ea 05             	shr    edx,0x5
c0011cc1:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cc4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cc6:	85 ea                	test   edx,ebp
c0011cc8:	74 2a                	je     c0011cf4 <Virt::allocateSwapfilePage()+0x70>
c0011cca:	41                   	inc    ecx
c0011ccb:	39 c8                	cmp    eax,ecx
c0011ccd:	77 e9                	ja     c0011cb8 <Virt::allocateSwapfilePage()+0x34>
c0011ccf:	83 ec 0c             	sub    esp,0xc
c0011cd2:	68 31 a7 02 c0       	push   0xc002a731
c0011cd7:	e8 2b 89 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0011cdc:	83 c4 10             	add    esp,0x10
c0011cdf:	31 c9                	xor    ecx,ecx
c0011ce1:	83 c4 0c             	add    esp,0xc
c0011ce4:	89 c8                	mov    eax,ecx
c0011ce6:	5b                   	pop    ebx
c0011ce7:	5e                   	pop    esi
c0011ce8:	5f                   	pop    edi
c0011ce9:	5d                   	pop    ebp
c0011cea:	c3                   	ret    
c0011ceb:	89 f3                	mov    ebx,esi
c0011ced:	bd 01 00 00 00       	mov    ebp,0x1
c0011cf2:	31 c9                	xor    ecx,ecx
c0011cf4:	09 ea                	or     edx,ebp
c0011cf6:	89 c8                	mov    eax,ecx
c0011cf8:	89 13                	mov    DWORD PTR [ebx],edx
c0011cfa:	83 c4 0c             	add    esp,0xc
c0011cfd:	5b                   	pop    ebx
c0011cfe:	5e                   	pop    esi
c0011cff:	5f                   	pop    edi
c0011d00:	5d                   	pop    ebp
c0011d01:	c3                   	ret    

c0011d02 <Virt::virtualMemorySetup()>:
c0011d02:	53                   	push   ebx
c0011d03:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d08:	83 ec 08             	sub    esp,0x8
c0011d0b:	6a 0f                	push   0xf
c0011d0d:	53                   	push   ebx
c0011d0e:	43                   	inc    ebx
c0011d0f:	e8 d6 fd ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d14:	59                   	pop    ecx
c0011d15:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d1b:	58                   	pop    eax
c0011d1c:	75 ed                	jne    c0011d0b <Virt::virtualMemorySetup()+0x9>
c0011d1e:	83 ec 08             	sub    esp,0x8
c0011d21:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d26:	68 00 00 00 c8       	push   0xc8000000
c0011d2b:	68 48 a7 02 c0       	push   0xc002a748
c0011d30:	e8 25 12 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0011d35:	58                   	pop    eax
c0011d36:	5a                   	pop    edx
c0011d37:	68 00 f0 ff ef       	push   0xeffff000
c0011d3c:	68 5c a7 02 c0       	push   0xc002a75c
c0011d41:	e8 14 12 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0011d46:	83 c4 10             	add    esp,0x10
c0011d49:	83 ec 08             	sub    esp,0x8
c0011d4c:	6a 00                	push   0x0
c0011d4e:	53                   	push   ebx
c0011d4f:	43                   	inc    ebx
c0011d50:	e8 95 fd ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d55:	83 c4 10             	add    esp,0x10
c0011d58:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d5e:	75 e9                	jne    c0011d49 <Virt::virtualMemorySetup()+0x47>
c0011d60:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d65:	83 ec 08             	sub    esp,0x8
c0011d68:	6a 0f                	push   0xf
c0011d6a:	53                   	push   ebx
c0011d6b:	43                   	inc    ebx
c0011d6c:	e8 79 fd ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d71:	83 c4 10             	add    esp,0x10
c0011d74:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d7a:	75 e9                	jne    c0011d65 <Virt::virtualMemorySetup()+0x63>
c0011d7c:	83 c4 08             	add    esp,0x8
c0011d7f:	5b                   	pop    ebx
c0011d80:	c3                   	ret    

c0011d81 <Virt::swappingSetup()>:
c0011d81:	83 ec 14             	sub    esp,0x14
c0011d84:	31 d2                	xor    edx,edx
c0011d86:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011d8b:	f7 35 0c d4 02 c0    	div    DWORD PTR ds:0xc002d40c
c0011d91:	c1 e8 05             	shr    eax,0x5
c0011d94:	50                   	push   eax
c0011d95:	68 70 a7 02 c0       	push   0xc002a770
c0011d9a:	e8 bb 11 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0011d9f:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011da4:	31 d2                	xor    edx,edx
c0011da6:	f7 35 0c d4 02 c0    	div    DWORD PTR ds:0xc002d40c
c0011dac:	c1 e8 05             	shr    eax,0x5
c0011daf:	89 04 24             	mov    DWORD PTR [esp],eax
c0011db2:	e8 8c da ff ff       	call   c000f843 <malloc>
c0011db7:	83 c4 0c             	add    esp,0xc
c0011dba:	89 c1                	mov    ecx,eax
c0011dbc:	a3 e8 e5 02 c0       	mov    ds:0xc002e5e8,eax
c0011dc1:	31 d2                	xor    edx,edx
c0011dc3:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011dc8:	f7 35 0c d4 02 c0    	div    DWORD PTR ds:0xc002d40c
c0011dce:	c1 e8 05             	shr    eax,0x5
c0011dd1:	50                   	push   eax
c0011dd2:	6a 00                	push   0x0
c0011dd4:	51                   	push   ecx
c0011dd5:	e8 9e e9 fe ff       	call   c0000778 <memset>
c0011dda:	83 c4 1c             	add    esp,0x1c
c0011ddd:	c3                   	ret    

c0011dde <Virt::getAKernelVAS()>:
c0011dde:	a1 ec e5 02 c0       	mov    eax,ds:0xc002e5ec
c0011de3:	c3                   	ret    

c0011de4 <Virt::setupPageSwapping(int)>:
c0011de4:	57                   	push   edi
c0011de5:	56                   	push   esi
c0011de6:	53                   	push   ebx
c0011de7:	83 ec 1c             	sub    esp,0x1c
c0011dea:	68 14 01 00 00       	push   0x114
c0011def:	e8 4f da ff ff       	call   c000f843 <malloc>
c0011df4:	83 c4 0c             	add    esp,0xc
c0011df7:	89 c6                	mov    esi,eax
c0011df9:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c0011dff:	68 8b a7 02 c0       	push   0xc002a78b
c0011e04:	50                   	push   eax
c0011e05:	e8 a8 16 00 00       	call   c00134b2 <File::File(char const*, Process*)>
c0011e0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e0d:	e8 7c 18 00 00       	call   c001368e <File::unlink()>
c0011e12:	58                   	pop    eax
c0011e13:	5a                   	pop    edx
c0011e14:	6a 12                	push   0x12
c0011e16:	56                   	push   esi
c0011e17:	e8 fa 16 00 00       	call   c0013516 <File::open(FileOpenMode)>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	85 c0                	test   eax,eax
c0011e21:	0f 85 ca 00 00 00    	jne    c0011ef1 <Virt::setupPageSwapping(int)+0x10d>
c0011e27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e33:	c1 e3 08             	shl    ebx,0x8
c0011e36:	83 ec 0c             	sub    esp,0xc
c0011e39:	68 00 00 01 00       	push   0x10000
c0011e3e:	e8 00 da ff ff       	call   c000f843 <malloc>
c0011e43:	83 c4 0c             	add    esp,0xc
c0011e46:	89 c7                	mov    edi,eax
c0011e48:	68 00 00 01 00       	push   0x10000
c0011e4d:	6a 00                	push   0x0
c0011e4f:	50                   	push   eax
c0011e50:	e8 23 e9 fe ff       	call   c0000778 <memset>
c0011e55:	83 c4 10             	add    esp,0x10
c0011e58:	85 db                	test   ebx,ebx
c0011e5a:	79 03                	jns    c0011e5f <Virt::setupPageSwapping(int)+0x7b>
c0011e5c:	83 c3 0f             	add    ebx,0xf
c0011e5f:	c1 fb 04             	sar    ebx,0x4
c0011e62:	4b                   	dec    ebx
c0011e63:	83 fb ff             	cmp    ebx,0xffffffff
c0011e66:	74 4b                	je     c0011eb3 <Virt::setupPageSwapping(int)+0xcf>
c0011e68:	83 ec 0c             	sub    esp,0xc
c0011e6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e6d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e71:	52                   	push   edx
c0011e72:	57                   	push   edi
c0011e73:	6a 00                	push   0x0
c0011e75:	68 00 00 01 00       	push   0x10000
c0011e7a:	56                   	push   esi
c0011e7b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e7e:	83 c4 20             	add    esp,0x20
c0011e81:	85 c0                	test   eax,eax
c0011e83:	75 59                	jne    c0011ede <Virt::setupPageSwapping(int)+0xfa>
c0011e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e89:	3d 00 00 01 00       	cmp    eax,0x10000
c0011e8e:	74 d2                	je     c0011e62 <Virt::setupPageSwapping(int)+0x7e>
c0011e90:	83 ec 08             	sub    esp,0x8
c0011e93:	4b                   	dec    ebx
c0011e94:	50                   	push   eax
c0011e95:	68 de a7 02 c0       	push   0xc002a7de
c0011e9a:	e8 bb 10 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0011e9f:	c7 04 24 e7 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7e7
c0011ea6:	e8 5c 87 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	83 fb ff             	cmp    ebx,0xffffffff
c0011eb1:	75 b5                	jne    c0011e68 <Virt::setupPageSwapping(int)+0x84>
c0011eb3:	83 ec 0c             	sub    esp,0xc
c0011eb6:	56                   	push   esi
c0011eb7:	e8 b8 16 00 00       	call   c0013574 <File::close()>
c0011ebc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ebf:	e8 9f d9 ff ff       	call   c000f863 <rfree>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	85 f6                	test   esi,esi
c0011ec9:	74 0c                	je     c0011ed7 <Virt::setupPageSwapping(int)+0xf3>
c0011ecb:	83 ec 0c             	sub    esp,0xc
c0011ece:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ed0:	56                   	push   esi
c0011ed1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ed4:	83 c4 10             	add    esp,0x10
c0011ed7:	83 c4 10             	add    esp,0x10
c0011eda:	5b                   	pop    ebx
c0011edb:	5e                   	pop    esi
c0011edc:	5f                   	pop    edi
c0011edd:	c3                   	ret    
c0011ede:	83 ec 08             	sub    esp,0x8
c0011ee1:	50                   	push   eax
c0011ee2:	68 c6 a7 02 c0       	push   0xc002a7c6
c0011ee7:	e8 6e 10 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0011eec:	83 c4 10             	add    esp,0x10
c0011eef:	eb 94                	jmp    c0011e85 <Virt::setupPageSwapping(int)+0xa1>
c0011ef1:	83 ec 08             	sub    esp,0x8
c0011ef4:	50                   	push   eax
c0011ef5:	68 a2 a7 02 c0       	push   0xc002a7a2
c0011efa:	e8 5b 10 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0011eff:	c7 04 24 ab a7 02 c0 	mov    DWORD PTR [esp],0xc002a7ab
c0011f06:	e8 fc 86 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	e9 14 ff ff ff       	jmp    c0011e27 <Virt::setupPageSwapping(int)+0x43>
c0011f13:	90                   	nop

c0011f14 <VAS::VAS()>:
c0011f14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f23:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f2e:	a3 ec e5 02 c0       	mov    ds:0xc002e5ec,eax
c0011f33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f37:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f3f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f46:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f4d:	90                   	nop
c0011f4e:	c3                   	ret    
c0011f4f:	90                   	nop

c0011f50 <VAS::VAS(VAS*)>:
c0011f50:	83 ec 0c             	sub    esp,0xc
c0011f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f62:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f69:	83 ec 0c             	sub    esp,0xc
c0011f6c:	68 a4 a5 02 c0       	push   0xc002a5a4
c0011f71:	e8 91 86 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0011f76:	83 c4 10             	add    esp,0x10
c0011f79:	90                   	nop
c0011f7a:	83 c4 0c             	add    esp,0xc
c0011f7d:	c3                   	ret    

c0011f7e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f82:	89 c2                	mov    edx,eax
c0011f84:	c1 e8 0a             	shr    eax,0xa
c0011f87:	c1 ea 16             	shr    edx,0x16
c0011f8a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f8f:	19 c9                	sbb    ecx,ecx
c0011f91:	c1 e2 0c             	shl    edx,0xc
c0011f94:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f9a:	25 fc 0f 00 00       	and    eax,0xffc
c0011f9f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fa6:	01 d0                	add    eax,edx
c0011fa8:	c3                   	ret    
c0011fa9:	90                   	nop

c0011faa <VAS::getPageTableEntry(unsigned long)>:
c0011faa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fae:	89 ca                	mov    edx,ecx
c0011fb0:	c1 e9 0a             	shr    ecx,0xa
c0011fb3:	c1 ea 16             	shr    edx,0x16
c0011fb6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fbc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011fc2:	c1 e0 0c             	shl    eax,0xc
c0011fc5:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011fc8:	c3                   	ret    

c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011fc9:	57                   	push   edi
c0011fca:	56                   	push   esi
c0011fcb:	be 01 00 00 00       	mov    esi,0x1
c0011fd0:	53                   	push   ebx
c0011fd1:	83 ec 10             	sub    esp,0x10
c0011fd4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fd8:	c1 eb 0c             	shr    ebx,0xc
c0011fdb:	eb 3f                	jmp    c001201c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011fdd:	e8 fc fd ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0011fe2:	83 ec 08             	sub    esp,0x8
c0011fe5:	57                   	push   edi
c0011fe6:	50                   	push   eax
c0011fe7:	e8 be ff ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0011fec:	83 c4 10             	add    esp,0x10
c0011fef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ff5:	f6 c4 04             	test   ah,0x4
c0011ff8:	75 5f                	jne    c0012059 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ffa:	80 fa 04             	cmp    dl,0x4
c0011ffd:	74 78                	je     c0012077 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011fff:	80 fa 02             	cmp    dl,0x2
c0012002:	0f 84 88 00 00 00    	je     c0012090 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012008:	80 fa 03             	cmp    dl,0x3
c001200b:	0f 84 ad 00 00 00    	je     c00120be <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012011:	fe ca                	dec    dl
c0012013:	0f 84 92 00 00 00    	je     c00120ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012019:	43                   	inc    ebx
c001201a:	31 f6                	xor    esi,esi
c001201c:	53                   	push   ebx
c001201d:	e8 fd fa ff ff       	call   c0011b1f <Virt::getPageState(unsigned long)>
c0012022:	5f                   	pop    edi
c0012023:	89 df                	mov    edi,ebx
c0012025:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012029:	c1 e7 0c             	shl    edi,0xc
c001202c:	84 c0                	test   al,al
c001202e:	75 ad                	jne    c0011fdd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012030:	83 ec 0c             	sub    esp,0xc
c0012033:	68 ed a7 02 c0       	push   0xc002a7ed
c0012038:	e8 ca 85 00 00       	call   c001a607 <Krnl::panic(char const*)>
c001203d:	e8 9c fd ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0012042:	5a                   	pop    edx
c0012043:	59                   	pop    ecx
c0012044:	57                   	push   edi
c0012045:	50                   	push   eax
c0012046:	e8 5f ff ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c001204b:	83 c4 10             	add    esp,0x10
c001204e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012050:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012054:	f6 c4 04             	test   ah,0x4
c0012057:	74 c0                	je     c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012059:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001205d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	50                   	push   eax
c0012066:	e8 f0 dd ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012072:	80 fa 04             	cmp    dl,0x4
c0012075:	75 88                	jne    c0011fff <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012077:	89 f0                	mov    eax,esi
c0012079:	84 c0                	test   al,al
c001207b:	75 47                	jne    c00120c4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001207d:	c7 44 24 20 c8 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5c8
c0012085:	83 c4 10             	add    esp,0x10
c0012088:	5b                   	pop    ebx
c0012089:	5e                   	pop    esi
c001208a:	5f                   	pop    edi
c001208b:	e9 77 85 00 00       	jmp    c001a607 <Krnl::panic(char const*)>
c0012090:	89 f0                	mov    eax,esi
c0012092:	84 c0                	test   al,al
c0012094:	75 15                	jne    c00120ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012096:	83 ec 0c             	sub    esp,0xc
c0012099:	68 09 a8 02 c0       	push   0xc002a809
c001209e:	e8 64 85 00 00       	call   c001a607 <Krnl::panic(char const*)>
c00120a3:	83 c4 10             	add    esp,0x10
c00120a6:	e9 6e ff ff ff       	jmp    c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120ab:	83 ec 08             	sub    esp,0x8
c00120ae:	6a 00                	push   0x0
c00120b0:	53                   	push   ebx
c00120b1:	e8 34 fa ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	e9 5b ff ff ff       	jmp    c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120be:	89 f0                	mov    eax,esi
c00120c0:	84 c0                	test   al,al
c00120c2:	75 15                	jne    c00120d9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120c4:	83 ec 08             	sub    esp,0x8
c00120c7:	6a 00                	push   0x0
c00120c9:	53                   	push   ebx
c00120ca:	e8 1b fa ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	5b                   	pop    ebx
c00120d6:	5e                   	pop    esi
c00120d7:	5f                   	pop    edi
c00120d8:	c3                   	ret    
c00120d9:	c7 44 24 20 25 a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a825
c00120e1:	83 c4 10             	add    esp,0x10
c00120e4:	5b                   	pop    ebx
c00120e5:	5e                   	pop    esi
c00120e6:	5f                   	pop    edi
c00120e7:	e9 1b 85 00 00       	jmp    c001a607 <Krnl::panic(char const*)>

c00120ec <VAS::freeAllocatedPages(unsigned long)>:
c00120ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120f4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00120f8:	74 09                	je     c0012103 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00120fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00120fe:	e9 c6 fe ff ff       	jmp    c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012103:	c7 44 24 04 ec a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a5ec
c001210b:	e9 4a 0e 00 00       	jmp    c0012f5a <Dbg::kprintf(char const*, ...)>

c0012110 <VAS::virtualToPhysical(unsigned long)>:
c0012110:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012114:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012118:	e8 8d fe ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c001211d:	5a                   	pop    edx
c001211e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012120:	59                   	pop    ecx
c0012121:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012126:	c3                   	ret    
c0012127:	90                   	nop

c0012128 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012128:	55                   	push   ebp
c0012129:	57                   	push   edi
c001212a:	56                   	push   esi
c001212b:	53                   	push   ebx
c001212c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012130:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012134:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012138:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001213c:	85 db                	test   ebx,ebx
c001213e:	7e 22                	jle    c0012162 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012140:	c1 e3 0c             	shl    ebx,0xc
c0012143:	01 f3                	add    ebx,esi
c0012145:	56                   	push   esi
c0012146:	81 c6 00 10 00 00    	add    esi,0x1000
c001214c:	55                   	push   ebp
c001214d:	e8 58 fe ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012152:	5a                   	pop    edx
c0012153:	59                   	pop    ecx
c0012154:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012156:	21 f9                	and    ecx,edi
c0012158:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001215c:	39 f3                	cmp    ebx,esi
c001215e:	89 08                	mov    DWORD PTR [eax],ecx
c0012160:	75 e3                	jne    c0012145 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012162:	5b                   	pop    ebx
c0012163:	5e                   	pop    esi
c0012164:	5f                   	pop    edi
c0012165:	5d                   	pop    ebp
c0012166:	c3                   	ret    
c0012167:	90                   	nop

c0012168 <VAS::setToWriteCombining(unsigned long, int)>:
c0012168:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001216d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012173:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001217a:	75 01                	jne    c001217d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001217c:	c3                   	ret    
c001217d:	68 80 00 00 00       	push   0x80
c0012182:	6a ff                	push   0xffffffff
c0012184:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012188:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001218c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012190:	e8 93 ff ff ff       	call   c0012128 <VAS::reflagRange(unsigned long, int, int, int)>
c0012195:	83 c4 14             	add    esp,0x14
c0012198:	c3                   	ret    
c0012199:	90                   	nop

c001219a <VAS::mapOtherVASIn(bool, VAS*)>:
c001219a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001219f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121ad:	19 c0                	sbb    eax,eax
c00121af:	83 ca 03             	or     edx,0x3
c00121b2:	83 e0 fc             	and    eax,0xfffffffc
c00121b5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121bc:	0f 20 d8             	mov    eax,cr3
c00121bf:	0f 22 d8             	mov    cr3,eax
c00121c2:	c3                   	ret    
c00121c3:	90                   	nop

c00121c4 <VAS::~VAS()>:
c00121c4:	83 ec 2c             	sub    esp,0x2c
c00121c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121cf:	e8 28 bc 00 00       	call   c001ddfc <lockScheduler()>
c00121d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00121db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121de:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121e4:	83 ec 04             	sub    esp,0x4
c00121e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00121eb:	6a 01                	push   0x1
c00121ed:	50                   	push   eax
c00121ee:	e8 a7 ff ff ff       	call   c001219a <VAS::mapOtherVASIn(bool, VAS*)>
c00121f3:	83 c4 10             	add    esp,0x10
c00121f6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121fe:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012206:	0f 8f d7 00 00 00    	jg     c00122e3 <VAS::~VAS()+0x11f>
c001220c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012210:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012213:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012217:	c1 e2 02             	shl    edx,0x2
c001221a:	01 d0                	add    eax,edx
c001221c:	8b 00                	mov    eax,DWORD PTR [eax]
c001221e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012226:	83 e0 01             	and    eax,0x1
c0012229:	0f 84 ab 00 00 00    	je     c00122da <VAS::~VAS()+0x116>
c001222f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012237:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001223f:	7f 75                	jg     c00122b6 <VAS::~VAS()+0xf2>
c0012241:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012245:	c1 e0 0a             	shl    eax,0xa
c0012248:	89 c2                	mov    edx,eax
c001224a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001224e:	01 d0                	add    eax,edx
c0012250:	c1 e0 0c             	shl    eax,0xc
c0012253:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012257:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001225c:	8b 00                	mov    eax,DWORD PTR [eax]
c001225e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012261:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012267:	83 ec 04             	sub    esp,0x4
c001226a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001226e:	6a 01                	push   0x1
c0012270:	50                   	push   eax
c0012271:	e8 08 fd ff ff       	call   c0011f7e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012276:	83 c4 10             	add    esp,0x10
c0012279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001227d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012281:	8b 00                	mov    eax,DWORD PTR [eax]
c0012283:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001228b:	25 01 04 00 00       	and    eax,0x401
c0012290:	3d 01 04 00 00       	cmp    eax,0x401
c0012295:	75 19                	jne    c00122b0 <VAS::~VAS()+0xec>
c0012297:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001229b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122a0:	83 ec 0c             	sub    esp,0xc
c00122a3:	50                   	push   eax
c00122a4:	e8 b2 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122a9:	83 c4 10             	add    esp,0x10
c00122ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122b0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122b4:	eb 81                	jmp    c0012237 <VAS::~VAS()+0x73>
c00122b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ba:	25 00 04 00 00       	and    eax,0x400
c00122bf:	74 19                	je     c00122da <VAS::~VAS()+0x116>
c00122c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ca:	83 ec 0c             	sub    esp,0xc
c00122cd:	50                   	push   eax
c00122ce:	e8 88 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122d3:	83 c4 10             	add    esp,0x10
c00122d6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122da:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122de:	e9 1b ff ff ff       	jmp    c00121fe <VAS::~VAS()+0x3a>
c00122e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122ea:	83 ec 0c             	sub    esp,0xc
c00122ed:	50                   	push   eax
c00122ee:	e8 d6 fc ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c00122f3:	83 c4 10             	add    esp,0x10
c00122f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122fd:	83 ec 0c             	sub    esp,0xc
c0012300:	50                   	push   eax
c0012301:	e8 55 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001230d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012311:	c1 e0 02             	shl    eax,0x2
c0012314:	83 ec 08             	sub    esp,0x8
c0012317:	50                   	push   eax
c0012318:	68 10 a6 02 c0       	push   0xc002a610
c001231d:	e8 38 0c 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012322:	83 c4 10             	add    esp,0x10
c0012325:	e8 d4 ba 00 00       	call   c001ddfe <unlockScheduler()>
c001232a:	90                   	nop
c001232b:	83 c4 2c             	add    esp,0x2c
c001232e:	c3                   	ret    
c001232f:	90                   	nop

c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012330:	55                   	push   ebp
c0012331:	57                   	push   edi
c0012332:	56                   	push   esi
c0012333:	53                   	push   ebx
c0012334:	83 ec 1c             	sub    esp,0x1c
c0012337:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001233b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001233f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012345:	77 08                	ja     c001234f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012347:	0f 20 d8             	mov    eax,cr3
c001234a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001234d:	75 47                	jne    c0012396 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001234f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012353:	09 d8                	or     eax,ebx
c0012355:	a9 ff 0f 00 00       	test   eax,0xfff
c001235a:	75 57                	jne    c00123b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001235c:	89 de                	mov    esi,ebx
c001235e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012361:	c1 ee 16             	shr    esi,0x16
c0012364:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001236b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001236f:	74 54                	je     c00123c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012371:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012375:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001237b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001237f:	c1 e6 0c             	shl    esi,0xc
c0012382:	c1 eb 0a             	shr    ebx,0xa
c0012385:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001238b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001238e:	83 c4 1c             	add    esp,0x1c
c0012391:	5b                   	pop    ebx
c0012392:	5e                   	pop    esi
c0012393:	5f                   	pop    edi
c0012394:	5d                   	pop    ebp
c0012395:	c3                   	ret    
c0012396:	83 ec 0c             	sub    esp,0xc
c0012399:	68 30 a6 02 c0       	push   0xc002a630
c001239e:	e8 b7 0b 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00123a3:	83 c4 10             	add    esp,0x10
c00123a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123aa:	09 d8                	or     eax,ebx
c00123ac:	a9 ff 0f 00 00       	test   eax,0xfff
c00123b1:	74 a9                	je     c001235c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123b3:	83 ec 0c             	sub    esp,0xc
c00123b6:	68 98 a6 02 c0       	push   0xc002a698
c00123bb:	e8 47 82 00 00       	call   c001a607 <Krnl::panic(char const*)>
c00123c0:	83 c4 10             	add    esp,0x10
c00123c3:	eb 97                	jmp    c001235c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123c9:	e8 17 db ff ff       	call   c000fee5 <Phys::allocatePage()>
c00123ce:	89 c5                	mov    ebp,eax
c00123d0:	e8 09 fa ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c00123d5:	83 ec 0c             	sub    esp,0xc
c00123d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123dc:	6a 01                	push   0x1
c00123de:	e8 60 f7 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c00123e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123ea:	6a 01                	push   0x1
c00123ec:	50                   	push   eax
c00123ed:	55                   	push   ebp
c00123ee:	81 cd 07 04 00 00    	or     ebp,0x407
c00123f4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123f8:	51                   	push   ecx
c00123f9:	e8 26 02 00 00       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123fe:	83 c4 1c             	add    esp,0x1c
c0012401:	68 00 10 00 00       	push   0x1000
c0012406:	6a 00                	push   0x0
c0012408:	50                   	push   eax
c0012409:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001240d:	e8 66 e3 fe ff       	call   c0000778 <memset>
c0012412:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012416:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012419:	e8 ab fb ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001241e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012422:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001242b:	e9 41 ff ff ff       	jmp    c0012371 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012430 <VAS::allocatePages(int, int)>:
c0012430:	55                   	push   ebp
c0012431:	57                   	push   edi
c0012432:	56                   	push   esi
c0012433:	53                   	push   ebx
c0012434:	83 ec 1c             	sub    esp,0x1c
c0012437:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001243b:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012440:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012446:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001244c:	83 e0 01             	and    eax,0x1
c001244f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012453:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012457:	0f 85 cc 00 00 00    	jne    c0012529 <VAS::allocatePages(int, int)+0xf9>
c001245d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012460:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012464:	85 c0                	test   eax,eax
c0012466:	0f 84 a1 00 00 00    	je     c001250d <VAS::allocatePages(int, int)+0xdd>
c001246c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012470:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012474:	c1 e6 0c             	shl    esi,0xc
c0012477:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001247b:	85 c0                	test   eax,eax
c001247d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012480:	7e 33                	jle    c00124b5 <VAS::allocatePages(int, int)+0x85>
c0012482:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012486:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001248a:	81 cd 00 04 00 00    	or     ebp,0x400
c0012490:	e8 50 da ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012495:	55                   	push   ebp
c0012496:	53                   	push   ebx
c0012497:	50                   	push   eax
c0012498:	57                   	push   edi
c0012499:	e8 92 fe ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001249e:	83 c4 10             	add    esp,0x10
c00124a1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124a6:	74 03                	je     c00124ab <VAS::allocatePages(int, int)+0x7b>
c00124a8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124b1:	39 de                	cmp    esi,ebx
c00124b3:	75 db                	jne    c0012490 <VAS::allocatePages(int, int)+0x60>
c00124b5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ba:	75 12                	jne    c00124ce <VAS::allocatePages(int, int)+0x9e>
c00124bc:	0f 20 d8             	mov    eax,cr3
c00124bf:	0f 22 d8             	mov    cr3,eax
c00124c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124c6:	83 c4 1c             	add    esp,0x1c
c00124c9:	5b                   	pop    ebx
c00124ca:	5e                   	pop    esi
c00124cb:	5f                   	pop    edi
c00124cc:	5d                   	pop    ebp
c00124cd:	c3                   	ret    
c00124ce:	c1 ee 0a             	shr    esi,0xa
c00124d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124db:	c1 eb 0a             	shr    ebx,0xa
c00124de:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124e4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124ea:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124f0:	39 c3                	cmp    ebx,eax
c00124f2:	77 ce                	ja     c00124c2 <VAS::allocatePages(int, int)+0x92>
c00124f4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124fd:	39 d8                	cmp    eax,ebx
c00124ff:	73 f3                	jae    c00124f4 <VAS::allocatePages(int, int)+0xc4>
c0012501:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012505:	83 c4 1c             	add    esp,0x1c
c0012508:	5b                   	pop    ebx
c0012509:	5e                   	pop    esi
c001250a:	5f                   	pop    edi
c001250b:	5d                   	pop    ebp
c001250c:	c3                   	ret    
c001250d:	83 ec 0c             	sub    esp,0xc
c0012510:	68 bc a6 02 c0       	push   0xc002a6bc
c0012515:	e8 ed 80 00 00       	call   c001a607 <Krnl::panic(char const*)>
c001251a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001251d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012521:	83 c4 10             	add    esp,0x10
c0012524:	e9 43 ff ff ff       	jmp    c001246c <VAS::allocatePages(int, int)+0x3c>
c0012529:	83 ec 0c             	sub    esp,0xc
c001252c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012530:	e8 0e f6 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0012535:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012541:	0f 87 9b 00 00 00    	ja     c00125e2 <VAS::allocatePages(int, int)+0x1b2>
c0012547:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001254b:	85 d2                	test   edx,edx
c001254d:	7e 3c                	jle    c001258b <VAS::allocatePages(int, int)+0x15b>
c001254f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012553:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012557:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001255b:	c1 e5 0c             	shl    ebp,0xc
c001255e:	81 ce 00 04 00 00    	or     esi,0x400
c0012564:	01 dd                	add    ebp,ebx
c0012566:	e8 7a d9 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001256b:	56                   	push   esi
c001256c:	53                   	push   ebx
c001256d:	50                   	push   eax
c001256e:	57                   	push   edi
c001256f:	e8 bc fd ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012574:	83 c4 10             	add    esp,0x10
c0012577:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001257c:	74 03                	je     c0012581 <VAS::allocatePages(int, int)+0x151>
c001257e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012581:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012587:	39 dd                	cmp    ebp,ebx
c0012589:	75 db                	jne    c0012566 <VAS::allocatePages(int, int)+0x136>
c001258b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012590:	0f 84 26 ff ff ff    	je     c00124bc <VAS::allocatePages(int, int)+0x8c>
c0012596:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001259a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001259e:	89 d3                	mov    ebx,edx
c00125a0:	c1 e0 0c             	shl    eax,0xc
c00125a3:	c1 eb 0a             	shr    ebx,0xa
c00125a6:	01 d0                	add    eax,edx
c00125a8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125ae:	c1 e8 0a             	shr    eax,0xa
c00125b1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125bc:	2d 00 00 40 00       	sub    eax,0x400000
c00125c1:	39 c3                	cmp    ebx,eax
c00125c3:	0f 87 f9 fe ff ff    	ja     c00124c2 <VAS::allocatePages(int, int)+0x92>
c00125c9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125cc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d2:	39 d8                	cmp    eax,ebx
c00125d4:	73 f3                	jae    c00125c9 <VAS::allocatePages(int, int)+0x199>
c00125d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125da:	83 c4 1c             	add    esp,0x1c
c00125dd:	5b                   	pop    ebx
c00125de:	5e                   	pop    esi
c00125df:	5f                   	pop    edi
c00125e0:	5d                   	pop    ebp
c00125e1:	c3                   	ret    
c00125e2:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00125e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125ed:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125f4:	0f 84 4d ff ff ff    	je     c0012547 <VAS::allocatePages(int, int)+0x117>
c00125fa:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012602:	e9 40 ff ff ff       	jmp    c0012547 <VAS::allocatePages(int, int)+0x117>
c0012607:	90                   	nop

c0012608 <VAS::setCPUSpecific(unsigned long)>:
c0012608:	83 ec 0c             	sub    esp,0xc
c001260b:	6a 05                	push   0x5
c001260d:	68 00 00 40 c2       	push   0xc2400000
c0012612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001261a:	e8 11 fd ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001261f:	83 c4 1c             	add    esp,0x1c
c0012622:	c3                   	ret    
c0012623:	90                   	nop

c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012624:	55                   	push   ebp
c0012625:	57                   	push   edi
c0012626:	56                   	push   esi
c0012627:	53                   	push   ebx
c0012628:	83 ec 1c             	sub    esp,0x1c
c001262b:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012630:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012634:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001263a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001263e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012644:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012648:	83 e0 01             	and    eax,0x1
c001264b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001264f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012653:	85 c0                	test   eax,eax
c0012655:	7e 39                	jle    c0012690 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012657:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001265b:	89 f3                	mov    ebx,esi
c001265d:	c1 e0 0c             	shl    eax,0xc
c0012660:	01 f0                	add    eax,esi
c0012662:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012666:	55                   	push   ebp
c0012667:	53                   	push   ebx
c0012668:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001266c:	29 f0                	sub    eax,esi
c001266e:	01 d8                	add    eax,ebx
c0012670:	50                   	push   eax
c0012671:	57                   	push   edi
c0012672:	e8 b9 fc ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012677:	83 c4 10             	add    esp,0x10
c001267a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001267f:	74 03                	je     c0012684 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012681:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012684:	81 c3 00 10 00 00    	add    ebx,0x1000
c001268a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001268e:	75 d6                	jne    c0012666 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012690:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012695:	75 10                	jne    c00126a7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012697:	0f 20 d8             	mov    eax,cr3
c001269a:	0f 22 d8             	mov    cr3,eax
c001269d:	83 c4 1c             	add    esp,0x1c
c00126a0:	89 f0                	mov    eax,esi
c00126a2:	5b                   	pop    ebx
c00126a3:	5e                   	pop    esi
c00126a4:	5f                   	pop    edi
c00126a5:	5d                   	pop    ebp
c00126a6:	c3                   	ret    
c00126a7:	89 f3                	mov    ebx,esi
c00126a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126ad:	c1 eb 0a             	shr    ebx,0xa
c00126b0:	c1 e0 0c             	shl    eax,0xc
c00126b3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126b9:	01 f0                	add    eax,esi
c00126bb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126c1:	c1 e8 0a             	shr    eax,0xa
c00126c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126c9:	2d 00 00 40 00       	sub    eax,0x400000
c00126ce:	39 c3                	cmp    ebx,eax
c00126d0:	77 cb                	ja     c001269d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126db:	39 d8                	cmp    eax,ebx
c00126dd:	73 f3                	jae    c00126d2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126df:	83 c4 1c             	add    esp,0x1c
c00126e2:	89 f0                	mov    eax,esi
c00126e4:	5b                   	pop    ebx
c00126e5:	5e                   	pop    esi
c00126e6:	5f                   	pop    edi
c00126e7:	5d                   	pop    ebp
c00126e8:	c3                   	ret    
c00126e9:	90                   	nop

c00126ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126ea:	55                   	push   ebp
c00126eb:	57                   	push   edi
c00126ec:	56                   	push   esi
c00126ed:	53                   	push   ebx
c00126ee:	83 ec 1c             	sub    esp,0x1c
c00126f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00126f9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00126fd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012701:	a9 ff 0f 00 00       	test   eax,0xfff
c0012706:	75 4a                	jne    c0012752 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012708:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001270c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001270f:	c1 eb 16             	shr    ebx,0x16
c0012712:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012719:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001271d:	74 4d                	je     c001276c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001271f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012723:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012727:	c1 e8 0a             	shr    eax,0xa
c001272a:	80 fa 01             	cmp    dl,0x1
c001272d:	19 d2                	sbb    edx,edx
c001272f:	c1 e3 0c             	shl    ebx,0xc
c0012732:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012736:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001273c:	25 fc 0f 00 00       	and    eax,0xffc
c0012741:	01 d8                	add    eax,ebx
c0012743:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001274a:	83 c4 1c             	add    esp,0x1c
c001274d:	5b                   	pop    ebx
c001274e:	5e                   	pop    esi
c001274f:	5f                   	pop    edi
c0012750:	5d                   	pop    ebp
c0012751:	c3                   	ret    
c0012752:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012756:	83 ec 0c             	sub    esp,0xc
c0012759:	68 e8 a6 02 c0       	push   0xc002a6e8
c001275e:	e8 a4 7e 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0012763:	83 c4 10             	add    esp,0x10
c0012766:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001276a:	eb 9c                	jmp    c0012708 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001276c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012770:	e8 70 d7 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012775:	89 c5                	mov    ebp,eax
c0012777:	e8 62 f6 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001277c:	83 ec 0c             	sub    esp,0xc
c001277f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012783:	6a 01                	push   0x1
c0012785:	e8 b9 f3 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c001278a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012791:	6a 01                	push   0x1
c0012793:	50                   	push   eax
c0012794:	55                   	push   ebp
c0012795:	81 cd 07 04 00 00    	or     ebp,0x407
c001279b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001279f:	51                   	push   ecx
c00127a0:	e8 7f fe ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127a5:	83 c4 1c             	add    esp,0x1c
c00127a8:	68 00 10 00 00       	push   0x1000
c00127ad:	6a 00                	push   0x0
c00127af:	50                   	push   eax
c00127b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127b4:	e8 bf df fe ff       	call   c0000778 <memset>
c00127b9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127bd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127c0:	e8 04 f8 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c00127c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127c8:	83 c4 10             	add    esp,0x10
c00127cb:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127d2:	e9 48 ff ff ff       	jmp    c001271f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00127d7:	90                   	nop

c00127d8 <VAS::VAS(bool)>:
c00127d8:	53                   	push   ebx
c00127d9:	83 ec 28             	sub    esp,0x28
c00127dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00127fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127fe:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012802:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012805:	e8 db d6 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001280a:	89 c2                	mov    edx,eax
c001280c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012810:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012813:	e8 c6 f5 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0012818:	89 c3                	mov    ebx,eax
c001281a:	83 ec 0c             	sub    esp,0xc
c001281d:	6a 01                	push   0x1
c001281f:	e8 1f f3 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0012824:	83 c4 10             	add    esp,0x10
c0012827:	89 c2                	mov    edx,eax
c0012829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012830:	83 ec 0c             	sub    esp,0xc
c0012833:	6a 03                	push   0x3
c0012835:	6a 01                	push   0x1
c0012837:	52                   	push   edx
c0012838:	50                   	push   eax
c0012839:	53                   	push   ebx
c001283a:	e8 e5 fd ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001283f:	83 c4 20             	add    esp,0x20
c0012842:	89 c2                	mov    edx,eax
c0012844:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012848:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001284b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012853:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001285b:	7f 1c                	jg     c0012879 <VAS::VAS(bool)+0xa1>
c001285d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012861:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012864:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012868:	c1 e2 02             	shl    edx,0x2
c001286b:	01 d0                	add    eax,edx
c001286d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012873:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012877:	eb da                	jmp    c0012853 <VAS::VAS(bool)+0x7b>
c0012879:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012881:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012889:	7f 7a                	jg     c0012905 <VAS::VAS(bool)+0x12d>
c001288b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001288f:	2d 00 02 00 00       	sub    eax,0x200
c0012894:	c1 e0 0c             	shl    eax,0xc
c0012897:	83 c8 03             	or     eax,0x3
c001289a:	89 c2                	mov    edx,eax
c001289c:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00128a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ad:	83 e0 10             	and    eax,0x10
c00128b0:	84 c0                	test   al,al
c00128b2:	74 07                	je     c00128bb <VAS::VAS(bool)+0xe3>
c00128b4:	b8 00 01 00 00       	mov    eax,0x100
c00128b9:	eb 05                	jmp    c00128c0 <VAS::VAS(bool)+0xe8>
c00128bb:	b8 00 00 00 00       	mov    eax,0x0
c00128c0:	09 d0                	or     eax,edx
c00128c2:	89 c1                	mov    ecx,eax
c00128c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128cf:	c1 e2 02             	shl    edx,0x2
c00128d2:	01 d0                	add    eax,edx
c00128d4:	89 ca                	mov    edx,ecx
c00128d6:	89 10                	mov    DWORD PTR [eax],edx
c00128d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128dc:	2d 40 03 00 00       	sub    eax,0x340
c00128e1:	83 f8 7f             	cmp    eax,0x7f
c00128e4:	77 16                	ja     c00128fc <VAS::VAS(bool)+0x124>
c00128e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f1:	c1 e2 02             	shl    edx,0x2
c00128f4:	01 d0                	add    eax,edx
c00128f6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128fc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012900:	e9 7c ff ff ff       	jmp    c0012881 <VAS::VAS(bool)+0xa9>
c0012905:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001290a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012910:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012916:	83 e0 10             	and    eax,0x10
c0012919:	84 c0                	test   al,al
c001291b:	74 07                	je     c0012924 <VAS::VAS(bool)+0x14c>
c001291d:	b8 03 41 00 00       	mov    eax,0x4103
c0012922:	eb 05                	jmp    c0012929 <VAS::VAS(bool)+0x151>
c0012924:	b8 03 40 00 00       	mov    eax,0x4003
c0012929:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001292d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012930:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012936:	89 02                	mov    DWORD PTR [edx],eax
c0012938:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001293d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012943:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012949:	83 ec 08             	sub    esp,0x8
c001294c:	50                   	push   eax
c001294d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012951:	e8 b2 fc ff ff       	call   c0012608 <VAS::setCPUSpecific(unsigned long)>
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001295d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012960:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012965:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001296b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012971:	83 e0 10             	and    eax,0x10
c0012974:	84 c0                	test   al,al
c0012976:	74 07                	je     c001297f <VAS::VAS(bool)+0x1a7>
c0012978:	b8 00 01 00 00       	mov    eax,0x100
c001297d:	eb 05                	jmp    c0012984 <VAS::VAS(bool)+0x1ac>
c001297f:	b8 00 00 00 00       	mov    eax,0x0
c0012984:	09 c2                	or     edx,eax
c0012986:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001298a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001298d:	05 fc 0f 00 00       	add    eax,0xffc
c0012992:	83 ca 03             	or     edx,0x3
c0012995:	89 10                	mov    DWORD PTR [eax],edx
c0012997:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001299c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a2:	83 ec 0c             	sub    esp,0xc
c00129a5:	50                   	push   eax
c00129a6:	e8 c1 1c 00 00       	call   c001466c <Device::getName()>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	83 ec 08             	sub    esp,0x8
c00129b1:	68 3f a8 02 c0       	push   0xc002a83f
c00129b6:	50                   	push   eax
c00129b7:	e8 04 df fe ff       	call   c00008c0 <strcmp>
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	85 c0                	test   eax,eax
c00129c1:	0f 94 c0             	sete   al
c00129c4:	84 c0                	test   al,al
c00129c6:	74 70                	je     c0012a38 <VAS::VAS(bool)+0x260>
c00129c8:	e8 12 b4 00 00       	call   c001dddf <disableIRQs()>
c00129cd:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00129d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129d8:	05 7c 09 00 00       	add    eax,0x97c
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	50                   	push   eax
c00129e1:	e8 d6 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129ee:	89 c3                	mov    ebx,eax
c00129f0:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00129f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129fb:	05 7c 09 00 00       	add    eax,0x97c
c0012a00:	83 ec 0c             	sub    esp,0xc
c0012a03:	50                   	push   eax
c0012a04:	e8 b3 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a09:	83 c4 10             	add    esp,0x10
c0012a0c:	83 ec 08             	sub    esp,0x8
c0012a0f:	50                   	push   eax
c0012a10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a14:	e8 91 f5 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a23:	6a 11                	push   0x11
c0012a25:	53                   	push   ebx
c0012a26:	50                   	push   eax
c0012a27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a2b:	e8 00 f9 ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	e8 b5 b3 00 00       	call   c001dded <enableIRQs()>
c0012a38:	90                   	nop
c0012a39:	83 c4 28             	add    esp,0x28
c0012a3c:	5b                   	pop    ebx
c0012a3d:	c3                   	ret    

c0012a3e <VAS::evict(unsigned long)>:
c0012a3e:	55                   	push   ebp
c0012a3f:	57                   	push   edi
c0012a40:	56                   	push   esi
c0012a41:	53                   	push   ebx
c0012a42:	83 ec 0c             	sub    esp,0xc
c0012a45:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012a49:	e8 36 f2 ff ff       	call   c0011c84 <Virt::allocateSwapfilePage()>
c0012a4e:	89 c7                	mov    edi,eax
c0012a50:	a1 0c d4 02 c0       	mov    eax,ds:0xc002d40c
c0012a55:	85 c0                	test   eax,eax
c0012a57:	7e 3d                	jle    c0012a96 <VAS::evict(unsigned long)+0x58>
c0012a59:	89 ee                	mov    esi,ebp
c0012a5b:	31 db                	xor    ebx,ebx
c0012a5d:	83 ec 0c             	sub    esp,0xc
c0012a60:	57                   	push   edi
c0012a61:	e8 0c f2 ff ff       	call   c0011c72 <Virt::swapIDToSector(unsigned long)>
c0012a66:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a69:	01 d8                	add    eax,ebx
c0012a6b:	6a 01                	push   0x1
c0012a6d:	31 d2                	xor    edx,edx
c0012a6f:	43                   	inc    ebx
c0012a70:	52                   	push   edx
c0012a71:	81 c6 00 02 00 00    	add    esi,0x200
c0012a77:	50                   	push   eax
c0012a78:	0f be 05 18 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d418
c0012a7f:	ff 34 85 7c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1684]
c0012a86:	e8 57 3d 00 00       	call   c00167e2 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a8b:	83 c4 20             	add    esp,0x20
c0012a8e:	39 1d 0c d4 02 c0    	cmp    DWORD PTR ds:0xc002d40c,ebx
c0012a94:	7f c7                	jg     c0012a5d <VAS::evict(unsigned long)+0x1f>
c0012a96:	83 ec 08             	sub    esp,0x8
c0012a99:	c1 e7 0b             	shl    edi,0xb
c0012a9c:	55                   	push   ebp
c0012a9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aa1:	e8 04 f5 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012aa6:	83 c4 0c             	add    esp,0xc
c0012aa9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aab:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ab1:	09 d7                	or     edi,edx
c0012ab3:	89 38                	mov    DWORD PTR [eax],edi
c0012ab5:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0012aba:	40                   	inc    eax
c0012abb:	a3 e4 e5 02 c0       	mov    ds:0xc002e5e4,eax
c0012ac0:	0f 20 da             	mov    edx,cr3
c0012ac3:	0f 22 da             	mov    cr3,edx
c0012ac6:	50                   	push   eax
c0012ac7:	55                   	push   ebp
c0012ac8:	68 4d a8 02 c0       	push   0xc002a84d
c0012acd:	e8 88 04 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012ad2:	83 c4 1c             	add    esp,0x1c
c0012ad5:	5b                   	pop    ebx
c0012ad6:	5e                   	pop    esi
c0012ad7:	5f                   	pop    edi
c0012ad8:	5d                   	pop    ebp
c0012ad9:	c3                   	ret    

c0012ada <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012ada:	55                   	push   ebp
c0012adb:	57                   	push   edi
c0012adc:	56                   	push   esi
c0012add:	53                   	push   ebx
c0012ade:	83 ec 14             	sub    esp,0x14
c0012ae1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae5:	68 62 a8 02 c0       	push   0xc002a862
c0012aea:	e8 6b 04 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012aef:	c7 04 24 6c a8 02 c0 	mov    DWORD PTR [esp],0xc002a86c
c0012af6:	e8 5f 04 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012afb:	c7 04 24 70 a8 02 c0 	mov    DWORD PTR [esp],0xc002a870
c0012b02:	e8 53 04 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012b07:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012b0b:	c7 04 24 74 a8 02 c0 	mov    DWORD PTR [esp],0xc002a874
c0012b12:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012b18:	e8 3d 04 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012b1d:	c7 04 24 78 a8 02 c0 	mov    DWORD PTR [esp],0xc002a878
c0012b24:	e8 31 04 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012b29:	83 c4 10             	add    esp,0x10
c0012b2c:	85 ff                	test   edi,edi
c0012b2e:	74 4d                	je     c0012b7d <VAS::tryLoadBackOffDisk(unsigned long)+0xa3>
c0012b30:	83 ec 08             	sub    esp,0x8
c0012b33:	57                   	push   edi
c0012b34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b38:	e8 6d f4 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012b3d:	c7 04 24 8d a8 02 c0 	mov    DWORD PTR [esp],0xc002a88d
c0012b44:	89 c3                	mov    ebx,eax
c0012b46:	e8 0f 04 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012b4b:	83 c4 10             	add    esp,0x10
c0012b4e:	85 db                	test   ebx,ebx
c0012b50:	74 05                	je     c0012b57 <VAS::tryLoadBackOffDisk(unsigned long)+0x7d>
c0012b52:	f6 03 01             	test   BYTE PTR [ebx],0x1
c0012b55:	74 40                	je     c0012b97 <VAS::tryLoadBackOffDisk(unsigned long)+0xbd>
c0012b57:	83 ec 0c             	sub    esp,0xc
c0012b5a:	68 ca a8 02 c0       	push   0xc002a8ca
c0012b5f:	e8 f6 03 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012b64:	c7 04 24 ce a8 02 c0 	mov    DWORD PTR [esp],0xc002a8ce
c0012b6b:	e8 ea 03 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012b70:	83 c4 10             	add    esp,0x10
c0012b73:	31 c0                	xor    eax,eax
c0012b75:	83 c4 0c             	add    esp,0xc
c0012b78:	5b                   	pop    ebx
c0012b79:	5e                   	pop    esi
c0012b7a:	5f                   	pop    edi
c0012b7b:	5d                   	pop    ebp
c0012b7c:	c3                   	ret    
c0012b7d:	83 ec 0c             	sub    esp,0xc
c0012b80:	68 7c a8 02 c0       	push   0xc002a87c
c0012b85:	e8 d0 03 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012b8a:	83 c4 10             	add    esp,0x10
c0012b8d:	31 c0                	xor    eax,eax
c0012b8f:	83 c4 0c             	add    esp,0xc
c0012b92:	5b                   	pop    ebx
c0012b93:	5e                   	pop    esi
c0012b94:	5f                   	pop    edi
c0012b95:	5d                   	pop    ebp
c0012b96:	c3                   	ret    
c0012b97:	83 ec 0c             	sub    esp,0xc
c0012b9a:	68 91 a8 02 c0       	push   0xc002a891
c0012b9f:	e8 b6 03 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012ba4:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012ba6:	e8 3a d3 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012bab:	c1 ed 0b             	shr    ebp,0xb
c0012bae:	89 c6                	mov    esi,eax
c0012bb0:	c7 04 24 95 a8 02 c0 	mov    DWORD PTR [esp],0xc002a895
c0012bb7:	e8 9e 03 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012bbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bbe:	25 ff 0f 00 00       	and    eax,0xfff
c0012bc3:	09 f0                	or     eax,esi
c0012bc5:	0d 01 08 00 00       	or     eax,0x801
c0012bca:	89 03                	mov    DWORD PTR [ebx],eax
c0012bcc:	c7 04 24 99 a8 02 c0 	mov    DWORD PTR [esp],0xc002a899
c0012bd3:	e8 82 03 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012bd8:	0f 20 d8             	mov    eax,cr3
c0012bdb:	0f 22 d8             	mov    cr3,eax
c0012bde:	a1 0c d4 02 c0       	mov    eax,ds:0xc002d40c
c0012be3:	83 c4 10             	add    esp,0x10
c0012be6:	85 c0                	test   eax,eax
c0012be8:	7e 56                	jle    c0012c40 <VAS::tryLoadBackOffDisk(unsigned long)+0x166>
c0012bea:	89 fe                	mov    esi,edi
c0012bec:	31 db                	xor    ebx,ebx
c0012bee:	83 ec 0c             	sub    esp,0xc
c0012bf1:	55                   	push   ebp
c0012bf2:	e8 7b f0 ff ff       	call   c0011c72 <Virt::swapIDToSector(unsigned long)>
c0012bf7:	83 c4 0c             	add    esp,0xc
c0012bfa:	01 d8                	add    eax,ebx
c0012bfc:	50                   	push   eax
c0012bfd:	56                   	push   esi
c0012bfe:	68 0c a7 02 c0       	push   0xc002a70c
c0012c03:	e8 52 03 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012c08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c0b:	e8 62 f0 ff ff       	call   c0011c72 <Virt::swapIDToSector(unsigned long)>
c0012c10:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c13:	01 d8                	add    eax,ebx
c0012c15:	6a 01                	push   0x1
c0012c17:	31 d2                	xor    edx,edx
c0012c19:	43                   	inc    ebx
c0012c1a:	52                   	push   edx
c0012c1b:	81 c6 00 02 00 00    	add    esi,0x200
c0012c21:	50                   	push   eax
c0012c22:	0f be 05 18 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d418
c0012c29:	ff 34 85 7c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1684]
c0012c30:	e8 41 3b 00 00       	call   c0016776 <LogicalDisk::read(unsigned long long, int, void*)>
c0012c35:	83 c4 20             	add    esp,0x20
c0012c38:	39 1d 0c d4 02 c0    	cmp    DWORD PTR ds:0xc002d40c,ebx
c0012c3e:	7f ae                	jg     c0012bee <VAS::tryLoadBackOffDisk(unsigned long)+0x114>
c0012c40:	83 ec 0c             	sub    esp,0xc
c0012c43:	68 9d a8 02 c0       	push   0xc002a89d
c0012c48:	e8 0d 03 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012c4d:	83 c4 0c             	add    esp,0xc
c0012c50:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0012c55:	48                   	dec    eax
c0012c56:	50                   	push   eax
c0012c57:	a3 e4 e5 02 c0       	mov    ds:0xc002e5e4,eax
c0012c5c:	57                   	push   edi
c0012c5d:	68 a1 a8 02 c0       	push   0xc002a8a1
c0012c62:	e8 f3 02 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012c67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c6a:	e8 e5 ef ff ff       	call   c0011c54 <Virt::freeSwapfilePage(unsigned long)>
c0012c6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c73:	83 c4 10             	add    esp,0x10
c0012c76:	25 ff 0f 00 00       	and    eax,0xfff
c0012c7b:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012c80:	77 07                	ja     c0012c89 <VAS::tryLoadBackOffDisk(unsigned long)+0x1af>
c0012c82:	b0 01                	mov    al,0x1
c0012c84:	e9 ec fe ff ff       	jmp    c0012b75 <VAS::tryLoadBackOffDisk(unsigned long)+0x9b>
c0012c89:	83 ec 0c             	sub    esp,0xc
c0012c8c:	68 b6 a8 02 c0       	push   0xc002a8b6
c0012c91:	e8 71 79 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0012c96:	83 c4 10             	add    esp,0x10
c0012c99:	b0 01                	mov    al,0x1
c0012c9b:	e9 d5 fe ff ff       	jmp    c0012b75 <VAS::tryLoadBackOffDisk(unsigned long)+0x9b>

c0012ca0 <VAS::scanForEviction()>:
c0012ca0:	56                   	push   esi
c0012ca1:	53                   	push   ebx
c0012ca2:	53                   	push   ebx
c0012ca3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ca7:	8b 5e 10             	mov    ebx,DWORD PTR [esi+0x10]
c0012caa:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012cb0:	75 0e                	jne    c0012cc0 <VAS::scanForEviction()+0x20>
c0012cb2:	89 da                	mov    edx,ebx
c0012cb4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012cb7:	c1 ea 16             	shr    edx,0x16
c0012cba:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012cbe:	74 48                	je     c0012d08 <VAS::scanForEviction()+0x68>
c0012cc0:	53                   	push   ebx
c0012cc1:	56                   	push   esi
c0012cc2:	e8 e3 f2 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012cc7:	5a                   	pop    edx
c0012cc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cca:	59                   	pop    ecx
c0012ccb:	89 c2                	mov    edx,eax
c0012ccd:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012cd3:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012cd9:	74 3d                	je     c0012d18 <VAS::scanForEviction()+0x78>
c0012cdb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012ce1:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012ce7:	76 2a                	jbe    c0012d13 <VAS::scanForEviction()+0x73>
c0012ce9:	31 db                	xor    ebx,ebx
c0012ceb:	c7 46 10 00 00 00 00 	mov    DWORD PTR [esi+0x10],0x0
c0012cf2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012cf8:	75 c6                	jne    c0012cc0 <VAS::scanForEviction()+0x20>
c0012cfa:	89 da                	mov    edx,ebx
c0012cfc:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012cff:	c1 ea 16             	shr    edx,0x16
c0012d02:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012d06:	75 b8                	jne    c0012cc0 <VAS::scanForEviction()+0x20>
c0012d08:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012d0e:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c0012d11:	eb 97                	jmp    c0012caa <VAS::scanForEviction()+0xa>
c0012d13:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c0012d16:	eb 92                	jmp    c0012caa <VAS::scanForEviction()+0xa>
c0012d18:	a8 01                	test   al,0x1
c0012d1a:	74 bf                	je     c0012cdb <VAS::scanForEviction()+0x3b>
c0012d1c:	83 ec 08             	sub    esp,0x8
c0012d1f:	53                   	push   ebx
c0012d20:	56                   	push   esi
c0012d21:	e8 18 fd ff ff       	call   c0012a3e <VAS::evict(unsigned long)>
c0012d26:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012d29:	8d 90 00 10 00 00    	lea    edx,[eax+0x1000]
c0012d2f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0012d32:	83 c4 14             	add    esp,0x14
c0012d35:	5b                   	pop    ebx
c0012d36:	5e                   	pop    esi
c0012d37:	c3                   	ret    

c0012d38 <mapVASFirstTime>:
c0012d38:	55                   	push   ebp
c0012d39:	57                   	push   edi
c0012d3a:	56                   	push   esi
c0012d3b:	53                   	push   ebx
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d44:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d47:	4a                   	dec    edx
c0012d48:	0f 84 8e 00 00 00    	je     c0012ddc <mapVASFirstTime+0xa4>
c0012d4e:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d51:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d54:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d59:	c1 e5 15             	shl    ebp,0x15
c0012d5c:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d61:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d67:	29 eb                	sub    ebx,ebp
c0012d69:	29 ee                	sub    esi,ebp
c0012d6b:	e8 75 d1 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012d70:	83 ec 0c             	sub    esp,0xc
c0012d73:	68 03 04 00 00       	push   0x403
c0012d78:	6a 01                	push   0x1
c0012d7a:	53                   	push   ebx
c0012d7b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d81:	50                   	push   eax
c0012d82:	57                   	push   edi
c0012d83:	e8 9c f8 ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d88:	83 c4 20             	add    esp,0x20
c0012d8b:	39 f3                	cmp    ebx,esi
c0012d8d:	75 dc                	jne    c0012d6b <mapVASFirstTime+0x33>
c0012d8f:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d94:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d99:	29 ee                	sub    esi,ebp
c0012d9b:	29 e8                	sub    eax,ebp
c0012d9d:	89 c5                	mov    ebp,eax
c0012d9f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012da3:	19 db                	sbb    ebx,ebx
c0012da5:	e8 3b d1 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012daa:	83 e3 04             	and    ebx,0x4
c0012dad:	83 ec 0c             	sub    esp,0xc
c0012db0:	81 c3 03 04 00 00    	add    ebx,0x403
c0012db6:	53                   	push   ebx
c0012db7:	6a 01                	push   0x1
c0012db9:	56                   	push   esi
c0012dba:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012dc0:	50                   	push   eax
c0012dc1:	57                   	push   edi
c0012dc2:	e8 5d f8 ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dc7:	83 c4 20             	add    esp,0x20
c0012dca:	39 f5                	cmp    ebp,esi
c0012dcc:	75 d1                	jne    c0012d9f <mapVASFirstTime+0x67>
c0012dce:	0f 20 d8             	mov    eax,cr3
c0012dd1:	0f 22 d8             	mov    cr3,eax
c0012dd4:	83 c4 0c             	add    esp,0xc
c0012dd7:	5b                   	pop    ebx
c0012dd8:	5e                   	pop    esi
c0012dd9:	5f                   	pop    edi
c0012dda:	5d                   	pop    ebp
c0012ddb:	c3                   	ret    
c0012ddc:	83 ec 0c             	sub    esp,0xc
c0012ddf:	68 d2 a8 02 c0       	push   0xc002a8d2
c0012de4:	e8 71 01 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012de9:	83 c4 10             	add    esp,0x10
c0012dec:	83 c4 0c             	add    esp,0xc
c0012def:	5b                   	pop    ebx
c0012df0:	5e                   	pop    esi
c0012df1:	5f                   	pop    edi
c0012df2:	5d                   	pop    ebp
c0012df3:	c3                   	ret    

c0012df4 <__cxa_atexit>:
c0012df4:	31 c0                	xor    eax,eax
c0012df6:	c3                   	ret    

c0012df7 <__cxa_finalize>:
c0012df7:	c3                   	ret    

c0012df8 <__stack_chk_fail>:
c0012df8:	55                   	push   ebp
c0012df9:	89 e5                	mov    ebp,esp
c0012dfb:	83 ec 14             	sub    esp,0x14
c0012dfe:	68 eb a8 02 c0       	push   0xc002a8eb
c0012e03:	e8 52 01 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012e08:	58                   	pop    eax
c0012e09:	5a                   	pop    edx
c0012e0a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e0d:	68 3b a9 02 c0       	push   0xc002a93b
c0012e12:	e8 43 01 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012e17:	59                   	pop    ecx
c0012e18:	58                   	pop    eax
c0012e19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e1c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e1f:	68 3b a9 02 c0       	push   0xc002a93b
c0012e24:	e8 31 01 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012e29:	5a                   	pop    edx
c0012e2a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e2d:	59                   	pop    ecx
c0012e2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e30:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e33:	68 3b a9 02 c0       	push   0xc002a93b
c0012e38:	e8 1d 01 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012e3d:	5a                   	pop    edx
c0012e3e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e41:	59                   	pop    ecx
c0012e42:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e46:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e49:	68 3b a9 02 c0       	push   0xc002a93b
c0012e4e:	e8 07 01 00 00       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0012e53:	c7 04 24 43 a9 02 c0 	mov    DWORD PTR [esp],0xc002a943
c0012e5a:	e8 a8 77 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0012e5f:	83 c4 10             	add    esp,0x10
c0012e62:	c9                   	leave  
c0012e63:	c3                   	ret    

c0012e64 <__cxa_pure_virtual>:
c0012e64:	83 ec 18             	sub    esp,0x18
c0012e67:	68 5b a9 02 c0       	push   0xc002a95b
c0012e6c:	e8 96 77 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0012e71:	83 c4 1c             	add    esp,0x1c
c0012e74:	c3                   	ret    

c0012e75 <operator new[](unsigned long)>:
c0012e75:	e9 c9 c9 ff ff       	jmp    c000f843 <malloc>

c0012e7a <operator delete(void*, unsigned long)>:
c0012e7a:	e9 e4 c9 ff ff       	jmp    c000f863 <rfree>

c0012e7f <operator delete[](void*)>:
c0012e7f:	e9 df c9 ff ff       	jmp    c000f863 <rfree>

c0012e84 <operator delete[](void*, unsigned long)>:
c0012e84:	e9 da c9 ff ff       	jmp    c000f863 <rfree>

c0012e89 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e89:	57                   	push   edi
c0012e8a:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e8f:	56                   	push   esi
c0012e90:	be 70 a9 02 c0       	mov    esi,0xc002a970
c0012e95:	53                   	push   ebx
c0012e96:	83 ec 40             	sub    esp,0x40
c0012e99:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e9d:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012ea1:	fc                   	cld    
c0012ea2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ea4:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ea8:	83 f9 3e             	cmp    ecx,0x3e
c0012eab:	7e 05                	jle    c0012eb2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012ead:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012eb2:	89 df                	mov    edi,ebx
c0012eb4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012eb8:	eb 02                	jmp    c0012ebc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012eba:	89 c7                	mov    edi,eax
c0012ebc:	31 d2                	xor    edx,edx
c0012ebe:	46                   	inc    esi
c0012ebf:	89 f8                	mov    eax,edi
c0012ec1:	f7 f1                	div    ecx
c0012ec3:	39 cf                	cmp    edi,ecx
c0012ec5:	73 f3                	jae    c0012eba <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012ec7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012eca:	eb 02                	jmp    c0012ece <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ecc:	89 c3                	mov    ebx,eax
c0012ece:	31 d2                	xor    edx,edx
c0012ed0:	4e                   	dec    esi
c0012ed1:	89 d8                	mov    eax,ebx
c0012ed3:	f7 f1                	div    ecx
c0012ed5:	39 cb                	cmp    ebx,ecx
c0012ed7:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012edb:	88 16                	mov    BYTE PTR [esi],dl
c0012edd:	73 ed                	jae    c0012ecc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012edf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ee3:	83 c4 40             	add    esp,0x40
c0012ee6:	5b                   	pop    ebx
c0012ee7:	5e                   	pop    esi
c0012ee8:	5f                   	pop    edi
c0012ee9:	c3                   	ret    

c0012eea <Dbg::logc(char)>:
c0012eea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012eee:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ef3:	ec                   	in     al,dx
c0012ef4:	a8 20                	test   al,0x20
c0012ef6:	74 fb                	je     c0012ef3 <Dbg::logc(char)+0x9>
c0012ef8:	ba f8 03 00 00       	mov    edx,0x3f8
c0012efd:	88 c8                	mov    al,cl
c0012eff:	ee                   	out    dx,al
c0012f00:	c3                   	ret    

c0012f01 <Dbg::logs(char*)>:
c0012f01:	53                   	push   ebx
c0012f02:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f09:	84 c0                	test   al,al
c0012f0b:	74 0f                	je     c0012f1c <Dbg::logs(char*)+0x1b>
c0012f0d:	50                   	push   eax
c0012f0e:	43                   	inc    ebx
c0012f0f:	e8 d6 ff ff ff       	call   c0012eea <Dbg::logc(char)>
c0012f14:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f17:	5a                   	pop    edx
c0012f18:	84 c0                	test   al,al
c0012f1a:	75 f1                	jne    c0012f0d <Dbg::logs(char*)+0xc>
c0012f1c:	5b                   	pop    ebx
c0012f1d:	c3                   	ret    

c0012f1e <Dbg::logWriteInt(unsigned int)>:
c0012f1e:	83 ec 10             	sub    esp,0x10
c0012f21:	6a 0a                	push   0xa
c0012f23:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f27:	50                   	push   eax
c0012f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f2c:	e8 58 ff ff ff       	call   c0012e89 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f31:	50                   	push   eax
c0012f32:	e8 ca ff ff ff       	call   c0012f01 <Dbg::logs(char*)>
c0012f37:	83 c4 20             	add    esp,0x20
c0012f3a:	c3                   	ret    

c0012f3b <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f3b:	83 ec 10             	sub    esp,0x10
c0012f3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f46:	50                   	push   eax
c0012f47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4b:	e8 39 ff ff ff       	call   c0012e89 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f50:	50                   	push   eax
c0012f51:	e8 ab ff ff ff       	call   c0012f01 <Dbg::logs(char*)>
c0012f56:	83 c4 20             	add    esp,0x20
c0012f59:	c3                   	ret    

c0012f5a <Dbg::kprintf(char const*, ...)>:
c0012f5a:	55                   	push   ebp
c0012f5b:	57                   	push   edi
c0012f5c:	56                   	push   esi
c0012f5d:	53                   	push   ebx
c0012f5e:	83 ec 0c             	sub    esp,0xc
c0012f61:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f65:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f6d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f70:	84 c0                	test   al,al
c0012f72:	74 4a                	je     c0012fbe <Dbg::kprintf(char const*, ...)+0x64>
c0012f74:	31 db                	xor    ebx,ebx
c0012f76:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f79:	3c 25                	cmp    al,0x25
c0012f7b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f7e:	0f 85 e4 00 00 00    	jne    c0013068 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f84:	83 c3 02             	add    ebx,0x2
c0012f87:	8a 07                	mov    al,BYTE PTR [edi]
c0012f89:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f8c:	83 e8 25             	sub    eax,0x25
c0012f8f:	3c 53                	cmp    al,0x53
c0012f91:	0f 87 ba 00 00 00    	ja     c0013051 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f97:	0f b6 c0             	movzx  eax,al
c0012f9a:	ff 24 85 b0 a9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5650]
c0012fa1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fa5:	89 c8                	mov    eax,ecx
c0012fa7:	83 c1 04             	add    ecx,0x4
c0012faa:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fae:	ff 30                	push   DWORD PTR [eax]
c0012fb0:	e8 4c ff ff ff       	call   c0012f01 <Dbg::logs(char*)>
c0012fb5:	58                   	pop    eax
c0012fb6:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012fba:	84 c0                	test   al,al
c0012fbc:	75 b8                	jne    c0012f76 <Dbg::kprintf(char const*, ...)+0x1c>
c0012fbe:	83 c4 0c             	add    esp,0xc
c0012fc1:	5b                   	pop    ebx
c0012fc2:	5e                   	pop    esi
c0012fc3:	5f                   	pop    edi
c0012fc4:	5d                   	pop    ebp
c0012fc5:	c3                   	ret    
c0012fc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fca:	89 d0                	mov    eax,edx
c0012fcc:	83 c2 04             	add    edx,0x4
c0012fcf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fd3:	ff 30                	push   DWORD PTR [eax]
c0012fd5:	e8 44 ff ff ff       	call   c0012f1e <Dbg::logWriteInt(unsigned int)>
c0012fda:	58                   	pop    eax
c0012fdb:	eb d9                	jmp    c0012fb6 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fdd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fe1:	89 d0                	mov    eax,edx
c0012fe3:	83 c2 04             	add    edx,0x4
c0012fe6:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fe9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fed:	50                   	push   eax
c0012fee:	e8 f7 fe ff ff       	call   c0012eea <Dbg::logc(char)>
c0012ff3:	58                   	pop    eax
c0012ff4:	eb c0                	jmp    c0012fb6 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ffa:	89 c8                	mov    eax,ecx
c0012ffc:	83 c1 04             	add    ecx,0x4
c0012fff:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013003:	ff 30                	push   DWORD PTR [eax]
c0013005:	e8 14 ff ff ff       	call   c0012f1e <Dbg::logWriteInt(unsigned int)>
c001300a:	5f                   	pop    edi
c001300b:	eb a9                	jmp    c0012fb6 <Dbg::kprintf(char const*, ...)+0x5c>
c001300d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013011:	89 c8                	mov    eax,ecx
c0013013:	83 c1 04             	add    ecx,0x4
c0013016:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001301a:	6a 10                	push   0x10
c001301c:	ff 30                	push   DWORD PTR [eax]
c001301e:	e8 18 ff ff ff       	call   c0012f3b <Dbg::logWriteIntBase(unsigned int, int)>
c0013023:	59                   	pop    ecx
c0013024:	5f                   	pop    edi
c0013025:	eb 8f                	jmp    c0012fb6 <Dbg::kprintf(char const*, ...)+0x5c>
c0013027:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001302b:	89 d0                	mov    eax,edx
c001302d:	83 c2 08             	add    edx,0x8
c0013030:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013034:	6a 10                	push   0x10
c0013036:	ff 30                	push   DWORD PTR [eax]
c0013038:	e8 fe fe ff ff       	call   c0012f3b <Dbg::logWriteIntBase(unsigned int, int)>
c001303d:	58                   	pop    eax
c001303e:	5a                   	pop    edx
c001303f:	e9 72 ff ff ff       	jmp    c0012fb6 <Dbg::kprintf(char const*, ...)+0x5c>
c0013044:	6a 25                	push   0x25
c0013046:	e8 9f fe ff ff       	call   c0012eea <Dbg::logc(char)>
c001304b:	58                   	pop    eax
c001304c:	e9 65 ff ff ff       	jmp    c0012fb6 <Dbg::kprintf(char const*, ...)+0x5c>
c0013051:	6a 25                	push   0x25
c0013053:	e8 92 fe ff ff       	call   c0012eea <Dbg::logc(char)>
c0013058:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001305b:	50                   	push   eax
c001305c:	e8 89 fe ff ff       	call   c0012eea <Dbg::logc(char)>
c0013061:	5a                   	pop    edx
c0013062:	59                   	pop    ecx
c0013063:	e9 4e ff ff ff       	jmp    c0012fb6 <Dbg::kprintf(char const*, ...)+0x5c>
c0013068:	50                   	push   eax
c0013069:	89 eb                	mov    ebx,ebp
c001306b:	e8 7a fe ff ff       	call   c0012eea <Dbg::logc(char)>
c0013070:	89 fd                	mov    ebp,edi
c0013072:	58                   	pop    eax
c0013073:	e9 3e ff ff ff       	jmp    c0012fb6 <Dbg::kprintf(char const*, ...)+0x5c>

c0013078 <File::read(unsigned long long, void*, int*)>:
c0013078:	53                   	push   ebx
c0013079:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001307d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013081:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013088:	3c 19                	cmp    al,0x19
c001308a:	77 35                	ja     c00130c1 <File::read(unsigned long long, void*, int*)+0x49>
c001308c:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0013093:	85 c0                	test   eax,eax
c0013095:	74 2a                	je     c00130c1 <File::read(unsigned long long, void*, int*)+0x49>
c0013097:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001309d:	85 c0                	test   eax,eax
c001309f:	74 20                	je     c00130c1 <File::read(unsigned long long, void*, int*)+0x49>
c00130a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130a5:	74 21                	je     c00130c8 <File::read(unsigned long long, void*, int*)+0x50>
c00130a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130a9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130ad:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130bb:	5b                   	pop    ebx
c00130bc:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130bf:	ff e0                	jmp    eax
c00130c1:	b8 0b 00 00 00       	mov    eax,0xb
c00130c6:	eb 05                	jmp    c00130cd <File::read(unsigned long long, void*, int*)+0x55>
c00130c8:	b8 05 00 00 00       	mov    eax,0x5
c00130cd:	5b                   	pop    ebx
c00130ce:	c3                   	ret    
c00130cf:	90                   	nop

c00130d0 <File::write(unsigned long long, void*, int*)>:
c00130d0:	53                   	push   ebx
c00130d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130d5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130d9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130e0:	3c 19                	cmp    al,0x19
c00130e2:	77 35                	ja     c0013119 <File::write(unsigned long long, void*, int*)+0x49>
c00130e4:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c00130eb:	85 c0                	test   eax,eax
c00130ed:	74 2a                	je     c0013119 <File::write(unsigned long long, void*, int*)+0x49>
c00130ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130f5:	85 c0                	test   eax,eax
c00130f7:	74 20                	je     c0013119 <File::write(unsigned long long, void*, int*)+0x49>
c00130f9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130fd:	74 21                	je     c0013120 <File::write(unsigned long long, void*, int*)+0x50>
c00130ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013101:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013105:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001310b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001310f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013113:	5b                   	pop    ebx
c0013114:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013117:	ff e0                	jmp    eax
c0013119:	b8 0b 00 00 00       	mov    eax,0xb
c001311e:	eb 05                	jmp    c0013125 <File::write(unsigned long long, void*, int*)+0x55>
c0013120:	b8 05 00 00 00       	mov    eax,0x5
c0013125:	5b                   	pop    ebx
c0013126:	c3                   	ret    
c0013127:	90                   	nop

c0013128 <Directory::read(unsigned long long, void*, int*)>:
c0013128:	53                   	push   ebx
c0013129:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001312d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013131:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013138:	3c 19                	cmp    al,0x19
c001313a:	77 35                	ja     c0013171 <Directory::read(unsigned long long, void*, int*)+0x49>
c001313c:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0013143:	85 c0                	test   eax,eax
c0013145:	74 2a                	je     c0013171 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013147:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001314d:	85 c0                	test   eax,eax
c001314f:	74 20                	je     c0013171 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013151:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013155:	74 21                	je     c0013178 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013157:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013159:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001315d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013163:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013167:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001316b:	5b                   	pop    ebx
c001316c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001316f:	ff e0                	jmp    eax
c0013171:	b8 0b 00 00 00       	mov    eax,0xb
c0013176:	eb 05                	jmp    c001317d <Directory::read(unsigned long long, void*, int*)+0x55>
c0013178:	b8 05 00 00 00       	mov    eax,0x5
c001317d:	5b                   	pop    ebx
c001317e:	c3                   	ret    
c001317f:	90                   	nop

c0013180 <Directory::write(unsigned long long, void*, int*)>:
c0013180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013184:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001318b:	b8 0b 00 00 00       	mov    eax,0xb
c0013190:	80 fa 19             	cmp    dl,0x19
c0013193:	77 18                	ja     c00131ad <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013195:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c001319c:	85 d2                	test   edx,edx
c001319e:	74 0d                	je     c00131ad <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131a0:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00131a7:	19 c0                	sbb    eax,eax
c00131a9:	83 e0 0a             	and    eax,0xa
c00131ac:	40                   	inc    eax
c00131ad:	c3                   	ret    

c00131ae <File::isAtty()>:
c00131ae:	31 c0                	xor    eax,eax
c00131b0:	c3                   	ret    
c00131b1:	90                   	nop

c00131b2 <Directory::isAtty()>:
c00131b2:	31 c0                	xor    eax,eax
c00131b4:	c3                   	ret    
c00131b5:	90                   	nop

c00131b6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131b6:	b8 0a 00 00 00       	mov    eax,0xa
c00131bb:	c3                   	ret    

c00131bc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131bc:	b8 0a 00 00 00       	mov    eax,0xa
c00131c1:	c3                   	ret    

c00131c2 <File::~File()>:
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	ba 6c ab 02 c0       	mov    edx,0xc002ab6c
c00131ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ce:	89 10                	mov    DWORD PTR [eax],edx
c00131d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d4:	83 ec 0c             	sub    esp,0xc
c00131d7:	50                   	push   eax
c00131d8:	e8 05 e7 ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	90                   	nop
c00131e1:	83 c4 0c             	add    esp,0xc
c00131e4:	c3                   	ret    
c00131e5:	90                   	nop

c00131e6 <File::~File()>:
c00131e6:	83 ec 0c             	sub    esp,0xc
c00131e9:	83 ec 0c             	sub    esp,0xc
c00131ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f0:	e8 cd ff ff ff       	call   c00131c2 <File::~File()>
c00131f5:	83 c4 10             	add    esp,0x10
c00131f8:	83 ec 08             	sub    esp,0x8
c00131fb:	68 14 01 00 00       	push   0x114
c0013200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013204:	e8 71 fc ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0013209:	83 c4 10             	add    esp,0x10
c001320c:	83 c4 0c             	add    esp,0xc
c001320f:	c3                   	ret    

c0013210 <Directory::~Directory()>:
c0013210:	83 ec 0c             	sub    esp,0xc
c0013213:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c0013218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001321c:	89 10                	mov    DWORD PTR [eax],edx
c001321e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013222:	83 ec 0c             	sub    esp,0xc
c0013225:	50                   	push   eax
c0013226:	e8 b7 e6 ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c001322b:	83 c4 10             	add    esp,0x10
c001322e:	90                   	nop
c001322f:	83 c4 0c             	add    esp,0xc
c0013232:	c3                   	ret    
c0013233:	90                   	nop

c0013234 <Directory::~Directory()>:
c0013234:	83 ec 0c             	sub    esp,0xc
c0013237:	83 ec 0c             	sub    esp,0xc
c001323a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001323e:	e8 cd ff ff ff       	call   c0013210 <Directory::~Directory()>
c0013243:	83 c4 10             	add    esp,0x10
c0013246:	83 ec 08             	sub    esp,0x8
c0013249:	68 14 01 00 00       	push   0x114
c001324e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013252:	e8 23 fc ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0013257:	83 c4 10             	add    esp,0x10
c001325a:	83 c4 0c             	add    esp,0xc
c001325d:	c3                   	ret    

c001325e <Filesystem::Filesystem()>:
c001325e:	ba 08 ab 02 c0       	mov    edx,0xc002ab08
c0013263:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013267:	89 10                	mov    DWORD PTR [eax],edx
c0013269:	8b 15 f0 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5f0
c001326f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013273:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001327a:	a3 f0 e5 02 c0       	mov    ds:0xc002e5f0,eax
c001327f:	90                   	nop
c0013280:	c3                   	ret    
c0013281:	90                   	nop

c0013282 <Filesystem::~Filesystem()>:
c0013282:	ba 08 ab 02 c0       	mov    edx,0xc002ab08
c0013287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001328b:	89 10                	mov    DWORD PTR [eax],edx
c001328d:	90                   	nop
c001328e:	c3                   	ret    
c001328f:	90                   	nop

c0013290 <Filesystem::~Filesystem()>:
c0013290:	83 ec 0c             	sub    esp,0xc
c0013293:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013297:	e8 e6 ff ff ff       	call   c0013282 <Filesystem::~Filesystem()>
c001329c:	83 c4 04             	add    esp,0x4
c001329f:	83 ec 08             	sub    esp,0x8
c00132a2:	6a 08                	push   0x8
c00132a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132a8:	e8 cd fb ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c00132ad:	83 c4 10             	add    esp,0x10
c00132b0:	83 c4 0c             	add    esp,0xc
c00132b3:	c3                   	ret    

c00132b4 <Fs::getcwd(Process*, char*, int)>:
c00132b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132b8:	31 c0                	xor    eax,eax
c00132ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132bd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132c1:	7d 15                	jge    c00132d8 <Fs::getcwd(Process*, char*, int)+0x24>
c00132c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132c7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132ce:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132d1:	84 c9                	test   cl,cl
c00132d3:	74 06                	je     c00132db <Fs::getcwd(Process*, char*, int)+0x27>
c00132d5:	40                   	inc    eax
c00132d6:	eb e2                	jmp    c00132ba <Fs::getcwd(Process*, char*, int)+0x6>
c00132d8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132db:	31 c0                	xor    eax,eax
c00132dd:	c3                   	ret    

c00132de <Fs::initVFS()>:
c00132de:	83 ec 18             	sub    esp,0x18
c00132e1:	6a 08                	push   0x8
c00132e3:	e8 5b c5 ff ff       	call   c000f843 <malloc>
c00132e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00132eb:	e8 80 dc 00 00       	call   c0020f70 <FAT::FAT()>
c00132f0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132f7:	e8 47 c5 ff ff       	call   c000f843 <malloc>
c00132fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00132ff:	e8 c4 ee 00 00       	call   c00221c8 <ISO9660::ISO9660()>
c0013304:	83 c4 1c             	add    esp,0x1c
c0013307:	c3                   	ret    

c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013308:	55                   	push   ebp
c0013309:	57                   	push   edi
c001330a:	56                   	push   esi
c001330b:	53                   	push   ebx
c001330c:	81 ec 10 04 00 00    	sub    esp,0x410
c0013312:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013319:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013320:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013327:	68 00 04 00 00       	push   0x400
c001332c:	6a 00                	push   0x0
c001332e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013332:	56                   	push   esi
c0013333:	e8 40 d4 fe ff       	call   c0000778 <memset>
c0013338:	83 c4 10             	add    esp,0x10
c001333b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001333f:	75 0b                	jne    c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013341:	50                   	push   eax
c0013342:	50                   	push   eax
c0013343:	57                   	push   edi
c0013344:	56                   	push   esi
c0013345:	e8 ea d4 fe ff       	call   c0000834 <strcpy>
c001334a:	eb 41                	jmp    c001338d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001334c:	8a 07                	mov    al,BYTE PTR [edi]
c001334e:	3c 5c                	cmp    al,0x5c
c0013350:	74 04                	je     c0013356 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013352:	3c 2f                	cmp    al,0x2f
c0013354:	75 18                	jne    c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013356:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013359:	3c 60                	cmp    al,0x60
c001335b:	7e 03                	jle    c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001335d:	83 e8 20             	sub    eax,0x20
c0013360:	88 04 24             	mov    BYTE PTR [esp],al
c0013363:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001336a:	50                   	push   eax
c001336b:	50                   	push   eax
c001336c:	eb 18                	jmp    c0013386 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001336e:	50                   	push   eax
c001336f:	50                   	push   eax
c0013370:	55                   	push   ebp
c0013371:	56                   	push   esi
c0013372:	e8 bd d4 fe ff       	call   c0000834 <strcpy>
c0013377:	5a                   	pop    edx
c0013378:	59                   	pop    ecx
c0013379:	68 54 c2 02 c0       	push   0xc002c254
c001337e:	56                   	push   esi
c001337f:	e8 f0 d5 fe ff       	call   c0000974 <strcat>
c0013384:	5d                   	pop    ebp
c0013385:	58                   	pop    eax
c0013386:	57                   	push   edi
c0013387:	56                   	push   esi
c0013388:	e8 e7 d5 fe ff       	call   c0000974 <strcat>
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013393:	3c 60                	cmp    al,0x60
c0013395:	7e 03                	jle    c001339a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013397:	83 e8 20             	sub    eax,0x20
c001339a:	88 04 24             	mov    BYTE PTR [esp],al
c001339d:	88 03                	mov    BYTE PTR [ebx],al
c001339f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133a6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00133ac:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00133b0:	bf 03 00 00 00       	mov    edi,0x3
c00133b5:	b8 03 00 00 00       	mov    eax,0x3
c00133ba:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133bd:	84 d2                	test   dl,dl
c00133bf:	0f 84 91 00 00 00    	je     c0013456 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00133c5:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133c8:	80 fa 5c             	cmp    dl,0x5c
c00133cb:	74 05                	je     c00133d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133cd:	80 fa 2f             	cmp    dl,0x2f
c00133d0:	75 12                	jne    c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133d2:	89 c5                	mov    ebp,eax
c00133d4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133d9:	74 09                	je     c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133db:	40                   	inc    eax
c00133dc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133e0:	89 cf                	mov    edi,ecx
c00133e2:	eb d6                	jmp    c00133ba <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133e4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133e9:	75 5b                	jne    c0013446 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133eb:	80 fa 2e             	cmp    dl,0x2e
c00133ee:	75 56                	jne    c0013446 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133f0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133f4:	74 19                	je     c001340f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133f6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133fb:	74 53                	je     c0013450 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133fd:	89 f9                	mov    ecx,edi
c00133ff:	41                   	inc    ecx
c0013400:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013403:	80 fa 2f             	cmp    dl,0x2f
c0013406:	74 f7                	je     c00133ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013408:	80 fa 5c             	cmp    dl,0x5c
c001340b:	74 f2                	je     c00133ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001340d:	eb d1                	jmp    c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001340f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013414:	74 3a                	je     c0013450 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013416:	83 f8 03             	cmp    eax,0x3
c0013419:	74 c5                	je     c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001341b:	41                   	inc    ecx
c001341c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001341f:	80 fa 2f             	cmp    dl,0x2f
c0013422:	74 f7                	je     c001341b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013424:	80 fa 5c             	cmp    dl,0x5c
c0013427:	74 f2                	je     c001341b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013429:	48                   	dec    eax
c001342a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001342e:	75 06                	jne    c0013436 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013430:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013434:	eb f3                	jmp    c0013429 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013436:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001343a:	74 07                	je     c0013443 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001343c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013440:	48                   	dec    eax
c0013441:	eb f3                	jmp    c0013436 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013443:	40                   	inc    eax
c0013444:	eb 9a                	jmp    c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013446:	80 fa 2f             	cmp    dl,0x2f
c0013449:	74 95                	je     c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001344b:	80 fa 5c             	cmp    dl,0x5c
c001344e:	74 90                	je     c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013450:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013453:	40                   	inc    eax
c0013454:	eb 8a                	jmp    c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013456:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001345a:	83 ec 0c             	sub    esp,0xc
c001345d:	53                   	push   ebx
c001345e:	e8 31 d3 fe ff       	call   c0000794 <strlen>
c0013463:	83 c4 10             	add    esp,0x10
c0013466:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001346b:	75 26                	jne    c0013493 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001346d:	83 ec 0c             	sub    esp,0xc
c0013470:	53                   	push   ebx
c0013471:	e8 1e d3 fe ff       	call   c0000794 <strlen>
c0013476:	83 c4 10             	add    esp,0x10
c0013479:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001347e:	74 26                	je     c00134a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013480:	83 ec 0c             	sub    esp,0xc
c0013483:	53                   	push   ebx
c0013484:	e8 0b d3 fe ff       	call   c0000794 <strlen>
c0013489:	83 c4 10             	add    esp,0x10
c001348c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013491:	eb c7                	jmp    c001345a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013493:	83 ec 0c             	sub    esp,0xc
c0013496:	53                   	push   ebx
c0013497:	e8 f8 d2 fe ff       	call   c0000794 <strlen>
c001349c:	83 c4 10             	add    esp,0x10
c001349f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00134a4:	74 c7                	je     c001346d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00134a6:	81 c4 0c 04 00 00    	add    esp,0x40c
c00134ac:	5b                   	pop    ebx
c00134ad:	5e                   	pop    esi
c00134ae:	5f                   	pop    edi
c00134af:	5d                   	pop    ebp
c00134b0:	c3                   	ret    
c00134b1:	90                   	nop

c00134b2 <File::File(char const*, Process*)>:
c00134b2:	83 ec 0c             	sub    esp,0xc
c00134b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b9:	83 ec 08             	sub    esp,0x8
c00134bc:	6a 00                	push   0x0
c00134be:	50                   	push   eax
c00134bf:	e8 3c e2 ff ff       	call   c0011700 <UnixFile::UnixFile(int)>
c00134c4:	83 c4 10             	add    esp,0x10
c00134c7:	ba 6c ab 02 c0       	mov    edx,0xc002ab6c
c00134cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d0:	89 10                	mov    DWORD PTR [eax],edx
c00134d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e0:	83 c0 0d             	add    eax,0xd
c00134e3:	83 ec 04             	sub    esp,0x4
c00134e6:	52                   	push   edx
c00134e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134eb:	50                   	push   eax
c00134ec:	e8 17 fe ff ff       	call   c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134fb:	8d 50 bf             	lea    edx,[eax-0x41]
c00134fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013502:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013510:	90                   	nop
c0013511:	83 c4 0c             	add    esp,0xc
c0013514:	c3                   	ret    
c0013515:	90                   	nop

c0013516 <File::open(FileOpenMode)>:
c0013516:	53                   	push   ebx
c0013517:	b8 0b 00 00 00       	mov    eax,0xb
c001351c:	83 ec 08             	sub    esp,0x8
c001351f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013523:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001352a:	80 fa 19             	cmp    dl,0x19
c001352d:	77 40                	ja     c001356f <File::open(FileOpenMode)+0x59>
c001352f:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c0013536:	85 d2                	test   edx,edx
c0013538:	74 35                	je     c001356f <File::open(FileOpenMode)+0x59>
c001353a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013540:	85 d2                	test   edx,edx
c0013542:	74 2b                	je     c001356f <File::open(FileOpenMode)+0x59>
c0013544:	b8 06 00 00 00       	mov    eax,0x6
c0013549:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001354d:	75 20                	jne    c001356f <File::open(FileOpenMode)+0x59>
c001354f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013551:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013557:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001355b:	51                   	push   ecx
c001355c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001355f:	51                   	push   ecx
c0013560:	52                   	push   edx
c0013561:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013564:	83 c4 10             	add    esp,0x10
c0013567:	85 c0                	test   eax,eax
c0013569:	75 04                	jne    c001356f <File::open(FileOpenMode)+0x59>
c001356b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001356f:	83 c4 08             	add    esp,0x8
c0013572:	5b                   	pop    ebx
c0013573:	c3                   	ret    

c0013574 <File::close()>:
c0013574:	53                   	push   ebx
c0013575:	b8 0b 00 00 00       	mov    eax,0xb
c001357a:	83 ec 08             	sub    esp,0x8
c001357d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013581:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013588:	80 fa 19             	cmp    dl,0x19
c001358b:	77 41                	ja     c00135ce <File::close()+0x5a>
c001358d:	8b 1c 95 80 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1580]
c0013594:	85 db                	test   ebx,ebx
c0013596:	74 36                	je     c00135ce <File::close()+0x5a>
c0013598:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001359f:	74 2d                	je     c00135ce <File::close()+0x5a>
c00135a1:	b8 05 00 00 00       	mov    eax,0x5
c00135a6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135aa:	74 22                	je     c00135ce <File::close()+0x5a>
c00135ac:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135b0:	8b 04 95 80 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1580]
c00135b7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135bd:	53                   	push   ebx
c00135be:	53                   	push   ebx
c00135bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00135c1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135c7:	50                   	push   eax
c00135c8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135cb:	83 c4 10             	add    esp,0x10
c00135ce:	83 c4 08             	add    esp,0x8
c00135d1:	5b                   	pop    ebx
c00135d2:	c3                   	ret    
c00135d3:	90                   	nop

c00135d4 <File::seek(unsigned long long)>:
c00135d4:	56                   	push   esi
c00135d5:	53                   	push   ebx
c00135d6:	b8 0b 00 00 00       	mov    eax,0xb
c00135db:	51                   	push   ecx
c00135dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135e4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135ef:	80 fa 19             	cmp    dl,0x19
c00135f2:	77 31                	ja     c0013625 <File::seek(unsigned long long)+0x51>
c00135f4:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c00135fb:	85 d2                	test   edx,edx
c00135fd:	74 26                	je     c0013625 <File::seek(unsigned long long)+0x51>
c00135ff:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013605:	85 d2                	test   edx,edx
c0013607:	74 1c                	je     c0013625 <File::seek(unsigned long long)+0x51>
c0013609:	b8 05 00 00 00       	mov    eax,0x5
c001360e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013612:	74 11                	je     c0013625 <File::seek(unsigned long long)+0x51>
c0013614:	8b 02                	mov    eax,DWORD PTR [edx]
c0013616:	53                   	push   ebx
c0013617:	51                   	push   ecx
c0013618:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001361e:	52                   	push   edx
c001361f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013622:	83 c4 10             	add    esp,0x10
c0013625:	5a                   	pop    edx
c0013626:	5b                   	pop    ebx
c0013627:	5e                   	pop    esi
c0013628:	c3                   	ret    
c0013629:	90                   	nop

c001362a <File::tell(unsigned long long*)>:
c001362a:	83 ec 0c             	sub    esp,0xc
c001362d:	b8 0b 00 00 00       	mov    eax,0xb
c0013632:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013636:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001363d:	80 fa 19             	cmp    dl,0x19
c0013640:	77 34                	ja     c0013676 <File::tell(unsigned long long*)+0x4c>
c0013642:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c0013649:	85 d2                	test   edx,edx
c001364b:	74 29                	je     c0013676 <File::tell(unsigned long long*)+0x4c>
c001364d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013653:	85 d2                	test   edx,edx
c0013655:	74 1f                	je     c0013676 <File::tell(unsigned long long*)+0x4c>
c0013657:	b8 05 00 00 00       	mov    eax,0x5
c001365c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013660:	74 14                	je     c0013676 <File::tell(unsigned long long*)+0x4c>
c0013662:	50                   	push   eax
c0013663:	8b 02                	mov    eax,DWORD PTR [edx]
c0013665:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013669:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001366f:	52                   	push   edx
c0013670:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013673:	83 c4 10             	add    esp,0x10
c0013676:	83 c4 0c             	add    esp,0xc
c0013679:	c3                   	ret    

c001367a <File::rewind()>:
c001367a:	83 ec 10             	sub    esp,0x10
c001367d:	6a 00                	push   0x0
c001367f:	6a 00                	push   0x0
c0013681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013685:	e8 4a ff ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001368a:	83 c4 1c             	add    esp,0x1c
c001368d:	c3                   	ret    

c001368e <File::unlink()>:
c001368e:	83 ec 0c             	sub    esp,0xc
c0013691:	b8 0b 00 00 00       	mov    eax,0xb
c0013696:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001369a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136a1:	80 f9 19             	cmp    cl,0x19
c00136a4:	77 2f                	ja     c00136d5 <File::unlink()+0x47>
c00136a6:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c00136ad:	85 c9                	test   ecx,ecx
c00136af:	74 24                	je     c00136d5 <File::unlink()+0x47>
c00136b1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136b7:	85 c9                	test   ecx,ecx
c00136b9:	74 1a                	je     c00136d5 <File::unlink()+0x47>
c00136bb:	b8 06 00 00 00       	mov    eax,0x6
c00136c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136c4:	75 0f                	jne    c00136d5 <File::unlink()+0x47>
c00136c6:	83 c2 0d             	add    edx,0xd
c00136c9:	50                   	push   eax
c00136ca:	50                   	push   eax
c00136cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136cd:	52                   	push   edx
c00136ce:	51                   	push   ecx
c00136cf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136d2:	83 c4 10             	add    esp,0x10
c00136d5:	83 c4 0c             	add    esp,0xc
c00136d8:	c3                   	ret    
c00136d9:	90                   	nop

c00136da <File::rename(char const*)>:
c00136da:	83 ec 0c             	sub    esp,0xc
c00136dd:	b8 0b 00 00 00       	mov    eax,0xb
c00136e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136ed:	80 f9 19             	cmp    cl,0x19
c00136f0:	77 32                	ja     c0013724 <File::rename(char const*)+0x4a>
c00136f2:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c00136f9:	85 c9                	test   ecx,ecx
c00136fb:	74 27                	je     c0013724 <File::rename(char const*)+0x4a>
c00136fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013703:	85 c9                	test   ecx,ecx
c0013705:	74 1d                	je     c0013724 <File::rename(char const*)+0x4a>
c0013707:	b8 06 00 00 00       	mov    eax,0x6
c001370c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013710:	75 12                	jne    c0013724 <File::rename(char const*)+0x4a>
c0013712:	83 c2 0d             	add    edx,0xd
c0013715:	50                   	push   eax
c0013716:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013718:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001371c:	52                   	push   edx
c001371d:	51                   	push   ecx
c001371e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013721:	83 c4 10             	add    esp,0x10
c0013724:	83 c4 0c             	add    esp,0xc
c0013727:	c3                   	ret    

c0013728 <File::chfatattr(unsigned char, unsigned char)>:
c0013728:	57                   	push   edi
c0013729:	b8 0b 00 00 00       	mov    eax,0xb
c001372e:	56                   	push   esi
c001372f:	53                   	push   ebx
c0013730:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013734:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013738:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001373f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013743:	80 f9 19             	cmp    cl,0x19
c0013746:	77 37                	ja     c001377f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013748:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c001374f:	85 c9                	test   ecx,ecx
c0013751:	74 2c                	je     c001377f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013753:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013759:	85 c9                	test   ecx,ecx
c001375b:	74 22                	je     c001377f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001375d:	b8 06 00 00 00       	mov    eax,0x6
c0013762:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013766:	75 17                	jne    c001377f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013768:	8b 39                	mov    edi,DWORD PTR [ecx]
c001376a:	89 f0                	mov    eax,esi
c001376c:	83 c2 0d             	add    edx,0xd
c001376f:	0f b6 f0             	movzx  esi,al
c0013772:	0f b6 db             	movzx  ebx,bl
c0013775:	56                   	push   esi
c0013776:	53                   	push   ebx
c0013777:	52                   	push   edx
c0013778:	51                   	push   ecx
c0013779:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001377c:	83 c4 10             	add    esp,0x10
c001377f:	5b                   	pop    ebx
c0013780:	5e                   	pop    esi
c0013781:	5f                   	pop    edi
c0013782:	c3                   	ret    
c0013783:	90                   	nop

c0013784 <File::exists()>:
c0013784:	83 ec 0c             	sub    esp,0xc
c0013787:	31 c0                	xor    eax,eax
c0013789:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001378d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013794:	80 f9 19             	cmp    cl,0x19
c0013797:	77 24                	ja     c00137bd <File::exists()+0x39>
c0013799:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c00137a0:	85 c9                	test   ecx,ecx
c00137a2:	74 19                	je     c00137bd <File::exists()+0x39>
c00137a4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137aa:	85 c9                	test   ecx,ecx
c00137ac:	74 0f                	je     c00137bd <File::exists()+0x39>
c00137ae:	83 c2 0d             	add    edx,0xd
c00137b1:	50                   	push   eax
c00137b2:	50                   	push   eax
c00137b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137b5:	52                   	push   edx
c00137b6:	51                   	push   ecx
c00137b7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	83 c4 0c             	add    esp,0xc
c00137c0:	c3                   	ret    
c00137c1:	90                   	nop

c00137c2 <File::stat(unsigned long long*, bool*)>:
c00137c2:	56                   	push   esi
c00137c3:	53                   	push   ebx
c00137c4:	50                   	push   eax
c00137c5:	b8 0b 00 00 00       	mov    eax,0xb
c00137ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137dd:	80 f9 19             	cmp    cl,0x19
c00137e0:	77 3d                	ja     c001381f <File::stat(unsigned long long*, bool*)+0x5d>
c00137e2:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c00137e9:	85 c9                	test   ecx,ecx
c00137eb:	74 32                	je     c001381f <File::stat(unsigned long long*, bool*)+0x5d>
c00137ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137f3:	85 c9                	test   ecx,ecx
c00137f5:	74 28                	je     c001381f <File::stat(unsigned long long*, bool*)+0x5d>
c00137f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137f9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137fd:	74 13                	je     c0013812 <File::stat(unsigned long long*, bool*)+0x50>
c00137ff:	83 ec 04             	sub    esp,0x4
c0013802:	56                   	push   esi
c0013803:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013809:	51                   	push   ecx
c001380a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001380d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013810:	eb 0a                	jmp    c001381c <File::stat(unsigned long long*, bool*)+0x5a>
c0013812:	53                   	push   ebx
c0013813:	83 c2 0d             	add    edx,0xd
c0013816:	56                   	push   esi
c0013817:	52                   	push   edx
c0013818:	51                   	push   ecx
c0013819:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	5a                   	pop    edx
c0013820:	5b                   	pop    ebx
c0013821:	5e                   	pop    esi
c0013822:	c3                   	ret    

c0013823 <Fs::setcwd(Process*, char*)>:
c0013823:	55                   	push   ebp
c0013824:	57                   	push   edi
c0013825:	56                   	push   esi
c0013826:	53                   	push   ebx
c0013827:	81 ec 20 02 00 00    	sub    esp,0x220
c001382d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013834:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001383a:	57                   	push   edi
c001383b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013842:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013846:	56                   	push   esi
c0013847:	e8 bc fa ff ff       	call   c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>
c001384c:	89 34 24             	mov    DWORD PTR [esp],esi
c001384f:	e8 40 cf fe ff       	call   c0000794 <strlen>
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	83 f8 02             	cmp    eax,0x2
c001385a:	77 17                	ja     c0013873 <Fs::setcwd(Process*, char*)+0x50>
c001385c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013861:	83 e8 41             	sub    eax,0x41
c0013864:	83 f8 19             	cmp    eax,0x19
c0013867:	76 24                	jbe    c001388d <Fs::setcwd(Process*, char*)+0x6a>
c0013869:	b8 03 00 00 00       	mov    eax,0x3
c001386e:	e9 e0 00 00 00       	jmp    c0013953 <Fs::setcwd(Process*, char*)+0x130>
c0013873:	83 ec 0c             	sub    esp,0xc
c0013876:	56                   	push   esi
c0013877:	e8 18 cf fe ff       	call   c0000794 <strlen>
c001387c:	83 c4 10             	add    esp,0x10
c001387f:	83 f8 03             	cmp    eax,0x3
c0013882:	75 34                	jne    c00138b8 <Fs::setcwd(Process*, char*)+0x95>
c0013884:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013889:	75 2d                	jne    c00138b8 <Fs::setcwd(Process*, char*)+0x95>
c001388b:	eb cf                	jmp    c001385c <Fs::setcwd(Process*, char*)+0x39>
c001388d:	8b 14 85 80 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1580]
c0013894:	b8 05 00 00 00       	mov    eax,0x5
c0013899:	85 d2                	test   edx,edx
c001389b:	0f 84 b2 00 00 00    	je     c0013953 <Fs::setcwd(Process*, char*)+0x130>
c00138a1:	b8 06 00 00 00       	mov    eax,0x6
c00138a6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00138ad:	0f 85 92 00 00 00    	jne    c0013945 <Fs::setcwd(Process*, char*)+0x122>
c00138b3:	e9 9b 00 00 00       	jmp    c0013953 <Fs::setcwd(Process*, char*)+0x130>
c00138b8:	83 ec 0c             	sub    esp,0xc
c00138bb:	68 14 01 00 00       	push   0x114
c00138c0:	e8 7e bf ff ff       	call   c000f843 <malloc>
c00138c5:	83 c4 0c             	add    esp,0xc
c00138c8:	89 c3                	mov    ebx,eax
c00138ca:	55                   	push   ebp
c00138cb:	56                   	push   esi
c00138cc:	50                   	push   eax
c00138cd:	e8 e0 fb ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c00138d2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138d7:	83 c4 0c             	add    esp,0xc
c00138da:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138de:	50                   	push   eax
c00138df:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138e3:	50                   	push   eax
c00138e4:	53                   	push   ebx
c00138e5:	e8 d8 fe ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c00138ea:	83 c4 10             	add    esp,0x10
c00138ed:	83 f8 02             	cmp    eax,0x2
c00138f0:	74 04                	je     c00138f6 <Fs::setcwd(Process*, char*)+0xd3>
c00138f2:	85 c0                	test   eax,eax
c00138f4:	74 1c                	je     c0013912 <Fs::setcwd(Process*, char*)+0xef>
c00138f6:	b8 01 00 00 00       	mov    eax,0x1
c00138fb:	85 db                	test   ebx,ebx
c00138fd:	74 54                	je     c0013953 <Fs::setcwd(Process*, char*)+0x130>
c00138ff:	83 ec 0c             	sub    esp,0xc
c0013902:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013904:	53                   	push   ebx
c0013905:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013908:	83 c4 10             	add    esp,0x10
c001390b:	b8 01 00 00 00       	mov    eax,0x1
c0013910:	eb 41                	jmp    c0013953 <Fs::setcwd(Process*, char*)+0x130>
c0013912:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013917:	75 1c                	jne    c0013935 <Fs::setcwd(Process*, char*)+0x112>
c0013919:	b8 02 00 00 00       	mov    eax,0x2
c001391e:	85 db                	test   ebx,ebx
c0013920:	74 31                	je     c0013953 <Fs::setcwd(Process*, char*)+0x130>
c0013922:	83 ec 0c             	sub    esp,0xc
c0013925:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013927:	53                   	push   ebx
c0013928:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001392b:	83 c4 10             	add    esp,0x10
c001392e:	b8 02 00 00 00       	mov    eax,0x2
c0013933:	eb 1e                	jmp    c0013953 <Fs::setcwd(Process*, char*)+0x130>
c0013935:	85 db                	test   ebx,ebx
c0013937:	74 0c                	je     c0013945 <Fs::setcwd(Process*, char*)+0x122>
c0013939:	83 ec 0c             	sub    esp,0xc
c001393c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001393e:	53                   	push   ebx
c001393f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	50                   	push   eax
c0013946:	50                   	push   eax
c0013947:	56                   	push   esi
c0013948:	57                   	push   edi
c0013949:	e8 e6 ce fe ff       	call   c0000834 <strcpy>
c001394e:	83 c4 10             	add    esp,0x10
c0013951:	31 c0                	xor    eax,eax
c0013953:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013959:	5b                   	pop    ebx
c001395a:	5e                   	pop    esi
c001395b:	5f                   	pop    edi
c001395c:	5d                   	pop    ebp
c001395d:	c3                   	ret    

c001395e <Directory::Directory(char const*, Process*)>:
c001395e:	83 ec 0c             	sub    esp,0xc
c0013961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013965:	83 ec 08             	sub    esp,0x8
c0013968:	6a 00                	push   0x0
c001396a:	50                   	push   eax
c001396b:	e8 90 dd ff ff       	call   c0011700 <UnixFile::UnixFile(int)>
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c0013978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397c:	89 10                	mov    DWORD PTR [eax],edx
c001397e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013982:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398c:	83 c0 0d             	add    eax,0xd
c001398f:	83 ec 04             	sub    esp,0x4
c0013992:	52                   	push   edx
c0013993:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013997:	50                   	push   eax
c0013998:	e8 6b f9 ff ff       	call   c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>
c001399d:	83 c4 10             	add    esp,0x10
c00139a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00139a7:	8d 50 bf             	lea    edx,[eax-0x41]
c00139aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139bc:	90                   	nop
c00139bd:	83 c4 0c             	add    esp,0xc
c00139c0:	c3                   	ret    
c00139c1:	90                   	nop

c00139c2 <Directory::open()>:
c00139c2:	53                   	push   ebx
c00139c3:	b8 0b 00 00 00       	mov    eax,0xb
c00139c8:	83 ec 08             	sub    esp,0x8
c00139cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139cf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139d6:	80 fa 19             	cmp    dl,0x19
c00139d9:	77 3d                	ja     c0013a18 <Directory::open()+0x56>
c00139db:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c00139e2:	85 d2                	test   edx,edx
c00139e4:	74 32                	je     c0013a18 <Directory::open()+0x56>
c00139e6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139ec:	85 d2                	test   edx,edx
c00139ee:	74 28                	je     c0013a18 <Directory::open()+0x56>
c00139f0:	b8 06 00 00 00       	mov    eax,0x6
c00139f5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139f9:	75 1d                	jne    c0013a18 <Directory::open()+0x56>
c00139fb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a01:	50                   	push   eax
c0013a02:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a04:	51                   	push   ecx
c0013a05:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a08:	51                   	push   ecx
c0013a09:	52                   	push   edx
c0013a0a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a0d:	83 c4 10             	add    esp,0x10
c0013a10:	85 c0                	test   eax,eax
c0013a12:	75 04                	jne    c0013a18 <Directory::open()+0x56>
c0013a14:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a18:	83 c4 08             	add    esp,0x8
c0013a1b:	5b                   	pop    ebx
c0013a1c:	c3                   	ret    
c0013a1d:	90                   	nop

c0013a1e <Directory::close()>:
c0013a1e:	53                   	push   ebx
c0013a1f:	b8 0b 00 00 00       	mov    eax,0xb
c0013a24:	83 ec 08             	sub    esp,0x8
c0013a27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a2b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a32:	80 fa 19             	cmp    dl,0x19
c0013a35:	77 41                	ja     c0013a78 <Directory::close()+0x5a>
c0013a37:	8b 1c 95 80 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1580]
c0013a3e:	85 db                	test   ebx,ebx
c0013a40:	74 36                	je     c0013a78 <Directory::close()+0x5a>
c0013a42:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a49:	74 2d                	je     c0013a78 <Directory::close()+0x5a>
c0013a4b:	b8 05 00 00 00       	mov    eax,0x5
c0013a50:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a54:	74 22                	je     c0013a78 <Directory::close()+0x5a>
c0013a56:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a5a:	8b 04 95 80 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1580]
c0013a61:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a67:	53                   	push   ebx
c0013a68:	53                   	push   ebx
c0013a69:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a6b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a71:	50                   	push   eax
c0013a72:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a75:	83 c4 10             	add    esp,0x10
c0013a78:	83 c4 08             	add    esp,0x8
c0013a7b:	5b                   	pop    ebx
c0013a7c:	c3                   	ret    
c0013a7d:	90                   	nop

c0013a7e <Directory::unlink()>:
c0013a7e:	83 ec 0c             	sub    esp,0xc
c0013a81:	b8 0b 00 00 00       	mov    eax,0xb
c0013a86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a8a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a91:	80 f9 19             	cmp    cl,0x19
c0013a94:	77 2f                	ja     c0013ac5 <Directory::unlink()+0x47>
c0013a96:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013a9d:	85 c9                	test   ecx,ecx
c0013a9f:	74 24                	je     c0013ac5 <Directory::unlink()+0x47>
c0013aa1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013aa7:	85 c9                	test   ecx,ecx
c0013aa9:	74 1a                	je     c0013ac5 <Directory::unlink()+0x47>
c0013aab:	b8 06 00 00 00       	mov    eax,0x6
c0013ab0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ab4:	75 0f                	jne    c0013ac5 <Directory::unlink()+0x47>
c0013ab6:	83 c2 0d             	add    edx,0xd
c0013ab9:	50                   	push   eax
c0013aba:	50                   	push   eax
c0013abb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013abd:	52                   	push   edx
c0013abe:	51                   	push   ecx
c0013abf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013ac2:	83 c4 10             	add    esp,0x10
c0013ac5:	83 c4 0c             	add    esp,0xc
c0013ac8:	c3                   	ret    
c0013ac9:	90                   	nop

c0013aca <Directory::rename(char const*)>:
c0013aca:	83 ec 0c             	sub    esp,0xc
c0013acd:	b8 0b 00 00 00       	mov    eax,0xb
c0013ad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ad6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013add:	80 f9 19             	cmp    cl,0x19
c0013ae0:	77 32                	ja     c0013b14 <Directory::rename(char const*)+0x4a>
c0013ae2:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013ae9:	85 c9                	test   ecx,ecx
c0013aeb:	74 27                	je     c0013b14 <Directory::rename(char const*)+0x4a>
c0013aed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013af3:	85 c9                	test   ecx,ecx
c0013af5:	74 1d                	je     c0013b14 <Directory::rename(char const*)+0x4a>
c0013af7:	b8 06 00 00 00       	mov    eax,0x6
c0013afc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b00:	75 12                	jne    c0013b14 <Directory::rename(char const*)+0x4a>
c0013b02:	83 c2 0d             	add    edx,0xd
c0013b05:	50                   	push   eax
c0013b06:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b0c:	52                   	push   edx
c0013b0d:	51                   	push   ecx
c0013b0e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b11:	83 c4 10             	add    esp,0x10
c0013b14:	83 c4 0c             	add    esp,0xc
c0013b17:	c3                   	ret    

c0013b18 <Directory::exists()>:
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	31 c0                	xor    eax,eax
c0013b1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b21:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b28:	80 f9 19             	cmp    cl,0x19
c0013b2b:	77 24                	ja     c0013b51 <Directory::exists()+0x39>
c0013b2d:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013b34:	85 c9                	test   ecx,ecx
c0013b36:	74 19                	je     c0013b51 <Directory::exists()+0x39>
c0013b38:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b3e:	85 c9                	test   ecx,ecx
c0013b40:	74 0f                	je     c0013b51 <Directory::exists()+0x39>
c0013b42:	83 c2 0d             	add    edx,0xd
c0013b45:	50                   	push   eax
c0013b46:	50                   	push   eax
c0013b47:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b49:	52                   	push   edx
c0013b4a:	51                   	push   ecx
c0013b4b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b4e:	83 c4 10             	add    esp,0x10
c0013b51:	83 c4 0c             	add    esp,0xc
c0013b54:	c3                   	ret    
c0013b55:	90                   	nop

c0013b56 <Directory::read(dirent*)>:
c0013b56:	83 ec 1c             	sub    esp,0x1c
c0013b59:	b8 0b 00 00 00       	mov    eax,0xb
c0013b5e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b62:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b69:	80 fa 19             	cmp    dl,0x19
c0013b6c:	77 30                	ja     c0013b9e <Directory::read(dirent*)+0x48>
c0013b6e:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c0013b75:	85 d2                	test   edx,edx
c0013b77:	74 25                	je     c0013b9e <Directory::read(dirent*)+0x48>
c0013b79:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b80:	74 1c                	je     c0013b9e <Directory::read(dirent*)+0x48>
c0013b82:	83 ec 0c             	sub    esp,0xc
c0013b85:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b87:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b8b:	52                   	push   edx
c0013b8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b90:	6a 00                	push   0x0
c0013b92:	68 10 01 00 00       	push   0x110
c0013b97:	51                   	push   ecx
c0013b98:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b9b:	83 c4 20             	add    esp,0x20
c0013b9e:	83 c4 1c             	add    esp,0x1c
c0013ba1:	c3                   	ret    

c0013ba2 <Directory::create()>:
c0013ba2:	83 ec 0c             	sub    esp,0xc
c0013ba5:	b8 0b 00 00 00       	mov    eax,0xb
c0013baa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bb5:	80 f9 19             	cmp    cl,0x19
c0013bb8:	77 2f                	ja     c0013be9 <Directory::create()+0x47>
c0013bba:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013bc1:	85 c9                	test   ecx,ecx
c0013bc3:	74 24                	je     c0013be9 <Directory::create()+0x47>
c0013bc5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bcb:	85 c9                	test   ecx,ecx
c0013bcd:	74 1a                	je     c0013be9 <Directory::create()+0x47>
c0013bcf:	b8 06 00 00 00       	mov    eax,0x6
c0013bd4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bd8:	75 0f                	jne    c0013be9 <Directory::create()+0x47>
c0013bda:	83 c2 0d             	add    edx,0xd
c0013bdd:	50                   	push   eax
c0013bde:	50                   	push   eax
c0013bdf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013be1:	52                   	push   edx
c0013be2:	51                   	push   ecx
c0013be3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013be6:	83 c4 10             	add    esp,0x10
c0013be9:	83 c4 0c             	add    esp,0xc
c0013bec:	c3                   	ret    
c0013bed:	90                   	nop

c0013bee <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013bee:	b8 0a 00 00 00       	mov    eax,0xa
c0013bf3:	c3                   	ret    

c0013bf4 <Bus::Bus(char const*)>:
c0013bf4:	83 ec 0c             	sub    esp,0xc
c0013bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bfb:	83 ec 08             	sub    esp,0x8
c0013bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c02:	50                   	push   eax
c0013c03:	e8 68 09 00 00       	call   c0014570 <Device::Device(char const*)>
c0013c08:	83 c4 10             	add    esp,0x10
c0013c0b:	ba a4 ab 02 c0       	mov    edx,0xc002aba4
c0013c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c14:	89 10                	mov    DWORD PTR [eax],edx
c0013c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c24:	90                   	nop
c0013c25:	83 c4 0c             	add    esp,0xc
c0013c28:	c3                   	ret    
c0013c29:	90                   	nop

c0013c2a <Bus::~Bus()>:
c0013c2a:	83 ec 0c             	sub    esp,0xc
c0013c2d:	ba a4 ab 02 c0       	mov    edx,0xc002aba4
c0013c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c36:	89 10                	mov    DWORD PTR [eax],edx
c0013c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	50                   	push   eax
c0013c40:	e8 0d 06 00 00       	call   c0014252 <Device::~Device()>
c0013c45:	83 c4 10             	add    esp,0x10
c0013c48:	90                   	nop
c0013c49:	83 c4 0c             	add    esp,0xc
c0013c4c:	c3                   	ret    
c0013c4d:	90                   	nop

c0013c4e <Bus::~Bus()>:
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	83 ec 0c             	sub    esp,0xc
c0013c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c58:	e8 cd ff ff ff       	call   c0013c2a <Bus::~Bus()>
c0013c5d:	83 c4 10             	add    esp,0x10
c0013c60:	83 ec 08             	sub    esp,0x8
c0013c63:	68 58 01 00 00       	push   0x158
c0013c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c6c:	e8 09 f2 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	83 c4 0c             	add    esp,0xc
c0013c77:	c3                   	ret    

c0013c78 <Buzzer::Buzzer(char const*)>:
c0013c78:	83 ec 0c             	sub    esp,0xc
c0013c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7f:	83 ec 08             	sub    esp,0x8
c0013c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c86:	50                   	push   eax
c0013c87:	e8 e4 08 00 00       	call   c0014570 <Device::Device(char const*)>
c0013c8c:	83 c4 10             	add    esp,0x10
c0013c8f:	ba d0 ab 02 c0       	mov    edx,0xc002abd0
c0013c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c98:	89 10                	mov    DWORD PTR [eax],edx
c0013c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cac:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013cb6:	90                   	nop
c0013cb7:	83 c4 0c             	add    esp,0xc
c0013cba:	c3                   	ret    
c0013cbb:	90                   	nop

c0013cbc <Buzzer::~Buzzer()>:
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	ba d0 ab 02 c0       	mov    edx,0xc002abd0
c0013cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc8:	89 10                	mov    DWORD PTR [eax],edx
c0013cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cce:	83 ec 0c             	sub    esp,0xc
c0013cd1:	50                   	push   eax
c0013cd2:	e8 7b 05 00 00       	call   c0014252 <Device::~Device()>
c0013cd7:	83 c4 10             	add    esp,0x10
c0013cda:	90                   	nop
c0013cdb:	83 c4 0c             	add    esp,0xc
c0013cde:	c3                   	ret    
c0013cdf:	90                   	nop

c0013ce0 <Buzzer::~Buzzer()>:
c0013ce0:	83 ec 0c             	sub    esp,0xc
c0013ce3:	83 ec 0c             	sub    esp,0xc
c0013ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cea:	e8 cd ff ff ff       	call   c0013cbc <Buzzer::~Buzzer()>
c0013cef:	83 c4 10             	add    esp,0x10
c0013cf2:	83 ec 08             	sub    esp,0x8
c0013cf5:	68 5c 01 00 00       	push   0x15c
c0013cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cfe:	e8 77 f1 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0013d03:	83 c4 10             	add    esp,0x10
c0013d06:	83 c4 0c             	add    esp,0xc
c0013d09:	c3                   	ret    

c0013d0a <Buzzer::stop()>:
c0013d0a:	83 ec 14             	sub    esp,0x14
c0013d0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d11:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d13:	6a 00                	push   0x0
c0013d15:	50                   	push   eax
c0013d16:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d19:	83 c4 1c             	add    esp,0x1c
c0013d1c:	c3                   	ret    

c0013d1d <beepThread(void*)>:
c0013d1d:	53                   	push   ebx
c0013d1e:	83 ec 08             	sub    esp,0x8
c0013d21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d25:	e8 d4 a0 00 00       	call   c001ddfe <unlockScheduler()>
c0013d2a:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d2f:	52                   	push   edx
c0013d30:	52                   	push   edx
c0013d31:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d37:	52                   	push   edx
c0013d38:	50                   	push   eax
c0013d39:	e8 0e a6 00 00       	call   c001e34c <nanoSleep(unsigned long long)>
c0013d3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d41:	e8 c4 ff ff ff       	call   c0013d0a <Buzzer::stop()>
c0013d46:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d4e:	83 c4 18             	add    esp,0x18
c0013d51:	5b                   	pop    ebx
c0013d52:	e9 3b a5 00 00       	jmp    c001e292 <blockTask(TaskState)>
c0013d57:	90                   	nop

c0013d58 <Buzzer::beep(int, int, bool)>:
c0013d58:	57                   	push   edi
c0013d59:	56                   	push   esi
c0013d5a:	53                   	push   ebx
c0013d5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d67:	52                   	push   edx
c0013d68:	52                   	push   edx
c0013d69:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6f:	56                   	push   esi
c0013d70:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d73:	83 c4 10             	add    esp,0x10
c0013d76:	89 f8                	mov    eax,edi
c0013d78:	84 c0                	test   al,al
c0013d7a:	74 1f                	je     c0013d9b <Buzzer::beep(int, int, bool)+0x43>
c0013d7c:	50                   	push   eax
c0013d7d:	50                   	push   eax
c0013d7e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d84:	99                   	cdq    
c0013d85:	52                   	push   edx
c0013d86:	50                   	push   eax
c0013d87:	e8 c0 a5 00 00       	call   c001e34c <nanoSleep(unsigned long long)>
c0013d8c:	83 c4 10             	add    esp,0x10
c0013d8f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d93:	5b                   	pop    ebx
c0013d94:	5e                   	pop    esi
c0013d95:	5f                   	pop    edi
c0013d96:	e9 6f ff ff ff       	jmp    c0013d0a <Buzzer::stop()>
c0013d9b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013da1:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0013da6:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013dae:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013db2:	c7 44 24 14 1d 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d1d
c0013dba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013dbe:	5b                   	pop    ebx
c0013dbf:	5e                   	pop    esi
c0013dc0:	5f                   	pop    edi
c0013dc1:	e9 68 a1 00 00       	jmp    c001df2e <Process::createThread(void (*)(void*), void*, int)>

c0013dc6 <User::loadClockSettings(int)>:
c0013dc6:	53                   	push   ebx
c0013dc7:	83 ec 14             	sub    esp,0x14
c0013dca:	68 14 01 00 00       	push   0x114
c0013dcf:	e8 6f ba ff ff       	call   c000f843 <malloc>
c0013dd4:	83 c4 0c             	add    esp,0xc
c0013dd7:	89 c3                	mov    ebx,eax
c0013dd9:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c0013ddf:	68 f8 ab 02 c0       	push   0xc002abf8
c0013de4:	50                   	push   eax
c0013de5:	e8 c8 f6 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c0013dea:	58                   	pop    eax
c0013deb:	5a                   	pop    edx
c0013dec:	6a 01                	push   0x1
c0013dee:	53                   	push   ebx
c0013def:	e8 22 f7 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c0013df4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013df7:	e8 78 f7 ff ff       	call   c0013574 <File::close()>
c0013dfc:	83 c4 10             	add    esp,0x10
c0013dff:	85 db                	test   ebx,ebx
c0013e01:	74 0f                	je     c0013e12 <User::loadClockSettings(int)+0x4c>
c0013e03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e05:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e0c:	83 c4 08             	add    esp,0x8
c0013e0f:	5b                   	pop    ebx
c0013e10:	ff e0                	jmp    eax
c0013e12:	83 c4 08             	add    esp,0x8
c0013e15:	5b                   	pop    ebx
c0013e16:	c3                   	ret    
c0013e17:	90                   	nop

c0013e18 <Clock::Clock(char const*)>:
c0013e18:	83 ec 0c             	sub    esp,0xc
c0013e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1f:	83 ec 08             	sub    esp,0x8
c0013e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e26:	50                   	push   eax
c0013e27:	e8 44 07 00 00       	call   c0014570 <Device::Device(char const*)>
c0013e2c:	83 c4 10             	add    esp,0x10
c0013e2f:	ba 20 ac 02 c0       	mov    edx,0xc002ac20
c0013e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e38:	89 10                	mov    DWORD PTR [eax],edx
c0013e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e48:	90                   	nop
c0013e49:	83 c4 0c             	add    esp,0xc
c0013e4c:	c3                   	ret    
c0013e4d:	90                   	nop

c0013e4e <Clock::~Clock()>:
c0013e4e:	83 ec 0c             	sub    esp,0xc
c0013e51:	ba 20 ac 02 c0       	mov    edx,0xc002ac20
c0013e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5a:	89 10                	mov    DWORD PTR [eax],edx
c0013e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e60:	83 ec 0c             	sub    esp,0xc
c0013e63:	50                   	push   eax
c0013e64:	e8 e9 03 00 00       	call   c0014252 <Device::~Device()>
c0013e69:	83 c4 10             	add    esp,0x10
c0013e6c:	90                   	nop
c0013e6d:	83 c4 0c             	add    esp,0xc
c0013e70:	c3                   	ret    
c0013e71:	90                   	nop

c0013e72 <Clock::~Clock()>:
c0013e72:	83 ec 0c             	sub    esp,0xc
c0013e75:	83 ec 0c             	sub    esp,0xc
c0013e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e7c:	e8 cd ff ff ff       	call   c0013e4e <Clock::~Clock()>
c0013e81:	83 c4 10             	add    esp,0x10
c0013e84:	83 ec 08             	sub    esp,0x8
c0013e87:	68 58 01 00 00       	push   0x158
c0013e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e90:	e8 e5 ef ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0013e95:	83 c4 10             	add    esp,0x10
c0013e98:	83 c4 0c             	add    esp,0xc
c0013e9b:	c3                   	ret    

c0013e9c <Clock::timeInSecondsLocal()>:
c0013e9c:	53                   	push   ebx
c0013e9d:	83 ec 14             	sub    esp,0x14
c0013ea0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ea4:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ea6:	50                   	push   eax
c0013ea7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013eaa:	0f b6 0d f8 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e5f8
c0013eb1:	03 0d fc e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e5fc
c0013eb7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ebd:	89 cb                	mov    ebx,ecx
c0013ebf:	c1 fb 1f             	sar    ebx,0x1f
c0013ec2:	01 c8                	add    eax,ecx
c0013ec4:	11 da                	adc    edx,ebx
c0013ec6:	83 c4 10             	add    esp,0x10
c0013ec9:	31 c9                	xor    ecx,ecx
c0013ecb:	80 3d f9 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5f9,0x0
c0013ed2:	74 05                	je     c0013ed9 <Clock::timeInSecondsLocal()+0x3d>
c0013ed4:	b9 08 07 00 00       	mov    ecx,0x708
c0013ed9:	31 db                	xor    ebx,ebx
c0013edb:	01 c8                	add    eax,ecx
c0013edd:	11 da                	adc    edx,ebx
c0013edf:	83 c4 08             	add    esp,0x8
c0013ee2:	5b                   	pop    ebx
c0013ee3:	c3                   	ret    

c0013ee4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ee4:	57                   	push   edi
c0013ee5:	56                   	push   esi
c0013ee6:	53                   	push   ebx
c0013ee7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013eeb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013eef:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ef1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ef5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013ef8:	0f b6 05 f8 e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e5f8
c0013eff:	03 05 fc e5 02 c0    	add    eax,DWORD PTR ds:0xc002e5fc
c0013f05:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f0b:	99                   	cdq    
c0013f0c:	29 c6                	sub    esi,eax
c0013f0e:	19 d7                	sbb    edi,edx
c0013f10:	89 f0                	mov    eax,esi
c0013f12:	89 fa                	mov    edx,edi
c0013f14:	31 f6                	xor    esi,esi
c0013f16:	80 3d f9 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5f9,0x0
c0013f1d:	74 05                	je     c0013f24 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f1f:	be 08 07 00 00       	mov    esi,0x708
c0013f24:	31 ff                	xor    edi,edi
c0013f26:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f2a:	29 f0                	sub    eax,esi
c0013f2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f30:	19 fa                	sbb    edx,edi
c0013f32:	89 d8                	mov    eax,ebx
c0013f34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f38:	5b                   	pop    ebx
c0013f39:	5e                   	pop    esi
c0013f3a:	5f                   	pop    edi
c0013f3b:	ff e0                	jmp    eax

c0013f3d <datetimeToSeconds(datetime_t)>:
c0013f3d:	55                   	push   ebp
c0013f3e:	57                   	push   edi
c0013f3f:	56                   	push   esi
c0013f40:	53                   	push   ebx
c0013f41:	83 ec 14             	sub    esp,0x14
c0013f44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f48:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f4c:	89 d3                	mov    ebx,edx
c0013f4e:	0f b6 c6             	movzx  eax,dh
c0013f51:	c1 eb 10             	shr    ebx,0x10
c0013f54:	48                   	dec    eax
c0013f55:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f5a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f5e:	0f b6 f5             	movzx  esi,ch
c0013f61:	89 cf                	mov    edi,ecx
c0013f63:	6b f6 3c             	imul   esi,esi,0x3c
c0013f66:	c1 ef 10             	shr    edi,0x10
c0013f69:	0f b6 c9             	movzx  ecx,cl
c0013f6c:	89 f8                	mov    eax,edi
c0013f6e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f74:	0f b6 f8             	movzx  edi,al
c0013f77:	0f b6 d2             	movzx  edx,dl
c0013f7a:	01 fe                	add    esi,edi
c0013f7c:	01 f1                	add    ecx,esi
c0013f7e:	0f b7 f3             	movzx  esi,bx
c0013f81:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f85:	c1 f9 1f             	sar    ecx,0x1f
c0013f88:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f8d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f91:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f96:	8b 0c 8d 60 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53a0]
c0013f9d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013fa1:	76 29                	jbe    c0013fcc <datetimeToSeconds(datetime_t)+0x8f>
c0013fa3:	f6 c3 03             	test   bl,0x3
c0013fa6:	75 24                	jne    c0013fcc <datetimeToSeconds(datetime_t)+0x8f>
c0013fa8:	31 d2                	xor    edx,edx
c0013faa:	bf 64 00 00 00       	mov    edi,0x64
c0013faf:	89 d8                	mov    eax,ebx
c0013fb1:	66 f7 f7             	div    di
c0013fb4:	66 85 d2             	test   dx,dx
c0013fb7:	75 12                	jne    c0013fcb <datetimeToSeconds(datetime_t)+0x8e>
c0013fb9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013fbf:	bf 90 01 00 00       	mov    edi,0x190
c0013fc4:	99                   	cdq    
c0013fc5:	f7 ff                	idiv   edi
c0013fc7:	85 d2                	test   edx,edx
c0013fc9:	75 01                	jne    c0013fcc <datetimeToSeconds(datetime_t)+0x8f>
c0013fcb:	41                   	inc    ecx
c0013fcc:	66 83 fb 46          	cmp    bx,0x46
c0013fd0:	76 45                	jbe    c0014017 <datetimeToSeconds(datetime_t)+0xda>
c0013fd2:	bb 46 00 00 00       	mov    ebx,0x46
c0013fd7:	bf 64 00 00 00       	mov    edi,0x64
c0013fdc:	bd 90 01 00 00       	mov    ebp,0x190
c0013fe1:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fe6:	f6 c3 03             	test   bl,0x3
c0013fe9:	75 23                	jne    c001400e <datetimeToSeconds(datetime_t)+0xd1>
c0013feb:	89 d8                	mov    eax,ebx
c0013fed:	99                   	cdq    
c0013fee:	f7 ff                	idiv   edi
c0013ff0:	b8 6e 01 00 00       	mov    eax,0x16e
c0013ff5:	85 d2                	test   edx,edx
c0013ff7:	75 15                	jne    c001400e <datetimeToSeconds(datetime_t)+0xd1>
c0013ff9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fff:	99                   	cdq    
c0014000:	f7 fd                	idiv   ebp
c0014002:	83 fa 01             	cmp    edx,0x1
c0014005:	19 c0                	sbb    eax,eax
c0014007:	f7 d0                	not    eax
c0014009:	05 6e 01 00 00       	add    eax,0x16e
c001400e:	01 c1                	add    ecx,eax
c0014010:	43                   	inc    ebx
c0014011:	39 f3                	cmp    ebx,esi
c0014013:	7c cc                	jl     c0013fe1 <datetimeToSeconds(datetime_t)+0xa4>
c0014015:	eb 35                	jmp    c001404c <datetimeToSeconds(datetime_t)+0x10f>
c0014017:	74 33                	je     c001404c <datetimeToSeconds(datetime_t)+0x10f>
c0014019:	b8 45 00 00 00       	mov    eax,0x45
c001401e:	89 c2                	mov    edx,eax
c0014020:	83 e2 03             	and    edx,0x3
c0014023:	39 f0                	cmp    eax,esi
c0014025:	7e 0f                	jle    c0014036 <datetimeToSeconds(datetime_t)+0xf9>
c0014027:	83 fa 01             	cmp    edx,0x1
c001402a:	19 d2                	sbb    edx,edx
c001402c:	48                   	dec    eax
c001402d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014034:	eb e8                	jmp    c001401e <datetimeToSeconds(datetime_t)+0xe1>
c0014036:	b8 6d 01 00 00       	mov    eax,0x16d
c001403b:	85 d2                	test   edx,edx
c001403d:	75 0b                	jne    c001404a <datetimeToSeconds(datetime_t)+0x10d>
c001403f:	66 83 fb 01          	cmp    bx,0x1
c0014043:	19 c0                	sbb    eax,eax
c0014045:	05 6e 01 00 00       	add    eax,0x16e
c001404a:	29 c1                	sub    ecx,eax
c001404c:	b8 80 51 01 00       	mov    eax,0x15180
c0014051:	f7 e9                	imul   ecx
c0014053:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014057:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001405b:	83 c4 14             	add    esp,0x14
c001405e:	5b                   	pop    ebx
c001405f:	5e                   	pop    esi
c0014060:	5f                   	pop    edi
c0014061:	5d                   	pop    ebp
c0014062:	c3                   	ret    
c0014063:	90                   	nop

c0014064 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014064:	57                   	push   edi
c0014065:	56                   	push   esi
c0014066:	53                   	push   ebx
c0014067:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001406b:	8b 06                	mov    eax,DWORD PTR [esi]
c001406d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014070:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014074:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014078:	e8 c0 fe ff ff       	call   c0013f3d <datetimeToSeconds(datetime_t)>
c001407d:	59                   	pop    ecx
c001407e:	0f b6 0d f8 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e5f8
c0014085:	5b                   	pop    ebx
c0014086:	03 0d fc e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e5fc
c001408c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014092:	89 cb                	mov    ebx,ecx
c0014094:	c1 fb 1f             	sar    ebx,0x1f
c0014097:	29 c8                	sub    eax,ecx
c0014099:	19 da                	sbb    edx,ebx
c001409b:	31 c9                	xor    ecx,ecx
c001409d:	80 3d f9 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5f9,0x0
c00140a4:	74 05                	je     c00140ab <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00140a6:	b9 08 07 00 00       	mov    ecx,0x708
c00140ab:	31 db                	xor    ebx,ebx
c00140ad:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00140b1:	29 c8                	sub    eax,ecx
c00140b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140b7:	19 da                	sbb    edx,ebx
c00140b9:	89 f8                	mov    eax,edi
c00140bb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140bf:	5b                   	pop    ebx
c00140c0:	5e                   	pop    esi
c00140c1:	5f                   	pop    edi
c00140c2:	ff e0                	jmp    eax

c00140c4 <secondsToDatetime(unsigned long long)>:
c00140c4:	55                   	push   ebp
c00140c5:	57                   	push   edi
c00140c6:	56                   	push   esi
c00140c7:	53                   	push   ebx
c00140c8:	83 ec 1c             	sub    esp,0x1c
c00140cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140d3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140d7:	6a 00                	push   0x0
c00140d9:	68 80 51 01 00       	push   0x15180
c00140de:	55                   	push   ebp
c00140df:	57                   	push   edi
c00140e0:	e8 f7 28 01 00       	call   c00269dc <__udivdi3>
c00140e5:	83 c4 10             	add    esp,0x10
c00140e8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140f2:	6a 00                	push   0x0
c00140f4:	68 80 51 01 00       	push   0x15180
c00140f9:	55                   	push   ebp
c00140fa:	57                   	push   edi
c00140fb:	bf 10 0e 00 00       	mov    edi,0xe10
c0014100:	e8 d7 29 01 00       	call   c0026adc <__umoddi3>
c0014105:	83 c4 10             	add    esp,0x10
c0014108:	99                   	cdq    
c0014109:	f7 ff                	idiv   edi
c001410b:	bf 3c 00 00 00       	mov    edi,0x3c
c0014110:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014113:	89 d0                	mov    eax,edx
c0014115:	99                   	cdq    
c0014116:	f7 ff                	idiv   edi
c0014118:	85 db                	test   ebx,ebx
c001411a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001411d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014120:	79 11                	jns    c0014133 <secondsToDatetime(unsigned long long)+0x6f>
c0014122:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014126:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001412c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014131:	eb 07                	jmp    c001413a <secondsToDatetime(unsigned long long)+0x76>
c0014133:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014138:	89 d8                	mov    eax,ebx
c001413a:	bf b4 05 00 00       	mov    edi,0x5b4
c001413f:	99                   	cdq    
c0014140:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014145:	f7 f9                	idiv   ecx
c0014147:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001414c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014150:	31 d2                	xor    edx,edx
c0014152:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001415a:	01 c3                	add    ebx,eax
c001415c:	89 d8                	mov    eax,ebx
c001415e:	f7 f1                	div    ecx
c0014160:	31 d2                	xor    edx,edx
c0014162:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014165:	89 d8                	mov    eax,ebx
c0014167:	f7 f7                	div    edi
c0014169:	31 d2                	xor    edx,edx
c001416b:	29 c1                	sub    ecx,eax
c001416d:	89 d8                	mov    eax,ebx
c001416f:	f7 f5                	div    ebp
c0014171:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014176:	29 c1                	sub    ecx,eax
c0014178:	31 d2                	xor    edx,edx
c001417a:	89 c8                	mov    eax,ecx
c001417c:	f7 f5                	div    ebp
c001417e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014183:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014187:	31 d2                	xor    edx,edx
c0014189:	89 c8                	mov    eax,ecx
c001418b:	f7 f5                	div    ebp
c001418d:	31 d2                	xor    edx,edx
c001418f:	01 c3                	add    ebx,eax
c0014191:	89 c8                	mov    eax,ecx
c0014193:	f7 f7                	div    edi
c0014195:	bf 99 00 00 00       	mov    edi,0x99
c001419a:	29 c3                	sub    ebx,eax
c001419c:	31 d2                	xor    edx,edx
c001419e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00141a6:	29 c3                	sub    ebx,eax
c00141a8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00141ab:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00141ae:	bb 05 00 00 00       	mov    ebx,0x5
c00141b3:	83 c1 02             	add    ecx,0x2
c00141b6:	89 c8                	mov    eax,ecx
c00141b8:	f7 f7                	div    edi
c00141ba:	31 d2                	xor    edx,edx
c00141bc:	89 c7                	mov    edi,eax
c00141be:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00141c4:	83 c0 02             	add    eax,0x2
c00141c7:	f7 f3                	div    ebx
c00141c9:	89 eb                	mov    ebx,ebp
c00141cb:	29 c3                	sub    ebx,eax
c00141cd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141d3:	88 1e                	mov    BYTE PTR [esi],bl
c00141d5:	19 c0                	sbb    eax,eax
c00141d7:	31 d2                	xor    edx,edx
c00141d9:	83 e0 0c             	and    eax,0xc
c00141dc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141e0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141e8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141ec:	83 f9 01             	cmp    ecx,0x1
c00141ef:	0f 96 c2             	setbe  dl
c00141f2:	41                   	inc    ecx
c00141f3:	01 d0                	add    eax,edx
c00141f5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141f8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141fc:	83 c4 1c             	add    esp,0x1c
c00141ff:	89 f0                	mov    eax,esi
c0014201:	5b                   	pop    ebx
c0014202:	5e                   	pop    esi
c0014203:	5f                   	pop    edi
c0014204:	5d                   	pop    ebp
c0014205:	c2 04 00             	ret    0x4

c0014208 <Clock::timeInDatetimeLocal()>:
c0014208:	53                   	push   ebx
c0014209:	83 ec 14             	sub    esp,0x14
c001420c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014210:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014214:	e8 83 fc ff ff       	call   c0013e9c <Clock::timeInSecondsLocal()>
c0014219:	83 c4 0c             	add    esp,0xc
c001421c:	52                   	push   edx
c001421d:	50                   	push   eax
c001421e:	53                   	push   ebx
c001421f:	e8 a0 fe ff ff       	call   c00140c4 <secondsToDatetime(unsigned long long)>
c0014224:	89 d8                	mov    eax,ebx
c0014226:	83 c4 14             	add    esp,0x14
c0014229:	5b                   	pop    ebx
c001422a:	c2 04 00             	ret    0x4
c001422d:	90                   	nop

c001422e <Device::hibernate()>:
c001422e:	c3                   	ret    
c001422f:	90                   	nop

c0014230 <Device::wake()>:
c0014230:	c3                   	ret    
c0014231:	90                   	nop

c0014232 <Device::detect()>:
c0014232:	c3                   	ret    
c0014233:	90                   	nop

c0014234 <Device::disableLegacy()>:
c0014234:	c3                   	ret    
c0014235:	90                   	nop

c0014236 <Device::powerSaving(PowerSavingLevel)>:
c0014236:	c3                   	ret    
c0014237:	90                   	nop

c0014238 <DriverlessDevice::close(int, int, void*)>:
c0014238:	31 c0                	xor    eax,eax
c001423a:	c3                   	ret    
c001423b:	90                   	nop

c001423c <DriverlessDevice::detect()>:
c001423c:	c3                   	ret    
c001423d:	90                   	nop

c001423e <DriverlessDevice::open(int, int, void*)>:
c001423e:	83 ec 18             	sub    esp,0x18
c0014241:	68 90 ac 02 c0       	push   0xc002ac90
c0014246:	e8 bc 63 00 00       	call   c001a607 <Krnl::panic(char const*)>
c001424b:	83 c8 ff             	or     eax,0xffffffff
c001424e:	83 c4 1c             	add    esp,0x1c
c0014251:	c3                   	ret    

c0014252 <Device::~Device()>:
c0014252:	ba b8 ac 02 c0       	mov    edx,0xc002acb8
c0014257:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001425b:	89 10                	mov    DWORD PTR [eax],edx
c001425d:	90                   	nop
c001425e:	c3                   	ret    
c001425f:	90                   	nop

c0014260 <Device::~Device()>:
c0014260:	83 ec 0c             	sub    esp,0xc
c0014263:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014267:	e8 e6 ff ff ff       	call   c0014252 <Device::~Device()>
c001426c:	83 c4 04             	add    esp,0x4
c001426f:	83 ec 08             	sub    esp,0x8
c0014272:	68 58 01 00 00       	push   0x158
c0014277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001427b:	e8 fa eb ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0014280:	83 c4 10             	add    esp,0x10
c0014283:	83 c4 0c             	add    esp,0xc
c0014286:	c3                   	ret    
c0014287:	90                   	nop

c0014288 <Device::findAndLoadDriver()>:
c0014288:	c3                   	ret    
c0014289:	90                   	nop

c001428a <Device::preOpenPCI(PCIDeviceInfo)>:
c001428a:	57                   	push   edi
c001428b:	b9 09 00 00 00       	mov    ecx,0x9
c0014290:	56                   	push   esi
c0014291:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014295:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014299:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00142a3:	81 c7 18 01 00 00    	add    edi,0x118
c00142a9:	fc                   	cld    
c00142aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142ac:	5e                   	pop    esi
c00142ad:	5f                   	pop    edi
c00142ae:	c3                   	ret    
c00142af:	90                   	nop

c00142b0 <Device::preOpenACPI(void*, char*, char*)>:
c00142b0:	56                   	push   esi
c00142b1:	53                   	push   ebx
c00142b2:	83 ec 08             	sub    esp,0x8
c00142b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142b9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142bd:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142cb:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142d1:	6a 1e                	push   0x1e
c00142d3:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142dd:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142e3:	50                   	push   eax
c00142e4:	e8 5b c4 fe ff       	call   c0000744 <memcpy>
c00142e9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142ed:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142f1:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142f9:	83 c4 14             	add    esp,0x14
c00142fc:	5b                   	pop    ebx
c00142fd:	5e                   	pop    esi
c00142fe:	e9 41 c4 fe ff       	jmp    c0000744 <memcpy>
c0014303:	90                   	nop

c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014308:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001430d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014314:	75 0b                	jne    c0014321 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014316:	8b 00                	mov    eax,DWORD PTR [eax]
c0014318:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001431c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001431f:	eb 1e                	jmp    c001433f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014321:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0014326:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001432c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014332:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014334:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001433c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001433f:	ff e0                	jmp    eax
c0014341:	90                   	nop

c0014342 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014346:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001434b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014352:	75 0b                	jne    c001435f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014354:	8b 00                	mov    eax,DWORD PTR [eax]
c0014356:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001435a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001435d:	eb 1e                	jmp    c001437d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001435f:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0014364:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001436a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014370:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014372:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014376:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001437a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001437d:	ff e0                	jmp    eax
c001437f:	90                   	nop

c0014380 <Device::addChild(Device*)>:
c0014380:	53                   	push   ebx
c0014381:	83 ec 08             	sub    esp,0x8
c0014384:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001438c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014392:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014398:	8b 13                	mov    edx,DWORD PTR [ebx]
c001439a:	85 d2                	test   edx,edx
c001439c:	74 04                	je     c00143a2 <Device::addChild(Device*)+0x22>
c001439e:	89 d3                	mov    ebx,edx
c00143a0:	eb f6                	jmp    c0014398 <Device::addChild(Device*)+0x18>
c00143a2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00143a5:	83 ec 0c             	sub    esp,0xc
c00143a8:	6a 08                	push   0x8
c00143aa:	e8 94 b4 ff ff       	call   c000f843 <malloc>
c00143af:	89 03                	mov    DWORD PTR [ebx],eax
c00143b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143be:	83 c4 18             	add    esp,0x18
c00143c1:	5b                   	pop    ebx
c00143c2:	c3                   	ret    
c00143c3:	90                   	nop

c00143c4 <Device::removeAllChildren()>:
c00143c4:	56                   	push   esi
c00143c5:	53                   	push   ebx
c00143c6:	52                   	push   edx
c00143c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143cb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143d4:	74 17                	je     c00143ed <Device::removeAllChildren()+0x29>
c00143d6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143d9:	85 c0                	test   eax,eax
c00143db:	74 0c                	je     c00143e9 <Device::removeAllChildren()+0x25>
c00143dd:	83 ec 0c             	sub    esp,0xc
c00143e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00143e2:	50                   	push   eax
c00143e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143e6:	83 c4 10             	add    esp,0x10
c00143e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143eb:	eb e4                	jmp    c00143d1 <Device::removeAllChildren()+0xd>
c00143ed:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143f9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014406:	58                   	pop    eax
c0014407:	5b                   	pop    ebx
c0014408:	5e                   	pop    esi
c0014409:	c3                   	ret    

c001440a <Device::hibernateAll()>:
c001440a:	53                   	push   ebx
c001440b:	83 ec 14             	sub    esp,0x14
c001440e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014412:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014414:	53                   	push   ebx
c0014415:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014418:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001441e:	83 c4 10             	add    esp,0x10
c0014421:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014424:	74 0f                	je     c0014435 <Device::hibernateAll()+0x2b>
c0014426:	83 ec 0c             	sub    esp,0xc
c0014429:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001442c:	e8 d9 ff ff ff       	call   c001440a <Device::hibernateAll()>
c0014431:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014433:	eb e9                	jmp    c001441e <Device::hibernateAll()+0x14>
c0014435:	83 c4 08             	add    esp,0x8
c0014438:	5b                   	pop    ebx
c0014439:	c3                   	ret    

c001443a <Device::wakeAll()>:
c001443a:	53                   	push   ebx
c001443b:	83 ec 14             	sub    esp,0x14
c001443e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014442:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014444:	53                   	push   ebx
c0014445:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014448:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014454:	74 0f                	je     c0014465 <Device::wakeAll()+0x2b>
c0014456:	83 ec 0c             	sub    esp,0xc
c0014459:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001445c:	e8 d9 ff ff ff       	call   c001443a <Device::wakeAll()>
c0014461:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014463:	eb e9                	jmp    c001444e <Device::wakeAll()+0x14>
c0014465:	83 c4 08             	add    esp,0x8
c0014468:	5b                   	pop    ebx
c0014469:	c3                   	ret    

c001446a <Device::detectAll()>:
c001446a:	53                   	push   ebx
c001446b:	83 ec 14             	sub    esp,0x14
c001446e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014472:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014474:	53                   	push   ebx
c0014475:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014478:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001447e:	83 c4 10             	add    esp,0x10
c0014481:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014484:	74 0f                	je     c0014495 <Device::detectAll()+0x2b>
c0014486:	83 ec 0c             	sub    esp,0xc
c0014489:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001448c:	e8 d9 ff ff ff       	call   c001446a <Device::detectAll()>
c0014491:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014493:	eb e9                	jmp    c001447e <Device::detectAll()+0x14>
c0014495:	83 c4 08             	add    esp,0x8
c0014498:	5b                   	pop    ebx
c0014499:	c3                   	ret    

c001449a <Device::disableLegacyAll()>:
c001449a:	53                   	push   ebx
c001449b:	83 ec 14             	sub    esp,0x14
c001449e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a4:	53                   	push   ebx
c00144a5:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00144a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144ae:	83 c4 10             	add    esp,0x10
c00144b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144b4:	74 0f                	je     c00144c5 <Device::disableLegacyAll()+0x2b>
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144bc:	e8 d9 ff ff ff       	call   c001449a <Device::disableLegacyAll()>
c00144c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c3:	eb e9                	jmp    c00144ae <Device::disableLegacyAll()+0x14>
c00144c5:	83 c4 08             	add    esp,0x8
c00144c8:	5b                   	pop    ebx
c00144c9:	c3                   	ret    

c00144ca <Device::loadDriversForAll()>:
c00144ca:	53                   	push   ebx
c00144cb:	83 ec 08             	sub    esp,0x8
c00144ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144d2:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144d8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144da:	85 db                	test   ebx,ebx
c00144dc:	74 12                	je     c00144f0 <Device::loadDriversForAll()+0x26>
c00144de:	83 ec 0c             	sub    esp,0xc
c00144e1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144e4:	e8 e1 ff ff ff       	call   c00144ca <Device::loadDriversForAll()>
c00144e9:	83 c4 10             	add    esp,0x10
c00144ec:	89 d8                	mov    eax,ebx
c00144ee:	eb e8                	jmp    c00144d8 <Device::loadDriversForAll()+0xe>
c00144f0:	83 c4 08             	add    esp,0x8
c00144f3:	5b                   	pop    ebx
c00144f4:	c3                   	ret    
c00144f5:	90                   	nop

c00144f6 <Device::closeAll()>:
c00144f6:	53                   	push   ebx
c00144f7:	83 ec 08             	sub    esp,0x8
c00144fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014500:	6a 00                	push   0x0
c0014502:	6a 00                	push   0x0
c0014504:	6a 00                	push   0x0
c0014506:	53                   	push   ebx
c0014507:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001450a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014510:	83 c4 10             	add    esp,0x10
c0014513:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014516:	74 0f                	je     c0014527 <Device::closeAll()+0x31>
c0014518:	83 ec 0c             	sub    esp,0xc
c001451b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001451e:	e8 d3 ff ff ff       	call   c00144f6 <Device::closeAll()>
c0014523:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014525:	eb e9                	jmp    c0014510 <Device::closeAll()+0x1a>
c0014527:	83 c4 08             	add    esp,0x8
c001452a:	5b                   	pop    ebx
c001452b:	c3                   	ret    

c001452c <Device::powerSavingAll(PowerSavingLevel)>:
c001452c:	56                   	push   esi
c001452d:	53                   	push   ebx
c001452e:	83 ec 0c             	sub    esp,0xc
c0014531:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014535:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014539:	8b 03                	mov    eax,DWORD PTR [ebx]
c001453b:	56                   	push   esi
c001453c:	53                   	push   ebx
c001453d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014540:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014546:	83 c4 10             	add    esp,0x10
c0014549:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001454c:	74 0f                	je     c001455d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001454e:	52                   	push   edx
c001454f:	52                   	push   edx
c0014550:	56                   	push   esi
c0014551:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014554:	e8 d3 ff ff ff       	call   c001452c <Device::powerSavingAll(PowerSavingLevel)>
c0014559:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001455b:	eb e9                	jmp    c0014546 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001455d:	58                   	pop    eax
c001455e:	5b                   	pop    ebx
c001455f:	5e                   	pop    esi
c0014560:	c3                   	ret    
c0014561:	90                   	nop

c0014562 <Device::setName(char const*)>:
c0014562:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001456a:	e9 c5 c2 fe ff       	jmp    c0000834 <strcpy>
c001456f:	90                   	nop

c0014570 <Device::Device(char const*)>:
c0014570:	83 ec 1c             	sub    esp,0x1c
c0014573:	ba b8 ac 02 c0       	mov    edx,0xc002acb8
c0014578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457c:	89 10                	mov    DWORD PTR [eax],edx
c001457e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014582:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001458c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014590:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001459a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145b6:	83 ec 08             	sub    esp,0x8
c00145b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145c1:	e8 9c ff ff ff       	call   c0014562 <Device::setName(char const*)>
c00145c6:	83 c4 10             	add    esp,0x10
c00145c9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145d1:	83 ec 0c             	sub    esp,0xc
c00145d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145d8:	e8 66 b2 ff ff       	call   c000f843 <malloc>
c00145dd:	83 c4 10             	add    esp,0x10
c00145e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145f1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145fb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014601:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014607:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014611:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014627:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001462e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014632:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001463c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014640:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001464a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001465c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014666:	90                   	nop
c0014667:	83 c4 1c             	add    esp,0x1c
c001466a:	c3                   	ret    
c001466b:	90                   	nop

c001466c <Device::getName()>:
c001466c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014670:	05 d0 00 00 00       	add    eax,0xd0
c0014675:	c3                   	ret    

c0014676 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014676:	83 ec 0c             	sub    esp,0xc
c0014679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467d:	83 ec 08             	sub    esp,0x8
c0014680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014684:	50                   	push   eax
c0014685:	e8 e6 fe ff ff       	call   c0014570 <Device::Device(char const*)>
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	ba e4 ac 02 c0       	mov    edx,0xc002ace4
c0014692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014696:	89 10                	mov    DWORD PTR [eax],edx
c0014698:	90                   	nop
c0014699:	83 c4 0c             	add    esp,0xc
c001469c:	c3                   	ret    
c001469d:	90                   	nop

c001469e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001469e:	57                   	push   edi
c001469f:	56                   	push   esi
c00146a0:	53                   	push   ebx
c00146a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00146a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146ad:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00146b3:	75 0c                	jne    c00146c1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146b5:	52                   	push   edx
c00146b6:	52                   	push   edx
c00146b7:	53                   	push   ebx
c00146b8:	56                   	push   esi
c00146b9:	e8 5c 42 01 00       	call   c002891a <LinkedList<Device>::addElement(Device*)>
c00146be:	83 c4 10             	add    esp,0x10
c00146c1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146ca:	74 12                	je     c00146de <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146cc:	50                   	push   eax
c00146cd:	57                   	push   edi
c00146ce:	56                   	push   esi
c00146cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146d2:	e8 c7 ff ff ff       	call   c001469e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146d9:	83 c4 10             	add    esp,0x10
c00146dc:	eb e9                	jmp    c00146c7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146de:	5b                   	pop    ebx
c00146df:	5e                   	pop    esi
c00146e0:	5f                   	pop    edi
c00146e1:	c3                   	ret    

c00146e2 <getDevicesOfType(DeviceType)>:
c00146e2:	53                   	push   ebx
c00146e3:	83 ec 14             	sub    esp,0x14
c00146e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146ea:	53                   	push   ebx
c00146eb:	e8 06 43 01 00       	call   c00289f6 <LinkedList<Device>::LinkedList()>
c00146f0:	83 c4 0c             	add    esp,0xc
c00146f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146f7:	53                   	push   ebx
c00146f8:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c00146fe:	e8 9b ff ff ff       	call   c001469e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014703:	89 d8                	mov    eax,ebx
c0014705:	83 c4 18             	add    esp,0x18
c0014708:	5b                   	pop    ebx
c0014709:	c2 04 00             	ret    0x4

c001470c <HardDiskController::HardDiskController(char const*)>:
c001470c:	83 ec 0c             	sub    esp,0xc
c001470f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014713:	83 ec 08             	sub    esp,0x8
c0014716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471a:	50                   	push   eax
c001471b:	e8 50 fe ff ff       	call   c0014570 <Device::Device(char const*)>
c0014720:	83 c4 10             	add    esp,0x10
c0014723:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c0014728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472c:	89 10                	mov    DWORD PTR [eax],edx
c001472e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014732:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001473c:	90                   	nop
c001473d:	83 c4 0c             	add    esp,0xc
c0014740:	c3                   	ret    
c0014741:	90                   	nop

c0014742 <HardDiskController::~HardDiskController()>:
c0014742:	83 ec 0c             	sub    esp,0xc
c0014745:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c001474a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474e:	89 10                	mov    DWORD PTR [eax],edx
c0014750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014754:	83 ec 0c             	sub    esp,0xc
c0014757:	50                   	push   eax
c0014758:	e8 f5 fa ff ff       	call   c0014252 <Device::~Device()>
c001475d:	83 c4 10             	add    esp,0x10
c0014760:	90                   	nop
c0014761:	83 c4 0c             	add    esp,0xc
c0014764:	c3                   	ret    
c0014765:	90                   	nop

c0014766 <HardDiskController::~HardDiskController()>:
c0014766:	83 ec 0c             	sub    esp,0xc
c0014769:	83 ec 0c             	sub    esp,0xc
c001476c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014770:	e8 cd ff ff ff       	call   c0014742 <HardDiskController::~HardDiskController()>
c0014775:	83 c4 10             	add    esp,0x10
c0014778:	83 ec 08             	sub    esp,0x8
c001477b:	68 58 01 00 00       	push   0x158
c0014780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014784:	e8 f1 e6 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0014789:	83 c4 10             	add    esp,0x10
c001478c:	83 c4 0c             	add    esp,0xc
c001478f:	c3                   	ret    

c0014790 <PhysicalDisk::eject()>:
c0014790:	83 ec 18             	sub    esp,0x18
c0014793:	68 34 ad 02 c0       	push   0xc002ad34
c0014798:	e8 bd e7 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001479d:	83 c8 ff             	or     eax,0xffffffff
c00147a0:	83 c4 1c             	add    esp,0x1c
c00147a3:	c3                   	ret    

c00147a4 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00147a4:	83 ec 0c             	sub    esp,0xc
c00147a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ab:	83 ec 08             	sub    esp,0x8
c00147ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147b2:	50                   	push   eax
c00147b3:	e8 b8 fd ff ff       	call   c0014570 <Device::Device(char const*)>
c00147b8:	83 c4 10             	add    esp,0x10
c00147bb:	ba 64 ad 02 c0       	mov    edx,0xc002ad64
c00147c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c4:	89 10                	mov    DWORD PTR [eax],edx
c00147c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ca:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147f2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014806:	90                   	nop
c0014807:	83 c4 0c             	add    esp,0xc
c001480a:	c3                   	ret    
c001480b:	90                   	nop

c001480c <PhysicalDisk::startCache()>:
c001480c:	56                   	push   esi
c001480d:	53                   	push   ebx
c001480e:	83 ec 10             	sub    esp,0x10
c0014811:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014815:	6a 44                	push   0x44
c0014817:	e8 27 b0 ff ff       	call   c000f843 <malloc>
c001481c:	89 c6                	mov    esi,eax
c001481e:	58                   	pop    eax
c001481f:	5a                   	pop    edx
c0014820:	53                   	push   ebx
c0014821:	56                   	push   esi
c0014822:	e8 35 27 00 00       	call   c0016f5c <VCache::VCache(PhysicalDisk*)>
c0014827:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001482d:	83 c4 14             	add    esp,0x14
c0014830:	5b                   	pop    ebx
c0014831:	5e                   	pop    esi
c0014832:	c3                   	ret    
c0014833:	90                   	nop

c0014834 <PhysicalDisk::~PhysicalDisk()>:
c0014834:	83 ec 0c             	sub    esp,0xc
c0014837:	ba 64 ad 02 c0       	mov    edx,0xc002ad64
c001483c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014840:	89 10                	mov    DWORD PTR [eax],edx
c0014842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014846:	83 ec 0c             	sub    esp,0xc
c0014849:	50                   	push   eax
c001484a:	e8 03 fa ff ff       	call   c0014252 <Device::~Device()>
c001484f:	83 c4 10             	add    esp,0x10
c0014852:	90                   	nop
c0014853:	83 c4 0c             	add    esp,0xc
c0014856:	c3                   	ret    
c0014857:	90                   	nop

c0014858 <PhysicalDisk::~PhysicalDisk()>:
c0014858:	83 ec 0c             	sub    esp,0xc
c001485b:	83 ec 0c             	sub    esp,0xc
c001485e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014862:	e8 cd ff ff ff       	call   c0014834 <PhysicalDisk::~PhysicalDisk()>
c0014867:	83 c4 10             	add    esp,0x10
c001486a:	83 ec 08             	sub    esp,0x8
c001486d:	68 6c 01 00 00       	push   0x16c
c0014872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014876:	e8 ff e5 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c001487b:	83 c4 10             	add    esp,0x10
c001487e:	83 c4 0c             	add    esp,0xc
c0014881:	c3                   	ret    

c0014882 <FPU::FPU(char const*)>:
c0014882:	83 ec 0c             	sub    esp,0xc
c0014885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014889:	83 ec 08             	sub    esp,0x8
c001488c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014890:	50                   	push   eax
c0014891:	e8 da fc ff ff       	call   c0014570 <Device::Device(char const*)>
c0014896:	83 c4 10             	add    esp,0x10
c0014899:	ba a8 ad 02 c0       	mov    edx,0xc002ada8
c001489e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a2:	89 10                	mov    DWORD PTR [eax],edx
c00148a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a8:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00148b2:	90                   	nop
c00148b3:	83 c4 0c             	add    esp,0xc
c00148b6:	c3                   	ret    
c00148b7:	90                   	nop

c00148b8 <FPU::~FPU()>:
c00148b8:	83 ec 0c             	sub    esp,0xc
c00148bb:	ba a8 ad 02 c0       	mov    edx,0xc002ada8
c00148c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c4:	89 10                	mov    DWORD PTR [eax],edx
c00148c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ca:	83 ec 0c             	sub    esp,0xc
c00148cd:	50                   	push   eax
c00148ce:	e8 7f f9 ff ff       	call   c0014252 <Device::~Device()>
c00148d3:	83 c4 10             	add    esp,0x10
c00148d6:	90                   	nop
c00148d7:	83 c4 0c             	add    esp,0xc
c00148da:	c3                   	ret    
c00148db:	90                   	nop

c00148dc <FPU::~FPU()>:
c00148dc:	83 ec 0c             	sub    esp,0xc
c00148df:	83 ec 0c             	sub    esp,0xc
c00148e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148e6:	e8 cd ff ff ff       	call   c00148b8 <FPU::~FPU()>
c00148eb:	83 c4 10             	add    esp,0x10
c00148ee:	83 ec 08             	sub    esp,0x8
c00148f1:	68 58 01 00 00       	push   0x158
c00148f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148fa:	e8 7b e5 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c00148ff:	83 c4 10             	add    esp,0x10
c0014902:	83 c4 0c             	add    esp,0xc
c0014905:	c3                   	ret    

c0014906 <setupFPU()>:
c0014906:	53                   	push   ebx
c0014907:	83 ec 08             	sub    esp,0x8
c001490a:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0014910:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014917:	74 19                	je     c0014932 <setupFPU()+0x2c>
c0014919:	83 ec 0c             	sub    esp,0xc
c001491c:	68 58 01 00 00       	push   0x158
c0014921:	e8 1d af ff ff       	call   c000f843 <malloc>
c0014926:	89 c3                	mov    ebx,eax
c0014928:	89 04 24             	mov    DWORD PTR [esp],eax
c001492b:	e8 32 0c 01 00       	call   c0025562 <AVX::AVX()>
c0014930:	eb 5b                	jmp    c001498d <setupFPU()+0x87>
c0014932:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014938:	84 c0                	test   al,al
c001493a:	79 19                	jns    c0014955 <setupFPU()+0x4f>
c001493c:	83 ec 0c             	sub    esp,0xc
c001493f:	68 58 01 00 00       	push   0x158
c0014944:	e8 fa ae ff ff       	call   c000f843 <malloc>
c0014949:	89 c3                	mov    ebx,eax
c001494b:	89 04 24             	mov    DWORD PTR [esp],eax
c001494e:	e8 35 0d 01 00       	call   c0025688 <SSE::SSE()>
c0014953:	eb 38                	jmp    c001498d <setupFPU()+0x87>
c0014955:	a8 20                	test   al,0x20
c0014957:	74 19                	je     c0014972 <setupFPU()+0x6c>
c0014959:	83 ec 0c             	sub    esp,0xc
c001495c:	68 58 01 00 00       	push   0x158
c0014961:	e8 dd ae ff ff       	call   c000f843 <malloc>
c0014966:	89 c3                	mov    ebx,eax
c0014968:	89 04 24             	mov    DWORD PTR [esp],eax
c001496b:	e8 82 0c 01 00       	call   c00255f2 <MMX::MMX()>
c0014970:	eb 1b                	jmp    c001498d <setupFPU()+0x87>
c0014972:	a8 10                	test   al,0x10
c0014974:	74 1c                	je     c0014992 <setupFPU()+0x8c>
c0014976:	83 ec 0c             	sub    esp,0xc
c0014979:	68 58 01 00 00       	push   0x158
c001497e:	e8 c0 ae ff ff       	call   c000f843 <malloc>
c0014983:	89 c3                	mov    ebx,eax
c0014985:	89 04 24             	mov    DWORD PTR [esp],eax
c0014988:	e8 89 0d 01 00       	call   c0025716 <x87::x87()>
c001498d:	83 c4 10             	add    esp,0x10
c0014990:	eb 24                	jmp    c00149b6 <setupFPU()+0xb0>
c0014992:	83 e0 ef             	and    eax,0xffffffef
c0014995:	83 ec 0c             	sub    esp,0xc
c0014998:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001499e:	68 94 ad 02 c0       	push   0xc002ad94
c00149a3:	e8 b2 e5 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00149a8:	0f 20 c0             	mov    eax,cr0
c00149ab:	83 c8 04             	or     eax,0x4
c00149ae:	0f 22 c0             	mov    cr0,eax
c00149b1:	31 db                	xor    ebx,ebx
c00149b3:	83 c4 10             	add    esp,0x10
c00149b6:	89 d8                	mov    eax,ebx
c00149b8:	83 c4 08             	add    esp,0x8
c00149bb:	5b                   	pop    ebx
c00149bc:	c3                   	ret    
c00149bd:	90                   	nop

c00149be <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149c6:	c1 e0 04             	shl    eax,0x4
c00149c9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149cd:	8d 50 10             	lea    edx,[eax+0x10]
c00149d0:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149d6:	74 08                	je     c00149e0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149d8:	83 c0 04             	add    eax,0x4
c00149db:	39 d0                	cmp    eax,edx
c00149dd:	75 f1                	jne    c00149d0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149df:	c3                   	ret    
c00149e0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149ea:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149f4:	eb e2                	jmp    c00149d8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149f6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149f6:	57                   	push   edi
c00149f7:	31 c0                	xor    eax,eax
c00149f9:	56                   	push   esi
c00149fa:	53                   	push   ebx
c00149fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a03:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a07:	89 da                	mov    edx,ebx
c0014a09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a0d:	c1 e2 04             	shl    edx,0x4
c0014a10:	01 ca                	add    edx,ecx
c0014a12:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a1a:	74 16                	je     c0014a32 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a1c:	40                   	inc    eax
c0014a1d:	83 f8 04             	cmp    eax,0x4
c0014a20:	75 f0                	jne    c0014a12 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a22:	c7 44 24 10 d8 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002add8
c0014a2a:	5b                   	pop    ebx
c0014a2b:	5e                   	pop    esi
c0014a2c:	5f                   	pop    edi
c0014a2d:	e9 d5 5b 00 00       	jmp    c001a607 <Krnl::panic(char const*)>
c0014a32:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a35:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a38:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a3e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a44:	5b                   	pop    ebx
c0014a45:	5e                   	pop    esi
c0014a46:	5f                   	pop    edi
c0014a47:	c3                   	ret    

c0014a48 <doubleFault(regs*, void*)>:
c0014a48:	55                   	push   ebp
c0014a49:	89 e5                	mov    ebp,esp
c0014a4b:	83 ec 08             	sub    esp,0x8
c0014a4e:	83 ec 0c             	sub    esp,0xc
c0014a51:	68 13 ae 02 c0       	push   0xc002ae13
c0014a56:	e8 ac 5b 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0014a5b:	83 c4 10             	add    esp,0x10
c0014a5e:	90                   	nop
c0014a5f:	c9                   	leave  
c0014a60:	c3                   	ret    
c0014a61:	90                   	nop

c0014a62 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a62:	56                   	push   esi
c0014a63:	53                   	push   ebx
c0014a64:	50                   	push   eax
c0014a65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a69:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a6d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a72:	75 35                	jne    c0014aa9 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a74:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a77:	31 d2                	xor    edx,edx
c0014a79:	89 c1                	mov    ecx,eax
c0014a7b:	c1 e1 04             	shl    ecx,0x4
c0014a7e:	01 f1                	add    ecx,esi
c0014a80:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a88:	74 3e                	je     c0014ac8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a8a:	42                   	inc    edx
c0014a8b:	83 fa 04             	cmp    edx,0x4
c0014a8e:	75 f0                	jne    c0014a80 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a90:	83 ec 0c             	sub    esp,0xc
c0014a93:	68 58 ae 02 c0       	push   0xc002ae58
c0014a98:	e8 6a 5b 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0014a9d:	83 c4 10             	add    esp,0x10
c0014aa0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014aa5:	5a                   	pop    edx
c0014aa6:	5b                   	pop    ebx
c0014aa7:	5e                   	pop    esi
c0014aa8:	c3                   	ret    
c0014aa9:	83 ec 0c             	sub    esp,0xc
c0014aac:	56                   	push   esi
c0014aad:	e8 ba fb ff ff       	call   c001466c <Device::getName()>
c0014ab2:	83 c4 10             	add    esp,0x10
c0014ab5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ab8:	75 ba                	jne    c0014a74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014aba:	83 fb 0f             	cmp    ebx,0xf
c0014abd:	7f 29                	jg     c0014ae8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014abf:	0f b6 9b c0 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2940]
c0014ac6:	eb ac                	jmp    c0014a74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ac8:	8d 04 82             	lea    eax,[edx+eax*4]
c0014acb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014acf:	8d 04 86             	lea    eax,[esi+eax*4]
c0014ad2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014ad8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014adc:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014ae2:	89 d8                	mov    eax,ebx
c0014ae4:	5a                   	pop    edx
c0014ae5:	5b                   	pop    ebx
c0014ae6:	5e                   	pop    esi
c0014ae7:	c3                   	ret    
c0014ae8:	83 ec 0c             	sub    esp,0xc
c0014aeb:	68 20 ae 02 c0       	push   0xc002ae20
c0014af0:	e8 12 5b 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0014af5:	83 c4 10             	add    esp,0x10
c0014af8:	e9 77 ff ff ff       	jmp    c0014a74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014afd:	90                   	nop

c0014afe <InterruptController::clearAllHandlers(int, bool)>:
c0014afe:	56                   	push   esi
c0014aff:	53                   	push   ebx
c0014b00:	52                   	push   edx
c0014b01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b09:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b0e:	75 61                	jne    c0014b71 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b10:	8d 46 20             	lea    eax,[esi+0x20]
c0014b13:	c1 e6 04             	shl    esi,0x4
c0014b16:	c1 e0 04             	shl    eax,0x4
c0014b19:	01 de                	add    esi,ebx
c0014b1b:	01 d8                	add    eax,ebx
c0014b1d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b27:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b31:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b3b:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b45:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b4f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b59:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b63:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b6d:	58                   	pop    eax
c0014b6e:	5b                   	pop    ebx
c0014b6f:	5e                   	pop    esi
c0014b70:	c3                   	ret    
c0014b71:	83 ec 0c             	sub    esp,0xc
c0014b74:	53                   	push   ebx
c0014b75:	e8 f2 fa ff ff       	call   c001466c <Device::getName()>
c0014b7a:	83 c4 10             	add    esp,0x10
c0014b7d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b80:	75 8e                	jne    c0014b10 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b82:	83 fe 0f             	cmp    esi,0xf
c0014b85:	7f 09                	jg     c0014b90 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b87:	0f b6 b6 c0 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2940]
c0014b8e:	eb 80                	jmp    c0014b10 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b90:	83 ec 0c             	sub    esp,0xc
c0014b93:	68 94 ae 02 c0       	push   0xc002ae94
c0014b98:	e8 6a 5a 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0014b9d:	83 c4 10             	add    esp,0x10
c0014ba0:	e9 6b ff ff ff       	jmp    c0014b10 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ba5:	90                   	nop

c0014ba6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014ba6:	56                   	push   esi
c0014ba7:	53                   	push   ebx
c0014ba8:	52                   	push   edx
c0014ba9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014bb1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014bb6:	75 3a                	jne    c0014bf2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014bb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bbc:	8d 50 20             	lea    edx,[eax+0x20]
c0014bbf:	c1 e2 04             	shl    edx,0x4
c0014bc2:	8d 04 16             	lea    eax,[esi+edx*1]
c0014bc5:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014bc9:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014bcf:	74 0b                	je     c0014bdc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014bd1:	83 c0 04             	add    eax,0x4
c0014bd4:	39 d0                	cmp    eax,edx
c0014bd6:	75 f1                	jne    c0014bc9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bd8:	58                   	pop    eax
c0014bd9:	5b                   	pop    ebx
c0014bda:	5e                   	pop    esi
c0014bdb:	c3                   	ret    
c0014bdc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014be6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014bf0:	eb df                	jmp    c0014bd1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014bf2:	83 ec 0c             	sub    esp,0xc
c0014bf5:	56                   	push   esi
c0014bf6:	e8 71 fa ff ff       	call   c001466c <Device::getName()>
c0014bfb:	83 c4 10             	add    esp,0x10
c0014bfe:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c01:	75 b5                	jne    c0014bb8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c03:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c08:	7f 11                	jg     c0014c1b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c0e:	0f b6 80 c0 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2940]
c0014c15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c19:	eb 9d                	jmp    c0014bb8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c1b:	83 ec 0c             	sub    esp,0xc
c0014c1e:	68 94 ae 02 c0       	push   0xc002ae94
c0014c23:	e8 df 59 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0014c28:	83 c4 10             	add    esp,0x10
c0014c2b:	eb 8b                	jmp    c0014bb8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c2d <nmiHandler(regs*, void*)>:
c0014c2d:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0014c32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c36:	e9 51 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c3b <int_handler>:
c0014c3b:	55                   	push   ebp
c0014c3c:	57                   	push   edi
c0014c3d:	56                   	push   esi
c0014c3e:	53                   	push   ebx
c0014c3f:	83 ec 0c             	sub    esp,0xc
c0014c42:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c46:	80 3d c4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fc4,0x0
c0014c4d:	74 0b                	je     c0014c5a <int_handler+0x1f>
c0014c4f:	fa                   	cli    
c0014c50:	f4                   	hlt    
c0014c51:	80 3d c4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fc4,0x0
c0014c58:	75 f5                	jne    c0014c4f <int_handler+0x14>
c0014c5a:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0014c5f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c68:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c6e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c71:	83 f8 17             	cmp    eax,0x17
c0014c74:	77 13                	ja     c0014c89 <int_handler+0x4e>
c0014c76:	83 ec 08             	sub    esp,0x8
c0014c79:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c7b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c7e:	0f b6 c0             	movzx  eax,al
c0014c81:	50                   	push   eax
c0014c82:	57                   	push   edi
c0014c83:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c86:	83 c4 10             	add    esp,0x10
c0014c89:	83 c3 15             	add    ebx,0x15
c0014c8c:	c1 e3 04             	shl    ebx,0x4
c0014c8f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c93:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c9a:	31 db                	xor    ebx,ebx
c0014c9c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014ca0:	85 c0                	test   eax,eax
c0014ca2:	74 13                	je     c0014cb7 <int_handler+0x7c>
c0014ca4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ca7:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014cab:	74 1c                	je     c0014cc9 <int_handler+0x8e>
c0014cad:	83 ec 08             	sub    esp,0x8
c0014cb0:	52                   	push   edx
c0014cb1:	56                   	push   esi
c0014cb2:	ff d0                	call   eax
c0014cb4:	83 c4 10             	add    esp,0x10
c0014cb7:	43                   	inc    ebx
c0014cb8:	83 fb 04             	cmp    ebx,0x4
c0014cbb:	75 df                	jne    c0014c9c <int_handler+0x61>
c0014cbd:	83 c4 0c             	add    esp,0xc
c0014cc0:	31 c0                	xor    eax,eax
c0014cc2:	5b                   	pop    ebx
c0014cc3:	31 d2                	xor    edx,edx
c0014cc5:	5e                   	pop    esi
c0014cc6:	5f                   	pop    edi
c0014cc7:	5d                   	pop    ebp
c0014cc8:	c3                   	ret    
c0014cc9:	83 ec 08             	sub    esp,0x8
c0014ccc:	52                   	push   edx
c0014ccd:	56                   	push   esi
c0014cce:	ff d0                	call   eax
c0014cd0:	83 c4 10             	add    esp,0x10
c0014cd3:	83 c4 0c             	add    esp,0xc
c0014cd6:	5b                   	pop    ebx
c0014cd7:	5e                   	pop    esi
c0014cd8:	5f                   	pop    edi
c0014cd9:	5d                   	pop    ebp
c0014cda:	c3                   	ret    
c0014cdb:	90                   	nop

c0014cdc <InterruptController::InterruptController(char const*)>:
c0014cdc:	83 ec 1c             	sub    esp,0x1c
c0014cdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce3:	83 ec 08             	sub    esp,0x8
c0014ce6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cea:	50                   	push   eax
c0014ceb:	e8 80 f8 ff ff       	call   c0014570 <Device::Device(char const*)>
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	ba 4c b1 02 c0       	mov    edx,0xc002b14c
c0014cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cfc:	89 10                	mov    DWORD PTR [eax],edx
c0014cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d02:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d0c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d14:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d1c:	7f 5e                	jg     c0014d7c <InterruptController::InterruptController(char const*)+0xa0>
c0014d1e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d26:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d2b:	7f 49                	jg     c0014d76 <InterruptController::InterruptController(char const*)+0x9a>
c0014d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d35:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d40:	01 ca                	add    edx,ecx
c0014d42:	83 c2 54             	add    edx,0x54
c0014d45:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d55:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d60:	01 ca                	add    edx,ecx
c0014d62:	81 c2 54 04 00 00    	add    edx,0x454
c0014d68:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d70:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d74:	eb b0                	jmp    c0014d26 <InterruptController::InterruptController(char const*)+0x4a>
c0014d76:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d7a:	eb 98                	jmp    c0014d14 <InterruptController::InterruptController(char const*)+0x38>
c0014d7c:	90                   	nop
c0014d7d:	83 c4 1c             	add    esp,0x1c
c0014d80:	c3                   	ret    
c0014d81:	90                   	nop

c0014d82 <InterruptController::~InterruptController()>:
c0014d82:	83 ec 0c             	sub    esp,0xc
c0014d85:	ba 4c b1 02 c0       	mov    edx,0xc002b14c
c0014d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d8e:	89 10                	mov    DWORD PTR [eax],edx
c0014d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d94:	83 ec 0c             	sub    esp,0xc
c0014d97:	50                   	push   eax
c0014d98:	e8 b5 f4 ff ff       	call   c0014252 <Device::~Device()>
c0014d9d:	83 c4 10             	add    esp,0x10
c0014da0:	90                   	nop
c0014da1:	83 c4 0c             	add    esp,0xc
c0014da4:	c3                   	ret    
c0014da5:	90                   	nop

c0014da6 <InterruptController::~InterruptController()>:
c0014da6:	83 ec 0c             	sub    esp,0xc
c0014da9:	83 ec 0c             	sub    esp,0xc
c0014dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014db0:	e8 cd ff ff ff       	call   c0014d82 <InterruptController::~InterruptController()>
c0014db5:	83 c4 10             	add    esp,0x10
c0014db8:	83 ec 08             	sub    esp,0x8
c0014dbb:	68 58 21 00 00       	push   0x2158
c0014dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dc4:	e8 b1 e0 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0014dc9:	83 c4 10             	add    esp,0x10
c0014dcc:	83 c4 0c             	add    esp,0xc
c0014dcf:	c3                   	ret    

c0014dd0 <displayDebugInfo(regs*)>:
c0014dd0:	55                   	push   ebp
c0014dd1:	57                   	push   edi
c0014dd2:	56                   	push   esi
c0014dd3:	53                   	push   ebx
c0014dd4:	83 ec 24             	sub    esp,0x24
c0014dd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014ddb:	0f 20 c2             	mov    edx,cr0
c0014dde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014de2:	0f 20 d7             	mov    edi,cr2
c0014de5:	0f 20 de             	mov    esi,cr3
c0014de8:	0f 20 e5             	mov    ebp,cr4
c0014deb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014dee:	68 ce ae 02 c0       	push   0xc002aece
c0014df3:	e8 62 e1 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014df8:	59                   	pop    ecx
c0014df9:	58                   	pop    eax
c0014dfa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014dfd:	68 d9 ae 02 c0       	push   0xc002aed9
c0014e02:	e8 53 e1 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e07:	58                   	pop    eax
c0014e08:	5a                   	pop    edx
c0014e09:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e0c:	68 e4 ae 02 c0       	push   0xc002aee4
c0014e11:	e8 44 e1 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e16:	59                   	pop    ecx
c0014e17:	58                   	pop    eax
c0014e18:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e1b:	68 ef ae 02 c0       	push   0xc002aeef
c0014e20:	e8 35 e1 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e25:	58                   	pop    eax
c0014e26:	5a                   	pop    edx
c0014e27:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e2a:	68 fa ae 02 c0       	push   0xc002aefa
c0014e2f:	e8 26 e1 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e34:	59                   	pop    ecx
c0014e35:	58                   	pop    eax
c0014e36:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e39:	68 05 af 02 c0       	push   0xc002af05
c0014e3e:	e8 17 e1 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e43:	58                   	pop    eax
c0014e44:	5a                   	pop    edx
c0014e45:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e48:	68 10 af 02 c0       	push   0xc002af10
c0014e4d:	e8 08 e1 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e52:	59                   	pop    ecx
c0014e53:	58                   	pop    eax
c0014e54:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e57:	68 1b af 02 c0       	push   0xc002af1b
c0014e5c:	e8 f9 e0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e61:	58                   	pop    eax
c0014e62:	5a                   	pop    edx
c0014e63:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e66:	68 26 af 02 c0       	push   0xc002af26
c0014e6b:	e8 ea e0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e70:	59                   	pop    ecx
c0014e71:	58                   	pop    eax
c0014e72:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e75:	68 35 af 02 c0       	push   0xc002af35
c0014e7a:	e8 db e0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e7f:	58                   	pop    eax
c0014e80:	5a                   	pop    edx
c0014e81:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e84:	68 40 af 02 c0       	push   0xc002af40
c0014e89:	e8 cc e0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e8e:	59                   	pop    ecx
c0014e8f:	58                   	pop    eax
c0014e90:	57                   	push   edi
c0014e91:	68 4b af 02 c0       	push   0xc002af4b
c0014e96:	e8 bf e0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014e9b:	58                   	pop    eax
c0014e9c:	5a                   	pop    edx
c0014e9d:	56                   	push   esi
c0014e9e:	68 56 af 02 c0       	push   0xc002af56
c0014ea3:	e8 b2 e0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0014ea8:	59                   	pop    ecx
c0014ea9:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014eae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb4:	e8 3c be ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c0014eb9:	58                   	pop    eax
c0014eba:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ebd:	5a                   	pop    edx
c0014ebe:	c1 e0 05             	shl    eax,0x5
c0014ec1:	05 20 d4 02 c0       	add    eax,0xc002d420
c0014ec6:	50                   	push   eax
c0014ec7:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014ecc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed2:	e8 3d c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014ed7:	59                   	pop    ecx
c0014ed8:	58                   	pop    eax
c0014ed9:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014ede:	68 61 af 02 c0       	push   0xc002af61
c0014ee3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee9:	e8 26 c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014eee:	58                   	pop    eax
c0014eef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ef4:	5a                   	pop    edx
c0014ef5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ef8:	83 c0 0c             	add    eax,0xc
c0014efb:	50                   	push   eax
c0014efc:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f07:	e8 08 c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f0c:	59                   	pop    ecx
c0014f0d:	58                   	pop    eax
c0014f0e:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f13:	68 6a af 02 c0       	push   0xc002af6a
c0014f18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1e:	e8 f1 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f23:	58                   	pop    eax
c0014f24:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f29:	5a                   	pop    edx
c0014f2a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f33:	e8 02 c2 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014f38:	59                   	pop    ecx
c0014f39:	58                   	pop    eax
c0014f3a:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f3f:	68 72 af 02 c0       	push   0xc002af72
c0014f44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4a:	e8 c5 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f4f:	58                   	pop    eax
c0014f50:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f55:	5a                   	pop    edx
c0014f56:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5f:	e8 d6 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014f64:	59                   	pop    ecx
c0014f65:	58                   	pop    eax
c0014f66:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f6b:	68 7a af 02 c0       	push   0xc002af7a
c0014f70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f76:	e8 99 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f7b:	58                   	pop    eax
c0014f7c:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f81:	5a                   	pop    edx
c0014f82:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8b:	e8 aa c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014f90:	59                   	pop    ecx
c0014f91:	58                   	pop    eax
c0014f92:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f97:	68 82 af 02 c0       	push   0xc002af82
c0014f9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa2:	e8 6d c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014fa7:	58                   	pop    eax
c0014fa8:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fad:	5a                   	pop    edx
c0014fae:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014fb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb7:	e8 7e c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014fbc:	59                   	pop    ecx
c0014fbd:	58                   	pop    eax
c0014fbe:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fc3:	68 8a af 02 c0       	push   0xc002af8a
c0014fc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fce:	e8 41 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014fd3:	58                   	pop    eax
c0014fd4:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fd9:	5a                   	pop    edx
c0014fda:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014fdd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe3:	e8 52 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014fe8:	59                   	pop    ecx
c0014fe9:	58                   	pop    eax
c0014fea:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fef:	68 92 af 02 c0       	push   0xc002af92
c0014ff4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffa:	e8 15 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014fff:	58                   	pop    eax
c0015000:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015005:	5a                   	pop    edx
c0015006:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0015009:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500f:	e8 26 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015014:	59                   	pop    ecx
c0015015:	58                   	pop    eax
c0015016:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001501b:	68 9a af 02 c0       	push   0xc002af9a
c0015020:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015026:	e8 e9 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001502b:	58                   	pop    eax
c001502c:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015031:	5a                   	pop    edx
c0015032:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015036:	52                   	push   edx
c0015037:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503d:	e8 f8 c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015042:	59                   	pop    ecx
c0015043:	58                   	pop    eax
c0015044:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015049:	68 a3 af 02 c0       	push   0xc002afa3
c001504e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015054:	e8 bb c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015059:	58                   	pop    eax
c001505a:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001505f:	5a                   	pop    edx
c0015060:	57                   	push   edi
c0015061:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015067:	e8 ce c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001506c:	59                   	pop    ecx
c001506d:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015072:	5f                   	pop    edi
c0015073:	68 ab af 02 c0       	push   0xc002afab
c0015078:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507e:	e8 91 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015083:	58                   	pop    eax
c0015084:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015089:	5a                   	pop    edx
c001508a:	56                   	push   esi
c001508b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015091:	e8 a4 c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015096:	59                   	pop    ecx
c0015097:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001509c:	5e                   	pop    esi
c001509d:	68 b3 af 02 c0       	push   0xc002afb3
c00150a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a8:	e8 67 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c00150ad:	5f                   	pop    edi
c00150ae:	58                   	pop    eax
c00150af:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00150b4:	55                   	push   ebp
c00150b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bb:	e8 7a c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c00150c0:	58                   	pop    eax
c00150c1:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00150c6:	5a                   	pop    edx
c00150c7:	68 bb af 02 c0       	push   0xc002afbb
c00150cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d2:	e8 3d c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c00150d7:	0f 21 c0             	mov    eax,db0
c00150da:	59                   	pop    ecx
c00150db:	5e                   	pop    esi
c00150dc:	50                   	push   eax
c00150dd:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00150e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e8:	e8 4d c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c00150ed:	5f                   	pop    edi
c00150ee:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00150f3:	5d                   	pop    ebp
c00150f4:	68 c4 af 02 c0       	push   0xc002afc4
c00150f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ff:	e8 10 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015104:	0f 21 c8             	mov    eax,db1
c0015107:	5a                   	pop    edx
c0015108:	59                   	pop    ecx
c0015109:	50                   	push   eax
c001510a:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001510f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015115:	e8 20 c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001511a:	5e                   	pop    esi
c001511b:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015120:	5f                   	pop    edi
c0015121:	68 cc af 02 c0       	push   0xc002afcc
c0015126:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512c:	e8 e3 bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015131:	0f 21 d0             	mov    eax,db2
c0015134:	5d                   	pop    ebp
c0015135:	5a                   	pop    edx
c0015136:	50                   	push   eax
c0015137:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001513c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015142:	e8 f3 bf ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015147:	59                   	pop    ecx
c0015148:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001514d:	5e                   	pop    esi
c001514e:	68 d4 af 02 c0       	push   0xc002afd4
c0015153:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015159:	e8 b6 bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001515e:	0f 21 d8             	mov    eax,db3
c0015161:	5f                   	pop    edi
c0015162:	5d                   	pop    ebp
c0015163:	50                   	push   eax
c0015164:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015169:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516f:	e8 c6 bf ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015174:	58                   	pop    eax
c0015175:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001517a:	5a                   	pop    edx
c001517b:	68 dc af 02 c0       	push   0xc002afdc
c0015180:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015186:	e8 89 bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001518b:	0f 21 f0             	mov    eax,db6
c001518e:	59                   	pop    ecx
c001518f:	5e                   	pop    esi
c0015190:	50                   	push   eax
c0015191:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015196:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001519c:	e8 99 bf ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c00151a1:	5f                   	pop    edi
c00151a2:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00151a7:	5d                   	pop    ebp
c00151a8:	68 e4 af 02 c0       	push   0xc002afe4
c00151ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b3:	e8 5c bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c00151b8:	0f 21 f8             	mov    eax,db7
c00151bb:	5a                   	pop    edx
c00151bc:	59                   	pop    ecx
c00151bd:	50                   	push   eax
c00151be:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00151c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c9:	e8 6c bf ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c00151ce:	5e                   	pop    esi
c00151cf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151d2:	e8 12 85 00 00       	call   c001d6e9 <Thr::getDriverNameFromAddress(unsigned long)>
c00151d7:	83 c4 10             	add    esp,0x10
c00151da:	85 c0                	test   eax,eax
c00151dc:	74 7d                	je     c001525b <displayDebugInfo(regs*)+0x48b>
c00151de:	89 c6                	mov    esi,eax
c00151e0:	50                   	push   eax
c00151e1:	50                   	push   eax
c00151e2:	56                   	push   esi
c00151e3:	68 ec af 02 c0       	push   0xc002afec
c00151e8:	e8 6d dd ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00151ed:	5a                   	pop    edx
c00151ee:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00151f3:	59                   	pop    ecx
c00151f4:	68 fa af 02 c0       	push   0xc002affa
c00151f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ff:	e8 10 bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015204:	5f                   	pop    edi
c0015205:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001520a:	5d                   	pop    ebp
c001520b:	56                   	push   esi
c001520c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015212:	e8 fd be ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015217:	58                   	pop    eax
c0015218:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001521d:	5a                   	pop    edx
c001521e:	68 06 b0 02 c0       	push   0xc002b006
c0015223:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015229:	e8 e6 be ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001522e:	59                   	pop    ecx
c001522f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015234:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001523a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001523d:	e8 de 84 00 00       	call   c001d720 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015242:	5b                   	pop    ebx
c0015243:	5d                   	pop    ebp
c0015244:	50                   	push   eax
c0015245:	57                   	push   edi
c0015246:	e8 ef be ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001524b:	58                   	pop    eax
c001524c:	5a                   	pop    edx
c001524d:	56                   	push   esi
c001524e:	68 12 b0 02 c0       	push   0xc002b012
c0015253:	e8 02 dd ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0015258:	83 c4 10             	add    esp,0x10
c001525b:	fa                   	cli    
c001525c:	f4                   	hlt    
c001525d:	eb fe                	jmp    c001525d <displayDebugInfo(regs*)+0x48d>

c001525f <x87EmulHandler(regs*, void*)>:
c001525f:	53                   	push   ebx
c0015260:	83 ec 14             	sub    esp,0x14
c0015263:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015267:	53                   	push   ebx
c0015268:	e8 23 a8 00 00       	call   c001fa90 <Vm::x87Handler(regs*)>
c001526d:	83 c4 10             	add    esp,0x10
c0015270:	84 c0                	test   al,al
c0015272:	74 05                	je     c0015279 <x87EmulHandler(regs*, void*)+0x1a>
c0015274:	83 c4 08             	add    esp,0x8
c0015277:	5b                   	pop    ebx
c0015278:	c3                   	ret    
c0015279:	83 ec 0c             	sub    esp,0xc
c001527c:	68 22 b0 02 c0       	push   0xc002b022
c0015281:	e8 d4 dc ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0015286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015289:	e8 42 fb ff ff       	call   c0014dd0 <displayDebugInfo(regs*)>

c001528e <gpFault(regs*, void*)>:
c001528e:	53                   	push   ebx
c001528f:	83 ec 14             	sub    esp,0x14
c0015292:	c7 05 18 e6 02 c0 0d ee 01 c0 	mov    DWORD PTR ds:0xc002e618,0xc001ee0d
c001529c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152a0:	53                   	push   ebx
c00152a1:	e8 67 9b 00 00       	call   c001ee0d <Vm::faultHandler(regs*)>
c00152a6:	83 c4 10             	add    esp,0x10
c00152a9:	84 c0                	test   al,al
c00152ab:	74 05                	je     c00152b2 <gpFault(regs*, void*)+0x24>
c00152ad:	83 c4 08             	add    esp,0x8
c00152b0:	5b                   	pop    ebx
c00152b1:	c3                   	ret    
c00152b2:	83 ec 0c             	sub    esp,0xc
c00152b5:	68 38 b0 02 c0       	push   0xc002b038
c00152ba:	e8 9b dc ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00152bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152c2:	e8 09 fb ff ff       	call   c0014dd0 <displayDebugInfo(regs*)>

c00152c7 <pgFault(regs*, void*)>:
c00152c7:	83 ec 18             	sub    esp,0x18
c00152ca:	68 53 b0 02 c0       	push   0xc002b053
c00152cf:	e8 86 dc ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00152d4:	0f 20 d0             	mov    eax,cr2
c00152d7:	5a                   	pop    edx
c00152d8:	59                   	pop    ecx
c00152d9:	50                   	push   eax
c00152da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152e2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152e8:	e8 ed d7 ff ff       	call   c0012ada <VAS::tryLoadBackOffDisk(unsigned long)>
c00152ed:	83 c4 10             	add    esp,0x10
c00152f0:	84 c0                	test   al,al
c00152f2:	74 04                	je     c00152f8 <pgFault(regs*, void*)+0x31>
c00152f4:	83 c4 0c             	add    esp,0xc
c00152f7:	c3                   	ret    
c00152f8:	83 ec 0c             	sub    esp,0xc
c00152fb:	68 60 b0 02 c0       	push   0xc002b060
c0015300:	e8 55 dc ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0015305:	58                   	pop    eax
c0015306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001530a:	e8 c1 fa ff ff       	call   c0014dd0 <displayDebugInfo(regs*)>

c001530f <otherISRHandler(regs*, void*)>:
c001530f:	53                   	push   ebx
c0015310:	83 ec 0c             	sub    esp,0xc
c0015313:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015317:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001531a:	50                   	push   eax
c001531b:	50                   	push   eax
c001531c:	68 7e b0 02 c0       	push   0xc002b07e
c0015321:	e8 34 dc ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0015326:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015329:	e8 a2 fa ff ff       	call   c0014dd0 <displayDebugInfo(regs*)>

c001532e <opcodeFault(regs*, void*)>:
c001532e:	55                   	push   ebp
c001532f:	89 e5                	mov    ebp,esp
c0015331:	56                   	push   esi
c0015332:	53                   	push   ebx
c0015333:	83 ec 40             	sub    esp,0x40
c0015336:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001533b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015341:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015347:	84 c0                	test   al,al
c0015349:	74 24                	je     c001536f <opcodeFault(regs*, void*)+0x41>
c001534b:	83 ec 0c             	sub    esp,0xc
c001534e:	68 9c b0 02 c0       	push   0xc002b09c
c0015353:	e8 02 dc ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0015358:	83 c4 10             	add    esp,0x10
c001535b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015361:	8d 50 19             	lea    edx,[eax+0x19]
c0015364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015367:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536a:	e9 be 05 00 00       	jmp    c001592d <opcodeFault(regs*, void*)+0x5ff>
c001536f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015372:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015375:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015378:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001537c:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015383:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015386:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015389:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538c:	8a 00                	mov    al,BYTE PTR [eax]
c001538e:	3c f0                	cmp    al,0xf0
c0015390:	75 17                	jne    c00153a9 <opcodeFault(regs*, void*)+0x7b>
c0015392:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015398:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001539b:	8d 50 01             	lea    edx,[eax+0x1]
c001539e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153a4:	e9 da 00 00 00       	jmp    c0015483 <opcodeFault(regs*, void*)+0x155>
c00153a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ac:	8a 00                	mov    al,BYTE PTR [eax]
c00153ae:	3c f2                	cmp    al,0xf2
c00153b0:	74 09                	je     c00153bb <opcodeFault(regs*, void*)+0x8d>
c00153b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b5:	8a 00                	mov    al,BYTE PTR [eax]
c00153b7:	3c f3                	cmp    al,0xf3
c00153b9:	75 1b                	jne    c00153d6 <opcodeFault(regs*, void*)+0xa8>
c00153bb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153bf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c8:	8d 50 01             	lea    edx,[eax+0x1]
c00153cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153d1:	e9 ad 00 00 00       	jmp    c0015483 <opcodeFault(regs*, void*)+0x155>
c00153d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d9:	8a 00                	mov    al,BYTE PTR [eax]
c00153db:	3c 66                	cmp    al,0x66
c00153dd:	75 1f                	jne    c00153fe <opcodeFault(regs*, void*)+0xd0>
c00153df:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153e3:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f0:	8d 50 01             	lea    edx,[eax+0x1]
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f9:	e9 85 00 00 00       	jmp    c0015483 <opcodeFault(regs*, void*)+0x155>
c00153fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015401:	8a 00                	mov    al,BYTE PTR [eax]
c0015403:	3c 67                	cmp    al,0x67
c0015405:	75 18                	jne    c001541f <opcodeFault(regs*, void*)+0xf1>
c0015407:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001540b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001540e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015411:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015414:	8d 50 01             	lea    edx,[eax+0x1]
c0015417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001541d:	eb 64                	jmp    c0015483 <opcodeFault(regs*, void*)+0x155>
c001541f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015422:	8a 00                	mov    al,BYTE PTR [eax]
c0015424:	3c 2e                	cmp    al,0x2e
c0015426:	74 09                	je     c0015431 <opcodeFault(regs*, void*)+0x103>
c0015428:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542b:	8a 00                	mov    al,BYTE PTR [eax]
c001542d:	3c 3e                	cmp    al,0x3e
c001542f:	75 18                	jne    c0015449 <opcodeFault(regs*, void*)+0x11b>
c0015431:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015435:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001543e:	8d 50 01             	lea    edx,[eax+0x1]
c0015441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015444:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015447:	eb 3a                	jmp    c0015483 <opcodeFault(regs*, void*)+0x155>
c0015449:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544c:	8a 00                	mov    al,BYTE PTR [eax]
c001544e:	3c 36                	cmp    al,0x36
c0015450:	74 1b                	je     c001546d <opcodeFault(regs*, void*)+0x13f>
c0015452:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015455:	8a 00                	mov    al,BYTE PTR [eax]
c0015457:	3c 26                	cmp    al,0x26
c0015459:	74 12                	je     c001546d <opcodeFault(regs*, void*)+0x13f>
c001545b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545e:	8a 00                	mov    al,BYTE PTR [eax]
c0015460:	3c 64                	cmp    al,0x64
c0015462:	74 09                	je     c001546d <opcodeFault(regs*, void*)+0x13f>
c0015464:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015467:	8a 00                	mov    al,BYTE PTR [eax]
c0015469:	3c 65                	cmp    al,0x65
c001546b:	75 16                	jne    c0015483 <opcodeFault(regs*, void*)+0x155>
c001546d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015471:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015477:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547a:	8d 50 01             	lea    edx,[eax+0x1]
c001547d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015480:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015483:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015486:	8a 00                	mov    al,BYTE PTR [eax]
c0015488:	3c 0f                	cmp    al,0xf
c001548a:	0f 85 ad 00 00 00    	jne    c001553d <opcodeFault(regs*, void*)+0x20f>
c0015490:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015493:	40                   	inc    eax
c0015494:	8a 00                	mov    al,BYTE PTR [eax]
c0015496:	3c c2                	cmp    al,0xc2
c0015498:	74 0e                	je     c00154a8 <opcodeFault(regs*, void*)+0x17a>
c001549a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549d:	40                   	inc    eax
c001549e:	8a 00                	mov    al,BYTE PTR [eax]
c00154a0:	3c c3                	cmp    al,0xc3
c00154a2:	0f 85 95 00 00 00    	jne    c001553d <opcodeFault(regs*, void*)+0x20f>
c00154a8:	83 ec 0c             	sub    esp,0xc
c00154ab:	68 bf b0 02 c0       	push   0xc002b0bf
c00154b0:	e8 a5 da ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00154b5:	83 c4 10             	add    esp,0x10
c00154b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154be:	8d 50 01             	lea    edx,[eax+0x1]
c00154c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154c7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cd:	8a 00                	mov    al,BYTE PTR [eax]
c00154cf:	8d 50 fe             	lea    edx,[eax-0x2]
c00154d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d5:	88 10                	mov    BYTE PTR [eax],dl
c00154d7:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154da:	50                   	push   eax
c00154db:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154de:	50                   	push   eax
c00154df:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154e2:	50                   	push   eax
c00154e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154e6:	e8 e3 47 00 00       	call   c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154eb:	83 c4 10             	add    esp,0x10
c00154ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f4:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154f7:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154fa:	01 d0                	add    eax,edx
c00154fc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015502:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015505:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015508:	48                   	dec    eax
c0015509:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001550c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015512:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015518:	83 ec 04             	sub    esp,0x4
c001551b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001551e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015521:	50                   	push   eax
c0015522:	e8 8d ac fe ff       	call   c00001b4 <voodooXADD>
c0015527:	83 c4 10             	add    esp,0x10
c001552a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001552d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015530:	01 c2                	add    edx,eax
c0015532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015535:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015538:	e9 f0 03 00 00       	jmp    c001592d <opcodeFault(regs*, void*)+0x5ff>
c001553d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015540:	8a 00                	mov    al,BYTE PTR [eax]
c0015542:	3c 0f                	cmp    al,0xf
c0015544:	0f 85 8b 01 00 00    	jne    c00156d5 <opcodeFault(regs*, void*)+0x3a7>
c001554a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001554d:	40                   	inc    eax
c001554e:	8a 00                	mov    al,BYTE PTR [eax]
c0015550:	3c c7                	cmp    al,0xc7
c0015552:	0f 86 7d 01 00 00    	jbe    c00156d5 <opcodeFault(regs*, void*)+0x3a7>
c0015558:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555b:	40                   	inc    eax
c001555c:	8a 00                	mov    al,BYTE PTR [eax]
c001555e:	3c cf                	cmp    al,0xcf
c0015560:	0f 87 6f 01 00 00    	ja     c00156d5 <opcodeFault(regs*, void*)+0x3a7>
c0015566:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015569:	40                   	inc    eax
c001556a:	8a 00                	mov    al,BYTE PTR [eax]
c001556c:	83 c0 38             	add    eax,0x38
c001556f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015572:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015576:	75 0b                	jne    c0015583 <opcodeFault(regs*, void*)+0x255>
c0015578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001557e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015581:	eb 75                	jmp    c00155f8 <opcodeFault(regs*, void*)+0x2ca>
c0015583:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015587:	75 0b                	jne    c0015594 <opcodeFault(regs*, void*)+0x266>
c0015589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001558f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015592:	eb 64                	jmp    c00155f8 <opcodeFault(regs*, void*)+0x2ca>
c0015594:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015598:	75 0b                	jne    c00155a5 <opcodeFault(regs*, void*)+0x277>
c001559a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155a0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a3:	eb 53                	jmp    c00155f8 <opcodeFault(regs*, void*)+0x2ca>
c00155a5:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155a9:	75 0b                	jne    c00155b6 <opcodeFault(regs*, void*)+0x288>
c00155ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b4:	eb 42                	jmp    c00155f8 <opcodeFault(regs*, void*)+0x2ca>
c00155b6:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155ba:	75 0b                	jne    c00155c7 <opcodeFault(regs*, void*)+0x299>
c00155bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bf:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155c2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c5:	eb 31                	jmp    c00155f8 <opcodeFault(regs*, void*)+0x2ca>
c00155c7:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155cb:	75 0b                	jne    c00155d8 <opcodeFault(regs*, void*)+0x2aa>
c00155cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d6:	eb 20                	jmp    c00155f8 <opcodeFault(regs*, void*)+0x2ca>
c00155d8:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155dc:	75 0b                	jne    c00155e9 <opcodeFault(regs*, void*)+0x2bb>
c00155de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155e4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155e7:	eb 0f                	jmp    c00155f8 <opcodeFault(regs*, void*)+0x2ca>
c00155e9:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155ed:	75 09                	jne    c00155f8 <opcodeFault(regs*, void*)+0x2ca>
c00155ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f8:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155fc:	74 10                	je     c001560e <opcodeFault(regs*, void*)+0x2e0>
c00155fe:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015605:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001560c:	eb 2d                	jmp    c001563b <opcodeFault(regs*, void*)+0x30d>
c001560e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015611:	c1 e0 18             	shl    eax,0x18
c0015614:	89 c2                	mov    edx,eax
c0015616:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015619:	c1 e0 08             	shl    eax,0x8
c001561c:	25 00 00 ff 00       	and    eax,0xff0000
c0015621:	09 c2                	or     edx,eax
c0015623:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015626:	c1 e8 08             	shr    eax,0x8
c0015629:	25 00 ff 00 00       	and    eax,0xff00
c001562e:	09 c2                	or     edx,eax
c0015630:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015633:	c1 e8 18             	shr    eax,0x18
c0015636:	09 d0                	or     eax,edx
c0015638:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001563b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001563f:	75 0b                	jne    c001564c <opcodeFault(regs*, void*)+0x31e>
c0015641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015644:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015647:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001564a:	eb 75                	jmp    c00156c1 <opcodeFault(regs*, void*)+0x393>
c001564c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015650:	75 0b                	jne    c001565d <opcodeFault(regs*, void*)+0x32f>
c0015652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015655:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015658:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001565b:	eb 64                	jmp    c00156c1 <opcodeFault(regs*, void*)+0x393>
c001565d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015661:	75 0b                	jne    c001566e <opcodeFault(regs*, void*)+0x340>
c0015663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015666:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015669:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001566c:	eb 53                	jmp    c00156c1 <opcodeFault(regs*, void*)+0x393>
c001566e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015672:	75 0b                	jne    c001567f <opcodeFault(regs*, void*)+0x351>
c0015674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015677:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001567a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001567d:	eb 42                	jmp    c00156c1 <opcodeFault(regs*, void*)+0x393>
c001567f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015683:	75 0b                	jne    c0015690 <opcodeFault(regs*, void*)+0x362>
c0015685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015688:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001568b:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001568e:	eb 31                	jmp    c00156c1 <opcodeFault(regs*, void*)+0x393>
c0015690:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015694:	75 0b                	jne    c00156a1 <opcodeFault(regs*, void*)+0x373>
c0015696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015699:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001569c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001569f:	eb 20                	jmp    c00156c1 <opcodeFault(regs*, void*)+0x393>
c00156a1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00156a5:	75 0b                	jne    c00156b2 <opcodeFault(regs*, void*)+0x384>
c00156a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156aa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156ad:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00156b0:	eb 0f                	jmp    c00156c1 <opcodeFault(regs*, void*)+0x393>
c00156b2:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156b6:	75 09                	jne    c00156c1 <opcodeFault(regs*, void*)+0x393>
c00156b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156c7:	8d 50 02             	lea    edx,[eax+0x2]
c00156ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156d0:	e9 58 02 00 00       	jmp    c001592d <opcodeFault(regs*, void*)+0x5ff>
c00156d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d8:	8a 00                	mov    al,BYTE PTR [eax]
c00156da:	3c 0f                	cmp    al,0xf
c00156dc:	0f 85 76 01 00 00    	jne    c0015858 <opcodeFault(regs*, void*)+0x52a>
c00156e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e5:	40                   	inc    eax
c00156e6:	8a 00                	mov    al,BYTE PTR [eax]
c00156e8:	3c c7                	cmp    al,0xc7
c00156ea:	0f 85 68 01 00 00    	jne    c0015858 <opcodeFault(regs*, void*)+0x52a>
c00156f0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156f9:	8d 50 01             	lea    edx,[eax+0x1]
c00156fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015702:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015705:	50                   	push   eax
c0015706:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015709:	50                   	push   eax
c001570a:	8d 45 bc             	lea    eax,[ebp-0x44]
c001570d:	50                   	push   eax
c001570e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015711:	e8 b8 45 00 00       	call   c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015716:	83 c4 10             	add    esp,0x10
c0015719:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001571c:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001571f:	83 f0 01             	xor    eax,0x1
c0015722:	84 c0                	test   al,al
c0015724:	0f 84 2e 01 00 00    	je     c0015858 <opcodeFault(regs*, void*)+0x52a>
c001572a:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001572d:	3c 01                	cmp    al,0x1
c001572f:	0f 85 23 01 00 00    	jne    c0015858 <opcodeFault(regs*, void*)+0x52a>
c0015735:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015738:	83 f0 01             	xor    eax,0x1
c001573b:	84 c0                	test   al,al
c001573d:	0f 84 15 01 00 00    	je     c0015858 <opcodeFault(regs*, void*)+0x52a>
c0015743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015746:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015749:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001574c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015753:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015756:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015759:	89 c2                	mov    edx,eax
c001575b:	b8 00 00 00 00       	mov    eax,0x0
c0015760:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015763:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015766:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015769:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001576c:	ba 00 00 00 00       	mov    edx,0x0
c0015771:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015774:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001577d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015780:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015787:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001578a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001578d:	89 c2                	mov    edx,eax
c001578f:	b8 00 00 00 00       	mov    eax,0x0
c0015794:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015797:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001579a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157a0:	ba 00 00 00 00       	mov    edx,0x0
c00157a5:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00157a8:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00157ab:	e8 4c 86 00 00       	call   c001ddfc <lockScheduler()>
c00157b0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157b3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b8:	89 c1                	mov    ecx,eax
c00157ba:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157bd:	89 cb                	mov    ebx,ecx
c00157bf:	89 d0                	mov    eax,edx
c00157c1:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157c4:	89 c6                	mov    esi,eax
c00157c6:	89 f0                	mov    eax,esi
c00157c8:	09 d8                	or     eax,ebx
c00157ca:	85 c0                	test   eax,eax
c00157cc:	75 21                	jne    c00157ef <opcodeFault(regs*, void*)+0x4c1>
c00157ce:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157d1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157d4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157d7:	89 01                	mov    DWORD PTR [ecx],eax
c00157d9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157e2:	83 c8 40             	or     eax,0x40
c00157e5:	89 c2                	mov    edx,eax
c00157e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ea:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157ed:	eb 3e                	jmp    c001582d <opcodeFault(regs*, void*)+0x4ff>
c00157ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157f2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157fa:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157fd:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015803:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015806:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015809:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001580c:	89 d0                	mov    eax,edx
c001580e:	31 d2                	xor    edx,edx
c0015810:	89 c3                	mov    ebx,eax
c0015812:	89 d6                	mov    esi,edx
c0015814:	89 da                	mov    edx,ebx
c0015816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015819:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001581c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015822:	83 e0 bf             	and    eax,0xffffffbf
c0015825:	89 c2                	mov    edx,eax
c0015827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001582d:	e8 cc 85 00 00       	call   c001ddfe <unlockScheduler()>
c0015832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015835:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015838:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001583b:	01 c2                	add    edx,eax
c001583d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015840:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015843:	83 ec 0c             	sub    esp,0xc
c0015846:	68 ce b0 02 c0       	push   0xc002b0ce
c001584b:	e8 0a d7 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0015850:	83 c4 10             	add    esp,0x10
c0015853:	e9 d5 00 00 00       	jmp    c001592d <opcodeFault(regs*, void*)+0x5ff>
c0015858:	83 ec 0c             	sub    esp,0xc
c001585b:	68 e1 b0 02 c0       	push   0xc002b0e1
c0015860:	e8 f5 d6 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0015865:	83 c4 10             	add    esp,0x10
c0015868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001586e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015871:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015874:	c1 e0 04             	shl    eax,0x4
c0015877:	01 d0                	add    eax,edx
c0015879:	83 c0 03             	add    eax,0x3
c001587c:	8a 00                	mov    al,BYTE PTR [eax]
c001587e:	0f b6 d8             	movzx  ebx,al
c0015881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015884:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001588d:	c1 e0 04             	shl    eax,0x4
c0015890:	01 d0                	add    eax,edx
c0015892:	83 c0 02             	add    eax,0x2
c0015895:	8a 00                	mov    al,BYTE PTR [eax]
c0015897:	0f b6 c8             	movzx  ecx,al
c001589a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a6:	c1 e0 04             	shl    eax,0x4
c00158a9:	01 d0                	add    eax,edx
c00158ab:	40                   	inc    eax
c00158ac:	8a 00                	mov    al,BYTE PTR [eax]
c00158ae:	0f b6 d0             	movzx  edx,al
c00158b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b4:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158bd:	c1 e0 04             	shl    eax,0x4
c00158c0:	01 f0                	add    eax,esi
c00158c2:	8a 00                	mov    al,BYTE PTR [eax]
c00158c4:	0f b6 c0             	movzx  eax,al
c00158c7:	83 ec 0c             	sub    esp,0xc
c00158ca:	53                   	push   ebx
c00158cb:	51                   	push   ecx
c00158cc:	52                   	push   edx
c00158cd:	50                   	push   eax
c00158ce:	68 f4 b0 02 c0       	push   0xc002b0f4
c00158d3:	e8 82 d6 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00158d8:	83 c4 20             	add    esp,0x20
c00158db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e1:	83 c0 03             	add    eax,0x3
c00158e4:	8a 00                	mov    al,BYTE PTR [eax]
c00158e6:	0f b6 d8             	movzx  ebx,al
c00158e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158ef:	83 c0 02             	add    eax,0x2
c00158f2:	8a 00                	mov    al,BYTE PTR [eax]
c00158f4:	0f b6 c8             	movzx  ecx,al
c00158f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158fd:	40                   	inc    eax
c00158fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015900:	0f b6 d0             	movzx  edx,al
c0015903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015906:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015909:	8a 00                	mov    al,BYTE PTR [eax]
c001590b:	0f b6 c0             	movzx  eax,al
c001590e:	83 ec 0c             	sub    esp,0xc
c0015911:	53                   	push   ebx
c0015912:	51                   	push   ecx
c0015913:	52                   	push   edx
c0015914:	50                   	push   eax
c0015915:	68 1c b1 02 c0       	push   0xc002b11c
c001591a:	e8 3b d6 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001591f:	83 c4 20             	add    esp,0x20
c0015922:	83 ec 0c             	sub    esp,0xc
c0015925:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015928:	e8 a3 f4 ff ff       	call   c0014dd0 <displayDebugInfo(regs*)>
c001592d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015930:	5b                   	pop    ebx
c0015931:	5e                   	pop    esi
c0015932:	5d                   	pop    ebp
c0015933:	c3                   	ret    

c0015934 <displayProgramFault(char const*)>:
c0015934:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015939:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001593c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015942:	85 c0                	test   eax,eax
c0015944:	74 15                	je     c001595b <displayProgramFault(char const*)+0x27>
c0015946:	83 ec 0c             	sub    esp,0xc
c0015949:	6a 04                	push   0x4
c001594b:	6a 0f                	push   0xf
c001594d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015951:	50                   	push   eax
c0015952:	e8 7f b4 ff ff       	call   c0010dd6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015957:	83 c4 1c             	add    esp,0x1c
c001595a:	c3                   	ret    
c001595b:	c3                   	ret    

c001595c <setupInterruptController()>:
c001595c:	55                   	push   ebp
c001595d:	89 e5                	mov    ebp,esp
c001595f:	53                   	push   ebx
c0015960:	83 ec 24             	sub    esp,0x24
c0015963:	b8 00 00 00 00       	mov    eax,0x0
c0015968:	85 c0                	test   eax,eax
c001596a:	0f 95 c0             	setne  al
c001596d:	84 c0                	test   al,al
c001596f:	74 5b                	je     c00159cc <setupInterruptController()+0x70>
c0015971:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015978:	83 ec 0c             	sub    esp,0xc
c001597b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001597e:	e8 c0 9e ff ff       	call   c000f843 <malloc>
c0015983:	83 c4 10             	add    esp,0x10
c0015986:	89 c3                	mov    ebx,eax
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	53                   	push   ebx
c001598c:	e8 c3 ff 00 00       	call   c0025954 <APIC::APIC()>
c0015991:	83 c4 10             	add    esp,0x10
c0015994:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015997:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001599a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001599d:	8b 00                	mov    eax,DWORD PTR [eax]
c001599f:	83 c0 08             	add    eax,0x8
c00159a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a4:	6a 00                	push   0x0
c00159a6:	6a 00                	push   0x0
c00159a8:	6a 00                	push   0x0
c00159aa:	52                   	push   edx
c00159ab:	ff d0                	call   eax
c00159ad:	83 c4 10             	add    esp,0x10
c00159b0:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00159b5:	83 ec 08             	sub    esp,0x8
c00159b8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159bb:	50                   	push   eax
c00159bc:	e8 bf e9 ff ff       	call   c0014380 <Device::addChild(Device*)>
c00159c1:	83 c4 10             	add    esp,0x10
c00159c4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159c7:	e9 52 03 00 00       	jmp    c0015d1e <setupInterruptController()+0x3c2>
c00159cc:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00159d1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159d7:	83 e0 01             	and    eax,0x1
c00159da:	84 c0                	test   al,al
c00159dc:	0f 95 c0             	setne  al
c00159df:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159e2:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159e9:	83 ec 0c             	sub    esp,0xc
c00159ec:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159ef:	e8 4f 9e ff ff       	call   c000f843 <malloc>
c00159f4:	83 c4 10             	add    esp,0x10
c00159f7:	89 c3                	mov    ebx,eax
c00159f9:	83 ec 0c             	sub    esp,0xc
c00159fc:	53                   	push   ebx
c00159fd:	e8 aa 04 01 00       	call   c0025eac <PIC::PIC()>
c0015a02:	83 c4 10             	add    esp,0x10
c0015a05:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a08:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a10:	83 c0 08             	add    eax,0x8
c0015a13:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a15:	6a 00                	push   0x0
c0015a17:	6a 00                	push   0x0
c0015a19:	6a 00                	push   0x0
c0015a1b:	52                   	push   edx
c0015a1c:	ff d0                	call   eax
c0015a1e:	83 c4 10             	add    esp,0x10
c0015a21:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a25:	74 73                	je     c0015a9a <setupInterruptController()+0x13e>
c0015a27:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2f:	83 c0 0c             	add    eax,0xc
c0015a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a34:	6a 00                	push   0x0
c0015a36:	6a 00                	push   0x0
c0015a38:	6a 00                	push   0x0
c0015a3a:	52                   	push   edx
c0015a3b:	ff d0                	call   eax
c0015a3d:	83 c4 10             	add    esp,0x10
c0015a40:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a44:	74 15                	je     c0015a5b <setupInterruptController()+0xff>
c0015a46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4b:	83 c0 04             	add    eax,0x4
c0015a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a50:	83 ec 0c             	sub    esp,0xc
c0015a53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a56:	ff d0                	call   eax
c0015a58:	83 c4 10             	add    esp,0x10
c0015a5b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a62:	83 ec 0c             	sub    esp,0xc
c0015a65:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a68:	e8 d6 9d ff ff       	call   c000f843 <malloc>
c0015a6d:	83 c4 10             	add    esp,0x10
c0015a70:	89 c3                	mov    ebx,eax
c0015a72:	83 ec 0c             	sub    esp,0xc
c0015a75:	53                   	push   ebx
c0015a76:	e8 d9 fe 00 00       	call   c0025954 <APIC::APIC()>
c0015a7b:	83 c4 10             	add    esp,0x10
c0015a7e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a81:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a87:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a89:	83 c0 08             	add    eax,0x8
c0015a8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8e:	6a 00                	push   0x0
c0015a90:	6a 00                	push   0x0
c0015a92:	6a 00                	push   0x0
c0015a94:	52                   	push   edx
c0015a95:	ff d0                	call   eax
c0015a97:	83 c4 10             	add    esp,0x10
c0015a9a:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0015a9f:	83 ec 08             	sub    esp,0x8
c0015aa2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa5:	50                   	push   eax
c0015aa6:	e8 d5 e8 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0015aab:	83 c4 10             	add    esp,0x10
c0015aae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab3:	83 c0 24             	add    eax,0x24
c0015ab6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab8:	6a 00                	push   0x0
c0015aba:	68 0f 53 01 c0       	push   0xc001530f
c0015abf:	6a 00                	push   0x0
c0015ac1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac4:	ff d0                	call   eax
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ace:	83 c0 24             	add    eax,0x24
c0015ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad3:	6a 00                	push   0x0
c0015ad5:	68 0f 53 01 c0       	push   0xc001530f
c0015ada:	6a 01                	push   0x1
c0015adc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015adf:	ff d0                	call   eax
c0015ae1:	83 c4 10             	add    esp,0x10
c0015ae4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae9:	83 c0 24             	add    eax,0x24
c0015aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aee:	6a 00                	push   0x0
c0015af0:	68 2d 4c 01 c0       	push   0xc0014c2d
c0015af5:	6a 02                	push   0x2
c0015af7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afa:	ff d0                	call   eax
c0015afc:	83 c4 10             	add    esp,0x10
c0015aff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b04:	83 c0 24             	add    eax,0x24
c0015b07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b09:	6a 00                	push   0x0
c0015b0b:	68 0f 53 01 c0       	push   0xc001530f
c0015b10:	6a 03                	push   0x3
c0015b12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b15:	ff d0                	call   eax
c0015b17:	83 c4 10             	add    esp,0x10
c0015b1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1f:	83 c0 24             	add    eax,0x24
c0015b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b24:	6a 00                	push   0x0
c0015b26:	68 0f 53 01 c0       	push   0xc001530f
c0015b2b:	6a 04                	push   0x4
c0015b2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b30:	ff d0                	call   eax
c0015b32:	83 c4 10             	add    esp,0x10
c0015b35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3a:	83 c0 24             	add    eax,0x24
c0015b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3f:	6a 00                	push   0x0
c0015b41:	68 0f 53 01 c0       	push   0xc001530f
c0015b46:	6a 05                	push   0x5
c0015b48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4b:	ff d0                	call   eax
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b55:	83 c0 24             	add    eax,0x24
c0015b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5a:	6a 00                	push   0x0
c0015b5c:	68 2e 53 01 c0       	push   0xc001532e
c0015b61:	6a 06                	push   0x6
c0015b63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b66:	ff d0                	call   eax
c0015b68:	83 c4 10             	add    esp,0x10
c0015b6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b70:	83 c0 24             	add    eax,0x24
c0015b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b75:	6a 00                	push   0x0
c0015b77:	68 5f 52 01 c0       	push   0xc001525f
c0015b7c:	6a 07                	push   0x7
c0015b7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b81:	ff d0                	call   eax
c0015b83:	83 c4 10             	add    esp,0x10
c0015b86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8b:	83 c0 24             	add    eax,0x24
c0015b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b90:	6a 00                	push   0x0
c0015b92:	68 48 4a 01 c0       	push   0xc0014a48
c0015b97:	6a 08                	push   0x8
c0015b99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9c:	ff d0                	call   eax
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba6:	83 c0 24             	add    eax,0x24
c0015ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bab:	6a 00                	push   0x0
c0015bad:	68 0f 53 01 c0       	push   0xc001530f
c0015bb2:	6a 09                	push   0x9
c0015bb4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb7:	ff d0                	call   eax
c0015bb9:	83 c4 10             	add    esp,0x10
c0015bbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc1:	83 c0 24             	add    eax,0x24
c0015bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc6:	6a 00                	push   0x0
c0015bc8:	68 0f 53 01 c0       	push   0xc001530f
c0015bcd:	6a 0a                	push   0xa
c0015bcf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd2:	ff d0                	call   eax
c0015bd4:	83 c4 10             	add    esp,0x10
c0015bd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdc:	83 c0 24             	add    eax,0x24
c0015bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be1:	6a 00                	push   0x0
c0015be3:	68 0f 53 01 c0       	push   0xc001530f
c0015be8:	6a 0b                	push   0xb
c0015bea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bed:	ff d0                	call   eax
c0015bef:	83 c4 10             	add    esp,0x10
c0015bf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf7:	83 c0 24             	add    eax,0x24
c0015bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfc:	6a 00                	push   0x0
c0015bfe:	68 0f 53 01 c0       	push   0xc001530f
c0015c03:	6a 0c                	push   0xc
c0015c05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c08:	ff d0                	call   eax
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c12:	83 c0 24             	add    eax,0x24
c0015c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c17:	6a 00                	push   0x0
c0015c19:	68 8e 52 01 c0       	push   0xc001528e
c0015c1e:	6a 0d                	push   0xd
c0015c20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c23:	ff d0                	call   eax
c0015c25:	83 c4 10             	add    esp,0x10
c0015c28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2d:	83 c0 24             	add    eax,0x24
c0015c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c32:	6a 00                	push   0x0
c0015c34:	68 c7 52 01 c0       	push   0xc00152c7
c0015c39:	6a 0e                	push   0xe
c0015c3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3e:	ff d0                	call   eax
c0015c40:	83 c4 10             	add    esp,0x10
c0015c43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c48:	83 c0 24             	add    eax,0x24
c0015c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4d:	6a 00                	push   0x0
c0015c4f:	68 0f 53 01 c0       	push   0xc001530f
c0015c54:	6a 0f                	push   0xf
c0015c56:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c59:	ff d0                	call   eax
c0015c5b:	83 c4 10             	add    esp,0x10
c0015c5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c63:	83 c0 24             	add    eax,0x24
c0015c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c68:	6a 00                	push   0x0
c0015c6a:	68 0f 53 01 c0       	push   0xc001530f
c0015c6f:	6a 10                	push   0x10
c0015c71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c74:	ff d0                	call   eax
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7e:	83 c0 24             	add    eax,0x24
c0015c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c83:	6a 00                	push   0x0
c0015c85:	68 0f 53 01 c0       	push   0xc001530f
c0015c8a:	6a 11                	push   0x11
c0015c8c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8f:	ff d0                	call   eax
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c99:	83 c0 24             	add    eax,0x24
c0015c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9e:	6a 00                	push   0x0
c0015ca0:	68 0f 53 01 c0       	push   0xc001530f
c0015ca5:	6a 12                	push   0x12
c0015ca7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015caa:	ff d0                	call   eax
c0015cac:	83 c4 10             	add    esp,0x10
c0015caf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb4:	83 c0 24             	add    eax,0x24
c0015cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb9:	6a 00                	push   0x0
c0015cbb:	68 0f 53 01 c0       	push   0xc001530f
c0015cc0:	6a 13                	push   0x13
c0015cc2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc5:	ff d0                	call   eax
c0015cc7:	83 c4 10             	add    esp,0x10
c0015cca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccf:	83 c0 24             	add    eax,0x24
c0015cd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd4:	6a 00                	push   0x0
c0015cd6:	68 0f 53 01 c0       	push   0xc001530f
c0015cdb:	6a 14                	push   0x14
c0015cdd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce0:	ff d0                	call   eax
c0015ce2:	83 c4 10             	add    esp,0x10
c0015ce5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cea:	83 c0 24             	add    eax,0x24
c0015ced:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cef:	6a 00                	push   0x0
c0015cf1:	68 0f 53 01 c0       	push   0xc001530f
c0015cf6:	6a 1e                	push   0x1e
c0015cf8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cfb:	ff d0                	call   eax
c0015cfd:	83 c4 10             	add    esp,0x10
c0015d00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d05:	83 c0 24             	add    eax,0x24
c0015d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0a:	6a 00                	push   0x0
c0015d0c:	68 91 c7 01 c0       	push   0xc001c791
c0015d11:	6a 60                	push   0x60
c0015d13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d16:	ff d0                	call   eax
c0015d18:	83 c4 10             	add    esp,0x10
c0015d1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d1e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d21:	c9                   	leave  
c0015d22:	c3                   	ret    
c0015d23:	90                   	nop

c0015d24 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d24:	55                   	push   ebp
c0015d25:	89 e5                	mov    ebp,esp
c0015d27:	83 ec 08             	sub    esp,0x8
c0015d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d2d:	83 ec 0c             	sub    esp,0xc
c0015d30:	50                   	push   eax
c0015d31:	e8 36 e9 ff ff       	call   c001466c <Device::getName()>
c0015d36:	83 c4 10             	add    esp,0x10
c0015d39:	8a 00                	mov    al,BYTE PTR [eax]
c0015d3b:	3c 41                	cmp    al,0x41
c0015d3d:	0f 94 c0             	sete   al
c0015d40:	84 c0                	test   al,al
c0015d42:	74 28                	je     c0015d6c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d44:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d48:	7f 12                	jg     c0015d5c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d4d:	05 c0 d6 02 c0       	add    eax,0xc002d6c0
c0015d52:	8a 00                	mov    al,BYTE PTR [eax]
c0015d54:	0f b6 c0             	movzx  eax,al
c0015d57:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d5a:	eb 10                	jmp    c0015d6c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	68 20 ae 02 c0       	push   0xc002ae20
c0015d64:	e8 9e 48 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0015d69:	83 c4 10             	add    esp,0x10
c0015d6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d6f:	c9                   	leave  
c0015d70:	c3                   	ret    
c0015d71:	90                   	nop

c0015d72 <startGUI(void*)>:
c0015d72:	55                   	push   ebp
c0015d73:	89 e5                	mov    ebp,esp
c0015d75:	53                   	push   ebx
c0015d76:	83 ec 04             	sub    esp,0x4
c0015d79:	e8 80 80 00 00       	call   c001ddfe <unlockScheduler()>
c0015d7e:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015d84:	83 ec 08             	sub    esp,0x8
c0015d87:	6a 01                	push   0x1
c0015d89:	68 8c b1 02 c0       	push   0xc002b18c
c0015d8e:	e8 a7 79 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	83 ec 08             	sub    esp,0x8
c0015d99:	53                   	push   ebx
c0015d9a:	50                   	push   eax
c0015d9b:	e8 e9 7b 00 00       	call   c001d989 <Thr::executeDLL(unsigned long, void*)>
c0015da0:	83 c4 10             	add    esp,0x10
c0015da3:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015da9:	83 ec 08             	sub    esp,0x8
c0015dac:	6a 01                	push   0x1
c0015dae:	68 a6 b1 02 c0       	push   0xc002b1a6
c0015db3:	e8 82 79 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0015db8:	83 c4 10             	add    esp,0x10
c0015dbb:	83 ec 08             	sub    esp,0x8
c0015dbe:	53                   	push   ebx
c0015dbf:	50                   	push   eax
c0015dc0:	e8 c4 7b 00 00       	call   c001d989 <Thr::executeDLL(unsigned long, void*)>
c0015dc5:	83 c4 10             	add    esp,0x10
c0015dc8:	90                   	nop
c0015dc9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dcc:	c9                   	leave  
c0015dcd:	c3                   	ret    

c0015dce <startGUIVESA(void*)>:
c0015dce:	55                   	push   ebp
c0015dcf:	89 e5                	mov    ebp,esp
c0015dd1:	53                   	push   ebx
c0015dd2:	83 ec 04             	sub    esp,0x4
c0015dd5:	e8 24 80 00 00       	call   c001ddfe <unlockScheduler()>
c0015dda:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015de0:	83 ec 08             	sub    esp,0x8
c0015de3:	6a 01                	push   0x1
c0015de5:	68 c0 b1 02 c0       	push   0xc002b1c0
c0015dea:	e8 4b 79 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0015def:	83 c4 10             	add    esp,0x10
c0015df2:	83 ec 08             	sub    esp,0x8
c0015df5:	53                   	push   ebx
c0015df6:	50                   	push   eax
c0015df7:	e8 8d 7b 00 00       	call   c001d989 <Thr::executeDLL(unsigned long, void*)>
c0015dfc:	83 c4 10             	add    esp,0x10
c0015dff:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015e05:	83 ec 08             	sub    esp,0x8
c0015e08:	6a 01                	push   0x1
c0015e0a:	68 a6 b1 02 c0       	push   0xc002b1a6
c0015e0f:	e8 26 79 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0015e14:	83 c4 10             	add    esp,0x10
c0015e17:	83 ec 08             	sub    esp,0x8
c0015e1a:	53                   	push   ebx
c0015e1b:	50                   	push   eax
c0015e1c:	e8 68 7b 00 00       	call   c001d989 <Thr::executeDLL(unsigned long, void*)>
c0015e21:	83 c4 10             	add    esp,0x10
c0015e24:	90                   	nop
c0015e25:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e28:	c9                   	leave  
c0015e29:	c3                   	ret    

c0015e2a <sendKeyToTerminal(unsigned char)>:
c0015e2a:	55                   	push   ebp
c0015e2b:	89 e5                	mov    ebp,esp
c0015e2d:	83 ec 28             	sub    esp,0x28
c0015e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e33:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e36:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0015e3b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e3f:	83 ec 08             	sub    esp,0x8
c0015e42:	52                   	push   edx
c0015e43:	50                   	push   eax
c0015e44:	e8 c9 b4 ff ff       	call   c0011312 <VgaText::receiveKey(unsigned char)>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e50:	75 41                	jne    c0015e93 <sendKeyToTerminal(unsigned char)+0x69>
c0015e52:	e8 cc 7f 00 00       	call   c001de23 <lockStuff()>
c0015e57:	a1 20 e6 02 c0       	mov    eax,ds:0xc002e620
c0015e5c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e5f:	c7 05 20 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e620,0x0
c0015e69:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e6d:	74 1f                	je     c0015e8e <sendKeyToTerminal(unsigned char)+0x64>
c0015e6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e72:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e78:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e7b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e7e:	83 ec 0c             	sub    esp,0xc
c0015e81:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e84:	e8 8b 85 00 00       	call   c001e414 <unblockTask(ThreadControlBlock*)>
c0015e89:	83 c4 10             	add    esp,0x10
c0015e8c:	eb db                	jmp    c0015e69 <sendKeyToTerminal(unsigned char)+0x3f>
c0015e8e:	e8 2a 83 00 00       	call   c001e1bd <unlockStuff()>
c0015e93:	90                   	nop
c0015e94:	c9                   	leave  
c0015e95:	c3                   	ret    

c0015e96 <sendKeyboardToken(KeyboardToken)>:
c0015e96:	55                   	push   ebp
c0015e97:	89 e5                	mov    ebp,esp
c0015e99:	83 ec 18             	sub    esp,0x18
c0015e9c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea2:	0f b7 c0             	movzx  eax,ax
c0015ea5:	83 f2 01             	xor    edx,0x1
c0015ea8:	88 90 40 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd19c0],dl
c0015eae:	a1 28 e6 02 c0       	mov    eax,ds:0xc002e628
c0015eb3:	85 c0                	test   eax,eax
c0015eb5:	74 24                	je     c0015edb <sendKeyboardToken(KeyboardToken)+0x45>
c0015eb7:	8b 0d 28 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e628
c0015ebd:	83 ec 04             	sub    esp,0x4
c0015ec0:	68 40 e6 02 c0       	push   0xc002e640
c0015ec5:	83 ec 08             	sub    esp,0x8
c0015ec8:	89 e2                	mov    edx,esp
c0015eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ecd:	89 02                	mov    DWORD PTR [edx],eax
c0015ecf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ed2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ed6:	ff d1                	call   ecx
c0015ed8:	83 c4 10             	add    esp,0x10
c0015edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ede:	66 3d 03 02          	cmp    ax,0x203
c0015ee2:	75 07                	jne    c0015eeb <sendKeyboardToken(KeyboardToken)+0x55>
c0015ee4:	a0 40 e7 02 c0       	mov    al,ds:0xc002e740
c0015ee9:	84 c0                	test   al,al
c0015eeb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015eef:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ef2:	a0 48 ea 02 c0       	mov    al,ds:0xc002ea48
c0015ef7:	38 c2                	cmp    dl,al
c0015ef9:	74 1c                	je     c0015f17 <sendKeyboardToken(KeyboardToken)+0x81>
c0015efb:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015efe:	a2 48 ea 02 c0       	mov    ds:0xc002ea48,al
c0015f03:	a0 48 ea 02 c0       	mov    al,ds:0xc002ea48
c0015f08:	0f b6 c0             	movzx  eax,al
c0015f0b:	83 ec 0c             	sub    esp,0xc
c0015f0e:	50                   	push   eax
c0015f0f:	e8 5e a6 ff ff       	call   c0010572 <setTerminalScrollLock(bool)>
c0015f14:	83 c4 10             	add    esp,0x10
c0015f17:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f1a:	84 c0                	test   al,al
c0015f1c:	0f 84 ae 00 00 00    	je     c0015fd0 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f25:	66 3d 10 03          	cmp    ax,0x310
c0015f29:	75 06                	jne    c0015f31 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f2b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f34:	66 3d 11 03          	cmp    ax,0x311
c0015f38:	75 06                	jne    c0015f40 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f3a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f43:	66 3d 12 03          	cmp    ax,0x312
c0015f47:	75 06                	jne    c0015f4f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f49:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f52:	66 3d 13 03          	cmp    ax,0x313
c0015f56:	75 06                	jne    c0015f5e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f58:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f61:	66 3d 14 03          	cmp    ax,0x314
c0015f65:	75 06                	jne    c0015f6d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f67:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f70:	66 3d 15 03          	cmp    ax,0x315
c0015f74:	75 06                	jne    c0015f7c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f76:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7f:	66 3d 16 03          	cmp    ax,0x316
c0015f83:	75 06                	jne    c0015f8b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f85:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8e:	66 3d 17 03          	cmp    ax,0x317
c0015f92:	75 06                	jne    c0015f9a <sendKeyboardToken(KeyboardToken)+0x104>
c0015f94:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9d:	66 3d 18 03          	cmp    ax,0x318
c0015fa1:	75 06                	jne    c0015fa9 <sendKeyboardToken(KeyboardToken)+0x113>
c0015fa3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fac:	66 3d 19 03          	cmp    ax,0x319
c0015fb0:	75 06                	jne    c0015fb8 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fb2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbb:	66 3d 1a 03          	cmp    ax,0x31a
c0015fbf:	0f 85 c9 00 00 00    	jne    c001608e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fc5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fcb:	e9 be 00 00 00       	jmp    c001608e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd3:	66 3d 10 03          	cmp    ax,0x310
c0015fd7:	75 0a                	jne    c0015fe3 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fd9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fdf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe6:	66 3d 11 03          	cmp    ax,0x311
c0015fea:	75 0a                	jne    c0015ff6 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fec:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ff2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff9:	66 3d 12 03          	cmp    ax,0x312
c0015ffd:	75 0a                	jne    c0016009 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fff:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016005:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600c:	66 3d 13 03          	cmp    ax,0x313
c0016010:	75 0a                	jne    c001601c <sendKeyboardToken(KeyboardToken)+0x186>
c0016012:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016018:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001601c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601f:	66 3d 14 03          	cmp    ax,0x314
c0016023:	75 0a                	jne    c001602f <sendKeyboardToken(KeyboardToken)+0x199>
c0016025:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001602b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001602f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016032:	66 3d 15 03          	cmp    ax,0x315
c0016036:	75 0a                	jne    c0016042 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016038:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001603e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016045:	66 3d 16 03          	cmp    ax,0x316
c0016049:	75 0a                	jne    c0016055 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001604b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016051:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016058:	66 3d 17 03          	cmp    ax,0x317
c001605c:	75 0a                	jne    c0016068 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001605e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016064:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606b:	66 3d 18 03          	cmp    ax,0x318
c001606f:	75 0a                	jne    c001607b <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016071:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016077:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001607b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607e:	66 3d 19 03          	cmp    ax,0x319
c0016082:	75 0a                	jne    c001608e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016084:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001608a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016091:	66 3d 00 02          	cmp    ax,0x200
c0016095:	75 2c                	jne    c00160c3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016097:	a0 40 ea 02 c0       	mov    al,ds:0xc002ea40
c001609c:	83 f0 01             	xor    eax,0x1
c001609f:	84 c0                	test   al,al
c00160a1:	74 20                	je     c00160c3 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160a3:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00160a8:	6a 01                	push   0x1
c00160aa:	6a 00                	push   0x0
c00160ac:	68 72 5d 01 c0       	push   0xc0015d72
c00160b1:	50                   	push   eax
c00160b2:	e8 77 7e 00 00       	call   c001df2e <Process::createThread(void (*)(void*), void*, int)>
c00160b7:	83 c4 10             	add    esp,0x10
c00160ba:	c6 05 40 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea40,0x1
c00160c1:	eb 33                	jmp    c00160f6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c6:	66 3d 01 02          	cmp    ax,0x201
c00160ca:	75 2a                	jne    c00160f6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160cc:	a0 40 ea 02 c0       	mov    al,ds:0xc002ea40
c00160d1:	83 f0 01             	xor    eax,0x1
c00160d4:	84 c0                	test   al,al
c00160d6:	74 1e                	je     c00160f6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160d8:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00160dd:	6a 01                	push   0x1
c00160df:	6a 00                	push   0x0
c00160e1:	68 ce 5d 01 c0       	push   0xc0015dce
c00160e6:	50                   	push   eax
c00160e7:	e8 42 7e 00 00       	call   c001df2e <Process::createThread(void (*)(void*), void*, int)>
c00160ec:	83 c4 10             	add    esp,0x10
c00160ef:	c6 05 40 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea40,0x1
c00160f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f9:	66 3d 1d 03          	cmp    ax,0x31d
c00160fd:	75 06                	jne    c0016105 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160ff:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016108:	66 3d 1c 03          	cmp    ax,0x31c
c001610c:	75 06                	jne    c0016114 <sendKeyboardToken(KeyboardToken)+0x27e>
c001610e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016117:	66 3d 1b 03          	cmp    ax,0x31b
c001611b:	75 06                	jne    c0016123 <sendKeyboardToken(KeyboardToken)+0x28d>
c001611d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016126:	66 3d 1e 03          	cmp    ax,0x31e
c001612a:	75 06                	jne    c0016132 <sendKeyboardToken(KeyboardToken)+0x29c>
c001612c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016135:	66 3d 1f 03          	cmp    ax,0x31f
c0016139:	75 06                	jne    c0016141 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001613b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016144:	66 3d 1a 03          	cmp    ax,0x31a
c0016148:	75 06                	jne    c0016150 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001614a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016150:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016154:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016157:	83 f0 01             	xor    eax,0x1
c001615a:	84 c0                	test   al,al
c001615c:	74 77                	je     c00161d5 <sendKeyboardToken(KeyboardToken)+0x33f>
c001615e:	a0 41 e7 02 c0       	mov    al,ds:0xc002e741
c0016163:	84 c0                	test   al,al
c0016165:	74 41                	je     c00161a8 <sendKeyboardToken(KeyboardToken)+0x312>
c0016167:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001616b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001616f:	74 2b                	je     c001619c <sendKeyboardToken(KeyboardToken)+0x306>
c0016171:	8b 15 44 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea44
c0016177:	89 d0                	mov    eax,edx
c0016179:	c1 e0 02             	shl    eax,0x2
c001617c:	01 d0                	add    eax,edx
c001617e:	01 c0                	add    eax,eax
c0016180:	a3 44 ea 02 c0       	mov    ds:0xc002ea44,eax
c0016185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016188:	0f b7 c0             	movzx  eax,ax
c001618b:	8d 50 d0             	lea    edx,[eax-0x30]
c001618e:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c0016193:	01 d0                	add    eax,edx
c0016195:	a3 44 ea 02 c0       	mov    ds:0xc002ea44,eax
c001619a:	eb 6d                	jmp    c0016209 <sendKeyboardToken(KeyboardToken)+0x373>
c001619c:	c7 05 44 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea44,0x0
c00161a6:	eb 61                	jmp    c0016209 <sendKeyboardToken(KeyboardToken)+0x373>
c00161a8:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c00161ad:	85 c0                	test   eax,eax
c00161af:	74 18                	je     c00161c9 <sendKeyboardToken(KeyboardToken)+0x333>
c00161b1:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c00161b6:	0f b6 c0             	movzx  eax,al
c00161b9:	83 ec 0c             	sub    esp,0xc
c00161bc:	50                   	push   eax
c00161bd:	e8 68 fc ff ff       	call   c0015e2a <sendKeyToTerminal(unsigned char)>
c00161c2:	83 c4 10             	add    esp,0x10
c00161c5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161c9:	c7 05 44 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea44,0x0
c00161d3:	eb 34                	jmp    c0016209 <sendKeyboardToken(KeyboardToken)+0x373>
c00161d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d8:	66 3d 01 01          	cmp    ax,0x101
c00161dc:	75 2b                	jne    c0016209 <sendKeyboardToken(KeyboardToken)+0x373>
c00161de:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c00161e3:	85 c0                	test   eax,eax
c00161e5:	74 18                	je     c00161ff <sendKeyboardToken(KeyboardToken)+0x369>
c00161e7:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c00161ec:	0f b6 c0             	movzx  eax,al
c00161ef:	83 ec 0c             	sub    esp,0xc
c00161f2:	50                   	push   eax
c00161f3:	e8 32 fc ff ff       	call   c0015e2a <sendKeyToTerminal(unsigned char)>
c00161f8:	83 c4 10             	add    esp,0x10
c00161fb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161ff:	c7 05 44 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea44,0x0
c0016209:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001620c:	83 f0 01             	xor    eax,0x1
c001620f:	84 c0                	test   al,al
c0016211:	74 4c                	je     c001625f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016213:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016216:	83 f0 01             	xor    eax,0x1
c0016219:	84 c0                	test   al,al
c001621b:	74 42                	je     c001625f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001621d:	a0 40 e7 02 c0       	mov    al,ds:0xc002e740
c0016222:	83 f0 01             	xor    eax,0x1
c0016225:	84 c0                	test   al,al
c0016227:	74 36                	je     c001625f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622c:	66 83 f8 1f          	cmp    ax,0x1f
c0016230:	76 09                	jbe    c001623b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016235:	66 83 f8 7e          	cmp    ax,0x7e
c0016239:	76 12                	jbe    c001624d <sendKeyboardToken(KeyboardToken)+0x3b7>
c001623b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623e:	66 83 f8 0a          	cmp    ax,0xa
c0016242:	74 09                	je     c001624d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016247:	66 83 f8 08          	cmp    ax,0x8
c001624b:	75 12                	jne    c001625f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001624d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016250:	0f b6 c0             	movzx  eax,al
c0016253:	83 ec 0c             	sub    esp,0xc
c0016256:	50                   	push   eax
c0016257:	e8 ce fb ff ff       	call   c0015e2a <sendKeyToTerminal(unsigned char)>
c001625c:	83 c4 10             	add    esp,0x10
c001625f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016262:	83 f0 01             	xor    eax,0x1
c0016265:	84 c0                	test   al,al
c0016267:	74 4f                	je     c00162b8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016269:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001626c:	83 f0 01             	xor    eax,0x1
c001626f:	84 c0                	test   al,al
c0016271:	74 45                	je     c00162b8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016273:	a0 40 e7 02 c0       	mov    al,ds:0xc002e740
c0016278:	84 c0                	test   al,al
c001627a:	74 3c                	je     c00162b8 <sendKeyboardToken(KeyboardToken)+0x422>
c001627c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627f:	66 83 f8 3f          	cmp    ax,0x3f
c0016283:	76 33                	jbe    c00162b8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016288:	66 83 f8 7f          	cmp    ax,0x7f
c001628c:	77 2a                	ja     c00162b8 <sendKeyboardToken(KeyboardToken)+0x422>
c001628e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016291:	88 c2                	mov    dl,al
c0016293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016296:	66 83 f8 5f          	cmp    ax,0x5f
c001629a:	76 04                	jbe    c00162a0 <sendKeyboardToken(KeyboardToken)+0x40a>
c001629c:	b0 20                	mov    al,0x20
c001629e:	eb 02                	jmp    c00162a2 <sendKeyboardToken(KeyboardToken)+0x40c>
c00162a0:	b0 00                	mov    al,0x0
c00162a2:	29 c2                	sub    edx,eax
c00162a4:	88 d0                	mov    al,dl
c00162a6:	83 e8 40             	sub    eax,0x40
c00162a9:	0f b6 c0             	movzx  eax,al
c00162ac:	83 ec 0c             	sub    esp,0xc
c00162af:	50                   	push   eax
c00162b0:	e8 75 fb ff ff       	call   c0015e2a <sendKeyToTerminal(unsigned char)>
c00162b5:	83 c4 10             	add    esp,0x10
c00162b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162bb:	66 3d 00 03          	cmp    ax,0x300
c00162bf:	75 0f                	jne    c00162d0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162c1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162c4:	83 f0 01             	xor    eax,0x1
c00162c7:	84 c0                	test   al,al
c00162c9:	74 05                	je     c00162d0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162cb:	e8 d7 aa ff ff       	call   c0010da7 <doTerminalCycle()>
c00162d0:	90                   	nop
c00162d1:	c9                   	leave  
c00162d2:	c3                   	ret    

c00162d3 <clearInternalKeybuffer(VgaText*)>:
c00162d3:	55                   	push   ebp
c00162d4:	89 e5                	mov    ebp,esp
c00162d6:	83 ec 08             	sub    esp,0x8
c00162d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162dc:	05 34 11 00 00       	add    eax,0x1134
c00162e1:	83 ec 0c             	sub    esp,0xc
c00162e4:	50                   	push   eax
c00162e5:	e8 aa a4 fe ff       	call   c0000794 <strlen>
c00162ea:	83 c4 10             	add    esp,0x10
c00162ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162f0:	81 c2 34 11 00 00    	add    edx,0x1134
c00162f6:	83 ec 04             	sub    esp,0x4
c00162f9:	50                   	push   eax
c00162fa:	6a 00                	push   0x0
c00162fc:	52                   	push   edx
c00162fd:	e8 76 a4 fe ff       	call   c0000778 <memset>
c0016302:	83 c4 10             	add    esp,0x10
c0016305:	90                   	nop
c0016306:	c9                   	leave  
c0016307:	c3                   	ret    

c0016308 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016308:	55                   	push   ebp
c0016309:	89 e5                	mov    ebp,esp
c001630b:	83 ec 18             	sub    esp,0x18
c001630e:	fb                   	sti    
c001630f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016316:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001631a:	0f 84 8a 00 00 00    	je     c00163aa <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016323:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016329:	84 c0                	test   al,al
c001632b:	75 11                	jne    c001633e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001632d:	e8 ca 7a 00 00       	call   c001ddfc <lockScheduler()>
c0016332:	e8 01 7e 00 00       	call   c001e138 <schedule()>
c0016337:	e8 c2 7a 00 00       	call   c001ddfe <unlockScheduler()>
c001633c:	eb e2                	jmp    c0016320 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001633e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016341:	8d 50 01             	lea    edx,[eax+0x1]
c0016344:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016347:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001634a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016350:	88 10                	mov    BYTE PTR [eax],dl
c0016352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016355:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001635b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001635e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016361:	05 34 11 00 00       	add    eax,0x1134
c0016366:	83 ec 0c             	sub    esp,0xc
c0016369:	50                   	push   eax
c001636a:	e8 25 a4 fe ff       	call   c0000794 <strlen>
c001636f:	83 c4 10             	add    esp,0x10
c0016372:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016375:	81 c2 34 11 00 00    	add    edx,0x1134
c001637b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001637e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016381:	81 c2 34 11 00 00    	add    edx,0x1134
c0016387:	83 ec 04             	sub    esp,0x4
c001638a:	50                   	push   eax
c001638b:	51                   	push   ecx
c001638c:	52                   	push   edx
c001638d:	e8 ea a2 fe ff       	call   c000067c <memmove>
c0016392:	83 c4 10             	add    esp,0x10
c0016395:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016398:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001639b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001639f:	0f 85 71 ff ff ff    	jne    c0016316 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00163a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163a8:	eb 03                	jmp    c00163ad <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00163aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163ad:	c9                   	leave  
c00163ae:	c3                   	ret    
c00163af:	90                   	nop

c00163b0 <Keyboard::Keyboard(char const*)>:
c00163b0:	83 ec 0c             	sub    esp,0xc
c00163b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b7:	83 ec 08             	sub    esp,0x8
c00163ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163be:	50                   	push   eax
c00163bf:	e8 ac e1 ff ff       	call   c0014570 <Device::Device(char const*)>
c00163c4:	83 c4 10             	add    esp,0x10
c00163c7:	ba e4 b1 02 c0       	mov    edx,0xc002b1e4
c00163cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d0:	89 10                	mov    DWORD PTR [eax],edx
c00163d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163e0:	c6 05 24 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e624,0x1
c00163e7:	90                   	nop
c00163e8:	83 c4 0c             	add    esp,0xc
c00163eb:	c3                   	ret    

c00163ec <Keyboard::~Keyboard()>:
c00163ec:	83 ec 0c             	sub    esp,0xc
c00163ef:	ba e4 b1 02 c0       	mov    edx,0xc002b1e4
c00163f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f8:	89 10                	mov    DWORD PTR [eax],edx
c00163fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fe:	83 ec 0c             	sub    esp,0xc
c0016401:	50                   	push   eax
c0016402:	e8 4b de ff ff       	call   c0014252 <Device::~Device()>
c0016407:	83 c4 10             	add    esp,0x10
c001640a:	90                   	nop
c001640b:	83 c4 0c             	add    esp,0xc
c001640e:	c3                   	ret    
c001640f:	90                   	nop

c0016410 <Keyboard::~Keyboard()>:
c0016410:	83 ec 0c             	sub    esp,0xc
c0016413:	83 ec 0c             	sub    esp,0xc
c0016416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001641a:	e8 cd ff ff ff       	call   c00163ec <Keyboard::~Keyboard()>
c001641f:	83 c4 10             	add    esp,0x10
c0016422:	83 ec 08             	sub    esp,0x8
c0016425:	68 5c 01 00 00       	push   0x15c
c001642a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001642e:	e8 47 ca ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0016433:	83 c4 10             	add    esp,0x10
c0016436:	83 c4 0c             	add    esp,0xc
c0016439:	c3                   	ret    

c001643a <LogicalDisk::close(int, int, void*)>:
c001643a:	83 c8 ff             	or     eax,0xffffffff
c001643d:	c3                   	ret    

c001643e <LogicalDisk::~LogicalDisk()>:
c001643e:	83 ec 0c             	sub    esp,0xc
c0016441:	ba 94 b2 02 c0       	mov    edx,0xc002b294
c0016446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001644a:	89 10                	mov    DWORD PTR [eax],edx
c001644c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016450:	83 ec 0c             	sub    esp,0xc
c0016453:	50                   	push   eax
c0016454:	e8 f9 dd ff ff       	call   c0014252 <Device::~Device()>
c0016459:	83 c4 10             	add    esp,0x10
c001645c:	90                   	nop
c001645d:	83 c4 0c             	add    esp,0xc
c0016460:	c3                   	ret    
c0016461:	90                   	nop

c0016462 <LogicalDisk::~LogicalDisk()>:
c0016462:	83 ec 0c             	sub    esp,0xc
c0016465:	83 ec 0c             	sub    esp,0xc
c0016468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001646c:	e8 cd ff ff ff       	call   c001643e <LogicalDisk::~LogicalDisk()>
c0016471:	83 c4 10             	add    esp,0x10
c0016474:	83 ec 08             	sub    esp,0x8
c0016477:	68 74 01 00 00       	push   0x174
c001647c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016480:	e8 f5 c9 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0016485:	83 c4 10             	add    esp,0x10
c0016488:	83 c4 0c             	add    esp,0xc
c001648b:	c3                   	ret    

c001648c <LogicalDisk::open(int, int, void*)>:
c001648c:	83 ec 18             	sub    esp,0x18
c001648f:	68 10 b2 02 c0       	push   0xc002b210
c0016494:	e8 6e 41 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0016499:	83 c8 ff             	or     eax,0xffffffff
c001649c:	83 c4 1c             	add    esp,0x1c
c001649f:	c3                   	ret    

c00164a0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164a0:	53                   	push   ebx
c00164a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164ad:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164b3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164b9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164bf:	77 10                	ja     c00164d1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164c1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164c7:	89 d3                	mov    ebx,edx
c00164c9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164cf:	72 05                	jb     c00164d6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164d1:	83 c8 ff             	or     eax,0xffffffff
c00164d4:	89 c2                	mov    edx,eax
c00164d6:	5b                   	pop    ebx
c00164d7:	c3                   	ret    

c00164d8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164d8:	56                   	push   esi
c00164d9:	83 c8 ff             	or     eax,0xffffffff
c00164dc:	53                   	push   ebx
c00164dd:	89 c2                	mov    edx,eax
c00164df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164e3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164eb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164f1:	77 27                	ja     c001651a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164f3:	89 d8                	mov    eax,ebx
c00164f5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164fb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016501:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016506:	89 c2                	mov    edx,eax
c0016508:	73 10                	jae    c001651a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001650a:	89 c8                	mov    eax,ecx
c001650c:	89 da                	mov    edx,ebx
c001650e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016514:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001651a:	5b                   	pop    ebx
c001651b:	5e                   	pop    esi
c001651c:	c3                   	ret    
c001651d:	90                   	nop

c001651e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001651e:	83 ec 1c             	sub    esp,0x1c
c0016521:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016529:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001652d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016531:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016535:	89 04 24             	mov    DWORD PTR [esp],eax
c0016538:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001653c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016544:	83 ec 08             	sub    esp,0x8
c0016547:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001654b:	50                   	push   eax
c001654c:	e8 1f e0 ff ff       	call   c0014570 <Device::Device(char const*)>
c0016551:	83 c4 10             	add    esp,0x10
c0016554:	ba 94 b2 02 c0       	mov    edx,0xc002b294
c0016559:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001655d:	89 10                	mov    DWORD PTR [eax],edx
c001655f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016563:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001656a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001656e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016579:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016583:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016587:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001658b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001658f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016595:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001659b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001659f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165a6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165ac:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165ba:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165ce:	90                   	nop
c00165cf:	83 c4 1c             	add    esp,0x1c
c00165d2:	c3                   	ret    
c00165d3:	90                   	nop

c00165d4 <LogicalDisk::assignDriveLetter()>:
c00165d4:	55                   	push   ebp
c00165d5:	57                   	push   edi
c00165d6:	56                   	push   esi
c00165d7:	53                   	push   ebx
c00165d8:	83 ec 14             	sub    esp,0x14
c00165db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165df:	8b 3d 60 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea60
c00165e5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165eb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165ef:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165f5:	8b 3d 64 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea64
c00165fb:	3c 01                	cmp    al,0x1
c00165fd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016601:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016605:	19 c0                	sbb    eax,eax
c0016607:	83 e0 02             	and    eax,0x2
c001660a:	83 c0 41             	add    eax,0x41
c001660d:	0f be e8             	movsx  ebp,al
c0016610:	3c 43                	cmp    al,0x43
c0016612:	75 10                	jne    c0016624 <LogicalDisk::assignDriveLetter()+0x50>
c0016614:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001661b:	75 5d                	jne    c001667a <LogicalDisk::assignDriveLetter()+0xa6>
c001661d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016622:	75 56                	jne    c001667a <LogicalDisk::assignDriveLetter()+0xa6>
c0016624:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016627:	ba 01 00 00 00       	mov    edx,0x1
c001662c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016630:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016634:	d3 e2                	shl    edx,cl
c0016636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001663a:	89 d7                	mov    edi,edx
c001663c:	89 d6                	mov    esi,edx
c001663e:	c1 ff 1f             	sar    edi,0x1f
c0016641:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016645:	21 f9                	and    ecx,edi
c0016647:	09 d1                	or     ecx,edx
c0016649:	75 2f                	jne    c001667a <LogicalDisk::assignDriveLetter()+0xa6>
c001664b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001664f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016653:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016659:	09 f2                	or     edx,esi
c001665b:	89 15 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,edx
c0016661:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016665:	09 fa                	or     edx,edi
c0016667:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001666b:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c0016671:	89 1c bd 80 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1580],ebx
c0016678:	eb 08                	jmp    c0016682 <LogicalDisk::assignDriveLetter()+0xae>
c001667a:	45                   	inc    ebp
c001667b:	40                   	inc    eax
c001667c:	3c 5b                	cmp    al,0x5b
c001667e:	75 90                	jne    c0016610 <LogicalDisk::assignDriveLetter()+0x3c>
c0016680:	31 c0                	xor    eax,eax
c0016682:	83 c4 14             	add    esp,0x14
c0016685:	5b                   	pop    ebx
c0016686:	5e                   	pop    esi
c0016687:	5f                   	pop    edi
c0016688:	5d                   	pop    ebp
c0016689:	c3                   	ret    

c001668a <LogicalDisk::mount()>:
c001668a:	56                   	push   esi
c001668b:	53                   	push   ebx
c001668c:	51                   	push   ecx
c001668d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016691:	8b 1d f0 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5f0
c0016697:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166a1:	85 db                	test   ebx,ebx
c00166a3:	74 50                	je     c00166f5 <LogicalDisk::mount()+0x6b>
c00166a5:	e8 3d 77 00 00       	call   c001dde7 <getIRQNestingLevel()>
c00166aa:	52                   	push   edx
c00166ab:	52                   	push   edx
c00166ac:	50                   	push   eax
c00166ad:	68 34 b2 02 c0       	push   0xc002b234
c00166b2:	e8 a3 c8 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00166b7:	83 c4 0c             	add    esp,0xc
c00166ba:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166c1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166c3:	83 e8 41             	sub    eax,0x41
c00166c6:	50                   	push   eax
c00166c7:	56                   	push   esi
c00166c8:	53                   	push   ebx
c00166c9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166cc:	83 c4 10             	add    esp,0x10
c00166cf:	84 c0                	test   al,al
c00166d1:	74 08                	je     c00166db <LogicalDisk::mount()+0x51>
c00166d3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166d9:	eb 1c                	jmp    c00166f7 <LogicalDisk::mount()+0x6d>
c00166db:	e8 07 77 00 00       	call   c001dde7 <getIRQNestingLevel()>
c00166e0:	51                   	push   ecx
c00166e1:	51                   	push   ecx
c00166e2:	50                   	push   eax
c00166e3:	68 4f b2 02 c0       	push   0xc002b24f
c00166e8:	e8 6d c8 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00166ed:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166f0:	83 c4 10             	add    esp,0x10
c00166f3:	eb ac                	jmp    c00166a1 <LogicalDisk::mount()+0x17>
c00166f5:	31 c0                	xor    eax,eax
c00166f7:	5a                   	pop    edx
c00166f8:	5b                   	pop    ebx
c00166f9:	5e                   	pop    esi
c00166fa:	c3                   	ret    
c00166fb:	90                   	nop

c00166fc <LogicalDisk::unmount()>:
c00166fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016700:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001670a:	c3                   	ret    
c001670b:	90                   	nop

c001670c <LogicalDisk::eject()>:
c001670c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016710:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016716:	8b 10                	mov    edx,DWORD PTR [eax]
c0016718:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001671c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001671f:	90                   	nop

c0016720 <LogicalDisk::unassignDriveLetter()>:
c0016720:	57                   	push   edi
c0016721:	56                   	push   esi
c0016722:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016726:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001672d:	84 c9                	test   cl,cl
c001672f:	75 0f                	jne    c0016740 <LogicalDisk::unassignDriveLetter()+0x20>
c0016731:	c7 44 24 0c 6a b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b26a
c0016739:	5e                   	pop    esi
c001673a:	5f                   	pop    edi
c001673b:	e9 c7 3e 00 00       	jmp    c001a607 <Krnl::panic(char const*)>
c0016740:	83 e9 41             	sub    ecx,0x41
c0016743:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001674a:	b8 01 00 00 00       	mov    eax,0x1
c001674f:	c7 04 8d 80 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1580],0x0
c001675a:	d3 e0                	shl    eax,cl
c001675c:	89 c7                	mov    edi,eax
c001675e:	f7 d0                	not    eax
c0016760:	c1 ff 1f             	sar    edi,0x1f
c0016763:	21 05 60 ea 02 c0    	and    DWORD PTR ds:0xc002ea60,eax
c0016769:	89 fe                	mov    esi,edi
c001676b:	f7 d6                	not    esi
c001676d:	21 35 64 ea 02 c0    	and    DWORD PTR ds:0xc002ea64,esi
c0016773:	5e                   	pop    esi
c0016774:	5f                   	pop    edi
c0016775:	c3                   	ret    

c0016776 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016776:	57                   	push   edi
c0016777:	56                   	push   esi
c0016778:	53                   	push   ebx
c0016779:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001677d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016781:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016785:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016789:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001678f:	77 41                	ja     c00167d2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016791:	99                   	cdq    
c0016792:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016798:	01 c8                	add    eax,ecx
c001679a:	11 da                	adc    edx,ebx
c001679c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167a2:	19 d7                	sbb    edi,edx
c00167a4:	72 33                	jb     c00167d9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167a6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167ac:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167b2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167b6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167ba:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167c0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167ca:	5b                   	pop    ebx
c00167cb:	5e                   	pop    esi
c00167cc:	5f                   	pop    edi
c00167cd:	e9 b0 0a 00 00       	jmp    c0017282 <VCache::read(unsigned long long, int, void*)>
c00167d2:	b8 05 00 00 00       	mov    eax,0x5
c00167d7:	eb 05                	jmp    c00167de <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167d9:	b8 07 00 00 00       	mov    eax,0x7
c00167de:	5b                   	pop    ebx
c00167df:	5e                   	pop    esi
c00167e0:	5f                   	pop    edi
c00167e1:	c3                   	ret    

c00167e2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00167e2:	57                   	push   edi
c00167e3:	56                   	push   esi
c00167e4:	53                   	push   ebx
c00167e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167ed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167f5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167fb:	77 41                	ja     c001683e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167fd:	99                   	cdq    
c00167fe:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016804:	01 c8                	add    eax,ecx
c0016806:	11 da                	adc    edx,ebx
c0016808:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001680e:	19 d7                	sbb    edi,edx
c0016810:	72 33                	jb     c0016845 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016812:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016818:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001681e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016822:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016826:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001682c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016832:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016836:	5b                   	pop    ebx
c0016837:	5e                   	pop    esi
c0016838:	5f                   	pop    edi
c0016839:	e9 4e 09 00 00       	jmp    c001718c <VCache::write(unsigned long long, int, void*)>
c001683e:	b8 05 00 00 00       	mov    eax,0x5
c0016843:	eb 05                	jmp    c001684a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016845:	b8 07 00 00 00       	mov    eax,0x7
c001684a:	5b                   	pop    ebx
c001684b:	5e                   	pop    esi
c001684c:	5f                   	pop    edi
c001684d:	c3                   	ret    

c001684e <Mouse::Mouse(char const*)>:
c001684e:	83 ec 0c             	sub    esp,0xc
c0016851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016855:	83 ec 08             	sub    esp,0x8
c0016858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001685c:	50                   	push   eax
c001685d:	e8 0e dd ff ff       	call   c0014570 <Device::Device(char const*)>
c0016862:	83 c4 10             	add    esp,0x10
c0016865:	ba c0 b2 02 c0       	mov    edx,0xc002b2c0
c001686a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686e:	89 10                	mov    DWORD PTR [eax],edx
c0016870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016874:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001687e:	90                   	nop
c001687f:	83 c4 0c             	add    esp,0xc
c0016882:	c3                   	ret    
c0016883:	90                   	nop

c0016884 <Mouse::~Mouse()>:
c0016884:	83 ec 0c             	sub    esp,0xc
c0016887:	ba c0 b2 02 c0       	mov    edx,0xc002b2c0
c001688c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016890:	89 10                	mov    DWORD PTR [eax],edx
c0016892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016896:	83 ec 0c             	sub    esp,0xc
c0016899:	50                   	push   eax
c001689a:	e8 b3 d9 ff ff       	call   c0014252 <Device::~Device()>
c001689f:	83 c4 10             	add    esp,0x10
c00168a2:	90                   	nop
c00168a3:	83 c4 0c             	add    esp,0xc
c00168a6:	c3                   	ret    
c00168a7:	90                   	nop

c00168a8 <Mouse::~Mouse()>:
c00168a8:	83 ec 0c             	sub    esp,0xc
c00168ab:	83 ec 0c             	sub    esp,0xc
c00168ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168b2:	e8 cd ff ff ff       	call   c0016884 <Mouse::~Mouse()>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	83 ec 08             	sub    esp,0x8
c00168bd:	68 58 01 00 00       	push   0x158
c00168c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c6:	e8 af c5 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c00168cb:	83 c4 10             	add    esp,0x10
c00168ce:	83 c4 0c             	add    esp,0xc
c00168d1:	c3                   	ret    

c00168d2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168d2:	55                   	push   ebp
c00168d3:	57                   	push   edi
c00168d4:	56                   	push   esi
c00168d5:	53                   	push   ebx
c00168d6:	81 ec 28 01 00 00    	sub    esp,0x128
c00168dc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168e3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168ea:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168f1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168fc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016900:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016907:	e8 60 dd ff ff       	call   c001466c <Device::getName()>
c001690c:	5a                   	pop    edx
c001690d:	59                   	pop    ecx
c001690e:	50                   	push   eax
c001690f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016913:	55                   	push   ebp
c0016914:	e8 1b 9f fe ff       	call   c0000834 <strcpy>
c0016919:	5b                   	pop    ebx
c001691a:	58                   	pop    eax
c001691b:	68 e4 b2 02 c0       	push   0xc002b2e4
c0016920:	55                   	push   ebp
c0016921:	e8 4e a0 fe ff       	call   c0000974 <strcat>
c0016926:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001692d:	e8 11 8f ff ff       	call   c000f843 <malloc>
c0016932:	83 c4 0c             	add    esp,0xc
c0016935:	89 c3                	mov    ebx,eax
c0016937:	57                   	push   edi
c0016938:	56                   	push   esi
c0016939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001693d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016941:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016948:	55                   	push   ebp
c0016949:	50                   	push   eax
c001694a:	e8 cf fb ff ff       	call   c001651e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001694f:	83 c4 14             	add    esp,0x14
c0016952:	53                   	push   ebx
c0016953:	e8 7c fc ff ff       	call   c00165d4 <LogicalDisk::assignDriveLetter()>
c0016958:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001695b:	89 c6                	mov    esi,eax
c001695d:	e8 28 fd ff ff       	call   c001668a <LogicalDisk::mount()>
c0016962:	58                   	pop    eax
c0016963:	5a                   	pop    edx
c0016964:	53                   	push   ebx
c0016965:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001696c:	e8 0f da ff ff       	call   c0014380 <Device::addChild(Device*)>
c0016971:	59                   	pop    ecx
c0016972:	89 f0                	mov    eax,esi
c0016974:	5b                   	pop    ebx
c0016975:	0f be f0             	movsx  esi,al
c0016978:	56                   	push   esi
c0016979:	68 ef b2 02 c0       	push   0xc002b2ef
c001697e:	e8 d7 c5 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0016983:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016989:	5b                   	pop    ebx
c001698a:	5e                   	pop    esi
c001698b:	5f                   	pop    edi
c001698c:	5d                   	pop    ebp
c001698d:	c3                   	ret    

c001698e <createPartitionsForDisk(PhysicalDisk*)>:
c001698e:	55                   	push   ebp
c001698f:	57                   	push   edi
c0016990:	56                   	push   esi
c0016991:	53                   	push   ebx
c0016992:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016998:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001699f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169a5:	3d 00 02 00 00       	cmp    eax,0x200
c00169aa:	74 27                	je     c00169d3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169ac:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169b2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169b8:	83 ec 10             	sub    esp,0x10
c00169bb:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169bf:	99                   	cdq    
c00169c0:	c1 e6 0a             	shl    esi,0xa
c00169c3:	52                   	push   edx
c00169c4:	89 fd                	mov    ebp,edi
c00169c6:	50                   	push   eax
c00169c7:	55                   	push   ebp
c00169c8:	56                   	push   esi
c00169c9:	e8 0e 00 01 00       	call   c00269dc <__udivdi3>
c00169ce:	e9 b1 00 00 00       	jmp    c0016a84 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169d3:	83 ec 0c             	sub    esp,0xc
c00169d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169d8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169dc:	56                   	push   esi
c00169dd:	6a 01                	push   0x1
c00169df:	6a 00                	push   0x0
c00169e1:	6a 00                	push   0x0
c00169e3:	53                   	push   ebx
c00169e4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169e7:	83 c4 20             	add    esp,0x20
c00169ea:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169f2:	75 0a                	jne    c00169fe <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169f4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169fc:	74 2c                	je     c0016a2a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169fe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a04:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a10:	83 ec 10             	sub    esp,0x10
c0016a13:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a17:	89 f7                	mov    edi,esi
c0016a19:	c1 e0 0a             	shl    eax,0xa
c0016a1c:	c1 ff 1f             	sar    edi,0x1f
c0016a1f:	57                   	push   edi
c0016a20:	56                   	push   esi
c0016a21:	52                   	push   edx
c0016a22:	50                   	push   eax
c0016a23:	e8 b4 ff 00 00       	call   c00269dc <__udivdi3>
c0016a28:	eb 5a                	jmp    c0016a84 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a2a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a31:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a38:	83 e1 7f             	and    ecx,0x7f
c0016a3b:	83 e0 7f             	and    eax,0x7f
c0016a3e:	01 c1                	add    ecx,eax
c0016a40:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a47:	83 e0 7f             	and    eax,0x7f
c0016a4a:	01 c1                	add    ecx,eax
c0016a4c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a53:	83 e0 7f             	and    eax,0x7f
c0016a56:	00 c1                	add    cl,al
c0016a58:	74 41                	je     c0016a9b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a5a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a60:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a66:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a6c:	83 ec 10             	sub    esp,0x10
c0016a6f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a73:	89 f7                	mov    edi,esi
c0016a75:	c1 e0 0a             	shl    eax,0xa
c0016a78:	c1 ff 1f             	sar    edi,0x1f
c0016a7b:	57                   	push   edi
c0016a7c:	56                   	push   esi
c0016a7d:	52                   	push   edx
c0016a7e:	50                   	push   eax
c0016a7f:	e8 58 ff 00 00       	call   c00269dc <__udivdi3>
c0016a84:	83 c4 14             	add    esp,0x14
c0016a87:	52                   	push   edx
c0016a88:	50                   	push   eax
c0016a89:	6a 00                	push   0x0
c0016a8b:	6a 00                	push   0x0
c0016a8d:	53                   	push   ebx
c0016a8e:	e8 3f fe ff ff       	call   c00168d2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a93:	83 c4 20             	add    esp,0x20
c0016a96:	e9 79 01 00 00       	jmp    c0016c14 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a9b:	89 f0                	mov    eax,esi
c0016a9d:	31 f6                	xor    esi,esi
c0016a9f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016aa6:	75 02                	jne    c0016aaa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016aa8:	89 f1                	mov    ecx,esi
c0016aaa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016ab1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016ab8:	c1 e2 08             	shl    edx,0x8
c0016abb:	c1 e7 10             	shl    edi,0x10
c0016abe:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016ac6:	09 fa                	or     edx,edi
c0016ac8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016ad0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016ad7:	83 c0 10             	add    eax,0x10
c0016ada:	09 fa                	or     edx,edi
c0016adc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016ae3:	c1 e7 18             	shl    edi,0x18
c0016ae6:	09 fa                	or     edx,edi
c0016ae8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016aef:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016af3:	c1 e7 10             	shl    edi,0x10
c0016af6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016afd:	c1 e2 08             	shl    edx,0x8
c0016b00:	09 fa                	or     edx,edi
c0016b02:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b09:	09 fa                	or     edx,edi
c0016b0b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b12:	c1 e7 18             	shl    edi,0x18
c0016b15:	09 fa                	or     edx,edi
c0016b17:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b1b:	46                   	inc    esi
c0016b1c:	83 fe 04             	cmp    esi,0x4
c0016b1f:	0f 85 7a ff ff ff    	jne    c0016a9f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b29:	83 f0 01             	xor    eax,0x1
c0016b2c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b30:	75 57                	jne    c0016b89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b36:	83 f0 01             	xor    eax,0x1
c0016b39:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b3d:	75 4a                	jne    c0016b89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b3f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b43:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b4b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b53:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b59:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b5f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b65:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b69:	89 f7                	mov    edi,esi
c0016b6b:	c1 e0 0a             	shl    eax,0xa
c0016b6e:	c1 ff 1f             	sar    edi,0x1f
c0016b71:	57                   	push   edi
c0016b72:	56                   	push   esi
c0016b73:	52                   	push   edx
c0016b74:	50                   	push   eax
c0016b75:	e8 62 fe 00 00       	call   c00269dc <__udivdi3>
c0016b7a:	83 c4 10             	add    esp,0x10
c0016b7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b85:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b89:	84 c9                	test   cl,cl
c0016b8b:	74 53                	je     c0016be0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b8d:	0f b6 c9             	movzx  ecx,cl
c0016b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b98:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b9c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016ba0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ba4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016ba8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bac:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016bb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bb4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bc0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016bc4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bc8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bcc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bd4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bd8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bdc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016be0:	31 ed                	xor    ebp,ebp
c0016be2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016be6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016bea:	89 f8                	mov    eax,edi
c0016bec:	09 f0                	or     eax,esi
c0016bee:	74 1e                	je     c0016c0e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bf0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016bf4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bf8:	89 d1                	mov    ecx,edx
c0016bfa:	09 c1                	or     ecx,eax
c0016bfc:	74 10                	je     c0016c0e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bfe:	83 ec 0c             	sub    esp,0xc
c0016c01:	57                   	push   edi
c0016c02:	56                   	push   esi
c0016c03:	52                   	push   edx
c0016c04:	50                   	push   eax
c0016c05:	53                   	push   ebx
c0016c06:	e8 c7 fc ff ff       	call   c00168d2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c0b:	83 c4 20             	add    esp,0x20
c0016c0e:	45                   	inc    ebp
c0016c0f:	83 fd 04             	cmp    ebp,0x4
c0016c12:	75 ce                	jne    c0016be2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c14:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c1a:	5b                   	pop    ebx
c0016c1b:	5e                   	pop    esi
c0016c1c:	5f                   	pop    edi
c0016c1d:	5d                   	pop    ebp
c0016c1e:	c3                   	ret    
c0016c1f:	90                   	nop

c0016c20 <Serial::Serial(char const*)>:
c0016c20:	83 ec 0c             	sub    esp,0xc
c0016c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c27:	83 ec 08             	sub    esp,0x8
c0016c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c2e:	50                   	push   eax
c0016c2f:	e8 3c d9 ff ff       	call   c0014570 <Device::Device(char const*)>
c0016c34:	83 c4 10             	add    esp,0x10
c0016c37:	ba 1c b3 02 c0       	mov    edx,0xc002b31c
c0016c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c40:	89 10                	mov    DWORD PTR [eax],edx
c0016c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c46:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c50:	90                   	nop
c0016c51:	83 c4 0c             	add    esp,0xc
c0016c54:	c3                   	ret    
c0016c55:	90                   	nop

c0016c56 <Serial::~Serial()>:
c0016c56:	83 ec 0c             	sub    esp,0xc
c0016c59:	ba 1c b3 02 c0       	mov    edx,0xc002b31c
c0016c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c62:	89 10                	mov    DWORD PTR [eax],edx
c0016c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c68:	83 ec 0c             	sub    esp,0xc
c0016c6b:	50                   	push   eax
c0016c6c:	e8 e1 d5 ff ff       	call   c0014252 <Device::~Device()>
c0016c71:	83 c4 10             	add    esp,0x10
c0016c74:	90                   	nop
c0016c75:	83 c4 0c             	add    esp,0xc
c0016c78:	c3                   	ret    
c0016c79:	90                   	nop

c0016c7a <Serial::~Serial()>:
c0016c7a:	83 ec 0c             	sub    esp,0xc
c0016c7d:	83 ec 0c             	sub    esp,0xc
c0016c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c84:	e8 cd ff ff ff       	call   c0016c56 <Serial::~Serial()>
c0016c89:	83 c4 10             	add    esp,0x10
c0016c8c:	83 ec 08             	sub    esp,0x8
c0016c8f:	68 58 01 00 00       	push   0x158
c0016c94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c98:	e8 dd c1 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0016c9d:	83 c4 10             	add    esp,0x10
c0016ca0:	83 c4 0c             	add    esp,0xc
c0016ca3:	c3                   	ret    

c0016ca4 <Timer::Timer(char const*)>:
c0016ca4:	83 ec 0c             	sub    esp,0xc
c0016ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cab:	83 ec 08             	sub    esp,0x8
c0016cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb2:	50                   	push   eax
c0016cb3:	e8 b8 d8 ff ff       	call   c0014570 <Device::Device(char const*)>
c0016cb8:	83 c4 10             	add    esp,0x10
c0016cbb:	ba 60 b3 02 c0       	mov    edx,0xc002b360
c0016cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc4:	89 10                	mov    DWORD PTR [eax],edx
c0016cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cca:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cd4:	90                   	nop
c0016cd5:	83 c4 0c             	add    esp,0xc
c0016cd8:	c3                   	ret    
c0016cd9:	90                   	nop

c0016cda <Timer::~Timer()>:
c0016cda:	83 ec 0c             	sub    esp,0xc
c0016cdd:	ba 60 b3 02 c0       	mov    edx,0xc002b360
c0016ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce6:	89 10                	mov    DWORD PTR [eax],edx
c0016ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cec:	83 ec 0c             	sub    esp,0xc
c0016cef:	50                   	push   eax
c0016cf0:	e8 5d d5 ff ff       	call   c0014252 <Device::~Device()>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	90                   	nop
c0016cf9:	83 c4 0c             	add    esp,0xc
c0016cfc:	c3                   	ret    
c0016cfd:	90                   	nop

c0016cfe <Timer::~Timer()>:
c0016cfe:	83 ec 0c             	sub    esp,0xc
c0016d01:	83 ec 0c             	sub    esp,0xc
c0016d04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d08:	e8 cd ff ff ff       	call   c0016cda <Timer::~Timer()>
c0016d0d:	83 c4 10             	add    esp,0x10
c0016d10:	83 ec 08             	sub    esp,0x8
c0016d13:	68 5c 01 00 00       	push   0x15c
c0016d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d1c:	e8 59 c1 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0016d21:	83 c4 10             	add    esp,0x10
c0016d24:	83 c4 0c             	add    esp,0xc
c0016d27:	c3                   	ret    

c0016d28 <Timer::read()>:
c0016d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d2c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d32:	c3                   	ret    

c0016d33 <timerHandler(unsigned long long)>:
c0016d33:	55                   	push   ebp
c0016d34:	57                   	push   edi
c0016d35:	56                   	push   esi
c0016d36:	53                   	push   ebx
c0016d37:	83 ec 0c             	sub    esp,0xc
c0016d3a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d3e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d42:	01 35 f0 ea 02 c0    	add    DWORD PTR ds:0xc002eaf0,esi
c0016d48:	11 3d f4 ea 02 c0    	adc    DWORD PTR ds:0xc002eaf4,edi
c0016d4e:	80 3d 6d e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e46d,0x0
c0016d55:	0f 84 07 01 00 00    	je     c0016e62 <timerHandler(unsigned long long)+0x12f>
c0016d5b:	e8 c3 70 00 00       	call   c001de23 <lockStuff()>
c0016d60:	83 ec 0c             	sub    esp,0xc
c0016d63:	68 bc 19 03 c0       	push   0xc00319bc
c0016d68:	e8 e1 1c 01 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d6d:	c7 04 24 bc 19 03 c0 	mov    DWORD PTR [esp],0xc00319bc
c0016d74:	89 c3                	mov    ebx,eax
c0016d76:	e8 db 1c 01 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	84 c0                	test   al,al
c0016d80:	74 60                	je     c0016de2 <timerHandler(unsigned long long)+0xaf>
c0016d82:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d88:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d8b:	85 c0                	test   eax,eax
c0016d8d:	0f 85 91 00 00 00    	jne    c0016e24 <timerHandler(unsigned long long)+0xf1>
c0016d93:	e9 be 00 00 00       	jmp    c0016e56 <timerHandler(unsigned long long)+0x123>
c0016d98:	83 ec 0c             	sub    esp,0xc
c0016d9b:	55                   	push   ebp
c0016d9c:	e8 73 76 00 00       	call   c001e414 <unblockTask(ThreadControlBlock*)>
c0016da1:	83 c4 10             	add    esp,0x10
c0016da4:	39 eb                	cmp    ebx,ebp
c0016da6:	75 12                	jne    c0016dba <timerHandler(unsigned long long)+0x87>
c0016da8:	83 ec 0c             	sub    esp,0xc
c0016dab:	68 bc 19 03 c0       	push   0xc00319bc
c0016db0:	e8 99 1c 01 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016db5:	89 c3                	mov    ebx,eax
c0016db7:	83 c4 10             	add    esp,0x10
c0016dba:	83 ec 0c             	sub    esp,0xc
c0016dbd:	68 bc 19 03 c0       	push   0xc00319bc
c0016dc2:	e8 8f 1c 01 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dc7:	83 c4 10             	add    esp,0x10
c0016dca:	84 c0                	test   al,al
c0016dcc:	75 b4                	jne    c0016d82 <timerHandler(unsigned long long)+0x4f>
c0016dce:	83 ec 0c             	sub    esp,0xc
c0016dd1:	68 bc 19 03 c0       	push   0xc00319bc
c0016dd6:	e8 73 1c 01 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ddb:	83 c4 10             	add    esp,0x10
c0016dde:	39 d8                	cmp    eax,ebx
c0016de0:	74 a0                	je     c0016d82 <timerHandler(unsigned long long)+0x4f>
c0016de2:	83 ec 0c             	sub    esp,0xc
c0016de5:	68 bc 19 03 c0       	push   0xc00319bc
c0016dea:	e8 5f 1c 01 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016def:	c7 04 24 bc 19 03 c0 	mov    DWORD PTR [esp],0xc00319bc
c0016df6:	89 c5                	mov    ebp,eax
c0016df8:	e8 75 1c 01 00       	call   c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016dfd:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e00:	83 c4 10             	add    esp,0x10
c0016e03:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e06:	39 15 f0 ea 02 c0    	cmp    DWORD PTR ds:0xc002eaf0,edx
c0016e0c:	a1 f4 ea 02 c0       	mov    eax,ds:0xc002eaf4
c0016e11:	19 c8                	sbb    eax,ecx
c0016e13:	73 83                	jae    c0016d98 <timerHandler(unsigned long long)+0x65>
c0016e15:	50                   	push   eax
c0016e16:	50                   	push   eax
c0016e17:	55                   	push   ebp
c0016e18:	68 bc 19 03 c0       	push   0xc00319bc
c0016e1d:	e8 fe 1c 01 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e22:	eb 93                	jmp    c0016db7 <timerHandler(unsigned long long)+0x84>
c0016e24:	80 3d 6c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e46c,0x0
c0016e2b:	74 29                	je     c0016e56 <timerHandler(unsigned long long)+0x123>
c0016e2d:	39 c6                	cmp    esi,eax
c0016e2f:	bb 00 00 00 00       	mov    ebx,0x0
c0016e34:	19 df                	sbb    edi,ebx
c0016e36:	72 19                	jb     c0016e51 <timerHandler(unsigned long long)+0x11e>
c0016e38:	e8 bf 6f 00 00       	call   c001ddfc <lockScheduler()>
c0016e3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e42:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e45:	e8 ee 72 00 00       	call   c001e138 <schedule()>
c0016e4a:	e8 af 6f 00 00       	call   c001ddfe <unlockScheduler()>
c0016e4f:	eb 05                	jmp    c0016e56 <timerHandler(unsigned long long)+0x123>
c0016e51:	29 f0                	sub    eax,esi
c0016e53:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e56:	83 c4 0c             	add    esp,0xc
c0016e59:	5b                   	pop    ebx
c0016e5a:	5e                   	pop    esi
c0016e5b:	5f                   	pop    edi
c0016e5c:	5d                   	pop    ebp
c0016e5d:	e9 5b 73 00 00       	jmp    c001e1bd <unlockStuff()>
c0016e62:	83 c4 0c             	add    esp,0xc
c0016e65:	5b                   	pop    ebx
c0016e66:	5e                   	pop    esi
c0016e67:	5f                   	pop    edi
c0016e68:	5d                   	pop    ebp
c0016e69:	c3                   	ret    

c0016e6a <setupTimer(int)>:
c0016e6a:	57                   	push   edi
c0016e6b:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0016e70:	56                   	push   esi
c0016e71:	53                   	push   ebx
c0016e72:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e7c:	83 ec 0c             	sub    esp,0xc
c0016e7f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e85:	e8 e2 d7 ff ff       	call   c001466c <Device::getName()>
c0016e8a:	83 c4 10             	add    esp,0x10
c0016e8d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e90:	0f 85 8d 00 00 00    	jne    c0016f23 <setupTimer(int)+0xb9>
c0016e96:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0016e9b:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ea2:	74 7f                	je     c0016f23 <setupTimer(int)+0xb9>
c0016ea4:	83 ec 0c             	sub    esp,0xc
c0016ea7:	68 5c 01 00 00       	push   0x15c
c0016eac:	e8 92 89 ff ff       	call   c000f843 <malloc>
c0016eb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016eb4:	89 c3                	mov    ebx,eax
c0016eb6:	e8 fb f6 00 00       	call   c00265b6 <PIT::PIT()>
c0016ebb:	59                   	pop    ecx
c0016ebc:	5f                   	pop    edi
c0016ebd:	53                   	push   ebx
c0016ebe:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0016ec4:	e8 b7 d4 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0016ec9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ecb:	6a 00                	push   0x0
c0016ecd:	6a 00                	push   0x0
c0016ecf:	56                   	push   esi
c0016ed0:	53                   	push   ebx
c0016ed1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ed4:	83 c4 14             	add    esp,0x14
c0016ed7:	68 60 01 00 00       	push   0x160
c0016edc:	e8 62 89 ff ff       	call   c000f843 <malloc>
c0016ee1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ee4:	89 c7                	mov    edi,eax
c0016ee6:	e8 7b f5 00 00       	call   c0026466 <APICTimer::APICTimer()>
c0016eeb:	6a 00                	push   0x0
c0016eed:	6a 00                	push   0x0
c0016eef:	56                   	push   esi
c0016ef0:	57                   	push   edi
c0016ef1:	e8 72 f4 00 00       	call   c0026368 <APICTimer::open(int, int, void*)>
c0016ef6:	83 c4 20             	add    esp,0x20
c0016ef9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016efb:	6a 00                	push   0x0
c0016efd:	6a 00                	push   0x0
c0016eff:	6a 00                	push   0x0
c0016f01:	53                   	push   ebx
c0016f02:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f05:	58                   	pop    eax
c0016f06:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0016f0b:	5a                   	pop    edx
c0016f0c:	57                   	push   edi
c0016f0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f13:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f19:	e8 62 d4 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	eb 33                	jmp    c0016f56 <setupTimer(int)+0xec>
c0016f23:	83 ec 0c             	sub    esp,0xc
c0016f26:	68 5c 01 00 00       	push   0x15c
c0016f2b:	e8 13 89 ff ff       	call   c000f843 <malloc>
c0016f30:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f33:	89 c3                	mov    ebx,eax
c0016f35:	e8 7c f6 00 00       	call   c00265b6 <PIT::PIT()>
c0016f3a:	58                   	pop    eax
c0016f3b:	5a                   	pop    edx
c0016f3c:	53                   	push   ebx
c0016f3d:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0016f43:	e8 38 d4 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0016f48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f4a:	6a 00                	push   0x0
c0016f4c:	6a 00                	push   0x0
c0016f4e:	56                   	push   esi
c0016f4f:	53                   	push   ebx
c0016f50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f53:	83 c4 20             	add    esp,0x20
c0016f56:	89 d8                	mov    eax,ebx
c0016f58:	5b                   	pop    ebx
c0016f59:	5e                   	pop    esi
c0016f5a:	5f                   	pop    edi
c0016f5b:	c3                   	ret    

c0016f5c <VCache::VCache(PhysicalDisk*)>:
c0016f5c:	53                   	push   ebx
c0016f5d:	83 ec 18             	sub    esp,0x18
c0016f60:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0016f65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f69:	89 10                	mov    DWORD PTR [eax],edx
c0016f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f85:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f8c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f97:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f9e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fc3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fde:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fed:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016ff5:	83 ec 0c             	sub    esp,0xc
c0016ff8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ffc:	e8 42 88 ff ff       	call   c000f843 <malloc>
c0017001:	83 c4 10             	add    esp,0x10
c0017004:	89 c3                	mov    ebx,eax
c0017006:	83 ec 0c             	sub    esp,0xc
c0017009:	53                   	push   ebx
c001700a:	e8 0d 6f 00 00       	call   c001df1c <Mutex::Mutex()>
c001700f:	83 c4 10             	add    esp,0x10
c0017012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017016:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017021:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017028:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001702f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017033:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017040:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017044:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001704a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017050:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017054:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017057:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001705a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017062:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017066:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001706c:	05 00 01 00 00       	add    eax,0x100
c0017071:	c1 e0 04             	shl    eax,0x4
c0017074:	83 ec 0c             	sub    esp,0xc
c0017077:	50                   	push   eax
c0017078:	e8 c6 87 ff ff       	call   c000f843 <malloc>
c001707d:	83 c4 10             	add    esp,0x10
c0017080:	89 c2                	mov    edx,eax
c0017082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017086:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017089:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017098:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001709c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170a0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170a6:	c1 e0 07             	shl    eax,0x7
c00170a9:	83 ec 0c             	sub    esp,0xc
c00170ac:	50                   	push   eax
c00170ad:	e8 91 87 ff ff       	call   c000f843 <malloc>
c00170b2:	83 c4 10             	add    esp,0x10
c00170b5:	89 c2                	mov    edx,eax
c00170b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170be:	90                   	nop
c00170bf:	83 c4 18             	add    esp,0x18
c00170c2:	5b                   	pop    ebx
c00170c3:	c3                   	ret    

c00170c4 <VCache::invalidateReadBuffer()>:
c00170c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170c8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170ce:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170d2:	c3                   	ret    
c00170d3:	90                   	nop

c00170d4 <VCache::writeWriteBuffer()>:
c00170d4:	53                   	push   ebx
c00170d5:	83 ec 14             	sub    esp,0x14
c00170d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170df:	8b 10                	mov    edx,DWORD PTR [eax]
c00170e1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170e7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170ed:	50                   	push   eax
c00170ee:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170f1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170f8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170ff:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017103:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001710a:	83 c4 28             	add    esp,0x28
c001710d:	5b                   	pop    ebx
c001710e:	c3                   	ret    
c001710f:	90                   	nop

c0017110 <VCache::~VCache()>:
c0017110:	83 ec 0c             	sub    esp,0xc
c0017113:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0017118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001711c:	89 10                	mov    DWORD PTR [eax],edx
c001711e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017122:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017125:	84 c0                	test   al,al
c0017127:	74 0f                	je     c0017138 <VCache::~VCache()+0x28>
c0017129:	83 ec 0c             	sub    esp,0xc
c001712c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017130:	e8 9f ff ff ff       	call   c00170d4 <VCache::writeWriteBuffer()>
c0017135:	83 c4 10             	add    esp,0x10
c0017138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001713c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001713f:	83 ec 0c             	sub    esp,0xc
c0017142:	50                   	push   eax
c0017143:	e8 0b 87 ff ff       	call   c000f853 <free>
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001714f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017152:	83 ec 0c             	sub    esp,0xc
c0017155:	50                   	push   eax
c0017156:	e8 f8 86 ff ff       	call   c000f853 <free>
c001715b:	83 c4 10             	add    esp,0x10
c001715e:	90                   	nop
c001715f:	83 c4 0c             	add    esp,0xc
c0017162:	c3                   	ret    
c0017163:	90                   	nop

c0017164 <VCache::~VCache()>:
c0017164:	83 ec 0c             	sub    esp,0xc
c0017167:	83 ec 0c             	sub    esp,0xc
c001716a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001716e:	e8 9d ff ff ff       	call   c0017110 <VCache::~VCache()>
c0017173:	83 c4 10             	add    esp,0x10
c0017176:	83 ec 08             	sub    esp,0x8
c0017179:	6a 44                	push   0x44
c001717b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001717f:	e8 f6 bc ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0017184:	83 c4 10             	add    esp,0x10
c0017187:	83 c4 0c             	add    esp,0xc
c001718a:	c3                   	ret    
c001718b:	90                   	nop

c001718c <VCache::write(unsigned long long, int, void*)>:
c001718c:	55                   	push   ebp
c001718d:	57                   	push   edi
c001718e:	56                   	push   esi
c001718f:	53                   	push   ebx
c0017190:	83 ec 28             	sub    esp,0x28
c0017193:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017197:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001719b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001719f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00171a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171a6:	e8 d3 71 00 00       	call   c001e37e <Semaphore::acquire()>
c00171ab:	83 c4 10             	add    esp,0x10
c00171ae:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171b2:	74 0c                	je     c00171c0 <VCache::write(unsigned long long, int, void*)+0x34>
c00171b4:	83 ec 0c             	sub    esp,0xc
c00171b7:	53                   	push   ebx
c00171b8:	e8 07 ff ff ff       	call   c00170c4 <VCache::invalidateReadBuffer()>
c00171bd:	83 c4 10             	add    esp,0x10
c00171c0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171c4:	74 66                	je     c001722c <VCache::write(unsigned long long, int, void*)+0xa0>
c00171c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171c9:	99                   	cdq    
c00171ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171ce:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171d1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171d4:	89 c1                	mov    ecx,eax
c00171d6:	89 d0                	mov    eax,edx
c00171d8:	31 f1                	xor    ecx,esi
c00171da:	31 f8                	xor    eax,edi
c00171dc:	89 ca                	mov    edx,ecx
c00171de:	09 c2                	or     edx,eax
c00171e0:	75 3e                	jne    c0017220 <VCache::write(unsigned long long, int, void*)+0x94>
c00171e2:	83 fd 01             	cmp    ebp,0x1
c00171e5:	75 39                	jne    c0017220 <VCache::write(unsigned long long, int, void*)+0x94>
c00171e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171f0:	51                   	push   ecx
c00171f1:	50                   	push   eax
c00171f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171f6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171fa:	0f af c8             	imul   ecx,eax
c00171fd:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017200:	51                   	push   ecx
c0017201:	e8 3e 95 fe ff       	call   c0000744 <memcpy>
c0017206:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017209:	83 c4 10             	add    esp,0x10
c001720c:	40                   	inc    eax
c001720d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017210:	83 c0 80             	add    eax,0xffffff80
c0017213:	75 57                	jne    c001726c <VCache::write(unsigned long long, int, void*)+0xe0>
c0017215:	83 ec 0c             	sub    esp,0xc
c0017218:	53                   	push   ebx
c0017219:	e8 b6 fe ff ff       	call   c00170d4 <VCache::writeWriteBuffer()>
c001721e:	eb 34                	jmp    c0017254 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017220:	83 ec 0c             	sub    esp,0xc
c0017223:	53                   	push   ebx
c0017224:	e8 ab fe ff ff       	call   c00170d4 <VCache::writeWriteBuffer()>
c0017229:	83 c4 10             	add    esp,0x10
c001722c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001722f:	83 fd 7f             	cmp    ebp,0x7f
c0017232:	7f 25                	jg     c0017259 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017234:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017237:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001723a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001723d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017241:	52                   	push   edx
c0017242:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017248:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001724c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001724f:	e8 f0 94 fe ff       	call   c0000744 <memcpy>
c0017254:	83 c4 10             	add    esp,0x10
c0017257:	eb 13                	jmp    c001726c <VCache::write(unsigned long long, int, void*)+0xe0>
c0017259:	83 ec 0c             	sub    esp,0xc
c001725c:	8b 10                	mov    edx,DWORD PTR [eax]
c001725e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017262:	55                   	push   ebp
c0017263:	57                   	push   edi
c0017264:	56                   	push   esi
c0017265:	50                   	push   eax
c0017266:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017269:	83 c4 20             	add    esp,0x20
c001726c:	83 ec 0c             	sub    esp,0xc
c001726f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017272:	e8 b5 76 00 00       	call   c001e92c <Semaphore::release()>
c0017277:	83 c4 2c             	add    esp,0x2c
c001727a:	31 c0                	xor    eax,eax
c001727c:	5b                   	pop    ebx
c001727d:	5e                   	pop    esi
c001727e:	5f                   	pop    edi
c001727f:	5d                   	pop    ebp
c0017280:	c3                   	ret    
c0017281:	90                   	nop

c0017282 <VCache::read(unsigned long long, int, void*)>:
c0017282:	55                   	push   ebp
c0017283:	57                   	push   edi
c0017284:	56                   	push   esi
c0017285:	53                   	push   ebx
c0017286:	83 ec 28             	sub    esp,0x28
c0017289:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001728d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017291:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017295:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017299:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001729d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00172a1:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00172a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172a8:	e8 d1 70 00 00       	call   c001e37e <Semaphore::acquire()>
c00172ad:	83 c4 10             	add    esp,0x10
c00172b0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172b4:	74 0c                	je     c00172c2 <VCache::read(unsigned long long, int, void*)+0x40>
c00172b6:	83 ec 0c             	sub    esp,0xc
c00172b9:	53                   	push   ebx
c00172ba:	e8 15 fe ff ff       	call   c00170d4 <VCache::writeWriteBuffer()>
c00172bf:	83 c4 10             	add    esp,0x10
c00172c2:	83 fe 01             	cmp    esi,0x1
c00172c5:	0f 85 80 00 00 00    	jne    c001734b <VCache::read(unsigned long long, int, void*)+0xc9>
c00172cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172ce:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172d5:	75 74                	jne    c001734b <VCache::read(unsigned long long, int, void*)+0xc9>
c00172d7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172da:	89 d1                	mov    ecx,edx
c00172dc:	f7 d9                	neg    ecx
c00172de:	89 cf                	mov    edi,ecx
c00172e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172e4:	c1 ff 1f             	sar    edi,0x1f
c00172e7:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172ea:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172ee:	89 ce                	mov    esi,ecx
c00172f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172f4:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172f8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172fc:	89 cf                	mov    edi,ecx
c00172fe:	74 0a                	je     c001730a <VCache::read(unsigned long long, int, void*)+0x88>
c0017300:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017303:	75 05                	jne    c001730a <VCache::read(unsigned long long, int, void*)+0x88>
c0017305:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017308:	74 1c                	je     c0017326 <VCache::read(unsigned long long, int, void*)+0xa4>
c001730a:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001730e:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017311:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017314:	83 ec 0c             	sub    esp,0xc
c0017317:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017319:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001731c:	52                   	push   edx
c001731d:	57                   	push   edi
c001731e:	56                   	push   esi
c001731f:	50                   	push   eax
c0017320:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017323:	83 c4 20             	add    esp,0x20
c0017326:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017329:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001732f:	50                   	push   eax
c0017330:	52                   	push   edx
c0017331:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017334:	48                   	dec    eax
c0017335:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017339:	0f af c2             	imul   eax,edx
c001733c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001733f:	50                   	push   eax
c0017340:	55                   	push   ebp
c0017341:	e8 fe 93 fe ff       	call   c0000744 <memcpy>
c0017346:	83 c4 10             	add    esp,0x10
c0017349:	eb 21                	jmp    c001736c <VCache::read(unsigned long long, int, void*)+0xea>
c001734b:	83 ec 0c             	sub    esp,0xc
c001734e:	53                   	push   ebx
c001734f:	e8 70 fd ff ff       	call   c00170c4 <VCache::invalidateReadBuffer()>
c0017354:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017357:	8b 10                	mov    edx,DWORD PTR [eax]
c0017359:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001735c:	56                   	push   esi
c001735d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017361:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017365:	50                   	push   eax
c0017366:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017369:	83 c4 20             	add    esp,0x20
c001736c:	83 ec 0c             	sub    esp,0xc
c001736f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017372:	e8 b5 75 00 00       	call   c001e92c <Semaphore::release()>
c0017377:	83 c4 2c             	add    esp,0x2c
c001737a:	31 c0                	xor    eax,eax
c001737c:	5b                   	pop    ebx
c001737d:	5e                   	pop    esi
c001737e:	5f                   	pop    edi
c001737f:	5d                   	pop    ebp
c0017380:	c3                   	ret    
c0017381:	90                   	nop

c0017382 <Video::putrect(int, int, int, int, unsigned int)>:
c0017382:	55                   	push   ebp
c0017383:	57                   	push   edi
c0017384:	56                   	push   esi
c0017385:	53                   	push   ebx
c0017386:	83 ec 1c             	sub    esp,0x1c
c0017389:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001738d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017391:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017395:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017399:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001739d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173a1:	01 df                	add    edi,ebx
c00173a3:	39 fb                	cmp    ebx,edi
c00173a5:	7d 1f                	jge    c00173c6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00173a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173ab:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173af:	7d 12                	jge    c00173c3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173b1:	8b 16                	mov    edx,DWORD PTR [esi]
c00173b3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173b7:	53                   	push   ebx
c00173b8:	55                   	push   ebp
c00173b9:	45                   	inc    ebp
c00173ba:	56                   	push   esi
c00173bb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173be:	83 c4 10             	add    esp,0x10
c00173c1:	eb e8                	jmp    c00173ab <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173c3:	43                   	inc    ebx
c00173c4:	eb dd                	jmp    c00173a3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173c6:	83 c4 1c             	add    esp,0x1c
c00173c9:	5b                   	pop    ebx
c00173ca:	5e                   	pop    esi
c00173cb:	5f                   	pop    edi
c00173cc:	5d                   	pop    ebp
c00173cd:	c3                   	ret    

c00173ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173ce:	55                   	push   ebp
c00173cf:	57                   	push   edi
c00173d0:	31 ff                	xor    edi,edi
c00173d2:	56                   	push   esi
c00173d3:	53                   	push   ebx
c00173d4:	83 ec 1c             	sub    esp,0x1c
c00173d7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173df:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173e6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173ef:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173f3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173f7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173fa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173fe:	01 f9                	add    ecx,edi
c0017400:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017404:	7d 2f                	jge    c0017435 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017406:	31 f6                	xor    esi,esi
c0017408:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001740c:	01 f2                	add    edx,esi
c001740e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017412:	7d 1a                	jge    c001742e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017414:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017417:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001741a:	46                   	inc    esi
c001741b:	51                   	push   ecx
c001741c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017420:	52                   	push   edx
c0017421:	55                   	push   ebp
c0017422:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017425:	83 c4 10             	add    esp,0x10
c0017428:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001742c:	eb da                	jmp    c0017408 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001742e:	47                   	inc    edi
c001742f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017433:	eb c5                	jmp    c00173fa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017435:	83 c4 1c             	add    esp,0x1c
c0017438:	5b                   	pop    ebx
c0017439:	5e                   	pop    esi
c001743a:	5f                   	pop    edi
c001743b:	5d                   	pop    ebp
c001743c:	c3                   	ret    
c001743d:	90                   	nop

c001743e <Video::blit(unsigned int*, int, int, int, int)>:
c001743e:	55                   	push   ebp
c001743f:	57                   	push   edi
c0017440:	56                   	push   esi
c0017441:	53                   	push   ebx
c0017442:	83 ec 1c             	sub    esp,0x1c
c0017445:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017449:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001744d:	85 c0                	test   eax,eax
c001744f:	79 02                	jns    c0017453 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017451:	31 c0                	xor    eax,eax
c0017453:	c1 e0 02             	shl    eax,0x2
c0017456:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001745a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001745e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017462:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017466:	39 d8                	cmp    eax,ebx
c0017468:	7e 49                	jle    c00174b3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001746a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017470:	7c 41                	jl     c00174b3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017472:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017476:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001747a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001747e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017482:	39 f9                	cmp    ecx,edi
c0017484:	7e 22                	jle    c00174a8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017486:	83 c5 04             	add    ebp,0x4
c0017489:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001748f:	7c 14                	jl     c00174a5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017491:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017493:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017496:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001749a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001749e:	56                   	push   esi
c001749f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00174a2:	83 c4 10             	add    esp,0x10
c00174a5:	47                   	inc    edi
c00174a6:	eb d2                	jmp    c001747a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00174a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174ac:	43                   	inc    ebx
c00174ad:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174b1:	eb ab                	jmp    c001745e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174b3:	83 c4 1c             	add    esp,0x1c
c00174b6:	5b                   	pop    ebx
c00174b7:	5e                   	pop    esi
c00174b8:	5f                   	pop    edi
c00174b9:	5d                   	pop    ebp
c00174ba:	c3                   	ret    
c00174bb:	90                   	nop

c00174bc <Video::clearScreen(unsigned int)>:
c00174bc:	57                   	push   edi
c00174bd:	56                   	push   esi
c00174be:	53                   	push   ebx
c00174bf:	31 db                	xor    ebx,ebx
c00174c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174c5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174cb:	7e 1f                	jle    c00174ec <Video::clearScreen(unsigned int)+0x30>
c00174cd:	31 ff                	xor    edi,edi
c00174cf:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174d5:	7e 12                	jle    c00174e9 <Video::clearScreen(unsigned int)+0x2d>
c00174d7:	8b 06                	mov    eax,DWORD PTR [esi]
c00174d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174dd:	53                   	push   ebx
c00174de:	57                   	push   edi
c00174df:	47                   	inc    edi
c00174e0:	56                   	push   esi
c00174e1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174e4:	83 c4 10             	add    esp,0x10
c00174e7:	eb e6                	jmp    c00174cf <Video::clearScreen(unsigned int)+0x13>
c00174e9:	43                   	inc    ebx
c00174ea:	eb d9                	jmp    c00174c5 <Video::clearScreen(unsigned int)+0x9>
c00174ec:	5b                   	pop    ebx
c00174ed:	5e                   	pop    esi
c00174ee:	5f                   	pop    edi
c00174ef:	c3                   	ret    

c00174f0 <Video::putpixel(int, int, unsigned int)>:
c00174f0:	c7 44 24 04 98 b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b398
c00174f8:	e9 0a 31 00 00       	jmp    c001a607 <Krnl::panic(char const*)>
c00174fd:	90                   	nop

c00174fe <Video::Video(char const*)>:
c00174fe:	83 ec 0c             	sub    esp,0xc
c0017501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017505:	83 ec 08             	sub    esp,0x8
c0017508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001750c:	50                   	push   eax
c001750d:	e8 5e d0 ff ff       	call   c0014570 <Device::Device(char const*)>
c0017512:	83 c4 10             	add    esp,0x10
c0017515:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c001751a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001751e:	89 10                	mov    DWORD PTR [eax],edx
c0017520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017524:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001752e:	90                   	nop
c001752f:	83 c4 0c             	add    esp,0xc
c0017532:	c3                   	ret    
c0017533:	90                   	nop

c0017534 <Video::~Video()>:
c0017534:	83 ec 0c             	sub    esp,0xc
c0017537:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c001753c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017540:	89 10                	mov    DWORD PTR [eax],edx
c0017542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017546:	83 ec 0c             	sub    esp,0xc
c0017549:	50                   	push   eax
c001754a:	e8 03 cd ff ff       	call   c0014252 <Device::~Device()>
c001754f:	83 c4 10             	add    esp,0x10
c0017552:	90                   	nop
c0017553:	83 c4 0c             	add    esp,0xc
c0017556:	c3                   	ret    
c0017557:	90                   	nop

c0017558 <Video::~Video()>:
c0017558:	83 ec 0c             	sub    esp,0xc
c001755b:	83 ec 0c             	sub    esp,0xc
c001755e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017562:	e8 cd ff ff ff       	call   c0017534 <Video::~Video()>
c0017567:	83 c4 10             	add    esp,0x10
c001756a:	83 ec 08             	sub    esp,0x8
c001756d:	68 64 01 00 00       	push   0x164
c0017572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017576:	e8 ff b8 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c001757b:	83 c4 10             	add    esp,0x10
c001757e:	83 c4 0c             	add    esp,0xc
c0017581:	c3                   	ret    

c0017582 <Video::isMonochrome()>:
c0017582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017586:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001758c:	c3                   	ret    
c001758d:	90                   	nop

c001758e <Video::getWidth()>:
c001758e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017592:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017598:	c3                   	ret    
c0017599:	90                   	nop

c001759a <Video::getHeight()>:
c001759a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001759e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00175a4:	c3                   	ret    
c00175a5:	90                   	nop

c00175a6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00175a6:	55                   	push   ebp
c00175a7:	57                   	push   edi
c00175a8:	56                   	push   esi
c00175a9:	53                   	push   ebx
c00175aa:	83 ec 2c             	sub    esp,0x2c
c00175ad:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175b1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175b5:	83 f8 01             	cmp    eax,0x1
c00175b8:	19 c9                	sbb    ecx,ecx
c00175ba:	31 db                	xor    ebx,ebx
c00175bc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175c0:	89 cd                	mov    ebp,ecx
c00175c2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175ca:	f7 d5                	not    ebp
c00175cc:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175d2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175d6:	01 d8                	add    eax,ebx
c00175d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175dc:	56                   	push   esi
c00175dd:	e8 b8 ff ff ff       	call   c001759a <Video::getHeight()>
c00175e2:	59                   	pop    ecx
c00175e3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175e7:	7e 70                	jle    c0017659 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175e9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175ed:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175f1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175fc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017603:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017607:	89 f8                	mov    eax,edi
c0017609:	83 c0 20             	add    eax,0x20
c001760c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017610:	56                   	push   esi
c0017611:	e8 78 ff ff ff       	call   c001758e <Video::getWidth()>
c0017616:	5a                   	pop    edx
c0017617:	39 c7                	cmp    edi,eax
c0017619:	7d 34                	jge    c001764f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001761b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017620:	74 05                	je     c0017627 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017622:	8b 06                	mov    eax,DWORD PTR [esi]
c0017624:	55                   	push   ebp
c0017625:	eb 0d                	jmp    c0017634 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017627:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001762c:	74 12                	je     c0017640 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001762e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017630:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017634:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017638:	57                   	push   edi
c0017639:	56                   	push   esi
c001763a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001763d:	83 c4 10             	add    esp,0x10
c0017640:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017644:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017648:	47                   	inc    edi
c0017649:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001764d:	75 c1                	jne    c0017610 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001764f:	43                   	inc    ebx
c0017650:	83 fb 20             	cmp    ebx,0x20
c0017653:	0f 85 79 ff ff ff    	jne    c00175d2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017659:	83 c4 2c             	add    esp,0x2c
c001765c:	5b                   	pop    ebx
c001765d:	5e                   	pop    esi
c001765e:	5f                   	pop    edi
c001765f:	5d                   	pop    ebp
c0017660:	c3                   	ret    
c0017661:	90                   	nop

c0017662 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017662:	55                   	push   ebp
c0017663:	57                   	push   edi
c0017664:	56                   	push   esi
c0017665:	53                   	push   ebx
c0017666:	83 ec 28             	sub    esp,0x28
c0017669:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001766d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017671:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017675:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017679:	c1 e7 08             	shl    edi,0x8
c001767c:	01 c7                	add    edi,eax
c001767e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017682:	c1 e0 08             	shl    eax,0x8
c0017685:	01 d0                	add    eax,edx
c0017687:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001768b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001768f:	0f af c7             	imul   eax,edi
c0017692:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017699:	50                   	push   eax
c001769a:	e8 a4 81 ff ff       	call   c000f843 <malloc>
c001769f:	83 c4 10             	add    esp,0x10
c00176a2:	89 c5                	mov    ebp,eax
c00176a4:	85 c0                	test   eax,eax
c00176a6:	75 15                	jne    c00176bd <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00176a8:	83 ec 0c             	sub    esp,0xc
c00176ab:	68 b9 b3 02 c0       	push   0xc002b3b9
c00176b0:	e8 a5 b8 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00176b5:	83 c4 10             	add    esp,0x10
c00176b8:	e9 1c 01 00 00       	jmp    c00177d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176bd:	be 12 00 00 00       	mov    esi,0x12
c00176c2:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176c6:	74 11                	je     c00176d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176c8:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176cc:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176d0:	c1 fe 03             	sar    esi,0x3
c00176d3:	0f af f0             	imul   esi,eax
c00176d6:	83 c6 12             	add    esi,0x12
c00176d9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176dd:	74 04                	je     c00176e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176df:	85 ff                	test   edi,edi
c00176e1:	75 12                	jne    c00176f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176e3:	83 ec 0c             	sub    esp,0xc
c00176e6:	68 d0 b3 02 c0       	push   0xc002b3d0
c00176eb:	e8 6a b8 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00176f0:	e9 ce 00 00 00       	jmp    c00177c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176f5:	52                   	push   edx
c00176f6:	52                   	push   edx
c00176f7:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176fb:	50                   	push   eax
c00176fc:	68 e5 b3 02 c0       	push   0xc002b3e5
c0017701:	e8 54 b8 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0017706:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001770a:	83 c4 10             	add    esp,0x10
c001770d:	80 fa 02             	cmp    dl,0x2
c0017710:	0f 85 98 00 00 00    	jne    c00177ae <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017716:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001771b:	75 10                	jne    c001772d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001771d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017721:	75 0a                	jne    c001772d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017723:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017726:	83 e8 18             	sub    eax,0x18
c0017729:	a8 f7                	test   al,0xf7
c001772b:	74 0a                	je     c0017737 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001772d:	83 ec 0c             	sub    esp,0xc
c0017730:	68 f2 b3 02 c0       	push   0xc002b3f2
c0017735:	eb 7f                	jmp    c00177b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017737:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001773f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017747:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001774b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017753:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017757:	75 0c                	jne    c0017765 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017759:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001775e:	c1 e0 18             	shl    eax,0x18
c0017761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017765:	41                   	inc    ecx
c0017766:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001776b:	c1 e2 10             	shl    edx,0x10
c001776e:	89 d0                	mov    eax,edx
c0017770:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017775:	c1 e2 08             	shl    edx,0x8
c0017778:	09 c2                	or     edx,eax
c001777a:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001777e:	09 c2                	or     edx,eax
c0017780:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017784:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017788:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001778c:	c1 f8 03             	sar    eax,0x3
c001778f:	01 c6                	add    esi,eax
c0017791:	89 c8                	mov    eax,ecx
c0017793:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017797:	39 c7                	cmp    edi,eax
c0017799:	7f b0                	jg     c001774b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001779b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001779f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177a3:	39 14 24             	cmp    DWORD PTR [esp],edx
c00177a6:	7e 22                	jle    c00177ca <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00177a8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177ac:	eb 99                	jmp    c0017747 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177ae:	50                   	push   eax
c00177af:	50                   	push   eax
c00177b0:	52                   	push   edx
c00177b1:	68 00 b4 02 c0       	push   0xc002b400
c00177b6:	e8 9f b7 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00177bb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177be:	e8 90 80 ff ff       	call   c000f853 <free>
c00177c3:	83 c4 10             	add    esp,0x10
c00177c6:	31 ed                	xor    ebp,ebp
c00177c8:	eb 0f                	jmp    c00177d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177ce:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177d1:	89 38                	mov    DWORD PTR [eax],edi
c00177d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177d7:	89 08                	mov    DWORD PTR [eax],ecx
c00177d9:	83 c4 1c             	add    esp,0x1c
c00177dc:	89 e8                	mov    eax,ebp
c00177de:	5b                   	pop    ebx
c00177df:	5e                   	pop    esi
c00177e0:	5f                   	pop    edi
c00177e1:	5d                   	pop    ebp
c00177e2:	c3                   	ret    
c00177e3:	90                   	nop

c00177e4 <Video::putTGA(int, int, unsigned char*, int)>:
c00177e4:	55                   	push   ebp
c00177e5:	57                   	push   edi
c00177e6:	56                   	push   esi
c00177e7:	53                   	push   ebx
c00177e8:	83 ec 28             	sub    esp,0x28
c00177eb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177f3:	50                   	push   eax
c00177f4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177f8:	50                   	push   eax
c00177f9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177fd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017801:	56                   	push   esi
c0017802:	e8 5b fe ff ff       	call   c0017662 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017807:	83 c4 20             	add    esp,0x20
c001780a:	85 c0                	test   eax,eax
c001780c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017810:	74 35                	je     c0017847 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017812:	89 c7                	mov    edi,eax
c0017814:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017818:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001781c:	39 d8                	cmp    eax,ebx
c001781e:	7e 27                	jle    c0017847 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017820:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017824:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017828:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001782c:	39 e8                	cmp    eax,ebp
c001782e:	7e 14                	jle    c0017844 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017830:	8b 06                	mov    eax,DWORD PTR [esi]
c0017832:	83 c7 04             	add    edi,0x4
c0017835:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017838:	53                   	push   ebx
c0017839:	55                   	push   ebp
c001783a:	45                   	inc    ebp
c001783b:	56                   	push   esi
c001783c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001783f:	83 c4 10             	add    esp,0x10
c0017842:	eb e0                	jmp    c0017824 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017844:	43                   	inc    ebx
c0017845:	eb cd                	jmp    c0017814 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017847:	83 c4 1c             	add    esp,0x1c
c001784a:	5b                   	pop    ebx
c001784b:	5e                   	pop    esi
c001784c:	5f                   	pop    edi
c001784d:	5d                   	pop    ebp
c001784e:	c3                   	ret    
c001784f:	90                   	nop

c0017850 <ACPI::close(int, int, void*)>:
c0017850:	83 ec 1c             	sub    esp,0x1c
c0017853:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001785b:	74 0a                	je     c0017867 <ACPI::close(int, int, void*)+0x17>
c001785d:	b8 00 00 00 00       	mov    eax,0x0
c0017862:	e9 9a 00 00 00       	jmp    c0017901 <ACPI::close(int, int, void*)+0xb1>
c0017867:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001786c:	75 37                	jne    c00178a5 <ACPI::close(int, int, void*)+0x55>
c001786e:	83 ec 0c             	sub    esp,0xc
c0017871:	68 5c b4 02 c0       	push   0xc002b45c
c0017876:	e8 df b6 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001787b:	83 c4 10             	add    esp,0x10
c001787e:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c0017883:	85 c0                	test   eax,eax
c0017885:	74 07                	je     c001788e <ACPI::close(int, int, void*)+0x3e>
c0017887:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c001788c:	ff d0                	call   eax
c001788e:	83 ec 0c             	sub    esp,0xc
c0017891:	68 80 b5 02 c0       	push   0xc002b580
c0017896:	e8 6c 2d 00 00       	call   c001a607 <Krnl::panic(char const*)>
c001789b:	83 c4 10             	add    esp,0x10
c001789e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178a3:	eb 5c                	jmp    c0017901 <ACPI::close(int, int, void*)+0xb1>
c00178a5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00178aa:	75 50                	jne    c00178fc <ACPI::close(int, int, void*)+0xac>
c00178ac:	a1 24 0b 03 c0       	mov    eax,ds:0xc0030b24
c00178b1:	85 c0                	test   eax,eax
c00178b3:	74 07                	je     c00178bc <ACPI::close(int, int, void*)+0x6c>
c00178b5:	a1 24 0b 03 c0       	mov    eax,ds:0xc0030b24
c00178ba:	ff d0                	call   eax
c00178bc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178c1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178c6:	83 e0 02             	and    eax,0x2
c00178c9:	74 1c                	je     c00178e7 <ACPI::close(int, int, void*)+0x97>
c00178cb:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178d6:	89 c2                	mov    edx,eax
c00178d8:	ec                   	in     al,dx
c00178d9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178dd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178e5:	eb da                	jmp    c00178c1 <ACPI::close(int, int, void*)+0x71>
c00178e7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178ee:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178f3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178fb:	ee                   	out    dx,al
c00178fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017901:	83 c4 1c             	add    esp,0x1c
c0017904:	c3                   	ret    

c0017905 <findRSDP()>:
c0017905:	83 ec 1c             	sub    esp,0x1c
c0017908:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001790d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017913:	83 e0 04             	and    eax,0x4
c0017916:	84 c0                	test   al,al
c0017918:	75 07                	jne    c0017921 <findRSDP()+0x1c>
c001791a:	b8 00 00 00 00       	mov    eax,0x0
c001791f:	eb 6a                	jmp    c001798b <findRSDP()+0x86>
c0017921:	a1 b4 e4 02 c0       	mov    eax,ds:0xc002e4b4
c0017926:	3d ff 07 00 00       	cmp    eax,0x7ff
c001792b:	7f 1b                	jg     c0017948 <findRSDP()+0x43>
c001792d:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017932:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017938:	83 e2 fb             	and    edx,0xfffffffb
c001793b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017941:	b8 00 00 00 00       	mov    eax,0x0
c0017946:	eb 43                	jmp    c001798b <findRSDP()+0x86>
c0017948:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017950:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017958:	77 2c                	ja     c0017986 <findRSDP()+0x81>
c001795a:	83 ec 04             	sub    esp,0x4
c001795d:	6a 08                	push   0x8
c001795f:	68 69 b4 02 c0       	push   0xc002b469
c0017964:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017968:	e8 d3 8c fe ff       	call   c0000640 <memcmp>
c001796d:	83 c4 10             	add    esp,0x10
c0017970:	85 c0                	test   eax,eax
c0017972:	0f 94 c0             	sete   al
c0017975:	84 c0                	test   al,al
c0017977:	74 06                	je     c001797f <findRSDP()+0x7a>
c0017979:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001797d:	eb 0c                	jmp    c001798b <findRSDP()+0x86>
c001797f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017984:	eb ca                	jmp    c0017950 <findRSDP()+0x4b>
c0017986:	b8 00 00 00 00       	mov    eax,0x0
c001798b:	83 c4 1c             	add    esp,0x1c
c001798e:	c3                   	ret    

c001798f <loadACPITables(unsigned char*)>:
c001798f:	56                   	push   esi
c0017990:	53                   	push   ebx
c0017991:	83 ec 44             	sub    esp,0x44
c0017994:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017999:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001799f:	83 e0 04             	and    eax,0x4
c00179a2:	84 c0                	test   al,al
c00179a4:	0f 84 05 02 00 00    	je     c0017baf <loadACPITables(unsigned char*)+0x220>
c00179aa:	a0 40 0d 03 c0       	mov    al,ds:0xc0030d40
c00179af:	84 c0                	test   al,al
c00179b1:	74 75                	je     c0017a28 <loadACPITables(unsigned char*)+0x99>
c00179b3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179c2:	83 e8 24             	sub    eax,0x24
c00179c5:	c1 e8 03             	shr    eax,0x3
c00179c8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179cc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179d8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179dc:	0f 8d b2 00 00 00    	jge    c0017a94 <loadACPITables(unsigned char*)+0x105>
c00179e2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179e6:	83 c0 24             	add    eax,0x24
c00179e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179f1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179f9:	c1 e0 03             	shl    eax,0x3
c00179fc:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a04:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a07:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a09:	89 c1                	mov    ecx,eax
c0017a0b:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017a10:	8d 50 01             	lea    edx,[eax+0x1]
c0017a13:	89 15 2c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b2c,edx
c0017a19:	89 ca                	mov    edx,ecx
c0017a1b:	89 14 c5 44 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4bc],edx
c0017a22:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a26:	eb ac                	jmp    c00179d4 <loadACPITables(unsigned char*)+0x45>
c0017a28:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a37:	83 e8 24             	sub    eax,0x24
c0017a3a:	c1 e8 02             	shr    eax,0x2
c0017a3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a41:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a4d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a51:	7d 41                	jge    c0017a94 <loadACPITables(unsigned char*)+0x105>
c0017a53:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a57:	83 c0 24             	add    eax,0x24
c0017a5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a6a:	c1 e0 02             	shl    eax,0x2
c0017a6d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a75:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a77:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017a7c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a7f:	89 15 2c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b2c,edx
c0017a85:	89 ca                	mov    edx,ecx
c0017a87:	89 14 c5 44 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4bc],edx
c0017a8e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a92:	eb b5                	jmp    c0017a49 <loadACPITables(unsigned char*)+0xba>
c0017a94:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a9c:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017aa1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017aa5:	0f 8d 05 01 00 00    	jge    c0017bb0 <loadACPITables(unsigned char*)+0x221>
c0017aab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aaf:	8b 04 c5 44 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf4bc]
c0017ab6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017abe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac6:	25 ff 0f 00 00       	and    eax,0xfff
c0017acb:	89 c6                	mov    esi,eax
c0017acd:	e8 0c a3 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017ad2:	89 c3                	mov    ebx,eax
c0017ad4:	83 ec 0c             	sub    esp,0xc
c0017ad7:	6a 01                	push   0x1
c0017ad9:	e8 65 a0 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017ade:	83 c4 10             	add    esp,0x10
c0017ae1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ae5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017aeb:	83 ec 0c             	sub    esp,0xc
c0017aee:	6a 01                	push   0x1
c0017af0:	6a 01                	push   0x1
c0017af2:	50                   	push   eax
c0017af3:	52                   	push   edx
c0017af4:	53                   	push   ebx
c0017af5:	e8 2a ab ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017afa:	83 c4 20             	add    esp,0x20
c0017afd:	09 f0                	or     eax,esi
c0017aff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b07:	c1 e0 03             	shl    eax,0x3
c0017b0a:	05 40 0b 03 c0       	add    eax,0xc0030b40
c0017b0f:	83 ec 04             	sub    esp,0x4
c0017b12:	6a 04                	push   0x4
c0017b14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b18:	50                   	push   eax
c0017b19:	e8 26 8c fe ff       	call   c0000744 <memcpy>
c0017b1e:	83 c4 10             	add    esp,0x10
c0017b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b30:	05 00 10 00 00       	add    eax,0x1000
c0017b35:	c1 e8 0c             	shr    eax,0xc
c0017b38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b40:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b47:	25 ff 0f 00 00       	and    eax,0xfff
c0017b4c:	89 c6                	mov    esi,eax
c0017b4e:	e8 8b a2 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017b53:	89 c3                	mov    ebx,eax
c0017b55:	83 ec 0c             	sub    esp,0xc
c0017b58:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b5c:	e8 e2 9f ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017b61:	83 c4 10             	add    esp,0x10
c0017b64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b68:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b6e:	83 ec 0c             	sub    esp,0xc
c0017b71:	6a 01                	push   0x1
c0017b73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b77:	50                   	push   eax
c0017b78:	52                   	push   edx
c0017b79:	53                   	push   ebx
c0017b7a:	e8 a5 aa ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b7f:	83 c4 20             	add    esp,0x20
c0017b82:	09 f0                	or     eax,esi
c0017b84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b88:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b8b:	83 ec 0c             	sub    esp,0xc
c0017b8e:	50                   	push   eax
c0017b8f:	e8 35 a4 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c0017b94:	83 c4 10             	add    esp,0x10
c0017b97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b9f:	89 14 c5 44 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4bc],edx
c0017ba6:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017baa:	e9 ed fe ff ff       	jmp    c0017a9c <loadACPITables(unsigned char*)+0x10d>
c0017baf:	90                   	nop
c0017bb0:	83 c4 44             	add    esp,0x44
c0017bb3:	5b                   	pop    ebx
c0017bb4:	5e                   	pop    esi
c0017bb5:	c3                   	ret    

c0017bb6 <findRSDT(unsigned char*)>:
c0017bb6:	56                   	push   esi
c0017bb7:	53                   	push   ebx
c0017bb8:	83 ec 44             	sub    esp,0x44
c0017bbb:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017bc0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bc6:	83 e0 04             	and    eax,0x4
c0017bc9:	84 c0                	test   al,al
c0017bcb:	75 0a                	jne    c0017bd7 <findRSDT(unsigned char*)+0x21>
c0017bcd:	b8 00 00 00 00       	mov    eax,0x0
c0017bd2:	e9 f7 00 00 00       	jmp    c0017cce <findRSDT(unsigned char*)+0x118>
c0017bd7:	83 ec 04             	sub    esp,0x4
c0017bda:	6a 24                	push   0x24
c0017bdc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017be0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017be4:	50                   	push   eax
c0017be5:	e8 5a 8b fe ff       	call   c0000744 <memcpy>
c0017bea:	83 c4 10             	add    esp,0x10
c0017bed:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017bf1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017bf5:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017bfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c05:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c15:	25 ff 0f 00 00       	and    eax,0xfff
c0017c1a:	89 c6                	mov    esi,eax
c0017c1c:	e8 bd a1 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017c21:	89 c3                	mov    ebx,eax
c0017c23:	83 ec 0c             	sub    esp,0xc
c0017c26:	6a 02                	push   0x2
c0017c28:	e8 16 9f ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c34:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c3a:	83 ec 0c             	sub    esp,0xc
c0017c3d:	6a 01                	push   0x1
c0017c3f:	6a 02                	push   0x2
c0017c41:	50                   	push   eax
c0017c42:	52                   	push   edx
c0017c43:	53                   	push   ebx
c0017c44:	e8 db a9 ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c49:	83 c4 20             	add    esp,0x20
c0017c4c:	09 f0                	or     eax,esi
c0017c4e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c56:	25 ff 0f 00 00       	and    eax,0xfff
c0017c5b:	89 c6                	mov    esi,eax
c0017c5d:	e8 7c a1 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017c62:	89 c3                	mov    ebx,eax
c0017c64:	83 ec 0c             	sub    esp,0xc
c0017c67:	6a 02                	push   0x2
c0017c69:	e8 d5 9e ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c75:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c7b:	83 ec 0c             	sub    esp,0xc
c0017c7e:	6a 01                	push   0x1
c0017c80:	6a 02                	push   0x2
c0017c82:	50                   	push   eax
c0017c83:	52                   	push   edx
c0017c84:	53                   	push   ebx
c0017c85:	e8 9a a9 ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c8a:	83 c4 20             	add    esp,0x20
c0017c8d:	09 f0                	or     eax,esi
c0017c8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c93:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c98:	75 11                	jne    c0017cab <findRSDT(unsigned char*)+0xf5>
c0017c9a:	c6 05 40 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d40,0x0
c0017ca1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ca5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ca9:	eb 1f                	jmp    c0017cca <findRSDT(unsigned char*)+0x114>
c0017cab:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017cb0:	75 11                	jne    c0017cc3 <findRSDT(unsigned char*)+0x10d>
c0017cb2:	c6 05 40 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d40,0x1
c0017cb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cbd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cc1:	eb 07                	jmp    c0017cca <findRSDT(unsigned char*)+0x114>
c0017cc3:	b8 00 00 00 00       	mov    eax,0x0
c0017cc8:	eb 04                	jmp    c0017cce <findRSDT(unsigned char*)+0x118>
c0017cca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cce:	83 c4 44             	add    esp,0x44
c0017cd1:	5b                   	pop    ebx
c0017cd2:	5e                   	pop    esi
c0017cd3:	c3                   	ret    

c0017cd4 <findDataTable(unsigned char*, char*)>:
c0017cd4:	83 ec 1c             	sub    esp,0x1c
c0017cd7:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017cdc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ce2:	83 e0 04             	and    eax,0x4
c0017ce5:	84 c0                	test   al,al
c0017ce7:	75 07                	jne    c0017cf0 <findDataTable(unsigned char*, char*)+0x1c>
c0017ce9:	b8 00 00 00 00       	mov    eax,0x0
c0017cee:	eb 7c                	jmp    c0017d6c <findDataTable(unsigned char*, char*)+0x98>
c0017cf0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cf8:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017cfd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d01:	7d 3a                	jge    c0017d3d <findDataTable(unsigned char*, char*)+0x69>
c0017d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d07:	c1 e0 03             	shl    eax,0x3
c0017d0a:	05 40 0b 03 c0       	add    eax,0xc0030b40
c0017d0f:	83 ec 04             	sub    esp,0x4
c0017d12:	6a 04                	push   0x4
c0017d14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d18:	50                   	push   eax
c0017d19:	e8 22 89 fe ff       	call   c0000640 <memcmp>
c0017d1e:	83 c4 10             	add    esp,0x10
c0017d21:	85 c0                	test   eax,eax
c0017d23:	0f 94 c0             	sete   al
c0017d26:	84 c0                	test   al,al
c0017d28:	74 0d                	je     c0017d37 <findDataTable(unsigned char*, char*)+0x63>
c0017d2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d2e:	8b 04 c5 44 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf4bc]
c0017d35:	eb 35                	jmp    c0017d6c <findDataTable(unsigned char*, char*)+0x98>
c0017d37:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d3b:	eb bb                	jmp    c0017cf8 <findDataTable(unsigned char*, char*)+0x24>
c0017d3d:	a0 40 0d 03 c0       	mov    al,ds:0xc0030d40
c0017d42:	84 c0                	test   al,al
c0017d44:	74 07                	je     c0017d4d <findDataTable(unsigned char*, char*)+0x79>
c0017d46:	b8 58 00 00 00       	mov    eax,0x58
c0017d4b:	eb 05                	jmp    c0017d52 <findDataTable(unsigned char*, char*)+0x7e>
c0017d4d:	b8 52 00 00 00       	mov    eax,0x52
c0017d52:	83 ec 04             	sub    esp,0x4
c0017d55:	50                   	push   eax
c0017d56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d5a:	68 a4 b5 02 c0       	push   0xc002b5a4
c0017d5f:	e8 f6 b1 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0017d64:	83 c4 10             	add    esp,0x10
c0017d67:	b8 00 00 00 00       	mov    eax,0x0
c0017d6c:	83 c4 1c             	add    esp,0x1c
c0017d6f:	c3                   	ret    

c0017d70 <scanMADT()>:
c0017d70:	53                   	push   ebx
c0017d71:	83 ec 38             	sub    esp,0x38
c0017d74:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017d79:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d7f:	83 e0 04             	and    eax,0x4
c0017d82:	84 c0                	test   al,al
c0017d84:	0f 84 63 04 00 00    	je     c00181ed <scanMADT()+0x47d>
c0017d8a:	e8 76 fb ff ff       	call   c0017905 <findRSDP()>
c0017d8f:	a3 4c 0d 03 c0       	mov    ds:0xc0030d4c,eax
c0017d94:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0017d99:	85 c0                	test   eax,eax
c0017d9b:	75 19                	jne    c0017db6 <scanMADT()+0x46>
c0017d9d:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017da2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017da8:	83 e2 fb             	and    edx,0xfffffffb
c0017dab:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017db1:	e9 3b 04 00 00       	jmp    c00181f1 <scanMADT()+0x481>
c0017db6:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0017dbb:	83 ec 0c             	sub    esp,0xc
c0017dbe:	50                   	push   eax
c0017dbf:	e8 f2 fd ff ff       	call   c0017bb6 <findRSDT(unsigned char*)>
c0017dc4:	83 c4 10             	add    esp,0x10
c0017dc7:	a3 48 0d 03 c0       	mov    ds:0xc0030d48,eax
c0017dcc:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0017dd1:	85 c0                	test   eax,eax
c0017dd3:	75 19                	jne    c0017dee <scanMADT()+0x7e>
c0017dd5:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017dda:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017de0:	83 e2 fb             	and    edx,0xfffffffb
c0017de3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017de9:	e9 03 04 00 00       	jmp    c00181f1 <scanMADT()+0x481>
c0017dee:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0017df3:	83 ec 0c             	sub    esp,0xc
c0017df6:	50                   	push   eax
c0017df7:	e8 93 fb ff ff       	call   c001798f <loadACPITables(unsigned char*)>
c0017dfc:	83 c4 10             	add    esp,0x10
c0017dff:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0017e04:	83 ec 08             	sub    esp,0x8
c0017e07:	68 72 b4 02 c0       	push   0xc002b472
c0017e0c:	50                   	push   eax
c0017e0d:	e8 c2 fe ff ff       	call   c0017cd4 <findDataTable(unsigned char*, char*)>
c0017e12:	83 c4 10             	add    esp,0x10
c0017e15:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e19:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e1e:	75 19                	jne    c0017e39 <scanMADT()+0xc9>
c0017e20:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017e25:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e2b:	83 e2 fe             	and    edx,0xfffffffe
c0017e2e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e34:	e9 b8 03 00 00       	jmp    c00181f1 <scanMADT()+0x481>
c0017e39:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e48:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e4c:	0f 87 9f 03 00 00    	ja     c00181f1 <scanMADT()+0x481>
c0017e52:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e5a:	0f 87 91 03 00 00    	ja     c00181f1 <scanMADT()+0x481>
c0017e60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e64:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e6c:	8d 50 01             	lea    edx,[eax+0x1]
c0017e6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e77:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e7b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e83:	8d 50 01             	lea    edx,[eax+0x1]
c0017e86:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e8e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e92:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e96:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e9b:	0f 86 4f 03 00 00    	jbe    c00181f0 <scanMADT()+0x480>
c0017ea1:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ea6:	75 57                	jne    c0017eff <scanMADT()+0x18f>
c0017ea8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eac:	8d 50 01             	lea    edx,[eax+0x1]
c0017eaf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb3:	8a 15 40 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f40
c0017eb9:	0f b6 d2             	movzx  edx,dl
c0017ebc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ec0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ec4:	88 82 80 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf080],al
c0017eca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ece:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ed5:	8a 15 40 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f40
c0017edb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ede:	88 0d 40 0f 03 c0    	mov    BYTE PTR ds:0xc0030f40,cl
c0017ee4:	0f b6 d2             	movzx  edx,dl
c0017ee7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017eeb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017eef:	88 82 60 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0a0],al
c0017ef5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017efa:	e9 da 02 00 00       	jmp    c00181d9 <scanMADT()+0x469>
c0017eff:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f04:	0f 85 14 01 00 00    	jne    c001801e <scanMADT()+0x2ae>
c0017f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f0e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f15:	8a 15 00 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e00
c0017f1b:	0f b6 d2             	movzx  edx,dl
c0017f1e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f22:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f26:	88 82 20 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf1e0],al
c0017f2c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f38:	01 d0                	add    eax,edx
c0017f3a:	83 c0 2c             	add    eax,0x2c
c0017f3d:	8a 00                	mov    al,BYTE PTR [eax]
c0017f3f:	0f b6 d0             	movzx  edx,al
c0017f42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f46:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f4d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f51:	0f b6 c0             	movzx  eax,al
c0017f54:	c1 e0 08             	shl    eax,0x8
c0017f57:	89 d1                	mov    ecx,edx
c0017f59:	09 c1                	or     ecx,eax
c0017f5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f5f:	8d 50 02             	lea    edx,[eax+0x2]
c0017f62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f66:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f6a:	0f b6 c0             	movzx  eax,al
c0017f6d:	c1 e0 10             	shl    eax,0x10
c0017f70:	09 c1                	or     ecx,eax
c0017f72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f76:	8d 50 03             	lea    edx,[eax+0x3]
c0017f79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f7d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f81:	0f b6 c0             	movzx  eax,al
c0017f84:	c1 e0 18             	shl    eax,0x18
c0017f87:	09 c1                	or     ecx,eax
c0017f89:	89 ca                	mov    edx,ecx
c0017f8b:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017f90:	0f b6 c0             	movzx  eax,al
c0017f93:	89 14 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],edx
c0017f9a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fa3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa7:	01 d0                	add    eax,edx
c0017fa9:	83 c0 2c             	add    eax,0x2c
c0017fac:	8a 00                	mov    al,BYTE PTR [eax]
c0017fae:	0f b6 d0             	movzx  edx,al
c0017fb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb5:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fbc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fc0:	0f b6 c0             	movzx  eax,al
c0017fc3:	c1 e0 08             	shl    eax,0x8
c0017fc6:	89 d1                	mov    ecx,edx
c0017fc8:	09 c1                	or     ecx,eax
c0017fca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fce:	8d 50 02             	lea    edx,[eax+0x2]
c0017fd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fd9:	0f b6 c0             	movzx  eax,al
c0017fdc:	c1 e0 10             	shl    eax,0x10
c0017fdf:	09 c1                	or     ecx,eax
c0017fe1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe5:	8d 50 03             	lea    edx,[eax+0x3]
c0017fe8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fec:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff0:	0f b6 c0             	movzx  eax,al
c0017ff3:	c1 e0 18             	shl    eax,0x18
c0017ff6:	09 c1                	or     ecx,eax
c0017ff8:	89 ca                	mov    edx,ecx
c0017ffa:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017fff:	0f b6 c0             	movzx  eax,al
c0018002:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c0018009:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001800e:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0018013:	40                   	inc    eax
c0018014:	a2 00 0e 03 c0       	mov    ds:0xc0030e00,al
c0018019:	e9 bb 01 00 00       	jmp    c00181d9 <scanMADT()+0x469>
c001801e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018023:	0f 85 e9 00 00 00    	jne    c0018112 <scanMADT()+0x3a2>
c0018029:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802d:	8d 50 01             	lea    edx,[eax+0x1]
c0018030:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018034:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018038:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001803c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018040:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018044:	8d 50 01             	lea    edx,[eax+0x1]
c0018047:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001804b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001804f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018053:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018057:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001805b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001805f:	01 d0                	add    eax,edx
c0018061:	83 c0 2c             	add    eax,0x2c
c0018064:	8a 00                	mov    al,BYTE PTR [eax]
c0018066:	0f b6 d0             	movzx  edx,al
c0018069:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018070:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018074:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018078:	0f b6 c0             	movzx  eax,al
c001807b:	c1 e0 08             	shl    eax,0x8
c001807e:	89 d1                	mov    ecx,edx
c0018080:	09 c1                	or     ecx,eax
c0018082:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018086:	8d 50 02             	lea    edx,[eax+0x2]
c0018089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001808d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018091:	0f b6 c0             	movzx  eax,al
c0018094:	c1 e0 10             	shl    eax,0x10
c0018097:	09 c1                	or     ecx,eax
c0018099:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001809d:	8d 50 03             	lea    edx,[eax+0x3]
c00180a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180a8:	0f b6 c0             	movzx  eax,al
c00180ab:	c1 e0 18             	shl    eax,0x18
c00180ae:	09 c8                	or     eax,ecx
c00180b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180b4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c1:	01 d0                	add    eax,edx
c00180c3:	83 c0 2c             	add    eax,0x2c
c00180c6:	8a 00                	mov    al,BYTE PTR [eax]
c00180c8:	0f b6 c0             	movzx  eax,al
c00180cb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180cf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d6:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180da:	0f b6 d2             	movzx  edx,dl
c00180dd:	c1 e2 08             	shl    edx,0x8
c00180e0:	09 d0                	or     eax,edx
c00180e2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180e7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180ec:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180f5:	88 90 c0 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd2940],dl
c00180fb:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018100:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018105:	66 89 84 12 e0 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf220],ax
c001810d:	e9 c7 00 00 00       	jmp    c00181d9 <scanMADT()+0x469>
c0018112:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018117:	0f 85 b0 00 00 00    	jne    c00181cd <scanMADT()+0x45d>
c001811d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018121:	8d 50 01             	lea    edx,[eax+0x1]
c0018124:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018128:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001812c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018130:	0f b6 c0             	movzx  eax,al
c0018133:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018137:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001813b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813f:	01 d0                	add    eax,edx
c0018141:	83 c0 2c             	add    eax,0x2c
c0018144:	8a 00                	mov    al,BYTE PTR [eax]
c0018146:	0f b6 d0             	movzx  edx,al
c0018149:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018150:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018154:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018158:	0f b6 c0             	movzx  eax,al
c001815b:	c1 e0 08             	shl    eax,0x8
c001815e:	09 d0                	or     eax,edx
c0018160:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018164:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018169:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001816d:	8d 50 01             	lea    edx,[eax+0x1]
c0018170:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018174:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018178:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001817c:	0f b6 c0             	movzx  eax,al
c001817f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018187:	c1 e0 08             	shl    eax,0x8
c001818a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001818e:	89 c1                	mov    ecx,eax
c0018190:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018194:	c1 e0 18             	shl    eax,0x18
c0018197:	89 c3                	mov    ebx,eax
c0018199:	a1 50 0d 03 c0       	mov    eax,ds:0xc0030d50
c001819e:	8d 50 01             	lea    edx,[eax+0x1]
c00181a1:	89 15 50 0d 03 c0    	mov    DWORD PTR ds:0xc0030d50,edx
c00181a7:	09 d9                	or     ecx,ebx
c00181a9:	89 ca                	mov    edx,ecx
c00181ab:	89 14 85 60 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2a0],edx
c00181b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181be:	68 d4 b5 02 c0       	push   0xc002b5d4
c00181c3:	e8 92 ad ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00181c8:	83 c4 10             	add    esp,0x10
c00181cb:	eb 0c                	jmp    c00181d9 <scanMADT()+0x469>
c00181cd:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181d2:	75 05                	jne    c00181d9 <scanMADT()+0x469>
c00181d4:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181d9:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181e2:	01 d0                	add    eax,edx
c00181e4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181e8:	e9 54 fc ff ff       	jmp    c0017e41 <scanMADT()+0xd1>
c00181ed:	90                   	nop
c00181ee:	eb 01                	jmp    c00181f1 <scanMADT()+0x481>
c00181f0:	90                   	nop
c00181f1:	83 c4 38             	add    esp,0x38
c00181f4:	5b                   	pop    ebx
c00181f5:	c3                   	ret    

c00181f6 <ACPI::ACPI()>:
c00181f6:	83 ec 0c             	sub    esp,0xc
c00181f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fd:	83 ec 08             	sub    esp,0x8
c0018200:	68 77 b4 02 c0       	push   0xc002b477
c0018205:	50                   	push   eax
c0018206:	e8 65 c3 ff ff       	call   c0014570 <Device::Device(char const*)>
c001820b:	83 c4 10             	add    esp,0x10
c001820e:	ba 48 b6 02 c0       	mov    edx,0xc002b648
c0018213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018217:	89 10                	mov    DWORD PTR [eax],edx
c0018219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018228:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018236:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018244:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001824b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018256:	e8 15 fb ff ff       	call   c0017d70 <scanMADT()>
c001825b:	90                   	nop
c001825c:	83 c4 0c             	add    esp,0xc
c001825f:	c3                   	ret    

c0018260 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018260:	83 ec 2c             	sub    esp,0x2c
c0018263:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018267:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001826b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001826f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018273:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018278:	88 d0                	mov    al,dl
c001827a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001827e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018283:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001828b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001828f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018295:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018299:	0f 8d 97 00 00 00    	jge    c0018336 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001829f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182a7:	83 c2 2a             	add    edx,0x2a
c00182aa:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182ae:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182b3:	75 78                	jne    c001832d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182bd:	83 c2 2a             	add    edx,0x2a
c00182c0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182c4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182c8:	75 63                	jne    c001832d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182ca:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182cf:	74 3a                	je     c001830b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182d9:	83 c2 2a             	add    edx,0x2a
c00182dc:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182e7:	39 c2                	cmp    edx,eax
c00182e9:	74 10                	je     c00182fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182eb:	83 ec 0c             	sub    esp,0xc
c00182ee:	68 10 b6 02 c0       	push   0xc002b610
c00182f3:	e8 0f 23 00 00       	call   c001a607 <Krnl::panic(char const*)>
c00182f8:	83 c4 10             	add    esp,0x10
c00182fb:	83 ec 0c             	sub    esp,0xc
c00182fe:	68 7c b4 02 c0       	push   0xc002b47c
c0018303:	e8 ff 22 00 00       	call   c001a607 <Krnl::panic(char const*)>
c0018308:	83 c4 10             	add    esp,0x10
c001830b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001830f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018313:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018317:	83 c2 2a             	add    edx,0x2a
c001831a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001831e:	8b 02                	mov    eax,DWORD PTR [edx]
c0018320:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018323:	89 01                	mov    DWORD PTR [ecx],eax
c0018325:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018328:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001832d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018331:	e9 55 ff ff ff       	jmp    c001828b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018336:	90                   	nop
c0018337:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001833b:	83 c4 2c             	add    esp,0x2c
c001833e:	c2 04 00             	ret    0x4
c0018341:	90                   	nop

c0018342 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018342:	83 ec 1c             	sub    esp,0x1c
c0018345:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001834d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018351:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018356:	88 c8                	mov    al,cl
c0018358:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001835c:	88 d0                	mov    al,dl
c001835e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018362:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018366:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001836c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018370:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018373:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018377:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001837b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001837f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018385:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018389:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001838c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018390:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018399:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001839f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00183a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183aa:	83 c2 2a             	add    edx,0x2a
c00183ad:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183bf:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183c2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183c6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ce:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183d4:	8d 50 01             	lea    edx,[eax+0x1]
c00183d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183db:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183eb:	3d 00 02 00 00       	cmp    eax,0x200
c00183f0:	75 10                	jne    c0018402 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183f2:	83 ec 0c             	sub    esp,0xc
c00183f5:	68 8b b4 02 c0       	push   0xc002b48b
c00183fa:	e8 08 22 00 00       	call   c001a607 <Krnl::panic(char const*)>
c00183ff:	83 c4 10             	add    esp,0x10
c0018402:	90                   	nop
c0018403:	83 c4 1c             	add    esp,0x1c
c0018406:	c3                   	ret    
c0018407:	90                   	nop

c0018408 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018408:	b8 00 00 00 00       	mov    eax,0x0
c001840d:	c3                   	ret    

c001840e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001840e:	83 ec 1c             	sub    esp,0x1c
c0018411:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018415:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018418:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001841c:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0018421:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018426:	83 ec 08             	sub    esp,0x8
c0018429:	52                   	push   edx
c001842a:	50                   	push   eax
c001842b:	e8 28 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018430:	83 c4 10             	add    esp,0x10
c0018433:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018437:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001843c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018441:	83 ec 04             	sub    esp,0x4
c0018444:	6a 01                	push   0x1
c0018446:	52                   	push   edx
c0018447:	50                   	push   eax
c0018448:	e8 21 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c001844d:	83 c4 10             	add    esp,0x10
c0018450:	90                   	nop
c0018451:	83 c4 1c             	add    esp,0x1c
c0018454:	c3                   	ret    
c0018455:	90                   	nop

c0018456 <ACPI::open(int, int, void*)>:
c0018456:	53                   	push   ebx
c0018457:	83 ec 28             	sub    esp,0x28
c001845a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001845e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018465:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018469:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018470:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0018475:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001847b:	83 e0 04             	and    eax,0x4
c001847e:	84 c0                	test   al,al
c0018480:	74 47                	je     c00184c9 <ACPI::open(int, int, void*)+0x73>
c0018482:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0018487:	83 ec 08             	sub    esp,0x8
c001848a:	68 a8 b4 02 c0       	push   0xc002b4a8
c001848f:	50                   	push   eax
c0018490:	e8 3f f8 ff ff       	call   c0017cd4 <findDataTable(unsigned char*, char*)>
c0018495:	83 c4 10             	add    esp,0x10
c0018498:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001849c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184a1:	74 26                	je     c00184c9 <ACPI::open(int, int, void*)+0x73>
c00184a3:	83 ec 0c             	sub    esp,0xc
c00184a6:	68 ad b4 02 c0       	push   0xc002b4ad
c00184ab:	e8 aa aa ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00184b0:	83 c4 10             	add    esp,0x10
c00184b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184b7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184c2:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184c9:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184d5:	8a 00                	mov    al,BYTE PTR [eax]
c00184d7:	3c 01                	cmp    al,0x1
c00184d9:	75 28                	jne    c0018503 <ACPI::open(int, int, void*)+0xad>
c00184db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184df:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ea:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184f1:	83 ec 0c             	sub    esp,0xc
c00184f4:	68 be b4 02 c0       	push   0xc002b4be
c00184f9:	e8 5c aa ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00184fe:	83 c4 10             	add    esp,0x10
c0018501:	eb 25                	jmp    c0018528 <ACPI::open(int, int, void*)+0xd2>
c0018503:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018507:	8a 00                	mov    al,BYTE PTR [eax]
c0018509:	3c 02                	cmp    al,0x2
c001850b:	75 1b                	jne    c0018528 <ACPI::open(int, int, void*)+0xd2>
c001850d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018511:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018518:	83 ec 0c             	sub    esp,0xc
c001851b:	68 c6 b4 02 c0       	push   0xc002b4c6
c0018520:	e8 35 aa ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018525:	83 c4 10             	add    esp,0x10
c0018528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018532:	83 f0 01             	xor    eax,0x1
c0018535:	84 c0                	test   al,al
c0018537:	74 6a                	je     c00185a3 <ACPI::open(int, int, void*)+0x14d>
c0018539:	83 ec 0c             	sub    esp,0xc
c001853c:	68 ce b4 02 c0       	push   0xc002b4ce
c0018541:	e8 14 aa ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018546:	83 c4 10             	add    esp,0x10
c0018549:	e8 02 7c fe ff       	call   c0000150 <manualPCIProbe>
c001854e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018552:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018557:	75 28                	jne    c0018581 <ACPI::open(int, int, void*)+0x12b>
c0018559:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001855d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018564:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018568:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001856f:	83 ec 0c             	sub    esp,0xc
c0018572:	68 dc b4 02 c0       	push   0xc002b4dc
c0018577:	e8 de a9 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001857c:	83 c4 10             	add    esp,0x10
c001857f:	eb 22                	jmp    c00185a3 <ACPI::open(int, int, void*)+0x14d>
c0018581:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018586:	75 1b                	jne    c00185a3 <ACPI::open(int, int, void*)+0x14d>
c0018588:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001858c:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018593:	83 ec 0c             	sub    esp,0xc
c0018596:	68 e6 b4 02 c0       	push   0xc002b4e6
c001859b:	e8 ba a9 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00185a0:	83 c4 10             	add    esp,0x10
c00185a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a7:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185ad:	84 c0                	test   al,al
c00185af:	74 13                	je     c00185c4 <ACPI::open(int, int, void*)+0x16e>
c00185b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185b5:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185bb:	83 f0 01             	xor    eax,0x1
c00185be:	0f b6 c0             	movzx  eax,al
c00185c1:	40                   	inc    eax
c00185c2:	eb 05                	jmp    c00185c9 <ACPI::open(int, int, void*)+0x173>
c00185c4:	b8 00 00 00 00       	mov    eax,0x0
c00185c9:	83 ec 08             	sub    esp,0x8
c00185cc:	50                   	push   eax
c00185cd:	68 f0 b4 02 c0       	push   0xc002b4f0
c00185d2:	e8 83 a9 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00185d7:	83 c4 10             	add    esp,0x10
c00185da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185de:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185e4:	84 c0                	test   al,al
c00185e6:	74 67                	je     c001864f <ACPI::open(int, int, void*)+0x1f9>
c00185e8:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185f0:	83 ec 0c             	sub    esp,0xc
c00185f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185f7:	e8 47 72 ff ff       	call   c000f843 <malloc>
c00185fc:	83 c4 10             	add    esp,0x10
c00185ff:	89 c3                	mov    ebx,eax
c0018601:	83 ec 0c             	sub    esp,0xc
c0018604:	53                   	push   ebx
c0018605:	e8 f6 a2 00 00       	call   c0022900 <PCI::PCI()>
c001860a:	83 c4 10             	add    esp,0x10
c001860d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018611:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018615:	83 ec 08             	sub    esp,0x8
c0018618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001861c:	50                   	push   eax
c001861d:	e8 5e bd ff ff       	call   c0014380 <Device::addChild(Device*)>
c0018622:	83 c4 10             	add    esp,0x10
c0018625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018629:	8b 00                	mov    eax,DWORD PTR [eax]
c001862b:	83 c0 08             	add    eax,0x8
c001862e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018630:	6a 00                	push   0x0
c0018632:	6a 00                	push   0x0
c0018634:	6a 00                	push   0x0
c0018636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001863a:	ff d0                	call   eax
c001863c:	83 c4 10             	add    esp,0x10
c001863f:	83 ec 0c             	sub    esp,0xc
c0018642:	68 f9 b4 02 c0       	push   0xc002b4f9
c0018647:	e8 0e a9 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001864c:	83 c4 10             	add    esp,0x10
c001864f:	83 ec 0c             	sub    esp,0xc
c0018652:	68 04 b5 02 c0       	push   0xc002b504
c0018657:	e8 81 46 00 00       	call   c001ccdd <Thr::loadKernelSymbolTable(char const*)>
c001865c:	83 c4 10             	add    esp,0x10
c001865f:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0018665:	83 ec 08             	sub    esp,0x8
c0018668:	6a 01                	push   0x1
c001866a:	68 22 b5 02 c0       	push   0xc002b522
c001866f:	e8 c6 50 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0018674:	83 c4 10             	add    esp,0x10
c0018677:	83 ec 08             	sub    esp,0x8
c001867a:	53                   	push   ebx
c001867b:	50                   	push   eax
c001867c:	e8 08 53 00 00       	call   c001d989 <Thr::executeDLL(unsigned long, void*)>
c0018681:	83 c4 10             	add    esp,0x10
c0018684:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c001868a:	83 ec 08             	sub    esp,0x8
c001868d:	6a 01                	push   0x1
c001868f:	68 3f b5 02 c0       	push   0xc002b53f
c0018694:	e8 a1 50 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	83 ec 08             	sub    esp,0x8
c001869f:	53                   	push   ebx
c00186a0:	50                   	push   eax
c00186a1:	e8 e3 52 00 00       	call   c001d989 <Thr::executeDLL(unsigned long, void*)>
c00186a6:	83 c4 10             	add    esp,0x10
c00186a9:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00186ae:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186b4:	83 e0 04             	and    eax,0x4
c00186b7:	84 c0                	test   al,al
c00186b9:	0f 84 d2 00 00 00    	je     c0018791 <ACPI::open(int, int, void*)+0x33b>
c00186bf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186c6:	83 ec 0c             	sub    esp,0xc
c00186c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186cd:	e8 71 71 ff ff       	call   c000f843 <malloc>
c00186d2:	83 c4 10             	add    esp,0x10
c00186d5:	89 c3                	mov    ebx,eax
c00186d7:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00186dc:	83 ec 04             	sub    esp,0x4
c00186df:	50                   	push   eax
c00186e0:	68 5c b5 02 c0       	push   0xc002b55c
c00186e5:	53                   	push   ebx
c00186e6:	e8 c7 ad ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c00186eb:	83 c4 10             	add    esp,0x10
c00186ee:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186f2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186f7:	74 17                	je     c0018710 <ACPI::open(int, int, void*)+0x2ba>
c00186f9:	83 ec 0c             	sub    esp,0xc
c00186fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018700:	e8 7f b0 ff ff       	call   c0013784 <File::exists()>
c0018705:	83 c4 10             	add    esp,0x10
c0018708:	84 c0                	test   al,al
c001870a:	74 04                	je     c0018710 <ACPI::open(int, int, void*)+0x2ba>
c001870c:	b0 01                	mov    al,0x1
c001870e:	eb 02                	jmp    c0018712 <ACPI::open(int, int, void*)+0x2bc>
c0018710:	b0 00                	mov    al,0x0
c0018712:	84 c0                	test   al,al
c0018714:	74 22                	je     c0018738 <ACPI::open(int, int, void*)+0x2e2>
c0018716:	83 ec 08             	sub    esp,0x8
c0018719:	6a 01                	push   0x1
c001871b:	68 5c b5 02 c0       	push   0xc002b55c
c0018720:	e8 15 50 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c0018725:	83 c4 10             	add    esp,0x10
c0018728:	83 ec 08             	sub    esp,0x8
c001872b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001872f:	50                   	push   eax
c0018730:	e8 54 52 00 00       	call   c001d989 <Thr::executeDLL(unsigned long, void*)>
c0018735:	83 c4 10             	add    esp,0x10
c0018738:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001873d:	74 1e                	je     c001875d <ACPI::open(int, int, void*)+0x307>
c001873f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018744:	74 17                	je     c001875d <ACPI::open(int, int, void*)+0x307>
c0018746:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001874a:	8b 00                	mov    eax,DWORD PTR [eax]
c001874c:	83 c0 08             	add    eax,0x8
c001874f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018751:	83 ec 0c             	sub    esp,0xc
c0018754:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018758:	ff d0                	call   eax
c001875a:	83 c4 10             	add    esp,0x10
c001875d:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0018762:	83 ec 08             	sub    esp,0x8
c0018765:	68 79 b5 02 c0       	push   0xc002b579
c001876a:	50                   	push   eax
c001876b:	e8 64 f5 ff ff       	call   c0017cd4 <findDataTable(unsigned char*, char*)>
c0018770:	83 c4 10             	add    esp,0x10
c0018773:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018777:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001877c:	74 13                	je     c0018791 <ACPI::open(int, int, void*)+0x33b>
c001877e:	83 ec 08             	sub    esp,0x8
c0018781:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018785:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018789:	e8 80 fc ff ff       	call   c001840e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001878e:	83 c4 10             	add    esp,0x10
c0018791:	b8 00 00 00 00       	mov    eax,0x0
c0018796:	83 c4 28             	add    esp,0x28
c0018799:	5b                   	pop    ebx
c001879a:	c3                   	ret    
c001879b:	90                   	nop

c001879c <ACPI::sleep()>:
c001879c:	83 ec 0c             	sub    esp,0xc
c001879f:	a1 20 0b 03 c0       	mov    eax,ds:0xc0030b20
c00187a4:	85 c0                	test   eax,eax
c00187a6:	74 07                	je     c00187af <ACPI::sleep()+0x13>
c00187a8:	a1 20 0b 03 c0       	mov    eax,ds:0xc0030b20
c00187ad:	ff d0                	call   eax
c00187af:	90                   	nop
c00187b0:	83 c4 0c             	add    esp,0xc
c00187b3:	c3                   	ret    

c00187b4 <CPU::close(int, int, void*)>:
c00187b4:	31 c0                	xor    eax,eax
c00187b6:	c3                   	ret    
c00187b7:	90                   	nop

c00187b8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187b8:	55                   	push   ebp
c00187b9:	57                   	push   edi
c00187ba:	56                   	push   esi
c00187bb:	53                   	push   ebx
c00187bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187c4:	89 ce                	mov    esi,ecx
c00187c6:	89 d5                	mov    ebp,edx
c00187c8:	80 f9 04             	cmp    cl,0x4
c00187cb:	75 28                	jne    c00187f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187cd:	8d 42 f9             	lea    eax,[edx-0x7]
c00187d0:	3c 03                	cmp    al,0x3
c00187d2:	0f 86 63 01 00 00    	jbe    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187d8:	80 fa 03             	cmp    dl,0x3
c00187db:	0f 84 5a 01 00 00    	je     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187e1:	8d 7a f2             	lea    edi,[edx-0xe]
c00187e4:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c00187e9:	89 fb                	mov    ebx,edi
c00187eb:	80 fb 01             	cmp    bl,0x1
c00187ee:	77 4e                	ja     c001883e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187f0:	e9 52 01 00 00       	jmp    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f5:	80 f9 05             	cmp    cl,0x5
c00187f8:	75 4d                	jne    c0018847 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187fa:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c00187ff:	80 fa 03             	cmp    dl,0x3
c0018802:	0f 86 3f 01 00 00    	jbe    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018808:	8d 7a fa             	lea    edi,[edx-0x6]
c001880b:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018810:	89 fb                	mov    ebx,edi
c0018812:	80 fb 01             	cmp    bl,0x1
c0018815:	0f 86 2c 01 00 00    	jbe    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881b:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018820:	80 fa 08             	cmp    dl,0x8
c0018823:	0f 84 1e 01 00 00    	je     c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018829:	89 d7                	mov    edi,edx
c001882b:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018830:	83 e7 fb             	and    edi,0xfffffffb
c0018833:	89 fb                	mov    ebx,edi
c0018835:	80 fb 09             	cmp    bl,0x9
c0018838:	0f 84 09 01 00 00    	je     c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001883e:	31 c0                	xor    eax,eax
c0018840:	89 eb                	mov    ebx,ebp
c0018842:	0f b6 fb             	movzx  edi,bl
c0018845:	eb 30                	jmp    c0018877 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018847:	31 c0                	xor    eax,eax
c0018849:	80 f9 06             	cmp    cl,0x6
c001884c:	75 f2                	jne    c0018840 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001884e:	80 fa 0a             	cmp    dl,0xa
c0018851:	77 ed                	ja     c0018840 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018853:	bf de 05 00 00       	mov    edi,0x5de
c0018858:	0f a3 d7             	bt     edi,edx
c001885b:	73 e3                	jae    c0018840 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001885d:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018862:	e9 e0 00 00 00       	jmp    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018867:	39 c7                	cmp    edi,eax
c0018869:	0f 84 d3 00 00 00    	je     c0018942 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001886f:	40                   	inc    eax
c0018870:	3d d0 00 00 00       	cmp    eax,0xd0
c0018875:	74 09                	je     c0018880 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018877:	89 f3                	mov    ebx,esi
c0018879:	80 fb 0f             	cmp    bl,0xf
c001887c:	75 f1                	jne    c001886f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001887e:	eb e7                	jmp    c0018867 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018880:	80 f9 10             	cmp    cl,0x10
c0018883:	75 14                	jne    c0018899 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018885:	8d 42 fc             	lea    eax,[edx-0x4]
c0018888:	83 e0 fb             	and    eax,0xfffffffb
c001888b:	3c 02                	cmp    al,0x2
c001888d:	76 34                	jbe    c00188c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001888f:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c0018894:	80 fa 02             	cmp    dl,0x2
c0018897:	eb 24                	jmp    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018899:	80 f9 11             	cmp    cl,0x11
c001889c:	75 13                	jne    c00188b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001889e:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c00188a3:	80 fa 03             	cmp    dl,0x3
c00188a6:	0f 85 9b 00 00 00    	jne    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ac:	e9 91 00 00 00       	jmp    c0018942 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188b1:	80 f9 12             	cmp    cl,0x12
c00188b4:	75 14                	jne    c00188ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188b6:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c00188bb:	fe ca                	dec    dl
c00188bd:	0f 85 84 00 00 00    	jne    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c3:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00188c8:	eb 7d                	jmp    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ca:	80 f9 14             	cmp    cl,0x14
c00188cd:	75 12                	jne    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188cf:	4a                   	dec    edx
c00188d0:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c00188d5:	80 fa 01             	cmp    dl,0x1
c00188d8:	77 6d                	ja     c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188da:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c00188df:	eb 66                	jmp    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e1:	80 f9 15             	cmp    cl,0x15
c00188e4:	75 31                	jne    c0018917 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188e6:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c00188eb:	80 fa 01             	cmp    dl,0x1
c00188ee:	74 57                	je     c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f0:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c00188f5:	80 fa 13             	cmp    dl,0x13
c00188f8:	76 0c                	jbe    c0018906 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188fa:	80 fa 30             	cmp    dl,0x30
c00188fd:	75 48                	jne    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ff:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018904:	eb 41                	jmp    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018906:	b9 04 00 09 00       	mov    ecx,0x90004
c001890b:	0f a3 d1             	bt     ecx,edx
c001890e:	73 37                	jae    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018910:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018915:	eb 30                	jmp    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018917:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c001891c:	80 f9 16             	cmp    cl,0x16
c001891f:	75 26                	jne    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018921:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018926:	84 d2                	test   dl,dl
c0018928:	74 1d                	je     c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892a:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c001892f:	80 fa 30             	cmp    dl,0x30
c0018932:	75 13                	jne    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018934:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018939:	eb 0c                	jmp    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893b:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018940:	eb 05                	jmp    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018942:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018947:	5b                   	pop    ebx
c0018948:	5e                   	pop    esi
c0018949:	5f                   	pop    edi
c001894a:	5d                   	pop    ebp
c001894b:	c3                   	ret    

c001894c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001894c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018950:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018954:	80 f9 04             	cmp    cl,0x4
c0018957:	75 6b                	jne    c00189c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018959:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c001895e:	80 fa 01             	cmp    dl,0x1
c0018961:	0f 86 92 02 00 00    	jbe    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018967:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c001896c:	80 fa 02             	cmp    dl,0x2
c001896f:	0f 84 84 02 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018975:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c001897a:	80 fa 03             	cmp    dl,0x3
c001897d:	0f 84 76 02 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018983:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018988:	80 fa 04             	cmp    dl,0x4
c001898b:	0f 84 68 02 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018991:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018996:	80 fa 05             	cmp    dl,0x5
c0018999:	0f 84 5a 02 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899f:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c00189a4:	80 fa 07             	cmp    dl,0x7
c00189a7:	0f 84 4c 02 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ad:	83 ea 08             	sub    edx,0x8
c00189b0:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c00189b5:	80 fa 01             	cmp    dl,0x1
c00189b8:	0f 87 3b 02 00 00    	ja     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189be:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c00189c3:	c3                   	ret    
c00189c4:	80 f9 05             	cmp    cl,0x5
c00189c7:	75 45                	jne    c0018a0e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189c9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189cc:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00189d1:	80 f9 02             	cmp    cl,0x2
c00189d4:	0f 86 1f 02 00 00    	jbe    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189da:	80 fa 04             	cmp    dl,0x4
c00189dd:	0f 84 f3 01 00 00    	je     c0018bd6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189e3:	80 fa 07             	cmp    dl,0x7
c00189e6:	0f 84 0d 02 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ec:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c00189f1:	80 fa 08             	cmp    dl,0x8
c00189f4:	0f 84 ff 01 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fa:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c00189ff:	80 fa 09             	cmp    dl,0x9
c0018a02:	0f 85 f1 01 00 00    	jne    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a08:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018a0d:	c3                   	ret    
c0018a0e:	80 f9 06             	cmp    cl,0x6
c0018a11:	0f 85 85 01 00 00    	jne    c0018b9c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a17:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018a1c:	80 fa 01             	cmp    dl,0x1
c0018a1f:	0f 84 d4 01 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a25:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a28:	3c 01                	cmp    al,0x1
c0018a2a:	0f 86 ac 01 00 00    	jbe    c0018bdc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a30:	80 fa 03             	cmp    dl,0x3
c0018a33:	0f 84 a3 01 00 00    	je     c0018bdc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a39:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a3c:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018a41:	80 f9 01             	cmp    cl,0x1
c0018a44:	0f 86 af 01 00 00    	jbe    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4a:	80 fa 09             	cmp    dl,0x9
c0018a4d:	0f 84 8f 01 00 00    	je     c0018be2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a53:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a56:	80 f9 01             	cmp    cl,0x1
c0018a59:	0f 86 9a 01 00 00    	jbe    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5f:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018a64:	80 fa 0d             	cmp    dl,0xd
c0018a67:	0f 84 8c 01 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6d:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a72:	80 fa 0e             	cmp    dl,0xe
c0018a75:	0f 84 7e 01 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7b:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a80:	80 fa 0f             	cmp    dl,0xf
c0018a83:	0f 84 70 01 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a89:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018a8e:	80 fa 15             	cmp    dl,0x15
c0018a91:	0f 84 62 01 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a97:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a9a:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a9f:	80 f9 01             	cmp    cl,0x1
c0018aa2:	0f 86 51 01 00 00    	jbe    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa8:	80 fa 1a             	cmp    dl,0x1a
c0018aab:	0f 84 37 01 00 00    	je     c0018be8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018ab1:	80 fa 1c             	cmp    dl,0x1c
c0018ab4:	0f 84 34 01 00 00    	je     c0018bee <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018aba:	80 fa 1d             	cmp    dl,0x1d
c0018abd:	0f 84 36 01 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac3:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018ac8:	80 fa 25             	cmp    dl,0x25
c0018acb:	0f 84 28 01 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad1:	8d 4a da             	lea    ecx,[edx-0x26]
c0018ad4:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018ad9:	80 f9 01             	cmp    cl,0x1
c0018adc:	0f 86 17 01 00 00    	jbe    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae2:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018ae7:	80 fa 2a             	cmp    dl,0x2a
c0018aea:	0f 84 09 01 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af0:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018af5:	80 fa 2c             	cmp    dl,0x2c
c0018af8:	0f 84 fb 00 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afe:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018b03:	80 fa 2d             	cmp    dl,0x2d
c0018b06:	0f 84 ed 00 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0c:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018b11:	80 fa 2e             	cmp    dl,0x2e
c0018b14:	0f 84 df 00 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1a:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018b1f:	80 fa 2f             	cmp    dl,0x2f
c0018b22:	0f 84 d1 00 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b28:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b2b:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018b30:	80 f9 01             	cmp    cl,0x1
c0018b33:	0f 86 c0 00 00 00    	jbe    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b39:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018b3e:	80 fa 37             	cmp    dl,0x37
c0018b41:	0f 84 b2 00 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b47:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018b4c:	80 fa 3a             	cmp    dl,0x3a
c0018b4f:	0f 84 a4 00 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b55:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018b5a:	80 fa 3c             	cmp    dl,0x3c
c0018b5d:	0f 84 96 00 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b63:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018b68:	80 fa 3d             	cmp    dl,0x3d
c0018b6b:	0f 84 88 00 00 00    	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b71:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018b76:	80 fa 3e             	cmp    dl,0x3e
c0018b79:	74 7e                	je     c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b7b:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b7e:	3c 01                	cmp    al,0x1
c0018b80:	76 72                	jbe    c0018bf4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b82:	80 fa 3f             	cmp    dl,0x3f
c0018b85:	74 6d                	je     c0018bf4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b87:	80 fa 4a             	cmp    dl,0x4a
c0018b8a:	74 0a                	je     c0018b96 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b8c:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c0018b91:	80 fa 4d             	cmp    dl,0x4d
c0018b94:	75 63                	jne    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b96:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018b9b:	c3                   	ret    
c0018b9c:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c0018ba1:	80 f9 0b             	cmp    cl,0xb
c0018ba4:	75 0a                	jne    c0018bb0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018ba6:	fe ca                	dec    dl
c0018ba8:	75 4f                	jne    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018baa:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018baf:	c3                   	ret    
c0018bb0:	80 f9 0f             	cmp    cl,0xf
c0018bb3:	75 44                	jne    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb5:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018bba:	80 fa 02             	cmp    dl,0x2
c0018bbd:	76 3a                	jbe    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbf:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bc2:	3c 01                	cmp    al,0x1
c0018bc4:	76 0a                	jbe    c0018bd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018bc6:	b8 5e b9 02 c0       	mov    eax,0xc002b95e
c0018bcb:	80 fa 06             	cmp    dl,0x6
c0018bce:	75 29                	jne    c0018bf9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd0:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018bd5:	c3                   	ret    
c0018bd6:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018bdb:	c3                   	ret    
c0018bdc:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018be1:	c3                   	ret    
c0018be2:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018be7:	c3                   	ret    
c0018be8:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018bed:	c3                   	ret    
c0018bee:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018bf3:	c3                   	ret    
c0018bf4:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018bf9:	c3                   	ret    

c0018bfa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bfa:	60                   	pusha  
c0018bfb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c07:	9c                   	pushf  
c0018c08:	fa                   	cli    
c0018c09:	0f 09                	wbinvd 
c0018c0b:	0f 30                	wrmsr  
c0018c0d:	9d                   	popf   
c0018c0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c12:	89 02                	mov    DWORD PTR [edx],eax
c0018c14:	61                   	popa   
c0018c15:	c3                   	ret    

c0018c16 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c16:	60                   	pusha  
c0018c17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c1b:	9c                   	pushf  
c0018c1c:	fa                   	cli    
c0018c1d:	0f 09                	wbinvd 
c0018c1f:	31 c0                	xor    eax,eax
c0018c21:	31 d2                	xor    edx,edx
c0018c23:	0f 32                	rdmsr  
c0018c25:	9d                   	popf   
c0018c26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c2a:	89 02                	mov    DWORD PTR [edx],eax
c0018c2c:	61                   	popa   
c0018c2d:	c3                   	ret    

c0018c2e <CPU::AMD_K6_writeback(int, int, int)>:
c0018c2e:	56                   	push   esi
c0018c2f:	53                   	push   ebx
c0018c30:	83 ec 10             	sub    esp,0x10
c0018c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c37:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c3c:	75 5d                	jne    c0018c9b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c3e:	83 f8 08             	cmp    eax,0x8
c0018c41:	75 09                	jne    c0018c4c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c43:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c48:	7e 13                	jle    c0018c5d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c4a:	eb 30                	jmp    c0018c7c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c4c:	83 f8 06             	cmp    eax,0x6
c0018c4f:	7c 4a                	jl     c0018c9b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c51:	83 f8 07             	cmp    eax,0x7
c0018c54:	7e 07                	jle    c0018c5d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c56:	83 f8 09             	cmp    eax,0x9
c0018c59:	74 21                	je     c0018c7c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c5b:	eb 3e                	jmp    c0018c9b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c5d:	89 e6                	mov    esi,esp
c0018c5f:	8b 1d a8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a8
c0018c65:	56                   	push   esi
c0018c66:	c1 eb 15             	shr    ebx,0x15
c0018c69:	68 82 00 00 c0       	push   0xc0000082
c0018c6e:	83 e3 7e             	and    ebx,0x7e
c0018c71:	e8 a0 ff ff ff       	call   c0018c16 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c76:	56                   	push   esi
c0018c77:	6a 00                	push   0x0
c0018c79:	53                   	push   ebx
c0018c7a:	eb 12                	jmp    c0018c8e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c7c:	89 e3                	mov    ebx,esp
c0018c7e:	53                   	push   ebx
c0018c7f:	68 82 00 00 c0       	push   0xc0000082
c0018c84:	e8 8d ff ff ff       	call   c0018c16 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c89:	53                   	push   ebx
c0018c8a:	6a 00                	push   0x0
c0018c8c:	6a 00                	push   0x0
c0018c8e:	68 82 00 00 c0       	push   0xc0000082
c0018c93:	e8 62 ff ff ff       	call   c0018bfa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c98:	83 c4 18             	add    esp,0x18
c0018c9b:	83 c4 10             	add    esp,0x10
c0018c9e:	5b                   	pop    ebx
c0018c9f:	5e                   	pop    esi
c0018ca0:	c3                   	ret    
c0018ca1:	90                   	nop

c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018ca2:	55                   	push   ebp
c0018ca3:	57                   	push   edi
c0018ca4:	56                   	push   esi
c0018ca5:	53                   	push   ebx
c0018ca6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018caa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018cb2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cb6:	39 05 80 d9 02 c0    	cmp    DWORD PTR ds:0xc002d980,eax
c0018cbc:	75 23                	jne    c0018ce1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cbe:	a1 ac 0f 03 c0       	mov    eax,ds:0xc0030fac
c0018cc3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018cc7:	89 06                	mov    DWORD PTR [esi],eax
c0018cc9:	a1 a8 0f 03 c0       	mov    eax,ds:0xc0030fa8
c0018cce:	89 07                	mov    DWORD PTR [edi],eax
c0018cd0:	a1 a4 0f 03 c0       	mov    eax,ds:0xc0030fa4
c0018cd5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cd8:	a1 a0 0f 03 c0       	mov    eax,ds:0xc0030fa0
c0018cdd:	89 02                	mov    DWORD PTR [edx],eax
c0018cdf:	eb 3f                	jmp    c0018d20 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018ce1:	31 c9                	xor    ecx,ecx
c0018ce3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ce7:	0f a2                	cpuid  
c0018ce9:	89 06                	mov    DWORD PTR [esi],eax
c0018ceb:	89 1f                	mov    DWORD PTR [edi],ebx
c0018ced:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cf1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018cf4:	89 10                	mov    DWORD PTR [eax],edx
c0018cf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cfa:	a3 80 d9 02 c0       	mov    ds:0xc002d980,eax
c0018cff:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d01:	a3 ac 0f 03 c0       	mov    ds:0xc0030fac,eax
c0018d06:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d08:	a3 a8 0f 03 c0       	mov    ds:0xc0030fa8,eax
c0018d0d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d10:	a3 a4 0f 03 c0       	mov    ds:0xc0030fa4,eax
c0018d15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d1b:	a3 a0 0f 03 c0       	mov    ds:0xc0030fa0,eax
c0018d20:	5b                   	pop    ebx
c0018d21:	5e                   	pop    esi
c0018d22:	5f                   	pop    edi
c0018d23:	5d                   	pop    ebp
c0018d24:	c3                   	ret    
c0018d25:	90                   	nop

c0018d26 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d26:	83 ec 10             	sub    esp,0x10
c0018d29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2d:	50                   	push   eax
c0018d2e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d32:	50                   	push   eax
c0018d33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d37:	50                   	push   eax
c0018d38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3c:	50                   	push   eax
c0018d3d:	6a 01                	push   0x1
c0018d3f:	e8 5e ff ff ff       	call   c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d48:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d4c:	0f 95 c0             	setne  al
c0018d4f:	83 c4 24             	add    esp,0x24
c0018d52:	c3                   	ret    
c0018d53:	90                   	nop

c0018d54 <CPU::cpuidCheckECX(unsigned int)>:
c0018d54:	83 ec 10             	sub    esp,0x10
c0018d57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5b:	50                   	push   eax
c0018d5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d60:	50                   	push   eax
c0018d61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d65:	50                   	push   eax
c0018d66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6a:	50                   	push   eax
c0018d6b:	6a 01                	push   0x1
c0018d6d:	e8 30 ff ff ff       	call   c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d76:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d7a:	0f 95 c0             	setne  al
c0018d7d:	83 c4 24             	add    esp,0x24
c0018d80:	c3                   	ret    
c0018d81:	90                   	nop

c0018d82 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d82:	83 ec 10             	sub    esp,0x10
c0018d85:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d89:	50                   	push   eax
c0018d8a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8e:	50                   	push   eax
c0018d8f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d93:	50                   	push   eax
c0018d94:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d98:	50                   	push   eax
c0018d99:	6a 07                	push   0x7
c0018d9b:	e8 02 ff ff ff       	call   c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018da0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018da4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018da8:	0f 95 c0             	setne  al
c0018dab:	83 c4 24             	add    esp,0x24
c0018dae:	c3                   	ret    
c0018daf:	90                   	nop

c0018db0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018db0:	83 ec 10             	sub    esp,0x10
c0018db3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db7:	50                   	push   eax
c0018db8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dbc:	50                   	push   eax
c0018dbd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc1:	50                   	push   eax
c0018dc2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc6:	50                   	push   eax
c0018dc7:	6a 07                	push   0x7
c0018dc9:	e8 d4 fe ff ff       	call   c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dd2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dd6:	0f 95 c0             	setne  al
c0018dd9:	83 c4 24             	add    esp,0x24
c0018ddc:	c3                   	ret    
c0018ddd:	90                   	nop

c0018dde <CPU::CPU()>:
c0018dde:	83 ec 0c             	sub    esp,0xc
c0018de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de5:	83 ec 08             	sub    esp,0x8
c0018de8:	68 5e b9 02 c0       	push   0xc002b95e
c0018ded:	50                   	push   eax
c0018dee:	e8 7d b7 ff ff       	call   c0014570 <Device::Device(char const*)>
c0018df3:	83 c4 10             	add    esp,0x10
c0018df6:	ba 38 ba 02 c0       	mov    edx,0xc002ba38
c0018dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dff:	89 10                	mov    DWORD PTR [eax],edx
c0018e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e05:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e13:	05 78 01 00 00       	add    eax,0x178
c0018e18:	83 ec 0c             	sub    esp,0xc
c0018e1b:	50                   	push   eax
c0018e1c:	e8 37 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018e21:	83 c4 10             	add    esp,0x10
c0018e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e28:	05 7c 09 00 00       	add    eax,0x97c
c0018e2d:	83 ec 0c             	sub    esp,0xc
c0018e30:	50                   	push   eax
c0018e31:	e8 84 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e36:	83 c4 10             	add    esp,0x10
c0018e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e3d:	05 7c 11 00 00       	add    eax,0x117c
c0018e42:	83 ec 0c             	sub    esp,0xc
c0018e45:	50                   	push   eax
c0018e46:	e8 29 86 ff ff       	call   c0011474 <TSS::TSS()>
c0018e4b:	83 c4 10             	add    esp,0x10
c0018e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e52:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e5d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e67:	90                   	nop
c0018e68:	83 c4 0c             	add    esp,0xc
c0018e6b:	c3                   	ret    

c0018e6c <CPU::displayFeatures()>:
c0018e6c:	53                   	push   ebx
c0018e6d:	83 ec 10             	sub    esp,0x10
c0018e70:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e74:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e7a:	68 6c b6 02 c0       	push   0xc002b66c
c0018e7f:	e8 d6 a0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018e84:	59                   	pop    ecx
c0018e85:	58                   	pop    eax
c0018e86:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e8c:	50                   	push   eax
c0018e8d:	68 7d b6 02 c0       	push   0xc002b67d
c0018e92:	e8 c3 a0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018e97:	58                   	pop    eax
c0018e98:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e9e:	5a                   	pop    edx
c0018e9f:	c1 e8 0e             	shr    eax,0xe
c0018ea2:	0f b6 c0             	movzx  eax,al
c0018ea5:	50                   	push   eax
c0018ea6:	68 8e b6 02 c0       	push   0xc002b68e
c0018eab:	e8 aa a0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018eb0:	59                   	pop    ecx
c0018eb1:	58                   	pop    eax
c0018eb2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eb8:	66 c1 e8 06          	shr    ax,0x6
c0018ebc:	0f b6 c0             	movzx  eax,al
c0018ebf:	50                   	push   eax
c0018ec0:	68 9f b6 02 c0       	push   0xc002b69f
c0018ec5:	e8 90 a0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018eca:	c7 04 24 4c bb 02 c0 	mov    DWORD PTR [esp],0xc002bb4c
c0018ed1:	e8 84 a0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018ed6:	83 c4 10             	add    esp,0x10
c0018ed9:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018ede:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018ee5:	74 05                	je     c0018eec <CPU::displayFeatures()+0x80>
c0018ee7:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018eec:	52                   	push   edx
c0018eed:	52                   	push   edx
c0018eee:	50                   	push   eax
c0018eef:	68 b0 b6 02 c0       	push   0xc002b6b0
c0018ef4:	e8 61 a0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018ef9:	83 c4 10             	add    esp,0x10
c0018efc:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f01:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f08:	78 05                	js     c0018f0f <CPU::displayFeatures()+0xa3>
c0018f0a:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f0f:	51                   	push   ecx
c0018f10:	51                   	push   ecx
c0018f11:	50                   	push   eax
c0018f12:	68 c7 b6 02 c0       	push   0xc002b6c7
c0018f17:	e8 3e a0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018f1c:	83 c4 10             	add    esp,0x10
c0018f1f:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f24:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f2b:	75 05                	jne    c0018f32 <CPU::displayFeatures()+0xc6>
c0018f2d:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f32:	52                   	push   edx
c0018f33:	52                   	push   edx
c0018f34:	50                   	push   eax
c0018f35:	68 de b6 02 c0       	push   0xc002b6de
c0018f3a:	e8 1b a0 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018f3f:	83 c4 10             	add    esp,0x10
c0018f42:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f47:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f4e:	75 05                	jne    c0018f55 <CPU::displayFeatures()+0xe9>
c0018f50:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f55:	51                   	push   ecx
c0018f56:	51                   	push   ecx
c0018f57:	50                   	push   eax
c0018f58:	68 f5 b6 02 c0       	push   0xc002b6f5
c0018f5d:	e8 f8 9f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018f62:	83 c4 10             	add    esp,0x10
c0018f65:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f6a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f71:	75 05                	jne    c0018f78 <CPU::displayFeatures()+0x10c>
c0018f73:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f78:	52                   	push   edx
c0018f79:	52                   	push   edx
c0018f7a:	50                   	push   eax
c0018f7b:	68 0c b7 02 c0       	push   0xc002b70c
c0018f80:	e8 d5 9f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018f85:	83 c4 10             	add    esp,0x10
c0018f88:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f8d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f94:	75 05                	jne    c0018f9b <CPU::displayFeatures()+0x12f>
c0018f96:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f9b:	51                   	push   ecx
c0018f9c:	51                   	push   ecx
c0018f9d:	50                   	push   eax
c0018f9e:	68 23 b7 02 c0       	push   0xc002b723
c0018fa3:	e8 b2 9f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018fa8:	83 c4 10             	add    esp,0x10
c0018fab:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018fb0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018fb7:	75 05                	jne    c0018fbe <CPU::displayFeatures()+0x152>
c0018fb9:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018fbe:	52                   	push   edx
c0018fbf:	52                   	push   edx
c0018fc0:	50                   	push   eax
c0018fc1:	68 3a b7 02 c0       	push   0xc002b73a
c0018fc6:	e8 8f 9f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018fcb:	83 c4 10             	add    esp,0x10
c0018fce:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018fd3:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fda:	75 05                	jne    c0018fe1 <CPU::displayFeatures()+0x175>
c0018fdc:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018fe1:	51                   	push   ecx
c0018fe2:	51                   	push   ecx
c0018fe3:	50                   	push   eax
c0018fe4:	68 51 b7 02 c0       	push   0xc002b751
c0018fe9:	e8 6c 9f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0018fee:	83 c4 10             	add    esp,0x10
c0018ff1:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018ff6:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018ffd:	75 05                	jne    c0019004 <CPU::displayFeatures()+0x198>
c0018fff:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0019004:	52                   	push   edx
c0019005:	52                   	push   edx
c0019006:	50                   	push   eax
c0019007:	68 68 b7 02 c0       	push   0xc002b768
c001900c:	e8 49 9f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0019011:	83 c4 10             	add    esp,0x10
c0019014:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0019019:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019020:	75 05                	jne    c0019027 <CPU::displayFeatures()+0x1bb>
c0019022:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0019027:	51                   	push   ecx
c0019028:	51                   	push   ecx
c0019029:	50                   	push   eax
c001902a:	68 7f b7 02 c0       	push   0xc002b77f
c001902f:	e8 26 9f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0019034:	83 c4 10             	add    esp,0x10
c0019037:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c001903c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019043:	75 05                	jne    c001904a <CPU::displayFeatures()+0x1de>
c0019045:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c001904a:	52                   	push   edx
c001904b:	52                   	push   edx
c001904c:	50                   	push   eax
c001904d:	68 96 b7 02 c0       	push   0xc002b796
c0019052:	e8 03 9f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0019057:	83 c4 10             	add    esp,0x10
c001905a:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c001905f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019066:	75 05                	jne    c001906d <CPU::displayFeatures()+0x201>
c0019068:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c001906d:	51                   	push   ecx
c001906e:	51                   	push   ecx
c001906f:	50                   	push   eax
c0019070:	68 ad b7 02 c0       	push   0xc002b7ad
c0019075:	e8 e0 9e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001907a:	83 c4 10             	add    esp,0x10
c001907d:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0019082:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019089:	75 05                	jne    c0019090 <CPU::displayFeatures()+0x224>
c001908b:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0019090:	52                   	push   edx
c0019091:	52                   	push   edx
c0019092:	50                   	push   eax
c0019093:	68 c4 b7 02 c0       	push   0xc002b7c4
c0019098:	e8 bd 9e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001909d:	83 c4 10             	add    esp,0x10
c00190a0:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c00190a5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190ac:	78 05                	js     c00190b3 <CPU::displayFeatures()+0x247>
c00190ae:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c00190b3:	51                   	push   ecx
c00190b4:	51                   	push   ecx
c00190b5:	50                   	push   eax
c00190b6:	68 db b7 02 c0       	push   0xc002b7db
c00190bb:	e8 9a 9e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00190c0:	83 c4 10             	add    esp,0x10
c00190c3:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c00190c8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190cf:	75 05                	jne    c00190d6 <CPU::displayFeatures()+0x26a>
c00190d1:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c00190d6:	52                   	push   edx
c00190d7:	52                   	push   edx
c00190d8:	50                   	push   eax
c00190d9:	68 f2 b7 02 c0       	push   0xc002b7f2
c00190de:	e8 77 9e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00190e3:	83 c4 18             	add    esp,0x18
c00190e6:	5b                   	pop    ebx
c00190e7:	c3                   	ret    

c00190e8 <CPU::detectFeatures()>:
c00190e8:	55                   	push   ebp
c00190e9:	57                   	push   edi
c00190ea:	56                   	push   esi
c00190eb:	53                   	push   ebx
c00190ec:	83 ec 50             	sub    esp,0x50
c00190ef:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190f3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190fd:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019104:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001910a:	6a 0d                	push   0xd
c001910c:	6a 00                	push   0x0
c001910e:	57                   	push   edi
c001910f:	e8 64 76 fe ff       	call   c0000778 <memset>
c0019114:	83 c4 10             	add    esp,0x10
c0019117:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001911c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019123:	0f 84 20 09 00 00    	je     c0019a49 <CPU::detectFeatures()+0x961>
c0019129:	83 ec 0c             	sub    esp,0xc
c001912c:	6a 10                	push   0x10
c001912e:	e8 f3 fb ff ff       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c0019133:	83 e0 01             	and    eax,0x1
c0019136:	8d 14 00             	lea    edx,[eax+eax*1]
c0019139:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001913f:	83 e0 fd             	and    eax,0xfffffffd
c0019142:	09 d0                	or     eax,edx
c0019144:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001914a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019151:	e8 d0 fb ff ff       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c0019156:	83 e0 01             	and    eax,0x1
c0019159:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019160:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019166:	83 e0 fb             	and    eax,0xfffffffb
c0019169:	09 d0                	or     eax,edx
c001916b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019171:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019178:	e8 a9 fb ff ff       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c001917d:	83 e0 01             	and    eax,0x1
c0019180:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019187:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001918d:	83 e0 f7             	and    eax,0xfffffff7
c0019190:	09 d0                	or     eax,edx
c0019192:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019198:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001919f:	e8 82 fb ff ff       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c00191a4:	83 e0 01             	and    eax,0x1
c00191a7:	c1 e0 04             	shl    eax,0x4
c00191aa:	88 c2                	mov    dl,al
c00191ac:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191b2:	83 e0 ef             	and    eax,0xffffffef
c00191b5:	09 d0                	or     eax,edx
c00191b7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191bd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191c4:	e8 5d fb ff ff       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c00191c9:	83 e0 01             	and    eax,0x1
c00191cc:	c1 e0 05             	shl    eax,0x5
c00191cf:	88 c2                	mov    dl,al
c00191d1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191d7:	83 e0 df             	and    eax,0xffffffdf
c00191da:	09 d0                	or     eax,edx
c00191dc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191e9:	e8 38 fb ff ff       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c00191ee:	83 e0 01             	and    eax,0x1
c00191f1:	8d 14 00             	lea    edx,[eax+eax*1]
c00191f4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191fa:	83 e0 fd             	and    eax,0xfffffffd
c00191fd:	09 d0                	or     eax,edx
c00191ff:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019205:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001920c:	e8 15 fb ff ff       	call   c0018d26 <CPU::cpuidCheckEDX(unsigned int)>
c0019211:	83 e0 01             	and    eax,0x1
c0019214:	c1 e0 06             	shl    eax,0x6
c0019217:	88 c2                	mov    dl,al
c0019219:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001921f:	83 e0 bf             	and    eax,0xffffffbf
c0019222:	09 d0                	or     eax,edx
c0019224:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001922a:	58                   	pop    eax
c001922b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001922f:	56                   	push   esi
c0019230:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019234:	55                   	push   ebp
c0019235:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019239:	50                   	push   eax
c001923a:	8d 54 24 28          	lea    edx,[esp+0x28]
c001923e:	52                   	push   edx
c001923f:	6a 00                	push   0x0
c0019241:	e8 5c fa ff ff       	call   c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019246:	83 c4 1c             	add    esp,0x1c
c0019249:	6a 04                	push   0x4
c001924b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001924f:	50                   	push   eax
c0019250:	57                   	push   edi
c0019251:	e8 ee 74 fe ff       	call   c0000744 <memcpy>
c0019256:	83 c4 0c             	add    esp,0xc
c0019259:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001925f:	6a 04                	push   0x4
c0019261:	56                   	push   esi
c0019262:	50                   	push   eax
c0019263:	e8 dc 74 fe ff       	call   c0000744 <memcpy>
c0019268:	83 c4 0c             	add    esp,0xc
c001926b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019271:	6a 04                	push   0x4
c0019273:	55                   	push   ebp
c0019274:	50                   	push   eax
c0019275:	e8 ca 74 fe ff       	call   c0000744 <memcpy>
c001927a:	58                   	pop    eax
c001927b:	5a                   	pop    edx
c001927c:	68 09 b8 02 c0       	push   0xc002b809
c0019281:	57                   	push   edi
c0019282:	e8 39 76 fe ff       	call   c00008c0 <strcmp>
c0019287:	83 c4 10             	add    esp,0x10
c001928a:	85 c0                	test   eax,eax
c001928c:	75 0f                	jne    c001929d <CPU::detectFeatures()+0x1b5>
c001928e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019298:	e9 22 02 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c001929d:	50                   	push   eax
c001929e:	50                   	push   eax
c001929f:	68 16 b8 02 c0       	push   0xc002b816
c00192a4:	57                   	push   edi
c00192a5:	e8 16 76 fe ff       	call   c00008c0 <strcmp>
c00192aa:	83 c4 10             	add    esp,0x10
c00192ad:	85 c0                	test   eax,eax
c00192af:	74 dd                	je     c001928e <CPU::detectFeatures()+0x1a6>
c00192b1:	51                   	push   ecx
c00192b2:	51                   	push   ecx
c00192b3:	68 23 b8 02 c0       	push   0xc002b823
c00192b8:	57                   	push   edi
c00192b9:	e8 02 76 fe ff       	call   c00008c0 <strcmp>
c00192be:	83 c4 10             	add    esp,0x10
c00192c1:	85 c0                	test   eax,eax
c00192c3:	74 2a                	je     c00192ef <CPU::detectFeatures()+0x207>
c00192c5:	52                   	push   edx
c00192c6:	52                   	push   edx
c00192c7:	68 30 b8 02 c0       	push   0xc002b830
c00192cc:	57                   	push   edi
c00192cd:	e8 ee 75 fe ff       	call   c00008c0 <strcmp>
c00192d2:	83 c4 10             	add    esp,0x10
c00192d5:	85 c0                	test   eax,eax
c00192d7:	74 16                	je     c00192ef <CPU::detectFeatures()+0x207>
c00192d9:	50                   	push   eax
c00192da:	50                   	push   eax
c00192db:	68 3d b8 02 c0       	push   0xc002b83d
c00192e0:	57                   	push   edi
c00192e1:	e8 da 75 fe ff       	call   c00008c0 <strcmp>
c00192e6:	83 c4 10             	add    esp,0x10
c00192e9:	85 c0                	test   eax,eax
c00192eb:	74 48                	je     c0019335 <CPU::detectFeatures()+0x24d>
c00192ed:	eb 0f                	jmp    c00192fe <CPU::detectFeatures()+0x216>
c00192ef:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192f9:	e9 c1 01 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c00192fe:	50                   	push   eax
c00192ff:	50                   	push   eax
c0019300:	68 4a b8 02 c0       	push   0xc002b84a
c0019305:	57                   	push   edi
c0019306:	e8 b5 75 fe ff       	call   c00008c0 <strcmp>
c001930b:	83 c4 10             	add    esp,0x10
c001930e:	85 c0                	test   eax,eax
c0019310:	74 23                	je     c0019335 <CPU::detectFeatures()+0x24d>
c0019312:	50                   	push   eax
c0019313:	50                   	push   eax
c0019314:	68 57 b8 02 c0       	push   0xc002b857
c0019319:	57                   	push   edi
c001931a:	e8 a1 75 fe ff       	call   c00008c0 <strcmp>
c001931f:	83 c4 10             	add    esp,0x10
c0019322:	85 c0                	test   eax,eax
c0019324:	75 1e                	jne    c0019344 <CPU::detectFeatures()+0x25c>
c0019326:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019330:	e9 8a 01 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c0019335:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001933f:	e9 7b 01 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c0019344:	50                   	push   eax
c0019345:	50                   	push   eax
c0019346:	68 64 b8 02 c0       	push   0xc002b864
c001934b:	57                   	push   edi
c001934c:	e8 6f 75 fe ff       	call   c00008c0 <strcmp>
c0019351:	83 c4 10             	add    esp,0x10
c0019354:	85 c0                	test   eax,eax
c0019356:	75 0f                	jne    c0019367 <CPU::detectFeatures()+0x27f>
c0019358:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019362:	e9 58 01 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c0019367:	50                   	push   eax
c0019368:	50                   	push   eax
c0019369:	68 23 b8 02 c0       	push   0xc002b823
c001936e:	57                   	push   edi
c001936f:	e8 4c 75 fe ff       	call   c00008c0 <strcmp>
c0019374:	83 c4 10             	add    esp,0x10
c0019377:	85 c0                	test   eax,eax
c0019379:	75 0f                	jne    c001938a <CPU::detectFeatures()+0x2a2>
c001937b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019385:	e9 35 01 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c001938a:	50                   	push   eax
c001938b:	50                   	push   eax
c001938c:	68 71 b8 02 c0       	push   0xc002b871
c0019391:	57                   	push   edi
c0019392:	e8 29 75 fe ff       	call   c00008c0 <strcmp>
c0019397:	83 c4 10             	add    esp,0x10
c001939a:	85 c0                	test   eax,eax
c001939c:	75 0f                	jne    c00193ad <CPU::detectFeatures()+0x2c5>
c001939e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193a8:	e9 12 01 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c00193ad:	51                   	push   ecx
c00193ae:	51                   	push   ecx
c00193af:	68 7e b8 02 c0       	push   0xc002b87e
c00193b4:	57                   	push   edi
c00193b5:	e8 06 75 fe ff       	call   c00008c0 <strcmp>
c00193ba:	83 c4 10             	add    esp,0x10
c00193bd:	85 c0                	test   eax,eax
c00193bf:	75 0f                	jne    c00193d0 <CPU::detectFeatures()+0x2e8>
c00193c1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193cb:	e9 ef 00 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c00193d0:	52                   	push   edx
c00193d1:	52                   	push   edx
c00193d2:	68 8b b8 02 c0       	push   0xc002b88b
c00193d7:	57                   	push   edi
c00193d8:	e8 e3 74 fe ff       	call   c00008c0 <strcmp>
c00193dd:	83 c4 10             	add    esp,0x10
c00193e0:	85 c0                	test   eax,eax
c00193e2:	75 0f                	jne    c00193f3 <CPU::detectFeatures()+0x30b>
c00193e4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193ee:	e9 cc 00 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c00193f3:	50                   	push   eax
c00193f4:	50                   	push   eax
c00193f5:	68 98 b8 02 c0       	push   0xc002b898
c00193fa:	57                   	push   edi
c00193fb:	e8 c0 74 fe ff       	call   c00008c0 <strcmp>
c0019400:	83 c4 10             	add    esp,0x10
c0019403:	85 c0                	test   eax,eax
c0019405:	75 0f                	jne    c0019416 <CPU::detectFeatures()+0x32e>
c0019407:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019411:	e9 a9 00 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c0019416:	50                   	push   eax
c0019417:	50                   	push   eax
c0019418:	68 a5 b8 02 c0       	push   0xc002b8a5
c001941d:	57                   	push   edi
c001941e:	e8 9d 74 fe ff       	call   c00008c0 <strcmp>
c0019423:	83 c4 10             	add    esp,0x10
c0019426:	85 c0                	test   eax,eax
c0019428:	75 0f                	jne    c0019439 <CPU::detectFeatures()+0x351>
c001942a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019434:	e9 86 00 00 00       	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c0019439:	50                   	push   eax
c001943a:	50                   	push   eax
c001943b:	68 b2 b8 02 c0       	push   0xc002b8b2
c0019440:	57                   	push   edi
c0019441:	e8 7a 74 fe ff       	call   c00008c0 <strcmp>
c0019446:	83 c4 10             	add    esp,0x10
c0019449:	85 c0                	test   eax,eax
c001944b:	75 0c                	jne    c0019459 <CPU::detectFeatures()+0x371>
c001944d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019457:	eb 66                	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c0019459:	50                   	push   eax
c001945a:	50                   	push   eax
c001945b:	68 bf b8 02 c0       	push   0xc002b8bf
c0019460:	57                   	push   edi
c0019461:	e8 5a 74 fe ff       	call   c00008c0 <strcmp>
c0019466:	83 c4 10             	add    esp,0x10
c0019469:	85 c0                	test   eax,eax
c001946b:	75 0c                	jne    c0019479 <CPU::detectFeatures()+0x391>
c001946d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019477:	eb 46                	jmp    c00194bf <CPU::detectFeatures()+0x3d7>
c0019479:	50                   	push   eax
c001947a:	50                   	push   eax
c001947b:	68 cc b8 02 c0       	push   0xc002b8cc
c0019480:	57                   	push   edi
c0019481:	e8 3a 74 fe ff       	call   c00008c0 <strcmp>
c0019486:	83 c4 10             	add    esp,0x10
c0019489:	85 c0                	test   eax,eax
c001948b:	74 e0                	je     c001946d <CPU::detectFeatures()+0x385>
c001948d:	50                   	push   eax
c001948e:	50                   	push   eax
c001948f:	68 d9 b8 02 c0       	push   0xc002b8d9
c0019494:	57                   	push   edi
c0019495:	e8 26 74 fe ff       	call   c00008c0 <strcmp>
c001949a:	83 c4 10             	add    esp,0x10
c001949d:	85 c0                	test   eax,eax
c001949f:	74 cc                	je     c001946d <CPU::detectFeatures()+0x385>
c00194a1:	51                   	push   ecx
c00194a2:	51                   	push   ecx
c00194a3:	68 e6 b8 02 c0       	push   0xc002b8e6
c00194a8:	57                   	push   edi
c00194a9:	e8 12 74 fe ff       	call   c00008c0 <strcmp>
c00194ae:	83 c4 10             	add    esp,0x10
c00194b1:	85 c0                	test   eax,eax
c00194b3:	74 b8                	je     c001946d <CPU::detectFeatures()+0x385>
c00194b5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194bf:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194c4:	0f 86 be 00 00 00    	jbe    c0019588 <CPU::detectFeatures()+0x4a0>
c00194ca:	83 ec 0c             	sub    esp,0xc
c00194cd:	68 80 00 00 00       	push   0x80
c00194d2:	e8 ab f8 ff ff       	call   c0018d82 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194d7:	83 e0 01             	and    eax,0x1
c00194da:	c1 e0 06             	shl    eax,0x6
c00194dd:	88 c2                	mov    dl,al
c00194df:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194e5:	83 e0 bf             	and    eax,0xffffffbf
c00194e8:	09 d0                	or     eax,edx
c00194ea:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194f0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194f7:	e8 86 f8 ff ff       	call   c0018d82 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194fc:	83 e0 01             	and    eax,0x1
c00194ff:	c1 e0 04             	shl    eax,0x4
c0019502:	88 c2                	mov    dl,al
c0019504:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001950a:	83 e0 ef             	and    eax,0xffffffef
c001950d:	09 d0                	or     eax,edx
c001950f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019515:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001951c:	e8 61 f8 ff ff       	call   c0018d82 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019521:	c1 e0 07             	shl    eax,0x7
c0019524:	88 c2                	mov    dl,al
c0019526:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001952c:	83 e0 7f             	and    eax,0x7f
c001952f:	09 d0                	or     eax,edx
c0019531:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019537:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001953e:	e8 6d f8 ff ff       	call   c0018db0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019543:	83 e0 01             	and    eax,0x1
c0019546:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001954d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019553:	83 e0 f7             	and    eax,0xfffffff7
c0019556:	09 d0                	or     eax,edx
c0019558:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001955e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019565:	e8 46 f8 ff ff       	call   c0018db0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001956a:	83 c4 10             	add    esp,0x10
c001956d:	83 e0 01             	and    eax,0x1
c0019570:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019577:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001957d:	83 e0 fb             	and    eax,0xfffffffb
c0019580:	09 d0                	or     eax,edx
c0019582:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019588:	83 ec 0c             	sub    esp,0xc
c001958b:	56                   	push   esi
c001958c:	55                   	push   ebp
c001958d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019591:	57                   	push   edi
c0019592:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019596:	50                   	push   eax
c0019597:	6a 01                	push   0x1
c0019599:	e8 04 f7 ff ff       	call   c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001959e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00195a2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195a8:	88 ca                	mov    dl,cl
c00195aa:	83 e0 f0             	and    eax,0xfffffff0
c00195ad:	83 e2 0f             	and    edx,0xf
c00195b0:	09 d0                	or     eax,edx
c00195b2:	88 ca                	mov    dl,cl
c00195b4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195ba:	c0 ea 04             	shr    dl,0x4
c00195bd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195c1:	0f b6 c2             	movzx  eax,dl
c00195c4:	83 c4 20             	add    esp,0x20
c00195c7:	c1 e0 06             	shl    eax,0x6
c00195ca:	89 c5                	mov    ebp,eax
c00195cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195d2:	66 25 3f c0          	and    ax,0xc03f
c00195d6:	09 e8                	or     eax,ebp
c00195d8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195df:	89 c8                	mov    eax,ecx
c00195e1:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195e7:	c1 e8 08             	shr    eax,0x8
c00195ea:	83 e2 3f             	and    edx,0x3f
c00195ed:	83 e0 0f             	and    eax,0xf
c00195f0:	89 c5                	mov    ebp,eax
c00195f2:	c1 e5 06             	shl    ebp,0x6
c00195f5:	09 d5                	or     ebp,edx
c00195f7:	89 ea                	mov    edx,ebp
c00195f9:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195ff:	88 c2                	mov    dl,al
c0019601:	c0 ea 02             	shr    dl,0x2
c0019604:	89 d5                	mov    ebp,edx
c0019606:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001960c:	83 e2 c0             	and    edx,0xffffffc0
c001960f:	09 d5                	or     ebp,edx
c0019611:	89 ea                	mov    edx,ebp
c0019613:	89 cd                	mov    ebp,ecx
c0019615:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001961b:	c1 ed 0c             	shr    ebp,0xc
c001961e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019624:	83 e5 03             	and    ebp,0x3
c0019627:	83 e2 cf             	and    edx,0xffffffcf
c001962a:	c1 e5 04             	shl    ebp,0x4
c001962d:	09 d5                	or     ebp,edx
c001962f:	3c 06                	cmp    al,0x6
c0019631:	89 ea                	mov    edx,ebp
c0019633:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019639:	74 04                	je     c001963f <CPU::detectFeatures()+0x557>
c001963b:	3c 0f                	cmp    al,0xf
c001963d:	75 5c                	jne    c001969b <CPU::detectFeatures()+0x5b3>
c001963f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019643:	89 cd                	mov    ebp,ecx
c0019645:	c1 ed 10             	shr    ebp,0x10
c0019648:	c1 e5 04             	shl    ebp,0x4
c001964b:	09 ea                	or     edx,ebp
c001964d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019653:	0f b6 d2             	movzx  edx,dl
c0019656:	66 81 e5 3f c0       	and    bp,0xc03f
c001965b:	c1 e2 06             	shl    edx,0x6
c001965e:	09 ea                	or     edx,ebp
c0019660:	3c 0f                	cmp    al,0xf
c0019662:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019669:	75 30                	jne    c001969b <CPU::detectFeatures()+0x5b3>
c001966b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019671:	c1 e9 14             	shr    ecx,0x14
c0019674:	83 e0 3f             	and    eax,0x3f
c0019677:	83 c1 0f             	add    ecx,0xf
c001967a:	88 ca                	mov    dl,cl
c001967c:	c0 e9 02             	shr    cl,0x2
c001967f:	c1 e2 06             	shl    edx,0x6
c0019682:	09 d0                	or     eax,edx
c0019684:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001968a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019690:	83 e0 c0             	and    eax,0xffffffc0
c0019693:	09 c1                	or     ecx,eax
c0019695:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001969b:	83 ec 0c             	sub    esp,0xc
c001969e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196a5:	56                   	push   esi
c00196a6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196aa:	50                   	push   eax
c00196ab:	57                   	push   edi
c00196ac:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196b0:	55                   	push   ebp
c00196b1:	68 00 00 00 80       	push   0x80000000
c00196b6:	e8 e7 f5 ff ff       	call   c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196bb:	83 c4 20             	add    esp,0x20
c00196be:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196ca:	76 1e                	jbe    c00196ea <CPU::detectFeatures()+0x602>
c00196cc:	83 ec 0c             	sub    esp,0xc
c00196cf:	56                   	push   esi
c00196d0:	50                   	push   eax
c00196d1:	57                   	push   edi
c00196d2:	55                   	push   ebp
c00196d3:	68 01 00 00 80       	push   0x80000001
c00196d8:	e8 c5 f5 ff ff       	call   c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196dd:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196e7:	83 c4 20             	add    esp,0x20
c00196ea:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196f0:	83 f8 01             	cmp    eax,0x1
c00196f3:	75 6f                	jne    c0019764 <CPU::detectFeatures()+0x67c>
c00196f5:	51                   	push   ecx
c00196f6:	51                   	push   ecx
c00196f7:	68 f2 b8 02 c0       	push   0xc002b8f2
c00196fc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019700:	56                   	push   esi
c0019701:	e8 2e 71 fe ff       	call   c0000834 <strcpy>
c0019706:	5f                   	pop    edi
c0019707:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001970d:	5d                   	pop    ebp
c001970e:	66 c1 e8 06          	shr    ax,0x6
c0019712:	0f b6 c0             	movzx  eax,al
c0019715:	50                   	push   eax
c0019716:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001971c:	c1 e8 0e             	shr    eax,0xe
c001971f:	0f b6 c0             	movzx  eax,al
c0019722:	50                   	push   eax
c0019723:	e8 24 f2 ff ff       	call   c001894c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019728:	5a                   	pop    edx
c0019729:	59                   	pop    ecx
c001972a:	50                   	push   eax
c001972b:	56                   	push   esi
c001972c:	e8 43 72 fe ff       	call   c0000974 <strcat>
c0019731:	5f                   	pop    edi
c0019732:	5d                   	pop    ebp
c0019733:	56                   	push   esi
c0019734:	53                   	push   ebx
c0019735:	e8 28 ae ff ff       	call   c0014562 <Device::setName(char const*)>
c001973a:	58                   	pop    eax
c001973b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019741:	5a                   	pop    edx
c0019742:	68 f9 b8 02 c0       	push   0xc002b8f9
c0019747:	50                   	push   eax
c0019748:	e8 73 71 fe ff       	call   c00008c0 <strcmp>
c001974d:	83 c4 10             	add    esp,0x10
c0019750:	85 c0                	test   eax,eax
c0019752:	0f 85 71 03 00 00    	jne    c0019ac9 <CPU::detectFeatures()+0x9e1>
c0019758:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001975f:	e9 65 03 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x9e1>
c0019764:	83 f8 02             	cmp    eax,0x2
c0019767:	0f 85 b5 00 00 00    	jne    c0019822 <CPU::detectFeatures()+0x73a>
c001976d:	57                   	push   edi
c001976e:	57                   	push   edi
c001976f:	68 0b b9 02 c0       	push   0xc002b90b
c0019774:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019778:	56                   	push   esi
c0019779:	e8 b6 70 fe ff       	call   c0000834 <strcpy>
c001977e:	5d                   	pop    ebp
c001977f:	58                   	pop    eax
c0019780:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019786:	66 c1 e8 06          	shr    ax,0x6
c001978a:	0f b6 c0             	movzx  eax,al
c001978d:	50                   	push   eax
c001978e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019794:	c1 e8 0e             	shr    eax,0xe
c0019797:	0f b6 c0             	movzx  eax,al
c001979a:	50                   	push   eax
c001979b:	e8 18 f0 ff ff       	call   c00187b8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197a0:	5a                   	pop    edx
c00197a1:	59                   	pop    ecx
c00197a2:	50                   	push   eax
c00197a3:	56                   	push   esi
c00197a4:	e8 cb 71 fe ff       	call   c0000974 <strcat>
c00197a9:	5f                   	pop    edi
c00197aa:	5d                   	pop    ebp
c00197ab:	56                   	push   esi
c00197ac:	53                   	push   ebx
c00197ad:	e8 b0 ad ff ff       	call   c0014562 <Device::setName(char const*)>
c00197b2:	58                   	pop    eax
c00197b3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197b9:	5a                   	pop    edx
c00197ba:	68 10 b9 02 c0       	push   0xc002b910
c00197bf:	50                   	push   eax
c00197c0:	e8 fb 70 fe ff       	call   c00008c0 <strcmp>
c00197c5:	83 c4 10             	add    esp,0x10
c00197c8:	85 c0                	test   eax,eax
c00197ca:	75 20                	jne    c00197ec <CPU::detectFeatures()+0x704>
c00197cc:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c00197d2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197d8:	a8 01                	test   al,0x1
c00197da:	74 10                	je     c00197ec <CPU::detectFeatures()+0x704>
c00197dc:	83 e0 fe             	and    eax,0xfffffffe
c00197df:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197e5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197ec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197f2:	c1 e8 0e             	shr    eax,0xe
c00197f5:	3c 05                	cmp    al,0x5
c00197f7:	0f 85 cc 02 00 00    	jne    c0019ac9 <CPU::detectFeatures()+0x9e1>
c00197fd:	56                   	push   esi
c00197fe:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019804:	83 e0 0f             	and    eax,0xf
c0019807:	50                   	push   eax
c0019808:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001980e:	66 c1 e8 06          	shr    ax,0x6
c0019812:	0f b6 c0             	movzx  eax,al
c0019815:	50                   	push   eax
c0019816:	6a 05                	push   0x5
c0019818:	e8 11 f4 ff ff       	call   c0018c2e <CPU::AMD_K6_writeback(int, int, int)>
c001981d:	e9 1f 02 00 00       	jmp    c0019a41 <CPU::detectFeatures()+0x959>
c0019822:	8d 50 fd             	lea    edx,[eax-0x3]
c0019825:	83 fa 01             	cmp    edx,0x1
c0019828:	76 09                	jbe    c0019833 <CPU::detectFeatures()+0x74b>
c001982a:	83 f8 06             	cmp    eax,0x6
c001982d:	0f 85 91 01 00 00    	jne    c00199c4 <CPU::detectFeatures()+0x8dc>
c0019833:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019839:	c1 ea 0e             	shr    edx,0xe
c001983c:	80 fa 05             	cmp    dl,0x5
c001983f:	75 7b                	jne    c00198bc <CPU::detectFeatures()+0x7d4>
c0019841:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019847:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001984c:	66 81 fa 00 01       	cmp    dx,0x100
c0019851:	75 0c                	jne    c001985f <CPU::detectFeatures()+0x777>
c0019853:	51                   	push   ecx
c0019854:	51                   	push   ecx
c0019855:	68 17 b9 02 c0       	push   0xc002b917
c001985a:	e9 dc 01 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c001985f:	66 81 fa 00 02       	cmp    dx,0x200
c0019864:	75 0c                	jne    c0019872 <CPU::detectFeatures()+0x78a>
c0019866:	52                   	push   edx
c0019867:	52                   	push   edx
c0019868:	68 2a b9 02 c0       	push   0xc002b92a
c001986d:	e9 c9 01 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c0019872:	66 81 fa 40 02       	cmp    dx,0x240
c0019877:	75 0c                	jne    c0019885 <CPU::detectFeatures()+0x79d>
c0019879:	50                   	push   eax
c001987a:	50                   	push   eax
c001987b:	68 3c b9 02 c0       	push   0xc002b93c
c0019880:	e9 b6 01 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c0019885:	83 f8 06             	cmp    eax,0x6
c0019888:	75 0c                	jne    c0019896 <CPU::detectFeatures()+0x7ae>
c001988a:	50                   	push   eax
c001988b:	50                   	push   eax
c001988c:	68 4e b9 02 c0       	push   0xc002b94e
c0019891:	e9 a5 01 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c0019896:	83 f8 04             	cmp    eax,0x4
c0019899:	75 0c                	jne    c00198a7 <CPU::detectFeatures()+0x7bf>
c001989b:	50                   	push   eax
c001989c:	50                   	push   eax
c001989d:	68 5a b9 02 c0       	push   0xc002b95a
c00198a2:	e9 94 01 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c00198a7:	83 f8 03             	cmp    eax,0x3
c00198aa:	0f 85 19 02 00 00    	jne    c0019ac9 <CPU::detectFeatures()+0x9e1>
c00198b0:	50                   	push   eax
c00198b1:	50                   	push   eax
c00198b2:	68 62 b9 02 c0       	push   0xc002b962
c00198b7:	e9 7f 01 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c00198bc:	80 fa 06             	cmp    dl,0x6
c00198bf:	0f 85 db 00 00 00    	jne    c00199a0 <CPU::detectFeatures()+0x8b8>
c00198c5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198cb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198d0:	66 81 fa 80 01       	cmp    dx,0x180
c00198d5:	75 0c                	jne    c00198e3 <CPU::detectFeatures()+0x7fb>
c00198d7:	50                   	push   eax
c00198d8:	50                   	push   eax
c00198d9:	68 6d b9 02 c0       	push   0xc002b96d
c00198de:	e9 58 01 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c00198e3:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198e9:	66 f7 c1 80 ff       	test   cx,0xff80
c00198ee:	75 0c                	jne    c00198fc <CPU::detectFeatures()+0x814>
c00198f0:	50                   	push   eax
c00198f1:	50                   	push   eax
c00198f2:	68 7d b9 02 c0       	push   0xc002b97d
c00198f7:	e9 3f 01 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c00198fc:	66 81 fa 40 02       	cmp    dx,0x240
c0019901:	75 0c                	jne    c001990f <CPU::detectFeatures()+0x827>
c0019903:	55                   	push   ebp
c0019904:	55                   	push   ebp
c0019905:	68 84 b9 02 c0       	push   0xc002b984
c001990a:	e9 2c 01 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c001990f:	66 81 fa 80 02       	cmp    dx,0x280
c0019914:	75 0c                	jne    c0019922 <CPU::detectFeatures()+0x83a>
c0019916:	57                   	push   edi
c0019917:	57                   	push   edi
c0019918:	68 8d b9 02 c0       	push   0xc002b98d
c001991d:	e9 19 01 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c0019922:	66 81 fa 40 03       	cmp    dx,0x340
c0019927:	74 ed                	je     c0019916 <CPU::detectFeatures()+0x82e>
c0019929:	66 81 fa c0 03       	cmp    dx,0x3c0
c001992e:	75 0c                	jne    c001993c <CPU::detectFeatures()+0x854>
c0019930:	56                   	push   esi
c0019931:	56                   	push   esi
c0019932:	68 94 b9 02 c0       	push   0xc002b994
c0019937:	e9 ff 00 00 00       	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c001993c:	83 f8 06             	cmp    eax,0x6
c001993f:	0f 84 45 ff ff ff    	je     c001988a <CPU::detectFeatures()+0x7a2>
c0019945:	83 f8 04             	cmp    eax,0x4
c0019948:	0f 84 4d ff ff ff    	je     c001989b <CPU::detectFeatures()+0x7b3>
c001994e:	83 f8 03             	cmp    eax,0x3
c0019951:	0f 85 72 01 00 00    	jne    c0019ac9 <CPU::detectFeatures()+0x9e1>
c0019957:	51                   	push   ecx
c0019958:	51                   	push   ecx
c0019959:	68 9d b9 02 c0       	push   0xc002b99d
c001995e:	53                   	push   ebx
c001995f:	e8 fe ab ff ff       	call   c0014562 <Device::setName(char const*)>
c0019964:	b1 c1                	mov    cl,0xc1
c0019966:	88 c8                	mov    al,cl
c0019968:	e6 22                	out    0x22,al
c001996a:	e4 23                	in     al,0x23
c001996c:	88 c2                	mov    dl,al
c001996e:	88 c8                	mov    al,cl
c0019970:	e6 22                	out    0x22,al
c0019972:	88 d0                	mov    al,dl
c0019974:	83 c8 10             	or     eax,0x10
c0019977:	e6 23                	out    0x23,al
c0019979:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019980:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019983:	89 d0                	mov    eax,edx
c0019985:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001998b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001998f:	40                   	inc    eax
c0019990:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019996:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001999b:	e9 a1 00 00 00       	jmp    c0019a41 <CPU::detectFeatures()+0x959>
c00199a0:	83 f8 06             	cmp    eax,0x6
c00199a3:	0f 84 e1 fe ff ff    	je     c001988a <CPU::detectFeatures()+0x7a2>
c00199a9:	83 f8 04             	cmp    eax,0x4
c00199ac:	0f 84 e9 fe ff ff    	je     c001989b <CPU::detectFeatures()+0x7b3>
c00199b2:	83 f8 03             	cmp    eax,0x3
c00199b5:	0f 85 0e 01 00 00    	jne    c0019ac9 <CPU::detectFeatures()+0x9e1>
c00199bb:	52                   	push   edx
c00199bc:	52                   	push   edx
c00199bd:	68 a8 b9 02 c0       	push   0xc002b9a8
c00199c2:	eb 77                	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c00199c4:	83 f8 07             	cmp    eax,0x7
c00199c7:	75 09                	jne    c00199d2 <CPU::detectFeatures()+0x8ea>
c00199c9:	50                   	push   eax
c00199ca:	50                   	push   eax
c00199cb:	68 b2 b9 02 c0       	push   0xc002b9b2
c00199d0:	eb 69                	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c00199d2:	83 f8 0a             	cmp    eax,0xa
c00199d5:	75 09                	jne    c00199e0 <CPU::detectFeatures()+0x8f8>
c00199d7:	50                   	push   eax
c00199d8:	50                   	push   eax
c00199d9:	68 bd b9 02 c0       	push   0xc002b9bd
c00199de:	eb 5b                	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c00199e0:	83 f8 0b             	cmp    eax,0xb
c00199e3:	75 09                	jne    c00199ee <CPU::detectFeatures()+0x906>
c00199e5:	50                   	push   eax
c00199e6:	50                   	push   eax
c00199e7:	68 c5 b9 02 c0       	push   0xc002b9c5
c00199ec:	eb 4d                	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c00199ee:	83 f8 08             	cmp    eax,0x8
c00199f1:	75 09                	jne    c00199fc <CPU::detectFeatures()+0x914>
c00199f3:	50                   	push   eax
c00199f4:	50                   	push   eax
c00199f5:	68 ce b9 02 c0       	push   0xc002b9ce
c00199fa:	eb 3f                	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c00199fc:	83 f8 09             	cmp    eax,0x9
c00199ff:	75 09                	jne    c0019a0a <CPU::detectFeatures()+0x922>
c0019a01:	50                   	push   eax
c0019a02:	50                   	push   eax
c0019a03:	68 d6 b9 02 c0       	push   0xc002b9d6
c0019a08:	eb 31                	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c0019a0a:	83 f8 05             	cmp    eax,0x5
c0019a0d:	75 09                	jne    c0019a18 <CPU::detectFeatures()+0x930>
c0019a0f:	50                   	push   eax
c0019a10:	50                   	push   eax
c0019a11:	68 de b9 02 c0       	push   0xc002b9de
c0019a16:	eb 23                	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c0019a18:	83 f8 0c             	cmp    eax,0xc
c0019a1b:	75 09                	jne    c0019a26 <CPU::detectFeatures()+0x93e>
c0019a1d:	55                   	push   ebp
c0019a1e:	55                   	push   ebp
c0019a1f:	68 ec b9 02 c0       	push   0xc002b9ec
c0019a24:	eb 15                	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c0019a26:	83 f8 0d             	cmp    eax,0xd
c0019a29:	75 09                	jne    c0019a34 <CPU::detectFeatures()+0x94c>
c0019a2b:	57                   	push   edi
c0019a2c:	57                   	push   edi
c0019a2d:	68 f7 b9 02 c0       	push   0xc002b9f7
c0019a32:	eb 07                	jmp    c0019a3b <CPU::detectFeatures()+0x953>
c0019a34:	56                   	push   esi
c0019a35:	56                   	push   esi
c0019a36:	68 0b ba 02 c0       	push   0xc002ba0b
c0019a3b:	53                   	push   ebx
c0019a3c:	e8 21 ab ff ff       	call   c0014562 <Device::setName(char const*)>
c0019a41:	83 c4 10             	add    esp,0x10
c0019a44:	e9 80 00 00 00       	jmp    c0019ac9 <CPU::detectFeatures()+0x9e1>
c0019a49:	51                   	push   ecx
c0019a4a:	51                   	push   ecx
c0019a4b:	68 57 b8 02 c0       	push   0xc002b857
c0019a50:	57                   	push   edi
c0019a51:	e8 de 6d fe ff       	call   c0000834 <strcpy>
c0019a56:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a60:	e8 49 68 fe ff       	call   c00002ae <is486>
c0019a65:	83 c4 10             	add    esp,0x10
c0019a68:	85 c0                	test   eax,eax
c0019a6a:	74 2b                	je     c0019a97 <CPU::detectFeatures()+0x9af>
c0019a6c:	52                   	push   edx
c0019a6d:	52                   	push   edx
c0019a6e:	68 17 ba 02 c0       	push   0xc002ba17
c0019a73:	53                   	push   ebx
c0019a74:	e8 e9 aa ff ff       	call   c0014562 <Device::setName(char const*)>
c0019a79:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a80:	0f 20 c0             	mov    eax,cr0
c0019a83:	83 e0 14             	and    eax,0x14
c0019a86:	83 c4 10             	add    esp,0x10
c0019a89:	83 f8 04             	cmp    eax,0x4
c0019a8c:	75 1f                	jne    c0019aad <CPU::detectFeatures()+0x9c5>
c0019a8e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a95:	eb 32                	jmp    c0019ac9 <CPU::detectFeatures()+0x9e1>
c0019a97:	50                   	push   eax
c0019a98:	50                   	push   eax
c0019a99:	68 22 ba 02 c0       	push   0xc002ba22
c0019a9e:	53                   	push   ebx
c0019a9f:	e8 be aa ff ff       	call   c0014562 <Device::setName(char const*)>
c0019aa4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019aab:	eb d3                	jmp    c0019a80 <CPU::detectFeatures()+0x998>
c0019aad:	e8 d7 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019ab2:	83 e0 01             	and    eax,0x1
c0019ab5:	8d 14 00             	lea    edx,[eax+eax*1]
c0019ab8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019abe:	83 e0 fd             	and    eax,0xfffffffd
c0019ac1:	09 d0                	or     eax,edx
c0019ac3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019ac9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019ad0:	83 c4 4c             	add    esp,0x4c
c0019ad3:	5b                   	pop    ebx
c0019ad4:	5e                   	pop    esi
c0019ad5:	5f                   	pop    edi
c0019ad6:	5d                   	pop    ebp
c0019ad7:	c3                   	ret    

c0019ad8 <CPU::setupSMEP()>:
c0019ad8:	0f 20 e0             	mov    eax,cr4
c0019adb:	0d 00 00 10 00       	or     eax,0x100000
c0019ae0:	0f 22 e0             	mov    cr4,eax
c0019ae3:	c3                   	ret    

c0019ae4 <CPU::setupUMIP()>:
c0019ae4:	0f 20 e0             	mov    eax,cr4
c0019ae7:	80 cc 08             	or     ah,0x8
c0019aea:	0f 22 e0             	mov    cr4,eax
c0019aed:	c3                   	ret    

c0019aee <CPU::setupTSC()>:
c0019aee:	0f 20 e0             	mov    eax,cr4
c0019af1:	83 c8 04             	or     eax,0x4
c0019af4:	0f 22 e0             	mov    cr4,eax
c0019af7:	c3                   	ret    

c0019af8 <CPU::setupLargePages()>:
c0019af8:	0f 20 e0             	mov    eax,cr4
c0019afb:	83 c8 10             	or     eax,0x10
c0019afe:	0f 22 e0             	mov    cr4,eax
c0019b01:	c3                   	ret    

c0019b02 <CPU::setupPAT()>:
c0019b02:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0019b07:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b0e:	74 2c                	je     c0019b3c <CPU::setupPAT()+0x3a>
c0019b10:	53                   	push   ebx
c0019b11:	83 ec 10             	sub    esp,0x10
c0019b14:	68 77 02 00 00       	push   0x277
c0019b19:	50                   	push   eax
c0019b1a:	e8 c9 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b1f:	83 e2 f8             	and    edx,0xfffffff8
c0019b22:	83 ca 01             	or     edx,0x1
c0019b25:	52                   	push   edx
c0019b26:	50                   	push   eax
c0019b27:	68 77 02 00 00       	push   0x277
c0019b2c:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0019b32:	e8 dd 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b37:	83 c4 28             	add    esp,0x28
c0019b3a:	5b                   	pop    ebx
c0019b3b:	c3                   	ret    
c0019b3c:	c3                   	ret    
c0019b3d:	90                   	nop

c0019b3e <CPU::setupMTRR()>:
c0019b3e:	c3                   	ret    
c0019b3f:	90                   	nop

c0019b40 <CPU::setupGlobalPages()>:
c0019b40:	0f 20 e0             	mov    eax,cr4
c0019b43:	0c 80                	or     al,0x80
c0019b45:	0f 22 e0             	mov    cr4,eax
c0019b48:	c3                   	ret    
c0019b49:	90                   	nop

c0019b4a <CPU::allowUsermodeDataAccess()>:
c0019b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b4e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b55:	74 03                	je     c0019b5a <CPU::allowUsermodeDataAccess()+0x10>
c0019b57:	0f 01 cb             	stac   
c0019b5a:	c3                   	ret    
c0019b5b:	90                   	nop

c0019b5c <CPU::prohibitUsermodeDataAccess()>:
c0019b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b60:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b67:	74 03                	je     c0019b6c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b69:	0f 01 ca             	clac   
c0019b6c:	c3                   	ret    
c0019b6d:	90                   	nop

c0019b6e <CPU::setupSMAP()>:
c0019b6e:	0f 20 e0             	mov    eax,cr4
c0019b71:	0d 00 00 20 00       	or     eax,0x200000
c0019b76:	0f 22 e0             	mov    cr4,eax
c0019b79:	eb e1                	jmp    c0019b5c <CPU::prohibitUsermodeDataAccess()>
c0019b7b:	90                   	nop

c0019b7c <CPU::setupFeatures()>:
c0019b7c:	83 ec 0c             	sub    esp,0xc
c0019b7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b83:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b8a:	74 07                	je     c0019b93 <CPU::setupFeatures()+0x17>
c0019b8c:	52                   	push   edx
c0019b8d:	e8 46 ff ff ff       	call   c0019ad8 <CPU::setupSMEP()>
c0019b92:	58                   	pop    eax
c0019b93:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b9a:	74 07                	je     c0019ba3 <CPU::setupFeatures()+0x27>
c0019b9c:	52                   	push   edx
c0019b9d:	e8 cc ff ff ff       	call   c0019b6e <CPU::setupSMAP()>
c0019ba2:	58                   	pop    eax
c0019ba3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019baa:	74 07                	je     c0019bb3 <CPU::setupFeatures()+0x37>
c0019bac:	52                   	push   edx
c0019bad:	e8 32 ff ff ff       	call   c0019ae4 <CPU::setupUMIP()>
c0019bb2:	58                   	pop    eax
c0019bb3:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bba:	74 07                	je     c0019bc3 <CPU::setupFeatures()+0x47>
c0019bbc:	52                   	push   edx
c0019bbd:	e8 2c ff ff ff       	call   c0019aee <CPU::setupTSC()>
c0019bc2:	58                   	pop    eax
c0019bc3:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019bca:	74 07                	je     c0019bd3 <CPU::setupFeatures()+0x57>
c0019bcc:	52                   	push   edx
c0019bcd:	e8 26 ff ff ff       	call   c0019af8 <CPU::setupLargePages()>
c0019bd2:	59                   	pop    ecx
c0019bd3:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019bda:	74 07                	je     c0019be3 <CPU::setupFeatures()+0x67>
c0019bdc:	52                   	push   edx
c0019bdd:	e8 5e ff ff ff       	call   c0019b40 <CPU::setupGlobalPages()>
c0019be2:	58                   	pop    eax
c0019be3:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019bea:	74 0c                	je     c0019bf8 <CPU::setupFeatures()+0x7c>
c0019bec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019bf0:	83 c4 0c             	add    esp,0xc
c0019bf3:	e9 0a ff ff ff       	jmp    c0019b02 <CPU::setupPAT()>
c0019bf8:	83 c4 0c             	add    esp,0xc
c0019bfb:	c3                   	ret    

c0019bfc <CPU::open(int, int, void*)>:
c0019bfc:	57                   	push   edi
c0019bfd:	56                   	push   esi
c0019bfe:	53                   	push   ebx
c0019bff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c07:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c0d:	83 ec 0c             	sub    esp,0xc
c0019c10:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c16:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c1c:	50                   	push   eax
c0019c1d:	e8 b2 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c22:	83 c4 0c             	add    esp,0xc
c0019c25:	6a 00                	push   0x0
c0019c27:	68 ef be ad de       	push   0xdeadbeef
c0019c2c:	57                   	push   edi
c0019c2d:	e8 82 78 ff ff       	call   c00114b4 <TSS::setup(unsigned long, unsigned long)>
c0019c32:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c35:	e8 5a 78 ff ff       	call   c0011494 <TSS::flush()>
c0019c3a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c40:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c43:	e8 e8 56 ff ff       	call   c000f330 <IDT::setup()>
c0019c48:	b8 00 04 00 00       	mov    eax,0x400
c0019c4d:	0f 23 f8             	mov    db7,eax
c0019c50:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c5a:	e8 86 62 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0019c5f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c65:	89 30                	mov    DWORD PTR [eax],esi
c0019c67:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c6d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c70:	58                   	pop    eax
c0019c71:	5a                   	pop    edx
c0019c72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c7c:	e8 87 89 ff ff       	call   c0012608 <VAS::setCPUSpecific(unsigned long)>
c0019c81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c84:	e8 5f f4 ff ff       	call   c00190e8 <CPU::detectFeatures()>
c0019c89:	e8 ce bc ff ff       	call   c001595c <setupInterruptController()>
c0019c8e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c94:	a1 80 e4 02 c0       	mov    eax,ds:0xc002e480
c0019c99:	83 e0 10             	and    eax,0x10
c0019c9c:	83 f8 01             	cmp    eax,0x1
c0019c9f:	19 c0                	sbb    eax,eax
c0019ca1:	83 e0 46             	and    eax,0x46
c0019ca4:	83 c0 1e             	add    eax,0x1e
c0019ca7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019caa:	e8 bb d1 ff ff       	call   c0016e6a <setupTimer(int)>
c0019caf:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019cb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cb8:	e8 bf fe ff ff       	call   c0019b7c <CPU::setupFeatures()>
c0019cbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cc0:	e8 a7 f1 ff ff       	call   c0018e6c <CPU::displayFeatures()>
c0019cc5:	83 c4 10             	add    esp,0x10
c0019cc8:	31 c0                	xor    eax,eax
c0019cca:	5b                   	pop    ebx
c0019ccb:	5e                   	pop    esi
c0019ccc:	5f                   	pop    edi
c0019ccd:	c3                   	ret    

c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019cce:	57                   	push   edi
c0019ccf:	56                   	push   esi
c0019cd0:	53                   	push   ebx
c0019cd1:	51                   	push   ecx
c0019cd2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cd6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019cd9:	0f 02 c0             	lar    eax,ax
c0019cdc:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019cdf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ce3:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019ce6:	88 ca                	mov    dl,cl
c0019ce8:	c0 ea 06             	shr    dl,0x6
c0019ceb:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019cef:	89 ca                	mov    edx,ecx
c0019cf1:	66 c1 ea 03          	shr    dx,0x3
c0019cf5:	83 e2 07             	and    edx,0x7
c0019cf8:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019cfd:	88 17                	mov    BYTE PTR [edi],dl
c0019cff:	0f 84 a6 01 00 00    	je     c0019eab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d05:	83 e1 07             	and    ecx,0x7
c0019d08:	80 f9 04             	cmp    cl,0x4
c0019d0b:	0f 84 98 00 00 00    	je     c0019da9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d11:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d16:	0f 95 c0             	setne  al
c0019d19:	80 f9 05             	cmp    cl,0x5
c0019d1c:	0f 95 c2             	setne  dl
c0019d1f:	08 c2                	or     dl,al
c0019d21:	74 79                	je     c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d23:	84 c9                	test   cl,cl
c0019d25:	75 05                	jne    c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d27:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d2a:	eb 3c                	jmp    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d2c:	80 f9 01             	cmp    cl,0x1
c0019d2f:	75 05                	jne    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d31:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d34:	eb 32                	jmp    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d36:	80 f9 02             	cmp    cl,0x2
c0019d39:	75 05                	jne    c0019d40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d3b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d3e:	eb 28                	jmp    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d40:	31 c0                	xor    eax,eax
c0019d42:	80 f9 03             	cmp    cl,0x3
c0019d45:	75 05                	jne    c0019d4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d47:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d4a:	eb 1c                	jmp    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d4c:	80 f9 05             	cmp    cl,0x5
c0019d4f:	75 05                	jne    c0019d56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d51:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d54:	eb 12                	jmp    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d56:	80 f9 06             	cmp    cl,0x6
c0019d59:	75 05                	jne    c0019d60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d5b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d5e:	eb 08                	jmp    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d60:	80 f9 07             	cmp    cl,0x7
c0019d63:	75 03                	jne    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d65:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d68:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d6d:	75 10                	jne    c0019d7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d6f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d73:	b9 03 00 00 00       	mov    ecx,0x3
c0019d78:	01 d0                	add    eax,edx
c0019d7a:	e9 37 01 00 00       	jmp    c0019eb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d7f:	b9 02 00 00 00       	mov    ecx,0x2
c0019d84:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d89:	0f 85 27 01 00 00    	jne    c0019eb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d8f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d92:	b9 06 00 00 00       	mov    ecx,0x6
c0019d97:	e9 1a 01 00 00       	jmp    c0019eb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d9c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d9f:	b9 06 00 00 00       	mov    ecx,0x6
c0019da4:	e9 0f 01 00 00       	jmp    c0019eb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019da9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019dac:	88 ca                	mov    dl,cl
c0019dae:	c0 ea 06             	shr    dl,0x6
c0019db1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019db5:	89 ca                	mov    edx,ecx
c0019db7:	66 c1 ea 03          	shr    dx,0x3
c0019dbb:	83 e2 07             	and    edx,0x7
c0019dbe:	80 e1 07             	and    cl,0x7
c0019dc1:	75 05                	jne    c0019dc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019dc3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019dc6:	eb 4c                	jmp    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dc8:	80 f9 01             	cmp    cl,0x1
c0019dcb:	75 05                	jne    c0019dd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019dcd:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019dd0:	eb 42                	jmp    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd2:	80 f9 02             	cmp    cl,0x2
c0019dd5:	75 05                	jne    c0019ddc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019dd7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019dda:	eb 38                	jmp    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ddc:	80 f9 03             	cmp    cl,0x3
c0019ddf:	75 05                	jne    c0019de6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019de1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019de4:	eb 2e                	jmp    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019de6:	80 f9 04             	cmp    cl,0x4
c0019de9:	75 12                	jne    c0019dfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019deb:	f6 c4 60             	test   ah,0x60
c0019dee:	75 08                	jne    c0019df8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019df0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019df3:	8d 78 14             	lea    edi,[eax+0x14]
c0019df6:	eb 1c                	jmp    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019df8:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019dfb:	eb 17                	jmp    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dfd:	80 f9 05             	cmp    cl,0x5
c0019e00:	75 05                	jne    c0019e07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e02:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e05:	eb 0d                	jmp    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e07:	80 f9 06             	cmp    cl,0x6
c0019e0a:	75 05                	jne    c0019e11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e0c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e0f:	eb 03                	jmp    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e11:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e14:	84 d2                	test   dl,dl
c0019e16:	75 05                	jne    c0019e1d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e18:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e1b:	eb 3c                	jmp    c0019e59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e1d:	80 fa 01             	cmp    dl,0x1
c0019e20:	75 05                	jne    c0019e27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e22:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e25:	eb 32                	jmp    c0019e59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e27:	80 fa 02             	cmp    dl,0x2
c0019e2a:	75 05                	jne    c0019e31 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e2c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e2f:	eb 28                	jmp    c0019e59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e31:	80 fa 03             	cmp    dl,0x3
c0019e34:	75 05                	jne    c0019e3b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e36:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e39:	eb 1e                	jmp    c0019e59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e3b:	31 c0                	xor    eax,eax
c0019e3d:	80 fa 04             	cmp    dl,0x4
c0019e40:	74 17                	je     c0019e59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e42:	80 fa 05             	cmp    dl,0x5
c0019e45:	75 05                	jne    c0019e4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e47:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e4a:	eb 0d                	jmp    c0019e59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e4c:	80 fa 06             	cmp    dl,0x6
c0019e4f:	75 05                	jne    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e51:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e54:	eb 03                	jmp    c0019e59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e56:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e59:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e5e:	0f 94 c2             	sete   dl
c0019e61:	80 f9 05             	cmp    cl,0x5
c0019e64:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e68:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e6d:	d3 e0                	shl    eax,cl
c0019e6f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e73:	74 0a                	je     c0019e7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e75:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e78:	b9 07 00 00 00       	mov    ecx,0x7
c0019e7d:	eb 37                	jmp    c0019eb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e7f:	01 f8                	add    eax,edi
c0019e81:	b9 03 00 00 00       	mov    ecx,0x3
c0019e86:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e8b:	74 2b                	je     c0019eb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e8d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e92:	75 0d                	jne    c0019ea1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e94:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e98:	01 c8                	add    eax,ecx
c0019e9a:	b9 04 00 00 00       	mov    ecx,0x4
c0019e9f:	eb 17                	jmp    c0019eb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ea1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ea4:	b9 07 00 00 00       	mov    ecx,0x7
c0019ea9:	eb 0d                	jmp    c0019eb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eab:	b9 02 00 00 00       	mov    ecx,0x2
c0019eb0:	b2 01                	mov    dl,0x1
c0019eb2:	31 c0                	xor    eax,eax
c0019eb4:	eb 02                	jmp    c0019eb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eb6:	31 d2                	xor    edx,edx
c0019eb8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ebc:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019ebe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ec2:	88 11                	mov    BYTE PTR [ecx],dl
c0019ec4:	5a                   	pop    edx
c0019ec5:	5b                   	pop    ebx
c0019ec6:	5e                   	pop    esi
c0019ec7:	5f                   	pop    edi
c0019ec8:	c3                   	ret    

c0019ec9 <Krnl::smpEntry()>:
c0019ec9:	eb fe                	jmp    c0019ec9 <Krnl::smpEntry()>

c0019ecb <Krnl::startCPU(int)>:
c0019ecb:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0019ed0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ed7:	0f 84 36 01 00 00    	je     c001a013 <Krnl::startCPU(int)+0x148>
c0019edd:	53                   	push   ebx
c0019ede:	83 ec 08             	sub    esp,0x8
c0019ee1:	e8 16 3f 00 00       	call   c001ddfc <lockScheduler()>
c0019ee6:	52                   	push   edx
c0019ee7:	52                   	push   edx
c0019ee8:	6a 1b                	push   0x1b
c0019eea:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0019ef0:	e8 f3 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ef5:	59                   	pop    ecx
c0019ef6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019efb:	89 c3                	mov    ebx,eax
c0019efd:	58                   	pop    eax
c0019efe:	53                   	push   ebx
c0019eff:	68 5c ba 02 c0       	push   0xc002ba5c
c0019f04:	e8 51 90 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0019f09:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f17:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f21:	c1 e0 18             	shl    eax,0x18
c0019f24:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f2a:	83 c4 10             	add    esp,0x10
c0019f2d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f33:	09 c2                	or     edx,eax
c0019f35:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f3b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f41:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f47:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f4d:	80 cd c5             	or     ch,0xc5
c0019f50:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f56:	f3 90                	pause  
c0019f58:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f5a:	0f ba e1 0c          	bt     ecx,0xc
c0019f5e:	72 f6                	jb     c0019f56 <Krnl::startCPU(int)+0x8b>
c0019f60:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f66:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f6c:	09 c1                	or     ecx,eax
c0019f6e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f74:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f7a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f80:	80 cd 85             	or     ch,0x85
c0019f83:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f89:	f3 90                	pause  
c0019f8b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f8d:	0f ba e1 0c          	bt     ecx,0xc
c0019f91:	72 f6                	jb     c0019f89 <Krnl::startCPU(int)+0xbe>
c0019f93:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f9d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fa3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fa9:	09 c1                	or     ecx,eax
c0019fab:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fb1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fb7:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fbd:	81 c9 02 06 00 00    	or     ecx,0x602
c0019fc3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fc9:	f3 90                	pause  
c0019fcb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fcd:	0f ba e1 0c          	bt     ecx,0xc
c0019fd1:	72 f6                	jb     c0019fc9 <Krnl::startCPU(int)+0xfe>
c0019fd3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fdd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fe3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fe9:	09 c8                	or     eax,ecx
c0019feb:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019ff1:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019ff7:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019ffc:	0d 02 06 00 00       	or     eax,0x602
c001a001:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a007:	f3 90                	pause  
c001a009:	8b 02                	mov    eax,DWORD PTR [edx]
c001a00b:	0f ba e0 0c          	bt     eax,0xc
c001a00f:	72 f6                	jb     c001a007 <Krnl::startCPU(int)+0x13c>
c001a011:	eb fe                	jmp    c001a011 <Krnl::startCPU(int)+0x146>
c001a013:	c3                   	ret    

c001a014 <Krnl::startCPUs()>:
c001a014:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001a019:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a01f:	88 c2                	mov    dl,al
c001a021:	83 e2 0a             	and    edx,0xa
c001a024:	80 fa 0a             	cmp    dl,0xa
c001a027:	75 09                	jne    c001a032 <Krnl::startCPUs()+0x1e>
c001a029:	a8 01                	test   al,0x1
c001a02b:	74 05                	je     c001a032 <Krnl::startCPUs()+0x1e>
c001a02d:	e9 69 61 fe ff       	jmp    c000019b <prepareTramp>
c001a032:	c3                   	ret    
c001a033:	90                   	nop

c001a034 <EnvVarContainer::getEnv(char const*)>:
c001a034:	57                   	push   edi
c001a035:	56                   	push   esi
c001a036:	53                   	push   ebx
c001a037:	31 db                	xor    ebx,ebx
c001a039:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a03d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a03f:	7e 2b                	jle    c001a06c <EnvVarContainer::getEnv(char const*)+0x38>
c001a041:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a048:	50                   	push   eax
c001a049:	50                   	push   eax
c001a04a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a04d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a054:	e8 67 68 fe ff       	call   c00008c0 <strcmp>
c001a059:	83 c4 10             	add    esp,0x10
c001a05c:	85 c0                	test   eax,eax
c001a05e:	75 09                	jne    c001a069 <EnvVarContainer::getEnv(char const*)+0x35>
c001a060:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a063:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a067:	eb 05                	jmp    c001a06e <EnvVarContainer::getEnv(char const*)+0x3a>
c001a069:	43                   	inc    ebx
c001a06a:	eb d1                	jmp    c001a03d <EnvVarContainer::getEnv(char const*)+0x9>
c001a06c:	31 c0                	xor    eax,eax
c001a06e:	5b                   	pop    ebx
c001a06f:	5e                   	pop    esi
c001a070:	5f                   	pop    edi
c001a071:	c3                   	ret    

c001a072 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a072:	57                   	push   edi
c001a073:	56                   	push   esi
c001a074:	53                   	push   ebx
c001a075:	83 ec 1c             	sub    esp,0x1c
c001a078:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a07c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a080:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a084:	57                   	push   edi
c001a085:	e8 0a 67 fe ff       	call   c0000794 <strlen>
c001a08a:	40                   	inc    eax
c001a08b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a08e:	e8 b0 57 ff ff       	call   c000f843 <malloc>
c001a093:	89 34 24             	mov    DWORD PTR [esp],esi
c001a096:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a09a:	e8 f5 66 fe ff       	call   c0000794 <strlen>
c001a09f:	40                   	inc    eax
c001a0a0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0a3:	e8 9b 57 ff ff       	call   c000f843 <malloc>
c001a0a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0af:	e8 e0 66 fe ff       	call   c0000794 <strlen>
c001a0b4:	83 c4 0c             	add    esp,0xc
c001a0b7:	40                   	inc    eax
c001a0b8:	50                   	push   eax
c001a0b9:	6a 00                	push   0x0
c001a0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0bf:	e8 b4 66 fe ff       	call   c0000778 <memset>
c001a0c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0c7:	e8 c8 66 fe ff       	call   c0000794 <strlen>
c001a0cc:	83 c4 0c             	add    esp,0xc
c001a0cf:	40                   	inc    eax
c001a0d0:	50                   	push   eax
c001a0d1:	57                   	push   edi
c001a0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0d6:	e8 69 66 fe ff       	call   c0000744 <memcpy>
c001a0db:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0de:	e8 b1 66 fe ff       	call   c0000794 <strlen>
c001a0e3:	83 c4 0c             	add    esp,0xc
c001a0e6:	40                   	inc    eax
c001a0e7:	50                   	push   eax
c001a0e8:	6a 00                	push   0x0
c001a0ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0ee:	e8 85 66 fe ff       	call   c0000778 <memset>
c001a0f3:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0f6:	e8 99 66 fe ff       	call   c0000794 <strlen>
c001a0fb:	83 c4 0c             	add    esp,0xc
c001a0fe:	40                   	inc    eax
c001a0ff:	50                   	push   eax
c001a100:	56                   	push   esi
c001a101:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a105:	e8 3a 66 fe ff       	call   c0000744 <memcpy>
c001a10a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a10c:	40                   	inc    eax
c001a10d:	89 03                	mov    DWORD PTR [ebx],eax
c001a10f:	c1 e0 03             	shl    eax,0x3
c001a112:	5a                   	pop    edx
c001a113:	59                   	pop    ecx
c001a114:	50                   	push   eax
c001a115:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a118:	e8 12 57 ff ff       	call   c000f82f <realloc>
c001a11d:	83 c4 0c             	add    esp,0xc
c001a120:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a123:	6a 08                	push   0x8
c001a125:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a129:	52                   	push   edx
c001a12a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a12c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a130:	50                   	push   eax
c001a131:	e8 0e 66 fe ff       	call   c0000744 <memcpy>
c001a136:	83 c4 20             	add    esp,0x20
c001a139:	5b                   	pop    ebx
c001a13a:	5e                   	pop    esi
c001a13b:	5f                   	pop    edi
c001a13c:	c3                   	ret    
c001a13d:	90                   	nop

c001a13e <EnvVarContainer::deleteEnv(char const*)>:
c001a13e:	c3                   	ret    
c001a13f:	90                   	nop

c001a140 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a140:	55                   	push   ebp
c001a141:	57                   	push   edi
c001a142:	56                   	push   esi
c001a143:	53                   	push   ebx
c001a144:	81 ec 38 01 00 00    	sub    esp,0x138
c001a14a:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a151:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a158:	68 14 01 00 00       	push   0x114
c001a15d:	e8 e1 56 ff ff       	call   c000f843 <malloc>
c001a162:	83 c4 0c             	add    esp,0xc
c001a165:	89 c7                	mov    edi,eax
c001a167:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a16a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a171:	50                   	push   eax
c001a172:	e8 3b 93 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001a177:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a17a:	e8 05 96 ff ff       	call   c0013784 <File::exists()>
c001a17f:	83 c4 10             	add    esp,0x10
c001a182:	84 c0                	test   al,al
c001a184:	75 31                	jne    c001a1b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a186:	51                   	push   ecx
c001a187:	51                   	push   ecx
c001a188:	6a 12                	push   0x12
c001a18a:	57                   	push   edi
c001a18b:	e8 86 93 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001a190:	8b 07                	mov    eax,DWORD PTR [edi]
c001a192:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a195:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a198:	e8 f7 65 fe ff       	call   c0000794 <strlen>
c001a19d:	5a                   	pop    edx
c001a19e:	31 d2                	xor    edx,edx
c001a1a0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1a4:	51                   	push   ecx
c001a1a5:	55                   	push   ebp
c001a1a6:	52                   	push   edx
c001a1a7:	50                   	push   eax
c001a1a8:	57                   	push   edi
c001a1a9:	ff d3                	call   ebx
c001a1ab:	83 c4 14             	add    esp,0x14
c001a1ae:	57                   	push   edi
c001a1af:	e8 c0 93 ff ff       	call   c0013574 <File::close()>
c001a1b4:	83 c4 10             	add    esp,0x10
c001a1b7:	31 db                	xor    ebx,ebx
c001a1b9:	50                   	push   eax
c001a1ba:	31 ed                	xor    ebp,ebp
c001a1bc:	68 00 01 00 00       	push   0x100
c001a1c1:	6a 00                	push   0x0
c001a1c3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1c7:	50                   	push   eax
c001a1c8:	e8 ab 65 fe ff       	call   c0000778 <memset>
c001a1cd:	58                   	pop    eax
c001a1ce:	5a                   	pop    edx
c001a1cf:	6a 01                	push   0x1
c001a1d1:	57                   	push   edi
c001a1d2:	e8 3f 93 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001a1d7:	83 c4 10             	add    esp,0x10
c001a1da:	83 ec 0c             	sub    esp,0xc
c001a1dd:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1df:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1e3:	51                   	push   ecx
c001a1e4:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1e8:	52                   	push   edx
c001a1e9:	6a 00                	push   0x0
c001a1eb:	6a 01                	push   0x1
c001a1ed:	57                   	push   edi
c001a1ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1f1:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1f5:	83 c4 20             	add    esp,0x20
c001a1f8:	3c 0d                	cmp    al,0xd
c001a1fa:	0f 84 12 01 00 00    	je     c001a312 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a200:	85 db                	test   ebx,ebx
c001a202:	0f 84 fd 00 00 00    	je     c001a305 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a208:	3c 0a                	cmp    al,0xa
c001a20a:	74 13                	je     c001a21f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a20c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a211:	74 0c                	je     c001a21f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a213:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a219:	0f 8e e6 00 00 00    	jle    c001a305 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a21f:	83 ec 0c             	sub    esp,0xc
c001a222:	8d 53 01             	lea    edx,[ebx+0x1]
c001a225:	29 dd                	sub    ebp,ebx
c001a227:	52                   	push   edx
c001a228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a22c:	e8 12 56 ff ff       	call   c000f843 <malloc>
c001a231:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a234:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a238:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a23b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a23f:	e8 ff 55 ff ff       	call   c000f843 <malloc>
c001a244:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a248:	83 c4 0c             	add    esp,0xc
c001a24b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a24f:	52                   	push   edx
c001a250:	6a 00                	push   0x0
c001a252:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a256:	e8 1d 65 fe ff       	call   c0000778 <memset>
c001a25b:	83 c4 0c             	add    esp,0xc
c001a25e:	53                   	push   ebx
c001a25f:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a263:	55                   	push   ebp
c001a264:	01 eb                	add    ebx,ebp
c001a266:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a26a:	e8 d5 64 fe ff       	call   c0000744 <memcpy>
c001a26f:	83 c4 0c             	add    esp,0xc
c001a272:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a276:	51                   	push   ecx
c001a277:	6a 00                	push   0x0
c001a279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a27d:	e8 f6 64 fe ff       	call   c0000778 <memset>
c001a282:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a285:	e8 0a 65 fe ff       	call   c0000794 <strlen>
c001a28a:	83 c4 0c             	add    esp,0xc
c001a28d:	50                   	push   eax
c001a28e:	53                   	push   ebx
c001a28f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a293:	e8 ac 64 fe ff       	call   c0000744 <memcpy>
c001a298:	5b                   	pop    ebx
c001a299:	58                   	pop    eax
c001a29a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a29e:	68 6d ba 02 c0       	push   0xc002ba6d
c001a2a3:	e8 b2 8c ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001a2a8:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2aa:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2ad:	40                   	inc    eax
c001a2ae:	83 c4 10             	add    esp,0x10
c001a2b1:	89 06                	mov    DWORD PTR [esi],eax
c001a2b3:	85 d2                	test   edx,edx
c001a2b5:	75 0c                	jne    c001a2c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2b7:	83 ec 0c             	sub    esp,0xc
c001a2ba:	6a 08                	push   0x8
c001a2bc:	e8 82 55 ff ff       	call   c000f843 <malloc>
c001a2c1:	eb 0c                	jmp    c001a2cf <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2c3:	c1 e0 03             	shl    eax,0x3
c001a2c6:	51                   	push   ecx
c001a2c7:	51                   	push   ecx
c001a2c8:	50                   	push   eax
c001a2c9:	52                   	push   edx
c001a2ca:	e8 60 55 ff ff       	call   c000f82f <realloc>
c001a2cf:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2d2:	83 c4 10             	add    esp,0x10
c001a2d5:	31 db                	xor    ebx,ebx
c001a2d7:	52                   	push   edx
c001a2d8:	6a 08                	push   0x8
c001a2da:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2de:	50                   	push   eax
c001a2df:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2e1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2e4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2e8:	50                   	push   eax
c001a2e9:	e8 56 64 fe ff       	call   c0000744 <memcpy>
c001a2ee:	83 c4 0c             	add    esp,0xc
c001a2f1:	68 00 01 00 00       	push   0x100
c001a2f6:	6a 00                	push   0x0
c001a2f8:	55                   	push   ebp
c001a2f9:	31 ed                	xor    ebp,ebp
c001a2fb:	e8 78 64 fe ff       	call   c0000778 <memset>
c001a300:	83 c4 10             	add    esp,0x10
c001a303:	eb 0d                	jmp    c001a312 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a305:	3c 3d                	cmp    al,0x3d
c001a307:	74 07                	je     c001a310 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a309:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a30d:	45                   	inc    ebp
c001a30e:	eb 02                	jmp    c001a312 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a310:	89 eb                	mov    ebx,ebp
c001a312:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a317:	0f 85 bd fe ff ff    	jne    c001a1da <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a31d:	50                   	push   eax
c001a31e:	50                   	push   eax
c001a31f:	ff 36                	push   DWORD PTR [esi]
c001a321:	68 7b ba 02 c0       	push   0xc002ba7b
c001a326:	e8 2f 8c ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001a32b:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a331:	5b                   	pop    ebx
c001a332:	5e                   	pop    esi
c001a333:	5f                   	pop    edi
c001a334:	5d                   	pop    ebp
c001a335:	c3                   	ret    

c001a336 <EnvVarContainer::__loadSystem()>:
c001a336:	83 ec 10             	sub    esp,0x10
c001a339:	68 a0 d9 02 c0       	push   0xc002d9a0
c001a33e:	68 a6 ba 02 c0       	push   0xc002baa6
c001a343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a347:	e8 f4 fd ff ff       	call   c001a140 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a34c:	83 c4 1c             	add    esp,0x1c
c001a34f:	c3                   	ret    

c001a350 <EnvVarContainer::__loadUser()>:
c001a350:	c3                   	ret    
c001a351:	90                   	nop

c001a352 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a356:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a35c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a364:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a367:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a36b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a372:	90                   	nop
c001a373:	c3                   	ret    

c001a374 <EnvVarContainer::~EnvVarContainer()>:
c001a374:	83 ec 0c             	sub    esp,0xc
c001a377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a37b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a37e:	85 c0                	test   eax,eax
c001a380:	74 1d                	je     c001a39f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a386:	8b 00                	mov    eax,DWORD PTR [eax]
c001a388:	85 c0                	test   eax,eax
c001a38a:	74 13                	je     c001a39f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a393:	83 ec 0c             	sub    esp,0xc
c001a396:	50                   	push   eax
c001a397:	e8 b7 54 ff ff       	call   c000f853 <free>
c001a39c:	83 c4 10             	add    esp,0x10
c001a39f:	90                   	nop
c001a3a0:	83 c4 0c             	add    esp,0xc
c001a3a3:	c3                   	ret    

c001a3a4 <Krnl::getEnv(Process*, char const*)>:
c001a3a4:	53                   	push   ebx
c001a3a5:	83 ec 08             	sub    esp,0x8
c001a3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3b0:	39 05 d4 19 03 c0    	cmp    DWORD PTR ds:0xc00319d4,eax
c001a3b6:	74 04                	je     c001a3bc <Krnl::getEnv(Process*, char const*)+0x18>
c001a3b8:	85 c0                	test   eax,eax
c001a3ba:	75 0b                	jne    c001a3c7 <Krnl::getEnv(Process*, char const*)+0x23>
c001a3bc:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a3c1:	85 c0                	test   eax,eax
c001a3c3:	75 19                	jne    c001a3de <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3c5:	eb 27                	jmp    c001a3ee <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3c7:	52                   	push   edx
c001a3c8:	52                   	push   edx
c001a3c9:	53                   	push   ebx
c001a3ca:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3d0:	e8 5f fc ff ff       	call   c001a034 <EnvVarContainer::getEnv(char const*)>
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	85 c0                	test   eax,eax
c001a3da:	75 28                	jne    c001a404 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3dc:	eb de                	jmp    c001a3bc <Krnl::getEnv(Process*, char const*)+0x18>
c001a3de:	52                   	push   edx
c001a3df:	52                   	push   edx
c001a3e0:	53                   	push   ebx
c001a3e1:	50                   	push   eax
c001a3e2:	e8 4d fc ff ff       	call   c001a034 <EnvVarContainer::getEnv(char const*)>
c001a3e7:	83 c4 10             	add    esp,0x10
c001a3ea:	85 c0                	test   eax,eax
c001a3ec:	75 16                	jne    c001a404 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3ee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3f2:	a1 b8 0f 03 c0       	mov    eax,ds:0xc0030fb8
c001a3f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3fb:	83 c4 08             	add    esp,0x8
c001a3fe:	5b                   	pop    ebx
c001a3ff:	e9 30 fc ff ff       	jmp    c001a034 <EnvVarContainer::getEnv(char const*)>
c001a404:	83 c4 08             	add    esp,0x8
c001a407:	5b                   	pop    ebx
c001a408:	c3                   	ret    

c001a409 <Krnl::setEnvSystem(char const*, char const*)>:
c001a409:	83 ec 10             	sub    esp,0x10
c001a40c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a410:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a414:	ff 35 b8 0f 03 c0    	push   DWORD PTR ds:0xc0030fb8
c001a41a:	e8 53 fc ff ff       	call   c001a072 <EnvVarContainer::setEnv(char const*, char const*)>
c001a41f:	83 c4 1c             	add    esp,0x1c
c001a422:	c3                   	ret    

c001a423 <Krnl::setEnvUser(char const*, char const*)>:
c001a423:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a428:	85 c0                	test   eax,eax
c001a42a:	74 15                	je     c001a441 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a42c:	83 ec 10             	sub    esp,0x10
c001a42f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a433:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a437:	50                   	push   eax
c001a438:	e8 35 fc ff ff       	call   c001a072 <EnvVarContainer::setEnv(char const*, char const*)>
c001a43d:	83 c4 1c             	add    esp,0x1c
c001a440:	c3                   	ret    
c001a441:	c3                   	ret    

c001a442 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a446:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a44c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a450:	e9 1d fc ff ff       	jmp    c001a072 <EnvVarContainer::setEnv(char const*, char const*)>

c001a455 <Krnl::deleteEnvSystem(char const*)>:
c001a455:	c3                   	ret    

c001a456 <Krnl::deleteEnvUser(char const*)>:
c001a456:	c3                   	ret    

c001a457 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a457:	c3                   	ret    

c001a458 <Krnl::newProcessEnv(Process*)>:
c001a458:	83 ec 28             	sub    esp,0x28
c001a45b:	6a 0c                	push   0xc
c001a45d:	e8 e1 53 ff ff       	call   c000f843 <malloc>
c001a462:	5a                   	pop    edx
c001a463:	59                   	pop    ecx
c001a464:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a468:	50                   	push   eax
c001a469:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a46d:	e8 e0 fe ff ff       	call   c001a352 <EnvVarContainer::EnvVarContainer(Process*)>
c001a472:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a476:	83 c4 2c             	add    esp,0x2c
c001a479:	c3                   	ret    

c001a47a <Krnl::copyProcessEnv(Process*, Process*)>:
c001a47a:	56                   	push   esi
c001a47b:	53                   	push   ebx
c001a47c:	83 ec 10             	sub    esp,0x10
c001a47f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a483:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a489:	6a 0c                	push   0xc
c001a48b:	e8 b3 53 ff ff       	call   c000f843 <malloc>
c001a490:	89 c3                	mov    ebx,eax
c001a492:	58                   	pop    eax
c001a493:	5a                   	pop    edx
c001a494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a498:	53                   	push   ebx
c001a499:	e8 b4 fe ff ff       	call   c001a352 <EnvVarContainer::EnvVarContainer(Process*)>
c001a49e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4a0:	89 03                	mov    DWORD PTR [ebx],eax
c001a4a2:	c1 e0 03             	shl    eax,0x3
c001a4a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4a8:	e8 96 53 ff ff       	call   c000f843 <malloc>
c001a4ad:	83 c4 0c             	add    esp,0xc
c001a4b0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4b3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4b5:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4bc:	52                   	push   edx
c001a4bd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4c0:	50                   	push   eax
c001a4c1:	e8 7e 62 fe ff       	call   c0000744 <memcpy>
c001a4c6:	89 d8                	mov    eax,ebx
c001a4c8:	83 c4 14             	add    esp,0x14
c001a4cb:	5b                   	pop    ebx
c001a4cc:	5e                   	pop    esi
c001a4cd:	c3                   	ret    

c001a4ce <Krnl::loadSystemEnv()>:
c001a4ce:	53                   	push   ebx
c001a4cf:	83 ec 14             	sub    esp,0x14
c001a4d2:	6a 0c                	push   0xc
c001a4d4:	e8 6a 53 ff ff       	call   c000f843 <malloc>
c001a4d9:	89 c3                	mov    ebx,eax
c001a4db:	58                   	pop    eax
c001a4dc:	5a                   	pop    edx
c001a4dd:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001a4e3:	53                   	push   ebx
c001a4e4:	e8 69 fe ff ff       	call   c001a352 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4ec:	89 1d b8 0f 03 c0    	mov    DWORD PTR ds:0xc0030fb8,ebx
c001a4f2:	e8 3f fe ff ff       	call   c001a336 <EnvVarContainer::__loadSystem()>
c001a4f7:	83 c4 18             	add    esp,0x18
c001a4fa:	5b                   	pop    ebx
c001a4fb:	c3                   	ret    

c001a4fc <Krnl::loadUserEnv()>:
c001a4fc:	53                   	push   ebx
c001a4fd:	83 ec 14             	sub    esp,0x14
c001a500:	6a 0c                	push   0xc
c001a502:	e8 3c 53 ff ff       	call   c000f843 <malloc>
c001a507:	89 c3                	mov    ebx,eax
c001a509:	58                   	pop    eax
c001a50a:	5a                   	pop    edx
c001a50b:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001a511:	53                   	push   ebx
c001a512:	e8 3b fe ff ff       	call   c001a352 <EnvVarContainer::EnvVarContainer(Process*)>
c001a517:	89 1d b4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fb4,ebx
c001a51d:	83 c4 18             	add    esp,0x18
c001a520:	5b                   	pop    ebx
c001a521:	c3                   	ret    

c001a522 <Krnl::flushEnv()>:
c001a522:	c3                   	ret    

c001a523 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a527:	8b 15 b4 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fb4
c001a52d:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a533:	a1 b8 0f 03 c0       	mov    eax,ds:0xc0030fb8
c001a538:	8b 00                	mov    eax,DWORD PTR [eax]
c001a53a:	03 01                	add    eax,DWORD PTR [ecx]
c001a53c:	85 d2                	test   edx,edx
c001a53e:	74 02                	je     c001a542 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a540:	03 02                	add    eax,DWORD PTR [edx]
c001a542:	c3                   	ret    

c001a543 <Krnl::getProcessEnvPair(Process*, int)>:
c001a543:	57                   	push   edi
c001a544:	8b 0d b4 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fb4
c001a54a:	56                   	push   esi
c001a54b:	85 c9                	test   ecx,ecx
c001a54d:	53                   	push   ebx
c001a54e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a552:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a556:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a55c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a560:	8b 02                	mov    eax,DWORD PTR [edx]
c001a562:	75 47                	jne    c001a5ab <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a564:	39 c3                	cmp    ebx,eax
c001a566:	7c 47                	jl     c001a5af <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a568:	8b 15 b8 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fb8
c001a56e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a570:	01 c1                	add    ecx,eax
c001a572:	39 d9                	cmp    ecx,ebx
c001a574:	7e 6c                	jle    c001a5e2 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a576:	51                   	push   ecx
c001a577:	89 d9                	mov    ecx,ebx
c001a579:	29 c1                	sub    ecx,eax
c001a57b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a57e:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a582:	53                   	push   ebx
c001a583:	68 c8 ba 02 c0       	push   0xc002bac8
c001a588:	e8 cd 89 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001a58d:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a593:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a595:	a1 b8 0f 03 c0       	mov    eax,ds:0xc0030fb8
c001a59a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a59d:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5a1:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5a4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5a7:	89 06                	mov    DWORD PTR [esi],eax
c001a5a9:	eb 51                	jmp    c001a5fc <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5ab:	39 c3                	cmp    ebx,eax
c001a5ad:	7d 05                	jge    c001a5b4 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5af:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5b2:	eb 20                	jmp    c001a5d4 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5b4:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5b6:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5b9:	39 da                	cmp    edx,ebx
c001a5bb:	7e 04                	jle    c001a5c1 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5bd:	29 c3                	sub    ebx,eax
c001a5bf:	eb 10                	jmp    c001a5d1 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5c1:	8b 0d b8 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fb8
c001a5c7:	03 11                	add    edx,DWORD PTR [ecx]
c001a5c9:	39 da                	cmp    edx,ebx
c001a5cb:	7e 15                	jle    c001a5e2 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5cd:	29 c3                	sub    ebx,eax
c001a5cf:	29 fb                	sub    ebx,edi
c001a5d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5d4:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5d8:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5db:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5de:	89 06                	mov    DWORD PTR [esi],eax
c001a5e0:	eb 1d                	jmp    c001a5ff <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5e2:	83 ec 0c             	sub    esp,0xc
c001a5e5:	68 dc ba 02 c0       	push   0xc002badc
c001a5ea:	e8 18 00 00 00       	call   c001a607 <Krnl::panic(char const*)>
c001a5ef:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5f5:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5fc:	83 c4 10             	add    esp,0x10
c001a5ff:	89 f0                	mov    eax,esi
c001a601:	5b                   	pop    ebx
c001a602:	5e                   	pop    esi
c001a603:	5f                   	pop    edi
c001a604:	c2 04 00             	ret    0x4

c001a607 <Krnl::panic(char const*)>:
c001a607:	55                   	push   ebp
c001a608:	89 e5                	mov    ebp,esp
c001a60a:	53                   	push   ebx
c001a60b:	83 ec 0c             	sub    esp,0xc
c001a60e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a611:	fa                   	cli    
c001a612:	c6 05 c4 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fc4,0x1
c001a619:	53                   	push   ebx
c001a61a:	c6 05 a4 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d3a4,0x0
c001a621:	68 f6 ba 02 c0       	push   0xc002baf6
c001a626:	e8 2f 89 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001a62b:	58                   	pop    eax
c001a62c:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a631:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a637:	e8 b9 66 ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c001a63c:	83 c4 0c             	add    esp,0xc
c001a63f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a644:	6a 01                	push   0x1
c001a646:	6a 0f                	push   0xf
c001a648:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a64e:	e8 d3 60 ff ff       	call   c0010726 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a653:	58                   	pop    eax
c001a654:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a659:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65f:	e8 32 69 ff ff       	call   c0010f96 <VgaText::clearScreen()>
c001a664:	58                   	pop    eax
c001a665:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a66a:	5a                   	pop    edx
c001a66b:	68 0f bb 02 c0       	push   0xc002bb0f
c001a670:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a676:	e8 99 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a67b:	59                   	pop    ecx
c001a67c:	58                   	pop    eax
c001a67d:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a682:	68 b4 bb 02 c0       	push   0xc002bbb4
c001a687:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a68d:	e8 82 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a692:	58                   	pop    eax
c001a693:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a698:	5a                   	pop    edx
c001a699:	68 2b bb 02 c0       	push   0xc002bb2b
c001a69e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a4:	e8 6b 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6a9:	59                   	pop    ecx
c001a6aa:	58                   	pop    eax
c001a6ab:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a6b0:	53                   	push   ebx
c001a6b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b7:	e8 58 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6bc:	58                   	pop    eax
c001a6bd:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a6c2:	5a                   	pop    edx
c001a6c3:	68 4b bb 02 c0       	push   0xc002bb4b
c001a6c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ce:	e8 41 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6d3:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001a6d8:	83 c4 10             	add    esp,0x10
c001a6db:	85 c0                	test   eax,eax
c001a6dd:	74 02                	je     c001a6e1 <Krnl::panic(char const*)+0xda>
c001a6df:	ff d0                	call   eax
c001a6e1:	83 ec 0c             	sub    esp,0xc
c001a6e4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6e7:	e8 fd 2f 00 00       	call   c001d6e9 <Thr::getDriverNameFromAddress(unsigned long)>
c001a6ec:	83 c4 10             	add    esp,0x10
c001a6ef:	89 c3                	mov    ebx,eax
c001a6f1:	85 c0                	test   eax,eax
c001a6f3:	0f 84 50 02 00 00    	je     c001a949 <Krnl::panic(char const*)+0x342>
c001a6f9:	83 ec 08             	sub    esp,0x8
c001a6fc:	8b 15 d4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319d4
c001a702:	68 f0 bb 02 c0       	push   0xc002bbf0
c001a707:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a70d:	e8 02 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a712:	58                   	pop    eax
c001a713:	5a                   	pop    edx
c001a714:	8b 15 d4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319d4
c001a71a:	68 2b bb 02 c0       	push   0xc002bb2b
c001a71f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a725:	e8 ea 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a72a:	59                   	pop    ecx
c001a72b:	58                   	pop    eax
c001a72c:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a731:	53                   	push   ebx
c001a732:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a738:	e8 d7 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a73d:	83 c4 10             	add    esp,0x10
c001a740:	83 ec 08             	sub    esp,0x8
c001a743:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a748:	68 4a bb 02 c0       	push   0xc002bb4a
c001a74d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a753:	e8 bc 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a758:	58                   	pop    eax
c001a759:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a75e:	5a                   	pop    edx
c001a75f:	68 48 bc 02 c0       	push   0xc002bc48
c001a764:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a76a:	e8 a5 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a76f:	59                   	pop    ecx
c001a770:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a775:	5b                   	pop    ebx
c001a776:	68 88 bc 02 c0       	push   0xc002bc88
c001a77b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a781:	e8 8e 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a786:	58                   	pop    eax
c001a787:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a78c:	5a                   	pop    edx
c001a78d:	68 36 bb 02 c0       	push   0xc002bb36
c001a792:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a798:	e8 77 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a79d:	59                   	pop    ecx
c001a79e:	5b                   	pop    ebx
c001a79f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7a2:	68 4e bb 02 c0       	push   0xc002bb4e
c001a7a7:	e8 ae 87 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001a7ac:	58                   	pop    eax
c001a7ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7b0:	5a                   	pop    edx
c001a7b1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7b4:	68 57 bb 02 c0       	push   0xc002bb57
c001a7b9:	e8 9c 87 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001a7be:	59                   	pop    ecx
c001a7bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7c2:	5b                   	pop    ebx
c001a7c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7c8:	68 60 bb 02 c0       	push   0xc002bb60
c001a7cd:	e8 88 87 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001a7d2:	58                   	pop    eax
c001a7d3:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a7d8:	5a                   	pop    edx
c001a7d9:	68 cc bc 02 c0       	push   0xc002bccc
c001a7de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e4:	e8 2b 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a7e9:	59                   	pop    ecx
c001a7ea:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a7ef:	5b                   	pop    ebx
c001a7f0:	68 69 bb 02 c0       	push   0xc002bb69
c001a7f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7fb:	e8 14 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a800:	0f 20 c0             	mov    eax,cr0
c001a803:	5a                   	pop    edx
c001a804:	59                   	pop    ecx
c001a805:	50                   	push   eax
c001a806:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a80b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a811:	e8 24 69 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a816:	5b                   	pop    ebx
c001a817:	58                   	pop    eax
c001a818:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a81d:	68 73 bb 02 c0       	push   0xc002bb73
c001a822:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a828:	e8 e7 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a82d:	0f 20 d0             	mov    eax,cr2
c001a830:	5a                   	pop    edx
c001a831:	59                   	pop    ecx
c001a832:	50                   	push   eax
c001a833:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a838:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a83e:	e8 f7 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a843:	5b                   	pop    ebx
c001a844:	58                   	pop    eax
c001a845:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a84a:	68 7d bb 02 c0       	push   0xc002bb7d
c001a84f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a855:	e8 ba 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a85a:	0f 20 d8             	mov    eax,cr3
c001a85d:	5a                   	pop    edx
c001a85e:	59                   	pop    ecx
c001a85f:	50                   	push   eax
c001a860:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a865:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86b:	e8 ca 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a870:	5b                   	pop    ebx
c001a871:	58                   	pop    eax
c001a872:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a877:	68 90 bb 02 c0       	push   0xc002bb90
c001a87c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a882:	e8 8d 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a887:	0f 20 e0             	mov    eax,cr4
c001a88a:	5a                   	pop    edx
c001a88b:	59                   	pop    ecx
c001a88c:	50                   	push   eax
c001a88d:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a892:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a898:	e8 9d 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a89d:	5b                   	pop    ebx
c001a89e:	58                   	pop    eax
c001a89f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a8a4:	68 9a bb 02 c0       	push   0xc002bb9a
c001a8a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8af:	e8 60 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a8b4:	5a                   	pop    edx
c001a8b5:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a8ba:	59                   	pop    ecx
c001a8bb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8c1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8c4:	50                   	push   eax
c001a8c5:	e8 70 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a8ca:	5b                   	pop    ebx
c001a8cb:	58                   	pop    eax
c001a8cc:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a8d1:	68 b1 bb 02 c0       	push   0xc002bbb1
c001a8d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8dc:	e8 33 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a8e1:	5a                   	pop    edx
c001a8e2:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a8e7:	59                   	pop    ecx
c001a8e8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8ee:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8f1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8f4:	50                   	push   eax
c001a8f5:	e8 40 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a8fa:	5b                   	pop    ebx
c001a8fb:	58                   	pop    eax
c001a8fc:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a901:	68 b1 bb 02 c0       	push   0xc002bbb1
c001a906:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a90c:	e8 03 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a911:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a916:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a919:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a91f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a921:	59                   	pop    ecx
c001a922:	5b                   	pop    ebx
c001a923:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a926:	50                   	push   eax
c001a927:	e8 0e 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a92c:	83 c4 10             	add    esp,0x10
c001a92f:	b2 fe                	mov    dl,0xfe
c001a931:	e4 60                	in     al,0x60
c001a933:	3c 1c                	cmp    al,0x1c
c001a935:	74 04                	je     c001a93b <Krnl::panic(char const*)+0x334>
c001a937:	3c 5a                	cmp    al,0x5a
c001a939:	75 f6                	jne    c001a931 <Krnl::panic(char const*)+0x32a>
c001a93b:	e4 64                	in     al,0x64
c001a93d:	a8 02                	test   al,0x2
c001a93f:	75 fa                	jne    c001a93b <Krnl::panic(char const*)+0x334>
c001a941:	88 d0                	mov    al,dl
c001a943:	e6 64                	out    0x64,al
c001a945:	fa                   	cli    
c001a946:	f4                   	hlt    
c001a947:	eb e8                	jmp    c001a931 <Krnl::panic(char const*)+0x32a>
c001a949:	50                   	push   eax
c001a94a:	50                   	push   eax
c001a94b:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a950:	68 1c bc 02 c0       	push   0xc002bc1c
c001a955:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a95b:	e8 b4 67 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a960:	58                   	pop    eax
c001a961:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a966:	5a                   	pop    edx
c001a967:	68 2b bb 02 c0       	push   0xc002bb2b
c001a96c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a972:	e8 9d 67 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a977:	59                   	pop    ecx
c001a978:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a97d:	5b                   	pop    ebx
c001a97e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a981:	83 c0 0c             	add    eax,0xc
c001a984:	50                   	push   eax
c001a985:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a98a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a990:	e8 7f 67 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a995:	83 c4 10             	add    esp,0x10
c001a998:	e9 a3 fd ff ff       	jmp    c001a740 <Krnl::panic(char const*)+0x139>

c001a99d <Net::switchEndian16(unsigned short)>:
c001a99d:	83 ec 04             	sub    esp,0x4
c001a9a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9a4:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9a8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9ac:	c1 f8 08             	sar    eax,0x8
c001a9af:	89 c2                	mov    edx,eax
c001a9b1:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9b5:	c1 e0 08             	shl    eax,0x8
c001a9b8:	09 d0                	or     eax,edx
c001a9ba:	83 c4 04             	add    esp,0x4
c001a9bd:	c3                   	ret    

c001a9be <Net::switchEndian32(unsigned int)>:
c001a9be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c2:	c1 e8 18             	shr    eax,0x18
c001a9c5:	89 c2                	mov    edx,eax
c001a9c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9cb:	c1 e0 08             	shl    eax,0x8
c001a9ce:	25 00 00 ff 00       	and    eax,0xff0000
c001a9d3:	09 c2                	or     edx,eax
c001a9d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9d9:	c1 e8 08             	shr    eax,0x8
c001a9dc:	25 00 ff 00 00       	and    eax,0xff00
c001a9e1:	09 c2                	or     edx,eax
c001a9e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e7:	c1 e0 18             	shl    eax,0x18
c001a9ea:	09 d0                	or     eax,edx
c001a9ec:	c3                   	ret    

c001a9ed <Net::crc32Calc(unsigned char*, int)>:
c001a9ed:	83 ec 10             	sub    esp,0x10
c001a9f0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9f5:	75 07                	jne    c001a9fe <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9f7:	b8 00 00 00 00       	mov    eax,0x0
c001a9fc:	eb 7c                	jmp    c001aa7a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9fe:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa03:	7f 07                	jg     c001aa0c <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa05:	b8 00 00 00 00       	mov    eax,0x0
c001aa0a:	eb 6e                	jmp    c001aa7a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa0c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa14:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa20:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa24:	7d 4e                	jge    c001aa74 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa2e:	01 d0                	add    eax,edx
c001aa30:	8a 00                	mov    al,BYTE PTR [eax]
c001aa32:	0f b6 c0             	movzx  eax,al
c001aa35:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa39:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa41:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa46:	7f 26                	jg     c001aa6e <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa4c:	83 e0 01             	and    eax,0x1
c001aa4f:	74 0d                	je     c001aa5e <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa55:	d1 e8                	shr    eax,1
c001aa57:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa5c:	eb 06                	jmp    c001aa64 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa62:	d1 e8                	shr    eax,1
c001aa64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa68:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa6c:	eb d3                	jmp    c001aa41 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa6e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa72:	eb a8                	jmp    c001aa1c <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa78:	f7 d0                	not    eax
c001aa7a:	83 c4 10             	add    esp,0x10
c001aa7d:	c3                   	ret    

c001aa7e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa7e:	83 ec 1c             	sub    esp,0x1c
c001aa81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa91:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa96:	7f 14                	jg     c001aaac <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa9c:	8d 50 01             	lea    edx,[eax+0x1]
c001aa9f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaa3:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aaa6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aaaa:	eb e5                	jmp    c001aa91 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aaac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aab0:	8d 50 01             	lea    edx,[eax+0x1]
c001aab3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aab7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aaba:	83 ec 04             	sub    esp,0x4
c001aabd:	6a 06                	push   0x6
c001aabf:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aac3:	50                   	push   eax
c001aac4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aac8:	e8 77 5c fe ff       	call   c0000744 <memcpy>
c001aacd:	83 c4 10             	add    esp,0x10
c001aad0:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aad5:	83 ec 04             	sub    esp,0x4
c001aad8:	6a 06                	push   0x6
c001aada:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aade:	50                   	push   eax
c001aadf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aae3:	e8 5c 5c fe ff       	call   c0000744 <memcpy>
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aaf0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aaf4:	0f b7 c0             	movzx  eax,ax
c001aaf7:	c1 f8 08             	sar    eax,0x8
c001aafa:	89 c1                	mov    ecx,eax
c001aafc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab00:	8d 50 01             	lea    edx,[eax+0x1]
c001ab03:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab07:	88 ca                	mov    dl,cl
c001ab09:	88 10                	mov    BYTE PTR [eax],dl
c001ab0b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab13:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab16:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab1a:	88 10                	mov    BYTE PTR [eax],dl
c001ab1c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab24:	83 ec 04             	sub    esp,0x4
c001ab27:	52                   	push   edx
c001ab28:	50                   	push   eax
c001ab29:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab2d:	e8 12 5c fe ff       	call   c0000744 <memcpy>
c001ab32:	83 c4 10             	add    esp,0x10
c001ab35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab39:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab41:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab45:	83 ec 08             	sub    esp,0x8
c001ab48:	50                   	push   eax
c001ab49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab4d:	e8 9b fe ff ff       	call   c001a9ed <Net::crc32Calc(unsigned char*, int)>
c001ab52:	83 c4 10             	add    esp,0x10
c001ab55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab5d:	c1 e8 18             	shr    eax,0x18
c001ab60:	89 c1                	mov    ecx,eax
c001ab62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab66:	8d 50 01             	lea    edx,[eax+0x1]
c001ab69:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab6d:	88 ca                	mov    dl,cl
c001ab6f:	88 10                	mov    BYTE PTR [eax],dl
c001ab71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab75:	c1 e8 10             	shr    eax,0x10
c001ab78:	89 c1                	mov    ecx,eax
c001ab7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab7e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab81:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab85:	88 ca                	mov    dl,cl
c001ab87:	88 10                	mov    BYTE PTR [eax],dl
c001ab89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab8d:	c1 e8 08             	shr    eax,0x8
c001ab90:	89 c1                	mov    ecx,eax
c001ab92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab96:	8d 50 01             	lea    edx,[eax+0x1]
c001ab99:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab9d:	88 ca                	mov    dl,cl
c001ab9f:	88 10                	mov    BYTE PTR [eax],dl
c001aba1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba5:	8d 50 01             	lea    edx,[eax+0x1]
c001aba8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abb0:	88 10                	mov    BYTE PTR [eax],dl
c001abb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abb6:	83 c4 1c             	add    esp,0x1c
c001abb9:	c3                   	ret    

c001abba <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abba:	83 ec 2c             	sub    esp,0x2c
c001abbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abc5:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abca:	83 ec 04             	sub    esp,0x4
c001abcd:	6a 06                	push   0x6
c001abcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abd7:	83 c0 0e             	add    eax,0xe
c001abda:	50                   	push   eax
c001abdb:	e8 64 5b fe ff       	call   c0000744 <memcpy>
c001abe0:	83 c4 10             	add    esp,0x10
c001abe3:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abe8:	83 ec 04             	sub    esp,0x4
c001abeb:	6a 06                	push   0x6
c001abed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abf1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abf5:	83 c0 08             	add    eax,0x8
c001abf8:	50                   	push   eax
c001abf9:	e8 46 5b fe ff       	call   c0000744 <memcpy>
c001abfe:	83 c4 10             	add    esp,0x10
c001ac01:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac0a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac0d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac11:	8a 00                	mov    al,BYTE PTR [eax]
c001ac13:	0f b6 c0             	movzx  eax,al
c001ac16:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac1f:	8d 50 01             	lea    edx,[eax+0x1]
c001ac22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac26:	8a 00                	mov    al,BYTE PTR [eax]
c001ac28:	0f b6 c0             	movzx  eax,al
c001ac2b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac30:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac35:	c1 e0 08             	shl    eax,0x8
c001ac38:	89 c2                	mov    edx,eax
c001ac3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac3e:	09 d0                	or     eax,edx
c001ac40:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac44:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac48:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac4d:	75 3a                	jne    c001ac89 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac53:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac56:	66 3d dc 05          	cmp    ax,0x5dc
c001ac5a:	77 10                	ja     c001ac6c <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac63:	0f b7 c0             	movzx  eax,ax
c001ac66:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac6a:	eb 1d                	jmp    c001ac89 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac6c:	83 ec 0c             	sub    esp,0xc
c001ac6f:	68 f4 bc 02 c0       	push   0xc002bcf4
c001ac74:	e8 e1 82 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001ac79:	83 c4 10             	add    esp,0x10
c001ac7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac80:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac84:	e9 c0 00 00 00       	jmp    c001ad49 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac89:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac91:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac93:	83 ec 04             	sub    esp,0x4
c001ac96:	52                   	push   edx
c001ac97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac9b:	50                   	push   eax
c001ac9c:	e8 a3 5a fe ff       	call   c0000744 <memcpy>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aca8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001acac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acb0:	8d 50 01             	lea    edx,[eax+0x1]
c001acb3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acb7:	8a 00                	mov    al,BYTE PTR [eax]
c001acb9:	0f b6 c0             	movzx  eax,al
c001acbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acc0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acc4:	8d 50 01             	lea    edx,[eax+0x1]
c001acc7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001accb:	8a 00                	mov    al,BYTE PTR [eax]
c001accd:	0f b6 c0             	movzx  eax,al
c001acd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acd8:	8d 50 01             	lea    edx,[eax+0x1]
c001acdb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acdf:	8a 00                	mov    al,BYTE PTR [eax]
c001ace1:	0f b6 c0             	movzx  eax,al
c001ace4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ace8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acec:	8d 50 01             	lea    edx,[eax+0x1]
c001acef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acf3:	8a 00                	mov    al,BYTE PTR [eax]
c001acf5:	0f b6 c0             	movzx  eax,al
c001acf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad00:	c1 e0 18             	shl    eax,0x18
c001ad03:	89 c2                	mov    edx,eax
c001ad05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad09:	c1 e0 10             	shl    eax,0x10
c001ad0c:	09 c2                	or     edx,eax
c001ad0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad12:	c1 e0 08             	shl    eax,0x8
c001ad15:	09 d0                	or     eax,edx
c001ad17:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad23:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad27:	83 e8 04             	sub    eax,0x4
c001ad2a:	83 ec 08             	sub    esp,0x8
c001ad2d:	50                   	push   eax
c001ad2e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad32:	e8 b6 fc ff ff       	call   c001a9ed <Net::crc32Calc(unsigned char*, int)>
c001ad37:	83 c4 10             	add    esp,0x10
c001ad3a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad3e:	0f 94 c2             	sete   dl
c001ad41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad45:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad48:	90                   	nop
c001ad49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad4d:	83 c4 2c             	add    esp,0x2c
c001ad50:	c2 04 00             	ret    0x4

c001ad53 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad53:	55                   	push   ebp
c001ad54:	57                   	push   edi
c001ad55:	56                   	push   esi
c001ad56:	53                   	push   ebx
c001ad57:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad5d:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad64:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad66:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad69:	80 fb 40             	cmp    bl,0x40
c001ad6c:	75 1b                	jne    c001ad89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad6e:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad70:	84 d2                	test   dl,dl
c001ad72:	0f 84 f1 00 00 00    	je     c001ae69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad78:	8d 46 01             	lea    eax,[esi+0x1]
c001ad7b:	80 fa 3a             	cmp    dl,0x3a
c001ad7e:	74 04                	je     c001ad84 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad80:	89 c6                	mov    esi,eax
c001ad82:	eb ea                	jmp    c001ad6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad84:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad87:	89 c6                	mov    esi,eax
c001ad89:	50                   	push   eax
c001ad8a:	6a 40                	push   0x40
c001ad8c:	6a 00                	push   0x0
c001ad8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad92:	50                   	push   eax
c001ad93:	e8 e0 59 fe ff       	call   c0000778 <memset>
c001ad98:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad9f:	31 c0                	xor    eax,eax
c001ada1:	83 c4 10             	add    esp,0x10
c001ada4:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ada6:	84 c9                	test   cl,cl
c001ada8:	0f 84 bb 00 00 00    	je     c001ae69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adae:	3d c7 00 00 00       	cmp    eax,0xc7
c001adb3:	0f 8f b0 00 00 00    	jg     c001ae69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adb9:	80 f9 0a             	cmp    cl,0xa
c001adbc:	0f 85 98 00 00 00    	jne    c001ae5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001adc2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001adc7:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001adcb:	a8 df                	test   al,0xdf
c001adcd:	0f 94 c1             	sete   cl
c001add0:	3c 23                	cmp    al,0x23
c001add2:	0f 94 c2             	sete   dl
c001add5:	08 d1                	or     cl,dl
c001add7:	75 4a                	jne    c001ae23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001add9:	8d 50 f7             	lea    edx,[eax-0x9]
c001addc:	80 fa 01             	cmp    dl,0x1
c001addf:	76 42                	jbe    c001ae23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ade1:	3c 5b                	cmp    al,0x5b
c001ade3:	75 42                	jne    c001ae27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ade5:	80 fb 40             	cmp    bl,0x40
c001ade8:	75 39                	jne    c001ae23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adea:	83 ec 0c             	sub    esp,0xc
c001aded:	8d 54 24 65          	lea    edx,[esp+0x65]
c001adf1:	52                   	push   edx
c001adf2:	e8 9d 59 fe ff       	call   c0000794 <strlen>
c001adf7:	83 c4 10             	add    esp,0x10
c001adfa:	83 f8 3f             	cmp    eax,0x3f
c001adfd:	77 6a                	ja     c001ae69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adff:	50                   	push   eax
c001ae00:	50                   	push   eax
c001ae01:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae05:	52                   	push   edx
c001ae06:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae0a:	52                   	push   edx
c001ae0b:	e8 24 5a fe ff       	call   c0000834 <strcpy>
c001ae10:	58                   	pop    eax
c001ae11:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae15:	52                   	push   edx
c001ae16:	e8 79 59 fe ff       	call   c0000794 <strlen>
c001ae1b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae20:	83 c4 10             	add    esp,0x10
c001ae23:	31 d2                	xor    edx,edx
c001ae25:	eb 3a                	jmp    c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae27:	80 fb 40             	cmp    bl,0x40
c001ae2a:	74 06                	je     c001ae32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae2c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae30:	eb 20                	jmp    c001ae52 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae32:	50                   	push   eax
c001ae33:	50                   	push   eax
c001ae34:	55                   	push   ebp
c001ae35:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae39:	50                   	push   eax
c001ae3a:	e8 81 5a fe ff       	call   c00008c0 <strcmp>
c001ae3f:	83 c4 10             	add    esp,0x10
c001ae42:	85 c0                	test   eax,eax
c001ae44:	75 dd                	jne    c001ae23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae46:	eb e4                	jmp    c001ae2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae48:	8d 50 01             	lea    edx,[eax+0x1]
c001ae4b:	80 f9 3d             	cmp    cl,0x3d
c001ae4e:	74 1d                	je     c001ae6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae50:	89 d0                	mov    eax,edx
c001ae52:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae54:	84 c9                	test   cl,cl
c001ae56:	75 f0                	jne    c001ae48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae58:	eb 0f                	jmp    c001ae69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ae5d:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae61:	47                   	inc    edi
c001ae62:	89 d0                	mov    eax,edx
c001ae64:	e9 3b ff ff ff       	jmp    c001ada4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae69:	31 c0                	xor    eax,eax
c001ae6b:	eb 33                	jmp    c001aea0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae74:	50                   	push   eax
c001ae75:	50                   	push   eax
c001ae76:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae7a:	50                   	push   eax
c001ae7b:	56                   	push   esi
c001ae7c:	e8 3f 5a fe ff       	call   c00008c0 <strcmp>
c001ae81:	83 c4 10             	add    esp,0x10
c001ae84:	85 c0                	test   eax,eax
c001ae86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae8a:	75 97                	jne    c001ae23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae8c:	51                   	push   ecx
c001ae8d:	51                   	push   ecx
c001ae8e:	52                   	push   edx
c001ae8f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae96:	e8 99 59 fe ff       	call   c0000834 <strcpy>
c001ae9b:	83 c4 10             	add    esp,0x10
c001ae9e:	b0 01                	mov    al,0x1
c001aea0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aea6:	5b                   	pop    ebx
c001aea7:	5e                   	pop    esi
c001aea8:	5f                   	pop    edi
c001aea9:	5d                   	pop    ebp
c001aeaa:	c3                   	ret    

c001aeab <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aeab:	57                   	push   edi
c001aeac:	56                   	push   esi
c001aead:	53                   	push   ebx
c001aeae:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aeb4:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aebb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aec2:	53                   	push   ebx
c001aec3:	e8 cc 58 fe ff       	call   c0000794 <strlen>
c001aec8:	89 34 24             	mov    DWORD PTR [esp],esi
c001aecb:	89 c7                	mov    edi,eax
c001aecd:	e8 c2 58 fe ff       	call   c0000794 <strlen>
c001aed2:	83 c4 10             	add    esp,0x10
c001aed5:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aed9:	3d ff 00 00 00       	cmp    eax,0xff
c001aede:	0f 87 d3 00 00 00    	ja     c001afb7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aee4:	57                   	push   edi
c001aee5:	57                   	push   edi
c001aee6:	56                   	push   esi
c001aee7:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aeeb:	56                   	push   esi
c001aeec:	e8 43 59 fe ff       	call   c0000834 <strcpy>
c001aef1:	58                   	pop    eax
c001aef2:	5a                   	pop    edx
c001aef3:	68 54 c2 02 c0       	push   0xc002c254
c001aef8:	56                   	push   esi
c001aef9:	e8 76 5a fe ff       	call   c0000974 <strcat>
c001aefe:	59                   	pop    ecx
c001aeff:	5f                   	pop    edi
c001af00:	53                   	push   ebx
c001af01:	56                   	push   esi
c001af02:	e8 6d 5a fe ff       	call   c0000974 <strcat>
c001af07:	58                   	pop    eax
c001af08:	5a                   	pop    edx
c001af09:	68 40 bd 02 c0       	push   0xc002bd40
c001af0e:	56                   	push   esi
c001af0f:	e8 60 5a fe ff       	call   c0000974 <strcat>
c001af14:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af1b:	e8 23 49 ff ff       	call   c000f843 <malloc>
c001af20:	83 c4 0c             	add    esp,0xc
c001af23:	89 c3                	mov    ebx,eax
c001af25:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001af2b:	56                   	push   esi
c001af2c:	50                   	push   eax
c001af2d:	e8 80 85 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001af32:	83 c4 10             	add    esp,0x10
c001af35:	85 db                	test   ebx,ebx
c001af37:	74 7e                	je     c001afb7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af39:	51                   	push   ecx
c001af3a:	51                   	push   ecx
c001af3b:	6a 01                	push   0x1
c001af3d:	53                   	push   ebx
c001af3e:	e8 d3 85 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	85 c0                	test   eax,eax
c001af48:	74 08                	je     c001af52 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af4a:	83 ec 0c             	sub    esp,0xc
c001af4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af4f:	53                   	push   ebx
c001af50:	eb 5f                	jmp    c001afb1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af52:	52                   	push   edx
c001af53:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af57:	50                   	push   eax
c001af58:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af5c:	50                   	push   eax
c001af5d:	53                   	push   ebx
c001af5e:	e8 5f 88 ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c001af63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af67:	83 c4 10             	add    esp,0x10
c001af6a:	89 c1                	mov    ecx,eax
c001af6c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af70:	74 31                	je     c001afa3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af72:	83 ec 0c             	sub    esp,0xc
c001af75:	50                   	push   eax
c001af76:	e8 c8 48 ff ff       	call   c000f843 <malloc>
c001af7b:	89 c6                	mov    esi,eax
c001af7d:	58                   	pop    eax
c001af7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af80:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af84:	52                   	push   edx
c001af85:	56                   	push   esi
c001af86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af8e:	53                   	push   ebx
c001af8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af92:	83 c4 20             	add    esp,0x20
c001af95:	85 c0                	test   eax,eax
c001af97:	75 0a                	jne    c001afa3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af9d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001afa1:	74 18                	je     c001afbb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001afa3:	83 ec 0c             	sub    esp,0xc
c001afa6:	53                   	push   ebx
c001afa7:	e8 c8 85 ff ff       	call   c0013574 <File::close()>
c001afac:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afb4:	83 c4 10             	add    esp,0x10
c001afb7:	31 c0                	xor    eax,eax
c001afb9:	eb 3b                	jmp    c001aff6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001afbb:	83 ec 0c             	sub    esp,0xc
c001afbe:	53                   	push   ebx
c001afbf:	e8 b0 85 ff ff       	call   c0013574 <File::close()>
c001afc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afcc:	83 c4 0c             	add    esp,0xc
c001afcf:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afd6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afdd:	56                   	push   esi
c001afde:	e8 70 fd ff ff       	call   c001ad53 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afe3:	89 34 24             	mov    DWORD PTR [esp],esi
c001afe6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afea:	e8 64 48 ff ff       	call   c000f853 <free>
c001afef:	83 c4 10             	add    esp,0x10
c001aff2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aff6:	81 c4 20 01 00 00    	add    esp,0x120
c001affc:	5b                   	pop    ebx
c001affd:	5e                   	pop    esi
c001affe:	5f                   	pop    edi
c001afff:	c3                   	ret    

c001b000 <Reg::getLine(char*, char*, char*)>:
c001b000:	57                   	push   edi
c001b001:	56                   	push   esi
c001b002:	53                   	push   ebx
c001b003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b007:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b00b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b00f:	57                   	push   edi
c001b010:	56                   	push   esi
c001b011:	53                   	push   ebx
c001b012:	68 45 bd 02 c0       	push   0xc002bd45
c001b017:	e8 8f fe ff ff       	call   c001aeab <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b01c:	83 c4 10             	add    esp,0x10
c001b01f:	84 c0                	test   al,al
c001b021:	75 10                	jne    c001b033 <Reg::getLine(char*, char*, char*)+0x33>
c001b023:	57                   	push   edi
c001b024:	56                   	push   esi
c001b025:	53                   	push   ebx
c001b026:	68 6a bd 02 c0       	push   0xc002bd6a
c001b02b:	e8 7b fe ff ff       	call   c001aeab <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b030:	83 c4 10             	add    esp,0x10
c001b033:	5b                   	pop    ebx
c001b034:	5e                   	pop    esi
c001b035:	5f                   	pop    edi
c001b036:	c3                   	ret    

c001b037 <Reg::readInt(char*, char*, int*)>:
c001b037:	55                   	push   ebp
c001b038:	57                   	push   edi
c001b039:	56                   	push   esi
c001b03a:	53                   	push   ebx
c001b03b:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b041:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b045:	57                   	push   edi
c001b046:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b04d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b054:	e8 a7 ff ff ff       	call   c001b000 <Reg::getLine(char*, char*, char*)>
c001b059:	83 c4 10             	add    esp,0x10
c001b05c:	84 c0                	test   al,al
c001b05e:	0f 84 b3 00 00 00    	je     c001b117 <Reg::readInt(char*, char*, int*)+0xe0>
c001b064:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b068:	80 fa 2b             	cmp    dl,0x2b
c001b06b:	74 0c                	je     c001b079 <Reg::readInt(char*, char*, int*)+0x42>
c001b06d:	80 fa 2d             	cmp    dl,0x2d
c001b070:	75 0e                	jne    c001b080 <Reg::readInt(char*, char*, int*)+0x49>
c001b072:	ba 01 00 00 00       	mov    edx,0x1
c001b077:	eb 0b                	jmp    c001b084 <Reg::readInt(char*, char*, int*)+0x4d>
c001b079:	ba 01 00 00 00       	mov    edx,0x1
c001b07e:	eb 02                	jmp    c001b082 <Reg::readInt(char*, char*, int*)+0x4b>
c001b080:	31 d2                	xor    edx,edx
c001b082:	31 c0                	xor    eax,eax
c001b084:	be 0a 00 00 00       	mov    esi,0xa
c001b089:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b08e:	75 20                	jne    c001b0b0 <Reg::readInt(char*, char*, int*)+0x79>
c001b090:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b094:	80 f9 78             	cmp    cl,0x78
c001b097:	75 0a                	jne    c001b0a3 <Reg::readInt(char*, char*, int*)+0x6c>
c001b099:	83 c2 02             	add    edx,0x2
c001b09c:	be 10 00 00 00       	mov    esi,0x10
c001b0a1:	eb 0d                	jmp    c001b0b0 <Reg::readInt(char*, char*, int*)+0x79>
c001b0a3:	80 f9 62             	cmp    cl,0x62
c001b0a6:	75 08                	jne    c001b0b0 <Reg::readInt(char*, char*, int*)+0x79>
c001b0a8:	83 c2 02             	add    edx,0x2
c001b0ab:	be 02 00 00 00       	mov    esi,0x2
c001b0b0:	01 d7                	add    edi,edx
c001b0b2:	31 d2                	xor    edx,edx
c001b0b4:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0b6:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0ba:	80 fb 0d             	cmp    bl,0xd
c001b0bd:	0f 94 c3             	sete   bl
c001b0c0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0c5:	0f 94 c1             	sete   cl
c001b0c8:	08 cb                	or     bl,cl
c001b0ca:	75 3a                	jne    c001b106 <Reg::readInt(char*, char*, int*)+0xcf>
c001b0cc:	0f af d6             	imul   edx,esi
c001b0cf:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0d4:	83 fe 10             	cmp    esi,0x10
c001b0d7:	75 26                	jne    c001b0ff <Reg::readInt(char*, char*, int*)+0xc8>
c001b0d9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0dd:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0e0:	89 e9                	mov    ecx,ebp
c001b0e2:	80 f9 05             	cmp    cl,0x5
c001b0e5:	77 06                	ja     c001b0ed <Reg::readInt(char*, char*, int*)+0xb6>
c001b0e7:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0eb:	eb 16                	jmp    c001b103 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0ed:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0f1:	83 e9 61             	sub    ecx,0x61
c001b0f4:	80 f9 05             	cmp    cl,0x5
c001b0f7:	77 06                	ja     c001b0ff <Reg::readInt(char*, char*, int*)+0xc8>
c001b0f9:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0fd:	eb 04                	jmp    c001b103 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0ff:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b103:	47                   	inc    edi
c001b104:	eb ae                	jmp    c001b0b4 <Reg::readInt(char*, char*, int*)+0x7d>
c001b106:	84 c0                	test   al,al
c001b108:	74 02                	je     c001b10c <Reg::readInt(char*, char*, int*)+0xd5>
c001b10a:	f7 da                	neg    edx
c001b10c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b113:	89 10                	mov    DWORD PTR [eax],edx
c001b115:	88 d8                	mov    al,bl
c001b117:	81 c4 ec 00 00 00    	add    esp,0xec
c001b11d:	5b                   	pop    ebx
c001b11e:	5e                   	pop    esi
c001b11f:	5f                   	pop    edi
c001b120:	5d                   	pop    ebp
c001b121:	c3                   	ret    

c001b122 <Reg::readString(char*, char*, char*, int)>:
c001b122:	57                   	push   edi
c001b123:	56                   	push   esi
c001b124:	53                   	push   ebx
c001b125:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b12b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b132:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b136:	57                   	push   edi
c001b137:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b13e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b145:	e8 b6 fe ff ff       	call   c001b000 <Reg::getLine(char*, char*, char*)>
c001b14a:	83 c4 10             	add    esp,0x10
c001b14d:	89 c6                	mov    esi,eax
c001b14f:	84 c0                	test   al,al
c001b151:	74 44                	je     c001b197 <Reg::readString(char*, char*, char*, int)+0x75>
c001b153:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b15a:	31 c0                	xor    eax,eax
c001b15c:	4a                   	dec    edx
c001b15d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b160:	84 c9                	test   cl,cl
c001b162:	74 0f                	je     c001b173 <Reg::readString(char*, char*, char*, int)+0x51>
c001b164:	39 c2                	cmp    edx,eax
c001b166:	7e 0b                	jle    c001b173 <Reg::readString(char*, char*, char*, int)+0x51>
c001b168:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b16b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b170:	40                   	inc    eax
c001b171:	eb ea                	jmp    c001b15d <Reg::readString(char*, char*, char*, int)+0x3b>
c001b173:	83 ec 0c             	sub    esp,0xc
c001b176:	53                   	push   ebx
c001b177:	e8 18 56 fe ff       	call   c0000794 <strlen>
c001b17c:	83 c4 10             	add    esp,0x10
c001b17f:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b184:	75 11                	jne    c001b197 <Reg::readString(char*, char*, char*, int)+0x75>
c001b186:	83 ec 0c             	sub    esp,0xc
c001b189:	53                   	push   ebx
c001b18a:	e8 05 56 fe ff       	call   c0000794 <strlen>
c001b18f:	83 c4 10             	add    esp,0x10
c001b192:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b197:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b19d:	89 f0                	mov    eax,esi
c001b19f:	5b                   	pop    ebx
c001b1a0:	5e                   	pop    esi
c001b1a1:	5f                   	pop    edi
c001b1a2:	c3                   	ret    

c001b1a3 <Reg::readBool(char*, char*, bool*)>:
c001b1a3:	83 ec 20             	sub    esp,0x20
c001b1a6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1aa:	50                   	push   eax
c001b1ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1b3:	e8 7f fe ff ff       	call   c001b037 <Reg::readInt(char*, char*, int*)>
c001b1b8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1c1:	0f 95 02             	setne  BYTE PTR [edx]
c001b1c4:	83 c4 2c             	add    esp,0x2c
c001b1c7:	c3                   	ret    

c001b1c8 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1c8:	53                   	push   ebx
c001b1c9:	83 ec 1c             	sub    esp,0x1c
c001b1cc:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1d0:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1d4:	50                   	push   eax
c001b1d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1dd:	e8 c1 ff ff ff       	call   c001b1a3 <Reg::readBool(char*, char*, bool*)>
c001b1e2:	83 c4 10             	add    esp,0x10
c001b1e5:	84 c0                	test   al,al
c001b1e7:	74 04                	je     c001b1ed <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1e9:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1ed:	88 d8                	mov    al,bl
c001b1ef:	83 c4 18             	add    esp,0x18
c001b1f2:	5b                   	pop    ebx
c001b1f3:	c3                   	ret    

c001b1f4 <Reg::readIntWithDefault(char*, char*, int)>:
c001b1f4:	53                   	push   ebx
c001b1f5:	83 ec 1c             	sub    esp,0x1c
c001b1f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b200:	50                   	push   eax
c001b201:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b205:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b209:	e8 29 fe ff ff       	call   c001b037 <Reg::readInt(char*, char*, int*)>
c001b20e:	83 c4 10             	add    esp,0x10
c001b211:	84 c0                	test   al,al
c001b213:	74 04                	je     c001b219 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b215:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b219:	89 d8                	mov    eax,ebx
c001b21b:	83 c4 18             	add    esp,0x18
c001b21e:	5b                   	pop    ebx
c001b21f:	c3                   	ret    

c001b220 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b220:	57                   	push   edi
c001b221:	56                   	push   esi
c001b222:	53                   	push   ebx
c001b223:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b227:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b22b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b22f:	56                   	push   esi
c001b230:	53                   	push   ebx
c001b231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b239:	e8 e4 fe ff ff       	call   c001b122 <Reg::readString(char*, char*, char*, int)>
c001b23e:	83 c4 10             	add    esp,0x10
c001b241:	84 c0                	test   al,al
c001b243:	75 1b                	jne    c001b260 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b245:	50                   	push   eax
c001b246:	56                   	push   esi
c001b247:	4e                   	dec    esi
c001b248:	6a 00                	push   0x0
c001b24a:	53                   	push   ebx
c001b24b:	e8 28 55 fe ff       	call   c0000778 <memset>
c001b250:	83 c4 0c             	add    esp,0xc
c001b253:	56                   	push   esi
c001b254:	57                   	push   edi
c001b255:	53                   	push   ebx
c001b256:	89 fb                	mov    ebx,edi
c001b258:	e8 e7 54 fe ff       	call   c0000744 <memcpy>
c001b25d:	83 c4 10             	add    esp,0x10
c001b260:	89 d8                	mov    eax,ebx
c001b262:	5b                   	pop    ebx
c001b263:	5e                   	pop    esi
c001b264:	5f                   	pop    edi
c001b265:	c3                   	ret    

c001b266 <Sys::eject(regs*)>:
c001b266:	83 ec 0c             	sub    esp,0xc
c001b269:	83 ca ff             	or     edx,0xffffffff
c001b26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b270:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b273:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b278:	83 e9 41             	sub    ecx,0x41
c001b27b:	83 f9 19             	cmp    ecx,0x19
c001b27e:	77 18                	ja     c001b298 <Sys::eject(regs*)+0x32>
c001b280:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c001b287:	85 c9                	test   ecx,ecx
c001b289:	74 0d                	je     c001b298 <Sys::eject(regs*)+0x32>
c001b28b:	83 ec 0c             	sub    esp,0xc
c001b28e:	51                   	push   ecx
c001b28f:	e8 78 b4 ff ff       	call   c001670c <LogicalDisk::eject()>
c001b294:	83 c4 10             	add    esp,0x10
c001b297:	99                   	cdq    
c001b298:	83 c4 0c             	add    esp,0xc
c001b29b:	c3                   	ret    

c001b29c <Sys::exit(regs*)>:
c001b29c:	83 ec 18             	sub    esp,0x18
c001b29f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2a3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2a6:	e8 94 35 00 00       	call   c001e83f <terminateTask(int)>
c001b2ab:	83 c8 ff             	or     eax,0xffffffff
c001b2ae:	83 c4 1c             	add    esp,0x1c
c001b2b1:	89 c2                	mov    edx,eax
c001b2b3:	c3                   	ret    

c001b2b4 <Sys::getCwd(regs*)>:
c001b2b4:	83 ec 10             	sub    esp,0x10
c001b2b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2bb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2be:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2c6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2c9:	e8 e6 7f ff ff       	call   c00132b4 <Fs::getcwd(Process*, char*, int)>
c001b2ce:	83 c4 1c             	add    esp,0x1c
c001b2d1:	99                   	cdq    
c001b2d2:	c3                   	ret    

c001b2d3 <Sys::getPID(regs*)>:
c001b2d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2db:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2dd:	99                   	cdq    
c001b2de:	c3                   	ret    

c001b2df <Sys::getRAMData(regs*)>:
c001b2df:	8b 0d b4 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4b4
c001b2e5:	6b 05 b0 e4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e4b0,0x64
c001b2ec:	99                   	cdq    
c001b2ed:	f7 f9                	idiv   ecx
c001b2ef:	c1 e0 18             	shl    eax,0x18
c001b2f2:	09 c8                	or     eax,ecx
c001b2f4:	99                   	cdq    
c001b2f5:	c3                   	ret    

c001b2f6 <Sys::loadDLL(regs*)>:
c001b2f6:	56                   	push   esi
c001b2f7:	53                   	push   ebx
c001b2f8:	31 d2                	xor    edx,edx
c001b2fa:	51                   	push   ecx
c001b2fb:	b8 01 00 00 00       	mov    eax,0x1
c001b300:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b304:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b308:	0f 84 8c 00 00 00    	je     c001b39a <Sys::loadDLL(regs*)+0xa4>
c001b30e:	83 ec 0c             	sub    esp,0xc
c001b311:	68 14 01 00 00       	push   0x114
c001b316:	e8 28 45 ff ff       	call   c000f843 <malloc>
c001b31b:	83 c4 0c             	add    esp,0xc
c001b31e:	89 c3                	mov    ebx,eax
c001b320:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b325:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b328:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b32b:	53                   	push   ebx
c001b32c:	e8 81 81 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001b331:	83 c4 10             	add    esp,0x10
c001b334:	31 d2                	xor    edx,edx
c001b336:	b8 02 00 00 00       	mov    eax,0x2
c001b33b:	85 db                	test   ebx,ebx
c001b33d:	74 5b                	je     c001b39a <Sys::loadDLL(regs*)+0xa4>
c001b33f:	83 ec 0c             	sub    esp,0xc
c001b342:	53                   	push   ebx
c001b343:	e8 3c 84 ff ff       	call   c0013784 <File::exists()>
c001b348:	83 c4 10             	add    esp,0x10
c001b34b:	84 c0                	test   al,al
c001b34d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b34f:	75 11                	jne    c001b362 <Sys::loadDLL(regs*)+0x6c>
c001b351:	83 ec 0c             	sub    esp,0xc
c001b354:	53                   	push   ebx
c001b355:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b358:	83 c4 10             	add    esp,0x10
c001b35b:	b8 03 00 00 00       	mov    eax,0x3
c001b360:	eb 36                	jmp    c001b398 <Sys::loadDLL(regs*)+0xa2>
c001b362:	83 ec 0c             	sub    esp,0xc
c001b365:	53                   	push   ebx
c001b366:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b369:	58                   	pop    eax
c001b36a:	5a                   	pop    edx
c001b36b:	6a 00                	push   0x0
c001b36d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b370:	e8 c5 23 00 00       	call   c001d73a <Thr::loadDLL(char const*, bool)>
c001b375:	83 c4 10             	add    esp,0x10
c001b378:	89 c1                	mov    ecx,eax
c001b37a:	31 d2                	xor    edx,edx
c001b37c:	b8 04 00 00 00       	mov    eax,0x4
c001b381:	85 c9                	test   ecx,ecx
c001b383:	74 15                	je     c001b39a <Sys::loadDLL(regs*)+0xa4>
c001b385:	53                   	push   ebx
c001b386:	53                   	push   ebx
c001b387:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c001b38d:	51                   	push   ecx
c001b38e:	e8 f6 25 00 00       	call   c001d989 <Thr::executeDLL(unsigned long, void*)>
c001b393:	83 c4 10             	add    esp,0x10
c001b396:	31 c0                	xor    eax,eax
c001b398:	31 d2                	xor    edx,edx
c001b39a:	59                   	pop    ecx
c001b39b:	5b                   	pop    ebx
c001b39c:	5e                   	pop    esi
c001b39d:	c3                   	ret    

c001b39e <Sys::read(regs*)>:
c001b39e:	57                   	push   edi
c001b39f:	56                   	push   esi
c001b3a0:	53                   	push   ebx
c001b3a1:	83 ec 10             	sub    esp,0x10
c001b3a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3ab:	83 f8 02             	cmp    eax,0x2
c001b3ae:	77 10                	ja     c001b3c0 <Sys::read(regs*)+0x22>
c001b3b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3b8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3be:	eb 0e                	jmp    c001b3ce <Sys::read(regs*)+0x30>
c001b3c0:	83 ec 0c             	sub    esp,0xc
c001b3c3:	50                   	push   eax
c001b3c4:	e8 24 66 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b3c9:	83 c4 10             	add    esp,0x10
c001b3cc:	89 c1                	mov    ecx,eax
c001b3ce:	83 c8 ff             	or     eax,0xffffffff
c001b3d1:	85 c9                	test   ecx,ecx
c001b3d3:	89 c2                	mov    edx,eax
c001b3d5:	74 28                	je     c001b3ff <Sys::read(regs*)+0x61>
c001b3d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3df:	31 ff                	xor    edi,edi
c001b3e1:	83 ec 0c             	sub    esp,0xc
c001b3e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3e6:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3ea:	52                   	push   edx
c001b3eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3ee:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3f1:	57                   	push   edi
c001b3f2:	56                   	push   esi
c001b3f3:	51                   	push   ecx
c001b3f4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3fb:	83 c4 20             	add    esp,0x20
c001b3fe:	99                   	cdq    
c001b3ff:	83 c4 10             	add    esp,0x10
c001b402:	5b                   	pop    ebx
c001b403:	5e                   	pop    esi
c001b404:	5f                   	pop    edi
c001b405:	c3                   	ret    

c001b406 <Sys::sbrk(regs*)>:
c001b406:	56                   	push   esi
c001b407:	53                   	push   ebx
c001b408:	50                   	push   eax
c001b409:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b40e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b412:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b415:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b418:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b41e:	85 db                	test   ebx,ebx
c001b420:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b423:	74 02                	je     c001b427 <Sys::sbrk(regs*)+0x21>
c001b425:	79 06                	jns    c001b42d <Sys::sbrk(regs*)+0x27>
c001b427:	89 f0                	mov    eax,esi
c001b429:	31 d2                	xor    edx,edx
c001b42b:	eb 2a                	jmp    c001b457 <Sys::sbrk(regs*)+0x51>
c001b42d:	83 c8 ff             	or     eax,0xffffffff
c001b430:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b436:	89 c2                	mov    edx,eax
c001b438:	77 1d                	ja     c001b457 <Sys::sbrk(regs*)+0x51>
c001b43a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b440:	50                   	push   eax
c001b441:	c1 ea 0c             	shr    edx,0xc
c001b444:	68 07 0c 00 00       	push   0xc07
c001b449:	52                   	push   edx
c001b44a:	51                   	push   ecx
c001b44b:	e8 e0 6f ff ff       	call   c0012430 <VAS::allocatePages(int, int)>
c001b450:	89 f0                	mov    eax,esi
c001b452:	31 d2                	xor    edx,edx
c001b454:	83 c4 10             	add    esp,0x10
c001b457:	59                   	pop    ecx
c001b458:	5b                   	pop    ebx
c001b459:	5e                   	pop    esi
c001b45a:	c3                   	ret    

c001b45b <Sys::setCwd(regs*)>:
c001b45b:	83 ec 14             	sub    esp,0x14
c001b45e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b462:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b465:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b46a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b46d:	e8 b1 83 ff ff       	call   c0013823 <Fs::setcwd(Process*, char*)>
c001b472:	83 c4 1c             	add    esp,0x1c
c001b475:	99                   	cdq    
c001b476:	c3                   	ret    

c001b477 <Sys::setTime(regs*)>:
c001b477:	55                   	push   ebp
c001b478:	31 d2                	xor    edx,edx
c001b47a:	57                   	push   edi
c001b47b:	bf 18 00 00 00       	mov    edi,0x18
c001b480:	56                   	push   esi
c001b481:	53                   	push   ebx
c001b482:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b487:	83 ec 30             	sub    esp,0x30
c001b48a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b48e:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b491:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b494:	f7 f3                	div    ebx
c001b496:	89 d6                	mov    esi,edx
c001b498:	31 d2                	xor    edx,edx
c001b49a:	f7 f3                	div    ebx
c001b49c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b49f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4a3:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4a8:	31 d2                	xor    edx,edx
c001b4aa:	f7 f3                	div    ebx
c001b4ac:	31 d2                	xor    edx,edx
c001b4ae:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4b3:	f7 f7                	div    edi
c001b4b5:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4b8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4bc:	0f b7 cd             	movzx  ecx,bp
c001b4bf:	56                   	push   esi
c001b4c0:	89 c7                	mov    edi,eax
c001b4c2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4c6:	c1 e6 10             	shl    esi,0x10
c001b4c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4cd:	83 e7 1f             	and    edi,0x1f
c001b4d0:	51                   	push   ecx
c001b4d1:	47                   	inc    edi
c001b4d2:	c1 e8 05             	shr    eax,0x5
c001b4d5:	31 d2                	xor    edx,edx
c001b4d7:	f7 f3                	div    ebx
c001b4d9:	31 db                	xor    ebx,ebx
c001b4db:	52                   	push   edx
c001b4dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4e0:	57                   	push   edi
c001b4e1:	68 85 bd 02 c0       	push   0xc002bd85
c001b4e6:	e8 6f 7a ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001b4eb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4ef:	89 f8                	mov    eax,edi
c001b4f1:	31 c9                	xor    ecx,ecx
c001b4f3:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4f7:	88 c1                	mov    cl,al
c001b4f9:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4ff:	88 d5                	mov    ch,dl
c001b501:	c1 e0 10             	shl    eax,0x10
c001b504:	0f b7 d1             	movzx  edx,cx
c001b507:	09 c2                	or     edx,eax
c001b509:	89 d8                	mov    eax,ebx
c001b50b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b510:	09 f0                	or     eax,esi
c001b512:	89 c3                	mov    ebx,eax
c001b514:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b518:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b51c:	83 c4 18             	add    esp,0x18
c001b51f:	53                   	push   ebx
c001b520:	52                   	push   edx
c001b521:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b525:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b529:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b52d:	e8 0b 8a ff ff       	call   c0013f3d <datetimeToSeconds(datetime_t)>
c001b532:	83 c4 0c             	add    esp,0xc
c001b535:	52                   	push   edx
c001b536:	50                   	push   eax
c001b537:	56                   	push   esi
c001b538:	e8 87 8b ff ff       	call   c00140c4 <secondsToDatetime(unsigned long long)>
c001b53d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b541:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b545:	51                   	push   ecx
c001b546:	89 d6                	mov    esi,edx
c001b548:	51                   	push   ecx
c001b549:	c1 ee 10             	shr    esi,0x10
c001b54c:	89 f3                	mov    ebx,esi
c001b54e:	0f b6 f3             	movzx  esi,bl
c001b551:	56                   	push   esi
c001b552:	0f b6 f6             	movzx  esi,dh
c001b555:	0f b6 d2             	movzx  edx,dl
c001b558:	56                   	push   esi
c001b559:	52                   	push   edx
c001b55a:	89 c2                	mov    edx,eax
c001b55c:	c1 ea 10             	shr    edx,0x10
c001b55f:	52                   	push   edx
c001b560:	0f b6 d4             	movzx  edx,ah
c001b563:	0f b6 c0             	movzx  eax,al
c001b566:	52                   	push   edx
c001b567:	50                   	push   eax
c001b568:	68 a1 bd 02 c0       	push   0xc002bda1
c001b56d:	e8 e8 79 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001b572:	83 c4 2c             	add    esp,0x2c
c001b575:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001b57a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b57e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b582:	53                   	push   ebx
c001b583:	51                   	push   ecx
c001b584:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b58a:	e8 d5 8a ff ff       	call   c0014064 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b58f:	83 f0 01             	xor    eax,0x1
c001b592:	31 d2                	xor    edx,edx
c001b594:	0f b6 c0             	movzx  eax,al
c001b597:	83 c4 3c             	add    esp,0x3c
c001b59a:	5b                   	pop    ebx
c001b59b:	5e                   	pop    esi
c001b59c:	5f                   	pop    edi
c001b59d:	5d                   	pop    ebp
c001b59e:	c3                   	ret    

c001b59f <Sys::timezone(regs*)>:
c001b59f:	53                   	push   ebx
c001b5a0:	83 ec 08             	sub    esp,0x8
c001b5a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5a7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5ab:	75 17                	jne    c001b5c4 <Sys::timezone(regs*)+0x25>
c001b5ad:	83 ec 0c             	sub    esp,0xc
c001b5b0:	68 bd bd 02 c0       	push   0xc002bdbd
c001b5b5:	e8 a0 79 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001b5ba:	83 c8 ff             	or     eax,0xffffffff
c001b5bd:	83 c4 10             	add    esp,0x10
c001b5c0:	89 c2                	mov    edx,eax
c001b5c2:	eb 20                	jmp    c001b5e4 <Sys::timezone(regs*)+0x45>
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	68 f5 bd 02 c0       	push   0xc002bdf5
c001b5cc:	e8 89 79 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001b5d1:	58                   	pop    eax
c001b5d2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5d5:	e8 ec 87 ff ff       	call   c0013dc6 <User::loadClockSettings(int)>
c001b5da:	83 c4 10             	add    esp,0x10
c001b5dd:	b8 01 00 00 00       	mov    eax,0x1
c001b5e2:	31 d2                	xor    edx,edx
c001b5e4:	83 c4 08             	add    esp,0x8
c001b5e7:	5b                   	pop    ebx
c001b5e8:	c3                   	ret    

c001b5e9 <Sys::write(regs*)>:
c001b5e9:	57                   	push   edi
c001b5ea:	56                   	push   esi
c001b5eb:	53                   	push   ebx
c001b5ec:	83 ec 10             	sub    esp,0x10
c001b5ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5f6:	83 f8 02             	cmp    eax,0x2
c001b5f9:	77 10                	ja     c001b60b <Sys::write(regs*)+0x22>
c001b5fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b600:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b603:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b609:	eb 0e                	jmp    c001b619 <Sys::write(regs*)+0x30>
c001b60b:	83 ec 0c             	sub    esp,0xc
c001b60e:	50                   	push   eax
c001b60f:	e8 d9 63 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b614:	83 c4 10             	add    esp,0x10
c001b617:	89 c1                	mov    ecx,eax
c001b619:	83 c8 ff             	or     eax,0xffffffff
c001b61c:	85 c9                	test   ecx,ecx
c001b61e:	89 c2                	mov    edx,eax
c001b620:	74 28                	je     c001b64a <Sys::write(regs*)+0x61>
c001b622:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b62a:	31 ff                	xor    edi,edi
c001b62c:	83 ec 0c             	sub    esp,0xc
c001b62f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b631:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b635:	52                   	push   edx
c001b636:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b639:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b63c:	57                   	push   edi
c001b63d:	56                   	push   esi
c001b63e:	51                   	push   ecx
c001b63f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b642:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b646:	83 c4 20             	add    esp,0x20
c001b649:	99                   	cdq    
c001b64a:	83 c4 10             	add    esp,0x10
c001b64d:	5b                   	pop    ebx
c001b64e:	5e                   	pop    esi
c001b64f:	5f                   	pop    edi
c001b650:	c3                   	ret    

c001b651 <Sys::wsbe(regs*)>:
c001b651:	57                   	push   edi
c001b652:	b9 0b 00 00 00       	mov    ecx,0xb
c001b657:	56                   	push   esi
c001b658:	be 34 be 02 c0       	mov    esi,0xc002be34
c001b65d:	53                   	push   ebx
c001b65e:	83 ec 30             	sub    esp,0x30
c001b661:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b665:	fc                   	cld    
c001b666:	83 ec 0c             	sub    esp,0xc
c001b669:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b66b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b66f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b674:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b677:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b67d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b67f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b682:	57                   	push   edi
c001b683:	e8 0c 51 fe ff       	call   c0000794 <strlen>
c001b688:	5a                   	pop    edx
c001b689:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b68d:	52                   	push   edx
c001b68e:	31 d2                	xor    edx,edx
c001b690:	57                   	push   edi
c001b691:	52                   	push   edx
c001b692:	50                   	push   eax
c001b693:	56                   	push   esi
c001b694:	ff d3                	call   ebx
c001b696:	83 c4 14             	add    esp,0x14
c001b699:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b69d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6a0:	e8 9a 31 00 00       	call   c001e83f <terminateTask(int)>
c001b6a5:	83 c4 40             	add    esp,0x40
c001b6a8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6ad:	5b                   	pop    ebx
c001b6ae:	31 d2                	xor    edx,edx
c001b6b0:	5e                   	pop    esi
c001b6b1:	5f                   	pop    edi
c001b6b2:	c3                   	ret    

c001b6b3 <Sys::yield(regs*)>:
c001b6b3:	57                   	push   edi
c001b6b4:	56                   	push   esi
c001b6b5:	53                   	push   ebx
c001b6b6:	e8 41 27 00 00       	call   c001ddfc <lockScheduler()>
c001b6bb:	e8 78 2a 00 00       	call   c001e138 <schedule()>
c001b6c0:	e8 39 27 00 00       	call   c001ddfe <unlockScheduler()>
c001b6c5:	8b 35 f0 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002eaf0
c001b6cb:	8b 3d f4 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eaf4
c001b6d1:	89 f0                	mov    eax,esi
c001b6d3:	89 fb                	mov    ebx,edi
c001b6d5:	89 f1                	mov    ecx,esi
c001b6d7:	c1 e0 07             	shl    eax,0x7
c001b6da:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6de:	25 80 30 0f 00       	and    eax,0xf3080
c001b6e3:	c1 eb 17             	shr    ebx,0x17
c001b6e6:	31 c8                	xor    eax,ecx
c001b6e8:	89 da                	mov    edx,ebx
c001b6ea:	5b                   	pop    ebx
c001b6eb:	5e                   	pop    esi
c001b6ec:	5f                   	pop    edi
c001b6ed:	c3                   	ret    

c001b6ee <sysCallSeekDir(regs*)>:
c001b6ee:	31 c0                	xor    eax,eax
c001b6f0:	31 d2                	xor    edx,edx
c001b6f2:	c3                   	ret    

c001b6f3 <sysCallTellDir(regs*)>:
c001b6f3:	31 c0                	xor    eax,eax
c001b6f5:	31 d2                	xor    edx,edx
c001b6f7:	c3                   	ret    

c001b6f8 <sysCallVerify(regs*)>:
c001b6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6fc:	31 d2                	xor    edx,edx
c001b6fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b701:	c3                   	ret    

c001b702 <sysFormatDisk(regs*)>:
c001b702:	56                   	push   esi
c001b703:	53                   	push   ebx
c001b704:	53                   	push   ebx
c001b705:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b709:	8b 1d f0 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5f0
c001b70f:	eb 25                	jmp    c001b736 <sysFormatDisk(regs*)+0x34>
c001b711:	83 ec 0c             	sub    esp,0xc
c001b714:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b717:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b719:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b71c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b71f:	50                   	push   eax
c001b720:	ff 34 85 80 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1580]
c001b727:	53                   	push   ebx
c001b728:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b72b:	83 c4 20             	add    esp,0x20
c001b72e:	83 f8 08             	cmp    eax,0x8
c001b731:	75 12                	jne    c001b745 <sysFormatDisk(regs*)+0x43>
c001b733:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b736:	85 db                	test   ebx,ebx
c001b738:	75 d7                	jne    c001b711 <sysFormatDisk(regs*)+0xf>
c001b73a:	59                   	pop    ecx
c001b73b:	b8 03 00 00 00       	mov    eax,0x3
c001b740:	31 d2                	xor    edx,edx
c001b742:	5b                   	pop    ebx
c001b743:	5e                   	pop    esi
c001b744:	c3                   	ret    
c001b745:	85 c0                	test   eax,eax
c001b747:	74 1b                	je     c001b764 <sysFormatDisk(regs*)+0x62>
c001b749:	83 f8 09             	cmp    eax,0x9
c001b74c:	74 0b                	je     c001b759 <sysFormatDisk(regs*)+0x57>
c001b74e:	59                   	pop    ecx
c001b74f:	b8 02 00 00 00       	mov    eax,0x2
c001b754:	31 d2                	xor    edx,edx
c001b756:	5b                   	pop    ebx
c001b757:	5e                   	pop    esi
c001b758:	c3                   	ret    
c001b759:	59                   	pop    ecx
c001b75a:	b8 01 00 00 00       	mov    eax,0x1
c001b75f:	31 d2                	xor    edx,edx
c001b761:	5b                   	pop    ebx
c001b762:	5e                   	pop    esi
c001b763:	c3                   	ret    
c001b764:	59                   	pop    ecx
c001b765:	31 c0                	xor    eax,eax
c001b767:	31 d2                	xor    edx,edx
c001b769:	5b                   	pop    ebx
c001b76a:	5e                   	pop    esi
c001b76b:	c3                   	ret    

c001b76c <sysSetDiskVolumeLabel(regs*)>:
c001b76c:	56                   	push   esi
c001b76d:	53                   	push   ebx
c001b76e:	53                   	push   ebx
c001b76f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b773:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b776:	83 f8 19             	cmp    eax,0x19
c001b779:	77 29                	ja     c001b7a4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b77b:	8b 0c 85 80 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1580]
c001b782:	85 c9                	test   ecx,ecx
c001b784:	74 1e                	je     c001b7a4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b786:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b789:	85 d2                	test   edx,edx
c001b78b:	74 17                	je     c001b7a4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b78d:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b793:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b795:	52                   	push   edx
c001b796:	50                   	push   eax
c001b797:	51                   	push   ecx
c001b798:	53                   	push   ebx
c001b799:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b79c:	83 c4 10             	add    esp,0x10
c001b79f:	99                   	cdq    
c001b7a0:	59                   	pop    ecx
c001b7a1:	5b                   	pop    ebx
c001b7a2:	5e                   	pop    esi
c001b7a3:	c3                   	ret    
c001b7a4:	59                   	pop    ecx
c001b7a5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7af:	5b                   	pop    ebx
c001b7b0:	5e                   	pop    esi
c001b7b1:	c3                   	ret    

c001b7b2 <sysGetDiskVolumeLabel(regs*)>:
c001b7b2:	57                   	push   edi
c001b7b3:	56                   	push   esi
c001b7b4:	53                   	push   ebx
c001b7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7bc:	83 fa 19             	cmp    edx,0x19
c001b7bf:	77 34                	ja     c001b7f5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c1:	8b 0c 95 80 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1580]
c001b7c8:	85 c9                	test   ecx,ecx
c001b7ca:	74 29                	je     c001b7f5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7cc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7cf:	85 db                	test   ebx,ebx
c001b7d1:	74 22                	je     c001b7f5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7d3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7d6:	85 c0                	test   eax,eax
c001b7d8:	74 1b                	je     c001b7f5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7da:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7e0:	83 ec 0c             	sub    esp,0xc
c001b7e3:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7e5:	50                   	push   eax
c001b7e6:	53                   	push   ebx
c001b7e7:	52                   	push   edx
c001b7e8:	51                   	push   ecx
c001b7e9:	56                   	push   esi
c001b7ea:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7ed:	83 c4 20             	add    esp,0x20
c001b7f0:	99                   	cdq    
c001b7f1:	5b                   	pop    ebx
c001b7f2:	5e                   	pop    esi
c001b7f3:	5f                   	pop    edi
c001b7f4:	c3                   	ret    
c001b7f5:	5b                   	pop    ebx
c001b7f6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b800:	5e                   	pop    esi
c001b801:	5f                   	pop    edi
c001b802:	c3                   	ret    

c001b803 <sysShutdown(regs*)>:
c001b803:	83 ec 0c             	sub    esp,0xc
c001b806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b80d:	85 c0                	test   eax,eax
c001b80f:	74 18                	je     c001b829 <sysShutdown(regs*)+0x26>
c001b811:	83 f8 01             	cmp    eax,0x1
c001b814:	74 38                	je     c001b84e <sysShutdown(regs*)+0x4b>
c001b816:	83 f8 02             	cmp    eax,0x2
c001b819:	74 24                	je     c001b83f <sysShutdown(regs*)+0x3c>
c001b81b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b820:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b825:	83 c4 0c             	add    esp,0xc
c001b828:	c3                   	ret    
c001b829:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001b82e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b830:	6a 00                	push   0x0
c001b832:	6a 00                	push   0x0
c001b834:	6a 00                	push   0x0
c001b836:	50                   	push   eax
c001b837:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b83a:	83 c4 10             	add    esp,0x10
c001b83d:	eb dc                	jmp    c001b81b <sysShutdown(regs*)+0x18>
c001b83f:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001b844:	8b 10                	mov    edx,DWORD PTR [eax]
c001b846:	6a 00                	push   0x0
c001b848:	6a 00                	push   0x0
c001b84a:	6a 01                	push   0x1
c001b84c:	eb e8                	jmp    c001b836 <sysShutdown(regs*)+0x33>
c001b84e:	a1 20 0b 03 c0       	mov    eax,ds:0xc0030b20
c001b853:	85 c0                	test   eax,eax
c001b855:	74 02                	je     c001b859 <sysShutdown(regs*)+0x56>
c001b857:	ff d0                	call   eax
c001b859:	31 c0                	xor    eax,eax
c001b85b:	31 d2                	xor    edx,edx
c001b85d:	83 c4 0c             	add    esp,0xc
c001b860:	c3                   	ret    

c001b861 <sysCallRealpath(regs*)>:
c001b861:	83 ec 0c             	sub    esp,0xc
c001b864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b868:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b86b:	85 d2                	test   edx,edx
c001b86d:	74 07                	je     c001b876 <sysCallRealpath(regs*)+0x15>
c001b86f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b872:	85 c0                	test   eax,eax
c001b874:	75 0b                	jne    c001b881 <sysCallRealpath(regs*)+0x20>
c001b876:	b8 01 00 00 00       	mov    eax,0x1
c001b87b:	31 d2                	xor    edx,edx
c001b87d:	83 c4 0c             	add    esp,0xc
c001b880:	c3                   	ret    
c001b881:	51                   	push   ecx
c001b882:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b888:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b88b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b891:	51                   	push   ecx
c001b892:	52                   	push   edx
c001b893:	50                   	push   eax
c001b894:	e8 6f 7a ff ff       	call   c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b899:	83 c4 10             	add    esp,0x10
c001b89c:	31 c0                	xor    eax,eax
c001b89e:	31 d2                	xor    edx,edx
c001b8a0:	83 c4 0c             	add    esp,0xc
c001b8a3:	c3                   	ret    

c001b8a4 <sysCallGetArgc(regs*)>:
c001b8a4:	83 ec 14             	sub    esp,0x14
c001b8a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8af:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8b5:	68 60 be 02 c0       	push   0xc002be60
c001b8ba:	e8 9b 76 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001b8bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8c7:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8cd:	83 c4 1c             	add    esp,0x1c
c001b8d0:	99                   	cdq    
c001b8d1:	c3                   	ret    

c001b8d2 <sysCallReadDir(regs*)>:
c001b8d2:	53                   	push   ebx
c001b8d3:	83 ec 18             	sub    esp,0x18
c001b8d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8da:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8dd:	83 f8 02             	cmp    eax,0x2
c001b8e0:	76 53                	jbe    c001b935 <sysCallReadDir(regs*)+0x63>
c001b8e2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8e5:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8eb:	77 4f                	ja     c001b93c <sysCallReadDir(regs*)+0x6a>
c001b8ed:	83 ec 0c             	sub    esp,0xc
c001b8f0:	50                   	push   eax
c001b8f1:	e8 f7 60 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b8f6:	83 c4 10             	add    esp,0x10
c001b8f9:	85 c0                	test   eax,eax
c001b8fb:	74 50                	je     c001b94d <sysCallReadDir(regs*)+0x7b>
c001b8fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b905:	83 ec 0c             	sub    esp,0xc
c001b908:	8b 10                	mov    edx,DWORD PTR [eax]
c001b90a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b90e:	51                   	push   ecx
c001b90f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b912:	6a 00                	push   0x0
c001b914:	68 10 01 00 00       	push   0x110
c001b919:	50                   	push   eax
c001b91a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b91d:	83 c4 20             	add    esp,0x20
c001b920:	85 c0                	test   eax,eax
c001b922:	74 38                	je     c001b95c <sysCallReadDir(regs*)+0x8a>
c001b924:	83 f8 07             	cmp    eax,0x7
c001b927:	74 0c                	je     c001b935 <sysCallReadDir(regs*)+0x63>
c001b929:	b8 02 00 00 00       	mov    eax,0x2
c001b92e:	31 d2                	xor    edx,edx
c001b930:	83 c4 18             	add    esp,0x18
c001b933:	5b                   	pop    ebx
c001b934:	c3                   	ret    
c001b935:	b8 01 00 00 00       	mov    eax,0x1
c001b93a:	eb f2                	jmp    c001b92e <sysCallReadDir(regs*)+0x5c>
c001b93c:	83 ec 08             	sub    esp,0x8
c001b93f:	52                   	push   edx
c001b940:	68 78 bf 02 c0       	push   0xc002bf78
c001b945:	e8 10 76 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001b94a:	83 c4 10             	add    esp,0x10
c001b94d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b952:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b957:	83 c4 18             	add    esp,0x18
c001b95a:	5b                   	pop    ebx
c001b95b:	c3                   	ret    
c001b95c:	31 c0                	xor    eax,eax
c001b95e:	eb ce                	jmp    c001b92e <sysCallReadDir(regs*)+0x5c>

c001b960 <sysCallIsATTY(regs*)>:
c001b960:	83 ec 0c             	sub    esp,0xc
c001b963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b967:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b96a:	83 f8 02             	cmp    eax,0x2
c001b96d:	76 07                	jbe    c001b976 <sysCallIsATTY(regs*)+0x16>
c001b96f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b974:	75 26                	jne    c001b99c <sysCallIsATTY(regs*)+0x3c>
c001b976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b97e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b984:	85 c0                	test   eax,eax
c001b986:	74 24                	je     c001b9ac <sysCallIsATTY(regs*)+0x4c>
c001b988:	83 ec 0c             	sub    esp,0xc
c001b98b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b98d:	50                   	push   eax
c001b98e:	ff 12                	call   DWORD PTR [edx]
c001b990:	31 d2                	xor    edx,edx
c001b992:	0f b6 c0             	movzx  eax,al
c001b995:	83 c4 10             	add    esp,0x10
c001b998:	83 c4 0c             	add    esp,0xc
c001b99b:	c3                   	ret    
c001b99c:	83 ec 0c             	sub    esp,0xc
c001b99f:	50                   	push   eax
c001b9a0:	e8 48 60 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b9a5:	83 c4 10             	add    esp,0x10
c001b9a8:	85 c0                	test   eax,eax
c001b9aa:	75 dc                	jne    c001b988 <sysCallIsATTY(regs*)+0x28>
c001b9ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9b6:	83 c4 0c             	add    esp,0xc
c001b9b9:	c3                   	ret    

c001b9ba <sysCallSeek(regs*)>:
c001b9ba:	53                   	push   ebx
c001b9bb:	83 ec 08             	sub    esp,0x8
c001b9be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9c5:	83 f8 02             	cmp    eax,0x2
c001b9c8:	76 4a                	jbe    c001ba14 <sysCallSeek(regs*)+0x5a>
c001b9ca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9cf:	77 32                	ja     c001ba03 <sysCallSeek(regs*)+0x49>
c001b9d1:	83 ec 0c             	sub    esp,0xc
c001b9d4:	50                   	push   eax
c001b9d5:	e8 13 60 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b9da:	83 c4 0c             	add    esp,0xc
c001b9dd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9e0:	31 db                	xor    ebx,ebx
c001b9e2:	53                   	push   ebx
c001b9e3:	51                   	push   ecx
c001b9e4:	50                   	push   eax
c001b9e5:	e8 ea 7b ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001b9ea:	83 c4 10             	add    esp,0x10
c001b9ed:	85 c0                	test   eax,eax
c001b9ef:	0f 95 c0             	setne  al
c001b9f2:	31 d2                	xor    edx,edx
c001b9f4:	0f b6 c0             	movzx  eax,al
c001b9f7:	f7 d8                	neg    eax
c001b9f9:	83 d2 00             	adc    edx,0x0
c001b9fc:	83 c4 08             	add    esp,0x8
c001b9ff:	f7 da                	neg    edx
c001ba01:	5b                   	pop    ebx
c001ba02:	c3                   	ret    
c001ba03:	83 ec 08             	sub    esp,0x8
c001ba06:	50                   	push   eax
c001ba07:	68 6b be 02 c0       	push   0xc002be6b
c001ba0c:	e8 49 75 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001ba11:	83 c4 10             	add    esp,0x10
c001ba14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba19:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba1e:	83 c4 08             	add    esp,0x8
c001ba21:	5b                   	pop    ebx
c001ba22:	c3                   	ret    

c001ba23 <sysCallTell(regs*)>:
c001ba23:	53                   	push   ebx
c001ba24:	83 ec 08             	sub    esp,0x8
c001ba27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba2e:	83 f8 02             	cmp    eax,0x2
c001ba31:	76 5e                	jbe    c001ba91 <sysCallTell(regs*)+0x6e>
c001ba33:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba38:	77 2d                	ja     c001ba67 <sysCallTell(regs*)+0x44>
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	50                   	push   eax
c001ba3e:	e8 aa 5f ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001ba43:	5a                   	pop    edx
c001ba44:	59                   	pop    ecx
c001ba45:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba48:	50                   	push   eax
c001ba49:	e8 dc 7b ff ff       	call   c001362a <File::tell(unsigned long long*)>
c001ba4e:	83 c4 10             	add    esp,0x10
c001ba51:	85 c0                	test   eax,eax
c001ba53:	0f 95 c0             	setne  al
c001ba56:	31 d2                	xor    edx,edx
c001ba58:	0f b6 c0             	movzx  eax,al
c001ba5b:	f7 d8                	neg    eax
c001ba5d:	83 d2 00             	adc    edx,0x0
c001ba60:	83 c4 08             	add    esp,0x8
c001ba63:	f7 da                	neg    edx
c001ba65:	5b                   	pop    ebx
c001ba66:	c3                   	ret    
c001ba67:	83 ec 08             	sub    esp,0x8
c001ba6a:	50                   	push   eax
c001ba6b:	68 85 be 02 c0       	push   0xc002be85
c001ba70:	e8 e5 74 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001ba75:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba78:	83 c4 10             	add    esp,0x10
c001ba7b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba88:	31 d2                	xor    edx,edx
c001ba8a:	31 c0                	xor    eax,eax
c001ba8c:	83 c4 08             	add    esp,0x8
c001ba8f:	5b                   	pop    ebx
c001ba90:	c3                   	ret    
c001ba91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba96:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba9b:	83 c4 08             	add    esp,0x8
c001ba9e:	5b                   	pop    ebx
c001ba9f:	c3                   	ret    

c001baa0 <sysCallSize(regs*)>:
c001baa0:	53                   	push   ebx
c001baa1:	83 ec 18             	sub    esp,0x18
c001baa4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001baa8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baab:	83 f8 02             	cmp    eax,0x2
c001baae:	76 64                	jbe    c001bb14 <sysCallSize(regs*)+0x74>
c001bab0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bab5:	77 33                	ja     c001baea <sysCallSize(regs*)+0x4a>
c001bab7:	83 ec 0c             	sub    esp,0xc
c001baba:	50                   	push   eax
c001babb:	e8 2d 5f ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bac0:	83 c4 0c             	add    esp,0xc
c001bac3:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bac7:	52                   	push   edx
c001bac8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bacb:	50                   	push   eax
c001bacc:	e8 f1 7c ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c001bad1:	83 c4 10             	add    esp,0x10
c001bad4:	85 c0                	test   eax,eax
c001bad6:	0f 95 c0             	setne  al
c001bad9:	31 d2                	xor    edx,edx
c001badb:	0f b6 c0             	movzx  eax,al
c001bade:	f7 d8                	neg    eax
c001bae0:	83 d2 00             	adc    edx,0x0
c001bae3:	83 c4 18             	add    esp,0x18
c001bae6:	f7 da                	neg    edx
c001bae8:	5b                   	pop    ebx
c001bae9:	c3                   	ret    
c001baea:	83 ec 08             	sub    esp,0x8
c001baed:	50                   	push   eax
c001baee:	68 9f be 02 c0       	push   0xc002be9f
c001baf3:	e8 62 74 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001baf8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bafb:	83 c4 10             	add    esp,0x10
c001bafe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb0b:	31 d2                	xor    edx,edx
c001bb0d:	31 c0                	xor    eax,eax
c001bb0f:	83 c4 18             	add    esp,0x18
c001bb12:	5b                   	pop    ebx
c001bb13:	c3                   	ret    
c001bb14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb19:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb1e:	83 c4 18             	add    esp,0x18
c001bb21:	5b                   	pop    ebx
c001bb22:	c3                   	ret    

c001bb23 <sysCallSizeFromFilename(regs*)>:
c001bb23:	57                   	push   edi
c001bb24:	56                   	push   esi
c001bb25:	53                   	push   ebx
c001bb26:	83 ec 20             	sub    esp,0x20
c001bb29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb2d:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb30:	83 fb 02             	cmp    ebx,0x2
c001bb33:	0f 86 99 00 00 00    	jbe    c001bbd2 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb39:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb3f:	77 65                	ja     c001bba6 <sysCallSizeFromFilename(regs*)+0x83>
c001bb41:	83 ec 0c             	sub    esp,0xc
c001bb44:	68 14 01 00 00       	push   0x114
c001bb49:	e8 f5 3c ff ff       	call   c000f843 <malloc>
c001bb4e:	83 c4 0c             	add    esp,0xc
c001bb51:	89 c6                	mov    esi,eax
c001bb53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb58:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb5b:	53                   	push   ebx
c001bb5c:	56                   	push   esi
c001bb5d:	e8 50 79 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001bb62:	83 c4 0c             	add    esp,0xc
c001bb65:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb69:	50                   	push   eax
c001bb6a:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb6d:	56                   	push   esi
c001bb6e:	e8 4f 7c ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c001bb73:	83 c4 10             	add    esp,0x10
c001bb76:	85 f6                	test   esi,esi
c001bb78:	74 14                	je     c001bb8e <sysCallSizeFromFilename(regs*)+0x6b>
c001bb7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb7e:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb80:	83 ec 0c             	sub    esp,0xc
c001bb83:	56                   	push   esi
c001bb84:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb87:	83 c4 10             	add    esp,0x10
c001bb8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb8e:	85 c0                	test   eax,eax
c001bb90:	0f 95 c0             	setne  al
c001bb93:	31 d2                	xor    edx,edx
c001bb95:	0f b6 c0             	movzx  eax,al
c001bb98:	f7 d8                	neg    eax
c001bb9a:	83 d2 00             	adc    edx,0x0
c001bb9d:	83 c4 20             	add    esp,0x20
c001bba0:	f7 da                	neg    edx
c001bba2:	5b                   	pop    ebx
c001bba3:	5e                   	pop    esi
c001bba4:	5f                   	pop    edi
c001bba5:	c3                   	ret    
c001bba6:	83 ec 08             	sub    esp,0x8
c001bba9:	53                   	push   ebx
c001bbaa:	68 9f be 02 c0       	push   0xc002be9f
c001bbaf:	e8 a6 73 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001bbb4:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbb7:	83 c4 10             	add    esp,0x10
c001bbba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbc0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbc7:	31 d2                	xor    edx,edx
c001bbc9:	83 c4 20             	add    esp,0x20
c001bbcc:	31 c0                	xor    eax,eax
c001bbce:	5b                   	pop    ebx
c001bbcf:	5e                   	pop    esi
c001bbd0:	5f                   	pop    edi
c001bbd1:	c3                   	ret    
c001bbd2:	83 c4 20             	add    esp,0x20
c001bbd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbda:	5b                   	pop    ebx
c001bbdb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbe0:	5e                   	pop    esi
c001bbe1:	5f                   	pop    edi
c001bbe2:	c3                   	ret    

c001bbe3 <sysCallClose(regs*)>:
c001bbe3:	53                   	push   ebx
c001bbe4:	83 ec 08             	sub    esp,0x8
c001bbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbeb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbee:	83 f8 02             	cmp    eax,0x2
c001bbf1:	76 50                	jbe    c001bc43 <sysCallClose(regs*)+0x60>
c001bbf3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbf8:	74 58                	je     c001bc52 <sysCallClose(regs*)+0x6f>
c001bbfa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbff:	74 60                	je     c001bc61 <sysCallClose(regs*)+0x7e>
c001bc01:	77 2f                	ja     c001bc32 <sysCallClose(regs*)+0x4f>
c001bc03:	83 ec 0c             	sub    esp,0xc
c001bc06:	50                   	push   eax
c001bc07:	e8 e1 5d ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bc0c:	89 c3                	mov    ebx,eax
c001bc0e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc11:	e8 5e 79 ff ff       	call   c0013574 <File::close()>
c001bc16:	83 c4 10             	add    esp,0x10
c001bc19:	85 db                	test   ebx,ebx
c001bc1b:	74 0c                	je     c001bc29 <sysCallClose(regs*)+0x46>
c001bc1d:	83 ec 0c             	sub    esp,0xc
c001bc20:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc22:	53                   	push   ebx
c001bc23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc26:	83 c4 10             	add    esp,0x10
c001bc29:	31 c0                	xor    eax,eax
c001bc2b:	31 d2                	xor    edx,edx
c001bc2d:	83 c4 08             	add    esp,0x8
c001bc30:	5b                   	pop    ebx
c001bc31:	c3                   	ret    
c001bc32:	83 ec 08             	sub    esp,0x8
c001bc35:	50                   	push   eax
c001bc36:	68 9c bf 02 c0       	push   0xc002bf9c
c001bc3b:	e8 1a 73 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001bc40:	83 c4 10             	add    esp,0x10
c001bc43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc48:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc4d:	83 c4 08             	add    esp,0x8
c001bc50:	5b                   	pop    ebx
c001bc51:	c3                   	ret    
c001bc52:	83 ec 0c             	sub    esp,0xc
c001bc55:	68 ba be 02 c0       	push   0xc002beba
c001bc5a:	e8 fb 72 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001bc5f:	eb c5                	jmp    c001bc26 <sysCallClose(regs*)+0x43>
c001bc61:	83 ec 0c             	sub    esp,0xc
c001bc64:	68 c8 be 02 c0       	push   0xc002bec8
c001bc69:	eb ef                	jmp    c001bc5a <sysCallClose(regs*)+0x77>

c001bc6b <sysCallOpenDir(regs*)>:
c001bc6b:	56                   	push   esi
c001bc6c:	53                   	push   ebx
c001bc6d:	53                   	push   ebx
c001bc6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc72:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc75:	85 f6                	test   esi,esi
c001bc77:	74 59                	je     c001bcd2 <sysCallOpenDir(regs*)+0x67>
c001bc79:	83 ec 0c             	sub    esp,0xc
c001bc7c:	68 14 01 00 00       	push   0x114
c001bc81:	e8 bd 3b ff ff       	call   c000f843 <malloc>
c001bc86:	83 c4 0c             	add    esp,0xc
c001bc89:	89 c6                	mov    esi,eax
c001bc8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc90:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc93:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc96:	56                   	push   esi
c001bc97:	e8 c2 7c ff ff       	call   c001395e <Directory::Directory(char const*, Process*)>
c001bc9c:	83 c4 10             	add    esp,0x10
c001bc9f:	85 f6                	test   esi,esi
c001bca1:	74 2f                	je     c001bcd2 <sysCallOpenDir(regs*)+0x67>
c001bca3:	83 ec 0c             	sub    esp,0xc
c001bca6:	56                   	push   esi
c001bca7:	e8 16 7d ff ff       	call   c00139c2 <Directory::open()>
c001bcac:	83 c4 10             	add    esp,0x10
c001bcaf:	85 c0                	test   eax,eax
c001bcb1:	75 1f                	jne    c001bcd2 <sysCallOpenDir(regs*)+0x67>
c001bcb3:	83 ec 0c             	sub    esp,0xc
c001bcb6:	56                   	push   esi
c001bcb7:	e8 3c 5a ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001bcbc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcbf:	83 c4 10             	add    esp,0x10
c001bcc2:	89 02                	mov    DWORD PTR [edx],eax
c001bcc4:	c1 f8 1f             	sar    eax,0x1f
c001bcc7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcca:	31 c0                	xor    eax,eax
c001bccc:	59                   	pop    ecx
c001bccd:	31 d2                	xor    edx,edx
c001bccf:	5b                   	pop    ebx
c001bcd0:	5e                   	pop    esi
c001bcd1:	c3                   	ret    
c001bcd2:	59                   	pop    ecx
c001bcd3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcd8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcdd:	5b                   	pop    ebx
c001bcde:	5e                   	pop    esi
c001bcdf:	c3                   	ret    

c001bce0 <sysCallCloseDir(regs*)>:
c001bce0:	53                   	push   ebx
c001bce1:	83 ec 08             	sub    esp,0x8
c001bce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bceb:	83 f8 02             	cmp    eax,0x2
c001bcee:	76 47                	jbe    c001bd37 <sysCallCloseDir(regs*)+0x57>
c001bcf0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcf5:	77 2f                	ja     c001bd26 <sysCallCloseDir(regs*)+0x46>
c001bcf7:	83 ec 0c             	sub    esp,0xc
c001bcfa:	50                   	push   eax
c001bcfb:	e8 ed 5c ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bd00:	89 c3                	mov    ebx,eax
c001bd02:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd05:	e8 14 7d ff ff       	call   c0013a1e <Directory::close()>
c001bd0a:	83 c4 10             	add    esp,0x10
c001bd0d:	85 db                	test   ebx,ebx
c001bd0f:	74 0c                	je     c001bd1d <sysCallCloseDir(regs*)+0x3d>
c001bd11:	83 ec 0c             	sub    esp,0xc
c001bd14:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd16:	53                   	push   ebx
c001bd17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd1a:	83 c4 10             	add    esp,0x10
c001bd1d:	31 c0                	xor    eax,eax
c001bd1f:	31 d2                	xor    edx,edx
c001bd21:	83 c4 08             	add    esp,0x8
c001bd24:	5b                   	pop    ebx
c001bd25:	c3                   	ret    
c001bd26:	83 ec 08             	sub    esp,0x8
c001bd29:	50                   	push   eax
c001bd2a:	68 c4 bf 02 c0       	push   0xc002bfc4
c001bd2f:	e8 26 72 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001bd34:	83 c4 10             	add    esp,0x10
c001bd37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd41:	83 c4 08             	add    esp,0x8
c001bd44:	5b                   	pop    ebx
c001bd45:	c3                   	ret    

c001bd46 <sysCallMakeDir(regs*)>:
c001bd46:	56                   	push   esi
c001bd47:	53                   	push   ebx
c001bd48:	83 ec 10             	sub    esp,0x10
c001bd4b:	68 14 01 00 00       	push   0x114
c001bd50:	e8 ee 3a ff ff       	call   c000f843 <malloc>
c001bd55:	83 c4 0c             	add    esp,0xc
c001bd58:	89 c3                	mov    ebx,eax
c001bd5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd5f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd66:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd69:	53                   	push   ebx
c001bd6a:	e8 ef 7b ff ff       	call   c001395e <Directory::Directory(char const*, Process*)>
c001bd6f:	83 c4 10             	add    esp,0x10
c001bd72:	85 db                	test   ebx,ebx
c001bd74:	74 32                	je     c001bda8 <sysCallMakeDir(regs*)+0x62>
c001bd76:	83 ec 0c             	sub    esp,0xc
c001bd79:	53                   	push   ebx
c001bd7a:	e8 23 7e ff ff       	call   c0013ba2 <Directory::create()>
c001bd7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd82:	89 c6                	mov    esi,eax
c001bd84:	e8 95 7c ff ff       	call   c0013a1e <Directory::close()>
c001bd89:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd91:	83 c4 10             	add    esp,0x10
c001bd94:	31 c0                	xor    eax,eax
c001bd96:	59                   	pop    ecx
c001bd97:	85 f6                	test   esi,esi
c001bd99:	5b                   	pop    ebx
c001bd9a:	0f 95 c0             	setne  al
c001bd9d:	5e                   	pop    esi
c001bd9e:	31 d2                	xor    edx,edx
c001bda0:	f7 d8                	neg    eax
c001bda2:	83 d2 00             	adc    edx,0x0
c001bda5:	f7 da                	neg    edx
c001bda7:	c3                   	ret    
c001bda8:	59                   	pop    ecx
c001bda9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdb3:	5b                   	pop    ebx
c001bdb4:	5e                   	pop    esi
c001bdb5:	c3                   	ret    

c001bdb6 <sysCallWait(regs*)>:
c001bdb6:	83 ec 10             	sub    esp,0x10
c001bdb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdbd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdc0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdc3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdc6:	e8 e8 24 00 00       	call   c001e2b3 <waitTask(int, int*, int)>
c001bdcb:	83 c4 1c             	add    esp,0x1c
c001bdce:	99                   	cdq    
c001bdcf:	c3                   	ret    

c001bdd0 <sysCallNotImpl(regs*)>:
c001bdd0:	83 ec 18             	sub    esp,0x18
c001bdd3:	68 d6 be 02 c0       	push   0xc002bed6
c001bdd8:	e8 2a e8 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001bddd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bde2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bde7:	83 c4 1c             	add    esp,0x1c
c001bdea:	c3                   	ret    

c001bdeb <sysPanic(regs*)>:
c001bdeb:	83 ec 18             	sub    esp,0x18
c001bdee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdf2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdf5:	e8 0d e8 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001bdfa:	c7 04 24 f0 be 02 c0 	mov    DWORD PTR [esp],0xc002bef0
c001be01:	e8 01 e8 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001be06:	b8 01 00 00 00       	mov    eax,0x1
c001be0b:	31 d2                	xor    edx,edx
c001be0d:	83 c4 1c             	add    esp,0x1c
c001be10:	c3                   	ret    

c001be11 <sysCallRmdir(regs*)>:
c001be11:	56                   	push   esi
c001be12:	53                   	push   ebx
c001be13:	83 ec 20             	sub    esp,0x20
c001be16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be1a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be1d:	68 14 01 00 00       	push   0x114
c001be22:	e8 1c 3a ff ff       	call   c000f843 <malloc>
c001be27:	83 c4 0c             	add    esp,0xc
c001be2a:	89 c3                	mov    ebx,eax
c001be2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be31:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be34:	56                   	push   esi
c001be35:	53                   	push   ebx
c001be36:	e8 77 76 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001be3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be3e:	e8 4b 78 ff ff       	call   c001368e <File::unlink()>
c001be43:	83 c4 10             	add    esp,0x10
c001be46:	85 db                	test   ebx,ebx
c001be48:	74 14                	je     c001be5e <sysCallRmdir(regs*)+0x4d>
c001be4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be4e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be50:	83 ec 0c             	sub    esp,0xc
c001be53:	53                   	push   ebx
c001be54:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be57:	83 c4 10             	add    esp,0x10
c001be5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be5e:	85 c0                	test   eax,eax
c001be60:	0f 95 c0             	setne  al
c001be63:	31 d2                	xor    edx,edx
c001be65:	0f b6 c0             	movzx  eax,al
c001be68:	f7 d8                	neg    eax
c001be6a:	83 d2 00             	adc    edx,0x0
c001be6d:	83 c4 14             	add    esp,0x14
c001be70:	f7 da                	neg    edx
c001be72:	5b                   	pop    ebx
c001be73:	5e                   	pop    esi
c001be74:	c3                   	ret    

c001be75 <sysCallUnlink(regs*)>:
c001be75:	56                   	push   esi
c001be76:	53                   	push   ebx
c001be77:	83 ec 20             	sub    esp,0x20
c001be7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be7e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be81:	68 14 01 00 00       	push   0x114
c001be86:	e8 b8 39 ff ff       	call   c000f843 <malloc>
c001be8b:	83 c4 0c             	add    esp,0xc
c001be8e:	89 c3                	mov    ebx,eax
c001be90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be95:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be98:	56                   	push   esi
c001be99:	53                   	push   ebx
c001be9a:	e8 13 76 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001be9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bea2:	e8 e7 77 ff ff       	call   c001368e <File::unlink()>
c001bea7:	83 c4 10             	add    esp,0x10
c001beaa:	85 db                	test   ebx,ebx
c001beac:	74 14                	je     c001bec2 <sysCallUnlink(regs*)+0x4d>
c001beae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beb2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001beb4:	83 ec 0c             	sub    esp,0xc
c001beb7:	53                   	push   ebx
c001beb8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bebb:	83 c4 10             	add    esp,0x10
c001bebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bec2:	85 c0                	test   eax,eax
c001bec4:	0f 95 c0             	setne  al
c001bec7:	31 d2                	xor    edx,edx
c001bec9:	0f b6 c0             	movzx  eax,al
c001becc:	f7 d8                	neg    eax
c001bece:	83 d2 00             	adc    edx,0x0
c001bed1:	83 c4 14             	add    esp,0x14
c001bed4:	f7 da                	neg    edx
c001bed6:	5b                   	pop    ebx
c001bed7:	5e                   	pop    esi
c001bed8:	c3                   	ret    

c001bed9 <sysCallGetArgv(regs*)>:
c001bed9:	83 ec 0c             	sub    esp,0xc
c001bedc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bee0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bee3:	85 c0                	test   eax,eax
c001bee5:	78 2b                	js     c001bf12 <sysCallGetArgv(regs*)+0x39>
c001bee7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001beed:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bef0:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bef6:	7d 1a                	jge    c001bf12 <sysCallGetArgv(regs*)+0x39>
c001bef8:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001beff:	85 c0                	test   eax,eax
c001bf01:	74 17                	je     c001bf1a <sysCallGetArgv(regs*)+0x41>
c001bf03:	83 ec 08             	sub    esp,0x8
c001bf06:	50                   	push   eax
c001bf07:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf0a:	e8 25 49 fe ff       	call   c0000834 <strcpy>
c001bf0f:	83 c4 10             	add    esp,0x10
c001bf12:	31 c0                	xor    eax,eax
c001bf14:	31 d2                	xor    edx,edx
c001bf16:	83 c4 0c             	add    esp,0xc
c001bf19:	c3                   	ret    
c001bf1a:	b8 01 00 00 00       	mov    eax,0x1
c001bf1f:	31 d2                	xor    edx,edx
c001bf21:	83 c4 0c             	add    esp,0xc
c001bf24:	c3                   	ret    

c001bf25 <sysCallTTYName(regs*)>:
c001bf25:	56                   	push   esi
c001bf26:	53                   	push   ebx
c001bf27:	53                   	push   ebx
c001bf28:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf2c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf2f:	85 c0                	test   eax,eax
c001bf31:	74 5f                	je     c001bf92 <sysCallTTYName(regs*)+0x6d>
c001bf33:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf36:	83 f8 02             	cmp    eax,0x2
c001bf39:	77 3e                	ja     c001bf79 <sysCallTTYName(regs*)+0x54>
c001bf3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf43:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf49:	85 db                	test   ebx,ebx
c001bf4b:	74 45                	je     c001bf92 <sysCallTTYName(regs*)+0x6d>
c001bf4d:	83 ec 0c             	sub    esp,0xc
c001bf50:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf52:	53                   	push   ebx
c001bf53:	ff 10                	call   DWORD PTR [eax]
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	84 c0                	test   al,al
c001bf5a:	74 41                	je     c001bf9d <sysCallTTYName(regs*)+0x78>
c001bf5c:	83 ec 08             	sub    esp,0x8
c001bf5f:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf65:	53                   	push   ebx
c001bf66:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf69:	e8 c6 48 fe ff       	call   c0000834 <strcpy>
c001bf6e:	83 c4 10             	add    esp,0x10
c001bf71:	31 c0                	xor    eax,eax
c001bf73:	59                   	pop    ecx
c001bf74:	31 d2                	xor    edx,edx
c001bf76:	5b                   	pop    ebx
c001bf77:	5e                   	pop    esi
c001bf78:	c3                   	ret    
c001bf79:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf7e:	74 bb                	je     c001bf3b <sysCallTTYName(regs*)+0x16>
c001bf80:	83 ec 0c             	sub    esp,0xc
c001bf83:	50                   	push   eax
c001bf84:	e8 64 5a ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bf89:	83 c4 10             	add    esp,0x10
c001bf8c:	89 c3                	mov    ebx,eax
c001bf8e:	85 db                	test   ebx,ebx
c001bf90:	75 bb                	jne    c001bf4d <sysCallTTYName(regs*)+0x28>
c001bf92:	59                   	pop    ecx
c001bf93:	b8 01 00 00 00       	mov    eax,0x1
c001bf98:	31 d2                	xor    edx,edx
c001bf9a:	5b                   	pop    ebx
c001bf9b:	5e                   	pop    esi
c001bf9c:	c3                   	ret    
c001bf9d:	59                   	pop    ecx
c001bf9e:	b8 02 00 00 00       	mov    eax,0x2
c001bfa3:	31 d2                	xor    edx,edx
c001bfa5:	5b                   	pop    ebx
c001bfa6:	5e                   	pop    esi
c001bfa7:	c3                   	ret    

c001bfa8 <sysCallUSleep(regs*)>:
c001bfa8:	83 ec 14             	sub    esp,0x14
c001bfab:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfb4:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfbb:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfbe:	01 ca                	add    edx,ecx
c001bfc0:	52                   	push   edx
c001bfc1:	50                   	push   eax
c001bfc2:	e8 85 23 00 00       	call   c001e34c <nanoSleep(unsigned long long)>
c001bfc7:	31 c0                	xor    eax,eax
c001bfc9:	31 d2                	xor    edx,edx
c001bfcb:	83 c4 1c             	add    esp,0x1c
c001bfce:	c3                   	ret    

c001bfcf <sysCallSpawn(regs*)>:
c001bfcf:	56                   	push   esi
c001bfd0:	53                   	push   ebx
c001bfd1:	53                   	push   ebx
c001bfd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfd6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bfd9:	85 f6                	test   esi,esi
c001bfdb:	75 08                	jne    c001bfe5 <sysCallSpawn(regs*)+0x16>
c001bfdd:	59                   	pop    ecx
c001bfde:	31 c0                	xor    eax,eax
c001bfe0:	31 d2                	xor    edx,edx
c001bfe2:	5b                   	pop    ebx
c001bfe3:	5e                   	pop    esi
c001bfe4:	c3                   	ret    
c001bfe5:	83 ec 0c             	sub    esp,0xc
c001bfe8:	68 3f 07 00 00       	push   0x73f
c001bfed:	e8 51 38 ff ff       	call   c000f843 <malloc>
c001bff2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bff5:	89 c6                	mov    esi,eax
c001bff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bffc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c002:	56                   	push   esi
c001c003:	e8 44 1a 00 00       	call   c001da4c <Process::Process(char const*, Process*, char**)>
c001c008:	83 c4 20             	add    esp,0x20
c001c00b:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c012:	75 c9                	jne    c001bfdd <sysCallSpawn(regs*)+0xe>
c001c014:	83 ec 0c             	sub    esp,0xc
c001c017:	56                   	push   esi
c001c018:	e8 f5 1f 00 00       	call   c001e012 <Process::createUserThread()>
c001c01d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c01f:	83 c4 10             	add    esp,0x10
c001c022:	99                   	cdq    
c001c023:	59                   	pop    ecx
c001c024:	5b                   	pop    ebx
c001c025:	5e                   	pop    esi
c001c026:	c3                   	ret    

c001c027 <sysCallGetEnv(regs*)>:
c001c027:	55                   	push   ebp
c001c028:	57                   	push   edi
c001c029:	56                   	push   esi
c001c02a:	53                   	push   ebx
c001c02b:	83 ec 28             	sub    esp,0x28
c001c02e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c032:	68 ff be 02 c0       	push   0xc002beff
c001c037:	e8 1e 6f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c03c:	5f                   	pop    edi
c001c03d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c040:	5d                   	pop    ebp
c001c041:	53                   	push   ebx
c001c042:	68 45 c2 02 c0       	push   0xc002c245
c001c047:	e8 0e 6f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c04c:	58                   	pop    eax
c001c04d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c050:	5a                   	pop    edx
c001c051:	57                   	push   edi
c001c052:	68 08 bf 02 c0       	push   0xc002bf08
c001c057:	e8 fe 6e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c05c:	59                   	pop    ecx
c001c05d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c062:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c065:	e8 b9 e4 ff ff       	call   c001a523 <Krnl::getProcessTotalEnvCount(Process*)>
c001c06a:	5a                   	pop    edx
c001c06b:	89 c5                	mov    ebp,eax
c001c06d:	59                   	pop    ecx
c001c06e:	50                   	push   eax
c001c06f:	68 12 bf 02 c0       	push   0xc002bf12
c001c074:	e8 e1 6e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c079:	83 c4 10             	add    esp,0x10
c001c07c:	39 ef                	cmp    edi,ebp
c001c07e:	7c 15                	jl     c001c095 <sysCallGetEnv(regs*)+0x6e>
c001c080:	85 db                	test   ebx,ebx
c001c082:	75 0c                	jne    c001c090 <sysCallGetEnv(regs*)+0x69>
c001c084:	83 c4 1c             	add    esp,0x1c
c001c087:	31 c0                	xor    eax,eax
c001c089:	5b                   	pop    ebx
c001c08a:	31 d2                	xor    edx,edx
c001c08c:	5e                   	pop    esi
c001c08d:	5f                   	pop    edi
c001c08e:	5d                   	pop    ebp
c001c08f:	c3                   	ret    
c001c090:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c093:	eb ef                	jmp    c001c084 <sysCallGetEnv(regs*)+0x5d>
c001c095:	83 ec 0c             	sub    esp,0xc
c001c098:	68 1e bf 02 c0       	push   0xc002bf1e
c001c09d:	e8 b8 6e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c0a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0a6:	83 c4 0c             	add    esp,0xc
c001c0a9:	57                   	push   edi
c001c0aa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0b0:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0b3:	50                   	push   eax
c001c0b4:	e8 8a e4 ff ff       	call   c001a543 <Krnl::getProcessEnvPair(Process*, int)>
c001c0b9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0c1:	68 c4 c2 02 c0       	push   0xc002c2c4
c001c0c6:	e8 8f 6e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c0cb:	83 c4 10             	add    esp,0x10
c001c0ce:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0d1:	85 f6                	test   esi,esi
c001c0d3:	75 47                	jne    c001c11c <sysCallGetEnv(regs*)+0xf5>
c001c0d5:	83 ec 0c             	sub    esp,0xc
c001c0d8:	55                   	push   ebp
c001c0d9:	e8 b6 46 fe ff       	call   c0000794 <strlen>
c001c0de:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0e1:	89 c3                	mov    ebx,eax
c001c0e3:	e8 ac 46 fe ff       	call   c0000794 <strlen>
c001c0e8:	5a                   	pop    edx
c001c0e9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0ed:	59                   	pop    ecx
c001c0ee:	50                   	push   eax
c001c0ef:	68 21 bf 02 c0       	push   0xc002bf21
c001c0f4:	e8 61 6e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c0f9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0fc:	e8 93 46 fe ff       	call   c0000794 <strlen>
c001c101:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c104:	89 c3                	mov    ebx,eax
c001c106:	e8 89 46 fe ff       	call   c0000794 <strlen>
c001c10b:	83 c4 10             	add    esp,0x10
c001c10e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c112:	83 c4 1c             	add    esp,0x1c
c001c115:	31 d2                	xor    edx,edx
c001c117:	5b                   	pop    ebx
c001c118:	5e                   	pop    esi
c001c119:	5f                   	pop    edi
c001c11a:	5d                   	pop    ebp
c001c11b:	c3                   	ret    
c001c11c:	83 ec 0c             	sub    esp,0xc
c001c11f:	68 de c2 02 c0       	push   0xc002c2de
c001c124:	e8 31 6e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c129:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c12c:	58                   	pop    eax
c001c12d:	5a                   	pop    edx
c001c12e:	55                   	push   ebp
c001c12f:	53                   	push   ebx
c001c130:	e8 ff 46 fe ff       	call   c0000834 <strcpy>
c001c135:	59                   	pop    ecx
c001c136:	5e                   	pop    esi
c001c137:	68 2b bf 02 c0       	push   0xc002bf2b
c001c13c:	53                   	push   ebx
c001c13d:	e8 32 48 fe ff       	call   c0000974 <strcat>
c001c142:	5d                   	pop    ebp
c001c143:	58                   	pop    eax
c001c144:	57                   	push   edi
c001c145:	53                   	push   ebx
c001c146:	e8 29 48 fe ff       	call   c0000974 <strcat>
c001c14b:	c7 04 24 f8 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2f8
c001c152:	e8 03 6e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c157:	83 c4 10             	add    esp,0x10
c001c15a:	e9 25 ff ff ff       	jmp    c001c084 <sysCallGetEnv(regs*)+0x5d>

c001c15f <sysAppSettings(regs*)>:
c001c15f:	53                   	push   ebx
c001c160:	83 ec 08             	sub    esp,0x8
c001c163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c167:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c16a:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c170:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c175:	66 3d c0 09          	cmp    ax,0x9c0
c001c179:	75 2f                	jne    c001c1aa <sysAppSettings(regs*)+0x4b>
c001c17b:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c181:	83 e0 1f             	and    eax,0x1f
c001c184:	3c 01                	cmp    al,0x1
c001c186:	74 2e                	je     c001c1b6 <sysAppSettings(regs*)+0x57>
c001c188:	3c 07                	cmp    al,0x7
c001c18a:	0f 84 bd 00 00 00    	je     c001c24d <sysAppSettings(regs*)+0xee>
c001c190:	84 c0                	test   al,al
c001c192:	0f 84 dc 00 00 00    	je     c001c274 <sysAppSettings(regs*)+0x115>
c001c198:	3c 08                	cmp    al,0x8
c001c19a:	74 6d                	je     c001c209 <sysAppSettings(regs*)+0xaa>
c001c19c:	0f b6 c0             	movzx  eax,al
c001c19f:	83 c4 08             	add    esp,0x8
c001c1a2:	05 e8 03 00 00       	add    eax,0x3e8
c001c1a7:	5b                   	pop    ebx
c001c1a8:	99                   	cdq    
c001c1a9:	c3                   	ret    
c001c1aa:	b8 01 00 00 00       	mov    eax,0x1
c001c1af:	31 d2                	xor    edx,edx
c001c1b1:	83 c4 08             	add    esp,0x8
c001c1b4:	5b                   	pop    ebx
c001c1b5:	c3                   	ret    
c001c1b6:	51                   	push   ecx
c001c1b7:	68 00 01 00 00       	push   0x100
c001c1bc:	6a 00                	push   0x0
c001c1be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1c6:	83 c0 0c             	add    eax,0xc
c001c1c9:	50                   	push   eax
c001c1ca:	e8 a9 45 fe ff       	call   c0000778 <memset>
c001c1cf:	83 c4 0c             	add    esp,0xc
c001c1d2:	68 ff 00 00 00       	push   0xff
c001c1d7:	53                   	push   ebx
c001c1d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e0:	83 c0 0c             	add    eax,0xc
c001c1e3:	50                   	push   eax
c001c1e4:	e8 5b 45 fe ff       	call   c0000744 <memcpy>
c001c1e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ee:	5b                   	pop    ebx
c001c1ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f2:	5a                   	pop    edx
c001c1f3:	8d 50 0c             	lea    edx,[eax+0xc]
c001c1f6:	52                   	push   edx
c001c1f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1fd:	e8 66 49 ff ff       	call   c0010b68 <VgaText::setTitle(char*)>
c001c202:	83 c4 10             	add    esp,0x10
c001c205:	31 c0                	xor    eax,eax
c001c207:	eb a6                	jmp    c001c1af <sysAppSettings(regs*)+0x50>
c001c209:	83 ec 08             	sub    esp,0x8
c001c20c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c212:	83 e0 0f             	and    eax,0xf
c001c215:	50                   	push   eax
c001c216:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c21e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c224:	e8 2f 49 ff ff       	call   c0010b58 <VgaText::setTitleColour(VgaColour)>
c001c229:	58                   	pop    eax
c001c22a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c230:	5a                   	pop    edx
c001c231:	c1 e8 04             	shr    eax,0x4
c001c234:	83 e0 0f             	and    eax,0xf
c001c237:	50                   	push   eax
c001c238:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c23d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c240:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c246:	e8 fd 48 ff ff       	call   c0010b48 <VgaText::setTitleTextColour(VgaColour)>
c001c24b:	eb b5                	jmp    c001c202 <sysAppSettings(regs*)+0xa3>
c001c24d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c252:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c255:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c25b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c261:	c0 e8 06             	shr    al,0x6
c001c264:	83 e0 01             	and    eax,0x1
c001c267:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c26d:	31 c0                	xor    eax,eax
c001c26f:	e9 3b ff ff ff       	jmp    c001c1af <sysAppSettings(regs*)+0x50>
c001c274:	b8 02 00 00 00       	mov    eax,0x2
c001c279:	e9 31 ff ff ff       	jmp    c001c1af <sysAppSettings(regs*)+0x50>

c001c27e <sysSetFatAttrib(regs*)>:
c001c27e:	57                   	push   edi
c001c27f:	56                   	push   esi
c001c280:	53                   	push   ebx
c001c281:	83 ec 1c             	sub    esp,0x1c
c001c284:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c288:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c28b:	68 14 01 00 00       	push   0x114
c001c290:	e8 ae 35 ff ff       	call   c000f843 <malloc>
c001c295:	83 c4 0c             	add    esp,0xc
c001c298:	89 c3                	mov    ebx,eax
c001c29a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c29f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2a2:	57                   	push   edi
c001c2a3:	53                   	push   ebx
c001c2a4:	e8 09 72 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001c2a9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2ac:	83 c4 0c             	add    esp,0xc
c001c2af:	0f b6 d4             	movzx  edx,ah
c001c2b2:	0f b6 c0             	movzx  eax,al
c001c2b5:	52                   	push   edx
c001c2b6:	50                   	push   eax
c001c2b7:	53                   	push   ebx
c001c2b8:	e8 6b 74 ff ff       	call   c0013728 <File::chfatattr(unsigned char, unsigned char)>
c001c2bd:	83 c4 10             	add    esp,0x10
c001c2c0:	85 db                	test   ebx,ebx
c001c2c2:	74 14                	je     c001c2d8 <sysSetFatAttrib(regs*)+0x5a>
c001c2c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2c8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2ca:	83 ec 0c             	sub    esp,0xc
c001c2cd:	53                   	push   ebx
c001c2ce:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2d1:	83 c4 10             	add    esp,0x10
c001c2d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2d8:	85 c0                	test   eax,eax
c001c2da:	0f 95 c0             	setne  al
c001c2dd:	31 d2                	xor    edx,edx
c001c2df:	0f b6 c0             	movzx  eax,al
c001c2e2:	f7 d8                	neg    eax
c001c2e4:	83 d2 00             	adc    edx,0x0
c001c2e7:	83 c4 10             	add    esp,0x10
c001c2ea:	f7 da                	neg    edx
c001c2ec:	5b                   	pop    ebx
c001c2ed:	5e                   	pop    esi
c001c2ee:	5f                   	pop    edi
c001c2ef:	c3                   	ret    

c001c2f0 <sysPipe(regs*)>:
c001c2f0:	57                   	push   edi
c001c2f1:	56                   	push   esi
c001c2f2:	53                   	push   ebx
c001c2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f7:	83 ec 0c             	sub    esp,0xc
c001c2fa:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c2fd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c300:	6a 20                	push   0x20
c001c302:	e8 3c 35 ff ff       	call   c000f843 <malloc>
c001c307:	89 c3                	mov    ebx,eax
c001c309:	58                   	pop    eax
c001c30a:	5a                   	pop    edx
c001c30b:	68 00 50 00 00       	push   0x5000
c001c310:	53                   	push   ebx
c001c311:	e8 82 41 ff ff       	call   c0010498 <Pipe::Pipe(int)>
c001c316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c319:	e8 da 53 ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001c31e:	89 07                	mov    DWORD PTR [edi],eax
c001c320:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c323:	e8 d0 53 ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001c328:	83 c4 10             	add    esp,0x10
c001c32b:	89 06                	mov    DWORD PTR [esi],eax
c001c32d:	31 d2                	xor    edx,edx
c001c32f:	5b                   	pop    ebx
c001c330:	31 c0                	xor    eax,eax
c001c332:	5e                   	pop    esi
c001c333:	5f                   	pop    edi
c001c334:	c3                   	ret    

c001c335 <sysGetUnixTime(regs*)>:
c001c335:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001c33a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c340:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c344:	e9 53 7b ff ff       	jmp    c0013e9c <Clock::timeInSecondsLocal()>

c001c349 <string_ends_with(char const*, char const*)>:
c001c349:	57                   	push   edi
c001c34a:	56                   	push   esi
c001c34b:	53                   	push   ebx
c001c34c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c350:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c354:	83 ec 0c             	sub    esp,0xc
c001c357:	53                   	push   ebx
c001c358:	e8 37 44 fe ff       	call   c0000794 <strlen>
c001c35d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c360:	89 c6                	mov    esi,eax
c001c362:	e8 2d 44 fe ff       	call   c0000794 <strlen>
c001c367:	83 c4 10             	add    esp,0x10
c001c36a:	39 c6                	cmp    esi,eax
c001c36c:	7d 06                	jge    c001c374 <string_ends_with(char const*, char const*)+0x2b>
c001c36e:	5b                   	pop    ebx
c001c36f:	31 c0                	xor    eax,eax
c001c371:	5e                   	pop    esi
c001c372:	5f                   	pop    edi
c001c373:	c3                   	ret    
c001c374:	83 ec 08             	sub    esp,0x8
c001c377:	29 c6                	sub    esi,eax
c001c379:	57                   	push   edi
c001c37a:	01 f3                	add    ebx,esi
c001c37c:	53                   	push   ebx
c001c37d:	e8 3e 45 fe ff       	call   c00008c0 <strcmp>
c001c382:	83 c4 10             	add    esp,0x10
c001c385:	85 c0                	test   eax,eax
c001c387:	5b                   	pop    ebx
c001c388:	0f 94 c0             	sete   al
c001c38b:	5e                   	pop    esi
c001c38c:	0f b6 c0             	movzx  eax,al
c001c38f:	5f                   	pop    edi
c001c390:	c3                   	ret    

c001c391 <sysCallOpen(regs*)>:
c001c391:	56                   	push   esi
c001c392:	53                   	push   ebx
c001c393:	81 ec 04 01 00 00    	sub    esp,0x104
c001c399:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3a0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3a3:	85 c9                	test   ecx,ecx
c001c3a5:	0f 84 b3 00 00 00    	je     c001c45e <sysCallOpen(regs*)+0xcd>
c001c3ab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3ae:	85 c0                	test   eax,eax
c001c3b0:	0f 84 a8 00 00 00    	je     c001c45e <sysCallOpen(regs*)+0xcd>
c001c3b6:	52                   	push   edx
c001c3b7:	68 2d bf 02 c0       	push   0xc002bf2d
c001c3bc:	50                   	push   eax
c001c3bd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3c1:	56                   	push   esi
c001c3c2:	e8 41 6f ff ff       	call   c0013308 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3c7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3ca:	e8 c5 43 fe ff       	call   c0000794 <strlen>
c001c3cf:	83 c4 10             	add    esp,0x10
c001c3d2:	48                   	dec    eax
c001c3d3:	74 1d                	je     c001c3f2 <sysCallOpen(regs*)+0x61>
c001c3d5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3d8:	eb 0f                	jmp    c001c3e9 <sysCallOpen(regs*)+0x58>
c001c3da:	80 fa 3a             	cmp    dl,0x3a
c001c3dd:	74 0f                	je     c001c3ee <sysCallOpen(regs*)+0x5d>
c001c3df:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3e3:	48                   	dec    eax
c001c3e4:	74 0c                	je     c001c3f2 <sysCallOpen(regs*)+0x61>
c001c3e6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3e9:	80 fa 2e             	cmp    dl,0x2e
c001c3ec:	75 ec                	jne    c001c3da <sysCallOpen(regs*)+0x49>
c001c3ee:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c3f2:	83 ec 08             	sub    esp,0x8
c001c3f5:	68 31 bf 02 c0       	push   0xc002bf31
c001c3fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3fd:	e8 47 ff ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c402:	83 c4 10             	add    esp,0x10
c001c405:	85 c0                	test   eax,eax
c001c407:	75 17                	jne    c001c420 <sysCallOpen(regs*)+0x8f>
c001c409:	83 ec 08             	sub    esp,0x8
c001c40c:	68 52 bf 02 c0       	push   0xc002bf52
c001c411:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c414:	e8 30 ff ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c419:	83 c4 10             	add    esp,0x10
c001c41c:	85 c0                	test   eax,eax
c001c41e:	74 51                	je     c001c471 <sysCallOpen(regs*)+0xe0>
c001c420:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c423:	83 ec 08             	sub    esp,0x8
c001c426:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c42c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c433:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c436:	ff 30                	push   DWORD PTR [eax]
c001c438:	68 36 bf 02 c0       	push   0xc002bf36
c001c43d:	e8 18 6b ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c442:	c7 04 24 45 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf45
c001c449:	e8 0c 6b ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	81 c4 04 01 00 00    	add    esp,0x104
c001c457:	31 c0                	xor    eax,eax
c001c459:	31 d2                	xor    edx,edx
c001c45b:	5b                   	pop    ebx
c001c45c:	5e                   	pop    esi
c001c45d:	c3                   	ret    
c001c45e:	81 c4 04 01 00 00    	add    esp,0x104
c001c464:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c469:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c46e:	5b                   	pop    ebx
c001c46f:	5e                   	pop    esi
c001c470:	c3                   	ret    
c001c471:	83 ec 08             	sub    esp,0x8
c001c474:	68 32 bf 02 c0       	push   0xc002bf32
c001c479:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c47c:	e8 3f 44 fe ff       	call   c00008c0 <strcmp>
c001c481:	83 c4 10             	add    esp,0x10
c001c484:	85 c0                	test   eax,eax
c001c486:	74 98                	je     c001c420 <sysCallOpen(regs*)+0x8f>
c001c488:	83 ec 08             	sub    esp,0x8
c001c48b:	68 31 bf 02 c0       	push   0xc002bf31
c001c490:	56                   	push   esi
c001c491:	e8 b3 fe ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c496:	83 c4 10             	add    esp,0x10
c001c499:	85 c0                	test   eax,eax
c001c49b:	75 83                	jne    c001c420 <sysCallOpen(regs*)+0x8f>
c001c49d:	83 ec 08             	sub    esp,0x8
c001c4a0:	68 57 bf 02 c0       	push   0xc002bf57
c001c4a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4a8:	e8 9c fe ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c4ad:	83 c4 10             	add    esp,0x10
c001c4b0:	85 c0                	test   eax,eax
c001c4b2:	0f 85 d9 00 00 00    	jne    c001c591 <sysCallOpen(regs*)+0x200>
c001c4b8:	83 ec 08             	sub    esp,0x8
c001c4bb:	68 5c bf 02 c0       	push   0xc002bf5c
c001c4c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4c3:	e8 81 fe ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c4c8:	83 c4 10             	add    esp,0x10
c001c4cb:	85 c0                	test   eax,eax
c001c4cd:	0f 85 be 00 00 00    	jne    c001c591 <sysCallOpen(regs*)+0x200>
c001c4d3:	83 ec 08             	sub    esp,0x8
c001c4d6:	68 58 bf 02 c0       	push   0xc002bf58
c001c4db:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4de:	e8 dd 43 fe ff       	call   c00008c0 <strcmp>
c001c4e3:	83 c4 10             	add    esp,0x10
c001c4e6:	85 c0                	test   eax,eax
c001c4e8:	0f 84 a3 00 00 00    	je     c001c591 <sysCallOpen(regs*)+0x200>
c001c4ee:	83 ec 08             	sub    esp,0x8
c001c4f1:	68 57 bf 02 c0       	push   0xc002bf57
c001c4f6:	56                   	push   esi
c001c4f7:	e8 4d fe ff ff       	call   c001c349 <string_ends_with(char const*, char const*)>
c001c4fc:	83 c4 10             	add    esp,0x10
c001c4ff:	85 c0                	test   eax,eax
c001c501:	0f 85 8a 00 00 00    	jne    c001c591 <sysCallOpen(regs*)+0x200>
c001c507:	83 ec 0c             	sub    esp,0xc
c001c50a:	68 14 01 00 00       	push   0x114
c001c50f:	e8 2f 33 ff ff       	call   c000f843 <malloc>
c001c514:	83 c4 0c             	add    esp,0xc
c001c517:	89 c6                	mov    esi,eax
c001c519:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c51e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c521:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c524:	56                   	push   esi
c001c525:	e8 88 6f ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001c52a:	83 c4 10             	add    esp,0x10
c001c52d:	85 f6                	test   esi,esi
c001c52f:	0f 84 29 ff ff ff    	je     c001c45e <sysCallOpen(regs*)+0xcd>
c001c535:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c538:	0f b6 c2             	movzx  eax,dl
c001c53b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c53e:	89 d0                	mov    eax,edx
c001c540:	83 e0 01             	and    eax,0x1
c001c543:	f6 c2 02             	test   dl,0x2
c001c546:	74 03                	je     c001c54b <sysCallOpen(regs*)+0x1ba>
c001c548:	83 c8 02             	or     eax,0x2
c001c54b:	f6 c2 04             	test   dl,0x4
c001c54e:	74 03                	je     c001c553 <sysCallOpen(regs*)+0x1c2>
c001c550:	83 c8 04             	or     eax,0x4
c001c553:	f6 c2 08             	test   dl,0x8
c001c556:	74 03                	je     c001c55b <sysCallOpen(regs*)+0x1ca>
c001c558:	83 c8 0a             	or     eax,0xa
c001c55b:	83 e2 10             	and    edx,0x10
c001c55e:	74 03                	je     c001c563 <sysCallOpen(regs*)+0x1d2>
c001c560:	83 c8 12             	or     eax,0x12
c001c563:	83 ec 08             	sub    esp,0x8
c001c566:	50                   	push   eax
c001c567:	56                   	push   esi
c001c568:	e8 a9 6f ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001c56d:	83 c4 10             	add    esp,0x10
c001c570:	85 c0                	test   eax,eax
c001c572:	0f 85 e6 fe ff ff    	jne    c001c45e <sysCallOpen(regs*)+0xcd>
c001c578:	83 ec 0c             	sub    esp,0xc
c001c57b:	56                   	push   esi
c001c57c:	e8 77 51 ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001c581:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c584:	89 02                	mov    DWORD PTR [edx],eax
c001c586:	c1 f8 1f             	sar    eax,0x1f
c001c589:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c58c:	e9 bd fe ff ff       	jmp    c001c44e <sysCallOpen(regs*)+0xbd>
c001c591:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c594:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c59a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5a1:	e9 ab fe ff ff       	jmp    c001c451 <sysCallOpen(regs*)+0xc0>

c001c5a6 <Sys::loadSyscalls()>:
c001c5a6:	c7 05 e0 0f 03 c0 b3 b6 01 c0 	mov    DWORD PTR ds:0xc0030fe0,0xc001b6b3
c001c5b0:	c7 05 e4 0f 03 c0 9c b2 01 c0 	mov    DWORD PTR ds:0xc0030fe4,0xc001b29c
c001c5ba:	c7 05 e8 0f 03 c0 06 b4 01 c0 	mov    DWORD PTR ds:0xc0030fe8,0xc001b406
c001c5c4:	c7 05 ec 0f 03 c0 e9 b5 01 c0 	mov    DWORD PTR ds:0xc0030fec,0xc001b5e9
c001c5ce:	c7 05 f0 0f 03 c0 9e b3 01 c0 	mov    DWORD PTR ds:0xc0030ff0,0xc001b39e
c001c5d8:	c7 05 f4 0f 03 c0 d3 b2 01 c0 	mov    DWORD PTR ds:0xc0030ff4,0xc001b2d3
c001c5e2:	c7 05 f8 0f 03 c0 b4 b2 01 c0 	mov    DWORD PTR ds:0xc0030ff8,0xc001b2b4
c001c5ec:	c7 05 fc 0f 03 c0 5b b4 01 c0 	mov    DWORD PTR ds:0xc0030ffc,0xc001b45b
c001c5f6:	c7 05 04 10 03 c0 e3 bb 01 c0 	mov    DWORD PTR ds:0xc0031004,0xc001bbe3
c001c600:	c7 05 00 10 03 c0 91 c3 01 c0 	mov    DWORD PTR ds:0xc0031000,0xc001c391
c001c60a:	c7 05 08 10 03 c0 6b bc 01 c0 	mov    DWORD PTR ds:0xc0031008,0xc001bc6b
c001c614:	c7 05 0c 10 03 c0 d2 b8 01 c0 	mov    DWORD PTR ds:0xc003100c,0xc001b8d2
c001c61e:	c7 05 10 10 03 c0 ee b6 01 c0 	mov    DWORD PTR ds:0xc0031010,0xc001b6ee
c001c628:	c7 05 14 10 03 c0 f3 b6 01 c0 	mov    DWORD PTR ds:0xc0031014,0xc001b6f3
c001c632:	c7 05 18 10 03 c0 46 bd 01 c0 	mov    DWORD PTR ds:0xc0031018,0xc001bd46
c001c63c:	c7 05 1c 10 03 c0 e0 bc 01 c0 	mov    DWORD PTR ds:0xc003101c,0xc001bce0
c001c646:	c7 05 20 10 03 c0 ba b9 01 c0 	mov    DWORD PTR ds:0xc0031020,0xc001b9ba
c001c650:	c7 05 24 10 03 c0 23 ba 01 c0 	mov    DWORD PTR ds:0xc0031024,0xc001ba23
c001c65a:	c7 05 28 10 03 c0 a0 ba 01 c0 	mov    DWORD PTR ds:0xc0031028,0xc001baa0
c001c664:	c7 05 2c 10 03 c0 f8 b6 01 c0 	mov    DWORD PTR ds:0xc003102c,0xc001b6f8
c001c66e:	c7 05 30 10 03 c0 b6 bd 01 c0 	mov    DWORD PTR ds:0xc0031030,0xc001bdb6
c001c678:	c7 05 34 10 03 c0 d0 bd 01 c0 	mov    DWORD PTR ds:0xc0031034,0xc001bdd0
c001c682:	c7 05 38 10 03 c0 d0 bd 01 c0 	mov    DWORD PTR ds:0xc0031038,0xc001bdd0
c001c68c:	c7 05 3c 10 03 c0 11 be 01 c0 	mov    DWORD PTR ds:0xc003103c,0xc001be11
c001c696:	c7 05 40 10 03 c0 75 be 01 c0 	mov    DWORD PTR ds:0xc0031040,0xc001be75
c001c6a0:	c7 05 44 10 03 c0 a4 b8 01 c0 	mov    DWORD PTR ds:0xc0031044,0xc001b8a4
c001c6aa:	c7 05 48 10 03 c0 d9 be 01 c0 	mov    DWORD PTR ds:0xc0031048,0xc001bed9
c001c6b4:	c7 05 4c 10 03 c0 61 b8 01 c0 	mov    DWORD PTR ds:0xc003104c,0xc001b861
c001c6be:	c7 05 50 10 03 c0 25 bf 01 c0 	mov    DWORD PTR ds:0xc0031050,0xc001bf25
c001c6c8:	c7 05 54 10 03 c0 60 b9 01 c0 	mov    DWORD PTR ds:0xc0031054,0xc001b960
c001c6d2:	c7 05 58 10 03 c0 a8 bf 01 c0 	mov    DWORD PTR ds:0xc0031058,0xc001bfa8
c001c6dc:	c7 05 5c 10 03 c0 23 bb 01 c0 	mov    DWORD PTR ds:0xc003105c,0xc001bb23
c001c6e6:	c7 05 60 10 03 c0 cf bf 01 c0 	mov    DWORD PTR ds:0xc0031060,0xc001bfcf
c001c6f0:	c7 05 64 10 03 c0 27 c0 01 c0 	mov    DWORD PTR ds:0xc0031064,0xc001c027
c001c6fa:	c7 05 68 10 03 c0 5f c1 01 c0 	mov    DWORD PTR ds:0xc0031068,0xc001c15f
c001c704:	c7 05 6c 10 03 c0 02 b7 01 c0 	mov    DWORD PTR ds:0xc003106c,0xc001b702
c001c70e:	c7 05 70 10 03 c0 6c b7 01 c0 	mov    DWORD PTR ds:0xc0031070,0xc001b76c
c001c718:	c7 05 74 10 03 c0 b2 b7 01 c0 	mov    DWORD PTR ds:0xc0031074,0xc001b7b2
c001c722:	c7 05 78 10 03 c0 7e c2 01 c0 	mov    DWORD PTR ds:0xc0031078,0xc001c27e
c001c72c:	c7 05 7c 10 03 c0 eb bd 01 c0 	mov    DWORD PTR ds:0xc003107c,0xc001bdeb
c001c736:	c7 05 80 10 03 c0 03 b8 01 c0 	mov    DWORD PTR ds:0xc0031080,0xc001b803
c001c740:	c7 05 84 10 03 c0 f0 c2 01 c0 	mov    DWORD PTR ds:0xc0031084,0xc001c2f0
c001c74a:	c7 05 88 10 03 c0 35 c3 01 c0 	mov    DWORD PTR ds:0xc0031088,0xc001c335
c001c754:	c7 05 8c 10 03 c0 f6 b2 01 c0 	mov    DWORD PTR ds:0xc003108c,0xc001b2f6
c001c75e:	c7 05 90 10 03 c0 77 b4 01 c0 	mov    DWORD PTR ds:0xc0031090,0xc001b477
c001c768:	c7 05 94 10 03 c0 9f b5 01 c0 	mov    DWORD PTR ds:0xc0031094,0xc001b59f
c001c772:	c7 05 98 10 03 c0 66 b2 01 c0 	mov    DWORD PTR ds:0xc0031098,0xc001b266
c001c77c:	c7 05 9c 10 03 c0 51 b6 01 c0 	mov    DWORD PTR ds:0xc003109c,0xc001b651
c001c786:	c7 05 a0 10 03 c0 df b2 01 c0 	mov    DWORD PTR ds:0xc00310a0,0xc001b2df
c001c790:	c3                   	ret    

c001c791 <Sys::systemCall(regs*, void*)>:
c001c791:	53                   	push   ebx
c001c792:	83 ec 08             	sub    esp,0x8
c001c795:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c799:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c79c:	83 f8 7f             	cmp    eax,0x7f
c001c79f:	77 16                	ja     c001c7b7 <Sys::systemCall(regs*, void*)+0x26>
c001c7a1:	8b 14 85 e0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf020]
c001c7a8:	85 d2                	test   edx,edx
c001c7aa:	74 0b                	je     c001c7b7 <Sys::systemCall(regs*, void*)+0x26>
c001c7ac:	83 ec 0c             	sub    esp,0xc
c001c7af:	53                   	push   ebx
c001c7b0:	ff d2                	call   edx
c001c7b2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7b5:	eb 0d                	jmp    c001c7c4 <Sys::systemCall(regs*, void*)+0x33>
c001c7b7:	52                   	push   edx
c001c7b8:	52                   	push   edx
c001c7b9:	50                   	push   eax
c001c7ba:	68 61 bf 02 c0       	push   0xc002bf61
c001c7bf:	e8 96 67 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c7c4:	83 c4 10             	add    esp,0x10
c001c7c7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7cc:	31 d2                	xor    edx,edx
c001c7ce:	83 c4 08             	add    esp,0x8
c001c7d1:	5b                   	pop    ebx
c001c7d2:	c3                   	ret    

c001c7d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7d3:	55                   	push   ebp
c001c7d4:	57                   	push   edi
c001c7d5:	56                   	push   esi
c001c7d6:	53                   	push   ebx
c001c7d7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7dd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7e4:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7eb:	85 c0                	test   eax,eax
c001c7ed:	0f 95 c1             	setne  cl
c001c7f0:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c7f8:	0f 94 c2             	sete   dl
c001c7fb:	84 d1                	test   cl,dl
c001c7fd:	74 23                	je     c001c822 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7ff:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c805:	74 1b                	je     c001c822 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c807:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c80d:	89 da                	mov    edx,ebx
c001c80f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c815:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c81b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c822:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c829:	05 ff 0f 00 00       	add    eax,0xfff
c001c82e:	83 ec 0c             	sub    esp,0xc
c001c831:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c835:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c83b:	c1 e8 0c             	shr    eax,0xc
c001c83e:	89 ef                	mov    edi,ebp
c001c840:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c844:	c1 ef 0c             	shr    edi,0xc
c001c847:	6a 01                	push   0x1
c001c849:	e8 f5 52 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c001c84e:	89 c6                	mov    esi,eax
c001c850:	58                   	pop    eax
c001c851:	5a                   	pop    edx
c001c852:	57                   	push   edi
c001c853:	68 e7 bf 02 c0       	push   0xc002bfe7
c001c858:	e8 fd 66 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c85d:	59                   	pop    ecx
c001c85e:	58                   	pop    eax
c001c85f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c863:	68 f9 bf 02 c0       	push   0xc002bff9
c001c868:	e8 ed 66 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c86d:	83 c4 10             	add    esp,0x10
c001c870:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c876:	0f 86 24 01 00 00    	jbe    c001c9a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c87c:	c1 e7 0c             	shl    edi,0xc
c001c87f:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c882:	89 df                	mov    edi,ebx
c001c884:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c888:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c88f:	01 dd                	add    ebp,ebx
c001c891:	29 fd                	sub    ebp,edi
c001c893:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c897:	0f 84 01 01 00 00    	je     c001c99e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c89d:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8a3:	76 05                	jbe    c001c8aa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8a5:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8aa:	83 ec 0c             	sub    esp,0xc
c001c8ad:	31 d2                	xor    edx,edx
c001c8af:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8b6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8bc:	50                   	push   eax
c001c8bd:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8c1:	50                   	push   eax
c001c8c2:	52                   	push   edx
c001c8c3:	55                   	push   ebp
c001c8c4:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8ce:	83 c4 20             	add    esp,0x20
c001c8d1:	85 c0                	test   eax,eax
c001c8d3:	74 0a                	je     c001c8df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8d5:	53                   	push   ebx
c001c8d6:	53                   	push   ebx
c001c8d7:	50                   	push   eax
c001c8d8:	68 0b c0 02 c0       	push   0xc002c00b
c001c8dd:	eb 0f                	jmp    c001c8ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8df:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8e3:	74 20                	je     c001c905 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8e5:	51                   	push   ecx
c001c8e6:	51                   	push   ecx
c001c8e7:	6a 00                	push   0x0
c001c8e9:	68 36 c0 02 c0       	push   0xc002c036
c001c8ee:	e8 67 66 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001c8f3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8f6:	e8 ce 56 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c8fb:	83 c4 10             	add    esp,0x10
c001c8fe:	31 c0                	xor    eax,eax
c001c900:	e9 55 01 00 00       	jmp    c001ca5a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c905:	e8 f2 14 00 00       	call   c001ddfc <lockScheduler()>
c001c90a:	e8 d6 35 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c90f:	6a 07                	push   0x7
c001c911:	89 c5                	mov    ebp,eax
c001c913:	56                   	push   esi
c001c914:	50                   	push   eax
c001c915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c91a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c91d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c923:	e8 08 5a ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c928:	83 c4 0c             	add    esp,0xc
c001c92b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c932:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c938:	6a 00                	push   0x0
c001c93a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c93f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c942:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c948:	e8 4d 58 ff ff       	call   c001219a <VAS::mapOtherVASIn(bool, VAS*)>
c001c94d:	58                   	pop    eax
c001c94e:	5a                   	pop    edx
c001c94f:	68 07 0c 00 00       	push   0xc07
c001c954:	57                   	push   edi
c001c955:	81 c7 00 10 00 00    	add    edi,0x1000
c001c95b:	55                   	push   ebp
c001c95c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c963:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c969:	6a 00                	push   0x0
c001c96b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c970:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c973:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c979:	e8 6c 5d ff ff       	call   c00126ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c97e:	83 c4 1c             	add    esp,0x1c
c001c981:	68 00 10 00 00       	push   0x1000
c001c986:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c98a:	50                   	push   eax
c001c98b:	56                   	push   esi
c001c98c:	e8 b3 3d fe ff       	call   c0000744 <memcpy>
c001c991:	e8 68 14 00 00       	call   c001ddfe <unlockScheduler()>
c001c996:	83 c4 10             	add    esp,0x10
c001c999:	e9 ea fe ff ff       	jmp    c001c888 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c99e:	89 fb                	mov    ebx,edi
c001c9a0:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9a8:	0f 86 9e 00 00 00    	jbe    c001ca4c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9ae:	e8 49 14 00 00       	call   c001ddfc <lockScheduler()>
c001c9b3:	51                   	push   ecx
c001c9b4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9bb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c1:	6a 00                	push   0x0
c001c9c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9cb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d1:	e8 c4 57 ff ff       	call   c001219a <VAS::mapOtherVASIn(bool, VAS*)>
c001c9d6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9da:	c1 e7 0c             	shl    edi,0xc
c001c9dd:	01 df                	add    edi,ebx
c001c9df:	83 c4 10             	add    esp,0x10
c001c9e2:	39 fb                	cmp    ebx,edi
c001c9e4:	74 61                	je     c001ca47 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c9e6:	e8 fa 34 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c9eb:	6a 07                	push   0x7
c001c9ed:	89 c5                	mov    ebp,eax
c001c9ef:	56                   	push   esi
c001c9f0:	50                   	push   eax
c001c9f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ff:	e8 2c 59 ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca04:	58                   	pop    eax
c001ca05:	5a                   	pop    edx
c001ca06:	68 07 0c 00 00       	push   0xc07
c001ca0b:	53                   	push   ebx
c001ca0c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca12:	55                   	push   ebp
c001ca13:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca1a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca20:	6a 00                	push   0x0
c001ca22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca2a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca30:	e8 b5 5c ff ff       	call   c00126ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca35:	83 c4 1c             	add    esp,0x1c
c001ca38:	68 00 10 00 00       	push   0x1000
c001ca3d:	6a 00                	push   0x0
c001ca3f:	56                   	push   esi
c001ca40:	e8 33 3d fe ff       	call   c0000778 <memset>
c001ca45:	eb 98                	jmp    c001c9df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca47:	e8 b2 13 00 00       	call   c001ddfe <unlockScheduler()>
c001ca4c:	83 ec 0c             	sub    esp,0xc
c001ca4f:	56                   	push   esi
c001ca50:	e8 74 55 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca55:	83 c4 10             	add    esp,0x10
c001ca58:	b0 01                	mov    al,0x1
c001ca5a:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca60:	5b                   	pop    ebx
c001ca61:	5e                   	pop    esi
c001ca62:	5f                   	pop    edi
c001ca63:	5d                   	pop    ebp
c001ca64:	c3                   	ret    

c001ca65 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca65:	55                   	push   ebp
c001ca66:	57                   	push   edi
c001ca67:	56                   	push   esi
c001ca68:	53                   	push   ebx
c001ca69:	83 ec 48             	sub    esp,0x48
c001ca6c:	68 14 01 00 00       	push   0x114
c001ca71:	e8 cd 2d ff ff       	call   c000f843 <malloc>
c001ca76:	83 c4 0c             	add    esp,0xc
c001ca79:	89 c6                	mov    esi,eax
c001ca7b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca83:	50                   	push   eax
c001ca84:	e8 29 6a ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001ca89:	58                   	pop    eax
c001ca8a:	5a                   	pop    edx
c001ca8b:	6a 01                	push   0x1
c001ca8d:	56                   	push   esi
c001ca8e:	e8 83 6a ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001ca93:	83 c4 10             	add    esp,0x10
c001ca96:	85 c0                	test   eax,eax
c001ca98:	0f 85 47 01 00 00    	jne    c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca9e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001caa6:	83 ec 0c             	sub    esp,0xc
c001caa9:	6a 34                	push   0x34
c001caab:	e8 93 2d ff ff       	call   c000f843 <malloc>
c001cab0:	89 c3                	mov    ebx,eax
c001cab2:	58                   	pop    eax
c001cab3:	8b 06                	mov    eax,DWORD PTR [esi]
c001cab5:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cab9:	57                   	push   edi
c001caba:	53                   	push   ebx
c001cabb:	6a 00                	push   0x0
c001cabd:	6a 34                	push   0x34
c001cabf:	56                   	push   esi
c001cac0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cac3:	83 c4 20             	add    esp,0x20
c001cac6:	85 c0                	test   eax,eax
c001cac8:	0f 85 17 01 00 00    	jne    c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cace:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cad4:	0f 85 0b 01 00 00    	jne    c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cada:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cadd:	85 c0                	test   eax,eax
c001cadf:	0f 84 00 01 00 00    	je     c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cae5:	31 d2                	xor    edx,edx
c001cae7:	55                   	push   ebp
c001cae8:	52                   	push   edx
c001cae9:	50                   	push   eax
c001caea:	56                   	push   esi
c001caeb:	e8 e4 6a ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001caf0:	83 c4 10             	add    esp,0x10
c001caf3:	85 c0                	test   eax,eax
c001caf5:	0f 85 ea 00 00 00    	jne    c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cafb:	83 ec 0c             	sub    esp,0xc
c001cafe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb01:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb09:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb0d:	0f af c2             	imul   eax,edx
c001cb10:	50                   	push   eax
c001cb11:	e8 2d 2d ff ff       	call   c000f843 <malloc>
c001cb16:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb23:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb27:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb2b:	0f af c2             	imul   eax,edx
c001cb2e:	99                   	cdq    
c001cb2f:	52                   	push   edx
c001cb30:	50                   	push   eax
c001cb31:	56                   	push   esi
c001cb32:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb35:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb38:	83 c4 20             	add    esp,0x20
c001cb3b:	85 c0                	test   eax,eax
c001cb3d:	0f 84 a2 00 00 00    	je     c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb43:	31 d2                	xor    edx,edx
c001cb45:	51                   	push   ecx
c001cb46:	52                   	push   edx
c001cb47:	50                   	push   eax
c001cb48:	56                   	push   esi
c001cb49:	e8 86 6a ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cb4e:	83 c4 10             	add    esp,0x10
c001cb51:	85 c0                	test   eax,eax
c001cb53:	0f 85 8c 00 00 00    	jne    c001cbe5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb59:	83 ec 0c             	sub    esp,0xc
c001cb5c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb60:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb64:	31 ed                	xor    ebp,ebp
c001cb66:	0f af c2             	imul   eax,edx
c001cb69:	50                   	push   eax
c001cb6a:	e8 d4 2c ff ff       	call   c000f843 <malloc>
c001cb6f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb75:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb7c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb80:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb84:	0f af c2             	imul   eax,edx
c001cb87:	99                   	cdq    
c001cb88:	52                   	push   edx
c001cb89:	50                   	push   eax
c001cb8a:	56                   	push   esi
c001cb8b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb8e:	83 c4 20             	add    esp,0x20
c001cb91:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb99:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb9d:	0f 86 80 00 00 00    	jbe    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cba3:	0f b7 fd             	movzx  edi,bp
c001cba6:	c1 e7 05             	shl    edi,0x5
c001cba9:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbad:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbb0:	75 6b                	jne    c001cc1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbb2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbb9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbc0:	52                   	push   edx
c001cbc1:	31 d2                	xor    edx,edx
c001cbc3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbc6:	52                   	push   edx
c001cbc7:	50                   	push   eax
c001cbc8:	56                   	push   esi
c001cbc9:	e8 06 6a ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cbce:	83 c4 10             	add    esp,0x10
c001cbd1:	85 c0                	test   eax,eax
c001cbd3:	74 17                	je     c001cbec <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbd5:	83 ec 0c             	sub    esp,0xc
c001cbd8:	68 62 c0 02 c0       	push   0xc002c062
c001cbdd:	e8 78 63 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001cbe2:	83 c4 10             	add    esp,0x10
c001cbe5:	31 c0                	xor    eax,eax
c001cbe7:	e9 87 00 00 00       	jmp    c001cc73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cbec:	83 ec 0c             	sub    esp,0xc
c001cbef:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cbf2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cbf5:	50                   	push   eax
c001cbf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cbfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbfe:	56                   	push   esi
c001cbff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc03:	e8 cb fb ff ff       	call   c001c7d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc0c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc10:	83 c4 20             	add    esp,0x20
c001cc13:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc17:	73 04                	jae    c001cc1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc1d:	45                   	inc    ebp
c001cc1e:	e9 76 ff ff ff       	jmp    c001cb99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc23:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc27:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc2f:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc35:	83 ec 0c             	sub    esp,0xc
c001cc38:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc3e:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc43:	05 00 10 00 00       	add    eax,0x1000
c001cc48:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc4f:	e8 ff 2b ff ff       	call   c000f853 <free>
c001cc54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc57:	e8 f7 2b ff ff       	call   c000f853 <free>
c001cc5c:	58                   	pop    eax
c001cc5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc61:	e8 ed 2b ff ff       	call   c000f853 <free>
c001cc66:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc69:	e8 06 69 ff ff       	call   c0013574 <File::close()>
c001cc6e:	83 c4 10             	add    esp,0x10
c001cc71:	b0 01                	mov    al,0x1
c001cc73:	83 c4 3c             	add    esp,0x3c
c001cc76:	5b                   	pop    ebx
c001cc77:	5e                   	pop    esi
c001cc78:	5f                   	pop    edi
c001cc79:	5d                   	pop    ebp
c001cc7a:	c3                   	ret    

c001cc7b <Thr::runtimeReferenceHelper()>:
c001cc7b:	83 ec 18             	sub    esp,0x18
c001cc7e:	68 6a c0 02 c0       	push   0xc002c06a
c001cc83:	e8 d2 62 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001cc88:	fa                   	cli    
c001cc89:	83 c4 10             	add    esp,0x10
c001cc8c:	eb fe                	jmp    c001cc8c <Thr::runtimeReferenceHelper()+0x11>

c001cc8e <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc8e:	57                   	push   edi
c001cc8f:	56                   	push   esi
c001cc90:	53                   	push   ebx
c001cc91:	31 db                	xor    ebx,ebx
c001cc93:	39 1d 80 19 03 c0    	cmp    DWORD PTR ds:0xc0031980,ebx
c001cc99:	7e 3c                	jle    c001ccd7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc9b:	8b 34 9d 00 19 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce700]
c001cca2:	31 ff                	xor    edi,edi
c001cca4:	39 3c 9d 00 18 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce800],edi
c001ccab:	7e 27                	jle    c001ccd4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccad:	50                   	push   eax
c001ccae:	50                   	push   eax
c001ccaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccb3:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccb5:	03 04 9d 80 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce780]
c001ccbc:	50                   	push   eax
c001ccbd:	e8 fe 3b fe ff       	call   c00008c0 <strcmp>
c001ccc2:	83 c4 10             	add    esp,0x10
c001ccc5:	85 c0                	test   eax,eax
c001ccc7:	75 05                	jne    c001ccce <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccc9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cccc:	eb 0b                	jmp    c001ccd9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccce:	83 c6 10             	add    esi,0x10
c001ccd1:	47                   	inc    edi
c001ccd2:	eb d0                	jmp    c001cca4 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccd4:	43                   	inc    ebx
c001ccd5:	eb bc                	jmp    c001cc93 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ccd7:	31 c0                	xor    eax,eax
c001ccd9:	5b                   	pop    ebx
c001ccda:	5e                   	pop    esi
c001ccdb:	5f                   	pop    edi
c001ccdc:	c3                   	ret    

c001ccdd <Thr::loadKernelSymbolTable(char const*)>:
c001ccdd:	55                   	push   ebp
c001ccde:	57                   	push   edi
c001ccdf:	56                   	push   esi
c001cce0:	53                   	push   ebx
c001cce1:	83 ec 68             	sub    esp,0x68
c001cce4:	8b 35 d4 19 03 c0    	mov    esi,DWORD PTR ds:0xc00319d4
c001ccea:	68 14 01 00 00       	push   0x114
c001ccef:	e8 4f 2b ff ff       	call   c000f843 <malloc>
c001ccf4:	83 c4 0c             	add    esp,0xc
c001ccf7:	89 c3                	mov    ebx,eax
c001ccf9:	56                   	push   esi
c001ccfa:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ccfe:	50                   	push   eax
c001ccff:	e8 ae 67 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001cd04:	5e                   	pop    esi
c001cd05:	5f                   	pop    edi
c001cd06:	6a 01                	push   0x1
c001cd08:	53                   	push   ebx
c001cd09:	e8 08 68 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001cd0e:	83 c4 10             	add    esp,0x10
c001cd11:	85 c0                	test   eax,eax
c001cd13:	74 0a                	je     c001cd1f <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd15:	83 ec 0c             	sub    esp,0xc
c001cd18:	68 8c c0 02 c0       	push   0xc002c08c
c001cd1d:	eb 34                	jmp    c001cd53 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd1f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd27:	83 ec 0c             	sub    esp,0xc
c001cd2a:	6a 34                	push   0x34
c001cd2c:	e8 12 2b ff ff       	call   c000f843 <malloc>
c001cd31:	59                   	pop    ecx
c001cd32:	89 c7                	mov    edi,eax
c001cd34:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd38:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd3a:	56                   	push   esi
c001cd3b:	57                   	push   edi
c001cd3c:	6a 00                	push   0x0
c001cd3e:	6a 34                	push   0x34
c001cd40:	53                   	push   ebx
c001cd41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd44:	83 c4 20             	add    esp,0x20
c001cd47:	85 c0                	test   eax,eax
c001cd49:	74 17                	je     c001cd62 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd4b:	83 ec 0c             	sub    esp,0xc
c001cd4e:	68 a3 c0 02 c0       	push   0xc002c0a3
c001cd53:	e8 af d8 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001cd58:	83 c4 10             	add    esp,0x10
c001cd5b:	31 c0                	xor    eax,eax
c001cd5d:	e9 31 02 00 00       	jmp    c001cf93 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd62:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd68:	75 e1                	jne    c001cd4b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd6a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd6d:	85 c0                	test   eax,eax
c001cd6f:	74 da                	je     c001cd4b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd71:	52                   	push   edx
c001cd72:	31 d2                	xor    edx,edx
c001cd74:	52                   	push   edx
c001cd75:	50                   	push   eax
c001cd76:	53                   	push   ebx
c001cd77:	e8 58 68 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cd7c:	83 c4 10             	add    esp,0x10
c001cd7f:	85 c0                	test   eax,eax
c001cd81:	75 c8                	jne    c001cd4b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd83:	83 ec 0c             	sub    esp,0xc
c001cd86:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd8a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd8e:	31 ed                	xor    ebp,ebp
c001cd90:	0f af c2             	imul   eax,edx
c001cd93:	50                   	push   eax
c001cd94:	e8 aa 2a ff ff       	call   c000f843 <malloc>
c001cd99:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd9f:	89 34 24             	mov    DWORD PTR [esp],esi
c001cda2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cda6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdaa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdae:	0f af c2             	imul   eax,edx
c001cdb1:	99                   	cdq    
c001cdb2:	52                   	push   edx
c001cdb3:	50                   	push   eax
c001cdb4:	53                   	push   ebx
c001cdb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdb8:	83 c4 20             	add    esp,0x20
c001cdbb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdc3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdcb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cddb:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cddf:	0f 86 aa 00 00 00    	jbe    c001ce8f <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cde5:	0f b7 f5             	movzx  esi,bp
c001cde8:	6b f6 28             	imul   esi,esi,0x28
c001cdeb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cdef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cdf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdf6:	50                   	push   eax
c001cdf7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdfb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cdff:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce01:	6b c0 28             	imul   eax,eax,0x28
c001ce04:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce08:	89 d0                	mov    eax,edx
c001ce0a:	31 d2                	xor    edx,edx
c001ce0c:	52                   	push   edx
c001ce0d:	50                   	push   eax
c001ce0e:	53                   	push   ebx
c001ce0f:	e8 c0 67 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001ce14:	83 c4 0c             	add    esp,0xc
c001ce17:	6a 20                	push   0x20
c001ce19:	6a 00                	push   0x0
c001ce1b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce1f:	52                   	push   edx
c001ce20:	e8 53 39 fe ff       	call   c0000778 <memset>
c001ce25:	58                   	pop    eax
c001ce26:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce28:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce2c:	51                   	push   ecx
c001ce2d:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce31:	52                   	push   edx
c001ce32:	6a 00                	push   0x0
c001ce34:	6a 1f                	push   0x1f
c001ce36:	53                   	push   ebx
c001ce37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce3a:	83 c4 18             	add    esp,0x18
c001ce3d:	68 ba c0 02 c0       	push   0xc002c0ba
c001ce42:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce46:	52                   	push   edx
c001ce47:	e8 74 3a fe ff       	call   c00008c0 <strcmp>
c001ce4c:	83 c4 10             	add    esp,0x10
c001ce4f:	85 c0                	test   eax,eax
c001ce51:	75 0f                	jne    c001ce62 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce53:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce62:	50                   	push   eax
c001ce63:	50                   	push   eax
c001ce64:	68 c2 c0 02 c0       	push   0xc002c0c2
c001ce69:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce6d:	50                   	push   eax
c001ce6e:	e8 4d 3a fe ff       	call   c00008c0 <strcmp>
c001ce73:	83 c4 10             	add    esp,0x10
c001ce76:	85 c0                	test   eax,eax
c001ce78:	75 0f                	jne    c001ce89 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce7a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce89:	45                   	inc    ebp
c001ce8a:	e9 4c ff ff ff       	jmp    c001cddb <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce8f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce94:	75 10                	jne    c001cea6 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce96:	83 ec 0c             	sub    esp,0xc
c001ce99:	68 ca c0 02 c0       	push   0xc002c0ca
c001ce9e:	e8 64 d7 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001cea3:	83 c4 10             	add    esp,0x10
c001cea6:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ceab:	75 10                	jne    c001cebd <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cead:	83 ec 0c             	sub    esp,0xc
c001ceb0:	68 ca c0 02 c0       	push   0xc002c0ca
c001ceb5:	e8 4d d7 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001ceba:	83 c4 10             	add    esp,0x10
c001cebd:	31 d2                	xor    edx,edx
c001cebf:	50                   	push   eax
c001cec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cec4:	52                   	push   edx
c001cec5:	50                   	push   eax
c001cec6:	53                   	push   ebx
c001cec7:	e8 08 67 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cecc:	5a                   	pop    edx
c001cecd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ced1:	e8 6d 29 ff ff       	call   c000f843 <malloc>
c001ced6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ceda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cede:	31 c9                	xor    ecx,ecx
c001cee0:	5e                   	pop    esi
c001cee1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cee3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cee7:	55                   	push   ebp
c001cee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceec:	51                   	push   ecx
c001ceed:	52                   	push   edx
c001ceee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cef2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cef6:	53                   	push   ebx
c001cef7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cefa:	83 c4 14             	add    esp,0x14
c001cefd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf01:	e8 3d 29 ff ff       	call   c000f843 <malloc>
c001cf06:	89 c6                	mov    esi,eax
c001cf08:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf0a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf0d:	56                   	push   esi
c001cf0e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf16:	51                   	push   ecx
c001cf17:	52                   	push   edx
c001cf18:	53                   	push   ebx
c001cf19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf20:	8b 15 80 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031980
c001cf26:	83 c4 1c             	add    esp,0x1c
c001cf29:	c1 e8 04             	shr    eax,0x4
c001cf2c:	89 04 95 00 18 03 c0 	mov    DWORD PTR [edx*4-0x3ffce800],eax
c001cf33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf37:	31 d2                	xor    edx,edx
c001cf39:	52                   	push   edx
c001cf3a:	50                   	push   eax
c001cf3b:	53                   	push   ebx
c001cf3c:	e8 93 66 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001cf41:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf43:	31 d2                	xor    edx,edx
c001cf45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf48:	56                   	push   esi
c001cf49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf4d:	52                   	push   edx
c001cf4e:	50                   	push   eax
c001cf4f:	53                   	push   ebx
c001cf50:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf53:	83 c4 14             	add    esp,0x14
c001cf56:	53                   	push   ebx
c001cf57:	e8 18 66 ff ff       	call   c0013574 <File::close()>
c001cf5c:	5d                   	pop    ebp
c001cf5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf61:	e8 ed 28 ff ff       	call   c000f853 <free>
c001cf66:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf69:	e8 e5 28 ff ff       	call   c000f853 <free>
c001cf6e:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c001cf73:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf77:	8d 50 01             	lea    edx,[eax+0x1]
c001cf7a:	89 0c 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],ecx
c001cf81:	89 34 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],esi
c001cf88:	89 15 80 19 03 c0    	mov    DWORD PTR ds:0xc0031980,edx
c001cf8e:	83 c4 10             	add    esp,0x10
c001cf91:	b0 01                	mov    al,0x1
c001cf93:	83 c4 5c             	add    esp,0x5c
c001cf96:	5b                   	pop    ebx
c001cf97:	5e                   	pop    esi
c001cf98:	5f                   	pop    edi
c001cf99:	5d                   	pop    ebp
c001cf9a:	c3                   	ret    

c001cf9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf9b:	55                   	push   ebp
c001cf9c:	57                   	push   edi
c001cf9d:	56                   	push   esi
c001cf9e:	53                   	push   ebx
c001cf9f:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfa5:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfac:	8b 1d d4 19 03 c0    	mov    ebx,DWORD PTR ds:0xc00319d4
c001cfb2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfb6:	68 14 01 00 00       	push   0x114
c001cfbb:	e8 83 28 ff ff       	call   c000f843 <malloc>
c001cfc0:	83 c4 0c             	add    esp,0xc
c001cfc3:	89 c5                	mov    ebp,eax
c001cfc5:	53                   	push   ebx
c001cfc6:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfcd:	50                   	push   eax
c001cfce:	e8 df 64 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001cfd3:	5e                   	pop    esi
c001cfd4:	5f                   	pop    edi
c001cfd5:	6a 01                	push   0x1
c001cfd7:	55                   	push   ebp
c001cfd8:	e8 39 65 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001cfdd:	83 c4 10             	add    esp,0x10
c001cfe0:	85 c0                	test   eax,eax
c001cfe2:	0f 85 8d 06 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfe8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cff0:	83 ec 0c             	sub    esp,0xc
c001cff3:	6a 34                	push   0x34
c001cff5:	e8 49 28 ff ff       	call   c000f843 <malloc>
c001cffa:	5b                   	pop    ebx
c001cffb:	89 c7                	mov    edi,eax
c001cffd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d001:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d004:	53                   	push   ebx
c001d005:	57                   	push   edi
c001d006:	6a 00                	push   0x0
c001d008:	6a 34                	push   0x34
c001d00a:	55                   	push   ebp
c001d00b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d00e:	83 c4 20             	add    esp,0x20
c001d011:	85 c0                	test   eax,eax
c001d013:	0f 85 5c 06 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d019:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d01f:	0f 85 50 06 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d025:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d028:	85 c0                	test   eax,eax
c001d02a:	0f 84 45 06 00 00    	je     c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d030:	31 d2                	xor    edx,edx
c001d032:	51                   	push   ecx
c001d033:	52                   	push   edx
c001d034:	50                   	push   eax
c001d035:	55                   	push   ebp
c001d036:	e8 99 65 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	85 c0                	test   eax,eax
c001d040:	0f 85 2f 06 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d046:	83 ec 0c             	sub    esp,0xc
c001d049:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d04c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d050:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d054:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d058:	0f af c2             	imul   eax,edx
c001d05b:	50                   	push   eax
c001d05c:	e8 e2 27 ff ff       	call   c000f843 <malloc>
c001d061:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d064:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d068:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d06b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d06f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d073:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d077:	0f af c2             	imul   eax,edx
c001d07a:	99                   	cdq    
c001d07b:	52                   	push   edx
c001d07c:	50                   	push   eax
c001d07d:	55                   	push   ebp
c001d07e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d081:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d084:	83 c4 20             	add    esp,0x20
c001d087:	85 c0                	test   eax,eax
c001d089:	0f 84 e6 05 00 00    	je     c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d08f:	52                   	push   edx
c001d090:	31 d2                	xor    edx,edx
c001d092:	52                   	push   edx
c001d093:	50                   	push   eax
c001d094:	55                   	push   ebp
c001d095:	e8 3a 65 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d09a:	83 c4 10             	add    esp,0x10
c001d09d:	85 c0                	test   eax,eax
c001d09f:	0f 85 d0 05 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a5:	83 ec 0c             	sub    esp,0xc
c001d0a8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0ac:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0b0:	31 f6                	xor    esi,esi
c001d0b2:	0f af c2             	imul   eax,edx
c001d0b5:	50                   	push   eax
c001d0b6:	e8 88 27 ff ff       	call   c000f843 <malloc>
c001d0bb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0c9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0cd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0d1:	0f af c2             	imul   eax,edx
c001d0d4:	99                   	cdq    
c001d0d5:	52                   	push   edx
c001d0d6:	50                   	push   eax
c001d0d7:	55                   	push   ebp
c001d0d8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0db:	83 c4 20             	add    esp,0x20
c001d0de:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0e2:	0f 86 8a 00 00 00    	jbe    c001d172 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d0e8:	0f b7 de             	movzx  ebx,si
c001d0eb:	c1 e3 05             	shl    ebx,0x5
c001d0ee:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d0f2:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d0f5:	75 75                	jne    c001d16c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d0f7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0fa:	31 d2                	xor    edx,edx
c001d0fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d100:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d107:	50                   	push   eax
c001d108:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d10b:	52                   	push   edx
c001d10c:	50                   	push   eax
c001d10d:	55                   	push   ebp
c001d10e:	e8 c1 64 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d113:	83 c4 10             	add    esp,0x10
c001d116:	85 c0                	test   eax,eax
c001d118:	0f 85 57 05 00 00    	jne    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d11e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d125:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d128:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d12c:	31 d2                	xor    edx,edx
c001d12e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d132:	83 ec 0c             	sub    esp,0xc
c001d135:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d139:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d140:	50                   	push   eax
c001d141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d149:	52                   	push   edx
c001d14a:	50                   	push   eax
c001d14b:	55                   	push   ebp
c001d14c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d14f:	83 c4 1c             	add    esp,0x1c
c001d152:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d155:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d158:	50                   	push   eax
c001d159:	6a 00                	push   0x0
c001d15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d15f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d163:	50                   	push   eax
c001d164:	e8 0f 36 fe ff       	call   c0000778 <memset>
c001d169:	83 c4 10             	add    esp,0x10
c001d16c:	46                   	inc    esi
c001d16d:	e9 6c ff ff ff       	jmp    c001d0de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d172:	53                   	push   ebx
c001d173:	31 db                	xor    ebx,ebx
c001d175:	68 00 01 00 00       	push   0x100
c001d17a:	6a 00                	push   0x0
c001d17c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d180:	50                   	push   eax
c001d181:	e8 f2 35 fe ff       	call   c0000778 <memset>
c001d186:	83 c4 0c             	add    esp,0xc
c001d189:	68 00 01 00 00       	push   0x100
c001d18e:	6a 00                	push   0x0
c001d190:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d197:	50                   	push   eax
c001d198:	e8 db 35 fe ff       	call   c0000778 <memset>
c001d19d:	83 c4 10             	add    esp,0x10
c001d1a0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1a8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1b0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1c8:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1cc:	0f 86 30 01 00 00    	jbe    c001d302 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1d2:	0f b7 f3             	movzx  esi,bx
c001d1d5:	6b f6 28             	imul   esi,esi,0x28
c001d1d8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1e3:	52                   	push   edx
c001d1e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1e8:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d1ec:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1ee:	6b d2 28             	imul   edx,edx,0x28
c001d1f1:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d1f5:	31 d2                	xor    edx,edx
c001d1f7:	52                   	push   edx
c001d1f8:	50                   	push   eax
c001d1f9:	55                   	push   ebp
c001d1fa:	e8 d5 63 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d1ff:	83 c4 0c             	add    esp,0xc
c001d202:	6a 20                	push   0x20
c001d204:	6a 00                	push   0x0
c001d206:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d20d:	51                   	push   ecx
c001d20e:	e8 65 35 fe ff       	call   c0000778 <memset>
c001d213:	59                   	pop    ecx
c001d214:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d217:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d21b:	52                   	push   edx
c001d21c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d223:	51                   	push   ecx
c001d224:	6a 00                	push   0x0
c001d226:	6a 1f                	push   0x1f
c001d228:	55                   	push   ebp
c001d229:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d22c:	83 c4 1c             	add    esp,0x1c
c001d22f:	6a 09                	push   0x9
c001d231:	68 e4 c0 02 c0       	push   0xc002c0e4
c001d236:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d23d:	51                   	push   ecx
c001d23e:	e8 fd 33 fe ff       	call   c0000640 <memcmp>
c001d243:	83 c4 10             	add    esp,0x10
c001d246:	85 c0                	test   eax,eax
c001d248:	75 21                	jne    c001d26b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d24a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d24e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d252:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d256:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d25a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d25d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d264:	89 d0                	mov    eax,edx
c001d266:	40                   	inc    eax
c001d267:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d26b:	50                   	push   eax
c001d26c:	6a 09                	push   0x9
c001d26e:	68 ee c0 02 c0       	push   0xc002c0ee
c001d273:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d27a:	50                   	push   eax
c001d27b:	e8 c0 33 fe ff       	call   c0000640 <memcmp>
c001d280:	83 c4 10             	add    esp,0x10
c001d283:	85 c0                	test   eax,eax
c001d285:	75 21                	jne    c001d2a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d28b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d28f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d293:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d297:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d29a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2a1:	89 d0                	mov    eax,edx
c001d2a3:	40                   	inc    eax
c001d2a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2a8:	50                   	push   eax
c001d2a9:	50                   	push   eax
c001d2aa:	68 ba c0 02 c0       	push   0xc002c0ba
c001d2af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2b6:	50                   	push   eax
c001d2b7:	e8 04 36 fe ff       	call   c00008c0 <strcmp>
c001d2bc:	83 c4 10             	add    esp,0x10
c001d2bf:	85 c0                	test   eax,eax
c001d2c1:	75 0f                	jne    c001d2d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2c3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2d2:	50                   	push   eax
c001d2d3:	50                   	push   eax
c001d2d4:	68 c2 c0 02 c0       	push   0xc002c0c2
c001d2d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2e0:	50                   	push   eax
c001d2e1:	e8 da 35 fe ff       	call   c00008c0 <strcmp>
c001d2e6:	83 c4 10             	add    esp,0x10
c001d2e9:	85 c0                	test   eax,eax
c001d2eb:	75 0f                	jne    c001d2fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d2ed:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2fc:	43                   	inc    ebx
c001d2fd:	e9 c6 fe ff ff       	jmp    c001d1c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d302:	31 d2                	xor    edx,edx
c001d304:	50                   	push   eax
c001d305:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d309:	52                   	push   edx
c001d30a:	50                   	push   eax
c001d30b:	55                   	push   ebp
c001d30c:	e8 c3 62 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d311:	58                   	pop    eax
c001d312:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d316:	e8 28 25 ff ff       	call   c000f843 <malloc>
c001d31b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d31e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d322:	31 d2                	xor    edx,edx
c001d324:	58                   	pop    eax
c001d325:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d329:	53                   	push   ebx
c001d32a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d32e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d332:	52                   	push   edx
c001d333:	50                   	push   eax
c001d334:	55                   	push   ebp
c001d335:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d338:	83 c4 14             	add    esp,0x14
c001d33b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d33f:	e8 ff 24 ff ff       	call   c000f843 <malloc>
c001d344:	31 d2                	xor    edx,edx
c001d346:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d34a:	83 c4 0c             	add    esp,0xc
c001d34d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d351:	52                   	push   edx
c001d352:	50                   	push   eax
c001d353:	55                   	push   ebp
c001d354:	e8 7b 62 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d359:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d35c:	31 d2                	xor    edx,edx
c001d35e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d361:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d365:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d369:	52                   	push   edx
c001d36a:	50                   	push   eax
c001d36b:	55                   	push   ebp
c001d36c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d36f:	83 c4 20             	add    esp,0x20
c001d372:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d37a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d37e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d382:	0f 84 f1 02 00 00    	je     c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d388:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d38f:	31 d2                	xor    edx,edx
c001d391:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d395:	c1 e8 03             	shr    eax,0x3
c001d398:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d39c:	51                   	push   ecx
c001d39d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3a1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3a5:	52                   	push   edx
c001d3a6:	50                   	push   eax
c001d3a7:	55                   	push   ebp
c001d3a8:	e8 27 62 ff ff       	call   c00135d4 <File::seek(unsigned long long)>
c001d3ad:	5b                   	pop    ebx
c001d3ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3b9:	e8 85 24 ff ff       	call   c000f843 <malloc>
c001d3be:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3c5:	31 d2                	xor    edx,edx
c001d3c7:	5e                   	pop    esi
c001d3c8:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3cc:	50                   	push   eax
c001d3cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3d5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3dc:	52                   	push   edx
c001d3dd:	50                   	push   eax
c001d3de:	55                   	push   ebp
c001d3df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3e2:	83 c4 20             	add    esp,0x20
c001d3e5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d3ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d3f1:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d3f5:	0f 8d 62 02 00 00    	jge    c001d65d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d3fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d403:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d408:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d40b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d40f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d413:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d417:	89 d8                	mov    eax,ebx
c001d419:	c1 e8 08             	shr    eax,0x8
c001d41c:	89 c6                	mov    esi,eax
c001d41e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d422:	c1 e6 04             	shl    esi,0x4
c001d425:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d429:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d42c:	85 d2                	test   edx,edx
c001d42e:	0f 85 bf 00 00 00    	jne    c001d4f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d434:	83 ec 0c             	sub    esp,0xc
c001d437:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d43b:	03 06                	add    eax,DWORD PTR [esi]
c001d43d:	50                   	push   eax
c001d43e:	e8 4b f8 ff ff       	call   c001cc8e <Thr::getAddressOfKernelSymbol(char const*)>
c001d443:	83 c4 10             	add    esp,0x10
c001d446:	89 c2                	mov    edx,eax
c001d448:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d44d:	85 c0                	test   eax,eax
c001d44f:	0f 85 9e 00 00 00    	jne    c001d4f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d455:	83 ec 0c             	sub    esp,0xc
c001d458:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d45c:	03 06                	add    eax,DWORD PTR [esi]
c001d45e:	50                   	push   eax
c001d45f:	e8 91 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d464:	83 c4 10             	add    esp,0x10
c001d467:	89 c2                	mov    edx,eax
c001d469:	85 c0                	test   eax,eax
c001d46b:	0f 85 82 00 00 00    	jne    c001d4f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d471:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d475:	50                   	push   eax
c001d476:	50                   	push   eax
c001d477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d47b:	03 06                	add    eax,DWORD PTR [esi]
c001d47d:	50                   	push   eax
c001d47e:	68 f8 c0 02 c0       	push   0xc002c0f8
c001d483:	e8 d2 5a ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001d488:	58                   	pop    eax
c001d489:	5a                   	pop    edx
c001d48a:	68 12 c1 02 c0       	push   0xc002c112
c001d48f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d496:	50                   	push   eax
c001d497:	e8 98 33 fe ff       	call   c0000834 <strcpy>
c001d49c:	59                   	pop    ecx
c001d49d:	58                   	pop    eax
c001d49e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a2:	03 06                	add    eax,DWORD PTR [esi]
c001d4a4:	50                   	push   eax
c001d4a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4ac:	50                   	push   eax
c001d4ad:	e8 c2 34 fe ff       	call   c0000974 <strcat>
c001d4b2:	58                   	pop    eax
c001d4b3:	5a                   	pop    edx
c001d4b4:	68 a8 c1 02 c0       	push   0xc002c1a8
c001d4b9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4c0:	50                   	push   eax
c001d4c1:	e8 ae 34 fe ff       	call   c0000974 <strcat>
c001d4c6:	83 c4 10             	add    esp,0x10
c001d4c9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4ce:	0f 84 43 01 00 00    	je     c001d617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4d4:	83 ec 0c             	sub    esp,0xc
c001d4d7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4de:	50                   	push   eax
c001d4df:	e8 23 d1 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001d4e4:	83 c4 10             	add    esp,0x10
c001d4e7:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d4eb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4f3:	80 fb 01             	cmp    bl,0x1
c001d4f6:	75 7d                	jne    c001d575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d4f8:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4ff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d503:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d507:	01 ce                	add    esi,ecx
c001d509:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d50f:	0f 94 c0             	sete   al
c001d512:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d518:	0f 94 c3             	sete   bl
c001d51b:	09 c3                	or     ebx,eax
c001d51d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d51f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d524:	74 36                	je     c001d55c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d526:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d529:	84 db                	test   bl,bl
c001d52b:	75 0a                	jne    c001d537 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d52d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d531:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d535:	76 37                	jbe    c001d56e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d537:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d53b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d540:	0f 84 d1 00 00 00    	je     c001d617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d546:	83 ec 0c             	sub    esp,0xc
c001d549:	68 29 c1 02 c0       	push   0xc002c129
c001d54e:	e8 b4 d0 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001d553:	83 c4 10             	add    esp,0x10
c001d556:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d55a:	eb 12                	jmp    c001d56e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d55c:	01 c1                	add    ecx,eax
c001d55e:	84 db                	test   bl,bl
c001d560:	75 0c                	jne    c001d56e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d562:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d566:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d56a:	77 02                	ja     c001d56e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d56c:	01 d1                	add    ecx,edx
c001d56e:	89 0e                	mov    DWORD PTR [esi],ecx
c001d570:	e9 df 00 00 00       	jmp    c001d654 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d575:	80 fb 02             	cmp    bl,0x2
c001d578:	75 71                	jne    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d57a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d581:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d585:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d589:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d58f:	74 15                	je     c001d5a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d591:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d597:	74 0d                	je     c001d5a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d599:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d59d:	83 e8 04             	sub    eax,0x4
c001d5a0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5a4:	76 1f                	jbe    c001d5c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5a6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5aa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5af:	74 66                	je     c001d617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5b1:	83 ec 0c             	sub    esp,0xc
c001d5b4:	68 45 c1 02 c0       	push   0xc002c145
c001d5b9:	e8 49 d0 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001d5be:	83 c4 10             	add    esp,0x10
c001d5c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5c5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5c7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5cc:	74 13                	je     c001d5e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5ce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5d2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5d9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5dd:	01 c8                	add    eax,ecx
c001d5df:	eb 04                	jmp    c001d5e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5e1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5e5:	01 c2                	add    edx,eax
c001d5e7:	89 16                	mov    DWORD PTR [esi],edx
c001d5e9:	eb 69                	jmp    c001d654 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5eb:	0f b6 db             	movzx  ebx,bl
c001d5ee:	50                   	push   eax
c001d5ef:	50                   	push   eax
c001d5f0:	53                   	push   ebx
c001d5f1:	68 61 c1 02 c0       	push   0xc002c161
c001d5f6:	e8 5f 59 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001d5fb:	83 c4 10             	add    esp,0x10
c001d5fe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d603:	74 12                	je     c001d617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d605:	83 ec 0c             	sub    esp,0xc
c001d608:	68 6c c1 02 c0       	push   0xc002c16c
c001d60d:	e8 f5 cf ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001d612:	83 c4 10             	add    esp,0x10
c001d615:	eb 3d                	jmp    c001d654 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d617:	83 ec 0c             	sub    esp,0xc
c001d61a:	55                   	push   ebp
c001d61b:	e8 54 5f ff ff       	call   c0013574 <File::close()>
c001d620:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d623:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d626:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d629:	59                   	pop    ecx
c001d62a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d62e:	e8 20 22 ff ff       	call   c000f853 <free>
c001d633:	5b                   	pop    ebx
c001d634:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d638:	e8 16 22 ff ff       	call   c000f853 <free>
c001d63d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d640:	e8 0e 22 ff ff       	call   c000f853 <free>
c001d645:	5e                   	pop    esi
c001d646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d64a:	e8 04 22 ff ff       	call   c000f853 <free>
c001d64f:	83 c4 10             	add    esp,0x10
c001d652:	eb 21                	jmp    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d654:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d658:	e9 90 fd ff ff       	jmp    c001d3ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d65d:	83 ec 0c             	sub    esp,0xc
c001d660:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d664:	e8 ea 21 ff ff       	call   c000f853 <free>
c001d669:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d66d:	83 c4 10             	add    esp,0x10
c001d670:	e9 05 fd ff ff       	jmp    c001d37a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d675:	31 c0                	xor    eax,eax
c001d677:	eb 33                	jmp    c001d6ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d679:	83 ec 0c             	sub    esp,0xc
c001d67c:	55                   	push   ebp
c001d67d:	e8 f2 5e ff ff       	call   c0013574 <File::close()>
c001d682:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d685:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d688:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d68b:	58                   	pop    eax
c001d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d690:	e8 be 21 ff ff       	call   c000f853 <free>
c001d695:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d698:	e8 b6 21 ff ff       	call   c000f853 <free>
c001d69d:	5a                   	pop    edx
c001d69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6a2:	e8 ac 21 ff ff       	call   c000f853 <free>
c001d6a7:	83 c4 10             	add    esp,0x10
c001d6aa:	b0 01                	mov    al,0x1
c001d6ac:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6b2:	5b                   	pop    ebx
c001d6b3:	5e                   	pop    esi
c001d6b4:	5f                   	pop    edi
c001d6b5:	5d                   	pop    ebp
c001d6b6:	c3                   	ret    

c001d6b7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6b7:	56                   	push   esi
c001d6b8:	31 d2                	xor    edx,edx
c001d6ba:	53                   	push   ebx
c001d6bb:	8b 1d e0 11 03 c0    	mov    ebx,DWORD PTR ds:0xc00311e0
c001d6c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6c5:	39 d3                	cmp    ebx,edx
c001d6c7:	7e 1b                	jle    c001d6e4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6c9:	8b 04 95 00 14 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcec00]
c001d6d0:	39 c8                	cmp    eax,ecx
c001d6d2:	77 0d                	ja     c001d6e1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6d4:	8b 34 95 00 12 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcee00]
c001d6db:	01 c6                	add    esi,eax
c001d6dd:	39 ce                	cmp    esi,ecx
c001d6df:	77 05                	ja     c001d6e6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6e1:	42                   	inc    edx
c001d6e2:	eb e1                	jmp    c001d6c5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6e4:	31 c0                	xor    eax,eax
c001d6e6:	5b                   	pop    ebx
c001d6e7:	5e                   	pop    esi
c001d6e8:	c3                   	ret    

c001d6e9 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6e9:	53                   	push   ebx
c001d6ea:	31 c0                	xor    eax,eax
c001d6ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6f0:	8b 1d e0 11 03 c0    	mov    ebx,DWORD PTR ds:0xc00311e0
c001d6f6:	39 c3                	cmp    ebx,eax
c001d6f8:	7e 22                	jle    c001d71c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6fa:	8b 14 85 00 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcec00]
c001d701:	39 ca                	cmp    edx,ecx
c001d703:	77 14                	ja     c001d719 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d705:	03 14 85 00 12 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcee00]
c001d70c:	39 ca                	cmp    edx,ecx
c001d70e:	76 09                	jbe    c001d719 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d710:	8b 04 85 00 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcea00]
c001d717:	eb 05                	jmp    c001d71e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d719:	40                   	inc    eax
c001d71a:	eb da                	jmp    c001d6f6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d71c:	31 c0                	xor    eax,eax
c001d71e:	5b                   	pop    ebx
c001d71f:	c3                   	ret    

c001d720 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d720:	53                   	push   ebx
c001d721:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d725:	53                   	push   ebx
c001d726:	e8 8c ff ff ff       	call   c001d6b7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d72b:	5a                   	pop    edx
c001d72c:	31 d2                	xor    edx,edx
c001d72e:	85 c0                	test   eax,eax
c001d730:	74 04                	je     c001d736 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d732:	89 da                	mov    edx,ebx
c001d734:	29 c2                	sub    edx,eax
c001d736:	89 d0                	mov    eax,edx
c001d738:	5b                   	pop    ebx
c001d739:	c3                   	ret    

c001d73a <Thr::loadDLL(char const*, bool)>:
c001d73a:	55                   	push   ebp
c001d73b:	57                   	push   edi
c001d73c:	56                   	push   esi
c001d73d:	53                   	push   ebx
c001d73e:	81 ec 34 01 00 00    	sub    esp,0x134
c001d744:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d74b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d752:	56                   	push   esi
c001d753:	68 84 c1 02 c0       	push   0xc002c184
c001d758:	e8 fd 57 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001d75d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d764:	e8 da 20 ff ff       	call   c000f843 <malloc>
c001d769:	83 c4 0c             	add    esp,0xc
c001d76c:	89 c3                	mov    ebx,eax
c001d76e:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001d774:	56                   	push   esi
c001d775:	50                   	push   eax
c001d776:	e8 37 5d ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001d77b:	83 c4 10             	add    esp,0x10
c001d77e:	85 db                	test   ebx,ebx
c001d780:	75 3c                	jne    c001d7be <Thr::loadDLL(char const*, bool)+0x84>
c001d782:	89 e8                	mov    eax,ebp
c001d784:	84 c0                	test   al,al
c001d786:	0f 84 f0 01 00 00    	je     c001d97c <Thr::loadDLL(char const*, bool)+0x242>
c001d78c:	50                   	push   eax
c001d78d:	50                   	push   eax
c001d78e:	68 95 c1 02 c0       	push   0xc002c195
c001d793:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d797:	57                   	push   edi
c001d798:	e8 97 30 fe ff       	call   c0000834 <strcpy>
c001d79d:	58                   	pop    eax
c001d79e:	5a                   	pop    edx
c001d79f:	56                   	push   esi
c001d7a0:	57                   	push   edi
c001d7a1:	e8 ce 31 fe ff       	call   c0000974 <strcat>
c001d7a6:	59                   	pop    ecx
c001d7a7:	58                   	pop    eax
c001d7a8:	68 a8 c1 02 c0       	push   0xc002c1a8
c001d7ad:	57                   	push   edi
c001d7ae:	e8 c1 31 fe ff       	call   c0000974 <strcat>
c001d7b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7b6:	e8 4c ce ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001d7bb:	83 c4 10             	add    esp,0x10
c001d7be:	50                   	push   eax
c001d7bf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7c3:	50                   	push   eax
c001d7c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7c8:	50                   	push   eax
c001d7c9:	53                   	push   ebx
c001d7ca:	e8 f3 5f ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c001d7cf:	83 c4 10             	add    esp,0x10
c001d7d2:	85 db                	test   ebx,ebx
c001d7d4:	74 0c                	je     c001d7e2 <Thr::loadDLL(char const*, bool)+0xa8>
c001d7d6:	83 ec 0c             	sub    esp,0xc
c001d7d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7db:	53                   	push   ebx
c001d7dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7df:	83 c4 10             	add    esp,0x10
c001d7e2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7e7:	75 0a                	jne    c001d7f3 <Thr::loadDLL(char const*, bool)+0xb9>
c001d7e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7ed:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7f1:	75 3c                	jne    c001d82f <Thr::loadDLL(char const*, bool)+0xf5>
c001d7f3:	89 e8                	mov    eax,ebp
c001d7f5:	84 c0                	test   al,al
c001d7f7:	0f 84 67 01 00 00    	je     c001d964 <Thr::loadDLL(char const*, bool)+0x22a>
c001d7fd:	50                   	push   eax
c001d7fe:	50                   	push   eax
c001d7ff:	68 95 c1 02 c0       	push   0xc002c195
c001d804:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d808:	53                   	push   ebx
c001d809:	e8 26 30 fe ff       	call   c0000834 <strcpy>
c001d80e:	58                   	pop    eax
c001d80f:	5a                   	pop    edx
c001d810:	56                   	push   esi
c001d811:	53                   	push   ebx
c001d812:	e8 5d 31 fe ff       	call   c0000974 <strcat>
c001d817:	59                   	pop    ecx
c001d818:	5f                   	pop    edi
c001d819:	68 a8 c1 02 c0       	push   0xc002c1a8
c001d81e:	53                   	push   ebx
c001d81f:	e8 50 31 fe ff       	call   c0000974 <strcat>
c001d824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d827:	e8 db cd ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001d82c:	83 c4 10             	add    esp,0x10
c001d82f:	e8 aa 45 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001d834:	51                   	push   ecx
c001d835:	68 03 08 00 00       	push   0x803
c001d83a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d83e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d842:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d848:	83 d3 00             	adc    ebx,0x0
c001d84b:	89 ca                	mov    edx,ecx
c001d84d:	89 d1                	mov    ecx,edx
c001d84f:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d853:	51                   	push   ecx
c001d854:	50                   	push   eax
c001d855:	e8 d6 4b ff ff       	call   c0012430 <VAS::allocatePages(int, int)>
c001d85a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d85e:	89 c3                	mov    ebx,eax
c001d860:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d864:	05 ff 0f 00 00       	add    eax,0xfff
c001d869:	83 d2 00             	adc    edx,0x0
c001d86c:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d870:	c1 ea 0c             	shr    edx,0xc
c001d873:	52                   	push   edx
c001d874:	50                   	push   eax
c001d875:	53                   	push   ebx
c001d876:	68 aa c1 02 c0       	push   0xc002c1aa
c001d87b:	e8 da 56 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001d880:	83 c4 14             	add    esp,0x14
c001d883:	56                   	push   esi
c001d884:	e8 0b 2f fe ff       	call   c0000794 <strlen>
c001d889:	8b 3d e0 11 03 c0    	mov    edi,DWORD PTR ds:0xc00311e0
c001d88f:	40                   	inc    eax
c001d890:	89 04 24             	mov    DWORD PTR [esp],eax
c001d893:	e8 ab 1f ff ff       	call   c000f843 <malloc>
c001d898:	89 04 bd 00 16 03 c0 	mov    DWORD PTR [edi*4-0x3ffcea00],eax
c001d89f:	5f                   	pop    edi
c001d8a0:	58                   	pop    eax
c001d8a1:	a1 e0 11 03 c0       	mov    eax,ds:0xc00311e0
c001d8a6:	56                   	push   esi
c001d8a7:	ff 34 85 00 16 03 c0 	push   DWORD PTR [eax*4-0x3ffcea00]
c001d8ae:	e8 81 2f fe ff       	call   c0000834 <strcpy>
c001d8b3:	a1 e0 11 03 c0       	mov    eax,ds:0xc00311e0
c001d8b8:	8d 50 01             	lea    edx,[eax+0x1]
c001d8bb:	89 1c 85 00 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec00],ebx
c001d8c2:	89 15 e0 11 03 c0    	mov    DWORD PTR ds:0xc00311e0,edx
c001d8c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8cc:	83 c4 0c             	add    esp,0xc
c001d8cf:	89 14 85 00 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee00],edx
c001d8d6:	6a 01                	push   0x1
c001d8d8:	53                   	push   ebx
c001d8d9:	56                   	push   esi
c001d8da:	e8 bc f6 ff ff       	call   c001cf9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8df:	83 c4 10             	add    esp,0x10
c001d8e2:	89 c7                	mov    edi,eax
c001d8e4:	84 c0                	test   al,al
c001d8e6:	0f 85 8c 00 00 00    	jne    c001d978 <Thr::loadDLL(char const*, bool)+0x23e>
c001d8ec:	89 e8                	mov    eax,ebp
c001d8ee:	84 c0                	test   al,al
c001d8f0:	74 76                	je     c001d968 <Thr::loadDLL(char const*, bool)+0x22e>
c001d8f2:	83 ec 0c             	sub    esp,0xc
c001d8f5:	68 ce c1 02 c0       	push   0xc002c1ce
c001d8fa:	e8 08 cd ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001d8ff:	83 c4 10             	add    esp,0x10
c001d902:	eb 64                	jmp    c001d968 <Thr::loadDLL(char const*, bool)+0x22e>
c001d904:	e8 d5 44 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001d909:	89 f5                	mov    ebp,esi
c001d90b:	c1 e5 0c             	shl    ebp,0xc
c001d90e:	52                   	push   edx
c001d90f:	01 dd                	add    ebp,ebx
c001d911:	52                   	push   edx
c001d912:	55                   	push   ebp
c001d913:	50                   	push   eax
c001d914:	e8 91 46 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c001d919:	83 c4 10             	add    esp,0x10
c001d91c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d91f:	75 0c                	jne    c001d92d <Thr::loadDLL(char const*, bool)+0x1f3>
c001d921:	83 ec 0c             	sub    esp,0xc
c001d924:	55                   	push   ebp
c001d925:	e8 31 25 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001d92a:	83 c4 10             	add    esp,0x10
c001d92d:	46                   	inc    esi
c001d92e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d932:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d936:	05 ff 0f 00 00       	add    eax,0xfff
c001d93b:	83 d2 00             	adc    edx,0x0
c001d93e:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d942:	c1 ea 0c             	shr    edx,0xc
c001d945:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d949:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d94d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d951:	ba 00 00 00 00       	mov    edx,0x0
c001d956:	89 d0                	mov    eax,edx
c001d958:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d95c:	72 a6                	jb     c001d904 <Thr::loadDLL(char const*, bool)+0x1ca>
c001d95e:	89 f8                	mov    eax,edi
c001d960:	84 c0                	test   al,al
c001d962:	75 18                	jne    c001d97c <Thr::loadDLL(char const*, bool)+0x242>
c001d964:	31 db                	xor    ebx,ebx
c001d966:	eb 14                	jmp    c001d97c <Thr::loadDLL(char const*, bool)+0x242>
c001d968:	83 ec 0c             	sub    esp,0xc
c001d96b:	68 ed c1 02 c0       	push   0xc002c1ed
c001d970:	e8 92 cc ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001d975:	83 c4 10             	add    esp,0x10
c001d978:	31 f6                	xor    esi,esi
c001d97a:	eb b2                	jmp    c001d92e <Thr::loadDLL(char const*, bool)+0x1f4>
c001d97c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d982:	89 d8                	mov    eax,ebx
c001d984:	5b                   	pop    ebx
c001d985:	5e                   	pop    esi
c001d986:	5f                   	pop    edi
c001d987:	5d                   	pop    ebp
c001d988:	c3                   	ret    

c001d989 <Thr::executeDLL(unsigned long, void*)>:
c001d989:	56                   	push   esi
c001d98a:	53                   	push   ebx
c001d98b:	52                   	push   edx
c001d98c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d990:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d994:	85 db                	test   ebx,ebx
c001d996:	75 10                	jne    c001d9a8 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d998:	83 ec 0c             	sub    esp,0xc
c001d99b:	68 09 c2 02 c0       	push   0xc002c209
c001d9a0:	e8 62 cc ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001d9a5:	83 c4 10             	add    esp,0x10
c001d9a8:	50                   	push   eax
c001d9a9:	50                   	push   eax
c001d9aa:	53                   	push   ebx
c001d9ab:	68 33 c2 02 c0       	push   0xc002c233
c001d9b0:	e8 a5 55 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001d9b5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9b9:	89 d8                	mov    eax,ebx
c001d9bb:	83 c4 14             	add    esp,0x14
c001d9be:	5b                   	pop    ebx
c001d9bf:	5e                   	pop    esi
c001d9c0:	ff e0                	jmp    eax

c001d9c2 <changeTSS>:
c001d9c2:	83 ec 14             	sub    esp,0x14
c001d9c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9ca:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9cd:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9d2:	c1 e2 15             	shl    edx,0x15
c001d9d5:	29 d0                	sub    eax,edx
c001d9d7:	50                   	push   eax
c001d9d8:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001d9dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9e3:	05 7c 11 00 00       	add    eax,0x117c
c001d9e8:	50                   	push   eax
c001d9e9:	e8 94 3a ff ff       	call   c0011482 <TSS::setESP(unsigned long)>
c001d9ee:	83 c4 1c             	add    esp,0x1c
c001d9f1:	c3                   	ret    

c001d9f2 <Process::addArgs(char**)>:
c001d9f2:	57                   	push   edi
c001d9f3:	56                   	push   esi
c001d9f4:	53                   	push   ebx
c001d9f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9f9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9fd:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da07:	85 ff                	test   edi,edi
c001da09:	74 3d                	je     c001da48 <Process::addArgs(char**)+0x56>
c001da0b:	8b 07                	mov    eax,DWORD PTR [edi]
c001da0d:	85 c0                	test   eax,eax
c001da0f:	74 37                	je     c001da48 <Process::addArgs(char**)+0x56>
c001da11:	31 db                	xor    ebx,ebx
c001da13:	83 ec 0c             	sub    esp,0xc
c001da16:	50                   	push   eax
c001da17:	e8 78 2d fe ff       	call   c0000794 <strlen>
c001da1c:	40                   	inc    eax
c001da1d:	89 04 24             	mov    DWORD PTR [esp],eax
c001da20:	e8 1e 1e ff ff       	call   c000f843 <malloc>
c001da25:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da2c:	5a                   	pop    edx
c001da2d:	59                   	pop    ecx
c001da2e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da31:	43                   	inc    ebx
c001da32:	50                   	push   eax
c001da33:	e8 fc 2d fe ff       	call   c0000834 <strcpy>
c001da38:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da3e:	83 c4 10             	add    esp,0x10
c001da41:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da44:	85 c0                	test   eax,eax
c001da46:	75 cb                	jne    c001da13 <Process::addArgs(char**)+0x21>
c001da48:	5b                   	pop    ebx
c001da49:	5e                   	pop    esi
c001da4a:	5f                   	pop    edi
c001da4b:	c3                   	ret    

c001da4c <Process::Process(char const*, Process*, char**)>:
c001da4c:	56                   	push   esi
c001da4d:	53                   	push   ebx
c001da4e:	83 ec 14             	sub    esp,0x14
c001da51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da55:	05 0c 02 00 00       	add    eax,0x20c
c001da5a:	bb 07 00 00 00       	mov    ebx,0x7
c001da5f:	89 c6                	mov    esi,eax
c001da61:	85 db                	test   ebx,ebx
c001da63:	78 12                	js     c001da77 <Process::Process(char const*, Process*, char**)+0x2b>
c001da65:	83 ec 0c             	sub    esp,0xc
c001da68:	56                   	push   esi
c001da69:	e8 24 b2 00 00       	call   c0028c92 <ThreadControlBlock::ThreadControlBlock()>
c001da6e:	83 c4 10             	add    esp,0x10
c001da71:	83 c6 63             	add    esi,0x63
c001da74:	4b                   	dec    ebx
c001da75:	eb ea                	jmp    c001da61 <Process::Process(char const*, Process*, char**)+0x15>
c001da77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da82:	83 ec 0c             	sub    esp,0xc
c001da85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da89:	e8 ca c9 ff ff       	call   c001a458 <Krnl::newProcessEnv(Process*)>
c001da8e:	83 c4 10             	add    esp,0x10
c001da91:	89 c2                	mov    edx,eax
c001da93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da97:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001daaa:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c001daaf:	8d 50 01             	lea    edx,[eax+0x1]
c001dab2:	89 15 f0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f0,edx
c001dab8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dabc:	89 02                	mov    DWORD PTR [edx],eax
c001dabe:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dac6:	83 ec 0c             	sub    esp,0xc
c001dac9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dacd:	e8 71 1d ff ff       	call   c000f843 <malloc>
c001dad2:	83 c4 10             	add    esp,0x10
c001dad5:	89 c3                	mov    ebx,eax
c001dad7:	83 ec 08             	sub    esp,0x8
c001dada:	6a 00                	push   0x0
c001dadc:	53                   	push   ebx
c001dadd:	e8 f6 4c ff ff       	call   c00127d8 <VAS::VAS(bool)>
c001dae2:	83 c4 10             	add    esp,0x10
c001dae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001daef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dafd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db05:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db15:	85 c0                	test   eax,eax
c001db17:	74 42                	je     c001db5b <Process::Process(char const*, Process*, char**)+0x10f>
c001db19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db23:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db37:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db3d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db47:	05 0c 01 00 00       	add    eax,0x10c
c001db4c:	83 ec 08             	sub    esp,0x8
c001db4f:	52                   	push   edx
c001db50:	50                   	push   eax
c001db51:	e8 de 2c fe ff       	call   c0000834 <strcpy>
c001db56:	83 c4 10             	add    esp,0x10
c001db59:	eb 63                	jmp    c001dbbe <Process::Process(char const*, Process*, char**)+0x172>
c001db5b:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db63:	83 ec 0c             	sub    esp,0xc
c001db66:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db6a:	e8 d4 1c ff ff       	call   c000f843 <malloc>
c001db6f:	83 c4 10             	add    esp,0x10
c001db72:	89 c3                	mov    ebx,eax
c001db74:	83 ec 08             	sub    esp,0x8
c001db77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db7b:	53                   	push   ebx
c001db7c:	e8 ff 35 ff ff       	call   c0011180 <VgaText::VgaText(char const*)>
c001db81:	83 c4 10             	add    esp,0x10
c001db84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db88:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db92:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db98:	83 ec 0c             	sub    esp,0xc
c001db9b:	50                   	push   eax
c001db9c:	e8 d2 29 ff ff       	call   c0010573 <addToTerminalCycle(VgaText*)>
c001dba1:	83 c4 10             	add    esp,0x10
c001dba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba8:	05 0c 01 00 00       	add    eax,0x10c
c001dbad:	83 ec 08             	sub    esp,0x8
c001dbb0:	68 52 c2 02 c0       	push   0xc002c252
c001dbb5:	50                   	push   eax
c001dbb6:	e8 79 2c fe ff       	call   c0000834 <strcpy>
c001dbbb:	83 c4 10             	add    esp,0x10
c001dbbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc2:	83 c0 0c             	add    eax,0xc
c001dbc5:	83 ec 08             	sub    esp,0x8
c001dbc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbcc:	50                   	push   eax
c001dbcd:	e8 62 2c fe ff       	call   c0000834 <strcpy>
c001dbd2:	83 c4 10             	add    esp,0x10
c001dbd5:	83 ec 08             	sub    esp,0x8
c001dbd8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbe0:	e8 0d fe ff ff       	call   c001d9f2 <Process::addArgs(char**)>
c001dbe5:	83 c4 10             	add    esp,0x10
c001dbe8:	83 ec 08             	sub    esp,0x8
c001dbeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbf3:	e8 6d ee ff ff       	call   c001ca65 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbf8:	83 c4 10             	add    esp,0x10
c001dbfb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc03:	83 f0 01             	xor    eax,0x1
c001dc06:	88 c2                	mov    dl,al
c001dc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc0c:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc12:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc17:	83 ec 08             	sub    esp,0x8
c001dc1a:	50                   	push   eax
c001dc1b:	68 50 c3 02 c0       	push   0xc002c350
c001dc20:	e8 35 53 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001dc25:	83 c4 10             	add    esp,0x10
c001dc28:	90                   	nop
c001dc29:	83 c4 14             	add    esp,0x14
c001dc2c:	5b                   	pop    ebx
c001dc2d:	5e                   	pop    esi
c001dc2e:	c3                   	ret    
c001dc2f:	90                   	nop

c001dc30 <Process::Process(bool, char const*, Process*, char**)>:
c001dc30:	56                   	push   esi
c001dc31:	53                   	push   ebx
c001dc32:	83 ec 24             	sub    esp,0x24
c001dc35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc39:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc41:	05 0c 02 00 00       	add    eax,0x20c
c001dc46:	bb 07 00 00 00       	mov    ebx,0x7
c001dc4b:	89 c6                	mov    esi,eax
c001dc4d:	85 db                	test   ebx,ebx
c001dc4f:	78 12                	js     c001dc63 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc51:	83 ec 0c             	sub    esp,0xc
c001dc54:	56                   	push   esi
c001dc55:	e8 38 b0 00 00       	call   c0028c92 <ThreadControlBlock::ThreadControlBlock()>
c001dc5a:	83 c4 10             	add    esp,0x10
c001dc5d:	83 c6 63             	add    esi,0x63
c001dc60:	4b                   	dec    ebx
c001dc61:	eb ea                	jmp    c001dc4d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc67:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc6e:	83 ec 0c             	sub    esp,0xc
c001dc71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc75:	e8 de c7 ff ff       	call   c001a458 <Krnl::newProcessEnv(Process*)>
c001dc7a:	83 c4 10             	add    esp,0x10
c001dc7d:	89 c2                	mov    edx,eax
c001dc7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc83:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc96:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c001dc9b:	8d 50 01             	lea    edx,[eax+0x1]
c001dc9e:	89 15 f0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f0,edx
c001dca4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dca8:	89 02                	mov    DWORD PTR [edx],eax
c001dcaa:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dcb2:	83 ec 0c             	sub    esp,0xc
c001dcb5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcb9:	e8 85 1b ff ff       	call   c000f843 <malloc>
c001dcbe:	83 c4 10             	add    esp,0x10
c001dcc1:	89 c3                	mov    ebx,eax
c001dcc3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcc8:	83 ec 08             	sub    esp,0x8
c001dccb:	50                   	push   eax
c001dccc:	53                   	push   ebx
c001dccd:	e8 06 4b ff ff       	call   c00127d8 <VAS::VAS(bool)>
c001dcd2:	83 c4 10             	add    esp,0x10
c001dcd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dcf5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dcfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcff:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd05:	85 c0                	test   eax,eax
c001dd07:	74 42                	je     c001dd4b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd13:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd27:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd2d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd37:	05 0c 01 00 00       	add    eax,0x10c
c001dd3c:	83 ec 08             	sub    esp,0x8
c001dd3f:	52                   	push   edx
c001dd40:	50                   	push   eax
c001dd41:	e8 ee 2a fe ff       	call   c0000834 <strcpy>
c001dd46:	83 c4 10             	add    esp,0x10
c001dd49:	eb 63                	jmp    c001ddae <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd4b:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd53:	83 ec 0c             	sub    esp,0xc
c001dd56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd5a:	e8 e4 1a ff ff       	call   c000f843 <malloc>
c001dd5f:	83 c4 10             	add    esp,0x10
c001dd62:	89 c3                	mov    ebx,eax
c001dd64:	83 ec 08             	sub    esp,0x8
c001dd67:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd6b:	53                   	push   ebx
c001dd6c:	e8 0f 34 ff ff       	call   c0011180 <VgaText::VgaText(char const*)>
c001dd71:	83 c4 10             	add    esp,0x10
c001dd74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd78:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd82:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd88:	83 ec 0c             	sub    esp,0xc
c001dd8b:	50                   	push   eax
c001dd8c:	e8 e2 27 ff ff       	call   c0010573 <addToTerminalCycle(VgaText*)>
c001dd91:	83 c4 10             	add    esp,0x10
c001dd94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd98:	05 0c 01 00 00       	add    eax,0x10c
c001dd9d:	83 ec 08             	sub    esp,0x8
c001dda0:	68 52 c2 02 c0       	push   0xc002c252
c001dda5:	50                   	push   eax
c001dda6:	e8 89 2a fe ff       	call   c0000834 <strcpy>
c001ddab:	83 c4 10             	add    esp,0x10
c001ddae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb2:	83 c0 0c             	add    eax,0xc
c001ddb5:	83 ec 08             	sub    esp,0x8
c001ddb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddbc:	50                   	push   eax
c001ddbd:	e8 72 2a fe ff       	call   c0000834 <strcpy>
c001ddc2:	83 c4 10             	add    esp,0x10
c001ddc5:	83 ec 08             	sub    esp,0x8
c001ddc8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddd0:	e8 1d fc ff ff       	call   c001d9f2 <Process::addArgs(char**)>
c001ddd5:	83 c4 10             	add    esp,0x10
c001ddd8:	90                   	nop
c001ddd9:	83 c4 24             	add    esp,0x24
c001dddc:	5b                   	pop    ebx
c001dddd:	5e                   	pop    esi
c001ddde:	c3                   	ret    

c001dddf <disableIRQs()>:
c001dddf:	fa                   	cli    
c001dde0:	ff 05 ac 19 03 c0    	inc    DWORD PTR ds:0xc00319ac
c001dde6:	c3                   	ret    

c001dde7 <getIRQNestingLevel()>:
c001dde7:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c001ddec:	c3                   	ret    

c001dded <enableIRQs()>:
c001dded:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c001ddf2:	48                   	dec    eax
c001ddf3:	a3 ac 19 03 c0       	mov    ds:0xc00319ac,eax
c001ddf8:	75 01                	jne    c001ddfb <enableIRQs()+0xe>
c001ddfa:	fb                   	sti    
c001ddfb:	c3                   	ret    

c001ddfc <lockScheduler()>:
c001ddfc:	eb e1                	jmp    c001dddf <disableIRQs()>

c001ddfe <unlockScheduler()>:
c001ddfe:	eb ed                	jmp    c001dded <enableIRQs()>

c001de00 <userModeEntryPoint(void*)>:
c001de00:	83 ec 0c             	sub    esp,0xc
c001de03:	e8 f6 ff ff ff       	call   c001ddfe <unlockScheduler()>
c001de08:	fb                   	sti    
c001de09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de11:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de1b:	83 c4 0c             	add    esp,0xc
c001de1e:	e9 07 25 fe ff       	jmp    c000032a <goToUsermode>

c001de23 <lockStuff()>:
c001de23:	e8 b7 ff ff ff       	call   c001dddf <disableIRQs()>
c001de28:	ff 05 a8 19 03 c0    	inc    DWORD PTR ds:0xc00319a8
c001de2e:	c3                   	ret    

c001de2f <taskStartupFunction>:
c001de2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de34:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de37:	c3                   	ret    

c001de38 <updateTimeUsed()>:
c001de38:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001de3d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de43:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de4a:	74 50                	je     c001de9c <updateTimeUsed()+0x64>
c001de4c:	57                   	push   edi
c001de4d:	56                   	push   esi
c001de4e:	53                   	push   ebx
c001de4f:	0f 31                	rdtsc  
c001de51:	89 c1                	mov    ecx,eax
c001de53:	a3 e8 19 03 c0       	mov    ds:0xc00319e8,eax
c001de58:	2b 0d d8 19 03 c0    	sub    ecx,DWORD PTR ds:0xc00319d8
c001de5e:	89 d3                	mov    ebx,edx
c001de60:	89 0d e0 19 03 c0    	mov    DWORD PTR ds:0xc00319e0,ecx
c001de66:	1b 1d dc 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc00319dc
c001de6c:	a3 d8 19 03 c0       	mov    ds:0xc00319d8,eax
c001de71:	89 1d e4 19 03 c0    	mov    DWORD PTR ds:0xc00319e4,ebx
c001de77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de7c:	89 15 ec 19 03 c0    	mov    DWORD PTR ds:0xc00319ec,edx
c001de82:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de85:	89 15 dc 19 03 c0    	mov    DWORD PTR ds:0xc00319dc,edx
c001de8b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de8e:	01 f1                	add    ecx,esi
c001de90:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de93:	11 fb                	adc    ebx,edi
c001de95:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de98:	5b                   	pop    ebx
c001de99:	5e                   	pop    esi
c001de9a:	5f                   	pop    edi
c001de9b:	c3                   	ret    
c001de9c:	c3                   	ret    

c001de9d <switchToThread(ThreadControlBlock*)>:
c001de9d:	53                   	push   ebx
c001de9e:	83 ec 08             	sub    esp,0x8
c001dea1:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001dea6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001deaa:	85 c0                	test   eax,eax
c001deac:	75 30                	jne    c001dede <switchToThread(ThreadControlBlock*)+0x41>
c001deae:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001deb1:	3c ff                	cmp    al,0xff
c001deb3:	74 25                	je     c001deda <switchToThread(ThreadControlBlock*)+0x3d>
c001deb5:	0f b6 d0             	movzx  edx,al
c001deb8:	b8 84 03 00 00       	mov    eax,0x384
c001debd:	29 d0                	sub    eax,edx
c001debf:	c1 e0 10             	shl    eax,0x10
c001dec2:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dec5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dec8:	e8 6b ff ff ff       	call   c001de38 <updateTimeUsed()>
c001decd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ded1:	83 c4 08             	add    esp,0x8
c001ded4:	5b                   	pop    ebx
c001ded5:	e9 88 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001deda:	31 c0                	xor    eax,eax
c001dedc:	eb e7                	jmp    c001dec5 <switchToThread(ThreadControlBlock*)+0x28>
c001dede:	c7 05 a4 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00319a4,0x1
c001dee8:	83 c4 08             	add    esp,0x8
c001deeb:	5b                   	pop    ebx
c001deec:	c3                   	ret    
c001deed:	90                   	nop

c001deee <Semaphore::Semaphore(int)>:
c001deee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001def2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001def6:	89 10                	mov    DWORD PTR [eax],edx
c001def8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001defc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df12:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df19:	90                   	nop
c001df1a:	c3                   	ret    
c001df1b:	90                   	nop

c001df1c <Mutex::Mutex()>:
c001df1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df20:	6a 01                	push   0x1
c001df22:	50                   	push   eax
c001df23:	e8 c6 ff ff ff       	call   c001deee <Semaphore::Semaphore(int)>
c001df28:	83 c4 08             	add    esp,0x8
c001df2b:	90                   	nop
c001df2c:	c3                   	ret    
c001df2d:	90                   	nop

c001df2e <Process::createThread(void (*)(void*), void*, int)>:
c001df2e:	55                   	push   ebp
c001df2f:	31 c9                	xor    ecx,ecx
c001df31:	57                   	push   edi
c001df32:	56                   	push   esi
c001df33:	53                   	push   ebx
c001df34:	83 ec 1c             	sub    esp,0x1c
c001df37:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df3b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df42:	89 f2                	mov    edx,esi
c001df44:	0f b7 c2             	movzx  eax,dx
c001df47:	83 e2 01             	and    edx,0x1
c001df4a:	74 14                	je     c001df60 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df4c:	d1 f8                	sar    eax,1
c001df4e:	41                   	inc    ecx
c001df4f:	89 c2                	mov    edx,eax
c001df51:	83 f9 10             	cmp    ecx,0x10
c001df54:	75 ee                	jne    c001df44 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df56:	83 c4 1c             	add    esp,0x1c
c001df59:	31 c0                	xor    eax,eax
c001df5b:	5b                   	pop    ebx
c001df5c:	5e                   	pop    esi
c001df5d:	5f                   	pop    edi
c001df5e:	5d                   	pop    ebp
c001df5f:	c3                   	ret    
c001df60:	83 ec 08             	sub    esp,0x8
c001df63:	b8 01 00 00 00       	mov    eax,0x1
c001df68:	d3 e0                	shl    eax,cl
c001df6a:	09 c6                	or     esi,eax
c001df6c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df72:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df79:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df7c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df7f:	01 ce                	add    esi,ecx
c001df81:	89 f0                	mov    eax,esi
c001df83:	c1 e0 05             	shl    eax,0x5
c001df86:	01 c6                	add    esi,eax
c001df88:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df8b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df91:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df97:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df9b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfa1:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dfa7:	89 ca                	mov    edx,ecx
c001dfa9:	f7 da                	neg    edx
c001dfab:	c1 e2 15             	shl    edx,0x15
c001dfae:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dfb4:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dfba:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dfbe:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfc8:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfd2:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dfd8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfe2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dfec:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dff3:	50                   	push   eax
c001dff4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dff8:	68 c8 19 03 c0       	push   0xc00319c8
c001dffd:	e8 1e ab 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e002:	83 c4 10             	add    esp,0x10
c001e005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e009:	83 c4 1c             	add    esp,0x1c
c001e00c:	5b                   	pop    ebx
c001e00d:	5e                   	pop    esi
c001e00e:	5f                   	pop    edi
c001e00f:	5d                   	pop    ebp
c001e010:	c3                   	ret    
c001e011:	90                   	nop

c001e012 <Process::createUserThread()>:
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	68 80 00 00 00       	push   0x80
c001e01a:	6a 00                	push   0x0
c001e01c:	68 00 de 01 c0       	push   0xc001de00
c001e021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e025:	e8 04 ff ff ff       	call   c001df2e <Process::createThread(void (*)(void*), void*, int)>
c001e02a:	83 c4 1c             	add    esp,0x1c
c001e02d:	c3                   	ret    

c001e02e <setupMultitasking(void (*)())>:
c001e02e:	56                   	push   esi
c001e02f:	53                   	push   ebx
c001e030:	53                   	push   ebx
c001e031:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e035:	eb 10                	jmp    c001e047 <setupMultitasking(void (*)())+0x19>
c001e037:	83 ec 0c             	sub    esp,0xc
c001e03a:	68 c8 19 03 c0       	push   0xc00319c8
c001e03f:	e8 2e aa 00 00       	call   c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e044:	83 c4 10             	add    esp,0x10
c001e047:	83 ec 0c             	sub    esp,0xc
c001e04a:	68 c8 19 03 c0       	push   0xc00319c8
c001e04f:	e8 02 aa 00 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e054:	83 c4 10             	add    esp,0x10
c001e057:	84 c0                	test   al,al
c001e059:	74 dc                	je     c001e037 <setupMultitasking(void (*)())+0x9>
c001e05b:	83 ec 0c             	sub    esp,0xc
c001e05e:	68 3f 07 00 00       	push   0x73f
c001e063:	e8 db 17 ff ff       	call   c000f843 <malloc>
c001e068:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e06f:	89 c3                	mov    ebx,eax
c001e071:	6a 00                	push   0x0
c001e073:	68 56 c2 02 c0       	push   0xc002c256
c001e078:	6a 01                	push   0x1
c001e07a:	50                   	push   eax
c001e07b:	e8 b0 fb ff ff       	call   c001dc30 <Process::Process(bool, char const*, Process*, char**)>
c001e080:	83 c4 18             	add    esp,0x18
c001e083:	89 1d d4 19 03 c0    	mov    DWORD PTR ds:0xc00319d4,ebx
c001e089:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e08f:	68 78 c3 02 c0       	push   0xc002c378
c001e094:	e8 c1 4e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e099:	58                   	pop    eax
c001e09a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0a0:	e8 50 2c ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c001e0a5:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0ad:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0b6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0c0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0c6:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0cc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0d6:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0e0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e0ea:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0f0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e0f6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e100:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e106:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e110:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e116:	5a                   	pop    edx
c001e117:	59                   	pop    ecx
c001e118:	68 52 c2 02 c0       	push   0xc002c252
c001e11d:	50                   	push   eax
c001e11e:	e8 11 27 fe ff       	call   c0000834 <strcpy>
c001e123:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e12a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e12e:	83 c4 14             	add    esp,0x14
c001e131:	5b                   	pop    ebx
c001e132:	5e                   	pop    esi
c001e133:	e9 1c 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e138 <schedule()>:
c001e138:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001e13d:	85 c0                	test   eax,eax
c001e13f:	74 0b                	je     c001e14c <schedule()+0x14>
c001e141:	c7 05 a4 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00319a4,0x1
c001e14b:	c3                   	ret    
c001e14c:	53                   	push   ebx
c001e14d:	83 ec 14             	sub    esp,0x14
c001e150:	68 c8 19 03 c0       	push   0xc00319c8
c001e155:	e8 fc a8 00 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e15a:	83 c4 10             	add    esp,0x10
c001e15d:	84 c0                	test   al,al
c001e15f:	75 38                	jne    c001e199 <schedule()+0x61>
c001e161:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e166:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e169:	4a                   	dec    edx
c001e16a:	74 32                	je     c001e19e <schedule()+0x66>
c001e16c:	83 ec 0c             	sub    esp,0xc
c001e16f:	68 c8 19 03 c0       	push   0xc00319c8
c001e174:	e8 d5 a8 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e179:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e180:	89 c3                	mov    ebx,eax
c001e182:	e8 eb a8 00 00       	call   c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e187:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e18e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e191:	e8 07 fd ff ff       	call   c001de9d <switchToThread(ThreadControlBlock*)>
c001e196:	83 c4 10             	add    esp,0x10
c001e199:	83 c4 08             	add    esp,0x8
c001e19c:	5b                   	pop    ebx
c001e19d:	c3                   	ret    
c001e19e:	83 ec 08             	sub    esp,0x8
c001e1a1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1a8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1ae:	68 c8 19 03 c0       	push   0xc00319c8
c001e1b3:	e8 68 a9 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1b8:	83 c4 10             	add    esp,0x10
c001e1bb:	eb af                	jmp    c001e16c <schedule()+0x34>

c001e1bd <unlockStuff()>:
c001e1bd:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001e1c2:	48                   	dec    eax
c001e1c3:	a3 a8 19 03 c0       	mov    ds:0xc00319a8,eax
c001e1c8:	75 09                	jne    c001e1d3 <unlockStuff()+0x16>
c001e1ca:	a1 a4 19 03 c0       	mov    eax,ds:0xc00319a4
c001e1cf:	85 c0                	test   eax,eax
c001e1d1:	75 05                	jne    c001e1d8 <unlockStuff()+0x1b>
c001e1d3:	e9 15 fc ff ff       	jmp    c001dded <enableIRQs()>
c001e1d8:	83 ec 0c             	sub    esp,0xc
c001e1db:	c7 05 a4 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319a4,0x0
c001e1e5:	e8 4e ff ff ff       	call   c001e138 <schedule()>
c001e1ea:	83 c4 0c             	add    esp,0xc
c001e1ed:	e9 fb fb ff ff       	jmp    c001dded <enableIRQs()>

c001e1f2 <Semaphore::tryAcquire()>:
c001e1f2:	83 ec 0c             	sub    esp,0xc
c001e1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f9:	e8 25 fc ff ff       	call   c001de23 <lockStuff()>
c001e1fe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e201:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e203:	7c 0b                	jl     c001e210 <Semaphore::tryAcquire()+0x1e>
c001e205:	e8 b3 ff ff ff       	call   c001e1bd <unlockStuff()>
c001e20a:	31 c0                	xor    eax,eax
c001e20c:	83 c4 0c             	add    esp,0xc
c001e20f:	c3                   	ret    
c001e210:	42                   	inc    edx
c001e211:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e214:	e8 a4 ff ff ff       	call   c001e1bd <unlockStuff()>
c001e219:	b0 01                	mov    al,0x1
c001e21b:	83 c4 0c             	add    esp,0xc
c001e21e:	c3                   	ret    
c001e21f:	90                   	nop

c001e220 <Semaphore::assertLocked(char const*)>:
c001e220:	83 ec 0c             	sub    esp,0xc
c001e223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e227:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e22b:	e8 f3 fb ff ff       	call   c001de23 <lockStuff()>
c001e230:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e232:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e235:	7c 05                	jl     c001e23c <Semaphore::assertLocked(char const*)+0x1c>
c001e237:	83 c4 0c             	add    esp,0xc
c001e23a:	eb 81                	jmp    c001e1bd <unlockStuff()>
c001e23c:	83 ec 0c             	sub    esp,0xc
c001e23f:	52                   	push   edx
c001e240:	e8 c2 c3 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001e245:	83 c4 10             	add    esp,0x10
c001e248:	83 c4 0c             	add    esp,0xc
c001e24b:	e9 6d ff ff ff       	jmp    c001e1bd <unlockStuff()>

c001e250 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e250:	83 ec 0c             	sub    esp,0xc
c001e253:	e8 8f fb ff ff       	call   c001dde7 <getIRQNestingLevel()>
c001e258:	83 ec 08             	sub    esp,0x8
c001e25b:	50                   	push   eax
c001e25c:	68 ac c3 02 c0       	push   0xc002c3ac
c001e261:	e8 f4 4c ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e266:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e26a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e26f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e272:	e8 c1 fe ff ff       	call   c001e138 <schedule()>
c001e277:	e8 82 fb ff ff       	call   c001ddfe <unlockScheduler()>
c001e27c:	e8 66 fb ff ff       	call   c001dde7 <getIRQNestingLevel()>
c001e281:	5a                   	pop    edx
c001e282:	59                   	pop    ecx
c001e283:	50                   	push   eax
c001e284:	68 e0 c3 02 c0       	push   0xc002c3e0
c001e289:	e8 cc 4c ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e28e:	83 c4 1c             	add    esp,0x1c
c001e291:	c3                   	ret    

c001e292 <blockTask(TaskState)>:
c001e292:	83 ec 0c             	sub    esp,0xc
c001e295:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e299:	e8 5e fb ff ff       	call   c001ddfc <lockScheduler()>
c001e29e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2a6:	e8 8d fe ff ff       	call   c001e138 <schedule()>
c001e2ab:	83 c4 0c             	add    esp,0xc
c001e2ae:	e9 4b fb ff ff       	jmp    c001ddfe <unlockScheduler()>

c001e2b3 <waitTask(int, int*, int)>:
c001e2b3:	83 ec 18             	sub    esp,0x18
c001e2b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2bf:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2cb:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2ce:	6a 07                	push   0x7
c001e2d0:	e8 bd ff ff ff       	call   c001e292 <blockTask(TaskState)>
c001e2d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2da:	83 c4 10             	add    esp,0x10
c001e2dd:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2e0:	85 d2                	test   edx,edx
c001e2e2:	74 0a                	je     c001e2ee <waitTask(int, int*, int)+0x3b>
c001e2e4:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2e7:	89 02                	mov    DWORD PTR [edx],eax
c001e2e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ee:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2f1:	83 c4 0c             	add    esp,0xc
c001e2f4:	c3                   	ret    

c001e2f5 <nanoSleepUntil(unsigned long long)>:
c001e2f5:	83 ec 0c             	sub    esp,0xc
c001e2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e300:	3b 05 f0 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002eaf0
c001e306:	89 d1                	mov    ecx,edx
c001e308:	1b 0d f4 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002eaf4
c001e30e:	73 04                	jae    c001e314 <nanoSleepUntil(unsigned long long)+0x1f>
c001e310:	83 c4 0c             	add    esp,0xc
c001e313:	c3                   	ret    
c001e314:	e8 0a fb ff ff       	call   c001de23 <lockStuff()>
c001e319:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e31f:	83 ec 08             	sub    esp,0x8
c001e322:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e325:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e328:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e32e:	68 bc 19 03 c0       	push   0xc00319bc
c001e333:	e8 e8 a7 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e338:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e33f:	e8 4e ff ff ff       	call   c001e292 <blockTask(TaskState)>
c001e344:	83 c4 1c             	add    esp,0x1c
c001e347:	e9 71 fe ff ff       	jmp    c001e1bd <unlockStuff()>

c001e34c <nanoSleep(unsigned long long)>:
c001e34c:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c001e351:	8b 15 f4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eaf4
c001e357:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e35b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e35f:	eb 94                	jmp    c001e2f5 <nanoSleepUntil(unsigned long long)>

c001e361 <sleep(unsigned long long)>:
c001e361:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e369:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e36e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e372:	01 ca                	add    edx,ecx
c001e374:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e378:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e37c:	eb ce                	jmp    c001e34c <nanoSleep(unsigned long long)>

c001e37e <Semaphore::acquire()>:
c001e37e:	83 ec 0c             	sub    esp,0xc
c001e381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e385:	e8 99 fa ff ff       	call   c001de23 <lockStuff()>
c001e38a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e38d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e38f:	7d 0c                	jge    c001e39d <Semaphore::acquire()+0x1f>
c001e391:	42                   	inc    edx
c001e392:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e395:	83 c4 0c             	add    esp,0xc
c001e398:	e9 20 fe ff ff       	jmp    c001e1bd <unlockStuff()>
c001e39d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3a3:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e3aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3ad:	85 d2                	test   edx,edx
c001e3af:	74 2a                	je     c001e3db <Semaphore::acquire()+0x5d>
c001e3b1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e3b4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3ba:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e3bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3c3:	83 ec 0c             	sub    esp,0xc
c001e3c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3c9:	6a 05                	push   0x5
c001e3cb:	e8 c2 fe ff ff       	call   c001e292 <blockTask(TaskState)>
c001e3d0:	83 c4 10             	add    esp,0x10
c001e3d3:	83 c4 0c             	add    esp,0xc
c001e3d6:	e9 e2 fd ff ff       	jmp    c001e1bd <unlockStuff()>
c001e3db:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3e4:	eb d7                	jmp    c001e3bd <Semaphore::acquire()+0x3f>

c001e3e6 <taskReturned>:
c001e3e6:	83 ec 18             	sub    esp,0x18
c001e3e9:	68 14 c4 02 c0       	push   0xc002c414
c001e3ee:	e8 14 c2 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001e3f3:	83 c4 10             	add    esp,0x10
c001e3f6:	83 ec 0c             	sub    esp,0xc
c001e3f9:	6a 02                	push   0x2
c001e3fb:	e8 92 fe ff ff       	call   c001e292 <blockTask(TaskState)>
c001e400:	e8 f7 f9 ff ff       	call   c001ddfc <lockScheduler()>
c001e405:	e8 2e fd ff ff       	call   c001e138 <schedule()>
c001e40a:	e8 ef f9 ff ff       	call   c001ddfe <unlockScheduler()>
c001e40f:	83 c4 10             	add    esp,0x10
c001e412:	eb e2                	jmp    c001e3f6 <taskReturned+0x10>

c001e414 <unblockTask(ThreadControlBlock*)>:
c001e414:	53                   	push   ebx
c001e415:	83 ec 08             	sub    esp,0x8
c001e418:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e41c:	e8 db f9 ff ff       	call   c001ddfc <lockScheduler()>
c001e421:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e424:	85 c0                	test   eax,eax
c001e426:	74 5c                	je     c001e484 <unblockTask(ThreadControlBlock*)+0x70>
c001e428:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e42b:	48                   	dec    eax
c001e42c:	74 31                	je     c001e45f <unblockTask(ThreadControlBlock*)+0x4b>
c001e42e:	83 ec 0c             	sub    esp,0xc
c001e431:	68 c8 19 03 c0       	push   0xc00319c8
c001e436:	e8 13 a6 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e43b:	83 c4 10             	add    esp,0x10
c001e43e:	85 c0                	test   eax,eax
c001e440:	75 17                	jne    c001e459 <unblockTask(ThreadControlBlock*)+0x45>
c001e442:	eb 65                	jmp    c001e4a9 <unblockTask(ThreadControlBlock*)+0x95>
c001e444:	83 ec 08             	sub    esp,0x8
c001e447:	50                   	push   eax
c001e448:	68 c8 19 03 c0       	push   0xc00319c8
c001e44d:	e8 d6 a8 00 00       	call   c0028d28 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e452:	83 c4 10             	add    esp,0x10
c001e455:	85 c0                	test   eax,eax
c001e457:	74 50                	je     c001e4a9 <unblockTask(ThreadControlBlock*)+0x95>
c001e459:	39 c3                	cmp    ebx,eax
c001e45b:	75 e7                	jne    c001e444 <unblockTask(ThreadControlBlock*)+0x30>
c001e45d:	eb 1c                	jmp    c001e47b <unblockTask(ThreadControlBlock*)+0x67>
c001e45f:	83 ec 0c             	sub    esp,0xc
c001e462:	68 04 c5 02 c0       	push   0xc002c504
c001e467:	e8 ee 4a ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e46c:	c7 04 24 90 c4 02 c0 	mov    DWORD PTR [esp],0xc002c490
c001e473:	e8 e2 4a ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e478:	83 c4 10             	add    esp,0x10
c001e47b:	83 c4 08             	add    esp,0x8
c001e47e:	5b                   	pop    ebx
c001e47f:	e9 7a f9 ff ff       	jmp    c001ddfe <unlockScheduler()>
c001e484:	83 ec 0c             	sub    esp,0xc
c001e487:	68 48 c4 02 c0       	push   0xc002c448
c001e48c:	e8 c9 4a ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e491:	c7 04 24 90 c4 02 c0 	mov    DWORD PTR [esp],0xc002c490
c001e498:	e8 bd 4a ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e49d:	83 c4 10             	add    esp,0x10
c001e4a0:	83 c4 08             	add    esp,0x8
c001e4a3:	5b                   	pop    ebx
c001e4a4:	e9 55 f9 ff ff       	jmp    c001ddfe <unlockScheduler()>
c001e4a9:	83 ec 08             	sub    esp,0x8
c001e4ac:	53                   	push   ebx
c001e4ad:	68 c8 19 03 c0       	push   0xc00319c8
c001e4b2:	e8 69 a6 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4b7:	83 c4 10             	add    esp,0x10
c001e4ba:	83 c4 08             	add    esp,0x8
c001e4bd:	5b                   	pop    ebx
c001e4be:	e9 3b f9 ff ff       	jmp    c001ddfe <unlockScheduler()>

c001e4c3 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4c3:	55                   	push   ebp
c001e4c4:	57                   	push   edi
c001e4c5:	56                   	push   esi
c001e4c6:	53                   	push   ebx
c001e4c7:	83 ec 1c             	sub    esp,0x1c
c001e4ca:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4ce:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4d1:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4d7:	85 ff                	test   edi,edi
c001e4d9:	7e 20                	jle    c001e4fb <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4db:	31 f6                	xor    esi,esi
c001e4dd:	83 ec 0c             	sub    esp,0xc
c001e4e0:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4e7:	46                   	inc    esi
c001e4e8:	e8 66 13 ff ff       	call   c000f853 <free>
c001e4ed:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4f0:	83 c4 10             	add    esp,0x10
c001e4f3:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e4f9:	7f e2                	jg     c001e4dd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e4fb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e505:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e50a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e50d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e510:	d3 c0                	rol    eax,cl
c001e512:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e519:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e51c:	89 f7                	mov    edi,esi
c001e51e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e526:	0f 85 74 01 00 00    	jne    c001e6a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e52c:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e532:	85 ed                	test   ebp,ebp
c001e534:	74 1b                	je     c001e551 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e536:	83 ec 0c             	sub    esp,0xc
c001e539:	55                   	push   ebp
c001e53a:	e8 35 be ff ff       	call   c001a374 <EnvVarContainer::~EnvVarContainer()>
c001e53f:	59                   	pop    ecx
c001e540:	5e                   	pop    esi
c001e541:	6a 0c                	push   0xc
c001e543:	55                   	push   ebp
c001e544:	e8 31 49 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c001e549:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e54c:	83 c4 10             	add    esp,0x10
c001e54f:	89 f7                	mov    edi,esi
c001e551:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e557:	85 c0                	test   eax,eax
c001e559:	0f 84 aa 00 00 00    	je     c001e609 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e55f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e562:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e566:	31 c9                	xor    ecx,ecx
c001e568:	eb 10                	jmp    c001e57a <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e56a:	41                   	inc    ecx
c001e56b:	83 f9 10             	cmp    ecx,0x10
c001e56e:	0f 84 95 00 00 00    	je     c001e609 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e574:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e57a:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e581:	d3 fa                	sar    edx,cl
c001e583:	83 e2 01             	and    edx,0x1
c001e586:	74 e2                	je     c001e56a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e588:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e58b:	01 ca                	add    edx,ecx
c001e58d:	89 d5                	mov    ebp,edx
c001e58f:	c1 e5 05             	shl    ebp,0x5
c001e592:	01 ea                	add    edx,ebp
c001e594:	01 d0                	add    eax,edx
c001e596:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e59c:	83 fd 07             	cmp    ebp,0x7
c001e59f:	75 c9                	jne    c001e56a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5a1:	05 40 02 00 00       	add    eax,0x240
c001e5a6:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e5a9:	83 fd ff             	cmp    ebp,0xffffffff
c001e5ac:	0f 8c 08 01 00 00    	jl     c001e6ba <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e5b2:	0f 84 b9 01 00 00    	je     c001e771 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e5b8:	85 ed                	test   ebp,ebp
c001e5ba:	0f 84 a0 01 00 00    	je     c001e760 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e5c0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5c2:	75 a6                	jne    c001e56a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5c4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5ce:	01 d0                	add    eax,edx
c001e5d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5d4:	83 ec 0c             	sub    esp,0xc
c001e5d7:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5dd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5e0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5e6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5ed:	50                   	push   eax
c001e5ee:	e8 21 fe ff ff       	call   c001e414 <unblockTask(ThreadControlBlock*)>
c001e5f3:	83 c4 10             	add    esp,0x10
c001e5f6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5fd:	89 f7                	mov    edi,esi
c001e5ff:	41                   	inc    ecx
c001e600:	83 f9 10             	cmp    ecx,0x10
c001e603:	0f 85 6b ff ff ff    	jne    c001e574 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e609:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e60f:	85 c0                	test   eax,eax
c001e611:	74 5d                	je     c001e670 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e613:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e619:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e61f:	74 4f                	je     c001e670 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e621:	83 ec 0c             	sub    esp,0xc
c001e624:	68 c8 19 03 c0       	push   0xc00319c8
c001e629:	e8 20 a4 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e62e:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e635:	89 c7                	mov    edi,eax
c001e637:	e8 1a a4 00 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e63c:	83 c4 10             	add    esp,0x10
c001e63f:	84 c0                	test   al,al
c001e641:	0f 84 e4 00 00 00    	je     c001e72b <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e647:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e64a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e650:	85 d2                	test   edx,edx
c001e652:	74 0f                	je     c001e663 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e654:	83 ec 0c             	sub    esp,0xc
c001e657:	8b 02                	mov    eax,DWORD PTR [edx]
c001e659:	52                   	push   edx
c001e65a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e65d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e66d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e670:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e676:	85 db                	test   ebx,ebx
c001e678:	74 16                	je     c001e690 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e67a:	83 ec 0c             	sub    esp,0xc
c001e67d:	53                   	push   ebx
c001e67e:	e8 41 3b ff ff       	call   c00121c4 <VAS::~VAS()>
c001e683:	58                   	pop    eax
c001e684:	5a                   	pop    edx
c001e685:	6a 14                	push   0x14
c001e687:	53                   	push   ebx
c001e688:	e8 ed 47 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c001e68d:	83 c4 10             	add    esp,0x10
c001e690:	83 ec 0c             	sub    esp,0xc
c001e693:	68 5d c2 02 c0       	push   0xc002c25d
c001e698:	e8 bd 48 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e69d:	83 c4 10             	add    esp,0x10
c001e6a0:	83 ec 08             	sub    esp,0x8
c001e6a3:	68 3f 07 00 00       	push   0x73f
c001e6a8:	68 6b c2 02 c0       	push   0xc002c26b
c001e6ad:	e8 a8 48 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e6b2:	83 c4 2c             	add    esp,0x2c
c001e6b5:	5b                   	pop    ebx
c001e6b6:	5e                   	pop    esi
c001e6b7:	5f                   	pop    edi
c001e6b8:	5d                   	pop    ebp
c001e6b9:	c3                   	ret    
c001e6ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6be:	83 ec 0c             	sub    esp,0xc
c001e6c1:	68 48 c5 02 c0       	push   0xc002c548
c001e6c6:	e8 3c bf ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001e6cb:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6ce:	83 c4 10             	add    esp,0x10
c001e6d1:	89 f7                	mov    edi,esi
c001e6d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6d7:	e9 8e fe ff ff       	jmp    c001e56a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6dc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6e2:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e6e8:	75 1c                	jne    c001e706 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6ea:	83 ec 0c             	sub    esp,0xc
c001e6ed:	68 b0 c5 02 c0       	push   0xc002c5b0
c001e6f2:	e8 63 48 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e6f7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6fe:	e8 8f fb ff ff       	call   c001e292 <blockTask(TaskState)>
c001e703:	83 c4 10             	add    esp,0x10
c001e706:	83 ec 08             	sub    esp,0x8
c001e709:	56                   	push   esi
c001e70a:	68 c8 19 03 c0       	push   0xc00319c8
c001e70f:	e8 0c a4 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e714:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e71b:	e8 2e a3 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e720:	83 c4 10             	add    esp,0x10
c001e723:	39 f8                	cmp    eax,edi
c001e725:	0f 84 1c ff ff ff    	je     c001e647 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e72b:	83 ec 0c             	sub    esp,0xc
c001e72e:	68 c8 19 03 c0       	push   0xc00319c8
c001e733:	e8 16 a3 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e738:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e73f:	89 c6                	mov    esi,eax
c001e741:	e8 2c a3 00 00       	call   c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e746:	83 c4 10             	add    esp,0x10
c001e749:	39 f3                	cmp    ebx,esi
c001e74b:	74 b9                	je     c001e706 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e74d:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e750:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e753:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e759:	75 ab                	jne    c001e706 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e75b:	e9 7c ff ff ff       	jmp    c001e6dc <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e760:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e764:	83 ec 0c             	sub    esp,0xc
c001e767:	68 7c c5 02 c0       	push   0xc002c57c
c001e76c:	e9 55 ff ff ff       	jmp    c001e6c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e771:	8b 36                	mov    esi,DWORD PTR [esi]
c001e773:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e777:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e77a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e77d:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e783:	01 d7                	add    edi,edx
c001e785:	89 f8                	mov    eax,edi
c001e787:	e9 44 fe ff ff       	jmp    c001e5d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e78c <cleanerTaskFunction(void*)>:
c001e78c:	53                   	push   ebx
c001e78d:	83 ec 08             	sub    esp,0x8
c001e790:	e8 69 f6 ff ff       	call   c001ddfe <unlockScheduler()>
c001e795:	e8 62 f6 ff ff       	call   c001ddfc <lockScheduler()>
c001e79a:	80 3d 8c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003198c,0x0
c001e7a1:	0f 85 8e 00 00 00    	jne    c001e835 <cleanerTaskFunction(void*)+0xa9>
c001e7a7:	83 ec 0c             	sub    esp,0xc
c001e7aa:	6a 02                	push   0x2
c001e7ac:	e8 9f fa ff ff       	call   c001e250 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7b1:	83 c4 10             	add    esp,0x10
c001e7b4:	c6 05 8c 19 03 c0 00 	mov    BYTE PTR ds:0xc003198c,0x0
c001e7bb:	e8 63 f6 ff ff       	call   c001de23 <lockStuff()>
c001e7c0:	e8 37 f6 ff ff       	call   c001ddfc <lockScheduler()>
c001e7c5:	83 ec 0c             	sub    esp,0xc
c001e7c8:	68 b0 19 03 c0       	push   0xc00319b0
c001e7cd:	e8 84 a2 00 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7d2:	83 c4 10             	add    esp,0x10
c001e7d5:	84 c0                	test   al,al
c001e7d7:	75 40                	jne    c001e819 <cleanerTaskFunction(void*)+0x8d>
c001e7d9:	83 ec 0c             	sub    esp,0xc
c001e7dc:	68 b0 19 03 c0       	push   0xc00319b0
c001e7e1:	e8 68 a2 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7e6:	c7 04 24 b0 19 03 c0 	mov    DWORD PTR [esp],0xc00319b0
c001e7ed:	89 c3                	mov    ebx,eax
c001e7ef:	e8 7e a2 00 00       	call   c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7f4:	c7 04 24 81 c2 02 c0 	mov    DWORD PTR [esp],0xc002c281
c001e7fb:	e8 5a 47 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e800:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e803:	e8 bb fc ff ff       	call   c001e4c3 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e808:	c7 04 24 9a c2 02 c0 	mov    DWORD PTR [esp],0xc002c29a
c001e80f:	e8 46 47 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e814:	83 c4 10             	add    esp,0x10
c001e817:	eb ac                	jmp    c001e7c5 <cleanerTaskFunction(void*)+0x39>
c001e819:	e8 e0 f5 ff ff       	call   c001ddfe <unlockScheduler()>
c001e81e:	e8 9a f9 ff ff       	call   c001e1bd <unlockStuff()>
c001e823:	e8 d4 f5 ff ff       	call   c001ddfc <lockScheduler()>
c001e828:	80 3d 8c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003198c,0x0
c001e82f:	0f 84 72 ff ff ff    	je     c001e7a7 <cleanerTaskFunction(void*)+0x1b>
c001e835:	e8 c4 f5 ff ff       	call   c001ddfe <unlockScheduler()>
c001e83a:	e9 75 ff ff ff       	jmp    c001e7b4 <cleanerTaskFunction(void*)+0x28>

c001e83f <terminateTask(int)>:
c001e83f:	83 ec 14             	sub    esp,0x14
c001e842:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e847:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e84a:	83 c0 0c             	add    eax,0xc
c001e84d:	50                   	push   eax
c001e84e:	68 d8 c5 02 c0       	push   0xc002c5d8
c001e853:	e8 02 47 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e858:	e8 c6 f5 ff ff       	call   c001de23 <lockStuff()>
c001e85d:	e8 9a f5 ff ff       	call   c001ddfc <lockScheduler()>
c001e862:	c7 04 24 ad c2 02 c0 	mov    DWORD PTR [esp],0xc002c2ad
c001e869:	e8 ec 46 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e86e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e872:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e877:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e87a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e87f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e882:	5a                   	pop    edx
c001e883:	59                   	pop    ecx
c001e884:	50                   	push   eax
c001e885:	68 b0 19 03 c0       	push   0xc00319b0
c001e88a:	e8 91 a2 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e88f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e894:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e89b:	c7 04 24 c7 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2c7
c001e8a2:	e8 b3 46 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e8a7:	83 c4 10             	add    esp,0x10
c001e8aa:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c001e8af:	85 c0                	test   eax,eax
c001e8b1:	74 5a                	je     c001e90d <terminateTask(int)+0xce>
c001e8b3:	83 ec 0c             	sub    esp,0xc
c001e8b6:	68 e1 c2 02 c0       	push   0xc002c2e1
c001e8bb:	e8 9a 46 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e8c0:	58                   	pop    eax
c001e8c1:	c6 05 8c 19 03 c0 01 	mov    BYTE PTR ds:0xc003198c,0x1
c001e8c8:	ff 35 88 19 03 c0    	push   DWORD PTR ds:0xc0031988
c001e8ce:	e8 41 fb ff ff       	call   c001e414 <unblockTask(ThreadControlBlock*)>
c001e8d3:	c7 04 24 fb c2 02 c0 	mov    DWORD PTR [esp],0xc002c2fb
c001e8da:	e8 7b 46 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e8df:	83 c4 10             	add    esp,0x10
c001e8e2:	e8 17 f5 ff ff       	call   c001ddfe <unlockScheduler()>
c001e8e7:	e8 d1 f8 ff ff       	call   c001e1bd <unlockStuff()>
c001e8ec:	83 ec 0c             	sub    esp,0xc
c001e8ef:	68 33 c3 02 c0       	push   0xc002c333
c001e8f4:	e8 61 46 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e8f9:	83 c4 10             	add    esp,0x10
c001e8fc:	e8 fb f4 ff ff       	call   c001ddfc <lockScheduler()>
c001e901:	e8 32 f8 ff ff       	call   c001e138 <schedule()>
c001e906:	e8 f3 f4 ff ff       	call   c001ddfe <unlockScheduler()>
c001e90b:	eb ef                	jmp    c001e8fc <terminateTask(int)+0xbd>
c001e90d:	83 ec 0c             	sub    esp,0xc
c001e910:	68 15 c3 02 c0       	push   0xc002c315
c001e915:	e8 40 46 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001e91a:	83 c4 10             	add    esp,0x10
c001e91d:	eb c3                	jmp    c001e8e2 <terminateTask(int)+0xa3>

c001e91f <Thr::terminateFromIRQ(int)>:
c001e91f:	83 ec 18             	sub    esp,0x18
c001e922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e926:	e8 14 ff ff ff       	call   c001e83f <terminateTask(int)>
c001e92b:	90                   	nop

c001e92c <Semaphore::release()>:
c001e92c:	83 ec 0c             	sub    esp,0xc
c001e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e933:	e8 eb f4 ff ff       	call   c001de23 <lockStuff()>
c001e938:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e93b:	85 d2                	test   edx,edx
c001e93d:	74 1a                	je     c001e959 <Semaphore::release()+0x2d>
c001e93f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e942:	83 ec 0c             	sub    esp,0xc
c001e945:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e948:	52                   	push   edx
c001e949:	e8 c6 fa ff ff       	call   c001e414 <unblockTask(ThreadControlBlock*)>
c001e94e:	83 c4 10             	add    esp,0x10
c001e951:	83 c4 0c             	add    esp,0xc
c001e954:	e9 64 f8 ff ff       	jmp    c001e1bd <unlockStuff()>
c001e959:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e95c:	83 c4 0c             	add    esp,0xc
c001e95f:	e9 59 f8 ff ff       	jmp    c001e1bd <unlockStuff()>

c001e964 <__static_initialization_and_destruction_0(int, int)>:
c001e964:	83 ec 0c             	sub    esp,0xc
c001e967:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e96c:	0f 85 88 00 00 00    	jne    c001e9fa <__static_initialization_and_destruction_0(int, int)+0x96>
c001e972:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e97a:	75 7e                	jne    c001e9fa <__static_initialization_and_destruction_0(int, int)+0x96>
c001e97c:	83 ec 0c             	sub    esp,0xc
c001e97f:	68 c8 19 03 c0       	push   0xc00319c8
c001e984:	e8 47 a3 00 00       	call   c0028cd0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e989:	83 c4 10             	add    esp,0x10
c001e98c:	83 ec 04             	sub    esp,0x4
c001e98f:	68 90 d3 02 c0       	push   0xc002d390
c001e994:	68 c8 19 03 c0       	push   0xc00319c8
c001e999:	68 90 8c 02 c0       	push   0xc0028c90
c001e99e:	e8 51 44 ff ff       	call   c0012df4 <__cxa_atexit>
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	83 ec 0c             	sub    esp,0xc
c001e9a9:	68 bc 19 03 c0       	push   0xc00319bc
c001e9ae:	e8 1d a3 00 00       	call   c0028cd0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9b3:	83 c4 10             	add    esp,0x10
c001e9b6:	83 ec 04             	sub    esp,0x4
c001e9b9:	68 90 d3 02 c0       	push   0xc002d390
c001e9be:	68 bc 19 03 c0       	push   0xc00319bc
c001e9c3:	68 90 8c 02 c0       	push   0xc0028c90
c001e9c8:	e8 27 44 ff ff       	call   c0012df4 <__cxa_atexit>
c001e9cd:	83 c4 10             	add    esp,0x10
c001e9d0:	83 ec 0c             	sub    esp,0xc
c001e9d3:	68 b0 19 03 c0       	push   0xc00319b0
c001e9d8:	e8 f3 a2 00 00       	call   c0028cd0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9dd:	83 c4 10             	add    esp,0x10
c001e9e0:	83 ec 04             	sub    esp,0x4
c001e9e3:	68 90 d3 02 c0       	push   0xc002d390
c001e9e8:	68 b0 19 03 c0       	push   0xc00319b0
c001e9ed:	68 90 8c 02 c0       	push   0xc0028c90
c001e9f2:	e8 fd 43 ff ff       	call   c0012df4 <__cxa_atexit>
c001e9f7:	83 c4 10             	add    esp,0x10
c001e9fa:	90                   	nop
c001e9fb:	83 c4 0c             	add    esp,0xc
c001e9fe:	c3                   	ret    

c001e9ff <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9ff:	83 ec 0c             	sub    esp,0xc
c001ea02:	83 ec 08             	sub    esp,0x8
c001ea05:	68 ff ff 00 00       	push   0xffff
c001ea0a:	6a 01                	push   0x1
c001ea0c:	e8 53 ff ff ff       	call   c001e964 <__static_initialization_and_destruction_0(int, int)>
c001ea11:	83 c4 10             	add    esp,0x10
c001ea14:	83 c4 0c             	add    esp,0xc
c001ea17:	c3                   	ret    

c001ea18 <Vm::inbv(unsigned short)>:
c001ea18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea1c:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea21:	75 06                	jne    c001ea29 <Vm::inbv(unsigned short)+0x11>
c001ea23:	a0 0c 1a 03 c0       	mov    al,ds:0xc0031a0c
c001ea28:	c3                   	ret    
c001ea29:	ec                   	in     al,dx
c001ea2a:	c3                   	ret    

c001ea2b <Vm::outbv(unsigned short, unsigned char)>:
c001ea2b:	53                   	push   ebx
c001ea2c:	83 ec 08             	sub    esp,0x8
c001ea2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea33:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea37:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea3c:	75 38                	jne    c001ea76 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea3e:	0f b6 c3             	movzx  eax,bl
c001ea41:	51                   	push   ecx
c001ea42:	51                   	push   ecx
c001ea43:	50                   	push   eax
c001ea44:	68 f7 c5 02 c0       	push   0xc002c5f7
c001ea49:	e8 0c 45 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001ea4e:	8b 15 0c 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a0c
c001ea54:	83 c4 10             	add    esp,0x10
c001ea57:	8d 42 01             	lea    eax,[edx+0x1]
c001ea5a:	88 9a 20 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce5e0],bl
c001ea60:	a3 0c 1a 03 c0       	mov    ds:0xc0031a0c,eax
c001ea65:	83 f8 20             	cmp    eax,0x20
c001ea68:	75 0f                	jne    c001ea79 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea6a:	c7 05 0c 1a 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031a0c,0x1f
c001ea74:	eb 03                	jmp    c001ea79 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea76:	88 d8                	mov    al,bl
c001ea78:	ee                   	out    dx,al
c001ea79:	83 c4 08             	add    esp,0x8
c001ea7c:	5b                   	pop    ebx
c001ea7d:	c3                   	ret    

c001ea7e <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea7e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea83:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea88:	c1 e0 04             	shl    eax,0x4
c001ea8b:	01 d0                	add    eax,edx
c001ea8d:	c3                   	ret    

c001ea8e <Vm::getSegment(unsigned int)>:
c001ea8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea92:	c1 e8 10             	shr    eax,0x10
c001ea95:	c3                   	ret    

c001ea96 <Vm::getOffset(unsigned int)>:
c001ea96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea9a:	c3                   	ret    

c001ea9b <Vm::mainloop2()>:
c001ea9b:	83 ec 0c             	sub    esp,0xc
c001ea9e:	e8 59 f3 ff ff       	call   c001ddfc <lockScheduler()>
c001eaa3:	83 ec 0c             	sub    esp,0xc
c001eaa6:	c6 05 05 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a05,0x1
c001eaad:	6a 02                	push   0x2
c001eaaf:	e8 9c f7 ff ff       	call   c001e250 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eab4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eab9:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eabd:	52                   	push   edx
c001eabe:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eac2:	52                   	push   edx
c001eac3:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eac7:	52                   	push   edx
c001eac8:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eacc:	50                   	push   eax
c001eacd:	e8 28 18 fe ff       	call   c00002fa <goToVM86>
c001ead2:	83 c4 2c             	add    esp,0x2c
c001ead5:	c3                   	ret    

c001ead6 <Vm::mainVm8086Loop(void*)>:
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	e8 20 f3 ff ff       	call   c001ddfe <unlockScheduler()>
c001eade:	83 c4 0c             	add    esp,0xc
c001eae1:	eb b8                	jmp    c001ea9b <Vm::mainloop2()>

c001eae3 <Vm::mainloop3(unsigned long)>:
c001eae3:	53                   	push   ebx
c001eae4:	83 ec 08             	sub    esp,0x8
c001eae7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eaeb:	e8 0c f3 ff ff       	call   c001ddfc <lockScheduler()>
c001eaf0:	83 ec 0c             	sub    esp,0xc
c001eaf3:	89 1d 00 1a 03 c0    	mov    DWORD PTR ds:0xc0031a00,ebx
c001eaf9:	6a 02                	push   0x2
c001eafb:	c6 05 04 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a04,0x1
c001eb02:	e8 49 f7 ff ff       	call   c001e250 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb07:	83 c4 18             	add    esp,0x18
c001eb0a:	5b                   	pop    ebx
c001eb0b:	eb 8e                	jmp    c001ea9b <Vm::mainloop2()>

c001eb0d <Vm::initialise8086()>:
c001eb0d:	83 ec 0c             	sub    esp,0xc
c001eb10:	68 80 00 00 00       	push   0x80
c001eb15:	6a 00                	push   0x0
c001eb17:	68 d6 ea 01 c0       	push   0xc001ead6
c001eb1c:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001eb22:	e8 07 f4 ff ff       	call   c001df2e <Process::createThread(void (*)(void*), void*, int)>
c001eb27:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb2e:	a3 08 1a 03 c0       	mov    ds:0xc0031a08,eax
c001eb33:	68 00 01 00 00       	push   0x100
c001eb38:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001eb3d:	6a 00                	push   0x0
c001eb3f:	6a 00                	push   0x0
c001eb41:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb47:	e8 d8 3a ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb4c:	83 c4 2c             	add    esp,0x2c
c001eb4f:	c3                   	ret    

c001eb50 <Vm::finish8086()>:
c001eb50:	53                   	push   ebx
c001eb51:	83 ec 08             	sub    esp,0x8
c001eb54:	e8 a3 f2 ff ff       	call   c001ddfc <lockScheduler()>
c001eb59:	80 3d 04 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a04,0x0
c001eb60:	75 0c                	jne    c001eb6e <Vm::finish8086()+0x1e>
c001eb62:	e8 d1 f5 ff ff       	call   c001e138 <schedule()>
c001eb67:	e8 92 f2 ff ff       	call   c001ddfe <unlockScheduler()>
c001eb6c:	eb e6                	jmp    c001eb54 <Vm::finish8086()+0x4>
c001eb6e:	83 ec 0c             	sub    esp,0xc
c001eb71:	8b 1d 00 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a00
c001eb77:	ff 35 08 1a 03 c0    	push   DWORD PTR ds:0xc0031a08
c001eb7d:	c6 05 04 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a04,0x0
c001eb84:	e8 8b f8 ff ff       	call   c001e414 <unblockTask(ThreadControlBlock*)>
c001eb89:	e8 70 f2 ff ff       	call   c001ddfe <unlockScheduler()>
c001eb8e:	89 d8                	mov    eax,ebx
c001eb90:	83 c4 18             	add    esp,0x18
c001eb93:	5b                   	pop    ebx
c001eb94:	c3                   	ret    

c001eb95 <Vm::getOutput8086(unsigned char*)>:
c001eb95:	83 ec 10             	sub    esp,0x10
c001eb98:	ff 35 0c 1a 03 c0    	push   DWORD PTR ds:0xc0031a0c
c001eb9e:	68 20 1a 03 c0       	push   0xc0031a20
c001eba3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eba7:	e8 98 1b fe ff       	call   c0000744 <memcpy>
c001ebac:	a1 0c 1a 03 c0       	mov    eax,ds:0xc0031a0c
c001ebb1:	c7 05 0c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a0c,0x0
c001ebbb:	83 c4 1c             	add    esp,0x1c
c001ebbe:	c3                   	ret    

c001ebbf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ebbf:	55                   	push   ebp
c001ebc0:	57                   	push   edi
c001ebc1:	56                   	push   esi
c001ebc2:	53                   	push   ebx
c001ebc3:	83 ec 2c             	sub    esp,0x2c
c001ebc6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ebca:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebce:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebd2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebd6:	e8 21 f2 ff ff       	call   c001ddfc <lockScheduler()>
c001ebdb:	a0 05 1a 03 c0       	mov    al,ds:0xc0031a05
c001ebe0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebe4:	84 c0                	test   al,al
c001ebe6:	75 0c                	jne    c001ebf4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ebe8:	e8 4b f5 ff ff       	call   c001e138 <schedule()>
c001ebed:	e8 0c f2 ff ff       	call   c001ddfe <unlockScheduler()>
c001ebf2:	eb e2                	jmp    c001ebd6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebf4:	a1 08 1a 03 c0       	mov    eax,ds:0xc0031a08
c001ebf9:	c7 05 0c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a0c,0x0
c001ec03:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec07:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec0b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec0f:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec13:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec17:	50                   	push   eax
c001ec18:	6a 20                	push   0x20
c001ec1a:	6a 00                	push   0x0
c001ec1c:	68 20 1a 03 c0       	push   0xc0031a20
c001ec21:	e8 52 1b fe ff       	call   c0000778 <memset>
c001ec26:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec2d:	e8 11 0c ff ff       	call   c000f843 <malloc>
c001ec32:	83 c4 0c             	add    esp,0xc
c001ec35:	89 c7                	mov    edi,eax
c001ec37:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001ec3d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec41:	50                   	push   eax
c001ec42:	e8 6b 48 ff ff       	call   c00134b2 <File::File(char const*, Process*)>
c001ec47:	83 c4 10             	add    esp,0x10
c001ec4a:	85 ff                	test   edi,edi
c001ec4c:	75 0a                	jne    c001ec58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec4e:	83 ec 0c             	sub    esp,0xc
c001ec51:	68 13 c6 02 c0       	push   0xc002c613
c001ec56:	eb 27                	jmp    c001ec7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec58:	50                   	push   eax
c001ec59:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec5d:	50                   	push   eax
c001ec5e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec62:	50                   	push   eax
c001ec63:	57                   	push   edi
c001ec64:	e8 59 4b ff ff       	call   c00137c2 <File::stat(unsigned long long*, bool*)>
c001ec69:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec6e:	83 c4 10             	add    esp,0x10
c001ec71:	89 e8                	mov    eax,ebp
c001ec73:	84 c0                	test   al,al
c001ec75:	74 19                	je     c001ec90 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec77:	83 ec 0c             	sub    esp,0xc
c001ec7a:	68 27 c6 02 c0       	push   0xc002c627
c001ec7f:	e8 83 b9 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001ec84:	31 ed                	xor    ebp,ebp
c001ec86:	e8 73 f1 ff ff       	call   c001ddfe <unlockScheduler()>
c001ec8b:	83 c4 10             	add    esp,0x10
c001ec8e:	eb 75                	jmp    c001ed05 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec90:	50                   	push   eax
c001ec91:	50                   	push   eax
c001ec92:	6a 01                	push   0x1
c001ec94:	57                   	push   edi
c001ec95:	e8 7c 48 ff ff       	call   c0013516 <File::open(FileOpenMode)>
c001ec9a:	83 c4 10             	add    esp,0x10
c001ec9d:	85 c0                	test   eax,eax
c001ec9f:	74 17                	je     c001ecb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eca1:	83 ec 0c             	sub    esp,0xc
c001eca4:	68 40 c6 02 c0       	push   0xc002c640
c001eca9:	e8 59 b9 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001ecae:	e8 4b f1 ff ff       	call   c001ddfe <unlockScheduler()>
c001ecb3:	83 c4 10             	add    esp,0x10
c001ecb6:	eb 4d                	jmp    c001ed05 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecb8:	0f b7 f6             	movzx  esi,si
c001ecbb:	50                   	push   eax
c001ecbc:	0f b7 db             	movzx  ebx,bx
c001ecbf:	50                   	push   eax
c001ecc0:	56                   	push   esi
c001ecc1:	53                   	push   ebx
c001ecc2:	e8 b7 fd ff ff       	call   c001ea7e <Vm::realToLinear(unsigned short, unsigned short)>
c001ecc7:	5a                   	pop    edx
c001ecc8:	8b 17                	mov    edx,DWORD PTR [edi]
c001ecca:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ecce:	51                   	push   ecx
c001eccf:	50                   	push   eax
c001ecd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecd4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecd8:	57                   	push   edi
c001ecd9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ecdc:	83 c4 14             	add    esp,0x14
c001ecdf:	57                   	push   edi
c001ece0:	e8 8f 48 ff ff       	call   c0013574 <File::close()>
c001ece5:	c6 05 05 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a05,0x0
c001ecec:	e8 0d f1 ff ff       	call   c001ddfe <unlockScheduler()>
c001ecf1:	59                   	pop    ecx
c001ecf2:	ff 35 08 1a 03 c0    	push   DWORD PTR ds:0xc0031a08
c001ecf8:	e8 17 f7 ff ff       	call   c001e414 <unblockTask(ThreadControlBlock*)>
c001ecfd:	83 c4 10             	add    esp,0x10
c001ed00:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed05:	83 c4 2c             	add    esp,0x2c
c001ed08:	89 e8                	mov    eax,ebp
c001ed0a:	5b                   	pop    ebx
c001ed0b:	5e                   	pop    esi
c001ed0c:	5f                   	pop    edi
c001ed0d:	5d                   	pop    ebp
c001ed0e:	c3                   	ret    

c001ed0f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed0f:	57                   	push   edi
c001ed10:	56                   	push   esi
c001ed11:	53                   	push   ebx
c001ed12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed1a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed1e:	83 e8 06             	sub    eax,0x6
c001ed21:	0f b7 c0             	movzx  eax,ax
c001ed24:	50                   	push   eax
c001ed25:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed2a:	50                   	push   eax
c001ed2b:	e8 4e fd ff ff       	call   c001ea7e <Vm::realToLinear(unsigned short, unsigned short)>
c001ed30:	5a                   	pop    edx
c001ed31:	5e                   	pop    esi
c001ed32:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed35:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed38:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed3e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed41:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed44:	83 c2 02             	add    edx,0x2
c001ed47:	66 89 10             	mov    WORD PTR [eax],dx
c001ed4a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed4d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed51:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed54:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed58:	89 d6                	mov    esi,edx
c001ed5a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed60:	66 81 e6 ff fd       	and    si,0xfdff
c001ed65:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed69:	74 07                	je     c001ed72 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed6b:	89 d6                	mov    esi,edx
c001ed6d:	66 81 ce 00 02       	or     si,0x200
c001ed72:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed7b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed7f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed87:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed8a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed92:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed95:	5b                   	pop    ebx
c001ed96:	5e                   	pop    esi
c001ed97:	5f                   	pop    edi
c001ed98:	c3                   	ret    

c001ed99 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed99:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed9e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eda3:	c1 e0 04             	shl    eax,0x4
c001eda6:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001eda9:	c3                   	ret    

c001edaa <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001edaa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edaf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edb4:	c1 e0 04             	shl    eax,0x4
c001edb7:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001edbb:	c3                   	ret    

c001edbc <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001edbc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edc6:	c1 e0 04             	shl    eax,0x4
c001edc9:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001edcc:	c3                   	ret    

c001edcd <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001edcd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edd2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edd7:	c1 e0 04             	shl    eax,0x4
c001edda:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edde:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ede1:	c3                   	ret    

c001ede2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ede2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ede7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edec:	c1 e0 04             	shl    eax,0x4
c001edef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edf3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edf7:	c3                   	ret    

c001edf8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edf8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edfd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee02:	c1 e0 04             	shl    eax,0x4
c001ee05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee09:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee0c:	c3                   	ret    

c001ee0d <Vm::faultHandler(regs*)>:
c001ee0d:	55                   	push   ebp
c001ee0e:	57                   	push   edi
c001ee0f:	56                   	push   esi
c001ee10:	53                   	push   ebx
c001ee11:	83 ec 1c             	sub    esp,0x1c
c001ee14:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee18:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee1b:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee1e:	0f b7 c1             	movzx  eax,cx
c001ee21:	50                   	push   eax
c001ee22:	0f b7 c3             	movzx  eax,bx
c001ee25:	c1 e3 04             	shl    ebx,0x4
c001ee28:	50                   	push   eax
c001ee29:	e8 50 fc ff ff       	call   c001ea7e <Vm::realToLinear(unsigned short, unsigned short)>
c001ee2e:	5a                   	pop    edx
c001ee2f:	89 c5                	mov    ebp,eax
c001ee31:	5e                   	pop    esi
c001ee32:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee36:	50                   	push   eax
c001ee37:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee3b:	50                   	push   eax
c001ee3c:	e8 3d fc ff ff       	call   c001ea7e <Vm::realToLinear(unsigned short, unsigned short)>
c001ee41:	01 cb                	add    ebx,ecx
c001ee43:	89 c6                	mov    esi,eax
c001ee45:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee49:	50                   	push   eax
c001ee4a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee4e:	50                   	push   eax
c001ee4f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee53:	50                   	push   eax
c001ee54:	55                   	push   ebp
c001ee55:	53                   	push   ebx
c001ee56:	b3 06                	mov    bl,0x6
c001ee58:	68 59 c6 02 c0       	push   0xc002c659
c001ee5d:	e8 f8 40 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001ee62:	83 c4 20             	add    esp,0x20
c001ee65:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee6a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee6f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee73:	3c 9d                	cmp    al,0x9d
c001ee75:	0f 84 d7 02 00 00    	je     c001f152 <Vm::faultHandler(regs*)+0x345>
c001ee7b:	0f 87 a3 00 00 00    	ja     c001ef24 <Vm::faultHandler(regs*)+0x117>
c001ee81:	3c 66                	cmp    al,0x66
c001ee83:	0f 84 15 02 00 00    	je     c001f09e <Vm::faultHandler(regs*)+0x291>
c001ee89:	77 5f                	ja     c001eeea <Vm::faultHandler(regs*)+0xdd>
c001ee8b:	3c 36                	cmp    al,0x36
c001ee8d:	0f 84 f1 01 00 00    	je     c001f084 <Vm::faultHandler(regs*)+0x277>
c001ee93:	77 28                	ja     c001eebd <Vm::faultHandler(regs*)+0xb0>
c001ee95:	3c 26                	cmp    al,0x26
c001ee97:	0f 84 99 01 00 00    	je     c001f036 <Vm::faultHandler(regs*)+0x229>
c001ee9d:	3c 2e                	cmp    al,0x2e
c001ee9f:	0f 85 3b 07 00 00    	jne    c001f5e0 <Vm::faultHandler(regs*)+0x7d3>
c001eea5:	83 ec 0c             	sub    esp,0xc
c001eea8:	31 db                	xor    ebx,ebx
c001eeaa:	68 6e c6 02 c0       	push   0xc002c66e
c001eeaf:	e8 a6 40 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001eeb4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	45                   	inc    ebp
c001eebb:	eb b2                	jmp    c001ee6f <Vm::faultHandler(regs*)+0x62>
c001eebd:	3c 64                	cmp    al,0x64
c001eebf:	0f 84 8b 01 00 00    	je     c001f050 <Vm::faultHandler(regs*)+0x243>
c001eec5:	0f 87 9f 01 00 00    	ja     c001f06a <Vm::faultHandler(regs*)+0x25d>
c001eecb:	3c 3e                	cmp    al,0x3e
c001eecd:	0f 85 0d 07 00 00    	jne    c001f5e0 <Vm::faultHandler(regs*)+0x7d3>
c001eed3:	83 ec 0c             	sub    esp,0xc
c001eed6:	b3 01                	mov    bl,0x1
c001eed8:	68 72 c6 02 c0       	push   0xc002c672
c001eedd:	e8 78 40 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001eee2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eee5:	83 c4 10             	add    esp,0x10
c001eee8:	eb d0                	jmp    c001eeba <Vm::faultHandler(regs*)+0xad>
c001eeea:	3c 6d                	cmp    al,0x6d
c001eeec:	0f 84 af 03 00 00    	je     c001f2a1 <Vm::faultHandler(regs*)+0x494>
c001eef2:	77 15                	ja     c001ef09 <Vm::faultHandler(regs*)+0xfc>
c001eef4:	3c 67                	cmp    al,0x67
c001eef6:	0f 84 bf 01 00 00    	je     c001f0bb <Vm::faultHandler(regs*)+0x2ae>
c001eefc:	3c 6c                	cmp    al,0x6c
c001eefe:	0f 84 3f 03 00 00    	je     c001f243 <Vm::faultHandler(regs*)+0x436>
c001ef04:	e9 d7 06 00 00       	jmp    c001f5e0 <Vm::faultHandler(regs*)+0x7d3>
c001ef09:	3c 6f                	cmp    al,0x6f
c001ef0b:	0f 84 a4 04 00 00    	je     c001f3b5 <Vm::faultHandler(regs*)+0x5a8>
c001ef11:	0f 82 11 04 00 00    	jb     c001f328 <Vm::faultHandler(regs*)+0x51b>
c001ef17:	3c 9c                	cmp    al,0x9c
c001ef19:	0f 84 ba 01 00 00    	je     c001f0d9 <Vm::faultHandler(regs*)+0x2cc>
c001ef1f:	e9 bc 06 00 00       	jmp    c001f5e0 <Vm::faultHandler(regs*)+0x7d3>
c001ef24:	3c ec                	cmp    al,0xec
c001ef26:	0f 84 24 06 00 00    	je     c001f550 <Vm::faultHandler(regs*)+0x743>
c001ef2c:	0f 87 93 00 00 00    	ja     c001efc5 <Vm::faultHandler(regs*)+0x1b8>
c001ef32:	3c e4                	cmp    al,0xe4
c001ef34:	0f 84 5c 05 00 00    	je     c001f496 <Vm::faultHandler(regs*)+0x689>
c001ef3a:	77 6a                	ja     c001efa6 <Vm::faultHandler(regs*)+0x199>
c001ef3c:	3c cd                	cmp    al,0xcd
c001ef3e:	0f 84 7e 02 00 00    	je     c001f1c2 <Vm::faultHandler(regs*)+0x3b5>
c001ef44:	3c cf                	cmp    al,0xcf
c001ef46:	0f 85 94 06 00 00    	jne    c001f5e0 <Vm::faultHandler(regs*)+0x7d3>
c001ef4c:	83 ec 0c             	sub    esp,0xc
c001ef4f:	68 b6 c6 02 c0       	push   0xc002c6b6
c001ef54:	e8 01 40 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001ef59:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef5c:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef5f:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef63:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef66:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef6a:	0d 00 02 02 00       	or     eax,0x20200
c001ef6f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef72:	56                   	push   esi
c001ef73:	53                   	push   ebx
c001ef74:	52                   	push   edx
c001ef75:	68 bc c6 02 c0       	push   0xc002c6bc
c001ef7a:	e8 db 3f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001ef7f:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef83:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef89:	66 c1 e8 09          	shr    ax,0x9
c001ef8d:	83 e0 01             	and    eax,0x1
c001ef90:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef93:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef96:	83 c0 06             	add    eax,0x6
c001ef99:	25 ff ff 00 00       	and    eax,0xffff
c001ef9e:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efa1:	e9 95 02 00 00       	jmp    c001f23b <Vm::faultHandler(regs*)+0x42e>
c001efa6:	3c e6                	cmp    al,0xe6
c001efa8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001efac:	0f 84 4e 05 00 00    	je     c001f500 <Vm::faultHandler(regs*)+0x6f3>
c001efb2:	0f 82 0a 05 00 00    	jb     c001f4c2 <Vm::faultHandler(regs*)+0x6b5>
c001efb8:	3c e7                	cmp    al,0xe7
c001efba:	0f 84 69 05 00 00    	je     c001f529 <Vm::faultHandler(regs*)+0x71c>
c001efc0:	e9 1b 06 00 00       	jmp    c001f5e0 <Vm::faultHandler(regs*)+0x7d3>
c001efc5:	3c ef                	cmp    al,0xef
c001efc7:	0f 84 e6 05 00 00    	je     c001f5b3 <Vm::faultHandler(regs*)+0x7a6>
c001efcd:	77 37                	ja     c001f006 <Vm::faultHandler(regs*)+0x1f9>
c001efcf:	3c ed                	cmp    al,0xed
c001efd1:	0f 84 a3 05 00 00    	je     c001f57a <Vm::faultHandler(regs*)+0x76d>
c001efd7:	3c ee                	cmp    al,0xee
c001efd9:	0f 85 01 06 00 00    	jne    c001f5e0 <Vm::faultHandler(regs*)+0x7d3>
c001efdf:	52                   	push   edx
c001efe0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efe3:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efe6:	68 57 c7 02 c0       	push   0xc002c757
c001efeb:	e8 6a 3f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001eff0:	59                   	pop    ecx
c001eff1:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001eff5:	5b                   	pop    ebx
c001eff6:	50                   	push   eax
c001eff7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001effb:	50                   	push   eax
c001effc:	e8 2a fa ff ff       	call   c001ea2b <Vm::outbv(unsigned short, unsigned char)>
c001f001:	e9 a5 05 00 00       	jmp    c001f5ab <Vm::faultHandler(regs*)+0x79e>
c001f006:	3c fa                	cmp    al,0xfa
c001f008:	0f 84 f7 01 00 00    	je     c001f205 <Vm::faultHandler(regs*)+0x3f8>
c001f00e:	3c fb                	cmp    al,0xfb
c001f010:	0f 84 0a 02 00 00    	je     c001f220 <Vm::faultHandler(regs*)+0x413>
c001f016:	3c f3                	cmp    al,0xf3
c001f018:	0f 85 c2 05 00 00    	jne    c001f5e0 <Vm::faultHandler(regs*)+0x7d3>
c001f01e:	83 ec 0c             	sub    esp,0xc
c001f021:	68 8f c6 02 c0       	push   0xc002c68f
c001f026:	e8 2f 3f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f02b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f02e:	83 c4 10             	add    esp,0x10
c001f031:	e9 84 fe ff ff       	jmp    c001eeba <Vm::faultHandler(regs*)+0xad>
c001f036:	83 ec 0c             	sub    esp,0xc
c001f039:	b3 02                	mov    bl,0x2
c001f03b:	68 6a c6 02 c0       	push   0xc002c66a
c001f040:	e8 15 3f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f045:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f048:	83 c4 10             	add    esp,0x10
c001f04b:	e9 6a fe ff ff       	jmp    c001eeba <Vm::faultHandler(regs*)+0xad>
c001f050:	83 ec 0c             	sub    esp,0xc
c001f053:	b3 03                	mov    bl,0x3
c001f055:	68 76 c6 02 c0       	push   0xc002c676
c001f05a:	e8 fb 3e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f05f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f062:	83 c4 10             	add    esp,0x10
c001f065:	e9 50 fe ff ff       	jmp    c001eeba <Vm::faultHandler(regs*)+0xad>
c001f06a:	83 ec 0c             	sub    esp,0xc
c001f06d:	b3 04                	mov    bl,0x4
c001f06f:	68 7a c6 02 c0       	push   0xc002c67a
c001f074:	e8 e1 3e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f079:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f07c:	83 c4 10             	add    esp,0x10
c001f07f:	e9 36 fe ff ff       	jmp    c001eeba <Vm::faultHandler(regs*)+0xad>
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	b3 05                	mov    bl,0x5
c001f089:	68 7e c6 02 c0       	push   0xc002c67e
c001f08e:	e8 c7 3e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f093:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f096:	83 c4 10             	add    esp,0x10
c001f099:	e9 1c fe ff ff       	jmp    c001eeba <Vm::faultHandler(regs*)+0xad>
c001f09e:	83 ec 0c             	sub    esp,0xc
c001f0a1:	68 82 c6 02 c0       	push   0xc002c682
c001f0a6:	e8 af 3e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f0ab:	83 c4 10             	add    esp,0x10
c001f0ae:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0b1:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f0b6:	e9 ff fd ff ff       	jmp    c001eeba <Vm::faultHandler(regs*)+0xad>
c001f0bb:	50                   	push   eax
c001f0bc:	50                   	push   eax
c001f0bd:	6a 01                	push   0x1
c001f0bf:	68 87 c6 02 c0       	push   0xc002c687
c001f0c4:	e8 91 3e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f0c9:	83 c4 10             	add    esp,0x10
c001f0cc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0d4:	e9 e1 fd ff ff       	jmp    c001eeba <Vm::faultHandler(regs*)+0xad>
c001f0d9:	83 ec 0c             	sub    esp,0xc
c001f0dc:	68 95 c6 02 c0       	push   0xc002c695
c001f0e1:	e8 74 3e ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f0e6:	83 c4 10             	add    esp,0x10
c001f0e9:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f0ec:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0f1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f0f4:	74 2f                	je     c001f125 <Vm::faultHandler(regs*)+0x318>
c001f0f6:	83 ea 04             	sub    edx,0x4
c001f0f9:	25 ff 0d 00 00       	and    eax,0xdff
c001f0fe:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f104:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f107:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f10a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f110:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f114:	0f 84 bf 04 00 00    	je     c001f5d9 <Vm::faultHandler(regs*)+0x7cc>
c001f11a:	80 cc 02             	or     ah,0x2
c001f11d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f120:	e9 b4 04 00 00       	jmp    c001f5d9 <Vm::faultHandler(regs*)+0x7cc>
c001f125:	83 ea 02             	sub    edx,0x2
c001f128:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f12e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f131:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f135:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f13b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f13f:	74 05                	je     c001f146 <Vm::faultHandler(regs*)+0x339>
c001f141:	80 cc 02             	or     ah,0x2
c001f144:	eb 03                	jmp    c001f149 <Vm::faultHandler(regs*)+0x33c>
c001f146:	80 e4 fd             	and    ah,0xfd
c001f149:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f14d:	e9 87 04 00 00       	jmp    c001f5d9 <Vm::faultHandler(regs*)+0x7cc>
c001f152:	83 ec 0c             	sub    esp,0xc
c001f155:	68 9c c6 02 c0       	push   0xc002c69c
c001f15a:	e8 fb 3d ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f15f:	83 c4 10             	add    esp,0x10
c001f162:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f167:	74 28                	je     c001f191 <Vm::faultHandler(regs*)+0x384>
c001f169:	8b 06                	mov    eax,DWORD PTR [esi]
c001f16b:	25 ff 0d 00 00       	and    eax,0xdff
c001f170:	0d 00 02 02 00       	or     eax,0x20200
c001f175:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f178:	8b 06                	mov    eax,DWORD PTR [esi]
c001f17a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f180:	c1 e8 09             	shr    eax,0x9
c001f183:	83 e0 01             	and    eax,0x1
c001f186:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f189:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f18c:	83 c0 04             	add    eax,0x4
c001f18f:	eb 24                	jmp    c001f1b5 <Vm::faultHandler(regs*)+0x3a8>
c001f191:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f194:	0d 00 02 02 00       	or     eax,0x20200
c001f199:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f19c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f19f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1a5:	66 c1 e8 09          	shr    ax,0x9
c001f1a9:	83 e0 01             	and    eax,0x1
c001f1ac:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1af:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1b2:	83 c0 02             	add    eax,0x2
c001f1b5:	25 ff ff 00 00       	and    eax,0xffff
c001f1ba:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f1bd:	e9 17 04 00 00       	jmp    c001f5d9 <Vm::faultHandler(regs*)+0x7cc>
c001f1c2:	53                   	push   ebx
c001f1c3:	53                   	push   ebx
c001f1c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1c8:	50                   	push   eax
c001f1c9:	68 a2 c6 02 c0       	push   0xc002c6a2
c001f1ce:	e8 87 3d ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f1d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1d7:	83 c4 10             	add    esp,0x10
c001f1da:	3c ee                	cmp    al,0xee
c001f1dc:	75 10                	jne    c001f1ee <Vm::faultHandler(regs*)+0x3e1>
c001f1de:	83 ec 0c             	sub    esp,0xc
c001f1e1:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1e4:	e8 fa f8 ff ff       	call   c001eae3 <Vm::mainloop3(unsigned long)>
c001f1e9:	e9 c0 03 00 00       	jmp    c001f5ae <Vm::faultHandler(regs*)+0x7a1>
c001f1ee:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f1f2:	83 ec 0c             	sub    esp,0xc
c001f1f5:	53                   	push   ebx
c001f1f6:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f1fa:	53                   	push   ebx
c001f1fb:	55                   	push   ebp
c001f1fc:	50                   	push   eax
c001f1fd:	57                   	push   edi
c001f1fe:	e8 0c fb ff ff       	call   c001ed0f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f203:	eb 36                	jmp    c001f23b <Vm::faultHandler(regs*)+0x42e>
c001f205:	83 ec 0c             	sub    esp,0xc
c001f208:	68 ac c6 02 c0       	push   0xc002c6ac
c001f20d:	e8 48 3d ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f212:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f217:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f21b:	e9 8b 03 00 00       	jmp    c001f5ab <Vm::faultHandler(regs*)+0x79e>
c001f220:	83 ec 0c             	sub    esp,0xc
c001f223:	68 b1 c6 02 c0       	push   0xc002c6b1
c001f228:	e8 2d 3d ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f22d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f232:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f236:	e9 70 03 00 00       	jmp    c001f5ab <Vm::faultHandler(regs*)+0x79e>
c001f23b:	83 c4 20             	add    esp,0x20
c001f23e:	e9 99 03 00 00       	jmp    c001f5dc <Vm::faultHandler(regs*)+0x7cf>
c001f243:	83 ec 0c             	sub    esp,0xc
c001f246:	68 ef c6 02 c0       	push   0xc002c6ef
c001f24b:	e8 0a 3d ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f250:	83 c4 10             	add    esp,0x10
c001f253:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f256:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f25b:	74 0d                	je     c001f26a <Vm::faultHandler(regs*)+0x45d>
c001f25d:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f264:	0f 87 9e 01 00 00    	ja     c001f408 <Vm::faultHandler(regs*)+0x5fb>
c001f26a:	83 ec 0c             	sub    esp,0xc
c001f26d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f271:	0f b7 db             	movzx  ebx,bx
c001f274:	50                   	push   eax
c001f275:	e8 9e f7 ff ff       	call   c001ea18 <Vm::inbv(unsigned short)>
c001f27a:	83 c4 0c             	add    esp,0xc
c001f27d:	0f b6 c0             	movzx  eax,al
c001f280:	50                   	push   eax
c001f281:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f285:	50                   	push   eax
c001f286:	53                   	push   ebx
c001f287:	e8 41 fb ff ff       	call   c001edcd <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f28c:	83 c4 10             	add    esp,0x10
c001f28f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f292:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f296:	74 03                	je     c001f29b <Vm::faultHandler(regs*)+0x48e>
c001f298:	48                   	dec    eax
c001f299:	eb 01                	jmp    c001f29c <Vm::faultHandler(regs*)+0x48f>
c001f29b:	40                   	inc    eax
c001f29c:	0f b7 c0             	movzx  eax,ax
c001f29f:	eb 7f                	jmp    c001f320 <Vm::faultHandler(regs*)+0x513>
c001f2a1:	83 ec 0c             	sub    esp,0xc
c001f2a4:	68 21 c7 02 c0       	push   0xc002c721
c001f2a9:	e8 ac 3c ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f2ae:	83 c4 10             	add    esp,0x10
c001f2b1:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2b9:	74 0d                	je     c001f2c8 <Vm::faultHandler(regs*)+0x4bb>
c001f2bb:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2c2:	0f 87 40 01 00 00    	ja     c001f408 <Vm::faultHandler(regs*)+0x5fb>
c001f2c8:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2cb:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2cf:	0f b7 db             	movzx  ebx,bx
c001f2d2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2d7:	74 20                	je     c001f2f9 <Vm::faultHandler(regs*)+0x4ec>
c001f2d9:	ed                   	in     eax,dx
c001f2da:	51                   	push   ecx
c001f2db:	50                   	push   eax
c001f2dc:	56                   	push   esi
c001f2dd:	53                   	push   ebx
c001f2de:	e8 15 fb ff ff       	call   c001edf8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2e3:	83 c4 10             	add    esp,0x10
c001f2e6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2e9:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2ed:	74 05                	je     c001f2f4 <Vm::faultHandler(regs*)+0x4e7>
c001f2ef:	83 e8 04             	sub    eax,0x4
c001f2f2:	eb 27                	jmp    c001f31b <Vm::faultHandler(regs*)+0x50e>
c001f2f4:	83 c0 04             	add    eax,0x4
c001f2f7:	eb 22                	jmp    c001f31b <Vm::faultHandler(regs*)+0x50e>
c001f2f9:	66 ed                	in     ax,dx
c001f2fb:	0f b7 c0             	movzx  eax,ax
c001f2fe:	52                   	push   edx
c001f2ff:	50                   	push   eax
c001f300:	56                   	push   esi
c001f301:	53                   	push   ebx
c001f302:	e8 db fa ff ff       	call   c001ede2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f307:	83 c4 10             	add    esp,0x10
c001f30a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f30d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f311:	74 05                	je     c001f318 <Vm::faultHandler(regs*)+0x50b>
c001f313:	83 e8 02             	sub    eax,0x2
c001f316:	eb 03                	jmp    c001f31b <Vm::faultHandler(regs*)+0x50e>
c001f318:	83 c0 02             	add    eax,0x2
c001f31b:	25 ff ff 00 00       	and    eax,0xffff
c001f320:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f323:	e9 b1 02 00 00       	jmp    c001f5d9 <Vm::faultHandler(regs*)+0x7cc>
c001f328:	83 ec 0c             	sub    esp,0xc
c001f32b:	4b                   	dec    ebx
c001f32c:	68 27 c7 02 c0       	push   0xc002c727
c001f331:	e8 24 3c ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f336:	83 c4 10             	add    esp,0x10
c001f339:	80 fb 05             	cmp    bl,0x5
c001f33c:	77 0a                	ja     c001f348 <Vm::faultHandler(regs*)+0x53b>
c001f33e:	0f b6 db             	movzx  ebx,bl
c001f341:	ff 24 9d 98 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3868]
c001f348:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f34c:	eb 1b                	jmp    c001f369 <Vm::faultHandler(regs*)+0x55c>
c001f34e:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f352:	eb 15                	jmp    c001f369 <Vm::faultHandler(regs*)+0x55c>
c001f354:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f358:	eb 0f                	jmp    c001f369 <Vm::faultHandler(regs*)+0x55c>
c001f35a:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f35e:	eb 09                	jmp    c001f369 <Vm::faultHandler(regs*)+0x55c>
c001f360:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f363:	eb 04                	jmp    c001f369 <Vm::faultHandler(regs*)+0x55c>
c001f365:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f369:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f36e:	74 0d                	je     c001f37d <Vm::faultHandler(regs*)+0x570>
c001f370:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f377:	0f 87 8b 00 00 00    	ja     c001f408 <Vm::faultHandler(regs*)+0x5fb>
c001f37d:	53                   	push   ebx
c001f37e:	53                   	push   ebx
c001f37f:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f383:	52                   	push   edx
c001f384:	50                   	push   eax
c001f385:	e8 0f fa ff ff       	call   c001ed99 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f38a:	5e                   	pop    esi
c001f38b:	0f b6 c0             	movzx  eax,al
c001f38e:	5d                   	pop    ebp
c001f38f:	50                   	push   eax
c001f390:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f394:	50                   	push   eax
c001f395:	e8 91 f6 ff ff       	call   c001ea2b <Vm::outbv(unsigned short, unsigned char)>
c001f39a:	83 c4 10             	add    esp,0x10
c001f39d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3a0:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3a4:	74 03                	je     c001f3a9 <Vm::faultHandler(regs*)+0x59c>
c001f3a6:	48                   	dec    eax
c001f3a7:	eb 01                	jmp    c001f3aa <Vm::faultHandler(regs*)+0x59d>
c001f3a9:	40                   	inc    eax
c001f3aa:	0f b7 c0             	movzx  eax,ax
c001f3ad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3b0:	e9 24 02 00 00       	jmp    c001f5d9 <Vm::faultHandler(regs*)+0x7cc>
c001f3b5:	83 ec 0c             	sub    esp,0xc
c001f3b8:	4b                   	dec    ebx
c001f3b9:	68 27 c7 02 c0       	push   0xc002c727
c001f3be:	e8 97 3b ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f3c3:	83 c4 10             	add    esp,0x10
c001f3c6:	80 fb 05             	cmp    bl,0x5
c001f3c9:	77 0a                	ja     c001f3d5 <Vm::faultHandler(regs*)+0x5c8>
c001f3cb:	0f b6 db             	movzx  ebx,bl
c001f3ce:	ff 24 9d b0 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3850]
c001f3d5:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3d9:	eb 1b                	jmp    c001f3f6 <Vm::faultHandler(regs*)+0x5e9>
c001f3db:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3df:	eb 15                	jmp    c001f3f6 <Vm::faultHandler(regs*)+0x5e9>
c001f3e1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3e5:	eb 0f                	jmp    c001f3f6 <Vm::faultHandler(regs*)+0x5e9>
c001f3e7:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3eb:	eb 09                	jmp    c001f3f6 <Vm::faultHandler(regs*)+0x5e9>
c001f3ed:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3f0:	eb 04                	jmp    c001f3f6 <Vm::faultHandler(regs*)+0x5e9>
c001f3f2:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3f6:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f3f9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3fe:	74 39                	je     c001f439 <Vm::faultHandler(regs*)+0x62c>
c001f400:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f406:	76 31                	jbe    c001f439 <Vm::faultHandler(regs*)+0x62c>
c001f408:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f40c:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f410:	51                   	push   ecx
c001f411:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f415:	51                   	push   ecx
c001f416:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f41a:	51                   	push   ecx
c001f41b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f41f:	51                   	push   ecx
c001f420:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f424:	52                   	push   edx
c001f425:	50                   	push   eax
c001f426:	50                   	push   eax
c001f427:	68 f4 c6 02 c0       	push   0xc002c6f4
c001f42c:	e8 29 3b ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f431:	83 c4 20             	add    esp,0x20
c001f434:	e9 fb 01 00 00       	jmp    c001f634 <Vm::faultHandler(regs*)+0x827>
c001f439:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f43c:	0f b7 d3             	movzx  edx,bx
c001f43f:	81 e6 00 04 00 00    	and    esi,0x400
c001f445:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f448:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f44d:	74 1d                	je     c001f46c <Vm::faultHandler(regs*)+0x65f>
c001f44f:	51                   	push   ecx
c001f450:	51                   	push   ecx
c001f451:	52                   	push   edx
c001f452:	50                   	push   eax
c001f453:	e8 64 f9 ff ff       	call   c001edbc <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f458:	83 c4 10             	add    esp,0x10
c001f45b:	89 ea                	mov    edx,ebp
c001f45d:	ef                   	out    dx,eax
c001f45e:	85 f6                	test   esi,esi
c001f460:	74 05                	je     c001f467 <Vm::faultHandler(regs*)+0x65a>
c001f462:	83 eb 04             	sub    ebx,0x4
c001f465:	eb 21                	jmp    c001f488 <Vm::faultHandler(regs*)+0x67b>
c001f467:	83 c3 04             	add    ebx,0x4
c001f46a:	eb 1c                	jmp    c001f488 <Vm::faultHandler(regs*)+0x67b>
c001f46c:	51                   	push   ecx
c001f46d:	51                   	push   ecx
c001f46e:	52                   	push   edx
c001f46f:	50                   	push   eax
c001f470:	e8 35 f9 ff ff       	call   c001edaa <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f475:	83 c4 10             	add    esp,0x10
c001f478:	89 ea                	mov    edx,ebp
c001f47a:	66 ef                	out    dx,ax
c001f47c:	85 f6                	test   esi,esi
c001f47e:	74 05                	je     c001f485 <Vm::faultHandler(regs*)+0x678>
c001f480:	83 eb 02             	sub    ebx,0x2
c001f483:	eb 03                	jmp    c001f488 <Vm::faultHandler(regs*)+0x67b>
c001f485:	83 c3 02             	add    ebx,0x2
c001f488:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f48e:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f491:	e9 43 01 00 00       	jmp    c001f5d9 <Vm::faultHandler(regs*)+0x7cc>
c001f496:	53                   	push   ebx
c001f497:	53                   	push   ebx
c001f498:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f49c:	50                   	push   eax
c001f49d:	68 2d c7 02 c0       	push   0xc002c72d
c001f4a2:	e8 b3 3a ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f4a7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4b2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4b5:	e8 5e f5 ff ff       	call   c001ea18 <Vm::inbv(unsigned short)>
c001f4ba:	0f b6 c0             	movzx  eax,al
c001f4bd:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4c0:	eb 5e                	jmp    c001f520 <Vm::faultHandler(regs*)+0x713>
c001f4c2:	51                   	push   ecx
c001f4c3:	51                   	push   ecx
c001f4c4:	53                   	push   ebx
c001f4c5:	68 33 c7 02 c0       	push   0xc002c733
c001f4ca:	e8 8b 3a ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f4cf:	83 c4 10             	add    esp,0x10
c001f4d2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4d7:	74 07                	je     c001f4e0 <Vm::faultHandler(regs*)+0x6d3>
c001f4d9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4dd:	ed                   	in     eax,dx
c001f4de:	eb 14                	jmp    c001f4f4 <Vm::faultHandler(regs*)+0x6e7>
c001f4e0:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4e3:	66 31 db             	xor    bx,bx
c001f4e6:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f4e9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4ed:	66 ed                	in     ax,dx
c001f4ef:	0f b7 c0             	movzx  eax,ax
c001f4f2:	09 d8                	or     eax,ebx
c001f4f4:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4f7:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4fb:	e9 dc 00 00 00       	jmp    c001f5dc <Vm::faultHandler(regs*)+0x7cf>
c001f500:	50                   	push   eax
c001f501:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f504:	53                   	push   ebx
c001f505:	68 39 c7 02 c0       	push   0xc002c739
c001f50a:	e8 4b 3a ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f50f:	58                   	pop    eax
c001f510:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f514:	5a                   	pop    edx
c001f515:	50                   	push   eax
c001f516:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f51a:	50                   	push   eax
c001f51b:	e8 0b f5 ff ff       	call   c001ea2b <Vm::outbv(unsigned short, unsigned char)>
c001f520:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f524:	e9 85 00 00 00       	jmp    c001f5ae <Vm::faultHandler(regs*)+0x7a1>
c001f529:	50                   	push   eax
c001f52a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f52d:	53                   	push   ebx
c001f52e:	68 42 c7 02 c0       	push   0xc002c742
c001f533:	e8 22 3a ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f538:	83 c4 10             	add    esp,0x10
c001f53b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f53f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f544:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f547:	74 03                	je     c001f54c <Vm::faultHandler(regs*)+0x73f>
c001f549:	ef                   	out    dx,eax
c001f54a:	eb ab                	jmp    c001f4f7 <Vm::faultHandler(regs*)+0x6ea>
c001f54c:	66 ef                	out    dx,ax
c001f54e:	eb a7                	jmp    c001f4f7 <Vm::faultHandler(regs*)+0x6ea>
c001f550:	55                   	push   ebp
c001f551:	55                   	push   ebp
c001f552:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f555:	68 4b c7 02 c0       	push   0xc002c74b
c001f55a:	e8 fb 39 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f55f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f566:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f56a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f56d:	e8 a6 f4 ff ff       	call   c001ea18 <Vm::inbv(unsigned short)>
c001f572:	0f b6 c0             	movzx  eax,al
c001f575:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f578:	eb 31                	jmp    c001f5ab <Vm::faultHandler(regs*)+0x79e>
c001f57a:	56                   	push   esi
c001f57b:	56                   	push   esi
c001f57c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f57f:	68 51 c7 02 c0       	push   0xc002c751
c001f584:	e8 d1 39 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f589:	83 c4 10             	add    esp,0x10
c001f58c:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f58f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f594:	74 03                	je     c001f599 <Vm::faultHandler(regs*)+0x78c>
c001f596:	ed                   	in     eax,dx
c001f597:	eb 0d                	jmp    c001f5a6 <Vm::faultHandler(regs*)+0x799>
c001f599:	66 ed                	in     ax,dx
c001f59b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f59e:	0f b7 c0             	movzx  eax,ax
c001f5a1:	66 31 d2             	xor    dx,dx
c001f5a4:	09 d0                	or     eax,edx
c001f5a6:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5a9:	eb 2e                	jmp    c001f5d9 <Vm::faultHandler(regs*)+0x7cc>
c001f5ab:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5ae:	83 c4 10             	add    esp,0x10
c001f5b1:	eb 29                	jmp    c001f5dc <Vm::faultHandler(regs*)+0x7cf>
c001f5b3:	50                   	push   eax
c001f5b4:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5b7:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5ba:	68 60 c7 02 c0       	push   0xc002c760
c001f5bf:	e8 96 39 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f5c4:	83 c4 10             	add    esp,0x10
c001f5c7:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5ca:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5cf:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5d2:	74 03                	je     c001f5d7 <Vm::faultHandler(regs*)+0x7ca>
c001f5d4:	ef                   	out    dx,eax
c001f5d5:	eb 02                	jmp    c001f5d9 <Vm::faultHandler(regs*)+0x7cc>
c001f5d7:	66 ef                	out    dx,ax
c001f5d9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5dc:	b0 01                	mov    al,0x1
c001f5de:	eb 56                	jmp    c001f636 <Vm::faultHandler(regs*)+0x829>
c001f5e0:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5e4:	51                   	push   ecx
c001f5e5:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5e9:	51                   	push   ecx
c001f5ea:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5ee:	51                   	push   ecx
c001f5ef:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5f3:	51                   	push   ecx
c001f5f4:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5f8:	52                   	push   edx
c001f5f9:	50                   	push   eax
c001f5fa:	50                   	push   eax
c001f5fb:	68 69 c7 02 c0       	push   0xc002c769
c001f600:	e8 55 39 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c001f605:	83 c4 20             	add    esp,0x20
c001f608:	83 ec 0c             	sub    esp,0xc
c001f60b:	6a 60                	push   0x60
c001f60d:	e8 06 f4 ff ff       	call   c001ea18 <Vm::inbv(unsigned short)>
c001f612:	83 c4 10             	add    esp,0x10
c001f615:	3c 1c                	cmp    al,0x1c
c001f617:	74 04                	je     c001f61d <Vm::faultHandler(regs*)+0x810>
c001f619:	3c 5a                	cmp    al,0x5a
c001f61b:	75 eb                	jne    c001f608 <Vm::faultHandler(regs*)+0x7fb>
c001f61d:	3c 1c                	cmp    al,0x1c
c001f61f:	74 04                	je     c001f625 <Vm::faultHandler(regs*)+0x818>
c001f621:	3c 5a                	cmp    al,0x5a
c001f623:	75 0f                	jne    c001f634 <Vm::faultHandler(regs*)+0x827>
c001f625:	83 ec 0c             	sub    esp,0xc
c001f628:	6a 60                	push   0x60
c001f62a:	e8 e9 f3 ff ff       	call   c001ea18 <Vm::inbv(unsigned short)>
c001f62f:	83 c4 10             	add    esp,0x10
c001f632:	eb e9                	jmp    c001f61d <Vm::faultHandler(regs*)+0x810>
c001f634:	31 c0                	xor    eax,eax
c001f636:	83 c4 1c             	add    esp,0x1c
c001f639:	5b                   	pop    ebx
c001f63a:	5e                   	pop    esi
c001f63b:	5f                   	pop    edi
c001f63c:	5d                   	pop    ebp
c001f63d:	c3                   	ret    

c001f63e <Vm::fpuInternalTo32(unsigned long long)>:
c001f63e:	57                   	push   edi
c001f63f:	56                   	push   esi
c001f640:	53                   	push   ebx
c001f641:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f649:	89 d6                	mov    esi,edx
c001f64b:	89 d7                	mov    edi,edx
c001f64d:	89 c1                	mov    ecx,eax
c001f64f:	c1 ef 14             	shr    edi,0x14
c001f652:	89 d3                	mov    ebx,edx
c001f654:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f65a:	31 d2                	xor    edx,edx
c001f65c:	89 f8                	mov    eax,edi
c001f65e:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f664:	bf ff 00 00 00       	mov    edi,0xff
c001f669:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f66e:	83 d2 ff             	adc    edx,0xffffffff
c001f671:	39 c7                	cmp    edi,eax
c001f673:	bf 00 00 00 00       	mov    edi,0x0
c001f678:	19 d7                	sbb    edi,edx
c001f67a:	72 15                	jb     c001f691 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f67c:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f680:	c1 e0 17             	shl    eax,0x17
c001f683:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f689:	09 f1                	or     ecx,esi
c001f68b:	09 c1                	or     ecx,eax
c001f68d:	89 cf                	mov    edi,ecx
c001f68f:	eb 02                	jmp    c001f693 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f691:	31 ff                	xor    edi,edi
c001f693:	89 f8                	mov    eax,edi
c001f695:	5b                   	pop    ebx
c001f696:	5e                   	pop    esi
c001f697:	5f                   	pop    edi
c001f698:	c3                   	ret    

c001f699 <Vm::fpuInternalTo64(unsigned long long)>:
c001f699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f69d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6a1:	c3                   	ret    

c001f6a2 <Vm::fpu32ToInternal(unsigned int)>:
c001f6a2:	57                   	push   edi
c001f6a3:	31 ff                	xor    edi,edi
c001f6a5:	56                   	push   esi
c001f6a6:	53                   	push   ebx
c001f6a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6ab:	89 cb                	mov    ebx,ecx
c001f6ad:	89 ce                	mov    esi,ecx
c001f6af:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f6b5:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f6bb:	c1 e9 17             	shr    ecx,0x17
c001f6be:	89 f0                	mov    eax,esi
c001f6c0:	0f b6 d1             	movzx  edx,cl
c001f6c3:	81 c2 80 03 00 00    	add    edx,0x380
c001f6c9:	89 d1                	mov    ecx,edx
c001f6cb:	89 fa                	mov    edx,edi
c001f6cd:	c1 e1 14             	shl    ecx,0x14
c001f6d0:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6d4:	c1 e0 1d             	shl    eax,0x1d
c001f6d7:	89 d7                	mov    edi,edx
c001f6d9:	89 c6                	mov    esi,eax
c001f6db:	89 ca                	mov    edx,ecx
c001f6dd:	89 f0                	mov    eax,esi
c001f6df:	09 fa                	or     edx,edi
c001f6e1:	09 da                	or     edx,ebx
c001f6e3:	5b                   	pop    ebx
c001f6e4:	5e                   	pop    esi
c001f6e5:	5f                   	pop    edi
c001f6e6:	c3                   	ret    

c001f6e7 <Vm::fpu64ToInternal(unsigned long long)>:
c001f6e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6ef:	c3                   	ret    

c001f6f0 <Vm::fpuFloatToLong(unsigned long long)>:
c001f6f0:	57                   	push   edi
c001f6f1:	31 c0                	xor    eax,eax
c001f6f3:	56                   	push   esi
c001f6f4:	31 d2                	xor    edx,edx
c001f6f6:	53                   	push   ebx
c001f6f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6ff:	89 d9                	mov    ecx,ebx
c001f701:	c1 e9 14             	shr    ecx,0x14
c001f704:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f70a:	89 cf                	mov    edi,ecx
c001f70c:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f712:	78 33                	js     c001f747 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f714:	89 d9                	mov    ecx,ebx
c001f716:	89 f0                	mov    eax,esi
c001f718:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f71e:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f724:	89 ca                	mov    edx,ecx
c001f726:	b9 34 00 00 00       	mov    ecx,0x34
c001f72b:	29 f9                	sub    ecx,edi
c001f72d:	0f ad d0             	shrd   eax,edx,cl
c001f730:	d3 fa                	sar    edx,cl
c001f732:	f6 c1 20             	test   cl,0x20
c001f735:	74 05                	je     c001f73c <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f737:	89 d0                	mov    eax,edx
c001f739:	c1 fa 1f             	sar    edx,0x1f
c001f73c:	85 db                	test   ebx,ebx
c001f73e:	79 07                	jns    c001f747 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f740:	f7 d8                	neg    eax
c001f742:	83 d2 00             	adc    edx,0x0
c001f745:	f7 da                	neg    edx
c001f747:	5b                   	pop    ebx
c001f748:	5e                   	pop    esi
c001f749:	5f                   	pop    edi
c001f74a:	c3                   	ret    

c001f74b <Vm::fpuULongToFloat(unsigned long long)>:
c001f74b:	57                   	push   edi
c001f74c:	31 c9                	xor    ecx,ecx
c001f74e:	56                   	push   esi
c001f74f:	53                   	push   ebx
c001f750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f754:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f758:	0f ba e7 14          	bt     edi,0x14
c001f75c:	72 07                	jb     c001f765 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f75e:	01 f6                	add    esi,esi
c001f760:	11 ff                	adc    edi,edi
c001f762:	41                   	inc    ecx
c001f763:	eb f3                	jmp    c001f758 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f765:	89 fa                	mov    edx,edi
c001f767:	89 f0                	mov    eax,esi
c001f769:	bb 33 04 00 00       	mov    ebx,0x433
c001f76e:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f774:	29 cb                	sub    ebx,ecx
c001f776:	89 d9                	mov    ecx,ebx
c001f778:	5b                   	pop    ebx
c001f779:	c1 e1 14             	shl    ecx,0x14
c001f77c:	5e                   	pop    esi
c001f77d:	09 ca                	or     edx,ecx
c001f77f:	5f                   	pop    edi
c001f780:	c3                   	ret    

c001f781 <Vm::fpuLongToFloat(long long)>:
c001f781:	56                   	push   esi
c001f782:	31 c0                	xor    eax,eax
c001f784:	53                   	push   ebx
c001f785:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f789:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f78d:	39 c8                	cmp    eax,ecx
c001f78f:	19 d8                	sbb    eax,ebx
c001f791:	7d 04                	jge    c001f797 <Vm::fpuLongToFloat(long long)+0x16>
c001f793:	31 f6                	xor    esi,esi
c001f795:	eb 0c                	jmp    c001f7a3 <Vm::fpuLongToFloat(long long)+0x22>
c001f797:	f7 d9                	neg    ecx
c001f799:	be 01 00 00 00       	mov    esi,0x1
c001f79e:	83 d3 00             	adc    ebx,0x0
c001f7a1:	f7 db                	neg    ebx
c001f7a3:	31 c0                	xor    eax,eax
c001f7a5:	0f ba e3 14          	bt     ebx,0x14
c001f7a9:	72 07                	jb     c001f7b2 <Vm::fpuLongToFloat(long long)+0x31>
c001f7ab:	01 c9                	add    ecx,ecx
c001f7ad:	11 db                	adc    ebx,ebx
c001f7af:	40                   	inc    eax
c001f7b0:	eb f3                	jmp    c001f7a5 <Vm::fpuLongToFloat(long long)+0x24>
c001f7b2:	ba 33 04 00 00       	mov    edx,0x433
c001f7b7:	29 c2                	sub    edx,eax
c001f7b9:	89 c8                	mov    eax,ecx
c001f7bb:	c1 e2 14             	shl    edx,0x14
c001f7be:	89 d9                	mov    ecx,ebx
c001f7c0:	89 f3                	mov    ebx,esi
c001f7c2:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7c8:	09 ca                	or     edx,ecx
c001f7ca:	84 db                	test   bl,bl
c001f7cc:	74 06                	je     c001f7d4 <Vm::fpuLongToFloat(long long)+0x53>
c001f7ce:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7d4:	5b                   	pop    ebx
c001f7d5:	5e                   	pop    esi
c001f7d6:	c3                   	ret    

c001f7d7 <Vm::fpuGet0()>:
c001f7d7:	31 c0                	xor    eax,eax
c001f7d9:	31 d2                	xor    edx,edx
c001f7db:	c3                   	ret    

c001f7dc <Vm::fpuGet1()>:
c001f7dc:	b8 01 00 00 00       	mov    eax,0x1
c001f7e1:	31 d2                	xor    edx,edx
c001f7e3:	c3                   	ret    

c001f7e4 <Vm::fpuGetPi()>:
c001f7e4:	b8 03 00 00 00       	mov    eax,0x3
c001f7e9:	31 d2                	xor    edx,edx
c001f7eb:	c3                   	ret    

c001f7ec <Vm::fpuGetLog2E()>:
c001f7ec:	83 ec 18             	sub    esp,0x18
c001f7ef:	68 c8 c7 02 c0       	push   0xc002c7c8
c001f7f4:	e8 0e ae ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001f7f9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7fe:	31 d2                	xor    edx,edx
c001f800:	83 c4 1c             	add    esp,0x1c
c001f803:	c3                   	ret    

c001f804 <Vm::fpuGetLogE2()>:
c001f804:	83 ec 18             	sub    esp,0x18
c001f807:	68 d4 c7 02 c0       	push   0xc002c7d4
c001f80c:	e8 f6 ad ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001f811:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f816:	31 d2                	xor    edx,edx
c001f818:	83 c4 1c             	add    esp,0x1c
c001f81b:	c3                   	ret    

c001f81c <Vm::fpuGetLog210()>:
c001f81c:	83 ec 18             	sub    esp,0x18
c001f81f:	68 e0 c7 02 c0       	push   0xc002c7e0
c001f824:	e8 de ad ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001f829:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f82e:	31 d2                	xor    edx,edx
c001f830:	83 c4 1c             	add    esp,0x1c
c001f833:	c3                   	ret    

c001f834 <Vm::fpuGetLog102()>:
c001f834:	83 ec 18             	sub    esp,0x18
c001f837:	68 ed c7 02 c0       	push   0xc002c7ed
c001f83c:	e8 c6 ad ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001f841:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f846:	31 d2                	xor    edx,edx
c001f848:	83 c4 1c             	add    esp,0x1c
c001f84b:	c3                   	ret    

c001f84c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f84c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f850:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f854:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f858:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f85c:	0f 92 c0             	setb   al
c001f85f:	c3                   	ret    

c001f860 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f860:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f868:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f86c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f870:	09 c2                	or     edx,eax
c001f872:	0f 94 c0             	sete   al
c001f875:	c3                   	ret    

c001f876 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f876:	57                   	push   edi
c001f877:	56                   	push   esi
c001f878:	53                   	push   ebx
c001f879:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f87d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f881:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f885:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f889:	57                   	push   edi
c001f88a:	56                   	push   esi
c001f88b:	53                   	push   ebx
c001f88c:	51                   	push   ecx
c001f88d:	e8 ce ff ff ff       	call   c001f860 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f892:	83 c4 10             	add    esp,0x10
c001f895:	88 c2                	mov    dl,al
c001f897:	31 c0                	xor    eax,eax
c001f899:	84 d2                	test   dl,dl
c001f89b:	75 0c                	jne    c001f8a9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f89d:	57                   	push   edi
c001f89e:	56                   	push   esi
c001f89f:	53                   	push   ebx
c001f8a0:	51                   	push   ecx
c001f8a1:	e8 a6 ff ff ff       	call   c001f84c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8a6:	83 c4 10             	add    esp,0x10
c001f8a9:	83 e0 01             	and    eax,0x1
c001f8ac:	5b                   	pop    ebx
c001f8ad:	88 c1                	mov    cl,al
c001f8af:	83 e2 01             	and    edx,0x1
c001f8b2:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f8b7:	c1 e2 06             	shl    edx,0x6
c001f8ba:	83 e0 ba             	and    eax,0xffffffba
c001f8bd:	5e                   	pop    esi
c001f8be:	09 c8                	or     eax,ecx
c001f8c0:	5f                   	pop    edi
c001f8c1:	09 d0                	or     eax,edx
c001f8c3:	a2 41 1a 03 c0       	mov    ds:0xc0031a41,al
c001f8c8:	c3                   	ret    

c001f8c9 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8d1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8d5:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8d9:	c3                   	ret    

c001f8da <Vm::fpuAbs(unsigned long long)>:
c001f8da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8e2:	c3                   	ret    

c001f8e3 <Vm::fpuChs(unsigned long long)>:
c001f8e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8eb:	f7 d8                	neg    eax
c001f8ed:	83 d2 00             	adc    edx,0x0
c001f8f0:	f7 da                	neg    edx
c001f8f2:	c3                   	ret    

c001f8f3 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f8f3:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f8f7:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f8fc:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f900:	eb c7                	jmp    c001f8c9 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f902 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f902:	53                   	push   ebx
c001f903:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f907:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f90b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f90f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f913:	0f af ca             	imul   ecx,edx
c001f916:	0f af d8             	imul   ebx,eax
c001f919:	f7 e2                	mul    edx
c001f91b:	01 d9                	add    ecx,ebx
c001f91d:	5b                   	pop    ebx
c001f91e:	01 ca                	add    edx,ecx
c001f920:	c3                   	ret    

c001f921 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f921:	83 ec 0c             	sub    esp,0xc
c001f924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f92c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f934:	e8 a3 70 00 00       	call   c00269dc <__udivdi3>
c001f939:	83 c4 1c             	add    esp,0x1c
c001f93c:	c3                   	ret    

c001f93d <Vm::fpuSquare(unsigned long long)>:
c001f93d:	50                   	push   eax
c001f93e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f942:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f946:	52                   	push   edx
c001f947:	50                   	push   eax
c001f948:	52                   	push   edx
c001f949:	50                   	push   eax
c001f94a:	e8 b3 ff ff ff       	call   c001f902 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f94f:	83 c4 14             	add    esp,0x14
c001f952:	c3                   	ret    

c001f953 <Vm::fpuGetReg(int)>:
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f95b:	76 10                	jbe    c001f96d <Vm::fpuGetReg(int)+0x1a>
c001f95d:	83 ec 0c             	sub    esp,0xc
c001f960:	68 fa c7 02 c0       	push   0xc002c7fa
c001f965:	e8 9d ac ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001f96a:	83 c4 10             	add    esp,0x10
c001f96d:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f972:	b9 08 00 00 00       	mov    ecx,0x8
c001f977:	c0 e8 03             	shr    al,0x3
c001f97a:	83 e0 07             	and    eax,0x7
c001f97d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f981:	99                   	cdq    
c001f982:	f7 f9                	idiv   ecx
c001f984:	8b 04 d5 44 1a 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce5bc]
c001f98b:	8b 14 d5 48 1a 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce5b8]
c001f992:	83 c4 0c             	add    esp,0xc
c001f995:	c3                   	ret    

c001f996 <Vm::fpuSetReg(int, unsigned long long)>:
c001f996:	57                   	push   edi
c001f997:	56                   	push   esi
c001f998:	52                   	push   edx
c001f999:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f99d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9a1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9a6:	76 10                	jbe    c001f9b8 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f9a8:	83 ec 0c             	sub    esp,0xc
c001f9ab:	68 0d c8 02 c0       	push   0xc002c80d
c001f9b0:	e8 52 ac ff ff       	call   c001a607 <Krnl::panic(char const*)>
c001f9b5:	83 c4 10             	add    esp,0x10
c001f9b8:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f9bd:	b9 08 00 00 00       	mov    ecx,0x8
c001f9c2:	c0 e8 03             	shr    al,0x3
c001f9c5:	83 e0 07             	and    eax,0x7
c001f9c8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9cc:	99                   	cdq    
c001f9cd:	f7 f9                	idiv   ecx
c001f9cf:	89 34 d5 44 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce5bc],esi
c001f9d6:	89 3c d5 48 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce5b8],edi
c001f9dd:	58                   	pop    eax
c001f9de:	5e                   	pop    esi
c001f9df:	5f                   	pop    edi
c001f9e0:	c3                   	ret    

c001f9e1 <Vm::fpuPush(unsigned long long)>:
c001f9e1:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f9e6:	c0 e8 03             	shr    al,0x3
c001f9e9:	83 e0 07             	and    eax,0x7
c001f9ec:	83 c0 07             	add    eax,0x7
c001f9ef:	88 c2                	mov    dl,al
c001f9f1:	83 e0 07             	and    eax,0x7
c001f9f4:	83 e2 07             	and    edx,0x7
c001f9f7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f9fe:	8a 15 41 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a41
c001fa04:	83 e2 c7             	and    edx,0xffffffc7
c001fa07:	09 ca                	or     edx,ecx
c001fa09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa0d:	88 15 41 1a 03 c0    	mov    BYTE PTR ds:0xc0031a41,dl
c001fa13:	89 0c c5 48 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce5b8],ecx
c001fa1a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa1e:	89 14 c5 44 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce5bc],edx
c001fa25:	a1 84 1a 03 c0       	mov    eax,ds:0xc0031a84
c001fa2a:	83 f8 08             	cmp    eax,0x8
c001fa2d:	75 08                	jne    c001fa37 <Vm::fpuPush(unsigned long long)+0x56>
c001fa2f:	80 0d 40 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a40,0x40
c001fa36:	c3                   	ret    
c001fa37:	40                   	inc    eax
c001fa38:	a3 84 1a 03 c0       	mov    ds:0xc0031a84,eax
c001fa3d:	c3                   	ret    

c001fa3e <Vm::fpuPop()>:
c001fa3e:	8a 0d 41 1a 03 c0    	mov    cl,BYTE PTR ds:0xc0031a41
c001fa44:	53                   	push   ebx
c001fa45:	c0 e9 03             	shr    cl,0x3
c001fa48:	8a 1d 41 1a 03 c0    	mov    bl,BYTE PTR ds:0xc0031a41
c001fa4e:	83 e1 07             	and    ecx,0x7
c001fa51:	83 e3 c7             	and    ebx,0xffffffc7
c001fa54:	8b 04 cd 44 1a 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce5bc]
c001fa5b:	8b 14 cd 48 1a 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce5b8]
c001fa62:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa69:	83 e1 38             	and    ecx,0x38
c001fa6c:	09 d9                	or     ecx,ebx
c001fa6e:	88 0d 41 1a 03 c0    	mov    BYTE PTR ds:0xc0031a41,cl
c001fa74:	8b 0d 84 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a84
c001fa7a:	85 c9                	test   ecx,ecx
c001fa7c:	74 09                	je     c001fa87 <Vm::fpuPop()+0x49>
c001fa7e:	49                   	dec    ecx
c001fa7f:	89 0d 84 1a 03 c0    	mov    DWORD PTR ds:0xc0031a84,ecx
c001fa85:	eb 07                	jmp    c001fa8e <Vm::fpuPop()+0x50>
c001fa87:	80 0d 40 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a40,0x40
c001fa8e:	5b                   	pop    ebx
c001fa8f:	c3                   	ret    

c001fa90 <Vm::x87Handler(regs*)>:
c001fa90:	55                   	push   ebp
c001fa91:	57                   	push   edi
c001fa92:	56                   	push   esi
c001fa93:	53                   	push   ebx
c001fa94:	83 ec 1c             	sub    esp,0x1c
c001fa97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa9b:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001faa0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001faa3:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001faab:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001faaf:	50                   	push   eax
c001fab0:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fab4:	50                   	push   eax
c001fab5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fab9:	50                   	push   eax
c001faba:	53                   	push   ebx
c001fabb:	e8 0e a2 ff ff       	call   c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fac0:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fac3:	83 c4 10             	add    esp,0x10
c001fac6:	89 c6                	mov    esi,eax
c001fac8:	80 fa d9             	cmp    dl,0xd9
c001facb:	0f 85 52 01 00 00    	jne    c001fc23 <Vm::x87Handler(regs*)+0x193>
c001fad1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad5:	8d 50 20             	lea    edx,[eax+0x20]
c001fad8:	80 fa 0e             	cmp    dl,0xe
c001fadb:	0f 87 86 00 00 00    	ja     c001fb67 <Vm::x87Handler(regs*)+0xd7>
c001fae1:	0f b6 d2             	movzx  edx,dl
c001fae4:	ff 24 95 20 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd37e0]
c001faeb:	e8 e7 fc ff ff       	call   c001f7d7 <Vm::fpuGet0()>
c001faf0:	eb 05                	jmp    c001faf7 <Vm::x87Handler(regs*)+0x67>
c001faf2:	e8 e5 fc ff ff       	call   c001f7dc <Vm::fpuGet1()>
c001faf7:	57                   	push   edi
c001faf8:	57                   	push   edi
c001faf9:	52                   	push   edx
c001fafa:	50                   	push   eax
c001fafb:	e8 e1 fe ff ff       	call   c001f9e1 <Vm::fpuPush(unsigned long long)>
c001fb00:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb04:	83 c4 10             	add    esp,0x10
c001fb07:	b0 01                	mov    al,0x1
c001fb09:	e9 e3 09 00 00       	jmp    c00204f1 <Vm::x87Handler(regs*)+0xa61>
c001fb0e:	83 ec 0c             	sub    esp,0xc
c001fb11:	6a 00                	push   0x0
c001fb13:	e8 3b fe ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fb18:	59                   	pop    ecx
c001fb19:	5e                   	pop    esi
c001fb1a:	52                   	push   edx
c001fb1b:	50                   	push   eax
c001fb1c:	e8 c2 fd ff ff       	call   c001f8e3 <Vm::fpuChs(unsigned long long)>
c001fb21:	eb 13                	jmp    c001fb36 <Vm::x87Handler(regs*)+0xa6>
c001fb23:	83 ec 0c             	sub    esp,0xc
c001fb26:	6a 00                	push   0x0
c001fb28:	e8 26 fe ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fb2d:	5f                   	pop    edi
c001fb2e:	5d                   	pop    ebp
c001fb2f:	52                   	push   edx
c001fb30:	50                   	push   eax
c001fb31:	e8 a4 fd ff ff       	call   c001f8da <Vm::fpuAbs(unsigned long long)>
c001fb36:	83 c4 0c             	add    esp,0xc
c001fb39:	52                   	push   edx
c001fb3a:	50                   	push   eax
c001fb3b:	6a 00                	push   0x0
c001fb3d:	e8 54 fe ff ff       	call   c001f996 <Vm::fpuSetReg(int, unsigned long long)>
c001fb42:	eb bc                	jmp    c001fb00 <Vm::x87Handler(regs*)+0x70>
c001fb44:	e8 d3 fc ff ff       	call   c001f81c <Vm::fpuGetLog210()>
c001fb49:	eb ac                	jmp    c001faf7 <Vm::x87Handler(regs*)+0x67>
c001fb4b:	e8 9c fc ff ff       	call   c001f7ec <Vm::fpuGetLog2E()>
c001fb50:	eb a5                	jmp    c001faf7 <Vm::x87Handler(regs*)+0x67>
c001fb52:	e8 8d fc ff ff       	call   c001f7e4 <Vm::fpuGetPi()>
c001fb57:	eb 9e                	jmp    c001faf7 <Vm::x87Handler(regs*)+0x67>
c001fb59:	e8 d6 fc ff ff       	call   c001f834 <Vm::fpuGetLog102()>
c001fb5e:	eb 97                	jmp    c001faf7 <Vm::x87Handler(regs*)+0x67>
c001fb60:	e8 9f fc ff ff       	call   c001f804 <Vm::fpuGetLogE2()>
c001fb65:	eb 90                	jmp    c001faf7 <Vm::x87Handler(regs*)+0x67>
c001fb67:	8d 50 40             	lea    edx,[eax+0x40]
c001fb6a:	80 fa 07             	cmp    dl,0x7
c001fb6d:	77 15                	ja     c001fb84 <Vm::x87Handler(regs*)+0xf4>
c001fb6f:	83 ec 0c             	sub    esp,0xc
c001fb72:	2d c0 00 00 00       	sub    eax,0xc0
c001fb77:	50                   	push   eax
c001fb78:	e8 d6 fd ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fb7d:	59                   	pop    ecx
c001fb7e:	5e                   	pop    esi
c001fb7f:	e9 75 ff ff ff       	jmp    c001faf9 <Vm::x87Handler(regs*)+0x69>
c001fb84:	8d 50 38             	lea    edx,[eax+0x38]
c001fb87:	80 fa 07             	cmp    dl,0x7
c001fb8a:	77 3c                	ja     c001fbc8 <Vm::x87Handler(regs*)+0x138>
c001fb8c:	83 ec 0c             	sub    esp,0xc
c001fb8f:	2d c8 00 00 00       	sub    eax,0xc8
c001fb94:	50                   	push   eax
c001fb95:	e8 b9 fd ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fb9a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fba1:	89 c6                	mov    esi,eax
c001fba3:	89 d7                	mov    edi,edx
c001fba5:	e8 a9 fd ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fbaa:	83 c4 0c             	add    esp,0xc
c001fbad:	52                   	push   edx
c001fbae:	50                   	push   eax
c001fbaf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbb3:	2d c8 00 00 00       	sub    eax,0xc8
c001fbb8:	50                   	push   eax
c001fbb9:	e8 d8 fd ff ff       	call   c001f996 <Vm::fpuSetReg(int, unsigned long long)>
c001fbbe:	83 c4 0c             	add    esp,0xc
c001fbc1:	57                   	push   edi
c001fbc2:	56                   	push   esi
c001fbc3:	e9 73 ff ff ff       	jmp    c001fb3b <Vm::x87Handler(regs*)+0xab>
c001fbc8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbcc:	84 d2                	test   dl,dl
c001fbce:	75 0f                	jne    c001fbdf <Vm::x87Handler(regs*)+0x14f>
c001fbd0:	83 ec 0c             	sub    esp,0xc
c001fbd3:	ff 36                	push   DWORD PTR [esi]
c001fbd5:	e8 c8 fa ff ff       	call   c001f6a2 <Vm::fpu32ToInternal(unsigned int)>
c001fbda:	e9 bf 00 00 00       	jmp    c001fc9e <Vm::x87Handler(regs*)+0x20e>
c001fbdf:	80 fa 03             	cmp    dl,0x3
c001fbe2:	75 13                	jne    c001fbf7 <Vm::x87Handler(regs*)+0x167>
c001fbe4:	e8 55 fe ff ff       	call   c001fa3e <Vm::fpuPop()>
c001fbe9:	55                   	push   ebp
c001fbea:	55                   	push   ebp
c001fbeb:	52                   	push   edx
c001fbec:	50                   	push   eax
c001fbed:	e8 4c fa ff ff       	call   c001f63e <Vm::fpuInternalTo32(unsigned long long)>
c001fbf2:	e9 88 00 00 00       	jmp    c001fc7f <Vm::x87Handler(regs*)+0x1ef>
c001fbf7:	80 fa 05             	cmp    dl,0x5
c001fbfa:	75 0e                	jne    c001fc0a <Vm::x87Handler(regs*)+0x17a>
c001fbfc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fbff:	66 a3 42 1a 03 c0    	mov    ds:0xc0031a42,ax
c001fc05:	e9 df 00 00 00       	jmp    c001fce9 <Vm::x87Handler(regs*)+0x259>
c001fc0a:	31 c0                	xor    eax,eax
c001fc0c:	80 fa 07             	cmp    dl,0x7
c001fc0f:	0f 85 dc 08 00 00    	jne    c00204f1 <Vm::x87Handler(regs*)+0xa61>
c001fc15:	66 a1 42 1a 03 c0    	mov    ax,ds:0xc0031a42
c001fc1b:	66 89 06             	mov    WORD PTR [esi],ax
c001fc1e:	e9 c6 00 00 00       	jmp    c001fce9 <Vm::x87Handler(regs*)+0x259>
c001fc23:	80 fa d8             	cmp    dl,0xd8
c001fc26:	0f 84 c9 00 00 00    	je     c001fcf5 <Vm::x87Handler(regs*)+0x265>
c001fc2c:	80 fa dc             	cmp    dl,0xdc
c001fc2f:	0f 84 0d 02 00 00    	je     c001fe42 <Vm::x87Handler(regs*)+0x3b2>
c001fc35:	80 fa de             	cmp    dl,0xde
c001fc38:	0f 84 cd 02 00 00    	je     c001ff0b <Vm::x87Handler(regs*)+0x47b>
c001fc3e:	80 fa dd             	cmp    dl,0xdd
c001fc41:	0f 84 5f 04 00 00    	je     c00200a6 <Vm::x87Handler(regs*)+0x616>
c001fc47:	80 fa da             	cmp    dl,0xda
c001fc4a:	0f 84 24 05 00 00    	je     c0020174 <Vm::x87Handler(regs*)+0x6e4>
c001fc50:	80 fa df             	cmp    dl,0xdf
c001fc53:	0f 84 68 05 00 00    	je     c00201c1 <Vm::x87Handler(regs*)+0x731>
c001fc59:	31 c0                	xor    eax,eax
c001fc5b:	80 fa db             	cmp    dl,0xdb
c001fc5e:	0f 85 8d 08 00 00    	jne    c00204f1 <Vm::x87Handler(regs*)+0xa61>
c001fc64:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc68:	80 fa 03             	cmp    dl,0x3
c001fc6b:	0f 85 70 06 00 00    	jne    c00202e1 <Vm::x87Handler(regs*)+0x851>
c001fc71:	e8 c8 fd ff ff       	call   c001fa3e <Vm::fpuPop()>
c001fc76:	55                   	push   ebp
c001fc77:	55                   	push   ebp
c001fc78:	52                   	push   edx
c001fc79:	50                   	push   eax
c001fc7a:	e8 71 fa ff ff       	call   c001f6f0 <Vm::fpuFloatToLong(unsigned long long)>
c001fc7f:	83 c4 10             	add    esp,0x10
c001fc82:	89 06                	mov    DWORD PTR [esi],eax
c001fc84:	eb 63                	jmp    c001fce9 <Vm::x87Handler(regs*)+0x259>
c001fc86:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc8a:	84 d2                	test   dl,dl
c001fc8c:	0f 85 e6 05 00 00    	jne    c0020278 <Vm::x87Handler(regs*)+0x7e8>
c001fc92:	57                   	push   edi
c001fc93:	57                   	push   edi
c001fc94:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc97:	ff 36                	push   DWORD PTR [esi]
c001fc99:	e8 49 fa ff ff       	call   c001f6e7 <Vm::fpu64ToInternal(unsigned long long)>
c001fc9e:	5e                   	pop    esi
c001fc9f:	5f                   	pop    edi
c001fca0:	52                   	push   edx
c001fca1:	50                   	push   eax
c001fca2:	e8 3a fd ff ff       	call   c001f9e1 <Vm::fpuPush(unsigned long long)>
c001fca7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcab:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcae:	e9 51 fe ff ff       	jmp    c001fb04 <Vm::x87Handler(regs*)+0x74>
c001fcb3:	80 fa 03             	cmp    dl,0x3
c001fcb6:	0f 85 d7 06 00 00    	jne    c0020393 <Vm::x87Handler(regs*)+0x903>
c001fcbc:	57                   	push   edi
c001fcbd:	57                   	push   edi
c001fcbe:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcc1:	ff 36                	push   DWORD PTR [esi]
c001fcc3:	e8 1f fa ff ff       	call   c001f6e7 <Vm::fpu64ToInternal(unsigned long long)>
c001fcc8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fccf:	89 c6                	mov    esi,eax
c001fcd1:	89 d7                	mov    edi,edx
c001fcd3:	e8 7b fc ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fcd8:	57                   	push   edi
c001fcd9:	56                   	push   esi
c001fcda:	52                   	push   edx
c001fcdb:	50                   	push   eax
c001fcdc:	e8 95 fb ff ff       	call   c001f876 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fce1:	83 c4 20             	add    esp,0x20
c001fce4:	e8 55 fd ff ff       	call   c001fa3e <Vm::fpuPop()>
c001fce9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fced:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcf0:	e9 12 fe ff ff       	jmp    c001fb07 <Vm::x87Handler(regs*)+0x77>
c001fcf5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcf9:	8d 50 40             	lea    edx,[eax+0x40]
c001fcfc:	80 fa 07             	cmp    dl,0x7
c001fcff:	77 29                	ja     c001fd2a <Vm::x87Handler(regs*)+0x29a>
c001fd01:	83 ec 0c             	sub    esp,0xc
c001fd04:	2d c0 00 00 00       	sub    eax,0xc0
c001fd09:	50                   	push   eax
c001fd0a:	e8 44 fc ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fd0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd16:	89 c6                	mov    esi,eax
c001fd18:	89 d7                	mov    edi,edx
c001fd1a:	e8 34 fc ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fd1f:	57                   	push   edi
c001fd20:	56                   	push   esi
c001fd21:	52                   	push   edx
c001fd22:	50                   	push   eax
c001fd23:	e8 a1 fb ff ff       	call   c001f8c9 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd28:	eb 2f                	jmp    c001fd59 <Vm::x87Handler(regs*)+0x2c9>
c001fd2a:	8d 50 38             	lea    edx,[eax+0x38]
c001fd2d:	80 fa 07             	cmp    dl,0x7
c001fd30:	77 2f                	ja     c001fd61 <Vm::x87Handler(regs*)+0x2d1>
c001fd32:	83 ec 0c             	sub    esp,0xc
c001fd35:	2d c8 00 00 00       	sub    eax,0xc8
c001fd3a:	50                   	push   eax
c001fd3b:	e8 13 fc ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fd40:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd47:	89 c6                	mov    esi,eax
c001fd49:	89 d7                	mov    edi,edx
c001fd4b:	e8 03 fc ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fd50:	57                   	push   edi
c001fd51:	56                   	push   esi
c001fd52:	52                   	push   edx
c001fd53:	50                   	push   eax
c001fd54:	e8 a9 fb ff ff       	call   c001f902 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd59:	83 c4 1c             	add    esp,0x1c
c001fd5c:	e9 d8 fd ff ff       	jmp    c001fb39 <Vm::x87Handler(regs*)+0xa9>
c001fd61:	8d 50 30             	lea    edx,[eax+0x30]
c001fd64:	80 fa 07             	cmp    dl,0x7
c001fd67:	77 0d                	ja     c001fd76 <Vm::x87Handler(regs*)+0x2e6>
c001fd69:	83 ec 0c             	sub    esp,0xc
c001fd6c:	2d d0 00 00 00       	sub    eax,0xd0
c001fd71:	e9 99 03 00 00       	jmp    c002010f <Vm::x87Handler(regs*)+0x67f>
c001fd76:	8d 50 28             	lea    edx,[eax+0x28]
c001fd79:	80 fa 07             	cmp    dl,0x7
c001fd7c:	77 0d                	ja     c001fd8b <Vm::x87Handler(regs*)+0x2fb>
c001fd7e:	83 ec 0c             	sub    esp,0xc
c001fd81:	2d d8 00 00 00       	sub    eax,0xd8
c001fd86:	e9 c0 03 00 00       	jmp    c002014b <Vm::x87Handler(regs*)+0x6bb>
c001fd8b:	8d 50 20             	lea    edx,[eax+0x20]
c001fd8e:	80 fa 07             	cmp    dl,0x7
c001fd91:	77 1b                	ja     c001fdae <Vm::x87Handler(regs*)+0x31e>
c001fd93:	83 ec 0c             	sub    esp,0xc
c001fd96:	2d e0 00 00 00       	sub    eax,0xe0
c001fd9b:	50                   	push   eax
c001fd9c:	e8 b2 fb ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fda1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fda8:	89 c6                	mov    esi,eax
c001fdaa:	89 d7                	mov    edi,edx
c001fdac:	eb 22                	jmp    c001fdd0 <Vm::x87Handler(regs*)+0x340>
c001fdae:	8d 50 18             	lea    edx,[eax+0x18]
c001fdb1:	80 fa 07             	cmp    dl,0x7
c001fdb4:	77 2d                	ja     c001fde3 <Vm::x87Handler(regs*)+0x353>
c001fdb6:	83 ec 0c             	sub    esp,0xc
c001fdb9:	6a 00                	push   0x0
c001fdbb:	e8 93 fb ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fdc0:	89 c6                	mov    esi,eax
c001fdc2:	89 d7                	mov    edi,edx
c001fdc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdc8:	2d e8 00 00 00       	sub    eax,0xe8
c001fdcd:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdd0:	e8 7e fb ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fdd5:	57                   	push   edi
c001fdd6:	56                   	push   esi
c001fdd7:	52                   	push   edx
c001fdd8:	50                   	push   eax
c001fdd9:	e8 15 fb ff ff       	call   c001f8f3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdde:	e9 76 ff ff ff       	jmp    c001fd59 <Vm::x87Handler(regs*)+0x2c9>
c001fde3:	8d 50 10             	lea    edx,[eax+0x10]
c001fde6:	80 fa 07             	cmp    dl,0x7
c001fde9:	77 1b                	ja     c001fe06 <Vm::x87Handler(regs*)+0x376>
c001fdeb:	83 ec 0c             	sub    esp,0xc
c001fdee:	2d f0 00 00 00       	sub    eax,0xf0
c001fdf3:	50                   	push   eax
c001fdf4:	e8 5a fb ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fdf9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe00:	89 c6                	mov    esi,eax
c001fe02:	89 d7                	mov    edi,edx
c001fe04:	eb 22                	jmp    c001fe28 <Vm::x87Handler(regs*)+0x398>
c001fe06:	3c f7                	cmp    al,0xf7
c001fe08:	0f 86 d1 03 00 00    	jbe    c00201df <Vm::x87Handler(regs*)+0x74f>
c001fe0e:	83 ec 0c             	sub    esp,0xc
c001fe11:	6a 00                	push   0x0
c001fe13:	e8 3b fb ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fe18:	89 c6                	mov    esi,eax
c001fe1a:	89 d7                	mov    edi,edx
c001fe1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe20:	2d f8 00 00 00       	sub    eax,0xf8
c001fe25:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe28:	e8 26 fb ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fe2d:	57                   	push   edi
c001fe2e:	56                   	push   esi
c001fe2f:	52                   	push   edx
c001fe30:	50                   	push   eax
c001fe31:	e8 eb fa ff ff       	call   c001f921 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe36:	83 c4 1c             	add    esp,0x1c
c001fe39:	52                   	push   edx
c001fe3a:	50                   	push   eax
c001fe3b:	6a 00                	push   0x0
c001fe3d:	e9 51 02 00 00       	jmp    c0020093 <Vm::x87Handler(regs*)+0x603>
c001fe42:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe46:	8d 50 40             	lea    edx,[eax+0x40]
c001fe49:	80 fa 07             	cmp    dl,0x7
c001fe4c:	77 37                	ja     c001fe85 <Vm::x87Handler(regs*)+0x3f5>
c001fe4e:	83 ec 0c             	sub    esp,0xc
c001fe51:	2d c0 00 00 00       	sub    eax,0xc0
c001fe56:	50                   	push   eax
c001fe57:	e8 f7 fa ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fe5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe63:	89 c6                	mov    esi,eax
c001fe65:	89 d7                	mov    edi,edx
c001fe67:	e8 e7 fa ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fe6c:	57                   	push   edi
c001fe6d:	56                   	push   esi
c001fe6e:	52                   	push   edx
c001fe6f:	50                   	push   eax
c001fe70:	e8 54 fa ff ff       	call   c001f8c9 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe75:	83 c4 1c             	add    esp,0x1c
c001fe78:	52                   	push   edx
c001fe79:	50                   	push   eax
c001fe7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe7e:	2d c0 00 00 00       	sub    eax,0xc0
c001fe83:	eb 3d                	jmp    c001fec2 <Vm::x87Handler(regs*)+0x432>
c001fe85:	8d 50 38             	lea    edx,[eax+0x38]
c001fe88:	80 fa 07             	cmp    dl,0x7
c001fe8b:	77 3b                	ja     c001fec8 <Vm::x87Handler(regs*)+0x438>
c001fe8d:	83 ec 0c             	sub    esp,0xc
c001fe90:	2d c8 00 00 00       	sub    eax,0xc8
c001fe95:	50                   	push   eax
c001fe96:	e8 b8 fa ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fe9b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fea2:	89 c6                	mov    esi,eax
c001fea4:	89 d7                	mov    edi,edx
c001fea6:	e8 a8 fa ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001feab:	57                   	push   edi
c001feac:	56                   	push   esi
c001fead:	52                   	push   edx
c001feae:	50                   	push   eax
c001feaf:	e8 4e fa ff ff       	call   c001f902 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001feb4:	83 c4 1c             	add    esp,0x1c
c001feb7:	52                   	push   edx
c001feb8:	50                   	push   eax
c001feb9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001febd:	2d c8 00 00 00       	sub    eax,0xc8
c001fec2:	50                   	push   eax
c001fec3:	e9 75 fc ff ff       	jmp    c001fb3d <Vm::x87Handler(regs*)+0xad>
c001fec8:	83 c0 18             	add    eax,0x18
c001fecb:	3c 07                	cmp    al,0x7
c001fecd:	0f 87 3b 04 00 00    	ja     c002030e <Vm::x87Handler(regs*)+0x87e>
c001fed3:	83 ec 0c             	sub    esp,0xc
c001fed6:	6a 00                	push   0x0
c001fed8:	e8 76 fa ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fedd:	89 c6                	mov    esi,eax
c001fedf:	89 d7                	mov    edi,edx
c001fee1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee5:	2d e8 00 00 00       	sub    eax,0xe8
c001feea:	89 04 24             	mov    DWORD PTR [esp],eax
c001feed:	e8 61 fa ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fef2:	57                   	push   edi
c001fef3:	56                   	push   esi
c001fef4:	52                   	push   edx
c001fef5:	50                   	push   eax
c001fef6:	e8 f8 f9 ff ff       	call   c001f8f3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fefb:	83 c4 1c             	add    esp,0x1c
c001fefe:	52                   	push   edx
c001feff:	50                   	push   eax
c001ff00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff04:	2d e8 00 00 00       	sub    eax,0xe8
c001ff09:	eb b7                	jmp    c001fec2 <Vm::x87Handler(regs*)+0x432>
c001ff0b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff0f:	8d 50 40             	lea    edx,[eax+0x40]
c001ff12:	80 fa 07             	cmp    dl,0x7
c001ff15:	77 3a                	ja     c001ff51 <Vm::x87Handler(regs*)+0x4c1>
c001ff17:	83 ec 0c             	sub    esp,0xc
c001ff1a:	2d c0 00 00 00       	sub    eax,0xc0
c001ff1f:	50                   	push   eax
c001ff20:	e8 2e fa ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001ff25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff2c:	89 c6                	mov    esi,eax
c001ff2e:	89 d7                	mov    edi,edx
c001ff30:	e8 1e fa ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001ff35:	57                   	push   edi
c001ff36:	56                   	push   esi
c001ff37:	52                   	push   edx
c001ff38:	50                   	push   eax
c001ff39:	e8 8b f9 ff ff       	call   c001f8c9 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff3e:	83 c4 1c             	add    esp,0x1c
c001ff41:	52                   	push   edx
c001ff42:	50                   	push   eax
c001ff43:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff47:	2d c0 00 00 00       	sub    eax,0xc0
c001ff4c:	e9 9e 01 00 00       	jmp    c00200ef <Vm::x87Handler(regs*)+0x65f>
c001ff51:	8d 50 20             	lea    edx,[eax+0x20]
c001ff54:	80 fa 07             	cmp    dl,0x7
c001ff57:	77 3a                	ja     c001ff93 <Vm::x87Handler(regs*)+0x503>
c001ff59:	83 ec 0c             	sub    esp,0xc
c001ff5c:	2d e0 00 00 00       	sub    eax,0xe0
c001ff61:	50                   	push   eax
c001ff62:	e8 ec f9 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001ff67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff6e:	89 c6                	mov    esi,eax
c001ff70:	89 d7                	mov    edi,edx
c001ff72:	e8 dc f9 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001ff77:	57                   	push   edi
c001ff78:	56                   	push   esi
c001ff79:	52                   	push   edx
c001ff7a:	50                   	push   eax
c001ff7b:	e8 73 f9 ff ff       	call   c001f8f3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff80:	83 c4 1c             	add    esp,0x1c
c001ff83:	52                   	push   edx
c001ff84:	50                   	push   eax
c001ff85:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff89:	2d e0 00 00 00       	sub    eax,0xe0
c001ff8e:	e9 5c 01 00 00       	jmp    c00200ef <Vm::x87Handler(regs*)+0x65f>
c001ff93:	8d 50 18             	lea    edx,[eax+0x18]
c001ff96:	80 fa 07             	cmp    dl,0x7
c001ff99:	77 3b                	ja     c001ffd6 <Vm::x87Handler(regs*)+0x546>
c001ff9b:	83 ec 0c             	sub    esp,0xc
c001ff9e:	6a 00                	push   0x0
c001ffa0:	e8 ae f9 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001ffa5:	89 c6                	mov    esi,eax
c001ffa7:	89 d7                	mov    edi,edx
c001ffa9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffad:	2d e8 00 00 00       	sub    eax,0xe8
c001ffb2:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffb5:	e8 99 f9 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001ffba:	57                   	push   edi
c001ffbb:	56                   	push   esi
c001ffbc:	52                   	push   edx
c001ffbd:	50                   	push   eax
c001ffbe:	e8 30 f9 ff ff       	call   c001f8f3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffc3:	83 c4 1c             	add    esp,0x1c
c001ffc6:	52                   	push   edx
c001ffc7:	50                   	push   eax
c001ffc8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffcc:	2d e8 00 00 00       	sub    eax,0xe8
c001ffd1:	e9 19 01 00 00       	jmp    c00200ef <Vm::x87Handler(regs*)+0x65f>
c001ffd6:	8d 50 38             	lea    edx,[eax+0x38]
c001ffd9:	80 fa 07             	cmp    dl,0x7
c001ffdc:	77 37                	ja     c0020015 <Vm::x87Handler(regs*)+0x585>
c001ffde:	83 ec 0c             	sub    esp,0xc
c001ffe1:	2d c8 00 00 00       	sub    eax,0xc8
c001ffe6:	50                   	push   eax
c001ffe7:	e8 67 f9 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001ffec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fff3:	89 c6                	mov    esi,eax
c001fff5:	89 d7                	mov    edi,edx
c001fff7:	e8 57 f9 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c001fffc:	57                   	push   edi
c001fffd:	56                   	push   esi
c001fffe:	52                   	push   edx
c001ffff:	50                   	push   eax
c0020000:	e8 fd f8 ff ff       	call   c001f902 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020005:	83 c4 1c             	add    esp,0x1c
c0020008:	52                   	push   edx
c0020009:	50                   	push   eax
c002000a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002000e:	2d c8 00 00 00       	sub    eax,0xc8
c0020013:	eb 7d                	jmp    c0020092 <Vm::x87Handler(regs*)+0x602>
c0020015:	3c f7                	cmp    al,0xf7
c0020017:	76 38                	jbe    c0020051 <Vm::x87Handler(regs*)+0x5c1>
c0020019:	83 ec 0c             	sub    esp,0xc
c002001c:	6a 00                	push   0x0
c002001e:	e8 30 f9 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020023:	89 c6                	mov    esi,eax
c0020025:	89 d7                	mov    edi,edx
c0020027:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002002b:	2d f8 00 00 00       	sub    eax,0xf8
c0020030:	89 04 24             	mov    DWORD PTR [esp],eax
c0020033:	e8 1b f9 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020038:	57                   	push   edi
c0020039:	56                   	push   esi
c002003a:	52                   	push   edx
c002003b:	50                   	push   eax
c002003c:	e8 e0 f8 ff ff       	call   c001f921 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020041:	83 c4 1c             	add    esp,0x1c
c0020044:	52                   	push   edx
c0020045:	50                   	push   eax
c0020046:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002004a:	2d f8 00 00 00       	sub    eax,0xf8
c002004f:	eb 41                	jmp    c0020092 <Vm::x87Handler(regs*)+0x602>
c0020051:	8d 50 10             	lea    edx,[eax+0x10]
c0020054:	80 fa 07             	cmp    dl,0x7
c0020057:	0f 87 5a 01 00 00    	ja     c00201b7 <Vm::x87Handler(regs*)+0x727>
c002005d:	83 ec 0c             	sub    esp,0xc
c0020060:	2d f0 00 00 00       	sub    eax,0xf0
c0020065:	50                   	push   eax
c0020066:	e8 e8 f8 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c002006b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020072:	89 c6                	mov    esi,eax
c0020074:	89 d7                	mov    edi,edx
c0020076:	e8 d8 f8 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c002007b:	57                   	push   edi
c002007c:	56                   	push   esi
c002007d:	52                   	push   edx
c002007e:	50                   	push   eax
c002007f:	e8 9d f8 ff ff       	call   c001f921 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020084:	83 c4 1c             	add    esp,0x1c
c0020087:	52                   	push   edx
c0020088:	50                   	push   eax
c0020089:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002008d:	2d f0 00 00 00       	sub    eax,0xf0
c0020092:	50                   	push   eax
c0020093:	e8 fe f8 ff ff       	call   c001f996 <Vm::fpuSetReg(int, unsigned long long)>
c0020098:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002009c:	e8 9d f9 ff ff       	call   c001fa3e <Vm::fpuPop()>
c00200a1:	e9 5e fa ff ff       	jmp    c001fb04 <Vm::x87Handler(regs*)+0x74>
c00200a6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200aa:	8d 50 30             	lea    edx,[eax+0x30]
c00200ad:	80 fa 07             	cmp    dl,0x7
c00200b0:	77 1d                	ja     c00200cf <Vm::x87Handler(regs*)+0x63f>
c00200b2:	83 ec 0c             	sub    esp,0xc
c00200b5:	6a 00                	push   0x0
c00200b7:	e8 97 f8 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c00200bc:	83 c4 0c             	add    esp,0xc
c00200bf:	52                   	push   edx
c00200c0:	50                   	push   eax
c00200c1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c5:	2d d0 00 00 00       	sub    eax,0xd0
c00200ca:	e9 f3 fd ff ff       	jmp    c001fec2 <Vm::x87Handler(regs*)+0x432>
c00200cf:	8d 50 28             	lea    edx,[eax+0x28]
c00200d2:	80 fa 07             	cmp    dl,0x7
c00200d5:	77 28                	ja     c00200ff <Vm::x87Handler(regs*)+0x66f>
c00200d7:	83 ec 0c             	sub    esp,0xc
c00200da:	6a 00                	push   0x0
c00200dc:	e8 72 f8 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c00200e1:	83 c4 0c             	add    esp,0xc
c00200e4:	52                   	push   edx
c00200e5:	50                   	push   eax
c00200e6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ea:	2d d8 00 00 00       	sub    eax,0xd8
c00200ef:	50                   	push   eax
c00200f0:	e8 a1 f8 ff ff       	call   c001f996 <Vm::fpuSetReg(int, unsigned long long)>
c00200f5:	e8 44 f9 ff ff       	call   c001fa3e <Vm::fpuPop()>
c00200fa:	e9 01 fa ff ff       	jmp    c001fb00 <Vm::x87Handler(regs*)+0x70>
c00200ff:	8d 50 20             	lea    edx,[eax+0x20]
c0020102:	80 fa 07             	cmp    dl,0x7
c0020105:	77 30                	ja     c0020137 <Vm::x87Handler(regs*)+0x6a7>
c0020107:	83 ec 0c             	sub    esp,0xc
c002010a:	2d e0 00 00 00       	sub    eax,0xe0
c002010f:	50                   	push   eax
c0020110:	e8 3e f8 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020115:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002011c:	89 c6                	mov    esi,eax
c002011e:	89 d7                	mov    edi,edx
c0020120:	e8 2e f8 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020125:	57                   	push   edi
c0020126:	56                   	push   esi
c0020127:	52                   	push   edx
c0020128:	50                   	push   eax
c0020129:	e8 48 f7 ff ff       	call   c001f876 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002012e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020132:	e9 54 02 00 00       	jmp    c002038b <Vm::x87Handler(regs*)+0x8fb>
c0020137:	8d 50 18             	lea    edx,[eax+0x18]
c002013a:	80 fa 07             	cmp    dl,0x7
c002013d:	0f 87 43 fb ff ff    	ja     c001fc86 <Vm::x87Handler(regs*)+0x1f6>
c0020143:	83 ec 0c             	sub    esp,0xc
c0020146:	2d e8 00 00 00       	sub    eax,0xe8
c002014b:	50                   	push   eax
c002014c:	e8 02 f8 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020151:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020158:	89 c6                	mov    esi,eax
c002015a:	89 d7                	mov    edi,edx
c002015c:	e8 f2 f7 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020161:	57                   	push   edi
c0020162:	56                   	push   esi
c0020163:	52                   	push   edx
c0020164:	50                   	push   eax
c0020165:	e8 0c f7 ff ff       	call   c001f876 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002016a:	83 c4 20             	add    esp,0x20
c002016d:	e8 cc f8 ff ff       	call   c001fa3e <Vm::fpuPop()>
c0020172:	eb 62                	jmp    c00201d6 <Vm::x87Handler(regs*)+0x746>
c0020174:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020178:	0f 85 0f 01 00 00    	jne    c002028d <Vm::x87Handler(regs*)+0x7fd>
c002017e:	83 ec 0c             	sub    esp,0xc
c0020181:	6a 01                	push   0x1
c0020183:	e8 cb f7 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020188:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002018f:	89 c6                	mov    esi,eax
c0020191:	89 d7                	mov    edi,edx
c0020193:	e8 bb f7 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020198:	57                   	push   edi
c0020199:	56                   	push   esi
c002019a:	52                   	push   edx
c002019b:	50                   	push   eax
c002019c:	e8 d5 f6 ff ff       	call   c001f876 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201a1:	83 c4 20             	add    esp,0x20
c00201a4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201a8:	e8 91 f8 ff ff       	call   c001fa3e <Vm::fpuPop()>
c00201ad:	e8 8c f8 ff ff       	call   c001fa3e <Vm::fpuPop()>
c00201b2:	e9 50 f9 ff ff       	jmp    c001fb07 <Vm::x87Handler(regs*)+0x77>
c00201b7:	3c d9                	cmp    al,0xd9
c00201b9:	0f 85 b5 02 00 00    	jne    c0020474 <Vm::x87Handler(regs*)+0x9e4>
c00201bf:	eb bd                	jmp    c002017e <Vm::x87Handler(regs*)+0x6ee>
c00201c1:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201c5:	0f 85 ea 02 00 00    	jne    c00204b5 <Vm::x87Handler(regs*)+0xa25>
c00201cb:	0f b7 05 40 1a 03 c0 	movzx  eax,WORD PTR ds:0xc0031a40
c00201d2:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201d6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201da:	e9 28 f9 ff ff       	jmp    c001fb07 <Vm::x87Handler(regs*)+0x77>
c00201df:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201e3:	84 d2                	test   dl,dl
c00201e5:	75 0f                	jne    c00201f6 <Vm::x87Handler(regs*)+0x766>
c00201e7:	83 ec 0c             	sub    esp,0xc
c00201ea:	ff 36                	push   DWORD PTR [esi]
c00201ec:	e8 b1 f4 ff ff       	call   c001f6a2 <Vm::fpu32ToInternal(unsigned int)>
c00201f1:	e9 2c 01 00 00       	jmp    c0020322 <Vm::x87Handler(regs*)+0x892>
c00201f6:	80 fa 01             	cmp    dl,0x1
c00201f9:	75 0f                	jne    c002020a <Vm::x87Handler(regs*)+0x77a>
c00201fb:	83 ec 0c             	sub    esp,0xc
c00201fe:	ff 36                	push   DWORD PTR [esi]
c0020200:	e8 9d f4 ff ff       	call   c001f6a2 <Vm::fpu32ToInternal(unsigned int)>
c0020205:	e9 81 02 00 00       	jmp    c002048b <Vm::x87Handler(regs*)+0x9fb>
c002020a:	80 fa 04             	cmp    dl,0x4
c002020d:	75 0f                	jne    c002021e <Vm::x87Handler(regs*)+0x78e>
c002020f:	83 ec 0c             	sub    esp,0xc
c0020212:	ff 36                	push   DWORD PTR [esi]
c0020214:	e8 89 f4 ff ff       	call   c001f6a2 <Vm::fpu32ToInternal(unsigned int)>
c0020219:	e9 86 01 00 00       	jmp    c00203a4 <Vm::x87Handler(regs*)+0x914>
c002021e:	80 fa 05             	cmp    dl,0x5
c0020221:	75 1b                	jne    c002023e <Vm::x87Handler(regs*)+0x7ae>
c0020223:	83 ec 0c             	sub    esp,0xc
c0020226:	6a 00                	push   0x0
c0020228:	e8 26 f7 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c002022d:	89 c7                	mov    edi,eax
c002022f:	89 d5                	mov    ebp,edx
c0020231:	58                   	pop    eax
c0020232:	ff 36                	push   DWORD PTR [esi]
c0020234:	e8 69 f4 ff ff       	call   c001f6a2 <Vm::fpu32ToInternal(unsigned int)>
c0020239:	e9 a3 01 00 00       	jmp    c00203e1 <Vm::x87Handler(regs*)+0x951>
c002023e:	80 fa 06             	cmp    dl,0x6
c0020241:	75 0f                	jne    c0020252 <Vm::x87Handler(regs*)+0x7c2>
c0020243:	83 ec 0c             	sub    esp,0xc
c0020246:	ff 36                	push   DWORD PTR [esi]
c0020248:	e8 55 f4 ff ff       	call   c001f6a2 <Vm::fpu32ToInternal(unsigned int)>
c002024d:	e9 ae 01 00 00       	jmp    c0020400 <Vm::x87Handler(regs*)+0x970>
c0020252:	31 c0                	xor    eax,eax
c0020254:	80 fa 07             	cmp    dl,0x7
c0020257:	0f 85 94 02 00 00    	jne    c00204f1 <Vm::x87Handler(regs*)+0xa61>
c002025d:	83 ec 0c             	sub    esp,0xc
c0020260:	6a 00                	push   0x0
c0020262:	e8 ec f6 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020267:	89 c7                	mov    edi,eax
c0020269:	89 d5                	mov    ebp,edx
c002026b:	58                   	pop    eax
c002026c:	ff 36                	push   DWORD PTR [esi]
c002026e:	e8 2f f4 ff ff       	call   c001f6a2 <Vm::fpu32ToInternal(unsigned int)>
c0020273:	e9 cb 01 00 00       	jmp    c0020443 <Vm::x87Handler(regs*)+0x9b3>
c0020278:	80 fa 03             	cmp    dl,0x3
c002027b:	0f 85 d3 01 00 00    	jne    c0020454 <Vm::x87Handler(regs*)+0x9c4>
c0020281:	e8 b8 f7 ff ff       	call   c001fa3e <Vm::fpuPop()>
c0020286:	51                   	push   ecx
c0020287:	51                   	push   ecx
c0020288:	e9 de 01 00 00       	jmp    c002046b <Vm::x87Handler(regs*)+0x9db>
c002028d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020291:	80 fa 01             	cmp    dl,0x1
c0020294:	75 09                	jne    c002029f <Vm::x87Handler(regs*)+0x80f>
c0020296:	57                   	push   edi
c0020297:	57                   	push   edi
c0020298:	8b 06                	mov    eax,DWORD PTR [esi]
c002029a:	e9 e3 01 00 00       	jmp    c0020482 <Vm::x87Handler(regs*)+0x9f2>
c002029f:	80 fa 04             	cmp    dl,0x4
c00202a2:	75 12                	jne    c00202b6 <Vm::x87Handler(regs*)+0x826>
c00202a4:	31 d2                	xor    edx,edx
c00202a6:	51                   	push   ecx
c00202a7:	51                   	push   ecx
c00202a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00202aa:	52                   	push   edx
c00202ab:	50                   	push   eax
c00202ac:	e8 d0 f4 ff ff       	call   c001f781 <Vm::fpuLongToFloat(long long)>
c00202b1:	e9 ee 00 00 00       	jmp    c00203a4 <Vm::x87Handler(regs*)+0x914>
c00202b6:	31 c0                	xor    eax,eax
c00202b8:	80 fa 07             	cmp    dl,0x7
c00202bb:	0f 85 30 02 00 00    	jne    c00204f1 <Vm::x87Handler(regs*)+0xa61>
c00202c1:	83 ec 0c             	sub    esp,0xc
c00202c4:	6a 00                	push   0x0
c00202c6:	e8 88 f6 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c00202cb:	89 c7                	mov    edi,eax
c00202cd:	89 d5                	mov    ebp,edx
c00202cf:	58                   	pop    eax
c00202d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00202d2:	5a                   	pop    edx
c00202d3:	31 d2                	xor    edx,edx
c00202d5:	52                   	push   edx
c00202d6:	50                   	push   eax
c00202d7:	e8 a5 f4 ff ff       	call   c001f781 <Vm::fpuLongToFloat(long long)>
c00202dc:	e9 62 01 00 00       	jmp    c0020443 <Vm::x87Handler(regs*)+0x9b3>
c00202e1:	84 d2                	test   dl,dl
c00202e3:	75 0d                	jne    c00202f2 <Vm::x87Handler(regs*)+0x862>
c00202e5:	31 d2                	xor    edx,edx
c00202e7:	55                   	push   ebp
c00202e8:	55                   	push   ebp
c00202e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00202eb:	52                   	push   edx
c00202ec:	50                   	push   eax
c00202ed:	e9 d3 01 00 00       	jmp    c00204c5 <Vm::x87Handler(regs*)+0xa35>
c00202f2:	31 c0                	xor    eax,eax
c00202f4:	80 fa 02             	cmp    dl,0x2
c00202f7:	0f 85 f4 01 00 00    	jne    c00204f1 <Vm::x87Handler(regs*)+0xa61>
c00202fd:	83 ec 0c             	sub    esp,0xc
c0020300:	6a 00                	push   0x0
c0020302:	e8 4c f6 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020307:	59                   	pop    ecx
c0020308:	5f                   	pop    edi
c0020309:	e9 6a f9 ff ff       	jmp    c001fc78 <Vm::x87Handler(regs*)+0x1e8>
c002030e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020312:	84 d2                	test   dl,dl
c0020314:	75 2a                	jne    c0020340 <Vm::x87Handler(regs*)+0x8b0>
c0020316:	50                   	push   eax
c0020317:	50                   	push   eax
c0020318:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002031b:	ff 36                	push   DWORD PTR [esi]
c002031d:	e8 c5 f3 ff ff       	call   c001f6e7 <Vm::fpu64ToInternal(unsigned long long)>
c0020322:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020329:	89 c6                	mov    esi,eax
c002032b:	89 d7                	mov    edi,edx
c002032d:	e8 21 f6 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020332:	57                   	push   edi
c0020333:	56                   	push   esi
c0020334:	52                   	push   edx
c0020335:	50                   	push   eax
c0020336:	e8 8e f5 ff ff       	call   c001f8c9 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002033b:	e9 64 01 00 00       	jmp    c00204a4 <Vm::x87Handler(regs*)+0xa14>
c0020340:	80 fa 01             	cmp    dl,0x1
c0020343:	75 11                	jne    c0020356 <Vm::x87Handler(regs*)+0x8c6>
c0020345:	50                   	push   eax
c0020346:	50                   	push   eax
c0020347:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002034a:	ff 36                	push   DWORD PTR [esi]
c002034c:	e8 96 f3 ff ff       	call   c001f6e7 <Vm::fpu64ToInternal(unsigned long long)>
c0020351:	e9 35 01 00 00       	jmp    c002048b <Vm::x87Handler(regs*)+0x9fb>
c0020356:	80 fa 02             	cmp    dl,0x2
c0020359:	0f 85 54 f9 ff ff    	jne    c001fcb3 <Vm::x87Handler(regs*)+0x223>
c002035f:	55                   	push   ebp
c0020360:	55                   	push   ebp
c0020361:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020364:	ff 36                	push   DWORD PTR [esi]
c0020366:	e8 7c f3 ff ff       	call   c001f6e7 <Vm::fpu64ToInternal(unsigned long long)>
c002036b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020372:	89 c6                	mov    esi,eax
c0020374:	89 d7                	mov    edi,edx
c0020376:	e8 d8 f5 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c002037b:	57                   	push   edi
c002037c:	56                   	push   esi
c002037d:	52                   	push   edx
c002037e:	50                   	push   eax
c002037f:	e8 f2 f4 ff ff       	call   c001f876 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020384:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020388:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002038b:	83 c4 20             	add    esp,0x20
c002038e:	e9 74 f7 ff ff       	jmp    c001fb07 <Vm::x87Handler(regs*)+0x77>
c0020393:	80 fa 04             	cmp    dl,0x4
c0020396:	75 2a                	jne    c00203c2 <Vm::x87Handler(regs*)+0x932>
c0020398:	51                   	push   ecx
c0020399:	51                   	push   ecx
c002039a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002039d:	ff 36                	push   DWORD PTR [esi]
c002039f:	e8 43 f3 ff ff       	call   c001f6e7 <Vm::fpu64ToInternal(unsigned long long)>
c00203a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ab:	89 c6                	mov    esi,eax
c00203ad:	89 d7                	mov    edi,edx
c00203af:	e8 9f f5 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c00203b4:	57                   	push   edi
c00203b5:	56                   	push   esi
c00203b6:	52                   	push   edx
c00203b7:	50                   	push   eax
c00203b8:	e8 36 f5 ff ff       	call   c001f8f3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203bd:	e9 e2 00 00 00       	jmp    c00204a4 <Vm::x87Handler(regs*)+0xa14>
c00203c2:	80 fa 05             	cmp    dl,0x5
c00203c5:	75 28                	jne    c00203ef <Vm::x87Handler(regs*)+0x95f>
c00203c7:	83 ec 0c             	sub    esp,0xc
c00203ca:	6a 00                	push   0x0
c00203cc:	e8 82 f5 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c00203d1:	89 c7                	mov    edi,eax
c00203d3:	89 d5                	mov    ebp,edx
c00203d5:	58                   	pop    eax
c00203d6:	5a                   	pop    edx
c00203d7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203da:	ff 36                	push   DWORD PTR [esi]
c00203dc:	e8 06 f3 ff ff       	call   c001f6e7 <Vm::fpu64ToInternal(unsigned long long)>
c00203e1:	83 c4 10             	add    esp,0x10
c00203e4:	55                   	push   ebp
c00203e5:	57                   	push   edi
c00203e6:	52                   	push   edx
c00203e7:	50                   	push   eax
c00203e8:	e8 06 f5 ff ff       	call   c001f8f3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203ed:	eb 60                	jmp    c002044f <Vm::x87Handler(regs*)+0x9bf>
c00203ef:	80 fa 06             	cmp    dl,0x6
c00203f2:	75 2a                	jne    c002041e <Vm::x87Handler(regs*)+0x98e>
c00203f4:	51                   	push   ecx
c00203f5:	51                   	push   ecx
c00203f6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203f9:	ff 36                	push   DWORD PTR [esi]
c00203fb:	e8 e7 f2 ff ff       	call   c001f6e7 <Vm::fpu64ToInternal(unsigned long long)>
c0020400:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020407:	89 c6                	mov    esi,eax
c0020409:	89 d7                	mov    edi,edx
c002040b:	e8 43 f5 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020410:	57                   	push   edi
c0020411:	56                   	push   esi
c0020412:	52                   	push   edx
c0020413:	50                   	push   eax
c0020414:	e8 08 f5 ff ff       	call   c001f921 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020419:	e9 86 00 00 00       	jmp    c00204a4 <Vm::x87Handler(regs*)+0xa14>
c002041e:	31 c0                	xor    eax,eax
c0020420:	80 fa 07             	cmp    dl,0x7
c0020423:	0f 85 c8 00 00 00    	jne    c00204f1 <Vm::x87Handler(regs*)+0xa61>
c0020429:	83 ec 0c             	sub    esp,0xc
c002042c:	6a 00                	push   0x0
c002042e:	e8 20 f5 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020433:	89 c7                	mov    edi,eax
c0020435:	89 d5                	mov    ebp,edx
c0020437:	58                   	pop    eax
c0020438:	5a                   	pop    edx
c0020439:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002043c:	ff 36                	push   DWORD PTR [esi]
c002043e:	e8 a4 f2 ff ff       	call   c001f6e7 <Vm::fpu64ToInternal(unsigned long long)>
c0020443:	83 c4 10             	add    esp,0x10
c0020446:	55                   	push   ebp
c0020447:	57                   	push   edi
c0020448:	52                   	push   edx
c0020449:	50                   	push   eax
c002044a:	e8 d2 f4 ff ff       	call   c001f921 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002044f:	83 c4 0c             	add    esp,0xc
c0020452:	eb 53                	jmp    c00204a7 <Vm::x87Handler(regs*)+0xa17>
c0020454:	31 c0                	xor    eax,eax
c0020456:	80 fa 02             	cmp    dl,0x2
c0020459:	0f 85 92 00 00 00    	jne    c00204f1 <Vm::x87Handler(regs*)+0xa61>
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	6a 00                	push   0x0
c0020464:	e8 ea f4 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c0020469:	59                   	pop    ecx
c002046a:	5f                   	pop    edi
c002046b:	52                   	push   edx
c002046c:	50                   	push   eax
c002046d:	e8 27 f2 ff ff       	call   c001f699 <Vm::fpuInternalTo64(unsigned long long)>
c0020472:	eb 70                	jmp    c00204e4 <Vm::x87Handler(regs*)+0xa54>
c0020474:	31 c0                	xor    eax,eax
c0020476:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002047b:	75 74                	jne    c00204f1 <Vm::x87Handler(regs*)+0xa61>
c002047d:	50                   	push   eax
c002047e:	50                   	push   eax
c002047f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020482:	31 d2                	xor    edx,edx
c0020484:	52                   	push   edx
c0020485:	50                   	push   eax
c0020486:	e8 f6 f2 ff ff       	call   c001f781 <Vm::fpuLongToFloat(long long)>
c002048b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020492:	89 c6                	mov    esi,eax
c0020494:	89 d7                	mov    edi,edx
c0020496:	e8 b8 f4 ff ff       	call   c001f953 <Vm::fpuGetReg(int)>
c002049b:	57                   	push   edi
c002049c:	56                   	push   esi
c002049d:	52                   	push   edx
c002049e:	50                   	push   eax
c002049f:	e8 5e f4 ff ff       	call   c001f902 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204a4:	83 c4 1c             	add    esp,0x1c
c00204a7:	52                   	push   edx
c00204a8:	50                   	push   eax
c00204a9:	6a 00                	push   0x0
c00204ab:	e8 e6 f4 ff ff       	call   c001f996 <Vm::fpuSetReg(int, unsigned long long)>
c00204b0:	e9 f2 f7 ff ff       	jmp    c001fca7 <Vm::x87Handler(regs*)+0x217>
c00204b5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204b9:	80 fa 05             	cmp    dl,0x5
c00204bc:	75 11                	jne    c00204cf <Vm::x87Handler(regs*)+0xa3f>
c00204be:	55                   	push   ebp
c00204bf:	55                   	push   ebp
c00204c0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204c3:	ff 36                	push   DWORD PTR [esi]
c00204c5:	e8 81 f2 ff ff       	call   c001f74b <Vm::fpuULongToFloat(unsigned long long)>
c00204ca:	e9 cf f7 ff ff       	jmp    c001fc9e <Vm::x87Handler(regs*)+0x20e>
c00204cf:	31 c0                	xor    eax,eax
c00204d1:	80 fa 07             	cmp    dl,0x7
c00204d4:	75 1b                	jne    c00204f1 <Vm::x87Handler(regs*)+0xa61>
c00204d6:	e8 63 f5 ff ff       	call   c001fa3e <Vm::fpuPop()>
c00204db:	51                   	push   ecx
c00204dc:	51                   	push   ecx
c00204dd:	52                   	push   edx
c00204de:	50                   	push   eax
c00204df:	e8 0c f2 ff ff       	call   c001f6f0 <Vm::fpuFloatToLong(unsigned long long)>
c00204e4:	83 c4 10             	add    esp,0x10
c00204e7:	89 06                	mov    DWORD PTR [esi],eax
c00204e9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00204ec:	e9 f8 f7 ff ff       	jmp    c001fce9 <Vm::x87Handler(regs*)+0x259>
c00204f1:	83 c4 1c             	add    esp,0x1c
c00204f4:	5b                   	pop    ebx
c00204f5:	5e                   	pop    esi
c00204f6:	5f                   	pop    edi
c00204f7:	5d                   	pop    ebp
c00204f8:	c3                   	ret    

c00204f9 <__static_initialization_and_destruction_0(int, int)>:
c00204f9:	83 ec 0c             	sub    esp,0xc
c00204fc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020501:	75 1a                	jne    c002051d <__static_initialization_and_destruction_0(int, int)+0x24>
c0020503:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002050b:	75 10                	jne    c002051d <__static_initialization_and_destruction_0(int, int)+0x24>
c002050d:	83 ec 0c             	sub    esp,0xc
c0020510:	68 40 1a 03 c0       	push   0xc0031a40
c0020515:	e8 16 88 00 00       	call   c0028d30 <Vm::_FPUState::_FPUState()>
c002051a:	83 c4 10             	add    esp,0x10
c002051d:	90                   	nop
c002051e:	83 c4 0c             	add    esp,0xc
c0020521:	c3                   	ret    

c0020522 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020522:	83 ec 0c             	sub    esp,0xc
c0020525:	83 ec 08             	sub    esp,0x8
c0020528:	68 ff ff 00 00       	push   0xffff
c002052d:	6a 01                	push   0x1
c002052f:	e8 c5 ff ff ff       	call   c00204f9 <__static_initialization_and_destruction_0(int, int)>
c0020534:	83 c4 10             	add    esp,0x10
c0020537:	83 c4 0c             	add    esp,0xc
c002053a:	c3                   	ret    
c002053b:	90                   	nop

c002053c <FAT::getName()>:
c002053c:	b8 5c c8 02 c0       	mov    eax,0xc002c85c
c0020541:	c3                   	ret    

c0020542 <FAT::tell(void*, unsigned long long*)>:
c0020542:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020547:	75 06                	jne    c002054f <FAT::tell(void*, unsigned long long*)+0xd>
c0020549:	b8 04 00 00 00       	mov    eax,0x4
c002054e:	c3                   	ret    
c002054f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020554:	75 06                	jne    c002055c <FAT::tell(void*, unsigned long long*)+0x1a>
c0020556:	b8 04 00 00 00       	mov    eax,0x4
c002055b:	c3                   	ret    
c002055c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020560:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020563:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020566:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002056a:	89 01                	mov    DWORD PTR [ecx],eax
c002056c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002056f:	b8 00 00 00 00       	mov    eax,0x0
c0020574:	c3                   	ret    
c0020575:	90                   	nop

c0020576 <FAT::stat(void*, unsigned long long*)>:
c0020576:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002057b:	75 06                	jne    c0020583 <FAT::stat(void*, unsigned long long*)+0xd>
c002057d:	b8 04 00 00 00       	mov    eax,0x4
c0020582:	c3                   	ret    
c0020583:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020588:	75 06                	jne    c0020590 <FAT::stat(void*, unsigned long long*)+0x1a>
c002058a:	b8 04 00 00 00       	mov    eax,0x4
c002058f:	c3                   	ret    
c0020590:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020594:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020597:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002059a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002059e:	89 01                	mov    DWORD PTR [ecx],eax
c00205a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205a3:	b8 00 00 00 00       	mov    eax,0x0
c00205a8:	c3                   	ret    
c00205a9:	90                   	nop

c00205aa <FAT::~FAT()>:
c00205aa:	83 ec 0c             	sub    esp,0xc
c00205ad:	ba e0 c8 02 c0       	mov    edx,0xc002c8e0
c00205b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b6:	89 10                	mov    DWORD PTR [eax],edx
c00205b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205bc:	83 ec 0c             	sub    esp,0xc
c00205bf:	50                   	push   eax
c00205c0:	e8 bd 2c ff ff       	call   c0013282 <Filesystem::~Filesystem()>
c00205c5:	83 c4 10             	add    esp,0x10
c00205c8:	90                   	nop
c00205c9:	83 c4 0c             	add    esp,0xc
c00205cc:	c3                   	ret    
c00205cd:	90                   	nop

c00205ce <FAT::~FAT()>:
c00205ce:	83 ec 0c             	sub    esp,0xc
c00205d1:	83 ec 0c             	sub    esp,0xc
c00205d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205d8:	e8 cd ff ff ff       	call   c00205aa <FAT::~FAT()>
c00205dd:	83 c4 10             	add    esp,0x10
c00205e0:	83 ec 08             	sub    esp,0x8
c00205e3:	6a 08                	push   0x8
c00205e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205e9:	e8 8c 28 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c00205ee:	83 c4 10             	add    esp,0x10
c00205f1:	83 c4 0c             	add    esp,0xc
c00205f4:	c3                   	ret    
c00205f5:	90                   	nop

c00205f6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00205f6:	83 ec 1c             	sub    esp,0x1c
c00205f9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020600:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020605:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020609:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0020610:	83 f8 ff             	cmp    eax,0xffffffff
c0020613:	75 34                	jne    c0020649 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020615:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020619:	88 c2                	mov    dl,al
c002061b:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020620:	01 d0                	add    eax,edx
c0020622:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020626:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c002062c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020630:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0020637:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c002063c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020640:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0020647:	eb 17                	jmp    c0020660 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020649:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002064d:	88 c2                	mov    dl,al
c002064f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020653:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c002065a:	01 d0                	add    eax,edx
c002065c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020660:	83 ec 04             	sub    esp,0x4
c0020663:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020667:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002066b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002066f:	50                   	push   eax
c0020670:	e8 c3 66 fe ff       	call   c0006d38 <f_getlabel>
c0020675:	83 c4 10             	add    esp,0x10
c0020678:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002067c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020681:	75 07                	jne    c002068a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020683:	b8 00 00 00 00       	mov    eax,0x0
c0020688:	eb 05                	jmp    c002068f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002068a:	b8 01 00 00 00       	mov    eax,0x1
c002068f:	83 c4 1c             	add    esp,0x1c
c0020692:	c3                   	ret    
c0020693:	90                   	nop

c0020694 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020694:	57                   	push   edi
c0020695:	83 ec 58             	sub    esp,0x58
c0020698:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206a0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00206a4:	b9 0f 00 00 00       	mov    ecx,0xf
c00206a9:	b8 00 00 00 00       	mov    eax,0x0
c00206ae:	fc                   	cld    
c00206af:	89 d7                	mov    edi,edx
c00206b1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206b3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206b7:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c00206be:	83 f8 ff             	cmp    eax,0xffffffff
c00206c1:	75 34                	jne    c00206f7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206c3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206c7:	88 c2                	mov    dl,al
c00206c9:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00206ce:	01 d0                	add    eax,edx
c00206d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206d4:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c00206da:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206de:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c00206e5:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00206ea:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00206ee:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c00206f5:	eb 17                	jmp    c002070e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00206f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206fb:	88 c2                	mov    dl,al
c00206fd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020701:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0020708:	01 d0                	add    eax,edx
c002070a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002070e:	83 ec 08             	sub    esp,0x8
c0020711:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020715:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020719:	50                   	push   eax
c002071a:	e8 55 02 fe ff       	call   c0000974 <strcat>
c002071f:	83 c4 10             	add    esp,0x10
c0020722:	83 ec 0c             	sub    esp,0xc
c0020725:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020729:	50                   	push   eax
c002072a:	e8 f7 67 fe ff       	call   c0006f26 <f_setlabel>
c002072f:	83 c4 10             	add    esp,0x10
c0020732:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020736:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002073b:	75 07                	jne    c0020744 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002073d:	b8 00 00 00 00       	mov    eax,0x0
c0020742:	eb 05                	jmp    c0020749 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020744:	b8 01 00 00 00       	mov    eax,0x1
c0020749:	83 c4 58             	add    esp,0x58
c002074c:	5f                   	pop    edi
c002074d:	c3                   	ret    

c002074e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002074e:	83 ec 2c             	sub    esp,0x2c
c0020751:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020759:	83 ec 08             	sub    esp,0x8
c002075c:	68 80 c8 02 c0       	push   0xc002c880
c0020761:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020765:	e8 56 01 fe ff       	call   c00008c0 <strcmp>
c002076a:	83 c4 10             	add    esp,0x10
c002076d:	85 c0                	test   eax,eax
c002076f:	0f 94 c0             	sete   al
c0020772:	84 c0                	test   al,al
c0020774:	74 0d                	je     c0020783 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020776:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002077e:	e9 a6 00 00 00       	jmp    c0020829 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020783:	83 ec 08             	sub    esp,0x8
c0020786:	68 72 c8 02 c0       	push   0xc002c872
c002078b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002078f:	e8 2c 01 fe ff       	call   c00008c0 <strcmp>
c0020794:	83 c4 10             	add    esp,0x10
c0020797:	85 c0                	test   eax,eax
c0020799:	0f 94 c0             	sete   al
c002079c:	84 c0                	test   al,al
c002079e:	74 0a                	je     c00207aa <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207a0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207a8:	eb 7f                	jmp    c0020829 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207aa:	83 ec 08             	sub    esp,0x8
c00207ad:	68 78 c8 02 c0       	push   0xc002c878
c00207b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207b6:	e8 05 01 fe ff       	call   c00008c0 <strcmp>
c00207bb:	83 c4 10             	add    esp,0x10
c00207be:	85 c0                	test   eax,eax
c00207c0:	0f 94 c0             	sete   al
c00207c3:	84 c0                	test   al,al
c00207c5:	74 0a                	je     c00207d1 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207c7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207cf:	eb 58                	jmp    c0020829 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207d1:	83 ec 08             	sub    esp,0x8
c00207d4:	68 8c 94 02 c0       	push   0xc002948c
c00207d9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207dd:	e8 de 00 fe ff       	call   c00008c0 <strcmp>
c00207e2:	83 c4 10             	add    esp,0x10
c00207e5:	85 c0                	test   eax,eax
c00207e7:	0f 94 c0             	sete   al
c00207ea:	84 c0                	test   al,al
c00207ec:	74 0a                	je     c00207f8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00207ee:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00207f6:	eb 31                	jmp    c0020829 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207f8:	83 ec 08             	sub    esp,0x8
c00207fb:	68 7e c8 02 c0       	push   0xc002c87e
c0020800:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020804:	e8 b7 00 fe ff       	call   c00008c0 <strcmp>
c0020809:	83 c4 10             	add    esp,0x10
c002080c:	85 c0                	test   eax,eax
c002080e:	0f 94 c0             	sete   al
c0020811:	84 c0                	test   al,al
c0020813:	74 0a                	je     c002081f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020815:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002081d:	eb 0a                	jmp    c0020829 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002081f:	b8 08 00 00 00       	mov    eax,0x8
c0020824:	e9 04 01 00 00       	jmp    c002092d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020829:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020830:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020835:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020839:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0020840:	83 f8 ff             	cmp    eax,0xffffffff
c0020843:	75 34                	jne    c0020879 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020845:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020849:	88 c2                	mov    dl,al
c002084b:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020850:	01 d0                	add    eax,edx
c0020852:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020856:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c002085c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020860:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0020867:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c002086c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020870:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0020877:	eb 17                	jmp    c0020890 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020879:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002087d:	88 c2                	mov    dl,al
c002087f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020883:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c002088a:	01 d0                	add    eax,edx
c002088c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020890:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020894:	88 04 24             	mov    BYTE PTR [esp],al
c0020897:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002089b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002089f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00208a7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00208ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00208b4:	83 ec 0c             	sub    esp,0xc
c00208b7:	68 00 20 00 00       	push   0x2000
c00208bc:	e8 82 ef fe ff       	call   c000f843 <malloc>
c00208c1:	83 c4 10             	add    esp,0x10
c00208c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208c8:	68 00 20 00 00       	push   0x2000
c00208cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208d5:	50                   	push   eax
c00208d6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208da:	50                   	push   eax
c00208db:	e8 91 6a fe ff       	call   c0007371 <f_mkfs>
c00208e0:	83 c4 10             	add    esp,0x10
c00208e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208e7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00208ec:	75 07                	jne    c00208f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00208ee:	b8 00 00 00 00       	mov    eax,0x0
c00208f3:	eb 38                	jmp    c002092d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208f5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00208fa:	75 17                	jne    c0020913 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00208fc:	83 ec 0c             	sub    esp,0xc
c00208ff:	68 b0 c8 02 c0       	push   0xc002c8b0
c0020904:	e8 51 26 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0020909:	83 c4 10             	add    esp,0x10
c002090c:	b8 09 00 00 00       	mov    eax,0x9
c0020911:	eb 1a                	jmp    c002092d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020913:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020917:	83 ec 08             	sub    esp,0x8
c002091a:	50                   	push   eax
c002091b:	68 84 c8 02 c0       	push   0xc002c884
c0020920:	e8 35 26 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0020925:	83 c4 10             	add    esp,0x10
c0020928:	b8 01 00 00 00       	mov    eax,0x1
c002092d:	83 c4 2c             	add    esp,0x2c
c0020930:	c3                   	ret    
c0020931:	90                   	nop

c0020932 <FAT::tryMount(LogicalDisk*, int)>:
c0020932:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020938:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c002093d:	83 f8 14             	cmp    eax,0x14
c0020940:	75 17                	jne    c0020959 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020942:	83 ec 0c             	sub    esp,0xc
c0020945:	68 96 c8 02 c0       	push   0xc002c896
c002094a:	e8 b8 9c ff ff       	call   c001a607 <Krnl::panic(char const*)>
c002094f:	83 c4 10             	add    esp,0x10
c0020952:	b0 00                	mov    al,0x0
c0020954:	e9 d7 01 00 00       	jmp    c0020b30 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020959:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020960:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020966:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002096c:	3d 00 02 00 00       	cmp    eax,0x200
c0020971:	74 07                	je     c002097a <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020973:	b0 00                	mov    al,0x0
c0020975:	e9 b6 01 00 00       	jmp    c0020b30 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002097a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020982:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020989:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0020990:	83 f8 ff             	cmp    eax,0xffffffff
c0020993:	74 07                	je     c002099c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020995:	b0 01                	mov    al,0x1
c0020997:	e9 94 01 00 00       	jmp    c0020b30 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002099c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00209a6:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00209ae:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00209b5:	88 c2                	mov    dl,al
c00209b7:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00209bc:	01 d0                	add    eax,edx
c00209be:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209c5:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c00209cb:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209d2:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c00209d9:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00209de:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209e5:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c00209ec:	83 ec 0c             	sub    esp,0xc
c00209ef:	68 54 02 00 00       	push   0x254
c00209f4:	e8 4a ee fe ff       	call   c000f843 <malloc>
c00209f9:	83 c4 10             	add    esp,0x10
c00209fc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a03:	83 ec 04             	sub    esp,0x4
c0020a06:	6a 00                	push   0x0
c0020a08:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a0f:	50                   	push   eax
c0020a10:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a17:	e8 13 45 fe ff       	call   c0004f2f <f_mount>
c0020a1c:	83 c4 10             	add    esp,0x10
c0020a1f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a26:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a2e:	74 19                	je     c0020a49 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a30:	83 ec 0c             	sub    esp,0xc
c0020a33:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a3a:	e8 24 ee fe ff       	call   c000f863 <rfree>
c0020a3f:	83 c4 10             	add    esp,0x10
c0020a42:	b0 00                	mov    al,0x0
c0020a44:	e9 e7 00 00 00       	jmp    c0020b30 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a49:	83 ec 04             	sub    esp,0x4
c0020a4c:	68 00 01 00 00       	push   0x100
c0020a51:	6a 00                	push   0x0
c0020a53:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a5a:	50                   	push   eax
c0020a5b:	e8 18 fd fd ff       	call   c0000778 <memset>
c0020a60:	83 c4 10             	add    esp,0x10
c0020a63:	83 ec 08             	sub    esp,0x8
c0020a66:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a6d:	50                   	push   eax
c0020a6e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a75:	50                   	push   eax
c0020a76:	e8 f9 fe fd ff       	call   c0000974 <strcat>
c0020a7b:	83 c4 10             	add    esp,0x10
c0020a7e:	83 ec 08             	sub    esp,0x8
c0020a81:	68 a4 c8 02 c0       	push   0xc002c8a4
c0020a86:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a8d:	50                   	push   eax
c0020a8e:	e8 e1 fe fd ff       	call   c0000974 <strcat>
c0020a93:	83 c4 10             	add    esp,0x10
c0020a96:	83 ec 04             	sub    esp,0x4
c0020a99:	6a 01                	push   0x1
c0020a9b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020aa2:	50                   	push   eax
c0020aa3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020aa7:	50                   	push   eax
c0020aa8:	e8 e4 44 fe ff       	call   c0004f91 <f_open>
c0020aad:	83 c4 10             	add    esp,0x10
c0020ab0:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ab7:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020abe:	85 c0                	test   eax,eax
c0020ac0:	74 0a                	je     c0020acc <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020ac2:	78 2d                	js     c0020af1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ac4:	83 e8 04             	sub    eax,0x4
c0020ac7:	83 f8 01             	cmp    eax,0x1
c0020aca:	77 25                	ja     c0020af1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020acc:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020ad4:	83 ec 0c             	sub    esp,0xc
c0020ad7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020adb:	50                   	push   eax
c0020adc:	e8 02 50 fe ff       	call   c0005ae3 <f_close>
c0020ae1:	83 c4 10             	add    esp,0x10
c0020ae4:	90                   	nop
c0020ae5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020aed:	74 3a                	je     c0020b29 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020aef:	eb 2d                	jmp    c0020b1e <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020af1:	83 ec 0c             	sub    esp,0xc
c0020af4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020afb:	e8 63 ed fe ff       	call   c000f863 <rfree>
c0020b00:	83 c4 10             	add    esp,0x10
c0020b03:	83 ec 04             	sub    esp,0x4
c0020b06:	6a 00                	push   0x0
c0020b08:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b0f:	50                   	push   eax
c0020b10:	6a 00                	push   0x0
c0020b12:	e8 18 44 fe ff       	call   c0004f2f <f_mount>
c0020b17:	83 c4 10             	add    esp,0x10
c0020b1a:	b0 00                	mov    al,0x0
c0020b1c:	eb 12                	jmp    c0020b30 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b1e:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020b23:	40                   	inc    eax
c0020b24:	a3 a0 1a 03 c0       	mov    ds:0xc0031aa0,eax
c0020b29:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b30:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b36:	c3                   	ret    
c0020b37:	90                   	nop

c0020b38 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b38:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b3e:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b46:	74 0a                	je     c0020b52 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b48:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b50:	75 0a                	jne    c0020b5c <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b52:	b8 04 00 00 00       	mov    eax,0x4
c0020b57:	e9 db 00 00 00       	jmp    c0020c37 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b5c:	83 ec 08             	sub    esp,0x8
c0020b5f:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b66:	50                   	push   eax
c0020b67:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b6e:	e8 7a 55 fe ff       	call   c00060ed <f_readdir>
c0020b73:	83 c4 10             	add    esp,0x10
c0020b76:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b7d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b83:	83 ec 0c             	sub    esp,0xc
c0020b86:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b8d:	83 c0 1a             	add    eax,0x1a
c0020b90:	50                   	push   eax
c0020b91:	e8 fe fb fd ff       	call   c0000794 <strlen>
c0020b96:	83 c4 10             	add    esp,0x10
c0020b99:	ba 00 00 00 00       	mov    edx,0x0
c0020b9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ba2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020ba6:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020bad:	0f b6 c0             	movzx  eax,al
c0020bb0:	83 e0 10             	and    eax,0x10
c0020bb3:	74 07                	je     c0020bbc <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020bb5:	b8 02 00 00 00       	mov    eax,0x2
c0020bba:	eb 05                	jmp    c0020bc1 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020bbc:	b8 01 00 00 00       	mov    eax,0x1
c0020bc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bc5:	83 ec 08             	sub    esp,0x8
c0020bc8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bcf:	83 c0 1a             	add    eax,0x1a
c0020bd2:	50                   	push   eax
c0020bd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bd7:	83 c0 10             	add    eax,0x10
c0020bda:	50                   	push   eax
c0020bdb:	e8 54 fc fd ff       	call   c0000834 <strcpy>
c0020be0:	83 c4 10             	add    esp,0x10
c0020be3:	83 ec 04             	sub    esp,0x4
c0020be6:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020bed:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bf1:	50                   	push   eax
c0020bf2:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bf9:	e8 46 fb fd ff       	call   c0000744 <memcpy>
c0020bfe:	83 c4 10             	add    esp,0x10
c0020c01:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c08:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c0e:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c15:	84 c0                	test   al,al
c0020c17:	75 07                	jne    c0020c20 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c19:	b8 07 00 00 00       	mov    eax,0x7
c0020c1e:	eb 17                	jmp    c0020c37 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c20:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c27:	85 c0                	test   eax,eax
c0020c29:	75 07                	jne    c0020c32 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c2b:	b8 00 00 00 00       	mov    eax,0x0
c0020c30:	eb 05                	jmp    c0020c37 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c32:	b8 01 00 00 00       	mov    eax,0x1
c0020c37:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c3d:	c3                   	ret    

c0020c3e <FAT::read(void*, unsigned long, void*, int*)>:
c0020c3e:	83 ec 1c             	sub    esp,0x1c
c0020c41:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c46:	74 07                	je     c0020c4f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c48:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c4d:	75 07                	jne    c0020c56 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c4f:	b8 04 00 00 00       	mov    eax,0x4
c0020c54:	eb 3d                	jmp    c0020c93 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c56:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c5a:	50                   	push   eax
c0020c5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c67:	e8 61 47 fe ff       	call   c00053cd <f_read>
c0020c6c:	83 c4 10             	add    esp,0x10
c0020c6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c77:	89 c2                	mov    edx,eax
c0020c79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c7d:	89 10                	mov    DWORD PTR [eax],edx
c0020c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c83:	85 c0                	test   eax,eax
c0020c85:	75 07                	jne    c0020c8e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c87:	b8 00 00 00 00       	mov    eax,0x0
c0020c8c:	eb 05                	jmp    c0020c93 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c8e:	b8 01 00 00 00       	mov    eax,0x1
c0020c93:	83 c4 1c             	add    esp,0x1c
c0020c96:	c3                   	ret    
c0020c97:	90                   	nop

c0020c98 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c98:	83 ec 1c             	sub    esp,0x1c
c0020c9b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ca0:	74 07                	je     c0020ca9 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020ca2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ca7:	75 07                	jne    c0020cb0 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020ca9:	b8 04 00 00 00       	mov    eax,0x4
c0020cae:	eb 3d                	jmp    c0020ced <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cb4:	50                   	push   eax
c0020cb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cbd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cc1:	e8 87 49 fe ff       	call   c000564d <f_write>
c0020cc6:	83 c4 10             	add    esp,0x10
c0020cc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ccd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cd1:	89 c2                	mov    edx,eax
c0020cd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cd7:	89 10                	mov    DWORD PTR [eax],edx
c0020cd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cdd:	85 c0                	test   eax,eax
c0020cdf:	75 07                	jne    c0020ce8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020ce1:	b8 00 00 00 00       	mov    eax,0x0
c0020ce6:	eb 05                	jmp    c0020ced <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020ce8:	b8 01 00 00 00       	mov    eax,0x1
c0020ced:	83 c4 1c             	add    esp,0x1c
c0020cf0:	c3                   	ret    
c0020cf1:	90                   	nop

c0020cf2 <FAT::close(void*)>:
c0020cf2:	83 ec 1c             	sub    esp,0x1c
c0020cf5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cfa:	75 07                	jne    c0020d03 <FAT::close(void*)+0x11>
c0020cfc:	b8 04 00 00 00       	mov    eax,0x4
c0020d01:	eb 36                	jmp    c0020d39 <FAT::close(void*)+0x47>
c0020d03:	83 ec 0c             	sub    esp,0xc
c0020d06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d0a:	e8 d4 4d fe ff       	call   c0005ae3 <f_close>
c0020d0f:	83 c4 10             	add    esp,0x10
c0020d12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d16:	83 ec 0c             	sub    esp,0xc
c0020d19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d1d:	e8 31 eb fe ff       	call   c000f853 <free>
c0020d22:	83 c4 10             	add    esp,0x10
c0020d25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d29:	85 c0                	test   eax,eax
c0020d2b:	75 07                	jne    c0020d34 <FAT::close(void*)+0x42>
c0020d2d:	b8 00 00 00 00       	mov    eax,0x0
c0020d32:	eb 05                	jmp    c0020d39 <FAT::close(void*)+0x47>
c0020d34:	b8 01 00 00 00       	mov    eax,0x1
c0020d39:	83 c4 1c             	add    esp,0x1c
c0020d3c:	c3                   	ret    
c0020d3d:	90                   	nop

c0020d3e <FAT::closeDir(void*)>:
c0020d3e:	83 ec 1c             	sub    esp,0x1c
c0020d41:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d46:	75 07                	jne    c0020d4f <FAT::closeDir(void*)+0x11>
c0020d48:	b8 04 00 00 00       	mov    eax,0x4
c0020d4d:	eb 36                	jmp    c0020d85 <FAT::closeDir(void*)+0x47>
c0020d4f:	83 ec 0c             	sub    esp,0xc
c0020d52:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d56:	e8 70 53 fe ff       	call   c00060cb <f_closedir>
c0020d5b:	83 c4 10             	add    esp,0x10
c0020d5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d62:	83 ec 0c             	sub    esp,0xc
c0020d65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d69:	e8 e5 ea fe ff       	call   c000f853 <free>
c0020d6e:	83 c4 10             	add    esp,0x10
c0020d71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d75:	85 c0                	test   eax,eax
c0020d77:	75 07                	jne    c0020d80 <FAT::closeDir(void*)+0x42>
c0020d79:	b8 00 00 00 00       	mov    eax,0x0
c0020d7e:	eb 05                	jmp    c0020d85 <FAT::closeDir(void*)+0x47>
c0020d80:	b8 01 00 00 00       	mov    eax,0x1
c0020d85:	83 c4 1c             	add    esp,0x1c
c0020d88:	c3                   	ret    
c0020d89:	90                   	nop

c0020d8a <FAT::seek(void*, unsigned long long)>:
c0020d8a:	83 ec 2c             	sub    esp,0x2c
c0020d8d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d9d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020da2:	75 07                	jne    c0020dab <FAT::seek(void*, unsigned long long)+0x21>
c0020da4:	b8 04 00 00 00       	mov    eax,0x4
c0020da9:	eb 2f                	jmp    c0020dda <FAT::seek(void*, unsigned long long)+0x50>
c0020dab:	83 ec 04             	sub    esp,0x4
c0020dae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020db2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020db6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020dba:	e8 53 4d fe ff       	call   c0005b12 <f_lseek>
c0020dbf:	83 c4 10             	add    esp,0x10
c0020dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020dca:	85 c0                	test   eax,eax
c0020dcc:	75 07                	jne    c0020dd5 <FAT::seek(void*, unsigned long long)+0x4b>
c0020dce:	b8 00 00 00 00       	mov    eax,0x0
c0020dd3:	eb 05                	jmp    c0020dda <FAT::seek(void*, unsigned long long)+0x50>
c0020dd5:	b8 01 00 00 00       	mov    eax,0x1
c0020dda:	83 c4 2c             	add    esp,0x2c
c0020ddd:	c3                   	ret    

c0020dde <fatWrapperReadDisk>:
c0020dde:	83 ec 1c             	sub    esp,0x1c
c0020de1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020de5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020de9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ded:	89 04 24             	mov    DWORD PTR [esp],eax
c0020df0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020df4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020df8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dfd:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020e04:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e08:	83 ec 0c             	sub    esp,0xc
c0020e0b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e0f:	52                   	push   edx
c0020e10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e18:	50                   	push   eax
c0020e19:	e8 58 59 ff ff       	call   c0016776 <LogicalDisk::read(unsigned long long, int, void*)>
c0020e1e:	83 c4 20             	add    esp,0x20
c0020e21:	83 c4 1c             	add    esp,0x1c
c0020e24:	c3                   	ret    

c0020e25 <fatWrapperWriteDisk>:
c0020e25:	83 ec 1c             	sub    esp,0x1c
c0020e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e2c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e34:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e3f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e44:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020e4b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e4f:	83 ec 0c             	sub    esp,0xc
c0020e52:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e56:	52                   	push   edx
c0020e57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e5f:	50                   	push   eax
c0020e60:	e8 7d 59 ff ff       	call   c00167e2 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e65:	83 c4 20             	add    esp,0x20
c0020e68:	83 c4 1c             	add    esp,0x1c
c0020e6b:	c3                   	ret    

c0020e6c <fatWrapperIoctl>:
c0020e6c:	53                   	push   ebx
c0020e6d:	83 ec 28             	sub    esp,0x28
c0020e70:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e74:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e78:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e7c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e80:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e85:	75 31                	jne    c0020eb8 <fatWrapperIoctl+0x4c>
c0020e87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e8f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e94:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020e9b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ea1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ea7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020eab:	66 89 02             	mov    WORD PTR [edx],ax
c0020eae:	b8 00 00 00 00       	mov    eax,0x0
c0020eb3:	e9 b2 00 00 00       	jmp    c0020f6a <fatWrapperIoctl+0xfe>
c0020eb8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ebd:	75 6a                	jne    c0020f29 <fatWrapperIoctl+0xbd>
c0020ebf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ec3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ec7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ecc:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020ed3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ed9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020edf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ee5:	89 c8                	mov    eax,ecx
c0020ee7:	89 da                	mov    edx,ebx
c0020ee9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020eed:	c1 e0 0a             	shl    eax,0xa
c0020ef0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020ef5:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0020efc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f02:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f08:	89 cb                	mov    ebx,ecx
c0020f0a:	c1 fb 1f             	sar    ebx,0x1f
c0020f0d:	53                   	push   ebx
c0020f0e:	51                   	push   ecx
c0020f0f:	52                   	push   edx
c0020f10:	50                   	push   eax
c0020f11:	e8 c6 5a 00 00       	call   c00269dc <__udivdi3>
c0020f16:	83 c4 10             	add    esp,0x10
c0020f19:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f1d:	89 01                	mov    DWORD PTR [ecx],eax
c0020f1f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f22:	b8 00 00 00 00       	mov    eax,0x0
c0020f27:	eb 41                	jmp    c0020f6a <fatWrapperIoctl+0xfe>
c0020f29:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f2e:	75 07                	jne    c0020f37 <fatWrapperIoctl+0xcb>
c0020f30:	b8 00 00 00 00       	mov    eax,0x0
c0020f35:	eb 33                	jmp    c0020f6a <fatWrapperIoctl+0xfe>
c0020f37:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f3c:	75 19                	jne    c0020f57 <fatWrapperIoctl+0xeb>
c0020f3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f4a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f50:	b8 00 00 00 00       	mov    eax,0x0
c0020f55:	eb 13                	jmp    c0020f6a <fatWrapperIoctl+0xfe>
c0020f57:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f5c:	75 07                	jne    c0020f65 <fatWrapperIoctl+0xf9>
c0020f5e:	b8 00 00 00 00       	mov    eax,0x0
c0020f63:	eb 05                	jmp    c0020f6a <fatWrapperIoctl+0xfe>
c0020f65:	b8 04 00 00 00       	mov    eax,0x4
c0020f6a:	83 c4 28             	add    esp,0x28
c0020f6d:	5b                   	pop    ebx
c0020f6e:	c3                   	ret    
c0020f6f:	90                   	nop

c0020f70 <FAT::FAT()>:
c0020f70:	83 ec 1c             	sub    esp,0x1c
c0020f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f77:	83 ec 0c             	sub    esp,0xc
c0020f7a:	50                   	push   eax
c0020f7b:	e8 de 22 ff ff       	call   c001325e <Filesystem::Filesystem()>
c0020f80:	83 c4 10             	add    esp,0x10
c0020f83:	ba e0 c8 02 c0       	mov    edx,0xc002c8e0
c0020f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f8c:	89 10                	mov    DWORD PTR [eax],edx
c0020f8e:	c7 05 a0 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031aa0,0x0
c0020f98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fa0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fa5:	7f 15                	jg     c0020fbc <FAT::FAT()+0x4c>
c0020fa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fab:	c7 04 85 c0 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce540],0xffffffff
c0020fb6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fba:	eb e4                	jmp    c0020fa0 <FAT::FAT()+0x30>
c0020fbc:	90                   	nop
c0020fbd:	83 c4 1c             	add    esp,0x1c
c0020fc0:	c3                   	ret    
c0020fc1:	90                   	nop

c0020fc2 <FAT::fixFilepath(char*)>:
c0020fc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fc6:	8a 00                	mov    al,BYTE PTR [eax]
c0020fc8:	3c 40                	cmp    al,0x40
c0020fca:	7e 2c                	jle    c0020ff8 <FAT::fixFilepath(char*)+0x36>
c0020fcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd0:	8a 00                	mov    al,BYTE PTR [eax]
c0020fd2:	83 e8 41             	sub    eax,0x41
c0020fd5:	88 c2                	mov    dl,al
c0020fd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fdb:	88 10                	mov    BYTE PTR [eax],dl
c0020fdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fe1:	8a 00                	mov    al,BYTE PTR [eax]
c0020fe3:	0f be c0             	movsx  eax,al
c0020fe6:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0020fed:	83 c0 30             	add    eax,0x30
c0020ff0:	88 c2                	mov    dl,al
c0020ff2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ff6:	88 10                	mov    BYTE PTR [eax],dl
c0020ff8:	90                   	nop
c0020ff9:	c3                   	ret    

c0020ffa <FAT::open(char const*, void**, FileOpenMode)>:
c0020ffa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021000:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021008:	74 0a                	je     c0021014 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002100a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021012:	75 0a                	jne    c002101e <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021014:	b8 04 00 00 00       	mov    eax,0x4
c0021019:	e9 fd 00 00 00       	jmp    c002111b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002101e:	83 ec 08             	sub    esp,0x8
c0021021:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021028:	8d 44 24 14          	lea    eax,[esp+0x14]
c002102c:	50                   	push   eax
c002102d:	e8 02 f8 fd ff       	call   c0000834 <strcpy>
c0021032:	83 c4 10             	add    esp,0x10
c0021035:	83 ec 08             	sub    esp,0x8
c0021038:	8d 44 24 10          	lea    eax,[esp+0x10]
c002103c:	50                   	push   eax
c002103d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021044:	e8 79 ff ff ff       	call   c0020fc2 <FAT::fixFilepath(char*)>
c0021049:	83 c4 10             	add    esp,0x10
c002104c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021054:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002105b:	83 e0 01             	and    eax,0x1
c002105e:	74 08                	je     c0021068 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021060:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021068:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002106f:	83 e0 04             	and    eax,0x4
c0021072:	74 10                	je     c0021084 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021074:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002107c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021084:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002108b:	83 e0 02             	and    eax,0x2
c002108e:	74 08                	je     c0021098 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021090:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021098:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002109f:	83 e0 08             	and    eax,0x8
c00210a2:	74 08                	je     c00210ac <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210a4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210b3:	83 e0 10             	and    eax,0x10
c00210b6:	74 08                	je     c00210c0 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210b8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210c0:	83 ec 0c             	sub    esp,0xc
c00210c3:	68 50 02 00 00       	push   0x250
c00210c8:	e8 76 e7 fe ff       	call   c000f843 <malloc>
c00210cd:	83 c4 10             	add    esp,0x10
c00210d0:	89 c2                	mov    edx,eax
c00210d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210d9:	89 10                	mov    DWORD PTR [eax],edx
c00210db:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210e3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00210ec:	83 ec 04             	sub    esp,0x4
c00210ef:	52                   	push   edx
c00210f0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210f4:	52                   	push   edx
c00210f5:	50                   	push   eax
c00210f6:	e8 96 3e fe ff       	call   c0004f91 <f_open>
c00210fb:	83 c4 10             	add    esp,0x10
c00210fe:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021105:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002110d:	74 07                	je     c0021116 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002110f:	b8 01 00 00 00       	mov    eax,0x1
c0021114:	eb 05                	jmp    c002111b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021116:	b8 00 00 00 00       	mov    eax,0x0
c002111b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021121:	c3                   	ret    

c0021122 <FAT::openDir(char const*, void**)>:
c0021122:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021128:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021130:	74 0a                	je     c002113c <FAT::openDir(char const*, void**)+0x1a>
c0021132:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002113a:	75 07                	jne    c0021143 <FAT::openDir(char const*, void**)+0x21>
c002113c:	b8 04 00 00 00       	mov    eax,0x4
c0021141:	eb 7d                	jmp    c00211c0 <FAT::openDir(char const*, void**)+0x9e>
c0021143:	83 ec 08             	sub    esp,0x8
c0021146:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002114d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021151:	50                   	push   eax
c0021152:	e8 dd f6 fd ff       	call   c0000834 <strcpy>
c0021157:	83 c4 10             	add    esp,0x10
c002115a:	83 ec 08             	sub    esp,0x8
c002115d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021161:	50                   	push   eax
c0021162:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021169:	e8 54 fe ff ff       	call   c0020fc2 <FAT::fixFilepath(char*)>
c002116e:	83 c4 10             	add    esp,0x10
c0021171:	83 ec 0c             	sub    esp,0xc
c0021174:	6a 4c                	push   0x4c
c0021176:	e8 c8 e6 fe ff       	call   c000f843 <malloc>
c002117b:	83 c4 10             	add    esp,0x10
c002117e:	89 c2                	mov    edx,eax
c0021180:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021187:	89 10                	mov    DWORD PTR [eax],edx
c0021189:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021190:	8b 00                	mov    eax,DWORD PTR [eax]
c0021192:	83 ec 08             	sub    esp,0x8
c0021195:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021199:	52                   	push   edx
c002119a:	50                   	push   eax
c002119b:	e8 29 4e fe ff       	call   c0005fc9 <f_opendir>
c00211a0:	83 c4 10             	add    esp,0x10
c00211a3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211aa:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211b2:	74 07                	je     c00211bb <FAT::openDir(char const*, void**)+0x99>
c00211b4:	b8 01 00 00 00       	mov    eax,0x1
c00211b9:	eb 05                	jmp    c00211c0 <FAT::openDir(char const*, void**)+0x9e>
c00211bb:	b8 00 00 00 00       	mov    eax,0x0
c00211c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211c6:	c3                   	ret    
c00211c7:	90                   	nop

c00211c8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211ce:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211d6:	75 0a                	jne    c00211e2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211d8:	b8 04 00 00 00       	mov    eax,0x4
c00211dd:	e9 c9 00 00 00       	jmp    c00212ab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211e2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211ea:	75 0a                	jne    c00211f6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211ec:	b8 04 00 00 00       	mov    eax,0x4
c00211f1:	e9 b5 00 00 00       	jmp    c00212ab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211f6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211fe:	75 0a                	jne    c002120a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021200:	b8 04 00 00 00       	mov    eax,0x4
c0021205:	e9 a1 00 00 00       	jmp    c00212ab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002120a:	83 ec 08             	sub    esp,0x8
c002120d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021214:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002121b:	50                   	push   eax
c002121c:	e8 13 f6 fd ff       	call   c0000834 <strcpy>
c0021221:	83 c4 10             	add    esp,0x10
c0021224:	83 ec 08             	sub    esp,0x8
c0021227:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002122e:	50                   	push   eax
c002122f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021236:	e8 87 fd ff ff       	call   c0020fc2 <FAT::fixFilepath(char*)>
c002123b:	83 c4 10             	add    esp,0x10
c002123e:	83 ec 08             	sub    esp,0x8
c0021241:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021245:	50                   	push   eax
c0021246:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002124d:	50                   	push   eax
c002124e:	e8 35 4f fe ff       	call   c0006188 <f_stat>
c0021253:	83 c4 10             	add    esp,0x10
c0021256:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002125d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021264:	85 c0                	test   eax,eax
c0021266:	74 07                	je     c002126f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021268:	83 f8 04             	cmp    eax,0x4
c002126b:	74 32                	je     c002129f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002126d:	eb 37                	jmp    c00212a6 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002126f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021273:	0f b6 c0             	movzx  eax,al
c0021276:	83 e0 10             	and    eax,0x10
c0021279:	0f 95 c2             	setne  dl
c002127c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021283:	88 10                	mov    BYTE PTR [eax],dl
c0021285:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021288:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002128c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021293:	89 01                	mov    DWORD PTR [ecx],eax
c0021295:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021298:	b8 00 00 00 00       	mov    eax,0x0
c002129d:	eb 0c                	jmp    c00212ab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002129f:	b8 02 00 00 00       	mov    eax,0x2
c00212a4:	eb 05                	jmp    c00212ab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212a6:	b8 01 00 00 00       	mov    eax,0x1
c00212ab:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212b1:	c3                   	ret    

c00212b2 <FAT::unlink(char const*)>:
c00212b2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212b8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212c0:	75 07                	jne    c00212c9 <FAT::unlink(char const*)+0x17>
c00212c2:	b8 04 00 00 00       	mov    eax,0x4
c00212c7:	eb 5c                	jmp    c0021325 <FAT::unlink(char const*)+0x73>
c00212c9:	83 ec 08             	sub    esp,0x8
c00212cc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212d7:	50                   	push   eax
c00212d8:	e8 57 f5 fd ff       	call   c0000834 <strcpy>
c00212dd:	83 c4 10             	add    esp,0x10
c00212e0:	83 ec 08             	sub    esp,0x8
c00212e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212e7:	50                   	push   eax
c00212e8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212ef:	e8 ce fc ff ff       	call   c0020fc2 <FAT::fixFilepath(char*)>
c00212f4:	83 c4 10             	add    esp,0x10
c00212f7:	83 ec 0c             	sub    esp,0xc
c00212fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212fe:	50                   	push   eax
c00212ff:	e8 d6 51 fe ff       	call   c00064da <f_unlink>
c0021304:	83 c4 10             	add    esp,0x10
c0021307:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002130e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021315:	85 c0                	test   eax,eax
c0021317:	75 07                	jne    c0021320 <FAT::unlink(char const*)+0x6e>
c0021319:	b8 00 00 00 00       	mov    eax,0x0
c002131e:	eb 05                	jmp    c0021325 <FAT::unlink(char const*)+0x73>
c0021320:	b8 01 00 00 00       	mov    eax,0x1
c0021325:	81 c4 1c 01 00 00    	add    esp,0x11c
c002132b:	c3                   	ret    

c002132c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002132c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021332:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021339:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021340:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021344:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021348:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021350:	75 0a                	jne    c002135c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021352:	b8 04 00 00 00       	mov    eax,0x4
c0021357:	e9 1c 01 00 00       	jmp    c0021478 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002135c:	83 ec 08             	sub    esp,0x8
c002135f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021366:	8d 44 24 24          	lea    eax,[esp+0x24]
c002136a:	50                   	push   eax
c002136b:	e8 c4 f4 fd ff       	call   c0000834 <strcpy>
c0021370:	83 c4 10             	add    esp,0x10
c0021373:	83 ec 08             	sub    esp,0x8
c0021376:	8d 44 24 20          	lea    eax,[esp+0x20]
c002137a:	50                   	push   eax
c002137b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021382:	e8 3b fc ff ff       	call   c0020fc2 <FAT::fixFilepath(char*)>
c0021387:	83 c4 10             	add    esp,0x10
c002138a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021392:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002139a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002139f:	83 e0 01             	and    eax,0x1
c00213a2:	74 08                	je     c00213ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213a4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213b1:	83 e0 02             	and    eax,0x2
c00213b4:	74 08                	je     c00213be <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213b6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213c3:	83 e0 04             	and    eax,0x4
c00213c6:	74 08                	je     c00213d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213c8:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213d5:	83 e0 08             	and    eax,0x8
c00213d8:	74 08                	je     c00213e2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213da:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213e2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213e7:	83 e0 01             	and    eax,0x1
c00213ea:	74 08                	je     c00213f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213ec:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213f9:	83 e0 02             	and    eax,0x2
c00213fc:	74 08                	je     c0021406 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213fe:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021406:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002140b:	83 e0 04             	and    eax,0x4
c002140e:	74 08                	je     c0021418 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021410:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021418:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002141d:	83 e0 08             	and    eax,0x8
c0021420:	74 08                	je     c002142a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021422:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002142a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021431:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021438:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021440:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021448:	83 ec 04             	sub    esp,0x4
c002144b:	52                   	push   edx
c002144c:	50                   	push   eax
c002144d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021451:	50                   	push   eax
c0021452:	e8 25 57 fe ff       	call   c0006b7c <f_chmod>
c0021457:	83 c4 10             	add    esp,0x10
c002145a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021461:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021468:	85 c0                	test   eax,eax
c002146a:	75 07                	jne    c0021473 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002146c:	b8 00 00 00 00       	mov    eax,0x0
c0021471:	eb 05                	jmp    c0021478 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021473:	b8 01 00 00 00       	mov    eax,0x1
c0021478:	81 c4 2c 01 00 00    	add    esp,0x12c
c002147e:	c3                   	ret    
c002147f:	90                   	nop

c0021480 <FAT::rename(char const*, char const*)>:
c0021480:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021486:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002148e:	74 0a                	je     c002149a <FAT::rename(char const*, char const*)+0x1a>
c0021490:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021498:	75 0a                	jne    c00214a4 <FAT::rename(char const*, char const*)+0x24>
c002149a:	b8 04 00 00 00       	mov    eax,0x4
c002149f:	e9 98 00 00 00       	jmp    c002153c <FAT::rename(char const*, char const*)+0xbc>
c00214a4:	83 ec 08             	sub    esp,0x8
c00214a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214ae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214b5:	50                   	push   eax
c00214b6:	e8 79 f3 fd ff       	call   c0000834 <strcpy>
c00214bb:	83 c4 10             	add    esp,0x10
c00214be:	83 ec 08             	sub    esp,0x8
c00214c1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214c8:	50                   	push   eax
c00214c9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214d0:	e8 ed fa ff ff       	call   c0020fc2 <FAT::fixFilepath(char*)>
c00214d5:	83 c4 10             	add    esp,0x10
c00214d8:	83 ec 08             	sub    esp,0x8
c00214db:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214e6:	50                   	push   eax
c00214e7:	e8 48 f3 fd ff       	call   c0000834 <strcpy>
c00214ec:	83 c4 10             	add    esp,0x10
c00214ef:	83 ec 08             	sub    esp,0x8
c00214f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214f6:	50                   	push   eax
c00214f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214fe:	e8 bf fa ff ff       	call   c0020fc2 <FAT::fixFilepath(char*)>
c0021503:	83 c4 10             	add    esp,0x10
c0021506:	83 ec 08             	sub    esp,0x8
c0021509:	8d 44 24 14          	lea    eax,[esp+0x14]
c002150d:	50                   	push   eax
c002150e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021515:	50                   	push   eax
c0021516:	e8 6e 53 fe ff       	call   c0006889 <f_rename>
c002151b:	83 c4 10             	add    esp,0x10
c002151e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021525:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002152c:	85 c0                	test   eax,eax
c002152e:	75 07                	jne    c0021537 <FAT::rename(char const*, char const*)+0xb7>
c0021530:	b8 00 00 00 00       	mov    eax,0x0
c0021535:	eb 05                	jmp    c002153c <FAT::rename(char const*, char const*)+0xbc>
c0021537:	b8 01 00 00 00       	mov    eax,0x1
c002153c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021542:	c3                   	ret    
c0021543:	90                   	nop

c0021544 <FAT::mkdir(char const*)>:
c0021544:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002154a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021552:	75 07                	jne    c002155b <FAT::mkdir(char const*)+0x17>
c0021554:	b8 04 00 00 00       	mov    eax,0x4
c0021559:	eb 5c                	jmp    c00215b7 <FAT::mkdir(char const*)+0x73>
c002155b:	83 ec 08             	sub    esp,0x8
c002155e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021565:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021569:	50                   	push   eax
c002156a:	e8 c5 f2 fd ff       	call   c0000834 <strcpy>
c002156f:	83 c4 10             	add    esp,0x10
c0021572:	83 ec 08             	sub    esp,0x8
c0021575:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021579:	50                   	push   eax
c002157a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021581:	e8 3c fa ff ff       	call   c0020fc2 <FAT::fixFilepath(char*)>
c0021586:	83 c4 10             	add    esp,0x10
c0021589:	83 ec 0c             	sub    esp,0xc
c002158c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021590:	50                   	push   eax
c0021591:	e8 c7 50 fe ff       	call   c000665d <f_mkdir>
c0021596:	83 c4 10             	add    esp,0x10
c0021599:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215a0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215a7:	85 c0                	test   eax,eax
c00215a9:	75 07                	jne    c00215b2 <FAT::mkdir(char const*)+0x6e>
c00215ab:	b8 00 00 00 00       	mov    eax,0x0
c00215b0:	eb 05                	jmp    c00215b7 <FAT::mkdir(char const*)+0x73>
c00215b2:	b8 01 00 00 00       	mov    eax,0x1
c00215b7:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215bd:	c3                   	ret    

c00215be <FAT::exists(char const*)>:
c00215be:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215c4:	83 ec 08             	sub    esp,0x8
c00215c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215d2:	50                   	push   eax
c00215d3:	e8 5c f2 fd ff       	call   c0000834 <strcpy>
c00215d8:	83 c4 10             	add    esp,0x10
c00215db:	83 ec 08             	sub    esp,0x8
c00215de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215e2:	50                   	push   eax
c00215e3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215ea:	e8 d3 f9 ff ff       	call   c0020fc2 <FAT::fixFilepath(char*)>
c00215ef:	83 c4 10             	add    esp,0x10
c00215f2:	83 ec 08             	sub    esp,0x8
c00215f5:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215fc:	50                   	push   eax
c00215fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021601:	50                   	push   eax
c0021602:	e8 81 4b fe ff       	call   c0006188 <f_stat>
c0021607:	83 c4 10             	add    esp,0x10
c002160a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021611:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021618:	85 c0                	test   eax,eax
c002161a:	75 04                	jne    c0021620 <FAT::exists(char const*)+0x62>
c002161c:	b0 01                	mov    al,0x1
c002161e:	eb 02                	jmp    c0021622 <FAT::exists(char const*)+0x64>
c0021620:	b0 00                	mov    al,0x0
c0021622:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021628:	c3                   	ret    
c0021629:	90                   	nop

c002162a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002162a:	b8 08 00 00 00       	mov    eax,0x8
c002162f:	c3                   	ret    

c0021630 <ISO9660::seek(void*, unsigned long long)>:
c0021630:	53                   	push   ebx
c0021631:	b8 04 00 00 00       	mov    eax,0x4
c0021636:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002163a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002163e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021642:	85 d2                	test   edx,edx
c0021644:	74 17                	je     c002165d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021646:	89 c8                	mov    eax,ecx
c0021648:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002164b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002164e:	b8 01 00 00 00       	mov    eax,0x1
c0021653:	73 08                	jae    c002165d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021655:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021658:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002165b:	31 c0                	xor    eax,eax
c002165d:	5b                   	pop    ebx
c002165e:	c3                   	ret    
c002165f:	90                   	nop

c0021660 <ISO9660::tell(void*, unsigned long long*)>:
c0021660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021664:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021668:	85 d2                	test   edx,edx
c002166a:	74 12                	je     c002167e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002166c:	85 c0                	test   eax,eax
c002166e:	74 0e                	je     c002167e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021670:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021673:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021676:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021679:	89 10                	mov    DWORD PTR [eax],edx
c002167b:	31 c0                	xor    eax,eax
c002167d:	c3                   	ret    
c002167e:	b8 04 00 00 00       	mov    eax,0x4
c0021683:	c3                   	ret    

c0021684 <ISO9660::getName()>:
c0021684:	b8 3c c9 02 c0       	mov    eax,0xc002c93c
c0021689:	c3                   	ret    

c002168a <ISO9660::stat(void*, unsigned long long*)>:
c002168a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002168e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021692:	85 d2                	test   edx,edx
c0021694:	74 12                	je     c00216a8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021696:	85 c0                	test   eax,eax
c0021698:	74 0e                	je     c00216a8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002169a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002169d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216a0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216a3:	89 10                	mov    DWORD PTR [eax],edx
c00216a5:	31 c0                	xor    eax,eax
c00216a7:	c3                   	ret    
c00216a8:	b8 04 00 00 00       	mov    eax,0x4
c00216ad:	c3                   	ret    

c00216ae <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216ae:	b8 01 00 00 00       	mov    eax,0x1
c00216b3:	c3                   	ret    

c00216b4 <ISO9660::unlink(char const*)>:
c00216b4:	b8 01 00 00 00       	mov    eax,0x1
c00216b9:	c3                   	ret    

c00216ba <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216ba:	b8 01 00 00 00       	mov    eax,0x1
c00216bf:	c3                   	ret    

c00216c0 <ISO9660::rename(char const*, char const*)>:
c00216c0:	b8 01 00 00 00       	mov    eax,0x1
c00216c5:	c3                   	ret    

c00216c6 <ISO9660::mkdir(char const*)>:
c00216c6:	b8 01 00 00 00       	mov    eax,0x1
c00216cb:	c3                   	ret    

c00216cc <ISO9660::close(void*)>:
c00216cc:	83 ec 0c             	sub    esp,0xc
c00216cf:	b8 04 00 00 00       	mov    eax,0x4
c00216d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216d8:	85 d2                	test   edx,edx
c00216da:	74 0e                	je     c00216ea <ISO9660::close(void*)+0x1e>
c00216dc:	83 ec 0c             	sub    esp,0xc
c00216df:	52                   	push   edx
c00216e0:	e8 6e e1 fe ff       	call   c000f853 <free>
c00216e5:	83 c4 10             	add    esp,0x10
c00216e8:	31 c0                	xor    eax,eax
c00216ea:	83 c4 0c             	add    esp,0xc
c00216ed:	c3                   	ret    

c00216ee <ISO9660::closeDir(void*)>:
c00216ee:	83 ec 0c             	sub    esp,0xc
c00216f1:	b8 04 00 00 00       	mov    eax,0x4
c00216f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216fa:	85 d2                	test   edx,edx
c00216fc:	74 0e                	je     c002170c <ISO9660::closeDir(void*)+0x1e>
c00216fe:	83 ec 0c             	sub    esp,0xc
c0021701:	52                   	push   edx
c0021702:	e8 4c e1 fe ff       	call   c000f853 <free>
c0021707:	83 c4 10             	add    esp,0x10
c002170a:	31 c0                	xor    eax,eax
c002170c:	83 c4 0c             	add    esp,0xc
c002170f:	c3                   	ret    

c0021710 <ISO9660::~ISO9660()>:
c0021710:	83 ec 0c             	sub    esp,0xc
c0021713:	ba a0 c9 02 c0       	mov    edx,0xc002c9a0
c0021718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002171c:	89 10                	mov    DWORD PTR [eax],edx
c002171e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021722:	83 ec 0c             	sub    esp,0xc
c0021725:	50                   	push   eax
c0021726:	e8 57 1b ff ff       	call   c0013282 <Filesystem::~Filesystem()>
c002172b:	83 c4 10             	add    esp,0x10
c002172e:	90                   	nop
c002172f:	83 c4 0c             	add    esp,0xc
c0021732:	c3                   	ret    
c0021733:	90                   	nop

c0021734 <ISO9660::~ISO9660()>:
c0021734:	83 ec 0c             	sub    esp,0xc
c0021737:	83 ec 0c             	sub    esp,0xc
c002173a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002173e:	e8 cd ff ff ff       	call   c0021710 <ISO9660::~ISO9660()>
c0021743:	83 c4 10             	add    esp,0x10
c0021746:	83 ec 08             	sub    esp,0x8
c0021749:	6a 08                	push   0x8
c002174b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002174f:	e8 26 17 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0021754:	83 c4 10             	add    esp,0x10
c0021757:	83 c4 0c             	add    esp,0xc
c002175a:	c3                   	ret    

c002175b <__memmem(unsigned char*, int, unsigned char*, int)>:
c002175b:	55                   	push   ebp
c002175c:	31 c9                	xor    ecx,ecx
c002175e:	57                   	push   edi
c002175f:	56                   	push   esi
c0021760:	53                   	push   ebx
c0021761:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021765:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021769:	89 eb                	mov    ebx,ebp
c002176b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002176f:	39 ce                	cmp    esi,ecx
c0021771:	7e 17                	jle    c002178a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021773:	31 d2                	xor    edx,edx
c0021775:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021779:	7d 13                	jge    c002178e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002177b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002177f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021782:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021785:	75 0d                	jne    c0021794 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021787:	42                   	inc    edx
c0021788:	eb eb                	jmp    c0021775 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002178a:	31 c0                	xor    eax,eax
c002178c:	eb 0a                	jmp    c0021798 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002178e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021792:	eb 04                	jmp    c0021798 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021794:	41                   	inc    ecx
c0021795:	43                   	inc    ebx
c0021796:	eb d7                	jmp    c002176f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021798:	5b                   	pop    ebx
c0021799:	5e                   	pop    esi
c002179a:	5f                   	pop    edi
c002179b:	5d                   	pop    ebp
c002179c:	c3                   	ret    

c002179d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002179d:	56                   	push   esi
c002179e:	53                   	push   ebx
c002179f:	52                   	push   edx
c00217a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00217a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217ac:	39 0d a0 1b 03 c0    	cmp    DWORD PTR ds:0xc0031ba0,ecx
c00217b2:	75 08                	jne    c00217bc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00217b4:	38 05 f4 d9 02 c0    	cmp    BYTE PTR ds:0xc002d9f4,al
c00217ba:	74 2b                	je     c00217e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00217bc:	83 ec 0c             	sub    esp,0xc
c00217bf:	a2 f4 d9 02 c0       	mov    ds:0xc002d9f4,al
c00217c4:	68 c0 1b 03 c0       	push   0xc0031bc0
c00217c9:	0f be c0             	movsx  eax,al
c00217cc:	6a 01                	push   0x1
c00217ce:	89 0d a0 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba0,ecx
c00217d4:	31 db                	xor    ebx,ebx
c00217d6:	53                   	push   ebx
c00217d7:	51                   	push   ecx
c00217d8:	ff 34 85 7c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1684]
c00217df:	e8 92 4f ff ff       	call   c0016776 <LogicalDisk::read(unsigned long long, int, void*)>
c00217e4:	83 c4 20             	add    esp,0x20
c00217e7:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217ef:	c7 44 24 14 c0 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031bc0
c00217f7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217fb:	58                   	pop    eax
c00217fc:	5b                   	pop    ebx
c00217fd:	5e                   	pop    esi
c00217fe:	e9 41 ef fd ff       	jmp    c0000744 <memcpy>
c0021803:	90                   	nop

c0021804 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021804:	81 ec 10 08 00 00    	sub    esp,0x810
c002180a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021811:	83 c0 41             	add    eax,0x41
c0021814:	0f be c0             	movsx  eax,al
c0021817:	50                   	push   eax
c0021818:	8d 44 24 08          	lea    eax,[esp+0x8]
c002181c:	50                   	push   eax
c002181d:	6a 10                	push   0x10
c002181f:	e8 79 ff ff ff       	call   c002179d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021824:	83 c4 10             	add    esp,0x10
c0021827:	31 c0                	xor    eax,eax
c0021829:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002182e:	75 1d                	jne    c002184d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021830:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021835:	75 16                	jne    c002184d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021837:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002183c:	75 0f                	jne    c002184d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002183e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021843:	75 08                	jne    c002184d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021845:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002184a:	0f 94 c0             	sete   al
c002184d:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021853:	c3                   	ret    

c0021854 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021854:	55                   	push   ebp
c0021855:	57                   	push   edi
c0021856:	56                   	push   esi
c0021857:	53                   	push   ebx
c0021858:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002185e:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021865:	85 ed                	test   ebp,ebp
c0021867:	0f 84 d6 01 00 00    	je     c0021a43 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002186d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021875:	0f 84 c8 01 00 00    	je     c0021a43 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002187b:	b8 01 00 00 00       	mov    eax,0x1
c0021880:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021884:	0f 85 be 01 00 00    	jne    c0021a48 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002188a:	31 d2                	xor    edx,edx
c002188c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021893:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021896:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021899:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002189d:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00218a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00218a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218a7:	01 f0                	add    eax,esi
c00218a9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00218ac:	11 fa                	adc    edx,edi
c00218ae:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00218b2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218ba:	19 d1                	sbb    ecx,edx
c00218bc:	72 0a                	jb     c00218c8 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00218be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218c6:	eb 13                	jmp    c00218db <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218d0:	29 f0                	sub    eax,esi
c00218d2:	19 fa                	sbb    edx,edi
c00218d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00218d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218de:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218e1:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218e5:	51                   	push   ecx
c00218e6:	c1 e0 0b             	shl    eax,0xb
c00218e9:	01 c6                	add    esi,eax
c00218eb:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218ef:	11 d7                	adc    edi,edx
c00218f1:	50                   	push   eax
c00218f2:	89 fa                	mov    edx,edi
c00218f4:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218f8:	89 f0                	mov    eax,esi
c00218fa:	53                   	push   ebx
c00218fb:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218ff:	50                   	push   eax
c0021900:	e8 98 fe ff ff       	call   c002179d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021905:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021909:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002190c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021910:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021916:	83 c4 10             	add    esp,0x10
c0021919:	b8 00 08 00 00       	mov    eax,0x800
c002191e:	29 d0                	sub    eax,edx
c0021920:	39 c1                	cmp    ecx,eax
c0021922:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021926:	83 d9 00             	sbb    ecx,0x0
c0021929:	7d 1c                	jge    c0021947 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c002192b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021930:	75 12                	jne    c0021944 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021932:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021939:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002193f:	e9 fb 00 00 00       	jmp    c0021a3f <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021944:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021947:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002194a:	31 d2                	xor    edx,edx
c002194c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021950:	39 c2                	cmp    edx,eax
c0021952:	7d 14                	jge    c0021968 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021954:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002195b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002195f:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021962:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021965:	42                   	inc    edx
c0021966:	eb e8                	jmp    c0021950 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021968:	89 c3                	mov    ebx,eax
c002196a:	85 c0                	test   eax,eax
c002196c:	79 02                	jns    c0021970 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002196e:	31 db                	xor    ebx,ebx
c0021970:	99                   	cdq    
c0021971:	01 c3                	add    ebx,eax
c0021973:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002197a:	01 c6                	add    esi,eax
c002197c:	11 d7                	adc    edi,edx
c002197e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021982:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021986:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021989:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002198d:	29 c6                	sub    esi,eax
c002198f:	19 d7                	sbb    edi,edx
c0021991:	89 34 24             	mov    DWORD PTR [esp],esi
c0021994:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021998:	b8 ff 07 00 00       	mov    eax,0x7ff
c002199d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219a0:	b8 00 00 00 00       	mov    eax,0x0
c00219a5:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219a9:	7d 3e                	jge    c00219e9 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00219ab:	52                   	push   edx
c00219ac:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219b0:	50                   	push   eax
c00219b1:	53                   	push   ebx
c00219b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219ba:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219be:	50                   	push   eax
c00219bf:	e8 d9 fd ff ff       	call   c002179d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219c4:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219cc:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219d1:	81 c3 00 08 00 00    	add    ebx,0x800
c00219d7:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219df:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219e4:	83 c4 10             	add    esp,0x10
c00219e7:	eb af                	jmp    c0021998 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219ed:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219f0:	74 32                	je     c0021a24 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219f2:	50                   	push   eax
c00219f3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219f7:	50                   	push   eax
c00219f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219fc:	50                   	push   eax
c00219fd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a01:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a05:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a09:	56                   	push   esi
c0021a0a:	e8 8e fd ff ff       	call   c002179d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a0f:	83 c4 0c             	add    esp,0xc
c0021a12:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a16:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a1a:	50                   	push   eax
c0021a1b:	53                   	push   ebx
c0021a1c:	e8 23 ed fd ff       	call   c0000744 <memcpy>
c0021a21:	83 c4 10             	add    esp,0x10
c0021a24:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a33:	89 38                	mov    DWORD PTR [eax],edi
c0021a35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a39:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a3c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a3f:	31 c0                	xor    eax,eax
c0021a41:	eb 05                	jmp    c0021a48 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a43:	b8 04 00 00 00       	mov    eax,0x4
c0021a48:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a4e:	5b                   	pop    ebx
c0021a4f:	5e                   	pop    esi
c0021a50:	5f                   	pop    edi
c0021a51:	5d                   	pop    ebp
c0021a52:	c3                   	ret    
c0021a53:	90                   	nop

c0021a54 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a54:	55                   	push   ebp
c0021a55:	57                   	push   edi
c0021a56:	56                   	push   esi
c0021a57:	53                   	push   ebx
c0021a58:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a5e:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a65:	85 f6                	test   esi,esi
c0021a67:	0f 84 64 02 00 00    	je     c0021cd1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a6d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a75:	0f 84 56 02 00 00    	je     c0021cd1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a7b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a7e:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a81:	75 0a                	jne    c0021a8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a83:	b8 07 00 00 00       	mov    eax,0x7
c0021a88:	e9 49 02 00 00       	jmp    c0021cd6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a8d:	50                   	push   eax
c0021a8e:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a92:	50                   	push   eax
c0021a93:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a9a:	53                   	push   ebx
c0021a9b:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a9d:	c1 e0 0b             	shl    eax,0xb
c0021aa0:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021aa3:	c1 e8 0b             	shr    eax,0xb
c0021aa6:	50                   	push   eax
c0021aa7:	e8 f1 fc ff ff       	call   c002179d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aac:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021aaf:	83 c4 10             	add    esp,0x10
c0021ab2:	89 c1                	mov    ecx,eax
c0021ab4:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021ab7:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021abd:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021ac0:	84 db                	test   bl,bl
c0021ac2:	0f 85 90 00 00 00    	jne    c0021b58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021ac8:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021ace:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021ad4:	29 c7                	sub    edi,eax
c0021ad6:	89 fb                	mov    ebx,edi
c0021ad8:	c1 fb 1f             	sar    ebx,0x1f
c0021adb:	01 f8                	add    eax,edi
c0021add:	11 da                	adc    edx,ebx
c0021adf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ae3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ae7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021aea:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021aed:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021af0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021af3:	89 04 24             	mov    DWORD PTR [esp],eax
c0021af6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021afa:	89 d8                	mov    eax,ebx
c0021afc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021aff:	ba 00 00 00 00       	mov    edx,0x0
c0021b04:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b08:	b8 00 00 00 00       	mov    eax,0x0
c0021b0d:	73 0b                	jae    c0021b1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b16:	29 f8                	sub    eax,edi
c0021b18:	19 da                	sbb    edx,ebx
c0021b1a:	89 d3                	mov    ebx,edx
c0021b1c:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b1f:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b22:	09 c3                	or     ebx,eax
c0021b24:	0f 84 59 ff ff ff    	je     c0021a83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b2a:	55                   	push   ebp
c0021b2b:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b2f:	50                   	push   eax
c0021b30:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b37:	53                   	push   ebx
c0021b38:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b3a:	c1 e0 0b             	shl    eax,0xb
c0021b3d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b41:	c1 e8 0b             	shr    eax,0xb
c0021b44:	50                   	push   eax
c0021b45:	e8 53 fc ff ff       	call   c002179d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b4a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b4d:	83 c4 10             	add    esp,0x10
c0021b50:	25 ff 07 00 00       	and    eax,0x7ff
c0021b55:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b58:	57                   	push   edi
c0021b59:	6a 28                	push   0x28
c0021b5b:	6a 00                	push   0x0
c0021b5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b61:	50                   	push   eax
c0021b62:	e8 11 ec fd ff       	call   c0000778 <memset>
c0021b67:	31 d2                	xor    edx,edx
c0021b69:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b6c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b72:	89 f8                	mov    eax,edi
c0021b74:	83 c0 21             	add    eax,0x21
c0021b77:	83 d2 00             	adc    edx,0x0
c0021b7a:	89 c7                	mov    edi,eax
c0021b7c:	89 d5                	mov    ebp,edx
c0021b7e:	83 c4 10             	add    esp,0x10
c0021b81:	31 c9                	xor    ecx,ecx
c0021b83:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b8a:	83 f9 28             	cmp    ecx,0x28
c0021b8d:	88 04 24             	mov    BYTE PTR [esp],al
c0021b90:	0f 94 c2             	sete   dl
c0021b93:	88 d0                	mov    al,dl
c0021b95:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b9a:	39 fa                	cmp    edx,edi
c0021b9c:	ba 00 00 00 00       	mov    edx,0x0
c0021ba1:	19 ea                	sbb    edx,ebp
c0021ba3:	0f 92 c2             	setb   dl
c0021ba6:	09 c2                	or     edx,eax
c0021ba8:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021bac:	0f 94 c0             	sete   al
c0021baf:	08 d0                	or     al,dl
c0021bb1:	75 16                	jne    c0021bc9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bb3:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bb7:	74 10                	je     c0021bc9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bb9:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021bbc:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021bc0:	41                   	inc    ecx
c0021bc1:	83 c7 01             	add    edi,0x1
c0021bc4:	83 d5 00             	adc    ebp,0x0
c0021bc7:	eb ba                	jmp    c0021b83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021bc9:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bd0:	83 ec 0c             	sub    esp,0xc
c0021bd3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bd7:	57                   	push   edi
c0021bd8:	e8 b7 eb fd ff       	call   c0000794 <strlen>
c0021bdd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021be5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021be9:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bf0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bf3:	5a                   	pop    edx
c0021bf4:	25 ff 07 00 00       	and    eax,0x7ff
c0021bf9:	01 c8                	add    eax,ecx
c0021bfb:	59                   	pop    ecx
c0021bfc:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c02:	83 e0 02             	and    eax,0x2
c0021c05:	3c 01                	cmp    al,0x1
c0021c07:	19 c0                	sbb    eax,eax
c0021c09:	83 c0 02             	add    eax,0x2
c0021c0c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c10:	57                   	push   edi
c0021c11:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c15:	50                   	push   eax
c0021c16:	e8 19 ec fd ff       	call   c0000834 <strcpy>
c0021c1b:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c1f:	83 c4 10             	add    esp,0x10
c0021c22:	84 c0                	test   al,al
c0021c24:	75 21                	jne    c0021c47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c26:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c2e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c36:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c3e:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c45:	eb 28                	jmp    c0021c6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c47:	fe c8                	dec    al
c0021c49:	75 24                	jne    c0021c6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c4b:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c53:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c5b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c63:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c6a:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c6f:	0f b6 fb             	movzx  edi,bl
c0021c72:	31 db                	xor    ebx,ebx
c0021c74:	50                   	push   eax
c0021c75:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c7c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c80:	50                   	push   eax
c0021c81:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c88:	e8 b7 ea fd ff       	call   c0000744 <memcpy>
c0021c8d:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c94:	89 f9                	mov    ecx,edi
c0021c96:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c9c:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c9f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021ca2:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021ca5:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021ca8:	83 c4 10             	add    esp,0x10
c0021cab:	39 c7                	cmp    edi,eax
c0021cad:	89 df                	mov    edi,ebx
c0021caf:	19 d7                	sbb    edi,edx
c0021cb1:	72 10                	jb     c0021cc3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cb3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021cba:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021cc1:	eb 0a                	jmp    c0021ccd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021cc3:	29 c8                	sub    eax,ecx
c0021cc5:	19 da                	sbb    edx,ebx
c0021cc7:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021cca:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ccd:	31 c0                	xor    eax,eax
c0021ccf:	eb 05                	jmp    c0021cd6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021cd1:	b8 04 00 00 00       	mov    eax,0x4
c0021cd6:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cdc:	5b                   	pop    ebx
c0021cdd:	5e                   	pop    esi
c0021cde:	5f                   	pop    edi
c0021cdf:	5d                   	pop    ebp
c0021ce0:	c3                   	ret    

c0021ce1 <readRoot(unsigned int*, unsigned int*, char)>:
c0021ce1:	81 ec 40 08 00 00    	sub    esp,0x840
c0021ce7:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021cef:	50                   	push   eax
c0021cf0:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cf4:	50                   	push   eax
c0021cf5:	6a 10                	push   0x10
c0021cf7:	e8 a1 fa ff ff       	call   c002179d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cfc:	83 c4 0c             	add    esp,0xc
c0021cff:	6a 22                	push   0x22
c0021d01:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d08:	50                   	push   eax
c0021d09:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d0d:	50                   	push   eax
c0021d0e:	e8 31 ea fd ff       	call   c0000744 <memcpy>
c0021d13:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d1e:	89 10                	mov    DWORD PTR [eax],edx
c0021d20:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d2b:	89 10                	mov    DWORD PTR [eax],edx
c0021d2d:	b0 01                	mov    al,0x1
c0021d2f:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d35:	c3                   	ret    

c0021d36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d36:	55                   	push   ebp
c0021d37:	57                   	push   edi
c0021d38:	56                   	push   esi
c0021d39:	53                   	push   ebx
c0021d3a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d40:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d47:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d52:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d56:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d5a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d5e:	75 03                	jne    c0021d63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d60:	83 c3 02             	add    ebx,0x2
c0021d63:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d66:	75 03                	jne    c0021d6b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d68:	43                   	inc    ebx
c0021d69:	eb f8                	jmp    c0021d63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d6b:	51                   	push   ecx
c0021d6c:	68 00 01 00 00       	push   0x100
c0021d71:	6a 00                	push   0x0
c0021d73:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d77:	50                   	push   eax
c0021d78:	e8 fb e9 fd ff       	call   c0000778 <memset>
c0021d7d:	83 c4 10             	add    esp,0x10
c0021d80:	31 d2                	xor    edx,edx
c0021d82:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d85:	84 c0                	test   al,al
c0021d87:	74 21                	je     c0021daa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d89:	3c 2f                	cmp    al,0x2f
c0021d8b:	75 0b                	jne    c0021d98 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d8d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d91:	bd 01 00 00 00       	mov    ebp,0x1
c0021d96:	eb 14                	jmp    c0021dac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d98:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d9b:	80 f9 19             	cmp    cl,0x19
c0021d9e:	77 03                	ja     c0021da3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021da0:	83 e8 20             	sub    eax,0x20
c0021da3:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021da7:	42                   	inc    edx
c0021da8:	eb d8                	jmp    c0021d82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021daa:	31 ed                	xor    ebp,ebp
c0021dac:	83 ec 0c             	sub    esp,0xc
c0021daf:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021db6:	e8 88 da fe ff       	call   c000f843 <malloc>
c0021dbb:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021dc2:	89 c6                	mov    esi,eax
c0021dc4:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021dca:	c1 ef 0b             	shr    edi,0xb
c0021dcd:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021dd4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021dd8:	83 c4 10             	add    esp,0x10
c0021ddb:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021de4:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021deb:	74 28                	je     c0021e15 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021ded:	52                   	push   edx
c0021dee:	57                   	push   edi
c0021def:	50                   	push   eax
c0021df0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021df4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021dfb:	e8 9d f9 ff ff       	call   c002179d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e04:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e0b:	05 00 08 00 00       	add    eax,0x800
c0021e10:	83 c4 10             	add    esp,0x10
c0021e13:	eb cb                	jmp    c0021de0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e15:	83 ec 0c             	sub    esp,0xc
c0021e18:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e1c:	57                   	push   edi
c0021e1d:	e8 72 e9 fd ff       	call   c0000794 <strlen>
c0021e22:	50                   	push   eax
c0021e23:	57                   	push   edi
c0021e24:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e2b:	56                   	push   esi
c0021e2c:	e8 2a f9 ff ff       	call   c002175b <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e31:	83 c4 20             	add    esp,0x20
c0021e34:	85 c0                	test   eax,eax
c0021e36:	75 13                	jne    c0021e4b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e38:	83 ec 0c             	sub    esp,0xc
c0021e3b:	56                   	push   esi
c0021e3c:	e8 12 da fe ff       	call   c000f853 <free>
c0021e41:	83 c4 10             	add    esp,0x10
c0021e44:	31 c0                	xor    eax,eax
c0021e46:	e9 b3 00 00 00       	jmp    c0021efe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e4b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e4f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e53:	c1 e7 08             	shl    edi,0x8
c0021e56:	c1 e2 10             	shl    edx,0x10
c0021e59:	09 d7                	or     edi,edx
c0021e5b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e5f:	09 d7                	or     edi,edx
c0021e61:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e65:	c1 e2 18             	shl    edx,0x18
c0021e68:	09 d7                	or     edi,edx
c0021e6a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e6e:	89 d1                	mov    ecx,edx
c0021e70:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e74:	c1 e1 08             	shl    ecx,0x8
c0021e77:	c1 e2 10             	shl    edx,0x10
c0021e7a:	09 ca                	or     edx,ecx
c0021e7c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e80:	09 ca                	or     edx,ecx
c0021e82:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e86:	c1 e1 18             	shl    ecx,0x18
c0021e89:	09 ca                	or     edx,ecx
c0021e8b:	89 e9                	mov    ecx,ebp
c0021e8d:	84 c9                	test   cl,cl
c0021e8f:	74 3c                	je     c0021ecd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e91:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e95:	83 ec 0c             	sub    esp,0xc
c0021e98:	56                   	push   esi
c0021e99:	e8 b5 d9 fe ff       	call   c000f853 <free>
c0021e9e:	83 c4 0c             	add    esp,0xc
c0021ea1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ea8:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ead:	50                   	push   eax
c0021eae:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021eb5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ebc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ec0:	52                   	push   edx
c0021ec1:	57                   	push   edi
c0021ec2:	53                   	push   ebx
c0021ec3:	e8 6e fe ff ff       	call   c0021d36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ec8:	83 c4 20             	add    esp,0x20
c0021ecb:	eb 31                	jmp    c0021efe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ecd:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ed0:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021ed7:	d0 e8                	shr    al,1
c0021ed9:	89 3b                	mov    DWORD PTR [ebx],edi
c0021edb:	83 e0 01             	and    eax,0x1
c0021ede:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021ee5:	83 ec 0c             	sub    esp,0xc
c0021ee8:	89 13                	mov    DWORD PTR [ebx],edx
c0021eea:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021ef1:	89 03                	mov    DWORD PTR [ebx],eax
c0021ef3:	56                   	push   esi
c0021ef4:	e8 5a d9 fe ff       	call   c000f853 <free>
c0021ef9:	83 c4 10             	add    esp,0x10
c0021efc:	b0 01                	mov    al,0x1
c0021efe:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f04:	5b                   	pop    ebx
c0021f05:	5e                   	pop    esi
c0021f06:	5f                   	pop    edi
c0021f07:	5d                   	pop    ebp
c0021f08:	c3                   	ret    

c0021f09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f09:	55                   	push   ebp
c0021f0a:	57                   	push   edi
c0021f0b:	56                   	push   esi
c0021f0c:	53                   	push   ebx
c0021f0d:	83 ec 20             	sub    esp,0x20
c0021f10:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f14:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f18:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f24:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f2c:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f31:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f37:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f3d:	57                   	push   edi
c0021f3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f42:	50                   	push   eax
c0021f43:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f47:	50                   	push   eax
c0021f48:	e8 94 fd ff ff       	call   c0021ce1 <readRoot(unsigned int*, unsigned int*, char)>
c0021f4d:	5a                   	pop    edx
c0021f4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f52:	e8 3d e8 fd ff       	call   c0000794 <strlen>
c0021f57:	83 c4 10             	add    esp,0x10
c0021f5a:	83 f8 03             	cmp    eax,0x3
c0021f5d:	77 17                	ja     c0021f76 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f63:	89 03                	mov    DWORD PTR [ebx],eax
c0021f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f69:	89 06                	mov    DWORD PTR [esi],eax
c0021f6b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f72:	b0 01                	mov    al,0x1
c0021f74:	eb 19                	jmp    c0021f8f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f76:	50                   	push   eax
c0021f77:	55                   	push   ebp
c0021f78:	57                   	push   edi
c0021f79:	56                   	push   esi
c0021f7a:	53                   	push   ebx
c0021f7b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f87:	e8 aa fd ff ff       	call   c0021d36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f8c:	83 c4 20             	add    esp,0x20
c0021f8f:	83 c4 1c             	add    esp,0x1c
c0021f92:	5b                   	pop    ebx
c0021f93:	5e                   	pop    esi
c0021f94:	5f                   	pop    edi
c0021f95:	5d                   	pop    ebp
c0021f96:	c3                   	ret    
c0021f97:	90                   	nop

c0021f98 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f98:	57                   	push   edi
c0021f99:	56                   	push   esi
c0021f9a:	53                   	push   ebx
c0021f9b:	83 ec 10             	sub    esp,0x10
c0021f9e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fa2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fa6:	85 ff                	test   edi,edi
c0021fa8:	0f 84 9d 00 00 00    	je     c002204b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fae:	85 f6                	test   esi,esi
c0021fb0:	0f 84 95 00 00 00    	je     c002204b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fb6:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fbb:	74 17                	je     c0021fd4 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021fbd:	83 ec 0c             	sub    esp,0xc
c0021fc0:	68 57 c9 02 c0       	push   0xc002c957
c0021fc5:	e8 90 0f ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0021fca:	83 c4 10             	add    esp,0x10
c0021fcd:	b8 03 00 00 00       	mov    eax,0x3
c0021fd2:	eb 7c                	jmp    c0022050 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fd4:	83 ec 0c             	sub    esp,0xc
c0021fd7:	6a 1c                	push   0x1c
c0021fd9:	e8 65 d8 fe ff       	call   c000f843 <malloc>
c0021fde:	89 07                	mov    DWORD PTR [edi],eax
c0021fe0:	89 c3                	mov    ebx,eax
c0021fe2:	58                   	pop    eax
c0021fe3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fe7:	50                   	push   eax
c0021fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021feb:	50                   	push   eax
c0021fec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ff0:	50                   	push   eax
c0021ff1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ff5:	50                   	push   eax
c0021ff6:	56                   	push   esi
c0021ff7:	e8 0d ff ff ff       	call   c0021f09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ffc:	83 c4 20             	add    esp,0x20
c0021fff:	84 c0                	test   al,al
c0022001:	74 07                	je     c002200a <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022003:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022008:	74 0b                	je     c0022015 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002200a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002200e:	b8 01 00 00 00       	mov    eax,0x1
c0022013:	eb 3b                	jmp    c0022050 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022015:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022019:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002201d:	89 03                	mov    DWORD PTR [ebx],eax
c002201f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002202a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022031:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022038:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002203b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022042:	8a 06                	mov    al,BYTE PTR [esi]
c0022044:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022047:	31 c0                	xor    eax,eax
c0022049:	eb 05                	jmp    c0022050 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002204b:	b8 04 00 00 00       	mov    eax,0x4
c0022050:	83 c4 10             	add    esp,0x10
c0022053:	5b                   	pop    ebx
c0022054:	5e                   	pop    esi
c0022055:	5f                   	pop    edi
c0022056:	c3                   	ret    
c0022057:	90                   	nop

c0022058 <ISO9660::exists(char const*)>:
c0022058:	83 ec 28             	sub    esp,0x28
c002205b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002205f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022063:	52                   	push   edx
c0022064:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022067:	52                   	push   edx
c0022068:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002206c:	52                   	push   edx
c002206d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022071:	52                   	push   edx
c0022072:	50                   	push   eax
c0022073:	e8 91 fe ff ff       	call   c0021f09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022078:	83 c4 3c             	add    esp,0x3c
c002207b:	c3                   	ret    

c002207c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002207c:	56                   	push   esi
c002207d:	53                   	push   ebx
c002207e:	83 ec 14             	sub    esp,0x14
c0022081:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022085:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022089:	85 db                	test   ebx,ebx
c002208b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002208f:	0f 94 c2             	sete   dl
c0022092:	85 f6                	test   esi,esi
c0022094:	0f 94 c0             	sete   al
c0022097:	08 c2                	or     dl,al
c0022099:	75 68                	jne    c0022103 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002209b:	85 c9                	test   ecx,ecx
c002209d:	74 64                	je     c0022103 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002209f:	83 ec 0c             	sub    esp,0xc
c00220a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220a9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220af:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220b6:	50                   	push   eax
c00220b7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220ba:	50                   	push   eax
c00220bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220bf:	50                   	push   eax
c00220c0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220c4:	50                   	push   eax
c00220c5:	51                   	push   ecx
c00220c6:	e8 3e fe ff ff       	call   c0021f09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220cb:	83 c4 20             	add    esp,0x20
c00220ce:	ba 01 00 00 00       	mov    edx,0x1
c00220d3:	84 c0                	test   al,al
c00220d5:	74 31                	je     c0022108 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220db:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220e2:	89 03                	mov    DWORD PTR [ebx],eax
c00220e4:	ba 00 00 00 00       	mov    edx,0x0
c00220e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220ed:	85 c0                	test   eax,eax
c00220ef:	0f 95 06             	setne  BYTE PTR [esi]
c00220f2:	74 14                	je     c0022108 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220fa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022101:	eb 05                	jmp    c0022108 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022103:	ba 04 00 00 00       	mov    edx,0x4
c0022108:	83 c4 14             	add    esp,0x14
c002210b:	89 d0                	mov    eax,edx
c002210d:	5b                   	pop    ebx
c002210e:	5e                   	pop    esi
c002210f:	c3                   	ret    

c0022110 <ISO9660::openDir(char const*, void**)>:
c0022110:	57                   	push   edi
c0022111:	56                   	push   esi
c0022112:	53                   	push   ebx
c0022113:	83 ec 10             	sub    esp,0x10
c0022116:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002211a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002211e:	85 ff                	test   edi,edi
c0022120:	0f 84 95 00 00 00    	je     c00221bb <ISO9660::openDir(char const*, void**)+0xab>
c0022126:	85 f6                	test   esi,esi
c0022128:	0f 84 8d 00 00 00    	je     c00221bb <ISO9660::openDir(char const*, void**)+0xab>
c002212e:	83 ec 0c             	sub    esp,0xc
c0022131:	6a 1c                	push   0x1c
c0022133:	e8 0b d7 fe ff       	call   c000f843 <malloc>
c0022138:	89 07                	mov    DWORD PTR [edi],eax
c002213a:	89 c3                	mov    ebx,eax
c002213c:	59                   	pop    ecx
c002213d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022141:	50                   	push   eax
c0022142:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022145:	50                   	push   eax
c0022146:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002214a:	50                   	push   eax
c002214b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002214f:	50                   	push   eax
c0022150:	56                   	push   esi
c0022151:	e8 b3 fd ff ff       	call   c0021f09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022156:	83 c4 20             	add    esp,0x20
c0022159:	84 c0                	test   al,al
c002215b:	74 07                	je     c0022164 <ISO9660::openDir(char const*, void**)+0x54>
c002215d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022162:	75 21                	jne    c0022185 <ISO9660::openDir(char const*, void**)+0x75>
c0022164:	0f b6 c0             	movzx  eax,al
c0022167:	52                   	push   edx
c0022168:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002216c:	50                   	push   eax
c002216d:	68 7d c9 02 c0       	push   0xc002c97d
c0022172:	e8 e3 0d ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0022177:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002217b:	83 c4 10             	add    esp,0x10
c002217e:	b8 01 00 00 00       	mov    eax,0x1
c0022183:	eb 3b                	jmp    c00221c0 <ISO9660::openDir(char const*, void**)+0xb0>
c0022185:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022189:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002218d:	89 03                	mov    DWORD PTR [ebx],eax
c002218f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022196:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002219a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221a8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221ab:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221b2:	8a 06                	mov    al,BYTE PTR [esi]
c00221b4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221b7:	31 c0                	xor    eax,eax
c00221b9:	eb 05                	jmp    c00221c0 <ISO9660::openDir(char const*, void**)+0xb0>
c00221bb:	b8 04 00 00 00       	mov    eax,0x4
c00221c0:	83 c4 10             	add    esp,0x10
c00221c3:	5b                   	pop    ebx
c00221c4:	5e                   	pop    esi
c00221c5:	5f                   	pop    edi
c00221c6:	c3                   	ret    
c00221c7:	90                   	nop

c00221c8 <ISO9660::ISO9660()>:
c00221c8:	83 ec 0c             	sub    esp,0xc
c00221cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221cf:	83 ec 0c             	sub    esp,0xc
c00221d2:	50                   	push   eax
c00221d3:	e8 86 10 ff ff       	call   c001325e <Filesystem::Filesystem()>
c00221d8:	83 c4 10             	add    esp,0x10
c00221db:	ba a0 c9 02 c0       	mov    edx,0xc002c9a0
c00221e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e4:	89 10                	mov    DWORD PTR [eax],edx
c00221e6:	90                   	nop
c00221e7:	83 c4 0c             	add    esp,0xc
c00221ea:	c3                   	ret    
c00221eb:	90                   	nop

c00221ec <SoundChannel::~SoundChannel()>:
c00221ec:	83 ec 0c             	sub    esp,0xc
c00221ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221f6:	83 ec 0c             	sub    esp,0xc
c00221f9:	50                   	push   eax
c00221fa:	e8 54 d6 fe ff       	call   c000f853 <free>
c00221ff:	83 c4 10             	add    esp,0x10
c0022202:	90                   	nop
c0022203:	83 c4 0c             	add    esp,0xc
c0022206:	c3                   	ret    
c0022207:	90                   	nop

c0022208 <SoundChannel::setSpeed(float)>:
c0022208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002220c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022210:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022213:	c3                   	ret    

c0022214 <SoundChannel::getSpeed()>:
c0022214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022218:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002221b:	c3                   	ret    

c002221c <SoundChannel::setVolume(int)>:
c002221c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022220:	83 f8 64             	cmp    eax,0x64
c0022223:	7e 05                	jle    c002222a <SoundChannel::setVolume(int)+0xe>
c0022225:	b8 64 00 00 00       	mov    eax,0x64
c002222a:	85 c0                	test   eax,eax
c002222c:	79 02                	jns    c0022230 <SoundChannel::setVolume(int)+0x14>
c002222e:	31 c0                	xor    eax,eax
c0022230:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022234:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022237:	c3                   	ret    

c0022238 <SoundChannel::getVolume()>:
c0022238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002223c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002223f:	c3                   	ret    

c0022240 <SoundChannel::pause()>:
c0022240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022244:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022248:	c3                   	ret    
c0022249:	90                   	nop

c002224a <SoundChannel::SoundChannel(int, int, int, int)>:
c002224a:	83 ec 1c             	sub    esp,0x1c
c002224d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022251:	e8 ea ff ff ff       	call   c0022240 <SoundChannel::pause()>
c0022256:	83 c4 04             	add    esp,0x4
c0022259:	6a 50                	push   0x50
c002225b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002225f:	e8 b8 ff ff ff       	call   c002221c <SoundChannel::setVolume(int)>
c0022264:	83 c4 08             	add    esp,0x8
c0022267:	a1 18 ca 02 c0       	mov    eax,ds:0xc002ca18
c002226c:	50                   	push   eax
c002226d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022271:	e8 92 ff ff ff       	call   c0022208 <SoundChannel::setSpeed(float)>
c0022276:	83 c4 08             	add    esp,0x8
c0022279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002227d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022281:	89 10                	mov    DWORD PTR [eax],edx
c0022283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022287:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002228b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002228e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022292:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022296:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022299:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002229e:	75 23                	jne    c00222c3 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00222a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00222a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222ad:	0f af c2             	imul   eax,edx
c00222b0:	85 c0                	test   eax,eax
c00222b2:	79 03                	jns    c00222b7 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00222b4:	83 c0 03             	add    eax,0x3
c00222b7:	c1 f8 02             	sar    eax,0x2
c00222ba:	05 a0 0f 00 00       	add    eax,0xfa0
c00222bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222cb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222d2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222dd:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222eb:	c1 e0 02             	shl    eax,0x2
c00222ee:	83 ec 0c             	sub    esp,0xc
c00222f1:	50                   	push   eax
c00222f2:	e8 4c d5 fe ff       	call   c000f843 <malloc>
c00222f7:	83 c4 10             	add    esp,0x10
c00222fa:	89 c2                	mov    edx,eax
c00222fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022300:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022303:	83 ec 04             	sub    esp,0x4
c0022306:	8d 44 24 08          	lea    eax,[esp+0x8]
c002230a:	50                   	push   eax
c002230b:	6a 01                	push   0x1
c002230d:	6a 04                	push   0x4
c002230f:	e8 8b 68 fe ff       	call   c0008b9f <src_new>
c0022314:	83 c4 10             	add    esp,0x10
c0022317:	89 c2                	mov    edx,eax
c0022319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002231d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022324:	85 c0                	test   eax,eax
c0022326:	74 10                	je     c0022338 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022328:	83 ec 0c             	sub    esp,0xc
c002232b:	68 fc c9 02 c0       	push   0xc002c9fc
c0022330:	e8 d2 82 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0022335:	83 c4 10             	add    esp,0x10
c0022338:	a0 c0 27 03 c0       	mov    al,ds:0xc00327c0
c002233d:	83 f0 01             	xor    eax,0x1
c0022340:	84 c0                	test   al,al
c0022342:	74 57                	je     c002239b <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022344:	a1 1c ca 02 c0       	mov    eax,ds:0xc002ca1c
c0022349:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002234d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022355:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002235d:	7f 35                	jg     c0022394 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002235f:	83 ec 0c             	sub    esp,0xc
c0022362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022366:	e8 9c 4f 00 00       	call   c0027307 <__floatsisf>
c002236b:	83 c4 10             	add    esp,0x10
c002236e:	8b 15 1c ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca1c
c0022374:	83 ec 08             	sub    esp,0x8
c0022377:	52                   	push   edx
c0022378:	50                   	push   eax
c0022379:	e8 9b 4b 00 00       	call   c0026f19 <__mulsf3>
c002237e:	83 c4 10             	add    esp,0x10
c0022381:	89 c2                	mov    edx,eax
c0022383:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022387:	89 14 85 c0 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc40],edx
c002238e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022392:	eb c1                	jmp    c0022355 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022394:	c6 05 c0 27 03 c0 01 	mov    BYTE PTR ds:0xc00327c0,0x1
c002239b:	90                   	nop
c002239c:	83 c4 1c             	add    esp,0x1c
c002239f:	c3                   	ret    

c00223a0 <SoundChannel::play()>:
c00223a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a4:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00223a8:	c3                   	ret    
c00223a9:	90                   	nop

c00223aa <SoundChannel::paused()>:
c00223aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ae:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00223b1:	c3                   	ret    

c00223b2 <SoundChannel::getSampleRate()>:
c00223b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00223b8:	c3                   	ret    
c00223b9:	90                   	nop

c00223ba <SoundChannel::getBits()>:
c00223ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223c1:	c3                   	ret    

c00223c2 <SoundChannel::getBufferUsed()>:
c00223c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223c9:	c3                   	ret    

c00223ca <SoundChannel::getBufferSize()>:
c00223ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ce:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223d1:	c3                   	ret    

c00223d2 <SoundChannel::unbuffer(float*, int, int)>:
c00223d2:	56                   	push   esi
c00223d3:	53                   	push   ebx
c00223d4:	83 ec 40             	sub    esp,0x40
c00223d7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223db:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223e2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223e9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223f9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223fd:	e8 05 4f 00 00       	call   c0027307 <__floatsisf>
c0022402:	5a                   	pop    edx
c0022403:	89 c6                	mov    esi,eax
c0022405:	ff 33                	push   DWORD PTR [ebx]
c0022407:	e8 fb 4e 00 00       	call   c0027307 <__floatsisf>
c002240c:	59                   	pop    ecx
c002240d:	5a                   	pop    edx
c002240e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022411:	50                   	push   eax
c0022412:	e8 02 4b 00 00       	call   c0026f19 <__mulsf3>
c0022417:	59                   	pop    ecx
c0022418:	5a                   	pop    edx
c0022419:	50                   	push   eax
c002241a:	56                   	push   esi
c002241b:	e8 bc 4c 00 00       	call   c00270dc <__divsf3>
c0022420:	89 04 24             	mov    DWORD PTR [esp],eax
c0022423:	e8 af 61 00 00       	call   c00285d7 <__extendsfdf2>
c0022428:	59                   	pop    ecx
c0022429:	5e                   	pop    esi
c002242a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002242e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022432:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002243a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002243e:	50                   	push   eax
c002243f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022442:	e8 4d 63 fe ff       	call   c0008794 <src_process>
c0022447:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002244b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002244e:	83 c4 0c             	add    esp,0xc
c0022451:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022454:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022457:	29 d0                	sub    eax,edx
c0022459:	c1 e0 02             	shl    eax,0x2
c002245c:	50                   	push   eax
c002245d:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022460:	50                   	push   eax
c0022461:	51                   	push   ecx
c0022462:	e8 15 e2 fd ff       	call   c000067c <memmove>
c0022467:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002246b:	83 c4 44             	add    esp,0x44
c002246e:	5b                   	pop    ebx
c002246f:	5e                   	pop    esi
c0022470:	c3                   	ret    
c0022471:	90                   	nop

c0022472 <SoundChannel::buffer8(unsigned char*, int)>:
c0022472:	55                   	push   ebp
c0022473:	57                   	push   edi
c0022474:	56                   	push   esi
c0022475:	53                   	push   ebx
c0022476:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002247a:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002247e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022481:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022485:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022488:	74 7a                	je     c0022504 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002248a:	85 ff                	test   edi,edi
c002248c:	7e 76                	jle    c0022504 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002248e:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022492:	8d 70 01             	lea    esi,[eax+0x1]
c0022495:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022498:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002249b:	8b 1c 9d c0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc40]
c00224a2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224a5:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224a8:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224ab:	74 5e                	je     c002250b <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224ad:	83 ff 01             	cmp    edi,0x1
c00224b0:	74 4b                	je     c00224fd <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224b2:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224b6:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224b9:	8d 70 01             	lea    esi,[eax+0x1]
c00224bc:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224bf:	8b 1c 9d c0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc40]
c00224c6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224c9:	b8 02 00 00 00       	mov    eax,0x2
c00224ce:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224d1:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224d4:	75 23                	jne    c00224f9 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224d6:	eb 27                	jmp    c00224ff <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224d8:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224dd:	8d 71 01             	lea    esi,[ecx+0x1]
c00224e0:	40                   	inc    eax
c00224e1:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224e4:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224e7:	8b 1c 9d c0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc40]
c00224ee:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224f1:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224f4:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224f7:	74 06                	je     c00224ff <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224f9:	39 c7                	cmp    edi,eax
c00224fb:	75 db                	jne    c00224d8 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224fd:	89 f8                	mov    eax,edi
c00224ff:	5b                   	pop    ebx
c0022500:	5e                   	pop    esi
c0022501:	5f                   	pop    edi
c0022502:	5d                   	pop    ebp
c0022503:	c3                   	ret    
c0022504:	5b                   	pop    ebx
c0022505:	31 c0                	xor    eax,eax
c0022507:	5e                   	pop    esi
c0022508:	5f                   	pop    edi
c0022509:	5d                   	pop    ebp
c002250a:	c3                   	ret    
c002250b:	b8 01 00 00 00       	mov    eax,0x1
c0022510:	eb ed                	jmp    c00224ff <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022512 <SoundDevice::SoundDevice(char const*)>:
c0022512:	83 ec 1c             	sub    esp,0x1c
c0022515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022519:	83 ec 08             	sub    esp,0x8
c002251c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022520:	50                   	push   eax
c0022521:	e8 4a 20 ff ff       	call   c0014570 <Device::Device(char const*)>
c0022526:	83 c4 10             	add    esp,0x10
c0022529:	ba 28 ca 02 c0       	mov    edx,0xc002ca28
c002252e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022532:	89 10                	mov    DWORD PTR [eax],edx
c0022534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022538:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022546:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022550:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022558:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002255d:	7f 19                	jg     c0022578 <SoundDevice::SoundDevice(char const*)+0x66>
c002255f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022563:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022567:	83 c2 54             	add    edx,0x54
c002256a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022576:	eb e0                	jmp    c0022558 <SoundDevice::SoundDevice(char const*)+0x46>
c0022578:	90                   	nop
c0022579:	83 c4 1c             	add    esp,0x1c
c002257c:	c3                   	ret    
c002257d:	90                   	nop

c002257e <SoundDevice::~SoundDevice()>:
c002257e:	53                   	push   ebx
c002257f:	83 ec 18             	sub    esp,0x18
c0022582:	ba 28 ca 02 c0       	mov    edx,0xc002ca28
c0022587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258b:	89 10                	mov    DWORD PTR [eax],edx
c002258d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022595:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002259a:	7f 46                	jg     c00225e2 <SoundDevice::~SoundDevice()+0x64>
c002259c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225a4:	83 c2 54             	add    edx,0x54
c00225a7:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225ab:	85 c0                	test   eax,eax
c00225ad:	74 2d                	je     c00225dc <SoundDevice::~SoundDevice()+0x5e>
c00225af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225b7:	83 c2 54             	add    edx,0x54
c00225ba:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225be:	85 db                	test   ebx,ebx
c00225c0:	74 1a                	je     c00225dc <SoundDevice::~SoundDevice()+0x5e>
c00225c2:	83 ec 0c             	sub    esp,0xc
c00225c5:	53                   	push   ebx
c00225c6:	e8 21 fc ff ff       	call   c00221ec <SoundChannel::~SoundChannel()>
c00225cb:	83 c4 10             	add    esp,0x10
c00225ce:	83 ec 08             	sub    esp,0x8
c00225d1:	6a 2c                	push   0x2c
c00225d3:	53                   	push   ebx
c00225d4:	e8 a1 08 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c00225d9:	83 c4 10             	add    esp,0x10
c00225dc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225e0:	eb b3                	jmp    c0022595 <SoundDevice::~SoundDevice()+0x17>
c00225e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225e6:	83 ec 0c             	sub    esp,0xc
c00225e9:	50                   	push   eax
c00225ea:	e8 63 1c ff ff       	call   c0014252 <Device::~Device()>
c00225ef:	83 c4 10             	add    esp,0x10
c00225f2:	90                   	nop
c00225f3:	83 c4 18             	add    esp,0x18
c00225f6:	5b                   	pop    ebx
c00225f7:	c3                   	ret    

c00225f8 <SoundDevice::~SoundDevice()>:
c00225f8:	83 ec 0c             	sub    esp,0xc
c00225fb:	83 ec 0c             	sub    esp,0xc
c00225fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022602:	e8 77 ff ff ff       	call   c002257e <SoundDevice::~SoundDevice()>
c0022607:	83 c4 10             	add    esp,0x10
c002260a:	83 ec 08             	sub    esp,0x8
c002260d:	68 e4 01 00 00       	push   0x1e4
c0022612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022616:	e8 5f 08 ff ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c002261b:	83 c4 10             	add    esp,0x10
c002261e:	83 c4 0c             	add    esp,0xc
c0022621:	c3                   	ret    

c0022622 <SoundDevice::getFreeChannelNum()>:
c0022622:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022626:	31 c0                	xor    eax,eax
c0022628:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022630:	74 09                	je     c002263b <SoundDevice::getFreeChannelNum()+0x19>
c0022632:	40                   	inc    eax
c0022633:	83 f8 20             	cmp    eax,0x20
c0022636:	75 f0                	jne    c0022628 <SoundDevice::getFreeChannelNum()+0x6>
c0022638:	83 c8 ff             	or     eax,0xffffffff
c002263b:	c3                   	ret    

c002263c <SoundDevice::addChannel(SoundChannel*)>:
c002263c:	56                   	push   esi
c002263d:	53                   	push   ebx
c002263e:	51                   	push   ecx
c002263f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022647:	53                   	push   ebx
c0022648:	e8 d5 ff ff ff       	call   c0022622 <SoundDevice::getFreeChannelNum()>
c002264d:	5a                   	pop    edx
c002264e:	83 f8 ff             	cmp    eax,0xffffffff
c0022651:	74 51                	je     c00226a4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022653:	85 f6                	test   esi,esi
c0022655:	74 4d                	je     c00226a4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022657:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002265e:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022665:	75 30                	jne    c0022697 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022667:	83 ec 0c             	sub    esp,0xc
c002266a:	56                   	push   esi
c002266b:	e8 42 fd ff ff       	call   c00223b2 <SoundChannel::getSampleRate()>
c0022670:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022676:	89 34 24             	mov    DWORD PTR [esp],esi
c0022679:	e8 3c fd ff ff       	call   c00223ba <SoundChannel::getBits()>
c002267e:	83 c4 0c             	add    esp,0xc
c0022681:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022687:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022689:	50                   	push   eax
c002268a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022690:	53                   	push   ebx
c0022691:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022694:	83 c4 10             	add    esp,0x10
c0022697:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002269d:	b8 01 00 00 00       	mov    eax,0x1
c00226a2:	eb 03                	jmp    c00226a7 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226a4:	83 c8 ff             	or     eax,0xffffffff
c00226a7:	5a                   	pop    edx
c00226a8:	5b                   	pop    ebx
c00226a9:	5e                   	pop    esi
c00226aa:	c3                   	ret    
c00226ab:	90                   	nop

c00226ac <SoundDevice::removeChannel(int)>:
c00226ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226b4:	83 fa 1f             	cmp    edx,0x1f
c00226b7:	77 23                	ja     c00226dc <SoundDevice::removeChannel(int)+0x30>
c00226b9:	8d 14 90             	lea    edx,[eax+edx*4]
c00226bc:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226c3:	74 17                	je     c00226dc <SoundDevice::removeChannel(int)+0x30>
c00226c5:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226cf:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226d5:	75 05                	jne    c00226dc <SoundDevice::removeChannel(int)+0x30>
c00226d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00226d9:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226dc:	c3                   	ret    
c00226dd:	90                   	nop

c00226de <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226de:	57                   	push   edi
c00226df:	56                   	push   esi
c00226e0:	53                   	push   ebx
c00226e1:	31 db                	xor    ebx,ebx
c00226e3:	83 ec 10             	sub    esp,0x10
c00226e6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226ea:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226ee:	0f 8d cb 00 00 00    	jge    c00227bf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226f4:	83 ec 0c             	sub    esp,0xc
c00226f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226fb:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226fe:	e8 d4 5e 00 00       	call   c00285d7 <__extendsfdf2>
c0022703:	83 c4 10             	add    esp,0x10
c0022706:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002270a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002270e:	68 00 00 f0 3f       	push   0x3ff00000
c0022713:	6a 00                	push   0x0
c0022715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022719:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002271d:	e8 41 4e 00 00       	call   c0027563 <__adddf3>
c0022722:	83 c4 10             	add    esp,0x10
c0022725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022729:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002272d:	68 00 00 e0 3f       	push   0x3fe00000
c0022732:	6a 00                	push   0x0
c0022734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002273c:	e8 9f 54 00 00       	call   c0027be0 <__muldf3>
c0022741:	83 c4 10             	add    esp,0x10
c0022744:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022748:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002274c:	68 00 00 60 40       	push   0x40600000
c0022751:	6a 00                	push   0x0
c0022753:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002275b:	e8 80 54 00 00       	call   c0027be0 <__muldf3>
c0022760:	59                   	pop    ecx
c0022761:	5f                   	pop    edi
c0022762:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022766:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002276a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002276e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022772:	e8 3c 5d 00 00       	call   c00284b3 <__truncdfsf2>
c0022777:	5a                   	pop    edx
c0022778:	89 c7                	mov    edi,eax
c002277a:	59                   	pop    ecx
c002277b:	68 00 00 fe 42       	push   0x42fe0000
c0022780:	50                   	push   eax
c0022781:	e8 d7 4d 00 00       	call   c002755d <__gesf2>
c0022786:	83 c4 10             	add    esp,0x10
c0022789:	85 c0                	test   eax,eax
c002278b:	78 06                	js     c0022793 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002278d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022791:	eb 26                	jmp    c00227b9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022793:	50                   	push   eax
c0022794:	50                   	push   eax
c0022795:	6a 00                	push   0x0
c0022797:	57                   	push   edi
c0022798:	e8 c4 4d 00 00       	call   c0027561 <__lesf2>
c002279d:	83 c4 10             	add    esp,0x10
c00227a0:	85 c0                	test   eax,eax
c00227a2:	7f 06                	jg     c00227aa <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227a4:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00227a8:	eb 0f                	jmp    c00227b9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227aa:	83 ec 0c             	sub    esp,0xc
c00227ad:	57                   	push   edi
c00227ae:	e8 b9 5e 00 00       	call   c002866c <lrintf>
c00227b3:	83 c4 10             	add    esp,0x10
c00227b6:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227b9:	43                   	inc    ebx
c00227ba:	e9 2b ff ff ff       	jmp    c00226ea <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227bf:	83 c4 10             	add    esp,0x10
c00227c2:	5b                   	pop    ebx
c00227c3:	5e                   	pop    esi
c00227c4:	5f                   	pop    edi
c00227c5:	c3                   	ret    

c00227c6 <SoundDevice::getAudio(int, float*, float*)>:
c00227c6:	55                   	push   ebp
c00227c7:	57                   	push   edi
c00227c8:	56                   	push   esi
c00227c9:	53                   	push   ebx
c00227ca:	31 db                	xor    ebx,ebx
c00227cc:	83 ec 20             	sub    esp,0x20
c00227cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227d3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227d7:	c1 e0 02             	shl    eax,0x2
c00227da:	50                   	push   eax
c00227db:	6a 00                	push   0x0
c00227dd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227e1:	e8 92 df fd ff       	call   c0000778 <memset>
c00227e6:	83 c4 10             	add    esp,0x10
c00227e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227ed:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227f4:	85 c0                	test   eax,eax
c00227f6:	0f 84 d7 00 00 00    	je     c00228d3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227fc:	83 ec 0c             	sub    esp,0xc
c00227ff:	50                   	push   eax
c0022800:	e8 a5 fb ff ff       	call   c00223aa <SoundChannel::paused()>
c0022805:	83 c4 10             	add    esp,0x10
c0022808:	84 c0                	test   al,al
c002280a:	0f 85 c3 00 00 00    	jne    c00228d3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022810:	83 ec 0c             	sub    esp,0xc
c0022813:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002281a:	e8 19 fa ff ff       	call   c0022238 <SoundChannel::getVolume()>
c002281f:	83 c4 10             	add    esp,0x10
c0022822:	85 c0                	test   eax,eax
c0022824:	0f 84 a9 00 00 00    	je     c00228d3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002282a:	83 ec 0c             	sub    esp,0xc
c002282d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022834:	e8 ff f9 ff ff       	call   c0022238 <SoundChannel::getVolume()>
c0022839:	83 ec 0c             	sub    esp,0xc
c002283c:	50                   	push   eax
c002283d:	e8 c5 4a 00 00       	call   c0027307 <__floatsisf>
c0022842:	59                   	pop    ecx
c0022843:	5d                   	pop    ebp
c0022844:	31 ed                	xor    ebp,ebp
c0022846:	68 00 00 c8 42       	push   0x42c80000
c002284b:	50                   	push   eax
c002284c:	e8 8b 48 00 00       	call   c00270dc <__divsf3>
c0022851:	83 c4 10             	add    esp,0x10
c0022854:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022858:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002285c:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022862:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022866:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002286d:	e8 60 fb ff ff       	call   c00223d2 <SoundChannel::unbuffer(float*, int, int)>
c0022872:	83 c4 20             	add    esp,0x20
c0022875:	89 c1                	mov    ecx,eax
c0022877:	39 cd                	cmp    ebp,ecx
c0022879:	7d 52                	jge    c00228cd <SoundDevice::getAudio(int, float*, float*)+0x107>
c002287b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002287f:	50                   	push   eax
c0022880:	50                   	push   eax
c0022881:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022885:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022888:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002288c:	e8 88 46 00 00       	call   c0026f19 <__mulsf3>
c0022891:	5a                   	pop    edx
c0022892:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022896:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002289c:	e8 66 4a 00 00       	call   c0027307 <__floatsisf>
c00228a1:	59                   	pop    ecx
c00228a2:	5a                   	pop    edx
c00228a3:	50                   	push   eax
c00228a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228a8:	e8 2f 48 00 00       	call   c00270dc <__divsf3>
c00228ad:	59                   	pop    ecx
c00228ae:	5a                   	pop    edx
c00228af:	50                   	push   eax
c00228b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00228b4:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228b7:	e8 3a 43 00 00       	call   c0026bf6 <__addsf3>
c00228bc:	83 c4 10             	add    esp,0x10
c00228bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228c7:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228ca:	45                   	inc    ebp
c00228cb:	eb aa                	jmp    c0022877 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228cd:	39 cf                	cmp    edi,ecx
c00228cf:	7e 02                	jle    c00228d3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228d1:	89 cf                	mov    edi,ecx
c00228d3:	43                   	inc    ebx
c00228d4:	83 fb 20             	cmp    ebx,0x20
c00228d7:	0f 85 10 ff ff ff    	jne    c00227ed <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228dd:	83 c4 1c             	add    esp,0x1c
c00228e0:	89 f8                	mov    eax,edi
c00228e2:	5b                   	pop    ebx
c00228e3:	5e                   	pop    esi
c00228e4:	5f                   	pop    edi
c00228e5:	5d                   	pop    ebp
c00228e6:	c3                   	ret    
c00228e7:	90                   	nop

c00228e8 <PCI::open(int, int, void*)>:
c00228e8:	83 ec 18             	sub    esp,0x18
c00228eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00228f1:	50                   	push   eax
c00228f2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228f5:	31 c0                	xor    eax,eax
c00228f7:	83 c4 1c             	add    esp,0x1c
c00228fa:	c3                   	ret    
c00228fb:	90                   	nop

c00228fc <PCI::close(int, int, void*)>:
c00228fc:	31 c0                	xor    eax,eax
c00228fe:	c3                   	ret    
c00228ff:	90                   	nop

c0022900 <PCI::PCI()>:
c0022900:	83 ec 0c             	sub    esp,0xc
c0022903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022907:	83 ec 08             	sub    esp,0x8
c002290a:	68 58 ca 02 c0       	push   0xc002ca58
c002290f:	50                   	push   eax
c0022910:	e8 df 12 ff ff       	call   c0013bf4 <Bus::Bus(char const*)>
c0022915:	83 c4 10             	add    esp,0x10
c0022918:	ba c4 ca 02 c0       	mov    edx,0xc002cac4
c002291d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022921:	89 10                	mov    DWORD PTR [eax],edx
c0022923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022927:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002292d:	0f b6 d0             	movzx  edx,al
c0022930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022934:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002293b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022945:	0f b6 d0             	movzx  edx,al
c0022948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294c:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022955:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002295b:	8d 50 01             	lea    edx,[eax+0x1]
c002295e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022962:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022968:	0f b6 d0             	movzx  edx,al
c002296b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022973:	83 c9 c0             	or     ecx,0xffffffc0
c0022976:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002297a:	90                   	nop
c002297b:	83 c4 0c             	add    esp,0xc
c002297e:	c3                   	ret    
c002297f:	90                   	nop

c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022980:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022984:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022989:	89 ca                	mov    edx,ecx
c002298b:	c1 e0 10             	shl    eax,0x10
c002298e:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022994:	09 d0                	or     eax,edx
c0022996:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002299b:	c1 e2 08             	shl    edx,0x8
c002299e:	09 d0                	or     eax,edx
c00229a0:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00229a5:	c1 e2 0b             	shl    edx,0xb
c00229a8:	09 d0                	or     eax,edx
c00229aa:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229af:	0d 00 00 00 80       	or     eax,0x80000000
c00229b4:	ef                   	out    dx,eax
c00229b5:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229ba:	ed                   	in     eax,dx
c00229bb:	83 e1 02             	and    ecx,0x2
c00229be:	0f b6 c9             	movzx  ecx,cl
c00229c1:	c1 e1 03             	shl    ecx,0x3
c00229c4:	d3 e8                	shr    eax,cl
c00229c6:	c3                   	ret    
c00229c7:	90                   	nop

c00229c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229c8:	6a 00                	push   0x0
c00229ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229cf:	50                   	push   eax
c00229d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d5:	50                   	push   eax
c00229d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229db:	50                   	push   eax
c00229dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229e0:	e8 9b ff ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229e5:	83 c4 14             	add    esp,0x14
c00229e8:	c3                   	ret    
c00229e9:	90                   	nop

c00229ea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229ea:	6a 0e                	push   0xe
c00229ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f1:	50                   	push   eax
c00229f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f7:	50                   	push   eax
c00229f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229fd:	50                   	push   eax
c00229fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a02:	e8 79 ff ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a07:	83 c4 14             	add    esp,0x14
c0022a0a:	0f b6 c0             	movzx  eax,al
c0022a0d:	c3                   	ret    

c0022a0e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a0e:	55                   	push   ebp
c0022a0f:	57                   	push   edi
c0022a10:	56                   	push   esi
c0022a11:	53                   	push   ebx
c0022a12:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a17:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a1c:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a21:	6a 0a                	push   0xa
c0022a23:	56                   	push   esi
c0022a24:	55                   	push   ebp
c0022a25:	57                   	push   edi
c0022a26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a2a:	e8 51 ff ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a2f:	6a 0a                	push   0xa
c0022a31:	89 c3                	mov    ebx,eax
c0022a33:	56                   	push   esi
c0022a34:	0f b6 db             	movzx  ebx,bl
c0022a37:	55                   	push   ebp
c0022a38:	57                   	push   edi
c0022a39:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a3d:	e8 3e ff ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a42:	83 c4 28             	add    esp,0x28
c0022a45:	25 00 ff 00 00       	and    eax,0xff00
c0022a4a:	09 d8                	or     eax,ebx
c0022a4c:	5b                   	pop    ebx
c0022a4d:	5e                   	pop    esi
c0022a4e:	5f                   	pop    edi
c0022a4f:	5d                   	pop    ebp
c0022a50:	c3                   	ret    
c0022a51:	90                   	nop

c0022a52 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a52:	6a 08                	push   0x8
c0022a54:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a59:	50                   	push   eax
c0022a5a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5f:	50                   	push   eax
c0022a60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a65:	50                   	push   eax
c0022a66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a6a:	e8 11 ff ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a6f:	83 c4 14             	add    esp,0x14
c0022a72:	0f b6 c4             	movzx  eax,ah
c0022a75:	c3                   	ret    

c0022a76 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a76:	6a 08                	push   0x8
c0022a78:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7d:	50                   	push   eax
c0022a7e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a83:	50                   	push   eax
c0022a84:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a89:	50                   	push   eax
c0022a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8e:	e8 ed fe ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a93:	83 c4 14             	add    esp,0x14
c0022a96:	c3                   	ret    
c0022a97:	90                   	nop

c0022a98 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a98:	6a 3c                	push   0x3c
c0022a9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9f:	50                   	push   eax
c0022aa0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa5:	50                   	push   eax
c0022aa6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aab:	50                   	push   eax
c0022aac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab0:	e8 cb fe ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab5:	83 c4 14             	add    esp,0x14
c0022ab8:	c3                   	ret    
c0022ab9:	90                   	nop

c0022aba <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022aba:	6a 18                	push   0x18
c0022abc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac1:	50                   	push   eax
c0022ac2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac7:	50                   	push   eax
c0022ac8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022acd:	50                   	push   eax
c0022ace:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ad2:	e8 a9 fe ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ad7:	83 c4 14             	add    esp,0x14
c0022ada:	0f b6 c4             	movzx  eax,ah
c0022add:	c3                   	ret    

c0022ade <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ade:	55                   	push   ebp
c0022adf:	57                   	push   edi
c0022ae0:	56                   	push   esi
c0022ae1:	53                   	push   ebx
c0022ae2:	50                   	push   eax
c0022ae3:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022ae7:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022aec:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022af1:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022af6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022afd:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b00:	83 c3 10             	add    ebx,0x10
c0022b03:	0f b6 c0             	movzx  eax,al
c0022b06:	0f b6 db             	movzx  ebx,bl
c0022b09:	50                   	push   eax
c0022b0a:	51                   	push   ecx
c0022b0b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b0f:	57                   	push   edi
c0022b10:	55                   	push   ebp
c0022b11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b15:	e8 66 fe ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b1a:	53                   	push   ebx
c0022b1b:	89 c6                	mov    esi,eax
c0022b1d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b21:	c1 e6 10             	shl    esi,0x10
c0022b24:	51                   	push   ecx
c0022b25:	57                   	push   edi
c0022b26:	55                   	push   ebp
c0022b27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b2b:	e8 50 fe ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b30:	83 c4 2c             	add    esp,0x2c
c0022b33:	0f b7 c0             	movzx  eax,ax
c0022b36:	5b                   	pop    ebx
c0022b37:	09 f0                	or     eax,esi
c0022b39:	5e                   	pop    esi
c0022b3a:	5f                   	pop    edi
c0022b3b:	5d                   	pop    ebp
c0022b3c:	c3                   	ret    
c0022b3d:	90                   	nop

c0022b3e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b3e:	53                   	push   ebx
c0022b3f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b44:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b4d:	c1 e1 10             	shl    ecx,0x10
c0022b50:	25 fc 00 00 00       	and    eax,0xfc
c0022b55:	09 c1                	or     ecx,eax
c0022b57:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b5c:	c1 e0 08             	shl    eax,0x8
c0022b5f:	09 c1                	or     ecx,eax
c0022b61:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b66:	c1 e0 0b             	shl    eax,0xb
c0022b69:	09 c1                	or     ecx,eax
c0022b6b:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b71:	89 c8                	mov    eax,ecx
c0022b73:	ef                   	out    dx,eax
c0022b74:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b79:	ed                   	in     eax,dx
c0022b7a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b7f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b84:	74 0a                	je     c0022b90 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b86:	0f b7 d8             	movzx  ebx,ax
c0022b89:	89 d0                	mov    eax,edx
c0022b8b:	c1 e0 10             	shl    eax,0x10
c0022b8e:	eb 05                	jmp    c0022b95 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b90:	66 31 c0             	xor    ax,ax
c0022b93:	89 d3                	mov    ebx,edx
c0022b95:	09 c3                	or     ebx,eax
c0022b97:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b9c:	89 c8                	mov    eax,ecx
c0022b9e:	ef                   	out    dx,eax
c0022b9f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ba4:	89 d8                	mov    eax,ebx
c0022ba6:	ef                   	out    dx,eax
c0022ba7:	5b                   	pop    ebx
c0022ba8:	c3                   	ret    
c0022ba9:	90                   	nop

c0022baa <PCI::checkBus(unsigned char)>:
c0022baa:	56                   	push   esi
c0022bab:	53                   	push   ebx
c0022bac:	31 db                	xor    ebx,ebx
c0022bae:	51                   	push   ecx
c0022baf:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022bb4:	52                   	push   edx
c0022bb5:	53                   	push   ebx
c0022bb6:	43                   	inc    ebx
c0022bb7:	56                   	push   esi
c0022bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bbc:	e8 2b 03 00 00       	call   c0022eec <PCI::checkDevice(unsigned char, unsigned char)>
c0022bc1:	83 c4 10             	add    esp,0x10
c0022bc4:	83 fb 20             	cmp    ebx,0x20
c0022bc7:	75 eb                	jne    c0022bb4 <PCI::checkBus(unsigned char)+0xa>
c0022bc9:	58                   	pop    eax
c0022bca:	5b                   	pop    ebx
c0022bcb:	5e                   	pop    esi
c0022bcc:	c3                   	ret    
c0022bcd:	90                   	nop

c0022bce <PCI::foundDevice(PCIDeviceInfo)>:
c0022bce:	55                   	push   ebp
c0022bcf:	57                   	push   edi
c0022bd0:	56                   	push   esi
c0022bd1:	53                   	push   ebx
c0022bd2:	83 ec 1c             	sub    esp,0x1c
c0022bd5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bd9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bdf:	0f 84 52 01 00 00    	je     c0022d37 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022be5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022be9:	66 81 f9 06 04       	cmp    cx,0x406
c0022bee:	75 2c                	jne    c0022c1c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bf0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bf5:	50                   	push   eax
c0022bf6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bfb:	50                   	push   eax
c0022bfc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c01:	50                   	push   eax
c0022c02:	56                   	push   esi
c0022c03:	e8 b2 fe ff ff       	call   c0022aba <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c08:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c0c:	0f b6 c0             	movzx  eax,al
c0022c0f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c13:	83 c4 2c             	add    esp,0x2c
c0022c16:	5b                   	pop    ebx
c0022c17:	5e                   	pop    esi
c0022c18:	5f                   	pop    edi
c0022c19:	5d                   	pop    ebp
c0022c1a:	eb 8e                	jmp    c0022baa <PCI::checkBus(unsigned char)>
c0022c1c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c20:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c26:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c2a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c2e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c32:	88 d3                	mov    bl,dl
c0022c34:	85 c0                	test   eax,eax
c0022c36:	74 33                	je     c0022c6b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c3b:	85 d2                	test   edx,edx
c0022c3d:	74 28                	je     c0022c67 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c3f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c45:	31 ef                	xor    edi,ebp
c0022c47:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c4d:	75 18                	jne    c0022c67 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c4f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c53:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c59:	75 0c                	jne    c0022c67 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c5b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c61:	0f 84 d0 00 00 00    	je     c0022d37 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c67:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c69:	eb c9                	jmp    c0022c34 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c6b:	66 81 f9 01 06       	cmp    cx,0x601
c0022c70:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c74:	75 19                	jne    c0022c8f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c76:	83 ec 0c             	sub    esp,0xc
c0022c79:	68 64 01 00 00       	push   0x164
c0022c7e:	e8 c0 cb fe ff       	call   c000f843 <malloc>
c0022c83:	89 c5                	mov    ebp,eax
c0022c85:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c88:	e8 95 0f 00 00       	call   c0023c22 <SATABus::SATABus()>
c0022c8d:	eb 1e                	jmp    c0022cad <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c8f:	66 81 f9 01 01       	cmp    cx,0x101
c0022c94:	75 60                	jne    c0022cf6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c96:	83 ec 0c             	sub    esp,0xc
c0022c99:	68 70 02 00 00       	push   0x270
c0022c9e:	e8 a0 cb fe ff       	call   c000f843 <malloc>
c0022ca3:	89 c5                	mov    ebp,eax
c0022ca5:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ca8:	e8 03 03 00 00       	call   c0022fb0 <IDE::IDE()>
c0022cad:	58                   	pop    eax
c0022cae:	5a                   	pop    edx
c0022caf:	55                   	push   ebp
c0022cb0:	56                   	push   esi
c0022cb1:	e8 ca 16 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0022cb6:	83 ec 1c             	sub    esp,0x1c
c0022cb9:	b9 09 00 00 00       	mov    ecx,0x9
c0022cbe:	fc                   	cld    
c0022cbf:	89 e7                	mov    edi,esp
c0022cc1:	89 de                	mov    esi,ebx
c0022cc3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cc5:	55                   	push   ebp
c0022cc6:	e8 bf 15 ff ff       	call   c001428a <Device::preOpenPCI(PCIDeviceInfo)>
c0022ccb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022cce:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cd2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cda:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022ce2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ced:	83 c4 4c             	add    esp,0x4c
c0022cf0:	5b                   	pop    ebx
c0022cf1:	5e                   	pop    esi
c0022cf2:	5f                   	pop    edi
c0022cf3:	5d                   	pop    ebp
c0022cf4:	ff e0                	jmp    eax
c0022cf6:	83 ec 0c             	sub    esp,0xc
c0022cf9:	68 58 01 00 00       	push   0x158
c0022cfe:	e8 40 cb fe ff       	call   c000f843 <malloc>
c0022d03:	89 c5                	mov    ebp,eax
c0022d05:	58                   	pop    eax
c0022d06:	5a                   	pop    edx
c0022d07:	68 60 ca 02 c0       	push   0xc002ca60
c0022d0c:	55                   	push   ebp
c0022d0d:	e8 64 19 ff ff       	call   c0014676 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d12:	59                   	pop    ecx
c0022d13:	5f                   	pop    edi
c0022d14:	55                   	push   ebp
c0022d15:	56                   	push   esi
c0022d16:	e8 65 16 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0022d1b:	b9 09 00 00 00       	mov    ecx,0x9
c0022d20:	fc                   	cld    
c0022d21:	89 df                	mov    edi,ebx
c0022d23:	89 de                	mov    esi,ebx
c0022d25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d27:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d2b:	83 c4 2c             	add    esp,0x2c
c0022d2e:	5b                   	pop    ebx
c0022d2f:	5e                   	pop    esi
c0022d30:	5f                   	pop    edi
c0022d31:	5d                   	pop    ebp
c0022d32:	e9 53 15 ff ff       	jmp    c001428a <Device::preOpenPCI(PCIDeviceInfo)>
c0022d37:	83 c4 1c             	add    esp,0x1c
c0022d3a:	5b                   	pop    ebx
c0022d3b:	5e                   	pop    esi
c0022d3c:	5f                   	pop    edi
c0022d3d:	5d                   	pop    ebp
c0022d3e:	c3                   	ret    
c0022d3f:	90                   	nop

c0022d40 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d40:	55                   	push   ebp
c0022d41:	57                   	push   edi
c0022d42:	56                   	push   esi
c0022d43:	53                   	push   ebx
c0022d44:	83 ec 5c             	sub    esp,0x5c
c0022d47:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d4f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d53:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d5c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d60:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d69:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d6e:	6a 0c                	push   0xc
c0022d70:	55                   	push   ebp
c0022d71:	53                   	push   ebx
c0022d72:	57                   	push   edi
c0022d73:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d7a:	e8 01 fc ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d7f:	55                   	push   ebp
c0022d80:	53                   	push   ebx
c0022d81:	57                   	push   edi
c0022d82:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d89:	e8 80 fc ff ff       	call   c0022a0e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d8e:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d93:	83 c4 24             	add    esp,0x24
c0022d96:	55                   	push   ebp
c0022d97:	53                   	push   ebx
c0022d98:	57                   	push   edi
c0022d99:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d9d:	e8 f6 fc ff ff       	call   c0022a98 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022da2:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022da6:	6a 3c                	push   0x3c
c0022da8:	55                   	push   ebp
c0022da9:	53                   	push   ebx
c0022daa:	57                   	push   edi
c0022dab:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022db2:	e8 c9 fb ff ff       	call   c0022980 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022db7:	0f b6 c4             	movzx  eax,ah
c0022dba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022dbe:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022dc2:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022dc6:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0022dcb:	83 c4 24             	add    esp,0x24
c0022dce:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022dd4:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022ddb:	74 6c                	je     c0022e49 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022ddd:	31 f6                	xor    esi,esi
c0022ddf:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0022de5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022deb:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022df1:	7e 56                	jle    c0022e49 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022df3:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022df6:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022dfd:	39 cb                	cmp    ebx,ecx
c0022dff:	75 45                	jne    c0022e46 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e01:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e08:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e0c:	75 38                	jne    c0022e46 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e0e:	83 ec 0c             	sub    esp,0xc
c0022e11:	68 7a ca 02 c0       	push   0xc002ca7a
c0022e16:	e8 3f 01 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0022e1b:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0022e21:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e27:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e2f:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e33:	52                   	push   edx
c0022e34:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e38:	53                   	push   ebx
c0022e39:	68 9f ca 02 c0       	push   0xc002ca9f
c0022e3e:	e8 17 01 ff ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0022e43:	83 c4 20             	add    esp,0x20
c0022e46:	46                   	inc    esi
c0022e47:	eb 96                	jmp    c0022ddf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e49:	31 d2                	xor    edx,edx
c0022e4b:	83 ec 0c             	sub    esp,0xc
c0022e4e:	55                   	push   ebp
c0022e4f:	53                   	push   ebx
c0022e50:	57                   	push   edi
c0022e51:	52                   	push   edx
c0022e52:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e56:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e5d:	e8 7c fc ff ff       	call   c0022ade <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e62:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e66:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e6a:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e6e:	42                   	inc    edx
c0022e6f:	83 c4 20             	add    esp,0x20
c0022e72:	83 fa 06             	cmp    edx,0x6
c0022e75:	75 d4                	jne    c0022e4b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e77:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e7b:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e7f:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e83:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e87:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e8b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e8f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e94:	86 e0                	xchg   al,ah
c0022e96:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e9b:	55                   	push   ebp
c0022e9c:	53                   	push   ebx
c0022e9d:	57                   	push   edi
c0022e9e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022ea2:	e8 ab fb ff ff       	call   c0022a52 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ea7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022eab:	55                   	push   ebp
c0022eac:	53                   	push   ebx
c0022ead:	57                   	push   edi
c0022eae:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022eb5:	e8 0e fb ff ff       	call   c00229c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022eba:	83 ec 0c             	sub    esp,0xc
c0022ebd:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022ec2:	b9 09 00 00 00       	mov    ecx,0x9
c0022ec7:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ecb:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ecf:	fc                   	cld    
c0022ed0:	89 e7                	mov    edi,esp
c0022ed2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ed4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022edb:	e8 ee fc ff ff       	call   c0022bce <PCI::foundDevice(PCIDeviceInfo)>
c0022ee0:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022ee6:	5b                   	pop    ebx
c0022ee7:	5e                   	pop    esi
c0022ee8:	5f                   	pop    edi
c0022ee9:	5d                   	pop    ebp
c0022eea:	c3                   	ret    
c0022eeb:	90                   	nop

c0022eec <PCI::checkDevice(unsigned char, unsigned char)>:
c0022eec:	55                   	push   ebp
c0022eed:	57                   	push   edi
c0022eee:	56                   	push   esi
c0022eef:	53                   	push   ebx
c0022ef0:	83 ec 0c             	sub    esp,0xc
c0022ef3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ef7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022efc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f01:	6a 00                	push   0x0
c0022f03:	56                   	push   esi
c0022f04:	57                   	push   edi
c0022f05:	55                   	push   ebp
c0022f06:	e8 bd fa ff ff       	call   c00229c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f0b:	6a 00                	push   0x0
c0022f0d:	56                   	push   esi
c0022f0e:	57                   	push   edi
c0022f0f:	55                   	push   ebp
c0022f10:	e8 2b fe ff ff       	call   c0022d40 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f15:	83 c4 20             	add    esp,0x20
c0022f18:	6a 00                	push   0x0
c0022f1a:	56                   	push   esi
c0022f1b:	57                   	push   edi
c0022f1c:	55                   	push   ebp
c0022f1d:	e8 c8 fa ff ff       	call   c00229ea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f22:	83 c4 10             	add    esp,0x10
c0022f25:	84 c0                	test   al,al
c0022f27:	79 27                	jns    c0022f50 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f29:	bb 01 00 00 00       	mov    ebx,0x1
c0022f2e:	53                   	push   ebx
c0022f2f:	56                   	push   esi
c0022f30:	57                   	push   edi
c0022f31:	55                   	push   ebp
c0022f32:	e8 91 fa ff ff       	call   c00229c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f37:	83 c4 10             	add    esp,0x10
c0022f3a:	66 40                	inc    ax
c0022f3c:	74 0c                	je     c0022f4a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f3e:	53                   	push   ebx
c0022f3f:	56                   	push   esi
c0022f40:	57                   	push   edi
c0022f41:	55                   	push   ebp
c0022f42:	e8 f9 fd ff ff       	call   c0022d40 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f47:	83 c4 10             	add    esp,0x10
c0022f4a:	43                   	inc    ebx
c0022f4b:	83 fb 08             	cmp    ebx,0x8
c0022f4e:	75 de                	jne    c0022f2e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f50:	83 c4 0c             	add    esp,0xc
c0022f53:	5b                   	pop    ebx
c0022f54:	5e                   	pop    esi
c0022f55:	5f                   	pop    edi
c0022f56:	5d                   	pop    ebp
c0022f57:	c3                   	ret    

c0022f58 <PCI::detect()>:
c0022f58:	56                   	push   esi
c0022f59:	53                   	push   ebx
c0022f5a:	53                   	push   ebx
c0022f5b:	31 db                	xor    ebx,ebx
c0022f5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f61:	6a 00                	push   0x0
c0022f63:	6a 00                	push   0x0
c0022f65:	6a 00                	push   0x0
c0022f67:	56                   	push   esi
c0022f68:	e8 7d fa ff ff       	call   c00229ea <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f6d:	83 c4 10             	add    esp,0x10
c0022f70:	a8 80                	test   al,0x80
c0022f72:	75 21                	jne    c0022f95 <PCI::detect()+0x3d>
c0022f74:	51                   	push   ecx
c0022f75:	51                   	push   ecx
c0022f76:	6a 00                	push   0x0
c0022f78:	56                   	push   esi
c0022f79:	e8 2c fc ff ff       	call   c0022baa <PCI::checkBus(unsigned char)>
c0022f7e:	83 c4 10             	add    esp,0x10
c0022f81:	eb 24                	jmp    c0022fa7 <PCI::detect()+0x4f>
c0022f83:	52                   	push   edx
c0022f84:	52                   	push   edx
c0022f85:	53                   	push   ebx
c0022f86:	43                   	inc    ebx
c0022f87:	56                   	push   esi
c0022f88:	e8 1d fc ff ff       	call   c0022baa <PCI::checkBus(unsigned char)>
c0022f8d:	83 c4 10             	add    esp,0x10
c0022f90:	83 fb 08             	cmp    ebx,0x8
c0022f93:	74 12                	je     c0022fa7 <PCI::detect()+0x4f>
c0022f95:	53                   	push   ebx
c0022f96:	6a 00                	push   0x0
c0022f98:	6a 00                	push   0x0
c0022f9a:	56                   	push   esi
c0022f9b:	e8 28 fa ff ff       	call   c00229c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fa0:	83 c4 10             	add    esp,0x10
c0022fa3:	66 40                	inc    ax
c0022fa5:	74 dc                	je     c0022f83 <PCI::detect()+0x2b>
c0022fa7:	58                   	pop    eax
c0022fa8:	5b                   	pop    ebx
c0022fa9:	5e                   	pop    esi
c0022faa:	c3                   	ret    
c0022fab:	90                   	nop

c0022fac <IDE::close(int, int, void*)>:
c0022fac:	83 c8 ff             	or     eax,0xffffffff
c0022faf:	c3                   	ret    

c0022fb0 <IDE::IDE()>:
c0022fb0:	83 ec 0c             	sub    esp,0xc
c0022fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb7:	83 ec 08             	sub    esp,0x8
c0022fba:	68 e8 ca 02 c0       	push   0xc002cae8
c0022fbf:	50                   	push   eax
c0022fc0:	e8 47 17 ff ff       	call   c001470c <HardDiskController::HardDiskController(char const*)>
c0022fc5:	83 c4 10             	add    esp,0x10
c0022fc8:	ba 28 cd 02 c0       	mov    edx,0xc002cd28
c0022fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd1:	89 10                	mov    DWORD PTR [eax],edx
c0022fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fde:	90                   	nop
c0022fdf:	83 c4 0c             	add    esp,0xc
c0022fe2:	c3                   	ret    
c0022fe3:	90                   	nop

c0022fe4 <IDE::prepareInterrupt(unsigned char)>:
c0022fe4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fe9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fed:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022ff5:	c3                   	ret    

c0022ff6 <selectDrive(unsigned char, unsigned char)>:
c0022ff6:	c3                   	ret    
c0022ff7:	90                   	nop

c0022ff8 <IDE::getBase(unsigned char)>:
c0022ff8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022ffd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023001:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023009:	c3                   	ret    

c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002300a:	55                   	push   ebp
c002300b:	57                   	push   edi
c002300c:	56                   	push   esi
c002300d:	53                   	push   ebx
c002300e:	83 ec 1c             	sub    esp,0x1c
c0023011:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023015:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023019:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002301c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023020:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023024:	80 f9 03             	cmp    cl,0x3
c0023027:	77 51                	ja     c002307a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023029:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002302d:	0f b6 f2             	movzx  esi,dl
c0023030:	0f b6 db             	movzx  ebx,bl
c0023033:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023036:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002303a:	83 ca 80             	or     edx,0xffffff80
c002303d:	0f b6 d2             	movzx  edx,dl
c0023040:	52                   	push   edx
c0023041:	6a 0c                	push   0xc
c0023043:	56                   	push   esi
c0023044:	57                   	push   edi
c0023045:	e8 c0 ff ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002304a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002304f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023053:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023057:	ee                   	out    dx,al
c0023058:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002305d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023061:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023065:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023069:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023071:	83 c4 2c             	add    esp,0x2c
c0023074:	5b                   	pop    ebx
c0023075:	5e                   	pop    esi
c0023076:	5f                   	pop    edi
c0023077:	5d                   	pop    ebp
c0023078:	eb 90                	jmp    c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002307a:	80 fb 07             	cmp    bl,0x7
c002307d:	77 12                	ja     c0023091 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002307f:	0f b6 d2             	movzx  edx,dl
c0023082:	0f b6 db             	movzx  ebx,bl
c0023085:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002308d:	89 da                	mov    edx,ebx
c002308f:	eb 2f                	jmp    c00230c0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023091:	80 fb 0d             	cmp    bl,0xd
c0023094:	77 13                	ja     c00230a9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023096:	0f b6 d2             	movzx  edx,dl
c0023099:	0f b6 db             	movzx  ebx,bl
c002309c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00230a3:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00230a7:	eb 17                	jmp    c00230c0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230a9:	80 fb 15             	cmp    bl,0x15
c00230ac:	77 13                	ja     c00230c1 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00230ae:	0f b6 d2             	movzx  edx,dl
c00230b1:	0f b6 db             	movzx  ebx,bl
c00230b4:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230bc:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230c0:	ee                   	out    dx,al
c00230c1:	83 c4 1c             	add    esp,0x1c
c00230c4:	5b                   	pop    ebx
c00230c5:	5e                   	pop    esi
c00230c6:	5f                   	pop    edi
c00230c7:	5d                   	pop    ebp
c00230c8:	c3                   	ret    
c00230c9:	90                   	nop

c00230ca <IDE::read(unsigned char, unsigned char)>:
c00230ca:	55                   	push   ebp
c00230cb:	57                   	push   edi
c00230cc:	56                   	push   esi
c00230cd:	53                   	push   ebx
c00230ce:	83 ec 1c             	sub    esp,0x1c
c00230d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230d9:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230dc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230e0:	3c 03                	cmp    al,0x3
c00230e2:	77 43                	ja     c0023127 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230e4:	0f b6 f2             	movzx  esi,dl
c00230e7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230ea:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230ee:	83 c8 80             	or     eax,0xffffff80
c00230f1:	0f b6 c0             	movzx  eax,al
c00230f4:	50                   	push   eax
c00230f5:	6a 0c                	push   0xc
c00230f7:	56                   	push   esi
c00230f8:	57                   	push   edi
c00230f9:	e8 0c ff ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230fe:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023103:	0f b6 c3             	movzx  eax,bl
c0023106:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002310a:	ec                   	in     al,dx
c002310b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002310f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023114:	52                   	push   edx
c0023115:	6a 0c                	push   0xc
c0023117:	56                   	push   esi
c0023118:	57                   	push   edi
c0023119:	e8 ec fe ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002311e:	83 c4 20             	add    esp,0x20
c0023121:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023125:	eb 49                	jmp    c0023170 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023127:	80 fb 07             	cmp    bl,0x7
c002312a:	77 12                	ja     c002313e <IDE::read(unsigned char, unsigned char)+0x74>
c002312c:	0f b6 d2             	movzx  edx,dl
c002312f:	0f b6 c3             	movzx  eax,bl
c0023132:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002313a:	89 c2                	mov    edx,eax
c002313c:	eb 31                	jmp    c002316f <IDE::read(unsigned char, unsigned char)+0xa5>
c002313e:	80 fb 0d             	cmp    bl,0xd
c0023141:	77 13                	ja     c0023156 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023143:	0f b6 d2             	movzx  edx,dl
c0023146:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002314d:	0f b6 d3             	movzx  edx,bl
c0023150:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023154:	eb 19                	jmp    c002316f <IDE::read(unsigned char, unsigned char)+0xa5>
c0023156:	31 c0                	xor    eax,eax
c0023158:	80 fb 15             	cmp    bl,0x15
c002315b:	77 13                	ja     c0023170 <IDE::read(unsigned char, unsigned char)+0xa6>
c002315d:	0f b6 d2             	movzx  edx,dl
c0023160:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023168:	0f b6 d3             	movzx  edx,bl
c002316b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002316f:	ec                   	in     al,dx
c0023170:	83 c4 1c             	add    esp,0x1c
c0023173:	5b                   	pop    ebx
c0023174:	5e                   	pop    esi
c0023175:	5f                   	pop    edi
c0023176:	5d                   	pop    ebp
c0023177:	c3                   	ret    

c0023178 <IDE::waitInterrupt(unsigned char)>:
c0023178:	55                   	push   ebp
c0023179:	57                   	push   edi
c002317a:	56                   	push   esi
c002317b:	53                   	push   ebx
c002317c:	31 db                	xor    ebx,ebx
c002317e:	83 ec 0c             	sub    esp,0xc
c0023181:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023185:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002318a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023192:	89 e8                	mov    eax,ebp
c0023194:	84 c0                	test   al,al
c0023196:	75 34                	jne    c00231cc <IDE::waitInterrupt(unsigned char)+0x54>
c0023198:	52                   	push   edx
c0023199:	6a 0c                	push   0xc
c002319b:	56                   	push   esi
c002319c:	57                   	push   edi
c002319d:	e8 28 ff ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00231a2:	83 c4 10             	add    esp,0x10
c00231a5:	a8 01                	test   al,0x1
c00231a7:	75 2b                	jne    c00231d4 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231a9:	f6 c3 04             	test   bl,0x4
c00231ac:	75 16                	jne    c00231c4 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231ae:	83 fb 32             	cmp    ebx,0x32
c00231b1:	7e 11                	jle    c00231c4 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231b3:	50                   	push   eax
c00231b4:	50                   	push   eax
c00231b5:	6a 00                	push   0x0
c00231b7:	68 80 96 98 00       	push   0x989680
c00231bc:	e8 8b b1 ff ff       	call   c001e34c <nanoSleep(unsigned long long)>
c00231c1:	83 c4 10             	add    esp,0x10
c00231c4:	83 fb 3c             	cmp    ebx,0x3c
c00231c7:	74 0b                	je     c00231d4 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231c9:	43                   	inc    ebx
c00231ca:	eb be                	jmp    c002318a <IDE::waitInterrupt(unsigned char)+0x12>
c00231cc:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231d4:	83 c4 0c             	add    esp,0xc
c00231d7:	89 e8                	mov    eax,ebp
c00231d9:	5b                   	pop    ebx
c00231da:	5e                   	pop    esi
c00231db:	5f                   	pop    edi
c00231dc:	5d                   	pop    ebp
c00231dd:	c3                   	ret    

c00231de <ideChannel0IRQHandler(regs*, void*)>:
c00231de:	83 ec 10             	sub    esp,0x10
c00231e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231e5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231ec:	6a 07                	push   0x7
c00231ee:	6a 00                	push   0x0
c00231f0:	50                   	push   eax
c00231f1:	e8 d4 fe ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00231f6:	83 c4 1c             	add    esp,0x1c
c00231f9:	c3                   	ret    

c00231fa <ideChannel1IRQHandler(regs*, void*)>:
c00231fa:	83 ec 10             	sub    esp,0x10
c00231fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023201:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023208:	6a 07                	push   0x7
c002320a:	6a 01                	push   0x1
c002320c:	50                   	push   eax
c002320d:	e8 b8 fe ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c0023212:	83 c4 1c             	add    esp,0x1c
c0023215:	c3                   	ret    

c0023216 <IDE::enableIRQs(unsigned char, bool)>:
c0023216:	57                   	push   edi
c0023217:	56                   	push   esi
c0023218:	be 04 00 00 00       	mov    esi,0x4
c002321d:	53                   	push   ebx
c002321e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023223:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023227:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002322c:	0f 94 c0             	sete   al
c002322f:	d1 e0                	shl    eax,1
c0023231:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023238:	0f b6 c0             	movzx  eax,al
c002323b:	50                   	push   eax
c002323c:	6a 0c                	push   0xc
c002323e:	57                   	push   edi
c002323f:	53                   	push   ebx
c0023240:	e8 c5 fd ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023245:	83 c4 10             	add    esp,0x10
c0023248:	50                   	push   eax
c0023249:	6a 0c                	push   0xc
c002324b:	57                   	push   edi
c002324c:	53                   	push   ebx
c002324d:	e8 78 fe ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c0023252:	83 c4 10             	add    esp,0x10
c0023255:	4e                   	dec    esi
c0023256:	75 f0                	jne    c0023248 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023258:	5b                   	pop    ebx
c0023259:	5e                   	pop    esi
c002325a:	5f                   	pop    edi
c002325b:	c3                   	ret    

c002325c <IDE::open(int, int, void*)>:
c002325c:	55                   	push   ebp
c002325d:	57                   	push   edi
c002325e:	56                   	push   esi
c002325f:	53                   	push   ebx
c0023260:	83 ec 1c             	sub    esp,0x1c
c0023263:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023267:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023270:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023279:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023280:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023287:	0f 85 b0 02 00 00    	jne    c002353d <IDE::open(int, int, void*)+0x2e1>
c002328d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023293:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023297:	83 e0 7f             	and    eax,0x7f
c002329a:	3c 05                	cmp    al,0x5
c002329c:	74 04                	je     c00232a2 <IDE::open(int, int, void*)+0x46>
c002329e:	3c 0f                	cmp    al,0xf
c00232a0:	75 32                	jne    c00232d4 <IDE::open(int, int, void*)+0x78>
c00232a2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00232a8:	83 e0 fc             	and    eax,0xfffffffc
c00232ab:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232b2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00232b8:	83 e0 fc             	and    eax,0xfffffffc
c00232bb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232c2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232c8:	83 e0 fc             	and    eax,0xfffffffc
c00232cb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232d2:	eb 14                	jmp    c00232e8 <IDE::open(int, int, void*)+0x8c>
c00232d4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232de:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232e8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232ef:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232fa:	89 c6                	mov    esi,eax
c00232fc:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023301:	c1 e6 10             	shl    esi,0x10
c0023304:	89 e8                	mov    eax,ebp
c0023306:	89 fa                	mov    edx,edi
c0023308:	c1 e0 0b             	shl    eax,0xb
c002330b:	09 f0                	or     eax,esi
c002330d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023314:	c1 e6 08             	shl    esi,0x8
c0023317:	09 c6                	or     esi,eax
c0023319:	89 f0                	mov    eax,esi
c002331b:	0d 08 00 00 80       	or     eax,0x80000008
c0023320:	ef                   	out    dx,eax
c0023321:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023326:	89 ca                	mov    edx,ecx
c0023328:	ed                   	in     eax,dx
c0023329:	c1 e8 10             	shr    eax,0x10
c002332c:	3d ff ff 00 00       	cmp    eax,0xffff
c0023331:	0f 84 f5 00 00 00    	je     c002342c <IDE::open(int, int, void*)+0x1d0>
c0023337:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002333d:	89 fa                	mov    edx,edi
c002333f:	89 f0                	mov    eax,esi
c0023341:	ef                   	out    dx,eax
c0023342:	b0 fe                	mov    al,0xfe
c0023344:	89 ca                	mov    edx,ecx
c0023346:	ee                   	out    dx,al
c0023347:	89 f0                	mov    eax,esi
c0023349:	89 fa                	mov    edx,edi
c002334b:	ef                   	out    dx,eax
c002334c:	89 ca                	mov    edx,ecx
c002334e:	ed                   	in     eax,dx
c002334f:	3c fe                	cmp    al,0xfe
c0023351:	0f 85 a9 00 00 00    	jne    c0023400 <IDE::open(int, int, void*)+0x1a4>
c0023357:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c002335d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023364:	74 33                	je     c0023399 <IDE::open(int, int, void*)+0x13d>
c0023366:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002336c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023370:	40                   	inc    eax
c0023371:	83 ec 0c             	sub    esp,0xc
c0023374:	0f b6 c0             	movzx  eax,al
c0023377:	50                   	push   eax
c0023378:	55                   	push   ebp
c0023379:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002337d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023383:	51                   	push   ecx
c0023384:	e8 d7 4e ff ff       	call   c0018260 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023389:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002338e:	83 c4 1c             	add    esp,0x1c
c0023391:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023397:	eb 0a                	jmp    c00233a3 <IDE::open(int, int, void*)+0x147>
c0023399:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00233a3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00233aa:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00233b1:	c1 e1 10             	shl    ecx,0x10
c00233b4:	c1 e0 08             	shl    eax,0x8
c00233b7:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233bc:	09 c1                	or     ecx,eax
c00233be:	89 fa                	mov    edx,edi
c00233c0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233c7:	c1 e0 0b             	shl    eax,0xb
c00233ca:	09 c1                	or     ecx,eax
c00233cc:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233d2:	89 c8                	mov    eax,ecx
c00233d4:	ef                   	out    dx,eax
c00233d5:	be fc 0c 00 00       	mov    esi,0xcfc
c00233da:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233e0:	89 f2                	mov    edx,esi
c00233e2:	ee                   	out    dx,al
c00233e3:	89 c8                	mov    eax,ecx
c00233e5:	89 fa                	mov    edx,edi
c00233e7:	ef                   	out    dx,eax
c00233e8:	89 f2                	mov    edx,esi
c00233ea:	ed                   	in     eax,dx
c00233eb:	0f b6 c0             	movzx  eax,al
c00233ee:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233f4:	74 46                	je     c002343c <IDE::open(int, int, void*)+0x1e0>
c00233f6:	83 ec 0c             	sub    esp,0xc
c00233f9:	68 00 cb 02 c0       	push   0xc002cb00
c00233fe:	eb 34                	jmp    c0023434 <IDE::open(int, int, void*)+0x1d8>
c0023400:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023409:	75 17                	jne    c0023422 <IDE::open(int, int, void*)+0x1c6>
c002340b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023410:	74 07                	je     c0023419 <IDE::open(int, int, void*)+0x1bd>
c0023412:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023417:	75 09                	jne    c0023422 <IDE::open(int, int, void*)+0x1c6>
c0023419:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023420:	eb 1a                	jmp    c002343c <IDE::open(int, int, void*)+0x1e0>
c0023422:	83 ec 0c             	sub    esp,0xc
c0023425:	68 08 cb 02 c0       	push   0xc002cb08
c002342a:	eb 08                	jmp    c0023434 <IDE::open(int, int, void*)+0x1d8>
c002342c:	83 ec 0c             	sub    esp,0xc
c002342f:	68 39 cb 02 c0       	push   0xc002cb39
c0023434:	e8 ce 71 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0023439:	83 c4 10             	add    esp,0x10
c002343c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023443:	79 1a                	jns    c002345f <IDE::open(int, int, void*)+0x203>
c0023445:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002344b:	83 e0 fc             	and    eax,0xfffffffc
c002344e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023455:	83 c0 08             	add    eax,0x8
c0023458:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002345f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023465:	89 c2                	mov    edx,eax
c0023467:	83 e2 0f             	and    edx,0xf
c002346a:	66 83 fa 08          	cmp    dx,0x8
c002346e:	75 0a                	jne    c002347a <IDE::open(int, int, void*)+0x21e>
c0023470:	83 e8 02             	sub    eax,0x2
c0023473:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002347a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023480:	89 c2                	mov    edx,eax
c0023482:	83 e2 0f             	and    edx,0xf
c0023485:	66 83 fa 08          	cmp    dx,0x8
c0023489:	75 0a                	jne    c0023495 <IDE::open(int, int, void*)+0x239>
c002348b:	83 e8 02             	sub    eax,0x2
c002348e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023495:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002349c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00234a3:	89 d0                	mov    eax,edx
c00234a5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234a8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234ac:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00234b0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00234b3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234b8:	0f b6 c9             	movzx  ecx,cl
c00234bb:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234c2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234c5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234c9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234cd:	8d 50 02             	lea    edx,[eax+0x2]
c00234d0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234d5:	0f b6 d2             	movzx  edx,dl
c00234d8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234de:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234e1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234e5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234e9:	8d 48 03             	lea    ecx,[eax+0x3]
c00234ec:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234f1:	0f b6 c9             	movzx  ecx,cl
c00234f4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234fa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234fd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023501:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023505:	8d 50 04             	lea    edx,[eax+0x4]
c0023508:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002350e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023513:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002351a:	66 85 f6             	test   si,si
c002351d:	74 3e                	je     c002355d <IDE::open(int, int, void*)+0x301>
c002351f:	0f b6 d2             	movzx  edx,dl
c0023522:	83 c0 05             	add    eax,0x5
c0023525:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023528:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002352c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023530:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023536:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002353b:	eb 20                	jmp    c002355d <IDE::open(int, int, void*)+0x301>
c002353d:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023547:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023551:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023558:	e9 02 ff ff ff       	jmp    c002345f <IDE::open(int, int, void*)+0x203>
c002355d:	52                   	push   edx
c002355e:	52                   	push   edx
c002355f:	6a 00                	push   0x0
c0023561:	53                   	push   ebx
c0023562:	e8 7d fa ff ff       	call   c0022fe4 <IDE::prepareInterrupt(unsigned char)>
c0023567:	59                   	pop    ecx
c0023568:	5e                   	pop    esi
c0023569:	6a 01                	push   0x1
c002356b:	53                   	push   ebx
c002356c:	e8 73 fa ff ff       	call   c0022fe4 <IDE::prepareInterrupt(unsigned char)>
c0023571:	83 c4 0c             	add    esp,0xc
c0023574:	6a 00                	push   0x0
c0023576:	6a 00                	push   0x0
c0023578:	53                   	push   ebx
c0023579:	e8 98 fc ff ff       	call   c0023216 <IDE::enableIRQs(unsigned char, bool)>
c002357e:	83 c4 0c             	add    esp,0xc
c0023581:	6a 00                	push   0x0
c0023583:	6a 01                	push   0x1
c0023585:	53                   	push   ebx
c0023586:	e8 8b fc ff ff       	call   c0023216 <IDE::enableIRQs(unsigned char, bool)>
c002358b:	83 c4 10             	add    esp,0x10
c002358e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023595:	74 40                	je     c00235d7 <IDE::open(int, int, void*)+0x37b>
c0023597:	83 ec 0c             	sub    esp,0xc
c002359a:	68 63 cb 02 c0       	push   0xc002cb63
c002359f:	e8 b6 f9 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00235a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235a7:	6a 01                	push   0x1
c00235a9:	68 de 31 02 c0       	push   0xc00231de
c00235ae:	6a 0e                	push   0xe
c00235b0:	53                   	push   ebx
c00235b1:	e8 4e 0d ff ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235b6:	83 c4 14             	add    esp,0x14
c00235b9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235bf:	53                   	push   ebx
c00235c0:	6a 01                	push   0x1
c00235c2:	68 fa 31 02 c0       	push   0xc00231fa
c00235c7:	6a 0f                	push   0xf
c00235c9:	53                   	push   ebx
c00235ca:	e8 35 0d ff ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235cf:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235d5:	eb 4a                	jmp    c0023621 <IDE::open(int, int, void*)+0x3c5>
c00235d7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235e1:	50                   	push   eax
c00235e2:	6a 0f                	push   0xf
c00235e4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235ea:	68 7f cb 02 c0       	push   0xc002cb7f
c00235ef:	e8 66 f9 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00235f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235f7:	6a 00                	push   0x0
c00235f9:	68 de 31 02 c0       	push   0xc00231de
c00235fe:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023604:	53                   	push   ebx
c0023605:	e8 fa 0c ff ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002360a:	83 c4 14             	add    esp,0x14
c002360d:	53                   	push   ebx
c002360e:	6a 00                	push   0x0
c0023610:	68 fa 31 02 c0       	push   0xc00231fa
c0023615:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002361b:	53                   	push   ebx
c002361c:	e8 e3 0c ff ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023621:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023623:	83 c4 20             	add    esp,0x20
c0023626:	83 ec 0c             	sub    esp,0xc
c0023629:	53                   	push   ebx
c002362a:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002362d:	83 c4 0c             	add    esp,0xc
c0023630:	6a 07                	push   0x7
c0023632:	6a 00                	push   0x0
c0023634:	53                   	push   ebx
c0023635:	e8 90 fa ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c002363a:	83 c4 0c             	add    esp,0xc
c002363d:	6a 07                	push   0x7
c002363f:	6a 01                	push   0x1
c0023641:	53                   	push   ebx
c0023642:	e8 83 fa ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c0023647:	83 c4 0c             	add    esp,0xc
c002364a:	6a 01                	push   0x1
c002364c:	6a 00                	push   0x0
c002364e:	53                   	push   ebx
c002364f:	e8 c2 fb ff ff       	call   c0023216 <IDE::enableIRQs(unsigned char, bool)>
c0023654:	83 c4 0c             	add    esp,0xc
c0023657:	6a 01                	push   0x1
c0023659:	6a 01                	push   0x1
c002365b:	53                   	push   ebx
c002365c:	e8 b5 fb ff ff       	call   c0023216 <IDE::enableIRQs(unsigned char, bool)>
c0023661:	83 c4 2c             	add    esp,0x2c
c0023664:	31 c0                	xor    eax,eax
c0023666:	5b                   	pop    ebx
c0023667:	5e                   	pop    esi
c0023668:	5f                   	pop    edi
c0023669:	5d                   	pop    ebp
c002366a:	c3                   	ret    
c002366b:	90                   	nop

c002366c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002366c:	55                   	push   ebp
c002366d:	57                   	push   edi
c002366e:	56                   	push   esi
c002366f:	53                   	push   ebx
c0023670:	83 ec 1c             	sub    esp,0x1c
c0023673:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023677:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002367b:	8d 50 f8             	lea    edx,[eax-0x8]
c002367e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023682:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023686:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002368a:	80 fa 03             	cmp    dl,0x3
c002368d:	77 5d                	ja     c00236ec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002368f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023693:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023697:	0f b6 db             	movzx  ebx,bl
c002369a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002369d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00236a1:	83 ca 80             	or     edx,0xffffff80
c00236a4:	0f b6 d2             	movzx  edx,dl
c00236a7:	52                   	push   edx
c00236a8:	6a 0c                	push   0xc
c00236aa:	53                   	push   ebx
c00236ab:	56                   	push   esi
c00236ac:	e8 59 f9 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236b1:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00236b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236be:	0f b6 c0             	movzx  eax,al
c00236c1:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236c5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236c7:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236cc:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236d0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236d8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236e0:	83 c4 2c             	add    esp,0x2c
c00236e3:	5b                   	pop    ebx
c00236e4:	5e                   	pop    esi
c00236e5:	5f                   	pop    edi
c00236e6:	5d                   	pop    ebp
c00236e7:	e9 1e f9 ff ff       	jmp    c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236ec:	3c 07                	cmp    al,0x7
c00236ee:	77 10                	ja     c0023700 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236f0:	0f b6 db             	movzx  ebx,bl
c00236f3:	0f b6 d0             	movzx  edx,al
c00236f6:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236fe:	eb 2d                	jmp    c002372d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023700:	3c 0d                	cmp    al,0xd
c0023702:	77 13                	ja     c0023717 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023704:	0f b6 db             	movzx  ebx,bl
c0023707:	0f b6 c0             	movzx  eax,al
c002370a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023711:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023715:	eb 16                	jmp    c002372d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023717:	3c 15                	cmp    al,0x15
c0023719:	77 14                	ja     c002372f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002371b:	0f b6 db             	movzx  ebx,bl
c002371e:	0f b6 c0             	movzx  eax,al
c0023721:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023729:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002372d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002372f:	83 c4 1c             	add    esp,0x1c
c0023732:	5b                   	pop    ebx
c0023733:	5e                   	pop    esi
c0023734:	5f                   	pop    edi
c0023735:	5d                   	pop    ebp
c0023736:	c3                   	ret    
c0023737:	90                   	nop

c0023738 <IDE::detect()>:
c0023738:	55                   	push   ebp
c0023739:	57                   	push   edi
c002373a:	56                   	push   esi
c002373b:	53                   	push   ebx
c002373c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023742:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023749:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023750:	0f 85 be 02 00 00    	jne    c0023a14 <IDE::detect()+0x2dc>
c0023756:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002375d:	31 f6                	xor    esi,esi
c002375f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023767:	31 ed                	xor    ebp,ebp
c0023769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002376d:	c1 e0 06             	shl    eax,0x6
c0023770:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023778:	89 e8                	mov    eax,ebp
c002377a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002377e:	c1 e0 04             	shl    eax,0x4
c0023781:	83 c8 a0             	or     eax,0xffffffa0
c0023784:	0f b6 c0             	movzx  eax,al
c0023787:	50                   	push   eax
c0023788:	6a 06                	push   0x6
c002378a:	56                   	push   esi
c002378b:	53                   	push   ebx
c002378c:	e8 79 f8 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023791:	83 c4 0c             	add    esp,0xc
c0023794:	6a 0c                	push   0xc
c0023796:	56                   	push   esi
c0023797:	53                   	push   ebx
c0023798:	e8 2d f9 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c002379d:	83 c4 0c             	add    esp,0xc
c00237a0:	6a 0c                	push   0xc
c00237a2:	56                   	push   esi
c00237a3:	53                   	push   ebx
c00237a4:	e8 21 f9 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00237a9:	83 c4 0c             	add    esp,0xc
c00237ac:	6a 0c                	push   0xc
c00237ae:	56                   	push   esi
c00237af:	53                   	push   ebx
c00237b0:	e8 15 f9 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00237b5:	83 c4 0c             	add    esp,0xc
c00237b8:	6a 0c                	push   0xc
c00237ba:	56                   	push   esi
c00237bb:	53                   	push   ebx
c00237bc:	e8 09 f9 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00237c1:	68 ec 00 00 00       	push   0xec
c00237c6:	6a 07                	push   0x7
c00237c8:	56                   	push   esi
c00237c9:	53                   	push   ebx
c00237ca:	e8 3b f8 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237cf:	83 c4 1c             	add    esp,0x1c
c00237d2:	6a 0c                	push   0xc
c00237d4:	56                   	push   esi
c00237d5:	53                   	push   ebx
c00237d6:	e8 ef f8 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00237db:	83 c4 0c             	add    esp,0xc
c00237de:	6a 0c                	push   0xc
c00237e0:	56                   	push   esi
c00237e1:	53                   	push   ebx
c00237e2:	e8 e3 f8 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00237e7:	83 c4 0c             	add    esp,0xc
c00237ea:	6a 0c                	push   0xc
c00237ec:	56                   	push   esi
c00237ed:	53                   	push   ebx
c00237ee:	e8 d7 f8 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00237f3:	83 c4 0c             	add    esp,0xc
c00237f6:	6a 0c                	push   0xc
c00237f8:	56                   	push   esi
c00237f9:	53                   	push   ebx
c00237fa:	e8 cb f8 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00237ff:	83 c4 0c             	add    esp,0xc
c0023802:	6a 0c                	push   0xc
c0023804:	56                   	push   esi
c0023805:	53                   	push   ebx
c0023806:	e8 bf f8 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c002380b:	83 c4 10             	add    esp,0x10
c002380e:	84 c0                	test   al,al
c0023810:	0f 84 8b 01 00 00    	je     c00239a1 <IDE::detect()+0x269>
c0023816:	31 ff                	xor    edi,edi
c0023818:	50                   	push   eax
c0023819:	6a 0c                	push   0xc
c002381b:	56                   	push   esi
c002381c:	53                   	push   ebx
c002381d:	e8 a8 f8 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c0023822:	83 c4 10             	add    esp,0x10
c0023825:	a8 01                	test   al,0x1
c0023827:	0f 85 8e 01 00 00    	jne    c00239bb <IDE::detect()+0x283>
c002382d:	84 c0                	test   al,al
c002382f:	78 04                	js     c0023835 <IDE::detect()+0xfd>
c0023831:	a8 08                	test   al,0x8
c0023833:	75 27                	jne    c002385c <IDE::detect()+0x124>
c0023835:	47                   	inc    edi
c0023836:	81 ff 17 01 00 00    	cmp    edi,0x117
c002383c:	7e da                	jle    c0023818 <IDE::detect()+0xe0>
c002383e:	50                   	push   eax
c002383f:	50                   	push   eax
c0023840:	6a 00                	push   0x0
c0023842:	68 40 4b 4c 00       	push   0x4c4b40
c0023847:	e8 00 ab ff ff       	call   c001e34c <nanoSleep(unsigned long long)>
c002384c:	83 c4 10             	add    esp,0x10
c002384f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023855:	75 c1                	jne    c0023818 <IDE::detect()+0xe0>
c0023857:	e9 5f 01 00 00       	jmp    c00239bb <IDE::detect()+0x283>
c002385c:	31 c9                	xor    ecx,ecx
c002385e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023862:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023866:	83 ec 0c             	sub    esp,0xc
c0023869:	68 80 00 00 00       	push   0x80
c002386e:	57                   	push   edi
c002386f:	6a 00                	push   0x0
c0023871:	56                   	push   esi
c0023872:	53                   	push   ebx
c0023873:	e8 f4 fd ff ff       	call   c002366c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023878:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002387d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023881:	89 d1                	mov    ecx,edx
c0023883:	c1 e0 06             	shl    eax,0x6
c0023886:	01 d8                	add    eax,ebx
c0023888:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002388f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023896:	89 f2                	mov    edx,esi
c0023898:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002389e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00238a2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00238a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238ac:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00238b3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00238bb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238c2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238ca:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238d0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238d7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238dd:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238e1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238e5:	83 c4 20             	add    esp,0x20
c00238e8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238eb:	83 c0 02             	add    eax,0x2
c00238ee:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238f4:	83 c7 02             	add    edi,0x2
c00238f7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238fa:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023900:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023904:	75 e2                	jne    c00238e8 <IDE::detect()+0x1b0>
c0023906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002390a:	c1 e0 06             	shl    eax,0x6
c002390d:	01 d8                	add    eax,ebx
c002390f:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023915:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002391c:	66 c1 ea 09          	shr    dx,0x9
c0023920:	83 e2 01             	and    edx,0x1
c0023923:	84 c9                	test   cl,cl
c0023925:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002392b:	75 2f                	jne    c002395c <IDE::detect()+0x224>
c002392d:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023933:	85 c0                	test   eax,eax
c0023935:	74 66                	je     c002399d <IDE::detect()+0x265>
c0023937:	50                   	push   eax
c0023938:	55                   	push   ebp
c0023939:	56                   	push   esi
c002393a:	68 9b cb 02 c0       	push   0xc002cb9b
c002393f:	e8 16 f6 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023944:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002394b:	e8 f3 be fe ff       	call   c000f843 <malloc>
c0023950:	89 c7                	mov    edi,eax
c0023952:	89 04 24             	mov    DWORD PTR [esp],eax
c0023955:	e8 78 06 00 00       	call   c0023fd2 <ATA::ATA()>
c002395a:	eb 28                	jmp    c0023984 <IDE::detect()+0x24c>
c002395c:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023962:	55                   	push   ebp
c0023963:	56                   	push   esi
c0023964:	68 ca cb 02 c0       	push   0xc002cbca
c0023969:	e8 ec f5 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c002396e:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023975:	e8 c9 be fe ff       	call   c000f843 <malloc>
c002397a:	89 c7                	mov    edi,eax
c002397c:	89 04 24             	mov    DWORD PTR [esp],eax
c002397f:	e8 8e 0c 00 00       	call   c0024612 <ATAPI::ATAPI()>
c0023984:	5a                   	pop    edx
c0023985:	59                   	pop    ecx
c0023986:	57                   	push   edi
c0023987:	53                   	push   ebx
c0023988:	e8 f3 09 ff ff       	call   c0014380 <Device::addChild(Device*)>
c002398d:	8b 07                	mov    eax,DWORD PTR [edi]
c002398f:	53                   	push   ebx
c0023990:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023994:	6a 00                	push   0x0
c0023996:	57                   	push   edi
c0023997:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002399a:	83 c4 20             	add    esp,0x20
c002399d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00239a1:	4d                   	dec    ebp
c00239a2:	74 0a                	je     c00239ae <IDE::detect()+0x276>
c00239a4:	bd 01 00 00 00       	mov    ebp,0x1
c00239a9:	e9 bb fd ff ff       	jmp    c0023769 <IDE::detect()+0x31>
c00239ae:	4e                   	dec    esi
c00239af:	74 63                	je     c0023a14 <IDE::detect()+0x2dc>
c00239b1:	be 01 00 00 00       	mov    esi,0x1
c00239b6:	e9 ac fd ff ff       	jmp    c0023767 <IDE::detect()+0x2f>
c00239bb:	50                   	push   eax
c00239bc:	6a 04                	push   0x4
c00239be:	56                   	push   esi
c00239bf:	53                   	push   ebx
c00239c0:	e8 05 f7 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00239c5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239c9:	83 c4 0c             	add    esp,0xc
c00239cc:	6a 05                	push   0x5
c00239ce:	56                   	push   esi
c00239cf:	53                   	push   ebx
c00239d0:	e8 f5 f6 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c00239d5:	83 c4 10             	add    esp,0x10
c00239d8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239dc:	80 fa 14             	cmp    dl,0x14
c00239df:	75 04                	jne    c00239e5 <IDE::detect()+0x2ad>
c00239e1:	3c eb                	cmp    al,0xeb
c00239e3:	eb 07                	jmp    c00239ec <IDE::detect()+0x2b4>
c00239e5:	3c 96                	cmp    al,0x96
c00239e7:	75 b8                	jne    c00239a1 <IDE::detect()+0x269>
c00239e9:	80 fa 69             	cmp    dl,0x69
c00239ec:	75 b3                	jne    c00239a1 <IDE::detect()+0x269>
c00239ee:	68 a1 00 00 00       	push   0xa1
c00239f3:	6a 07                	push   0x7
c00239f5:	56                   	push   esi
c00239f6:	53                   	push   ebx
c00239f7:	e8 0e f6 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239fc:	5f                   	pop    edi
c00239fd:	58                   	pop    eax
c00239fe:	6a 00                	push   0x0
c0023a00:	68 40 42 0f 00       	push   0xf4240
c0023a05:	e8 42 a9 ff ff       	call   c001e34c <nanoSleep(unsigned long long)>
c0023a0a:	83 c4 10             	add    esp,0x10
c0023a0d:	b1 01                	mov    cl,0x1
c0023a0f:	e9 4a fe ff ff       	jmp    c002385e <IDE::detect()+0x126>
c0023a14:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a1a:	5b                   	pop    ebx
c0023a1b:	5e                   	pop    esi
c0023a1c:	5f                   	pop    edi
c0023a1d:	5d                   	pop    ebp
c0023a1e:	c3                   	ret    
c0023a1f:	90                   	nop

c0023a20 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a20:	55                   	push   ebp
c0023a21:	57                   	push   edi
c0023a22:	56                   	push   esi
c0023a23:	53                   	push   ebx
c0023a24:	83 ec 1c             	sub    esp,0x1c
c0023a27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a2f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a33:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a37:	88 c3                	mov    bl,al
c0023a39:	84 c0                	test   al,al
c0023a3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a3f:	0f 84 67 01 00 00    	je     c0023bac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a45:	83 ec 0c             	sub    esp,0xc
c0023a48:	68 fb cb 02 c0       	push   0xc002cbfb
c0023a4d:	e8 08 f5 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023a52:	83 c4 10             	add    esp,0x10
c0023a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a59:	3c 01                	cmp    al,0x1
c0023a5b:	75 17                	jne    c0023a74 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a5d:	83 ec 0c             	sub    esp,0xc
c0023a60:	b3 13                	mov    bl,0x13
c0023a62:	68 07 cc 02 c0       	push   0xc002cc07
c0023a67:	e8 ee f4 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023a6c:	83 c4 10             	add    esp,0x10
c0023a6f:	e9 25 01 00 00       	jmp    c0023b99 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a74:	3c 02                	cmp    al,0x2
c0023a76:	0f 85 ef 00 00 00    	jne    c0023b6b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a7c:	d1 e6                	shl    esi,1
c0023a7e:	09 ee                	or     esi,ebp
c0023a80:	52                   	push   edx
c0023a81:	89 f0                	mov    eax,esi
c0023a83:	6a 01                	push   0x1
c0023a85:	0f b6 f0             	movzx  esi,al
c0023a88:	c1 e6 06             	shl    esi,0x6
c0023a8b:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a93:	50                   	push   eax
c0023a94:	57                   	push   edi
c0023a95:	e8 30 f6 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c0023a9a:	83 c4 10             	add    esp,0x10
c0023a9d:	89 c6                	mov    esi,eax
c0023a9f:	a8 01                	test   al,0x1
c0023aa1:	74 12                	je     c0023ab5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023aa3:	83 ec 0c             	sub    esp,0xc
c0023aa6:	b3 07                	mov    bl,0x7
c0023aa8:	68 1c cc 02 c0       	push   0xc002cc1c
c0023aad:	e8 a8 f4 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023ab2:	83 c4 10             	add    esp,0x10
c0023ab5:	f7 c6 02 00 00 00    	test   esi,0x2
c0023abb:	74 12                	je     c0023acf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023abd:	83 ec 0c             	sub    esp,0xc
c0023ac0:	b3 03                	mov    bl,0x3
c0023ac2:	68 3a cc 02 c0       	push   0xc002cc3a
c0023ac7:	e8 8e f4 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023acc:	83 c4 10             	add    esp,0x10
c0023acf:	f7 c6 04 00 00 00    	test   esi,0x4
c0023ad5:	74 12                	je     c0023ae9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023ad7:	83 ec 0c             	sub    esp,0xc
c0023ada:	b3 14                	mov    bl,0x14
c0023adc:	68 5a cc 02 c0       	push   0xc002cc5a
c0023ae1:	e8 74 f4 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023ae6:	83 c4 10             	add    esp,0x10
c0023ae9:	f7 c6 08 00 00 00    	test   esi,0x8
c0023aef:	74 12                	je     c0023b03 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023af1:	83 ec 0c             	sub    esp,0xc
c0023af4:	b3 03                	mov    bl,0x3
c0023af6:	68 3a cc 02 c0       	push   0xc002cc3a
c0023afb:	e8 5a f4 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023b00:	83 c4 10             	add    esp,0x10
c0023b03:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b09:	74 12                	je     c0023b1d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b0b:	83 ec 0c             	sub    esp,0xc
c0023b0e:	b3 15                	mov    bl,0x15
c0023b10:	68 72 cc 02 c0       	push   0xc002cc72
c0023b15:	e8 40 f4 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023b1a:	83 c4 10             	add    esp,0x10
c0023b1d:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b23:	74 12                	je     c0023b37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b25:	83 ec 0c             	sub    esp,0xc
c0023b28:	b3 03                	mov    bl,0x3
c0023b2a:	68 3a cc 02 c0       	push   0xc002cc3a
c0023b2f:	e8 26 f4 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023b34:	83 c4 10             	add    esp,0x10
c0023b37:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b3d:	74 12                	je     c0023b51 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b3f:	83 ec 0c             	sub    esp,0xc
c0023b42:	b3 16                	mov    bl,0x16
c0023b44:	68 8c cc 02 c0       	push   0xc002cc8c
c0023b49:	e8 0c f4 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023b4e:	83 c4 10             	add    esp,0x10
c0023b51:	89 f0                	mov    eax,esi
c0023b53:	84 c0                	test   al,al
c0023b55:	79 42                	jns    c0023b99 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b57:	83 ec 0c             	sub    esp,0xc
c0023b5a:	b3 0d                	mov    bl,0xd
c0023b5c:	68 ad cc 02 c0       	push   0xc002ccad
c0023b61:	e8 f4 f3 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023b66:	83 c4 10             	add    esp,0x10
c0023b69:	eb 2e                	jmp    c0023b99 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b6b:	3c 03                	cmp    al,0x3
c0023b6d:	75 14                	jne    c0023b83 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b6f:	83 ec 0c             	sub    esp,0xc
c0023b72:	b3 17                	mov    bl,0x17
c0023b74:	68 c1 cc 02 c0       	push   0xc002ccc1
c0023b79:	e8 dc f3 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023b7e:	83 c4 10             	add    esp,0x10
c0023b81:	eb 16                	jmp    c0023b99 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b83:	3c 04                	cmp    al,0x4
c0023b85:	75 12                	jne    c0023b99 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b87:	83 ec 0c             	sub    esp,0xc
c0023b8a:	b3 08                	mov    bl,0x8
c0023b8c:	68 d7 cc 02 c0       	push   0xc002ccd7
c0023b91:	e8 c4 f3 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023b96:	83 c4 10             	add    esp,0x10
c0023b99:	50                   	push   eax
c0023b9a:	50                   	push   eax
c0023b9b:	0f b6 c3             	movzx  eax,bl
c0023b9e:	50                   	push   eax
c0023b9f:	68 ef cc 02 c0       	push   0xc002ccef
c0023ba4:	e8 b1 f3 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023ba9:	83 c4 10             	add    esp,0x10
c0023bac:	83 c4 1c             	add    esp,0x1c
c0023baf:	88 d8                	mov    al,bl
c0023bb1:	5b                   	pop    ebx
c0023bb2:	5e                   	pop    esi
c0023bb3:	5f                   	pop    edi
c0023bb4:	5d                   	pop    ebp
c0023bb5:	c3                   	ret    

c0023bb6 <IDE::polling(unsigned char, unsigned int)>:
c0023bb6:	57                   	push   edi
c0023bb7:	56                   	push   esi
c0023bb8:	53                   	push   ebx
c0023bb9:	bb 04 00 00 00       	mov    ebx,0x4
c0023bbe:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023bc2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023bc7:	52                   	push   edx
c0023bc8:	6a 0c                	push   0xc
c0023bca:	56                   	push   esi
c0023bcb:	57                   	push   edi
c0023bcc:	e8 f9 f4 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c0023bd1:	83 c4 10             	add    esp,0x10
c0023bd4:	4b                   	dec    ebx
c0023bd5:	75 f0                	jne    c0023bc7 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bd7:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023bdc:	50                   	push   eax
c0023bdd:	6a 0c                	push   0xc
c0023bdf:	56                   	push   esi
c0023be0:	57                   	push   edi
c0023be1:	e8 e4 f4 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c0023be6:	83 c4 10             	add    esp,0x10
c0023be9:	a8 01                	test   al,0x1
c0023beb:	74 12                	je     c0023bff <IDE::polling(unsigned char, unsigned int)+0x49>
c0023bed:	83 ec 0c             	sub    esp,0xc
c0023bf0:	68 09 cd 02 c0       	push   0xc002cd09
c0023bf5:	e8 60 f3 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023bfa:	83 c4 10             	add    esp,0x10
c0023bfd:	eb 17                	jmp    c0023c16 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bff:	a8 20                	test   al,0x20
c0023c01:	75 0f                	jne    c0023c12 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c03:	4b                   	dec    ebx
c0023c04:	74 10                	je     c0023c16 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c06:	84 c0                	test   al,al
c0023c08:	78 d2                	js     c0023bdc <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c0a:	a8 08                	test   al,0x8
c0023c0c:	74 ce                	je     c0023bdc <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c0e:	31 c0                	xor    eax,eax
c0023c10:	eb 06                	jmp    c0023c18 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c12:	b0 01                	mov    al,0x1
c0023c14:	eb 02                	jmp    c0023c18 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c16:	b0 02                	mov    al,0x2
c0023c18:	5b                   	pop    ebx
c0023c19:	5e                   	pop    esi
c0023c1a:	5f                   	pop    edi
c0023c1b:	c3                   	ret    

c0023c1c <SATABus::close(int, int, void*)>:
c0023c1c:	31 c0                	xor    eax,eax
c0023c1e:	c3                   	ret    
c0023c1f:	90                   	nop

c0023c20 <SATABus::detect()>:
c0023c20:	c3                   	ret    
c0023c21:	90                   	nop

c0023c22 <SATABus::SATABus()>:
c0023c22:	83 ec 0c             	sub    esp,0xc
c0023c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c29:	83 ec 08             	sub    esp,0x8
c0023c2c:	68 4c cd 02 c0       	push   0xc002cd4c
c0023c31:	50                   	push   eax
c0023c32:	e8 d5 0a ff ff       	call   c001470c <HardDiskController::HardDiskController(char const*)>
c0023c37:	83 c4 10             	add    esp,0x10
c0023c3a:	ba 08 ce 02 c0       	mov    edx,0xc002ce08
c0023c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c43:	89 10                	mov    DWORD PTR [eax],edx
c0023c45:	83 ec 0c             	sub    esp,0xc
c0023c48:	6a 50                	push   0x50
c0023c4a:	e8 7b c3 fe ff       	call   c000ffca <Phys::allocateContiguousPages(int)>
c0023c4f:	83 c4 10             	add    esp,0x10
c0023c52:	89 c2                	mov    edx,eax
c0023c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c58:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c5e:	83 ec 0c             	sub    esp,0xc
c0023c61:	6a 50                	push   0x50
c0023c63:	e8 db de fe ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0023c68:	83 c4 10             	add    esp,0x10
c0023c6b:	89 c2                	mov    edx,eax
c0023c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c71:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c77:	e8 62 e1 fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0023c7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c80:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c8a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c90:	83 ec 0c             	sub    esp,0xc
c0023c93:	6a 03                	push   0x3
c0023c95:	6a 50                	push   0x50
c0023c97:	51                   	push   ecx
c0023c98:	52                   	push   edx
c0023c99:	50                   	push   eax
c0023c9a:	e8 85 e9 fe ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c9f:	83 c4 20             	add    esp,0x20
c0023ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca6:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cb0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023cb6:	83 ec 04             	sub    esp,0x4
c0023cb9:	52                   	push   edx
c0023cba:	50                   	push   eax
c0023cbb:	68 70 cd 02 c0       	push   0xc002cd70
c0023cc0:	e8 95 f2 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023cc5:	83 c4 10             	add    esp,0x10
c0023cc8:	90                   	nop
c0023cc9:	83 c4 0c             	add    esp,0xc
c0023ccc:	c3                   	ret    
c0023ccd:	90                   	nop

c0023cce <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023cce:	83 ec 0c             	sub    esp,0xc
c0023cd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cd5:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cdb:	09 c2                	or     edx,eax
c0023cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ce1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ce7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023ce9:	31 c0                	xor    eax,eax
c0023ceb:	c1 e9 08             	shr    ecx,0x8
c0023cee:	83 e1 0f             	and    ecx,0xf
c0023cf1:	39 c8                	cmp    eax,ecx
c0023cf3:	74 0a                	je     c0023cff <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023cf5:	f6 c2 01             	test   dl,0x1
c0023cf8:	74 18                	je     c0023d12 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cfa:	d1 ea                	shr    edx,1
c0023cfc:	40                   	inc    eax
c0023cfd:	eb f2                	jmp    c0023cf1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023cff:	83 ec 0c             	sub    esp,0xc
c0023d02:	68 94 cd 02 c0       	push   0xc002cd94
c0023d07:	e8 fb 68 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0023d0c:	83 c4 10             	add    esp,0x10
c0023d0f:	83 c8 ff             	or     eax,0xffffffff
c0023d12:	83 c4 0c             	add    esp,0xc
c0023d15:	c3                   	ret    

c0023d16 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d1a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d1d:	89 c2                	mov    edx,eax
c0023d1f:	c1 ea 08             	shr    edx,0x8
c0023d22:	83 e2 0f             	and    edx,0xf
c0023d25:	fe ca                	dec    dl
c0023d27:	75 31                	jne    c0023d5a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d29:	83 e0 0f             	and    eax,0xf
c0023d2c:	3c 03                	cmp    al,0x3
c0023d2e:	75 2a                	jne    c0023d5a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d30:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d33:	b8 02 00 00 00       	mov    eax,0x2
c0023d38:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d3e:	74 1c                	je     c0023d5c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d40:	b8 04 00 00 00       	mov    eax,0x4
c0023d45:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d4b:	74 0f                	je     c0023d5c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d4d:	31 c0                	xor    eax,eax
c0023d4f:	83 fa 03             	cmp    edx,0x3
c0023d52:	0f 94 c0             	sete   al
c0023d55:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d59:	c3                   	ret    
c0023d5a:	31 c0                	xor    eax,eax
c0023d5c:	c3                   	ret    
c0023d5d:	90                   	nop

c0023d5e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d62:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d65:	0f ba e2 0f          	bt     edx,0xf
c0023d69:	72 f7                	jb     c0023d62 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d6b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d6e:	83 ca 10             	or     edx,0x10
c0023d71:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d74:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d77:	83 ca 01             	or     edx,0x1
c0023d7a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d7d:	c3                   	ret    

c0023d7e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d82:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d85:	83 e2 fe             	and    edx,0xfffffffe
c0023d88:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d8b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d8e:	83 e2 ef             	and    edx,0xffffffef
c0023d91:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d94:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d97:	0f ba e2 0e          	bt     edx,0xe
c0023d9b:	72 f7                	jb     c0023d94 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d9d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023da0:	0f ba e2 0f          	bt     edx,0xf
c0023da4:	72 ee                	jb     c0023d94 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023da6:	c3                   	ret    
c0023da7:	90                   	nop

c0023da8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023da8:	55                   	push   ebp
c0023da9:	57                   	push   edi
c0023daa:	56                   	push   esi
c0023dab:	53                   	push   ebx
c0023dac:	83 ec 1c             	sub    esp,0x1c
c0023daf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023db3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023db7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023dbb:	53                   	push   ebx
c0023dbc:	89 fd                	mov    ebp,edi
c0023dbe:	56                   	push   esi
c0023dbf:	c1 e5 0a             	shl    ebp,0xa
c0023dc2:	e8 b7 ff ff ff       	call   c0023d7e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023dc7:	83 ec 0c             	sub    esp,0xc
c0023dca:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023dd0:	01 e8                	add    eax,ebp
c0023dd2:	89 03                	mov    DWORD PTR [ebx],eax
c0023dd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dd6:	68 00 04 00 00       	push   0x400
c0023ddb:	6a 00                	push   0x0
c0023ddd:	50                   	push   eax
c0023dde:	e8 95 c9 fd ff       	call   c0000778 <memset>
c0023de3:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023de9:	89 fa                	mov    edx,edi
c0023deb:	01 e8                	add    eax,ebp
c0023ded:	c1 e7 0d             	shl    edi,0xd
c0023df0:	89 03                	mov    DWORD PTR [ebx],eax
c0023df2:	c1 e2 08             	shl    edx,0x8
c0023df5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023dfc:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e06:	89 d0                	mov    eax,edx
c0023e08:	83 c4 1c             	add    esp,0x1c
c0023e0b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e14:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e17:	68 00 01 00 00       	push   0x100
c0023e1c:	6a 00                	push   0x0
c0023e1e:	50                   	push   eax
c0023e1f:	e8 54 c9 fd ff       	call   c0000778 <memset>
c0023e24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e28:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e2e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e38:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e3b:	83 c4 10             	add    esp,0x10
c0023e3e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e45:	31 ff                	xor    edi,edi
c0023e47:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e4d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e57:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e5d:	83 c5 20             	add    ebp,0x20
c0023e60:	01 f8                	add    eax,edi
c0023e62:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e65:	52                   	push   edx
c0023e66:	68 00 01 00 00       	push   0x100
c0023e6b:	6a 00                	push   0x0
c0023e6d:	50                   	push   eax
c0023e6e:	e8 05 c9 fd ff       	call   c0000778 <memset>
c0023e73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e77:	83 c4 10             	add    esp,0x10
c0023e7a:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e80:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e87:	01 f8                	add    eax,edi
c0023e89:	81 c7 00 01 00 00    	add    edi,0x100
c0023e8f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e92:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e98:	75 b3                	jne    c0023e4d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e9a:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e9e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023ea2:	83 c4 1c             	add    esp,0x1c
c0023ea5:	5b                   	pop    ebx
c0023ea6:	5e                   	pop    esi
c0023ea7:	5f                   	pop    edi
c0023ea8:	5d                   	pop    ebp
c0023ea9:	e9 b0 fe ff ff       	jmp    c0023d5e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023eae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023eae:	55                   	push   ebp
c0023eaf:	57                   	push   edi
c0023eb0:	56                   	push   esi
c0023eb1:	53                   	push   ebx
c0023eb2:	31 db                	xor    ebx,ebx
c0023eb4:	83 ec 0c             	sub    esp,0xc
c0023eb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ebb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ebf:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023ec2:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ec8:	0f 84 aa 00 00 00    	je     c0023f78 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ece:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023ed2:	89 d8                	mov    eax,ebx
c0023ed4:	c1 e0 07             	shl    eax,0x7
c0023ed7:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023ede:	55                   	push   ebp
c0023edf:	56                   	push   esi
c0023ee0:	e8 31 fe ff ff       	call   c0023d16 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ee5:	5a                   	pop    edx
c0023ee6:	83 f8 01             	cmp    eax,0x1
c0023ee9:	59                   	pop    ecx
c0023eea:	75 30                	jne    c0023f1c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023eec:	50                   	push   eax
c0023eed:	50                   	push   eax
c0023eee:	53                   	push   ebx
c0023eef:	68 b9 cd 02 c0       	push   0xc002cdb9
c0023ef4:	e8 61 f0 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023ef9:	83 c4 0c             	add    esp,0xc
c0023efc:	53                   	push   ebx
c0023efd:	55                   	push   ebp
c0023efe:	56                   	push   esi
c0023eff:	e8 a4 fe ff ff       	call   c0023da8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f04:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f0b:	e8 33 b9 fe ff       	call   c000f843 <malloc>
c0023f10:	89 c5                	mov    ebp,eax
c0023f12:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f15:	e8 60 0d 00 00       	call   c0024c7a <SATA::SATA()>
c0023f1a:	eb 33                	jmp    c0023f4f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f1c:	83 f8 04             	cmp    eax,0x4
c0023f1f:	75 47                	jne    c0023f68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f21:	50                   	push   eax
c0023f22:	50                   	push   eax
c0023f23:	53                   	push   ebx
c0023f24:	68 d0 cd 02 c0       	push   0xc002cdd0
c0023f29:	e8 2c f0 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023f2e:	83 c4 0c             	add    esp,0xc
c0023f31:	53                   	push   ebx
c0023f32:	55                   	push   ebp
c0023f33:	56                   	push   esi
c0023f34:	e8 6f fe ff ff       	call   c0023da8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f39:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f40:	e8 fe b8 fe ff       	call   c000f843 <malloc>
c0023f45:	89 c5                	mov    ebp,eax
c0023f47:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f4a:	e8 d7 10 00 00       	call   c0025026 <SATAPI::SATAPI()>
c0023f4f:	5a                   	pop    edx
c0023f50:	59                   	pop    ecx
c0023f51:	55                   	push   ebp
c0023f52:	56                   	push   esi
c0023f53:	e8 28 04 ff ff       	call   c0014380 <Device::addChild(Device*)>
c0023f58:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f5b:	56                   	push   esi
c0023f5c:	6a 00                	push   0x0
c0023f5e:	53                   	push   ebx
c0023f5f:	55                   	push   ebp
c0023f60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f63:	83 c4 20             	add    esp,0x20
c0023f66:	eb 10                	jmp    c0023f78 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f68:	50                   	push   eax
c0023f69:	50                   	push   eax
c0023f6a:	53                   	push   ebx
c0023f6b:	68 e9 cd 02 c0       	push   0xc002cde9
c0023f70:	e8 e5 ef fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0023f75:	83 c4 10             	add    esp,0x10
c0023f78:	d1 ef                	shr    edi,1
c0023f7a:	43                   	inc    ebx
c0023f7b:	83 fb 20             	cmp    ebx,0x20
c0023f7e:	0f 85 3e ff ff ff    	jne    c0023ec2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f84:	83 c4 0c             	add    esp,0xc
c0023f87:	5b                   	pop    ebx
c0023f88:	5e                   	pop    esi
c0023f89:	5f                   	pop    edi
c0023f8a:	5d                   	pop    ebp
c0023f8b:	c3                   	ret    

c0023f8c <SATABus::open(int, int, void*)>:
c0023f8c:	83 ec 14             	sub    esp,0x14
c0023f8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f93:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f99:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f9f:	52                   	push   edx
c0023fa0:	50                   	push   eax
c0023fa1:	e8 08 ff ff ff       	call   c0023eae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023fa6:	31 c0                	xor    eax,eax
c0023fa8:	83 c4 1c             	add    esp,0x1c
c0023fab:	c3                   	ret    

c0023fac <ATA::close(int, int, void*)>:
c0023fac:	83 ec 0c             	sub    esp,0xc
c0023faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fb3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023fb9:	85 c0                	test   eax,eax
c0023fbb:	74 0c                	je     c0023fc9 <ATA::close(int, int, void*)+0x1d>
c0023fbd:	83 ec 0c             	sub    esp,0xc
c0023fc0:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fc2:	50                   	push   eax
c0023fc3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fc6:	83 c4 10             	add    esp,0x10
c0023fc9:	31 c0                	xor    eax,eax
c0023fcb:	83 c4 0c             	add    esp,0xc
c0023fce:	c3                   	ret    
c0023fcf:	90                   	nop

c0023fd0 <ATA::powerSaving(PowerSavingLevel)>:
c0023fd0:	c3                   	ret    
c0023fd1:	90                   	nop

c0023fd2 <ATA::ATA()>:
c0023fd2:	83 ec 0c             	sub    esp,0xc
c0023fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fd9:	83 ec 04             	sub    esp,0x4
c0023fdc:	68 00 02 00 00       	push   0x200
c0023fe1:	68 d1 ce 02 c0       	push   0xc002ced1
c0023fe6:	50                   	push   eax
c0023fe7:	e8 b8 07 ff ff       	call   c00147a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fec:	83 c4 10             	add    esp,0x10
c0023fef:	ba 54 ce 02 c0       	mov    edx,0xc002ce54
c0023ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ff8:	89 10                	mov    DWORD PTR [eax],edx
c0023ffa:	90                   	nop
c0023ffb:	83 c4 0c             	add    esp,0xc
c0023ffe:	c3                   	ret    
c0023fff:	90                   	nop

c0024000 <ATA::flush(bool)>:
c0024000:	53                   	push   ebx
c0024001:	83 ec 08             	sub    esp,0x8
c0024004:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024009:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002400d:	19 c0                	sbb    eax,eax
c002400f:	83 e0 fd             	and    eax,0xfffffffd
c0024012:	05 ea 00 00 00       	add    eax,0xea
c0024017:	50                   	push   eax
c0024018:	6a 07                	push   0x7
c002401a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024021:	50                   	push   eax
c0024022:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024028:	e8 dd ef ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002402d:	83 c4 0c             	add    esp,0xc
c0024030:	6a 00                	push   0x0
c0024032:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024039:	50                   	push   eax
c002403a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024040:	e8 71 fb ff ff       	call   c0023bb6 <IDE::polling(unsigned char, unsigned int)>
c0024045:	83 c4 18             	add    esp,0x18
c0024048:	5b                   	pop    ebx
c0024049:	c3                   	ret    

c002404a <ATA::readyForCommand()>:
c002404a:	56                   	push   esi
c002404b:	53                   	push   ebx
c002404c:	31 db                	xor    ebx,ebx
c002404e:	50                   	push   eax
c002404f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024053:	50                   	push   eax
c0024054:	6a 0c                	push   0xc
c0024056:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002405d:	50                   	push   eax
c002405e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024064:	e8 61 f0 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c0024069:	83 c4 10             	add    esp,0x10
c002406c:	a8 88                	test   al,0x88
c002406e:	74 23                	je     c0024093 <ATA::readyForCommand()+0x49>
c0024070:	43                   	inc    ebx
c0024071:	83 fb 63             	cmp    ebx,0x63
c0024074:	7e dd                	jle    c0024053 <ATA::readyForCommand()+0x9>
c0024076:	51                   	push   ecx
c0024077:	51                   	push   ecx
c0024078:	6a 00                	push   0x0
c002407a:	68 40 42 0f 00       	push   0xf4240
c002407f:	e8 c8 a2 ff ff       	call   c001e34c <nanoSleep(unsigned long long)>
c0024084:	83 c4 10             	add    esp,0x10
c0024087:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002408d:	75 c4                	jne    c0024053 <ATA::readyForCommand()+0x9>
c002408f:	31 c0                	xor    eax,eax
c0024091:	eb 02                	jmp    c0024095 <ATA::readyForCommand()+0x4b>
c0024093:	b0 01                	mov    al,0x1
c0024095:	5a                   	pop    edx
c0024096:	5b                   	pop    ebx
c0024097:	5e                   	pop    esi
c0024098:	c3                   	ret    
c0024099:	90                   	nop

c002409a <ATA::access(unsigned long long, int, void*, bool)>:
c002409a:	55                   	push   ebp
c002409b:	57                   	push   edi
c002409c:	56                   	push   esi
c002409d:	53                   	push   ebx
c002409e:	83 ec 2c             	sub    esp,0x2c
c00240a1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240a9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240b1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00240b5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00240b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240bd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240c7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240d1:	c1 e0 06             	shl    eax,0x6
c00240d4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240dc:	74 5d                	je     c002413b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240de:	89 fa                	mov    edx,edi
c00240e0:	89 f0                	mov    eax,esi
c00240e2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240e6:	c1 ea 1c             	shr    edx,0x1c
c00240e9:	89 d1                	mov    ecx,edx
c00240eb:	09 c1                	or     ecx,eax
c00240ed:	74 25                	je     c0024114 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240ef:	31 ed                	xor    ebp,ebp
c00240f1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240f8:	89 fa                	mov    edx,edi
c00240fa:	89 f0                	mov    eax,esi
c00240fc:	0f ad d0             	shrd   eax,edx,cl
c00240ff:	d3 ea                	shr    edx,cl
c0024101:	f6 c1 20             	test   cl,0x20
c0024104:	74 02                	je     c0024108 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024106:	89 d0                	mov    eax,edx
c0024108:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002410c:	45                   	inc    ebp
c002410d:	83 fd 06             	cmp    ebp,0x6
c0024110:	75 df                	jne    c00240f1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024112:	eb 76                	jmp    c002418a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024114:	89 f0                	mov    eax,esi
c0024116:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002411b:	89 fa                	mov    edx,edi
c002411d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024124:	0f ac d0 10          	shrd   eax,edx,0x10
c0024128:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002412d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024131:	c1 ee 18             	shr    esi,0x18
c0024134:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024139:	eb 56                	jmp    c0024191 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002413b:	6a 00                	push   0x0
c002413d:	6a 3f                	push   0x3f
c002413f:	57                   	push   edi
c0024140:	56                   	push   esi
c0024141:	e8 96 29 00 00       	call   c0026adc <__umoddi3>
c0024146:	83 c4 10             	add    esp,0x10
c0024149:	40                   	inc    eax
c002414a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002414e:	6a 00                	push   0x0
c0024150:	68 f0 03 00 00       	push   0x3f0
c0024155:	57                   	push   edi
c0024156:	56                   	push   esi
c0024157:	e8 80 28 00 00       	call   c00269dc <__udivdi3>
c002415c:	83 c4 10             	add    esp,0x10
c002415f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024164:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002416b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024170:	6a 00                	push   0x0
c0024172:	6a 3f                	push   0x3f
c0024174:	57                   	push   edi
c0024175:	56                   	push   esi
c0024176:	e8 61 28 00 00       	call   c00269dc <__udivdi3>
c002417b:	83 c4 10             	add    esp,0x10
c002417e:	89 c6                	mov    esi,eax
c0024180:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024185:	83 e6 0f             	and    esi,0xf
c0024188:	eb 07                	jmp    c0024191 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002418a:	31 f6                	xor    esi,esi
c002418c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024191:	bf 01 00 00 00       	mov    edi,0x1
c0024196:	50                   	push   eax
c0024197:	6a 00                	push   0x0
c0024199:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241a0:	50                   	push   eax
c00241a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241a5:	e8 6c f0 ff ff       	call   c0023216 <IDE::enableIRQs(unsigned char, bool)>
c00241aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241ad:	e8 98 fe ff ff       	call   c002404a <ATA::readyForCommand()>
c00241b2:	83 c4 10             	add    esp,0x10
c00241b5:	84 c0                	test   al,al
c00241b7:	0f 84 5a 02 00 00    	je     c0024417 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241bd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241c3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241c9:	c1 e0 04             	shl    eax,0x4
c00241cc:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241d3:	09 c6                	or     esi,eax
c00241d5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241da:	75 05                	jne    c00241e1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241dc:	83 ce a0             	or     esi,0xffffffa0
c00241df:	eb 03                	jmp    c00241e4 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241e1:	83 ce e0             	or     esi,0xffffffe0
c00241e4:	89 f0                	mov    eax,esi
c00241e6:	0f b6 f0             	movzx  esi,al
c00241e9:	56                   	push   esi
c00241ea:	6a 06                	push   0x6
c00241ec:	51                   	push   ecx
c00241ed:	52                   	push   edx
c00241ee:	e8 17 ee ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241f3:	83 c4 10             	add    esp,0x10
c00241f6:	6a 00                	push   0x0
c00241f8:	6a 01                	push   0x1
c00241fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024201:	50                   	push   eax
c0024202:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024208:	e8 fd ed ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002420d:	83 c4 10             	add    esp,0x10
c0024210:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024215:	75 6e                	jne    c0024285 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024217:	6a 00                	push   0x0
c0024219:	6a 08                	push   0x8
c002421b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024222:	50                   	push   eax
c0024223:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024229:	e8 dc ed ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002422e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024233:	50                   	push   eax
c0024234:	6a 09                	push   0x9
c0024236:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002423d:	50                   	push   eax
c002423e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024244:	e8 c1 ed ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024249:	83 c4 20             	add    esp,0x20
c002424c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024251:	50                   	push   eax
c0024252:	6a 0a                	push   0xa
c0024254:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002425b:	50                   	push   eax
c002425c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024262:	e8 a3 ed ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024267:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002426c:	50                   	push   eax
c002426d:	6a 0b                	push   0xb
c002426f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024276:	50                   	push   eax
c0024277:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002427d:	e8 88 ed ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024282:	83 c4 20             	add    esp,0x20
c0024285:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002428a:	50                   	push   eax
c002428b:	6a 02                	push   0x2
c002428d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024294:	50                   	push   eax
c0024295:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002429b:	e8 6a ed ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242a5:	50                   	push   eax
c00242a6:	6a 03                	push   0x3
c00242a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242af:	50                   	push   eax
c00242b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b6:	e8 4f ed ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242bb:	83 c4 20             	add    esp,0x20
c00242be:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242c3:	50                   	push   eax
c00242c4:	6a 04                	push   0x4
c00242c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242cd:	50                   	push   eax
c00242ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242d4:	e8 31 ed ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242de:	50                   	push   eax
c00242df:	6a 05                	push   0x5
c00242e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e8:	50                   	push   eax
c00242e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ef:	e8 16 ed ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f4:	83 c4 20             	add    esp,0x20
c00242f7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242fc:	0f 94 c0             	sete   al
c00242ff:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024304:	74 09                	je     c002430f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024306:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002430d:	eb 07                	jmp    c0024316 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002430f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024316:	0f b6 c0             	movzx  eax,al
c0024319:	50                   	push   eax
c002431a:	6a 07                	push   0x7
c002431c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024323:	50                   	push   eax
c0024324:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002432a:	e8 db ec ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002432f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024333:	83 c4 10             	add    esp,0x10
c0024336:	85 f6                	test   esi,esi
c0024338:	0f 84 ba 00 00 00    	je     c00243f8 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002433e:	50                   	push   eax
c002433f:	6a 01                	push   0x1
c0024341:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024348:	50                   	push   eax
c0024349:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002434f:	e8 62 f8 ff ff       	call   c0023bb6 <IDE::polling(unsigned char, unsigned int)>
c0024354:	83 c4 10             	add    esp,0x10
c0024357:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002435d:	84 c0                	test   al,al
c002435f:	74 2c                	je     c002438d <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024361:	0f b6 f8             	movzx  edi,al
c0024364:	0f b6 d2             	movzx  edx,dl
c0024367:	57                   	push   edi
c0024368:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002436f:	50                   	push   eax
c0024370:	52                   	push   edx
c0024371:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024377:	e8 a4 f6 ff ff       	call   c0023a20 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002437c:	c7 04 24 2c ce 02 c0 	mov    DWORD PTR [esp],0xc002ce2c
c0024383:	e8 d2 eb fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0024388:	e9 87 00 00 00       	jmp    c0024414 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002438d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024392:	74 33                	je     c00243c7 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024394:	31 ed                	xor    ebp,ebp
c0024396:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002439a:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002439e:	50                   	push   eax
c002439f:	50                   	push   eax
c00243a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243a7:	50                   	push   eax
c00243a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243ae:	e8 45 ec ff ff       	call   c0022ff8 <IDE::getBase(unsigned char)>
c00243b3:	89 c2                	mov    edx,eax
c00243b5:	89 f8                	mov    eax,edi
c00243b7:	66 ef                	out    dx,ax
c00243b9:	45                   	inc    ebp
c00243ba:	83 c4 10             	add    esp,0x10
c00243bd:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243c3:	75 d1                	jne    c0024396 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243c5:	eb 23                	jmp    c00243ea <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243c7:	0f b6 d2             	movzx  edx,dl
c00243ca:	51                   	push   ecx
c00243cb:	51                   	push   ecx
c00243cc:	52                   	push   edx
c00243cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d3:	e8 20 ec ff ff       	call   c0022ff8 <IDE::getBase(unsigned char)>
c00243d8:	b9 00 01 00 00       	mov    ecx,0x100
c00243dd:	89 c2                	mov    edx,eax
c00243df:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243e3:	fc                   	cld    
c00243e4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243e7:	83 c4 10             	add    esp,0x10
c00243ea:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243f2:	4e                   	dec    esi
c00243f3:	e9 3e ff ff ff       	jmp    c0024336 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243f8:	31 ff                	xor    edi,edi
c00243fa:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243ff:	74 16                	je     c0024417 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024401:	50                   	push   eax
c0024402:	50                   	push   eax
c0024403:	31 c0                	xor    eax,eax
c0024405:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002440a:	0f 94 c0             	sete   al
c002440d:	50                   	push   eax
c002440e:	53                   	push   ebx
c002440f:	e8 ec fb ff ff       	call   c0024000 <ATA::flush(bool)>
c0024414:	83 c4 10             	add    esp,0x10
c0024417:	83 c4 2c             	add    esp,0x2c
c002441a:	89 f8                	mov    eax,edi
c002441c:	5b                   	pop    ebx
c002441d:	5e                   	pop    esi
c002441e:	5f                   	pop    edi
c002441f:	5d                   	pop    ebp
c0024420:	c3                   	ret    
c0024421:	90                   	nop

c0024422 <ATA::read(unsigned long long, int, void*)>:
c0024422:	57                   	push   edi
c0024423:	b8 04 00 00 00       	mov    eax,0x4
c0024428:	56                   	push   esi
c0024429:	53                   	push   ebx
c002442a:	83 ec 10             	sub    esp,0x10
c002442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024431:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024435:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024438:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002443c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024440:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024446:	77 3b                	ja     c0024483 <ATA::read(unsigned long long, int, void*)+0x61>
c0024448:	b8 06 00 00 00       	mov    eax,0x6
c002444d:	85 d2                	test   edx,edx
c002444f:	74 32                	je     c0024483 <ATA::read(unsigned long long, int, void*)+0x61>
c0024451:	50                   	push   eax
c0024452:	50                   	push   eax
c0024453:	6a 00                	push   0x0
c0024455:	52                   	push   edx
c0024456:	53                   	push   ebx
c0024457:	57                   	push   edi
c0024458:	56                   	push   esi
c0024459:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002445d:	e8 38 fc ff ff       	call   c002409a <ATA::access(unsigned long long, int, void*, bool)>
c0024462:	83 c4 20             	add    esp,0x20
c0024465:	85 c0                	test   eax,eax
c0024467:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002446b:	75 11                	jne    c002447e <ATA::read(unsigned long long, int, void*)+0x5c>
c002446d:	01 1d c8 27 03 c0    	add    DWORD PTR ds:0xc00327c8,ebx
c0024473:	e8 20 c5 fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0024478:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002447c:	eb 05                	jmp    c0024483 <ATA::read(unsigned long long, int, void*)+0x61>
c002447e:	b8 01 00 00 00       	mov    eax,0x1
c0024483:	83 c4 10             	add    esp,0x10
c0024486:	5b                   	pop    ebx
c0024487:	5e                   	pop    esi
c0024488:	5f                   	pop    edi
c0024489:	c3                   	ret    

c002448a <ATA::write(unsigned long long, int, void*)>:
c002448a:	57                   	push   edi
c002448b:	b8 04 00 00 00       	mov    eax,0x4
c0024490:	56                   	push   esi
c0024491:	53                   	push   ebx
c0024492:	83 ec 10             	sub    esp,0x10
c0024495:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024499:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002449d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244a8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244ae:	77 3b                	ja     c00244eb <ATA::write(unsigned long long, int, void*)+0x61>
c00244b0:	b8 06 00 00 00       	mov    eax,0x6
c00244b5:	85 d2                	test   edx,edx
c00244b7:	74 32                	je     c00244eb <ATA::write(unsigned long long, int, void*)+0x61>
c00244b9:	50                   	push   eax
c00244ba:	50                   	push   eax
c00244bb:	6a 01                	push   0x1
c00244bd:	52                   	push   edx
c00244be:	53                   	push   ebx
c00244bf:	57                   	push   edi
c00244c0:	56                   	push   esi
c00244c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244c5:	e8 d0 fb ff ff       	call   c002409a <ATA::access(unsigned long long, int, void*, bool)>
c00244ca:	83 c4 20             	add    esp,0x20
c00244cd:	85 c0                	test   eax,eax
c00244cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244d3:	75 11                	jne    c00244e6 <ATA::write(unsigned long long, int, void*)+0x5c>
c00244d5:	01 1d c4 27 03 c0    	add    DWORD PTR ds:0xc00327c4,ebx
c00244db:	e8 b8 c4 fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c00244e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244e4:	eb 05                	jmp    c00244eb <ATA::write(unsigned long long, int, void*)+0x61>
c00244e6:	b8 01 00 00 00       	mov    eax,0x1
c00244eb:	83 c4 10             	add    esp,0x10
c00244ee:	5b                   	pop    ebx
c00244ef:	5e                   	pop    esi
c00244f0:	5f                   	pop    edi
c00244f1:	c3                   	ret    

c00244f2 <ATA::detectCHS()>:
c00244f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244f6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244fc:	c1 e0 06             	shl    eax,0x6
c00244ff:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024505:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002450f:	c7 44 24 04 37 ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ce37
c0024517:	e9 eb 60 ff ff       	jmp    c001a607 <Krnl::panic(char const*)>

c002451c <ATA::open(int, int, void*)>:
c002451c:	53                   	push   ebx
c002451d:	83 ec 08             	sub    esp,0x8
c0024520:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024524:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024528:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002452c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024532:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024538:	c1 e0 06             	shl    eax,0x6
c002453b:	01 d0                	add    eax,edx
c002453d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024544:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002454a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024551:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002455b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024561:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024568:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002456f:	75 0c                	jne    c002457d <ATA::open(int, int, void*)+0x61>
c0024571:	83 ec 0c             	sub    esp,0xc
c0024574:	53                   	push   ebx
c0024575:	e8 78 ff ff ff       	call   c00244f2 <ATA::detectCHS()>
c002457a:	83 c4 10             	add    esp,0x10
c002457d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024583:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024589:	c1 e0 06             	shl    eax,0x6
c002458c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024593:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002459d:	d1 e8                	shr    eax,1
c002459f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00245a5:	6a 04                	push   0x4
c00245a7:	6a 0c                	push   0xc
c00245a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245b0:	50                   	push   eax
c00245b1:	52                   	push   edx
c00245b2:	e8 53 ea ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245b7:	90                   	nop
c00245b8:	90                   	nop
c00245b9:	6a 00                	push   0x0
c00245bb:	6a 0c                	push   0xc
c00245bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245c4:	50                   	push   eax
c00245c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245cb:	e8 3a ea ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245d0:	83 c4 14             	add    esp,0x14
c00245d3:	53                   	push   ebx
c00245d4:	e8 33 02 ff ff       	call   c001480c <PhysicalDisk::startCache()>
c00245d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245dc:	e8 ad 23 ff ff       	call   c001698e <createPartitionsForDisk(PhysicalDisk*)>
c00245e1:	31 c0                	xor    eax,eax
c00245e3:	83 c4 18             	add    esp,0x18
c00245e6:	5b                   	pop    ebx
c00245e7:	c3                   	ret    

c00245e8 <ATAPI::write(unsigned long long, int, void*)>:
c00245e8:	b8 03 00 00 00       	mov    eax,0x3
c00245ed:	c3                   	ret    

c00245ee <ATAPI::close(int, int, void*)>:
c00245ee:	83 ec 0c             	sub    esp,0xc
c00245f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245fb:	85 c0                	test   eax,eax
c00245fd:	74 0c                	je     c002460b <ATAPI::close(int, int, void*)+0x1d>
c00245ff:	83 ec 0c             	sub    esp,0xc
c0024602:	8b 10                	mov    edx,DWORD PTR [eax]
c0024604:	50                   	push   eax
c0024605:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024608:	83 c4 10             	add    esp,0x10
c002460b:	31 c0                	xor    eax,eax
c002460d:	83 c4 0c             	add    esp,0xc
c0024610:	c3                   	ret    
c0024611:	90                   	nop

c0024612 <ATAPI::ATAPI()>:
c0024612:	83 ec 0c             	sub    esp,0xc
c0024615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024619:	83 ec 04             	sub    esp,0x4
c002461c:	68 00 08 00 00       	push   0x800
c0024621:	68 71 cf 02 c0       	push   0xc002cf71
c0024626:	50                   	push   eax
c0024627:	e8 78 01 ff ff       	call   c00147a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002462c:	83 c4 10             	add    esp,0x10
c002462f:	ba 8c ce 02 c0       	mov    edx,0xc002ce8c
c0024634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024638:	89 10                	mov    DWORD PTR [eax],edx
c002463a:	90                   	nop
c002463b:	83 c4 0c             	add    esp,0xc
c002463e:	c3                   	ret    
c002463f:	90                   	nop

c0024640 <ATAPI::readyForCommand()>:
c0024640:	56                   	push   esi
c0024641:	53                   	push   ebx
c0024642:	31 db                	xor    ebx,ebx
c0024644:	50                   	push   eax
c0024645:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024649:	50                   	push   eax
c002464a:	6a 0c                	push   0xc
c002464c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024653:	50                   	push   eax
c0024654:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002465a:	e8 6b ea ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c002465f:	83 c4 10             	add    esp,0x10
c0024662:	a8 88                	test   al,0x88
c0024664:	74 23                	je     c0024689 <ATAPI::readyForCommand()+0x49>
c0024666:	43                   	inc    ebx
c0024667:	83 fb 63             	cmp    ebx,0x63
c002466a:	7e dd                	jle    c0024649 <ATAPI::readyForCommand()+0x9>
c002466c:	51                   	push   ecx
c002466d:	51                   	push   ecx
c002466e:	6a 00                	push   0x0
c0024670:	68 40 42 0f 00       	push   0xf4240
c0024675:	e8 d2 9c ff ff       	call   c001e34c <nanoSleep(unsigned long long)>
c002467a:	83 c4 10             	add    esp,0x10
c002467d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024683:	75 c4                	jne    c0024649 <ATAPI::readyForCommand()+0x9>
c0024685:	31 c0                	xor    eax,eax
c0024687:	eb 02                	jmp    c002468b <ATAPI::readyForCommand()+0x4b>
c0024689:	b0 01                	mov    al,0x1
c002468b:	5a                   	pop    edx
c002468c:	5b                   	pop    ebx
c002468d:	5e                   	pop    esi
c002468e:	c3                   	ret    
c002468f:	90                   	nop

c0024690 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024690:	55                   	push   ebp
c0024691:	57                   	push   edi
c0024692:	56                   	push   esi
c0024693:	53                   	push   ebx
c0024694:	83 ec 20             	sub    esp,0x20
c0024697:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002469b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002469f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246a7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00246ab:	6a 01                	push   0x1
c00246ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b4:	50                   	push   eax
c00246b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246bb:	e8 56 eb ff ff       	call   c0023216 <IDE::enableIRQs(unsigned char, bool)>
c00246c0:	5e                   	pop    esi
c00246c1:	58                   	pop    eax
c00246c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c9:	50                   	push   eax
c00246ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246d0:	e8 0f e9 ff ff       	call   c0022fe4 <IDE::prepareInterrupt(unsigned char)>
c00246d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246d8:	e8 63 ff ff ff       	call   c0024640 <ATAPI::readyForCommand()>
c00246dd:	83 c4 10             	add    esp,0x10
c00246e0:	84 c0                	test   al,al
c00246e2:	75 0a                	jne    c00246ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246e4:	bb 01 00 00 00       	mov    ebx,0x1
c00246e9:	e9 57 02 00 00       	jmp    c0024945 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246ee:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246f4:	c1 e0 04             	shl    eax,0x4
c00246f7:	0f b6 c0             	movzx  eax,al
c00246fa:	50                   	push   eax
c00246fb:	6a 06                	push   0x6
c00246fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024704:	50                   	push   eax
c0024705:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002470b:	e8 fa e8 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024710:	6a 00                	push   0x0
c0024712:	6a 01                	push   0x1
c0024714:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002471b:	50                   	push   eax
c002471c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024722:	e8 e3 e8 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024727:	83 c4 20             	add    esp,0x20
c002472a:	0f b6 c3             	movzx  eax,bl
c002472d:	0f b6 df             	movzx  ebx,bh
c0024730:	50                   	push   eax
c0024731:	6a 04                	push   0x4
c0024733:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002473a:	50                   	push   eax
c002473b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024741:	e8 c4 e8 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024746:	53                   	push   ebx
c0024747:	6a 05                	push   0x5
c0024749:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024750:	50                   	push   eax
c0024751:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024757:	e8 ae e8 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002475c:	83 c4 20             	add    esp,0x20
c002475f:	68 a0 00 00 00       	push   0xa0
c0024764:	6a 07                	push   0x7
c0024766:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002476d:	50                   	push   eax
c002476e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024774:	e8 91 e8 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024779:	83 c4 0c             	add    esp,0xc
c002477c:	6a 01                	push   0x1
c002477e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024785:	50                   	push   eax
c0024786:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002478c:	e8 25 f4 ff ff       	call   c0023bb6 <IDE::polling(unsigned char, unsigned int)>
c0024791:	83 c4 10             	add    esp,0x10
c0024794:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002479a:	84 c0                	test   al,al
c002479c:	74 23                	je     c00247c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002479e:	0f b6 d8             	movzx  ebx,al
c00247a1:	0f b6 d2             	movzx  edx,dl
c00247a4:	53                   	push   ebx
c00247a5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00247ac:	50                   	push   eax
c00247ad:	52                   	push   edx
c00247ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b4:	e8 67 f2 ff ff       	call   c0023a20 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247b9:	83 c4 10             	add    esp,0x10
c00247bc:	e9 84 01 00 00       	jmp    c0024945 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247c1:	0f b6 d2             	movzx  edx,dl
c00247c4:	53                   	push   ebx
c00247c5:	53                   	push   ebx
c00247c6:	52                   	push   edx
c00247c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247cd:	e8 26 e8 ff ff       	call   c0022ff8 <IDE::getBase(unsigned char)>
c00247d2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247d6:	b9 06 00 00 00       	mov    ecx,0x6
c00247db:	89 c2                	mov    edx,eax
c00247dd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247e0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247e4:	83 c4 10             	add    esp,0x10
c00247e7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247ed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247f4:	85 db                	test   ebx,ebx
c00247f6:	0f 84 ec 00 00 00    	je     c00248e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247fc:	51                   	push   ecx
c00247fd:	51                   	push   ecx
c00247fe:	52                   	push   edx
c00247ff:	50                   	push   eax
c0024800:	e8 73 e9 ff ff       	call   c0023178 <IDE::waitInterrupt(unsigned char)>
c0024805:	83 c4 10             	add    esp,0x10
c0024808:	84 c0                	test   al,al
c002480a:	0f 84 d4 fe ff ff    	je     c00246e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024810:	56                   	push   esi
c0024811:	56                   	push   esi
c0024812:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024819:	50                   	push   eax
c002481a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024820:	e8 bf e7 ff ff       	call   c0022fe4 <IDE::prepareInterrupt(unsigned char)>
c0024825:	83 c4 0c             	add    esp,0xc
c0024828:	6a 04                	push   0x4
c002482a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024831:	50                   	push   eax
c0024832:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024838:	e8 8d e8 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c002483d:	83 c4 0c             	add    esp,0xc
c0024840:	89 c6                	mov    esi,eax
c0024842:	6a 05                	push   0x5
c0024844:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002484b:	50                   	push   eax
c002484c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024852:	e8 73 e8 ff ff       	call   c00230ca <IDE::read(unsigned char, unsigned char)>
c0024857:	89 f1                	mov    ecx,esi
c0024859:	0f b6 c0             	movzx  eax,al
c002485c:	0f b6 f1             	movzx  esi,cl
c002485f:	c1 e0 08             	shl    eax,0x8
c0024862:	09 c6                	or     esi,eax
c0024864:	d1 fe                	sar    esi,1
c0024866:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002486a:	83 c4 10             	add    esp,0x10
c002486d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024872:	74 41                	je     c00248b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024874:	31 c9                	xor    ecx,ecx
c0024876:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002487c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024883:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024887:	75 0a                	jne    c0024893 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024889:	01 c9                	add    ecx,ecx
c002488b:	01 cd                	add    ebp,ecx
c002488d:	4b                   	dec    ebx
c002488e:	e9 54 ff ff ff       	jmp    c00247e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024893:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024898:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002489c:	51                   	push   ecx
c002489d:	51                   	push   ecx
c002489e:	52                   	push   edx
c002489f:	50                   	push   eax
c00248a0:	e8 53 e7 ff ff       	call   c0022ff8 <IDE::getBase(unsigned char)>
c00248a5:	89 c2                	mov    edx,eax
c00248a7:	89 f0                	mov    eax,esi
c00248a9:	66 ef                	out    dx,ax
c00248ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248af:	83 c4 10             	add    esp,0x10
c00248b2:	41                   	inc    ecx
c00248b3:	eb c1                	jmp    c0024876 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00248b5:	31 f6                	xor    esi,esi
c00248b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248c4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248c8:	75 06                	jne    c00248d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248ca:	01 f6                	add    esi,esi
c00248cc:	01 f5                	add    ebp,esi
c00248ce:	eb bd                	jmp    c002488d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248d0:	51                   	push   ecx
c00248d1:	51                   	push   ecx
c00248d2:	52                   	push   edx
c00248d3:	50                   	push   eax
c00248d4:	e8 1f e7 ff ff       	call   c0022ff8 <IDE::getBase(unsigned char)>
c00248d9:	89 c2                	mov    edx,eax
c00248db:	66 ed                	in     ax,dx
c00248dd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248e2:	83 c4 10             	add    esp,0x10
c00248e5:	46                   	inc    esi
c00248e6:	eb cf                	jmp    c00248b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248e8:	51                   	push   ecx
c00248e9:	51                   	push   ecx
c00248ea:	52                   	push   edx
c00248eb:	50                   	push   eax
c00248ec:	e8 87 e8 ff ff       	call   c0023178 <IDE::waitInterrupt(unsigned char)>
c00248f1:	83 c4 10             	add    esp,0x10
c00248f4:	84 c0                	test   al,al
c00248f6:	0f 84 e8 fd ff ff    	je     c00246e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248fc:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024901:	52                   	push   edx
c0024902:	52                   	push   edx
c0024903:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002490a:	50                   	push   eax
c002490b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024911:	e8 ce e6 ff ff       	call   c0022fe4 <IDE::prepareInterrupt(unsigned char)>
c0024916:	83 c4 10             	add    esp,0x10
c0024919:	50                   	push   eax
c002491a:	50                   	push   eax
c002491b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024922:	50                   	push   eax
c0024923:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024929:	e8 ca e6 ff ff       	call   c0022ff8 <IDE::getBase(unsigned char)>
c002492e:	8d 50 07             	lea    edx,[eax+0x7]
c0024931:	ec                   	in     al,dx
c0024932:	83 c4 10             	add    esp,0x10
c0024935:	a8 88                	test   al,0x88
c0024937:	74 0a                	je     c0024943 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024939:	4b                   	dec    ebx
c002493a:	75 dd                	jne    c0024919 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002493c:	bb 02 00 00 00       	mov    ebx,0x2
c0024941:	eb 02                	jmp    c0024945 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024943:	31 db                	xor    ebx,ebx
c0024945:	83 c4 1c             	add    esp,0x1c
c0024948:	89 d8                	mov    eax,ebx
c002494a:	5b                   	pop    ebx
c002494b:	5e                   	pop    esi
c002494c:	5f                   	pop    edi
c002494d:	5d                   	pop    ebp
c002494e:	c3                   	ret    
c002494f:	90                   	nop

c0024950 <ATAPI::diskRemoved()>:
c0024950:	83 ec 18             	sub    esp,0x18
c0024953:	68 7d cf 02 c0       	push   0xc002cf7d
c0024958:	e8 fd e5 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c002495d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024961:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024968:	83 c4 1c             	add    esp,0x1c
c002496b:	c3                   	ret    

c002496c <ATAPI::eject()>:
c002496c:	57                   	push   edi
c002496d:	b9 03 00 00 00       	mov    ecx,0x3
c0024972:	53                   	push   ebx
c0024973:	83 ec 14             	sub    esp,0x14
c0024976:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002497a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002497e:	fc                   	cld    
c002497f:	31 c0                	xor    eax,eax
c0024981:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024983:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024988:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002498d:	50                   	push   eax
c002498e:	50                   	push   eax
c002498f:	6a 00                	push   0x0
c0024991:	6a 00                	push   0x0
c0024993:	6a 00                	push   0x0
c0024995:	6a 02                	push   0x2
c0024997:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002499b:	50                   	push   eax
c002499c:	53                   	push   ebx
c002499d:	e8 ee fc ff ff       	call   c0024690 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249a2:	83 c4 14             	add    esp,0x14
c00249a5:	53                   	push   ebx
c00249a6:	e8 a5 ff ff ff       	call   c0024950 <ATAPI::diskRemoved()>
c00249ab:	83 c4 24             	add    esp,0x24
c00249ae:	31 c0                	xor    eax,eax
c00249b0:	5b                   	pop    ebx
c00249b1:	5f                   	pop    edi
c00249b2:	c3                   	ret    
c00249b3:	90                   	nop

c00249b4 <ATAPI::diskInserted()>:
c00249b4:	53                   	push   ebx
c00249b5:	83 ec 14             	sub    esp,0x14
c00249b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00249bc:	68 94 cf 02 c0       	push   0xc002cf94
c00249c1:	e8 94 e5 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c00249c6:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249d0:	e8 37 fe fe ff       	call   c001480c <PhysicalDisk::startCache()>
c00249d5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249d9:	83 c4 18             	add    esp,0x18
c00249dc:	5b                   	pop    ebx
c00249dd:	e9 ac 1f ff ff       	jmp    c001698e <createPartitionsForDisk(PhysicalDisk*)>

c00249e2 <ATAPI::detectMedia()>:
c00249e2:	56                   	push   esi
c00249e3:	53                   	push   ebx
c00249e4:	83 ec 28             	sub    esp,0x28
c00249e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249eb:	6a 0c                	push   0xc
c00249ed:	6a 00                	push   0x0
c00249ef:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249f3:	56                   	push   esi
c00249f4:	e8 7f bd fd ff       	call   c0000778 <memset>
c00249f9:	58                   	pop    eax
c00249fa:	5a                   	pop    edx
c00249fb:	6a 00                	push   0x0
c00249fd:	6a 00                	push   0x0
c00249ff:	6a 00                	push   0x0
c0024a01:	6a 00                	push   0x0
c0024a03:	56                   	push   esi
c0024a04:	53                   	push   ebx
c0024a05:	e8 86 fc ff ff       	call   c0024690 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a0a:	83 c4 1c             	add    esp,0x1c
c0024a0d:	6a 0c                	push   0xc
c0024a0f:	6a 00                	push   0x0
c0024a11:	56                   	push   esi
c0024a12:	e8 61 bd fd ff       	call   c0000778 <memset>
c0024a17:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a1c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a21:	59                   	pop    ecx
c0024a22:	58                   	pop    eax
c0024a23:	6a 01                	push   0x1
c0024a25:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a29:	50                   	push   eax
c0024a2a:	6a 00                	push   0x0
c0024a2c:	6a 12                	push   0x12
c0024a2e:	56                   	push   esi
c0024a2f:	53                   	push   ebx
c0024a30:	e8 5b fc ff ff       	call   c0024690 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a35:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a39:	83 c4 20             	add    esp,0x20
c0024a3c:	83 e0 7f             	and    eax,0x7f
c0024a3f:	3c 70                	cmp    al,0x70
c0024a41:	74 15                	je     c0024a58 <ATAPI::detectMedia()+0x76>
c0024a43:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a4a:	75 0c                	jne    c0024a58 <ATAPI::detectMedia()+0x76>
c0024a4c:	83 ec 0c             	sub    esp,0xc
c0024a4f:	53                   	push   ebx
c0024a50:	e8 5f ff ff ff       	call   c00249b4 <ATAPI::diskInserted()>
c0024a55:	83 c4 10             	add    esp,0x10
c0024a58:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a5c:	83 e0 0f             	and    eax,0xf
c0024a5f:	3c 02                	cmp    al,0x2
c0024a61:	75 1b                	jne    c0024a7e <ATAPI::detectMedia()+0x9c>
c0024a63:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a68:	75 2d                	jne    c0024a97 <ATAPI::detectMedia()+0xb5>
c0024a6a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a71:	74 24                	je     c0024a97 <ATAPI::detectMedia()+0xb5>
c0024a73:	83 ec 0c             	sub    esp,0xc
c0024a76:	53                   	push   ebx
c0024a77:	e8 d4 fe ff ff       	call   c0024950 <ATAPI::diskRemoved()>
c0024a7c:	eb 16                	jmp    c0024a94 <ATAPI::detectMedia()+0xb2>
c0024a7e:	84 c0                	test   al,al
c0024a80:	75 15                	jne    c0024a97 <ATAPI::detectMedia()+0xb5>
c0024a82:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a89:	75 0c                	jne    c0024a97 <ATAPI::detectMedia()+0xb5>
c0024a8b:	83 ec 0c             	sub    esp,0xc
c0024a8e:	53                   	push   ebx
c0024a8f:	e8 20 ff ff ff       	call   c00249b4 <ATAPI::diskInserted()>
c0024a94:	83 c4 10             	add    esp,0x10
c0024a97:	83 c4 24             	add    esp,0x24
c0024a9a:	5b                   	pop    ebx
c0024a9b:	5e                   	pop    esi
c0024a9c:	c3                   	ret    
c0024a9d:	90                   	nop

c0024a9e <ATAPI::open(int, int, void*)>:
c0024a9e:	53                   	push   ebx
c0024a9f:	83 ec 08             	sub    esp,0x8
c0024aa2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024aa6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024aaa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024aae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ab4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024aba:	c1 e0 06             	shl    eax,0x6
c0024abd:	01 d0                	add    eax,edx
c0024abf:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024ac6:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024acc:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024ad3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024add:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ae3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024aea:	6a 04                	push   0x4
c0024aec:	6a 0c                	push   0xc
c0024aee:	51                   	push   ecx
c0024aef:	52                   	push   edx
c0024af0:	e8 15 e5 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024af5:	90                   	nop
c0024af6:	90                   	nop
c0024af7:	6a 00                	push   0x0
c0024af9:	6a 0c                	push   0xc
c0024afb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b02:	50                   	push   eax
c0024b03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b09:	e8 fc e4 ff ff       	call   c002300a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b0e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b15:	83 c4 14             	add    esp,0x14
c0024b18:	53                   	push   ebx
c0024b19:	e8 c4 fe ff ff       	call   c00249e2 <ATAPI::detectMedia()>
c0024b1e:	31 c0                	xor    eax,eax
c0024b20:	83 c4 18             	add    esp,0x18
c0024b23:	5b                   	pop    ebx
c0024b24:	c3                   	ret    
c0024b25:	90                   	nop

c0024b26 <ATAPI::read(unsigned long long, int, void*)>:
c0024b26:	55                   	push   ebp
c0024b27:	57                   	push   edi
c0024b28:	56                   	push   esi
c0024b29:	53                   	push   ebx
c0024b2a:	83 ec 1c             	sub    esp,0x1c
c0024b2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b31:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b35:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b39:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b40:	74 41                	je     c0024b83 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b42:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b46:	b9 03 00 00 00       	mov    ecx,0x3
c0024b4b:	fc                   	cld    
c0024b4c:	31 c0                	xor    eax,eax
c0024b4e:	86 fb                	xchg   bl,bh
c0024b50:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b52:	c1 c3 10             	rol    ebx,0x10
c0024b55:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b5a:	89 e8                	mov    eax,ebp
c0024b5c:	86 fb                	xchg   bl,bh
c0024b5e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b62:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b66:	50                   	push   eax
c0024b67:	50                   	push   eax
c0024b68:	55                   	push   ebp
c0024b69:	c1 e5 0b             	shl    ebp,0xb
c0024b6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b70:	6a 00                	push   0x0
c0024b72:	55                   	push   ebp
c0024b73:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b77:	50                   	push   eax
c0024b78:	56                   	push   esi
c0024b79:	e8 12 fb ff ff       	call   c0024690 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b7e:	83 c4 20             	add    esp,0x20
c0024b81:	eb 1a                	jmp    c0024b9d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b83:	83 ec 0c             	sub    esp,0xc
c0024b86:	56                   	push   esi
c0024b87:	e8 56 fe ff ff       	call   c00249e2 <ATAPI::detectMedia()>
c0024b8c:	83 c4 10             	add    esp,0x10
c0024b8f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b96:	75 aa                	jne    c0024b42 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b98:	b8 02 00 00 00       	mov    eax,0x2
c0024b9d:	83 c4 1c             	add    esp,0x1c
c0024ba0:	5b                   	pop    ebx
c0024ba1:	5e                   	pop    esi
c0024ba2:	5f                   	pop    edi
c0024ba3:	5d                   	pop    ebp
c0024ba4:	c3                   	ret    
c0024ba5:	90                   	nop

c0024ba6 <SATA::close(int, int, void*)>:
c0024ba6:	83 ec 0c             	sub    esp,0xc
c0024ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bb3:	85 c0                	test   eax,eax
c0024bb5:	74 0c                	je     c0024bc3 <SATA::close(int, int, void*)+0x1d>
c0024bb7:	83 ec 0c             	sub    esp,0xc
c0024bba:	8b 10                	mov    edx,DWORD PTR [eax]
c0024bbc:	50                   	push   eax
c0024bbd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024bc0:	83 c4 10             	add    esp,0x10
c0024bc3:	31 c0                	xor    eax,eax
c0024bc5:	83 c4 0c             	add    esp,0xc
c0024bc8:	c3                   	ret    
c0024bc9:	90                   	nop

c0024bca <SATA::powerSaving(PowerSavingLevel)>:
c0024bca:	c3                   	ret    
c0024bcb:	90                   	nop

c0024bcc <SATA::open(int, int, void*)>:
c0024bcc:	56                   	push   esi
c0024bcd:	53                   	push   ebx
c0024bce:	50                   	push   eax
c0024bcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bd7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024be1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024be7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bf5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024bff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c05:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c0c:	e8 d4 b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024c11:	89 c6                	mov    esi,eax
c0024c13:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c19:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c1f:	e8 c1 b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024c24:	39 c6                	cmp    esi,eax
c0024c26:	74 10                	je     c0024c38 <SATA::open(int, int, void*)+0x6c>
c0024c28:	83 ec 0c             	sub    esp,0xc
c0024c2b:	68 bc ce 02 c0       	push   0xc002cebc
c0024c30:	e8 d2 59 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0024c35:	83 c4 10             	add    esp,0x10
c0024c38:	83 ec 0c             	sub    esp,0xc
c0024c3b:	6a 02                	push   0x2
c0024c3d:	e8 01 cf fe ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0024c42:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c48:	e8 91 d1 fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0024c4d:	6a 03                	push   0x3
c0024c4f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c55:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c5b:	50                   	push   eax
c0024c5c:	e8 cf d6 fe ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c61:	83 c4 14             	add    esp,0x14
c0024c64:	53                   	push   ebx
c0024c65:	e8 a2 fb fe ff       	call   c001480c <PhysicalDisk::startCache()>
c0024c6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c6d:	e8 1c 1d ff ff       	call   c001698e <createPartitionsForDisk(PhysicalDisk*)>
c0024c72:	83 c4 14             	add    esp,0x14
c0024c75:	31 c0                	xor    eax,eax
c0024c77:	5b                   	pop    ebx
c0024c78:	5e                   	pop    esi
c0024c79:	c3                   	ret    

c0024c7a <SATA::SATA()>:
c0024c7a:	83 ec 0c             	sub    esp,0xc
c0024c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c81:	83 ec 04             	sub    esp,0x4
c0024c84:	68 00 02 00 00       	push   0x200
c0024c89:	68 d0 ce 02 c0       	push   0xc002ced0
c0024c8e:	50                   	push   eax
c0024c8f:	e8 10 fb fe ff       	call   c00147a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c94:	83 c4 10             	add    esp,0x10
c0024c97:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c0024c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ca0:	89 10                	mov    DWORD PTR [eax],edx
c0024ca2:	90                   	nop
c0024ca3:	83 c4 0c             	add    esp,0xc
c0024ca6:	c3                   	ret    
c0024ca7:	90                   	nop

c0024ca8 <SATA::access(unsigned long long, int, void*, bool)>:
c0024ca8:	55                   	push   ebp
c0024ca9:	57                   	push   edi
c0024caa:	56                   	push   esi
c0024cab:	53                   	push   ebx
c0024cac:	83 ec 2c             	sub    esp,0x2c
c0024caf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024cb3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024cb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024cbb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024cbf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024cc3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024cc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ccc:	7e 10                	jle    c0024cde <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024cce:	83 ec 0c             	sub    esp,0xc
c0024cd1:	68 e0 ce 02 c0       	push   0xc002cee0
c0024cd6:	e8 2c 59 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0024cdb:	83 c4 10             	add    esp,0x10
c0024cde:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024ce4:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024cea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cf4:	89 f0                	mov    eax,esi
c0024cf6:	c1 e0 07             	shl    eax,0x7
c0024cf9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cfd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d07:	53                   	push   ebx
c0024d08:	8d 46 02             	lea    eax,[esi+0x2]
c0024d0b:	53                   	push   ebx
c0024d0c:	c1 e0 07             	shl    eax,0x7
c0024d0f:	bb 01 00 00 00       	mov    ebx,0x1
c0024d14:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d18:	50                   	push   eax
c0024d19:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d1f:	e8 aa ef ff ff       	call   c0023cce <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d28:	83 c4 10             	add    esp,0x10
c0024d2b:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d30:	0f 84 ce 01 00 00    	je     c0024f04 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d36:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d3a:	c1 e0 09             	shl    eax,0x9
c0024d3d:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d46:	74 17                	je     c0024d5f <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d48:	51                   	push   ecx
c0024d49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d4d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d51:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d57:	e8 e8 b9 fd ff       	call   c0000744 <memcpy>
c0024d5c:	83 c4 10             	add    esp,0x10
c0024d5f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d65:	8d 46 02             	lea    eax,[esi+0x2]
c0024d68:	c1 e0 07             	shl    eax,0x7
c0024d6b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d71:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d77:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d7d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d81:	c1 e1 05             	shl    ecx,0x5
c0024d84:	01 c8                	add    eax,ecx
c0024d86:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d8a:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d8c:	83 e1 01             	and    ecx,0x1
c0024d8f:	83 e3 bf             	and    ebx,0xffffffbf
c0024d92:	c1 e1 06             	shl    ecx,0x6
c0024d95:	09 d9                	or     ecx,ebx
c0024d97:	88 08                	mov    BYTE PTR [eax],cl
c0024d99:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d9b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024da1:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024da7:	89 08                	mov    DWORD PTR [eax],ecx
c0024da9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024daf:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024db5:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024dbb:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024dbe:	52                   	push   edx
c0024dbf:	68 90 00 00 00       	push   0x90
c0024dc4:	6a 00                	push   0x0
c0024dc6:	53                   	push   ebx
c0024dc7:	e8 ac b9 fd ff       	call   c0000778 <memset>
c0024dcc:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024dd2:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024dd6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024ddc:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024de0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024de4:	83 c4 10             	add    esp,0x10
c0024de7:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024dea:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024df0:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024df6:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024dfb:	09 c8                	or     eax,ecx
c0024dfd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e03:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e06:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e0d:	66 25 00 7f          	and    ax,0x7f00
c0024e11:	66 0d 27 80          	or     ax,0x8027
c0024e15:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e1a:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e1d:	19 c0                	sbb    eax,eax
c0024e1f:	83 e0 f0             	and    eax,0xfffffff0
c0024e22:	83 c0 35             	add    eax,0x35
c0024e25:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e28:	89 f8                	mov    eax,edi
c0024e2a:	c1 e8 10             	shr    eax,0x10
c0024e2d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e30:	89 f8                	mov    eax,edi
c0024e32:	c1 e8 18             	shr    eax,0x18
c0024e35:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e38:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e3c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e43:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e46:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e4a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e4e:	89 f3                	mov    ebx,esi
c0024e50:	31 c0                	xor    eax,eax
c0024e52:	c1 e3 07             	shl    ebx,0x7
c0024e55:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e59:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e5f:	80 e1 88             	and    cl,0x88
c0024e62:	74 0a                	je     c0024e6e <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e64:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e69:	74 0a                	je     c0024e75 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e6b:	40                   	inc    eax
c0024e6c:	eb eb                	jmp    c0024e59 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e6e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e73:	75 0a                	jne    c0024e7f <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e75:	83 ec 0c             	sub    esp,0xc
c0024e78:	68 19 cf 02 c0       	push   0xc002cf19
c0024e7d:	eb 56                	jmp    c0024ed5 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e7f:	b8 01 00 00 00       	mov    eax,0x1
c0024e84:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e88:	c1 e6 07             	shl    esi,0x7
c0024e8b:	d3 e0                	shl    eax,cl
c0024e8d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e91:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e97:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e9d:	85 c8                	test   eax,ecx
c0024e9f:	74 20                	je     c0024ec1 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024ea1:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024ea7:	0f ba e1 1e          	bt     ecx,0x1e
c0024eab:	73 ea                	jae    c0024e97 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024ead:	83 ec 0c             	sub    esp,0xc
c0024eb0:	31 db                	xor    ebx,ebx
c0024eb2:	68 27 cf 02 c0       	push   0xc002cf27
c0024eb7:	e8 4b 57 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0024ebc:	83 c4 10             	add    esp,0x10
c0024ebf:	eb 43                	jmp    c0024f04 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ec1:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024ec7:	0f ba e0 1e          	bt     eax,0x1e
c0024ecb:	73 17                	jae    c0024ee4 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ecd:	83 ec 0c             	sub    esp,0xc
c0024ed0:	68 27 cf 02 c0       	push   0xc002cf27
c0024ed5:	e8 2d 57 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0024eda:	bb 01 00 00 00       	mov    ebx,0x1
c0024edf:	83 c4 10             	add    esp,0x10
c0024ee2:	eb 20                	jmp    c0024f04 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ee4:	31 db                	xor    ebx,ebx
c0024ee6:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024eeb:	75 17                	jne    c0024f04 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024eed:	50                   	push   eax
c0024eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ef2:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ef8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024efc:	e8 43 b8 fd ff       	call   c0000744 <memcpy>
c0024f01:	83 c4 10             	add    esp,0x10
c0024f04:	83 c4 2c             	add    esp,0x2c
c0024f07:	89 d8                	mov    eax,ebx
c0024f09:	5b                   	pop    ebx
c0024f0a:	5e                   	pop    esi
c0024f0b:	5f                   	pop    edi
c0024f0c:	5d                   	pop    ebp
c0024f0d:	c3                   	ret    

c0024f0e <SATA::read(unsigned long long, int, void*)>:
c0024f0e:	57                   	push   edi
c0024f0f:	b8 04 00 00 00       	mov    eax,0x4
c0024f14:	56                   	push   esi
c0024f15:	53                   	push   ebx
c0024f16:	83 ec 10             	sub    esp,0x10
c0024f19:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f21:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f24:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f2c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f32:	77 3b                	ja     c0024f6f <SATA::read(unsigned long long, int, void*)+0x61>
c0024f34:	b8 06 00 00 00       	mov    eax,0x6
c0024f39:	85 d2                	test   edx,edx
c0024f3b:	74 32                	je     c0024f6f <SATA::read(unsigned long long, int, void*)+0x61>
c0024f3d:	50                   	push   eax
c0024f3e:	50                   	push   eax
c0024f3f:	6a 00                	push   0x0
c0024f41:	52                   	push   edx
c0024f42:	53                   	push   ebx
c0024f43:	57                   	push   edi
c0024f44:	56                   	push   esi
c0024f45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f49:	e8 5a fd ff ff       	call   c0024ca8 <SATA::access(unsigned long long, int, void*, bool)>
c0024f4e:	83 c4 20             	add    esp,0x20
c0024f51:	85 c0                	test   eax,eax
c0024f53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f57:	75 11                	jne    c0024f6a <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f59:	01 1d c8 27 03 c0    	add    DWORD PTR ds:0xc00327c8,ebx
c0024f5f:	e8 34 ba fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0024f64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f68:	eb 05                	jmp    c0024f6f <SATA::read(unsigned long long, int, void*)+0x61>
c0024f6a:	b8 01 00 00 00       	mov    eax,0x1
c0024f6f:	83 c4 10             	add    esp,0x10
c0024f72:	5b                   	pop    ebx
c0024f73:	5e                   	pop    esi
c0024f74:	5f                   	pop    edi
c0024f75:	c3                   	ret    

c0024f76 <SATA::write(unsigned long long, int, void*)>:
c0024f76:	55                   	push   ebp
c0024f77:	b8 04 00 00 00       	mov    eax,0x4
c0024f7c:	57                   	push   edi
c0024f7d:	56                   	push   esi
c0024f7e:	53                   	push   ebx
c0024f7f:	83 ec 1c             	sub    esp,0x1c
c0024f82:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f86:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f8a:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f8d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f91:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f95:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f9b:	77 56                	ja     c0024ff3 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f9d:	b8 06 00 00 00       	mov    eax,0x6
c0024fa2:	85 ff                	test   edi,edi
c0024fa4:	74 4d                	je     c0024ff3 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fa6:	89 ee                	mov    esi,ebp
c0024fa8:	c1 e6 09             	shl    esi,0x9
c0024fab:	01 fe                	add    esi,edi
c0024fad:	89 c8                	mov    eax,ecx
c0024faf:	89 da                	mov    edx,ebx
c0024fb1:	83 c0 01             	add    eax,0x1
c0024fb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024fb8:	83 d2 00             	adc    edx,0x0
c0024fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024fbf:	50                   	push   eax
c0024fc0:	50                   	push   eax
c0024fc1:	6a 01                	push   0x1
c0024fc3:	57                   	push   edi
c0024fc4:	81 c7 00 02 00 00    	add    edi,0x200
c0024fca:	6a 01                	push   0x1
c0024fcc:	53                   	push   ebx
c0024fcd:	51                   	push   ecx
c0024fce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fd2:	e8 d1 fc ff ff       	call   c0024ca8 <SATA::access(unsigned long long, int, void*, bool)>
c0024fd7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fdb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fdf:	83 c4 20             	add    esp,0x20
c0024fe2:	39 f7                	cmp    edi,esi
c0024fe4:	75 c7                	jne    c0024fad <SATA::write(unsigned long long, int, void*)+0x37>
c0024fe6:	01 2d c4 27 03 c0    	add    DWORD PTR ds:0xc00327c4,ebp
c0024fec:	e8 a7 b9 fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0024ff1:	31 c0                	xor    eax,eax
c0024ff3:	83 c4 1c             	add    esp,0x1c
c0024ff6:	5b                   	pop    ebx
c0024ff7:	5e                   	pop    esi
c0024ff8:	5f                   	pop    edi
c0024ff9:	5d                   	pop    ebp
c0024ffa:	c3                   	ret    
c0024ffb:	90                   	nop

c0024ffc <SATAPI::write(unsigned long long, int, void*)>:
c0024ffc:	b8 03 00 00 00       	mov    eax,0x3
c0025001:	c3                   	ret    

c0025002 <SATAPI::close(int, int, void*)>:
c0025002:	83 ec 0c             	sub    esp,0xc
c0025005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025009:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002500f:	85 c0                	test   eax,eax
c0025011:	74 0c                	je     c002501f <SATAPI::close(int, int, void*)+0x1d>
c0025013:	83 ec 0c             	sub    esp,0xc
c0025016:	8b 10                	mov    edx,DWORD PTR [eax]
c0025018:	50                   	push   eax
c0025019:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002501c:	83 c4 10             	add    esp,0x10
c002501f:	31 c0                	xor    eax,eax
c0025021:	83 c4 0c             	add    esp,0xc
c0025024:	c3                   	ret    
c0025025:	90                   	nop

c0025026 <SATAPI::SATAPI()>:
c0025026:	83 ec 0c             	sub    esp,0xc
c0025029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002502d:	83 ec 04             	sub    esp,0x4
c0025030:	68 00 08 00 00       	push   0x800
c0025035:	68 70 cf 02 c0       	push   0xc002cf70
c002503a:	50                   	push   eax
c002503b:	e8 64 f7 fe ff       	call   c00147a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025040:	83 c4 10             	add    esp,0x10
c0025043:	ba 1c d0 02 c0       	mov    edx,0xc002d01c
c0025048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002504c:	89 10                	mov    DWORD PTR [eax],edx
c002504e:	90                   	nop
c002504f:	83 c4 0c             	add    esp,0xc
c0025052:	c3                   	ret    
c0025053:	90                   	nop

c0025054 <SATAPI::diskRemoved()>:
c0025054:	83 ec 18             	sub    esp,0x18
c0025057:	68 7c cf 02 c0       	push   0xc002cf7c
c002505c:	e8 f9 de fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0025061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025065:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002506c:	83 c4 1c             	add    esp,0x1c
c002506f:	c3                   	ret    

c0025070 <SATAPI::diskInserted()>:
c0025070:	53                   	push   ebx
c0025071:	83 ec 14             	sub    esp,0x14
c0025074:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025078:	68 93 cf 02 c0       	push   0xc002cf93
c002507d:	e8 d8 de fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0025082:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025089:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002508c:	e8 7b f7 fe ff       	call   c001480c <PhysicalDisk::startCache()>
c0025091:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025095:	83 c4 18             	add    esp,0x18
c0025098:	5b                   	pop    ebx
c0025099:	e9 f0 18 ff ff       	jmp    c001698e <createPartitionsForDisk(PhysicalDisk*)>

c002509e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002509e:	55                   	push   ebp
c002509f:	57                   	push   edi
c00250a0:	56                   	push   esi
c00250a1:	53                   	push   ebx
c00250a2:	83 ec 24             	sub    esp,0x24
c00250a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250a9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250ad:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00250b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250b7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250bb:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00250c1:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250ca:	c1 e3 07             	shl    ebx,0x7
c00250cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250d1:	89 f8                	mov    eax,edi
c00250d3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250d7:	c1 e0 07             	shl    eax,0x7
c00250da:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250e2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250ec:	53                   	push   ebx
c00250ed:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250f3:	e8 d6 eb ff ff       	call   c0023cce <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250fc:	83 c4 10             	add    esp,0x10
c00250ff:	b8 01 00 00 00       	mov    eax,0x1
c0025104:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025109:	0f 84 8a 01 00 00    	je     c0025299 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002510f:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025115:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025117:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002511d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025123:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025127:	c1 e1 05             	shl    ecx,0x5
c002512a:	01 c8                	add    eax,ecx
c002512c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002512e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025134:	81 c9 25 00 01 00    	or     ecx,0x10025
c002513a:	89 08                	mov    DWORD PTR [eax],ecx
c002513c:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025142:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025148:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002514e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025151:	52                   	push   edx
c0025152:	68 90 00 00 00       	push   0x90
c0025157:	6a 00                	push   0x0
c0025159:	53                   	push   ebx
c002515a:	e8 19 b6 fd ff       	call   c0000778 <memset>
c002515f:	83 c4 0c             	add    esp,0xc
c0025162:	8d 43 40             	lea    eax,[ebx+0x40]
c0025165:	6a 0c                	push   0xc
c0025167:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002516b:	50                   	push   eax
c002516c:	e8 d3 b5 fd ff       	call   c0000744 <memcpy>
c0025171:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025177:	89 ea                	mov    edx,ebp
c0025179:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002517f:	c1 ea 18             	shr    edx,0x18
c0025182:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025186:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025189:	8d 48 ff             	lea    ecx,[eax-0x1]
c002518c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025190:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025196:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002519c:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251a1:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00251a5:	09 c8                	or     eax,ecx
c00251a7:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00251ab:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00251b1:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00251b4:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00251bb:	66 25 00 7f          	and    ax,0x7f00
c00251bf:	66 0d 27 80          	or     ax,0x8027
c00251c3:	66 89 03             	mov    WORD PTR [ebx],ax
c00251c6:	89 e8                	mov    eax,ebp
c00251c8:	c1 e8 10             	shr    eax,0x10
c00251cb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251ce:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251d2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251d9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251dc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251e0:	83 c4 10             	add    esp,0x10
c00251e3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251eb:	31 c0                	xor    eax,eax
c00251ed:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251f3:	80 e1 88             	and    cl,0x88
c00251f6:	74 0a                	je     c0025202 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251f8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251fd:	74 0a                	je     c0025209 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251ff:	40                   	inc    eax
c0025200:	eb eb                	jmp    c00251ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025202:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025207:	75 0f                	jne    c0025218 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025209:	83 ec 0c             	sub    esp,0xc
c002520c:	68 19 cf 02 c0       	push   0xc002cf19
c0025211:	e8 f1 53 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0025216:	eb 3a                	jmp    c0025252 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025218:	b8 01 00 00 00       	mov    eax,0x1
c002521d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025221:	c1 e7 07             	shl    edi,0x7
c0025224:	d3 e0                	shl    eax,cl
c0025226:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025229:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002522f:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025235:	85 d0                	test   eax,edx
c0025237:	74 23                	je     c002525c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025239:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002523f:	0f ba e2 1e          	bt     edx,0x1e
c0025243:	73 ea                	jae    c002522f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025245:	83 ec 0c             	sub    esp,0xc
c0025248:	68 ab cf 02 c0       	push   0xc002cfab
c002524d:	e8 08 dd fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0025252:	83 c4 10             	add    esp,0x10
c0025255:	b8 01 00 00 00       	mov    eax,0x1
c002525a:	eb 3d                	jmp    c0025299 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002525c:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025262:	0f ba e0 1e          	bt     eax,0x1e
c0025266:	73 0a                	jae    c0025272 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025268:	83 ec 0c             	sub    esp,0xc
c002526b:	68 be cf 02 c0       	push   0xc002cfbe
c0025270:	eb db                	jmp    c002524d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025272:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025277:	74 1e                	je     c0025297 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025279:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002527e:	74 17                	je     c0025297 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025280:	50                   	push   eax
c0025281:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025285:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c002528b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002528f:	e8 b0 b4 fd ff       	call   c0000744 <memcpy>
c0025294:	83 c4 10             	add    esp,0x10
c0025297:	31 c0                	xor    eax,eax
c0025299:	83 c4 1c             	add    esp,0x1c
c002529c:	5b                   	pop    ebx
c002529d:	5e                   	pop    esi
c002529e:	5f                   	pop    edi
c002529f:	5d                   	pop    ebp
c00252a0:	c3                   	ret    
c00252a1:	90                   	nop

c00252a2 <SATAPI::eject()>:
c00252a2:	57                   	push   edi
c00252a3:	b9 03 00 00 00       	mov    ecx,0x3
c00252a8:	53                   	push   ebx
c00252a9:	83 ec 14             	sub    esp,0x14
c00252ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252b0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252b4:	fc                   	cld    
c00252b5:	31 c0                	xor    eax,eax
c00252b7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252b9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252be:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252c3:	50                   	push   eax
c00252c4:	6a 00                	push   0x0
c00252c6:	6a 00                	push   0x0
c00252c8:	6a 00                	push   0x0
c00252ca:	6a 00                	push   0x0
c00252cc:	6a 02                	push   0x2
c00252ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252d2:	50                   	push   eax
c00252d3:	53                   	push   ebx
c00252d4:	e8 c5 fd ff ff       	call   c002509e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252d9:	83 c4 14             	add    esp,0x14
c00252dc:	53                   	push   ebx
c00252dd:	e8 72 fd ff ff       	call   c0025054 <SATAPI::diskRemoved()>
c00252e2:	83 c4 24             	add    esp,0x24
c00252e5:	31 c0                	xor    eax,eax
c00252e7:	5b                   	pop    ebx
c00252e8:	5f                   	pop    edi
c00252e9:	c3                   	ret    

c00252ea <SATAPI::detectMedia()>:
c00252ea:	56                   	push   esi
c00252eb:	53                   	push   ebx
c00252ec:	83 ec 28             	sub    esp,0x28
c00252ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252f3:	6a 0c                	push   0xc
c00252f5:	6a 00                	push   0x0
c00252f7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252fb:	56                   	push   esi
c00252fc:	e8 77 b4 fd ff       	call   c0000778 <memset>
c0025301:	83 c4 0c             	add    esp,0xc
c0025304:	6a 00                	push   0x0
c0025306:	6a 00                	push   0x0
c0025308:	6a 00                	push   0x0
c002530a:	6a 00                	push   0x0
c002530c:	6a 00                	push   0x0
c002530e:	56                   	push   esi
c002530f:	53                   	push   ebx
c0025310:	e8 89 fd ff ff       	call   c002509e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025315:	83 c4 1c             	add    esp,0x1c
c0025318:	6a 0c                	push   0xc
c002531a:	6a 00                	push   0x0
c002531c:	56                   	push   esi
c002531d:	e8 56 b4 fd ff       	call   c0000778 <memset>
c0025322:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025327:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002532c:	83 c4 0c             	add    esp,0xc
c002532f:	6a 01                	push   0x1
c0025331:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025335:	50                   	push   eax
c0025336:	6a 00                	push   0x0
c0025338:	6a 00                	push   0x0
c002533a:	6a 12                	push   0x12
c002533c:	56                   	push   esi
c002533d:	53                   	push   ebx
c002533e:	e8 5b fd ff ff       	call   c002509e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025343:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025347:	83 c4 20             	add    esp,0x20
c002534a:	83 e0 7f             	and    eax,0x7f
c002534d:	3c 70                	cmp    al,0x70
c002534f:	74 15                	je     c0025366 <SATAPI::detectMedia()+0x7c>
c0025351:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025358:	75 0c                	jne    c0025366 <SATAPI::detectMedia()+0x7c>
c002535a:	83 ec 0c             	sub    esp,0xc
c002535d:	53                   	push   ebx
c002535e:	e8 0d fd ff ff       	call   c0025070 <SATAPI::diskInserted()>
c0025363:	83 c4 10             	add    esp,0x10
c0025366:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002536a:	83 e0 0f             	and    eax,0xf
c002536d:	3c 02                	cmp    al,0x2
c002536f:	75 1b                	jne    c002538c <SATAPI::detectMedia()+0xa2>
c0025371:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025376:	75 2d                	jne    c00253a5 <SATAPI::detectMedia()+0xbb>
c0025378:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002537f:	74 24                	je     c00253a5 <SATAPI::detectMedia()+0xbb>
c0025381:	83 ec 0c             	sub    esp,0xc
c0025384:	53                   	push   ebx
c0025385:	e8 ca fc ff ff       	call   c0025054 <SATAPI::diskRemoved()>
c002538a:	eb 16                	jmp    c00253a2 <SATAPI::detectMedia()+0xb8>
c002538c:	84 c0                	test   al,al
c002538e:	75 15                	jne    c00253a5 <SATAPI::detectMedia()+0xbb>
c0025390:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025397:	75 0c                	jne    c00253a5 <SATAPI::detectMedia()+0xbb>
c0025399:	83 ec 0c             	sub    esp,0xc
c002539c:	53                   	push   ebx
c002539d:	e8 ce fc ff ff       	call   c0025070 <SATAPI::diskInserted()>
c00253a2:	83 c4 10             	add    esp,0x10
c00253a5:	83 c4 24             	add    esp,0x24
c00253a8:	5b                   	pop    ebx
c00253a9:	5e                   	pop    esi
c00253aa:	c3                   	ret    
c00253ab:	90                   	nop

c00253ac <SATAPI::open(int, int, void*)>:
c00253ac:	56                   	push   esi
c00253ad:	53                   	push   ebx
c00253ae:	50                   	push   eax
c00253af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253b7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253c1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253c7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253d5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253df:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253e5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253ec:	e8 f4 aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c00253f1:	89 c6                	mov    esi,eax
c00253f3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253f9:	81 c6 00 10 00 00    	add    esi,0x1000
c00253ff:	e8 e1 aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c0025404:	39 c6                	cmp    esi,eax
c0025406:	74 10                	je     c0025418 <SATAPI::open(int, int, void*)+0x6c>
c0025408:	83 ec 0c             	sub    esp,0xc
c002540b:	68 d3 cf 02 c0       	push   0xc002cfd3
c0025410:	e8 f2 51 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0025415:	83 c4 10             	add    esp,0x10
c0025418:	83 ec 0c             	sub    esp,0xc
c002541b:	6a 02                	push   0x2
c002541d:	e8 21 c7 fe ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0025422:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025428:	e8 b1 c9 fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c002542d:	6a 03                	push   0x3
c002542f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025435:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002543b:	50                   	push   eax
c002543c:	e8 ef ce fe ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025441:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025448:	83 c4 14             	add    esp,0x14
c002544b:	53                   	push   ebx
c002544c:	e8 99 fe ff ff       	call   c00252ea <SATAPI::detectMedia()>
c0025451:	83 c4 14             	add    esp,0x14
c0025454:	31 c0                	xor    eax,eax
c0025456:	5b                   	pop    ebx
c0025457:	5e                   	pop    esi
c0025458:	c3                   	ret    
c0025459:	90                   	nop

c002545a <SATAPI::read(unsigned long long, int, void*)>:
c002545a:	55                   	push   ebp
c002545b:	57                   	push   edi
c002545c:	56                   	push   esi
c002545d:	53                   	push   ebx
c002545e:	83 ec 1c             	sub    esp,0x1c
c0025461:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025465:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025469:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002546d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025474:	74 19                	je     c002548f <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025476:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002547b:	7e 2e                	jle    c00254ab <SATAPI::read(unsigned long long, int, void*)+0x51>
c002547d:	83 ec 0c             	sub    esp,0xc
c0025480:	68 e9 cf 02 c0       	push   0xc002cfe9
c0025485:	e8 7d 51 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c002548a:	83 c4 10             	add    esp,0x10
c002548d:	eb 1c                	jmp    c00254ab <SATAPI::read(unsigned long long, int, void*)+0x51>
c002548f:	83 ec 0c             	sub    esp,0xc
c0025492:	55                   	push   ebp
c0025493:	e8 52 fe ff ff       	call   c00252ea <SATAPI::detectMedia()>
c0025498:	83 c4 10             	add    esp,0x10
c002549b:	b8 02 00 00 00       	mov    eax,0x2
c00254a0:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254a7:	75 cd                	jne    c0025476 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00254a9:	eb 49                	jmp    c00254f4 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00254ab:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254af:	b9 03 00 00 00       	mov    ecx,0x3
c00254b4:	fc                   	cld    
c00254b5:	31 c0                	xor    eax,eax
c00254b7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254b9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254be:	89 d8                	mov    eax,ebx
c00254c0:	86 e0                	xchg   al,ah
c00254c2:	c1 c0 10             	rol    eax,0x10
c00254c5:	86 e0                	xchg   al,ah
c00254c7:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254cb:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254cf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254d3:	50                   	push   eax
c00254d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254dc:	56                   	push   esi
c00254dd:	53                   	push   ebx
c00254de:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254e2:	c1 e0 0b             	shl    eax,0xb
c00254e5:	50                   	push   eax
c00254e6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254ea:	50                   	push   eax
c00254eb:	55                   	push   ebp
c00254ec:	e8 ad fb ff ff       	call   c002509e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254f1:	83 c4 20             	add    esp,0x20
c00254f4:	83 c4 1c             	add    esp,0x1c
c00254f7:	5b                   	pop    ebx
c00254f8:	5e                   	pop    esi
c00254f9:	5f                   	pop    edi
c00254fa:	5d                   	pop    ebp
c00254fb:	c3                   	ret    

c00254fc <AVX::open(int, int, void*)>:
c00254fc:	83 ec 0c             	sub    esp,0xc
c00254ff:	e8 44 11 00 00       	call   c0026648 <avxInit>
c0025504:	b8 00 00 00 00       	mov    eax,0x0
c0025509:	83 c4 0c             	add    esp,0xc
c002550c:	c3                   	ret    
c002550d:	90                   	nop

c002550e <AVX::close(int, int, void*)>:
c002550e:	83 ec 0c             	sub    esp,0xc
c0025511:	e8 33 11 00 00       	call   c0026649 <avxClose>
c0025516:	b8 00 00 00 00       	mov    eax,0x0
c002551b:	83 c4 0c             	add    esp,0xc
c002551e:	c3                   	ret    
c002551f:	90                   	nop

c0025520 <AVX::available()>:
c0025520:	83 ec 0c             	sub    esp,0xc
c0025523:	e8 18 11 00 00       	call   c0026640 <avxDetect>
c0025528:	85 c0                	test   eax,eax
c002552a:	0f 95 c0             	setne  al
c002552d:	83 c4 0c             	add    esp,0xc
c0025530:	c3                   	ret    
c0025531:	90                   	nop

c0025532 <AVX::save(void*)>:
c0025532:	83 ec 0c             	sub    esp,0xc
c0025535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025539:	83 ec 0c             	sub    esp,0xc
c002553c:	50                   	push   eax
c002553d:	e8 04 11 00 00       	call   c0026646 <avxSave>
c0025542:	83 c4 10             	add    esp,0x10
c0025545:	90                   	nop
c0025546:	83 c4 0c             	add    esp,0xc
c0025549:	c3                   	ret    

c002554a <AVX::load(void*)>:
c002554a:	83 ec 0c             	sub    esp,0xc
c002554d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025551:	83 ec 0c             	sub    esp,0xc
c0025554:	50                   	push   eax
c0025555:	e8 ed 10 00 00       	call   c0026647 <avxLoad>
c002555a:	83 c4 10             	add    esp,0x10
c002555d:	90                   	nop
c002555e:	83 c4 0c             	add    esp,0xc
c0025561:	c3                   	ret    

c0025562 <AVX::AVX()>:
c0025562:	83 ec 0c             	sub    esp,0xc
c0025565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025569:	83 ec 08             	sub    esp,0x8
c002556c:	68 4c d0 02 c0       	push   0xc002d04c
c0025571:	50                   	push   eax
c0025572:	e8 0b f3 fe ff       	call   c0014882 <FPU::FPU(char const*)>
c0025577:	83 c4 10             	add    esp,0x10
c002557a:	ba 5c d0 02 c0       	mov    edx,0xc002d05c
c002557f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025583:	89 10                	mov    DWORD PTR [eax],edx
c0025585:	90                   	nop
c0025586:	83 c4 0c             	add    esp,0xc
c0025589:	c3                   	ret    

c002558a <MMX::available()>:
c002558a:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c002558f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025595:	83 e0 20             	and    eax,0x20
c0025598:	84 c0                	test   al,al
c002559a:	0f 95 c0             	setne  al
c002559d:	c3                   	ret    

c002559e <MMX::open(int, int, void*)>:
c002559e:	83 ec 0c             	sub    esp,0xc
c00255a1:	e8 26 11 00 00       	call   c00266cc <x87Init>
c00255a6:	b8 00 00 00 00       	mov    eax,0x0
c00255ab:	83 c4 0c             	add    esp,0xc
c00255ae:	c3                   	ret    
c00255af:	90                   	nop

c00255b0 <MMX::close(int, int, void*)>:
c00255b0:	83 ec 0c             	sub    esp,0xc
c00255b3:	e8 2e 11 00 00       	call   c00266e6 <x87Close>
c00255b8:	b8 00 00 00 00       	mov    eax,0x0
c00255bd:	83 c4 0c             	add    esp,0xc
c00255c0:	c3                   	ret    
c00255c1:	90                   	nop

c00255c2 <MMX::save(void*)>:
c00255c2:	83 ec 0c             	sub    esp,0xc
c00255c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255c9:	83 ec 0c             	sub    esp,0xc
c00255cc:	50                   	push   eax
c00255cd:	e8 ef 10 00 00       	call   c00266c1 <x87Save>
c00255d2:	83 c4 10             	add    esp,0x10
c00255d5:	90                   	nop
c00255d6:	83 c4 0c             	add    esp,0xc
c00255d9:	c3                   	ret    

c00255da <MMX::load(void*)>:
c00255da:	83 ec 0c             	sub    esp,0xc
c00255dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255e1:	83 ec 0c             	sub    esp,0xc
c00255e4:	50                   	push   eax
c00255e5:	e8 dd 10 00 00       	call   c00266c7 <x87Load>
c00255ea:	83 c4 10             	add    esp,0x10
c00255ed:	90                   	nop
c00255ee:	83 c4 0c             	add    esp,0xc
c00255f1:	c3                   	ret    

c00255f2 <MMX::MMX()>:
c00255f2:	83 ec 0c             	sub    esp,0xc
c00255f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f9:	83 ec 08             	sub    esp,0x8
c00255fc:	68 8c d0 02 c0       	push   0xc002d08c
c0025601:	50                   	push   eax
c0025602:	e8 7b f2 fe ff       	call   c0014882 <FPU::FPU(char const*)>
c0025607:	83 c4 10             	add    esp,0x10
c002560a:	ba 9c d0 02 c0       	mov    edx,0xc002d09c
c002560f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025613:	89 10                	mov    DWORD PTR [eax],edx
c0025615:	90                   	nop
c0025616:	83 c4 0c             	add    esp,0xc
c0025619:	c3                   	ret    

c002561a <SSE::open(int, int, void*)>:
c002561a:	83 ec 0c             	sub    esp,0xc
c002561d:	e8 62 10 00 00       	call   c0026684 <sseInit>
c0025622:	b8 00 00 00 00       	mov    eax,0x0
c0025627:	83 c4 0c             	add    esp,0xc
c002562a:	c3                   	ret    
c002562b:	90                   	nop

c002562c <SSE::close(int, int, void*)>:
c002562c:	83 ec 0c             	sub    esp,0xc
c002562f:	e8 60 10 00 00       	call   c0026694 <sseClose>
c0025634:	b8 00 00 00 00       	mov    eax,0x0
c0025639:	83 c4 0c             	add    esp,0xc
c002563c:	c3                   	ret    
c002563d:	90                   	nop

c002563e <SSE::available()>:
c002563e:	83 ec 1c             	sub    esp,0x1c
c0025641:	e8 1a 10 00 00       	call   c0026660 <absolutelyNoChanceInHell>
c0025646:	85 c0                	test   eax,eax
c0025648:	0f 95 c0             	setne  al
c002564b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002564f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025653:	83 c4 1c             	add    esp,0x1c
c0025656:	c3                   	ret    
c0025657:	90                   	nop

c0025658 <SSE::save(void*)>:
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002565f:	83 ec 0c             	sub    esp,0xc
c0025662:	50                   	push   eax
c0025663:	e8 10 10 00 00       	call   c0026678 <sseSave>
c0025668:	83 c4 10             	add    esp,0x10
c002566b:	90                   	nop
c002566c:	83 c4 0c             	add    esp,0xc
c002566f:	c3                   	ret    

c0025670 <SSE::load(void*)>:
c0025670:	83 ec 0c             	sub    esp,0xc
c0025673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025677:	83 ec 0c             	sub    esp,0xc
c002567a:	50                   	push   eax
c002567b:	e8 fe 0f 00 00       	call   c002667e <sseLoad>
c0025680:	83 c4 10             	add    esp,0x10
c0025683:	90                   	nop
c0025684:	83 c4 0c             	add    esp,0xc
c0025687:	c3                   	ret    

c0025688 <SSE::SSE()>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002568f:	83 ec 08             	sub    esp,0x8
c0025692:	68 cc d0 02 c0       	push   0xc002d0cc
c0025697:	50                   	push   eax
c0025698:	e8 e5 f1 fe ff       	call   c0014882 <FPU::FPU(char const*)>
c002569d:	83 c4 10             	add    esp,0x10
c00256a0:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c00256a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a9:	89 10                	mov    DWORD PTR [eax],edx
c00256ab:	90                   	nop
c00256ac:	83 c4 0c             	add    esp,0xc
c00256af:	c3                   	ret    

c00256b0 <x87::open(int, int, void*)>:
c00256b0:	83 ec 0c             	sub    esp,0xc
c00256b3:	e8 14 10 00 00       	call   c00266cc <x87Init>
c00256b8:	b8 00 00 00 00       	mov    eax,0x0
c00256bd:	83 c4 0c             	add    esp,0xc
c00256c0:	c3                   	ret    
c00256c1:	90                   	nop

c00256c2 <x87::close(int, int, void*)>:
c00256c2:	83 ec 0c             	sub    esp,0xc
c00256c5:	e8 1c 10 00 00       	call   c00266e6 <x87Close>
c00256ca:	b8 00 00 00 00       	mov    eax,0x0
c00256cf:	83 c4 0c             	add    esp,0xc
c00256d2:	c3                   	ret    
c00256d3:	90                   	nop

c00256d4 <x87::available()>:
c00256d4:	83 ec 0c             	sub    esp,0xc
c00256d7:	e8 ca 0f 00 00       	call   c00266a6 <x87Detect>
c00256dc:	85 c0                	test   eax,eax
c00256de:	0f 95 c0             	setne  al
c00256e1:	83 c4 0c             	add    esp,0xc
c00256e4:	c3                   	ret    
c00256e5:	90                   	nop

c00256e6 <x87::save(void*)>:
c00256e6:	83 ec 0c             	sub    esp,0xc
c00256e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256ed:	83 ec 0c             	sub    esp,0xc
c00256f0:	50                   	push   eax
c00256f1:	e8 cb 0f 00 00       	call   c00266c1 <x87Save>
c00256f6:	83 c4 10             	add    esp,0x10
c00256f9:	90                   	nop
c00256fa:	83 c4 0c             	add    esp,0xc
c00256fd:	c3                   	ret    

c00256fe <x87::load(void*)>:
c00256fe:	83 ec 0c             	sub    esp,0xc
c0025701:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025705:	83 ec 0c             	sub    esp,0xc
c0025708:	50                   	push   eax
c0025709:	e8 b9 0f 00 00       	call   c00266c7 <x87Load>
c002570e:	83 c4 10             	add    esp,0x10
c0025711:	90                   	nop
c0025712:	83 c4 0c             	add    esp,0xc
c0025715:	c3                   	ret    

c0025716 <x87::x87()>:
c0025716:	83 ec 0c             	sub    esp,0xc
c0025719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002571d:	83 ec 08             	sub    esp,0x8
c0025720:	68 0c d1 02 c0       	push   0xc002d10c
c0025725:	50                   	push   eax
c0025726:	e8 57 f1 fe ff       	call   c0014882 <FPU::FPU(char const*)>
c002572b:	83 c4 10             	add    esp,0x10
c002572e:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c0025733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025737:	89 10                	mov    DWORD PTR [eax],edx
c0025739:	90                   	nop
c002573a:	83 c4 0c             	add    esp,0xc
c002573d:	c3                   	ret    

c002573e <APIC::disable()>:
c002573e:	90                   	nop
c002573f:	c3                   	ret    

c0025740 <APIC::close(int, int, void*)>:
c0025740:	55                   	push   ebp
c0025741:	89 e5                	mov    ebp,esp
c0025743:	83 ec 08             	sub    esp,0x8
c0025746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025749:	8b 00                	mov    eax,DWORD PTR [eax]
c002574b:	83 c0 3c             	add    eax,0x3c
c002574e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025750:	83 ec 0c             	sub    esp,0xc
c0025753:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025756:	ff d0                	call   eax
c0025758:	83 c4 10             	add    esp,0x10
c002575b:	b8 00 00 00 00       	mov    eax,0x0
c0025760:	c9                   	leave  
c0025761:	c3                   	ret    

c0025762 <IOAPIC::close(int, int, void*)>:
c0025762:	b8 00 00 00 00       	mov    eax,0x0
c0025767:	c3                   	ret    

c0025768 <APIC::io_wait()>:
c0025768:	eb 00                	jmp    c002576a <APIC::io_wait()+0x2>
c002576a:	eb 00                	jmp    c002576c <APIC::io_wait()+0x4>
c002576c:	90                   	nop
c002576d:	c3                   	ret    

c002576e <APIC::getBase()>:
c002576e:	55                   	push   ebp
c002576f:	89 e5                	mov    ebp,esp
c0025771:	83 ec 18             	sub    esp,0x18
c0025774:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0025779:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002577f:	83 e0 08             	and    eax,0x8
c0025782:	84 c0                	test   al,al
c0025784:	75 07                	jne    c002578d <APIC::getBase()+0x1f>
c0025786:	b8 00 00 00 00       	mov    eax,0x0
c002578b:	eb 21                	jmp    c00257ae <APIC::getBase()+0x40>
c002578d:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0025792:	83 ec 08             	sub    esp,0x8
c0025795:	6a 1b                	push   0x1b
c0025797:	50                   	push   eax
c0025798:	e8 4b 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c002579d:	83 c4 10             	add    esp,0x10
c00257a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00257ae:	c9                   	leave  
c00257af:	c3                   	ret    

c00257b0 <APIC::eoi(unsigned char)>:
c00257b0:	55                   	push   ebp
c00257b1:	89 e5                	mov    ebp,esp
c00257b3:	83 ec 28             	sub    esp,0x28
c00257b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257b9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257bc:	83 ec 0c             	sub    esp,0xc
c00257bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257c2:	e8 a7 ff ff ff       	call   c002576e <APIC::getBase()>
c00257c7:	83 c4 10             	add    esp,0x10
c00257ca:	05 b0 00 00 00       	add    eax,0xb0
c00257cf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257d5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257db:	90                   	nop
c00257dc:	c9                   	leave  
c00257dd:	c3                   	ret    

c00257de <APIC::open(int, int, void*)>:
c00257de:	55                   	push   ebp
c00257df:	89 e5                	mov    ebp,esp
c00257e1:	57                   	push   edi
c00257e2:	56                   	push   esi
c00257e3:	53                   	push   ebx
c00257e4:	83 ec 2c             	sub    esp,0x2c
c00257e7:	83 ec 0c             	sub    esp,0xc
c00257ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ed:	e8 7c ff ff ff       	call   c002576e <APIC::getBase()>
c00257f2:	83 c4 10             	add    esp,0x10
c00257f5:	89 c2                	mov    edx,eax
c00257f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257fa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025800:	0f b6 f8             	movzx  edi,al
c0025803:	89 d0                	mov    eax,edx
c0025805:	ba 00 00 00 00       	mov    edx,0x0
c002580a:	89 c1                	mov    ecx,eax
c002580c:	80 e5 ff             	and    ch,0xff
c002580f:	89 cb                	mov    ebx,ecx
c0025811:	0f b6 f2             	movzx  esi,dl
c0025814:	89 d8                	mov    eax,ebx
c0025816:	89 f2                	mov    edx,esi
c0025818:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002581b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002581e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025822:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025826:	83 e0 00             	and    eax,0x0
c0025829:	09 d0                	or     eax,edx
c002582b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025832:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025838:	8d 50 01             	lea    edx,[eax+0x1]
c002583b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002583e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025844:	0f b6 d0             	movzx  edx,al
c0025847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002584a:	83 c2 08             	add    edx,0x8
c002584d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025851:	0f b6 c9             	movzx  ecx,cl
c0025854:	81 c9 00 00 01 00    	or     ecx,0x10000
c002585a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002585e:	83 ec 0c             	sub    esp,0xc
c0025861:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025864:	e8 05 ff ff ff       	call   c002576e <APIC::getBase()>
c0025869:	83 c4 10             	add    esp,0x10
c002586c:	05 f0 00 00 00       	add    eax,0xf0
c0025871:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025874:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025877:	8b 00                	mov    eax,DWORD PTR [eax]
c0025879:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002587c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025883:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002588a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002588d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025890:	89 10                	mov    DWORD PTR [eax],edx
c0025892:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025899:	a1 50 0d 03 c0       	mov    eax,ds:0xc0030d50
c002589e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00258a1:	7d 7c                	jge    c002591f <APIC::open(int, int, void*)+0x141>
c00258a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258a6:	8b 04 85 60 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2a0]
c00258ad:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00258b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258b3:	8b 04 85 60 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2a0]
c00258ba:	c1 e8 08             	shr    eax,0x8
c00258bd:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00258c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258c4:	8b 04 85 60 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2a0]
c00258cb:	c1 e8 18             	shr    eax,0x18
c00258ce:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258d1:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258d5:	75 40                	jne    c0025917 <APIC::open(int, int, void*)+0x139>
c00258d7:	83 ec 0c             	sub    esp,0xc
c00258da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258dd:	e8 8c fe ff ff       	call   c002576e <APIC::getBase()>
c00258e2:	83 c4 10             	add    esp,0x10
c00258e5:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258e9:	75 07                	jne    c00258f2 <APIC::open(int, int, void*)+0x114>
c00258eb:	ba 60 03 00 00       	mov    edx,0x360
c00258f0:	eb 05                	jmp    c00258f7 <APIC::open(int, int, void*)+0x119>
c00258f2:	ba 50 03 00 00       	mov    edx,0x350
c00258f7:	01 d0                	add    eax,edx
c00258f9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258fc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025901:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025904:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002590b:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002590f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025912:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025915:	89 10                	mov    DWORD PTR [eax],edx
c0025917:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002591a:	e9 7a ff ff ff       	jmp    c0025899 <APIC::open(int, int, void*)+0xbb>
c002591f:	b8 00 00 00 00       	mov    eax,0x0
c0025924:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025927:	5b                   	pop    ebx
c0025928:	5e                   	pop    esi
c0025929:	5f                   	pop    edi
c002592a:	5d                   	pop    ebp
c002592b:	c3                   	ret    

c002592c <IOAPIC::IOAPIC()>:
c002592c:	83 ec 0c             	sub    esp,0xc
c002592f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025933:	83 ec 08             	sub    esp,0x8
c0025936:	68 4c d1 02 c0       	push   0xc002d14c
c002593b:	50                   	push   eax
c002593c:	e8 2f ec fe ff       	call   c0014570 <Device::Device(char const*)>
c0025941:	83 c4 10             	add    esp,0x10
c0025944:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c0025949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002594d:	89 10                	mov    DWORD PTR [eax],edx
c002594f:	90                   	nop
c0025950:	83 c4 0c             	add    esp,0xc
c0025953:	c3                   	ret    

c0025954 <APIC::APIC()>:
c0025954:	53                   	push   ebx
c0025955:	83 ec 18             	sub    esp,0x18
c0025958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002595c:	83 ec 08             	sub    esp,0x8
c002595f:	68 54 d1 02 c0       	push   0xc002d154
c0025964:	50                   	push   eax
c0025965:	e8 72 f3 fe ff       	call   c0014cdc <InterruptController::InterruptController(char const*)>
c002596a:	83 c4 10             	add    esp,0x10
c002596d:	ba 2c d2 02 c0       	mov    edx,0xc002d22c
c0025972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025976:	89 10                	mov    DWORD PTR [eax],edx
c0025978:	a0 20 28 03 c0       	mov    al,ds:0xc0032820
c002597d:	83 f0 01             	xor    eax,0x1
c0025980:	84 c0                	test   al,al
c0025982:	0f 84 a1 00 00 00    	je     c0025a29 <APIC::APIC()+0xd5>
c0025988:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002598d:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0025992:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025996:	0f 83 86 00 00 00    	jae    c0025a22 <APIC::APIC()+0xce>
c002599c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00259a4:	83 ec 0c             	sub    esp,0xc
c00259a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259ab:	e8 93 9e fe ff       	call   c000f843 <malloc>
c00259b0:	83 c4 10             	add    esp,0x10
c00259b3:	89 c3                	mov    ebx,eax
c00259b5:	83 ec 0c             	sub    esp,0xc
c00259b8:	53                   	push   ebx
c00259b9:	e8 6e ff ff ff       	call   c002592c <IOAPIC::IOAPIC()>
c00259be:	83 c4 10             	add    esp,0x10
c00259c1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259c5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259ce:	89 14 85 00 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd800],edx
c00259d5:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c00259da:	40                   	inc    eax
c00259db:	a3 e0 27 03 c0       	mov    ds:0xc00327e0,eax
c00259e0:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00259e5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259eb:	83 ec 08             	sub    esp,0x8
c00259ee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259f2:	50                   	push   eax
c00259f3:	e8 88 e9 fe ff       	call   c0014380 <Device::addChild(Device*)>
c00259f8:	83 c4 10             	add    esp,0x10
c00259fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a01:	83 c0 08             	add    eax,0x8
c0025a04:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a06:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a0b:	6a 00                	push   0x0
c0025a0d:	6a 00                	push   0x0
c0025a0f:	52                   	push   edx
c0025a10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a14:	ff d0                	call   eax
c0025a16:	83 c4 10             	add    esp,0x10
c0025a19:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a1d:	e9 6b ff ff ff       	jmp    c002598d <APIC::APIC()+0x39>
c0025a22:	c6 05 20 28 03 c0 01 	mov    BYTE PTR ds:0xc0032820,0x1
c0025a29:	90                   	nop
c0025a2a:	83 c4 18             	add    esp,0x18
c0025a2d:	5b                   	pop    ebx
c0025a2e:	c3                   	ret    
c0025a2f:	90                   	nop

c0025a30 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a30:	55                   	push   ebp
c0025a31:	89 e5                	mov    ebp,esp
c0025a33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a3c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a3f:	72 1d                	jb     c0025a5e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a44:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a4d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a53:	01 d0                	add    eax,edx
c0025a55:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a58:	73 04                	jae    c0025a5e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a5a:	b0 01                	mov    al,0x1
c0025a5c:	eb 02                	jmp    c0025a60 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a5e:	b0 00                	mov    al,0x0
c0025a60:	5d                   	pop    ebp
c0025a61:	c3                   	ret    

c0025a62 <IOAPIC::read(int)>:
c0025a62:	55                   	push   ebp
c0025a63:	89 e5                	mov    ebp,esp
c0025a65:	83 ec 10             	sub    esp,0x10
c0025a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a6b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a71:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a77:	0f b6 d0             	movzx  edx,al
c0025a7a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a7d:	89 10                	mov    DWORD PTR [eax],edx
c0025a7f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a82:	83 c0 10             	add    eax,0x10
c0025a85:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a87:	c9                   	leave  
c0025a88:	c3                   	ret    
c0025a89:	90                   	nop

c0025a8a <IOAPIC::open(int, int, void*)>:
c0025a8a:	55                   	push   ebp
c0025a8b:	89 e5                	mov    ebp,esp
c0025a8d:	57                   	push   edi
c0025a8e:	56                   	push   esi
c0025a8f:	53                   	push   ebx
c0025a90:	83 ec 0c             	sub    esp,0xc
c0025a93:	83 ec 0c             	sub    esp,0xc
c0025a96:	68 7f d1 02 c0       	push   0xc002d17f
c0025a9b:	e8 ba d4 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0025aa0:	83 c4 10             	add    esp,0x10
c0025aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025aa9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ab8:	8b 14 85 40 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1c0]
c0025abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025ac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025acb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ad1:	8b 14 85 c0 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf140]
c0025ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025adb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025ae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025aea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aed:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025af3:	0f b6 f8             	movzx  edi,al
c0025af6:	89 d0                	mov    eax,edx
c0025af8:	ba 00 00 00 00       	mov    edx,0x0
c0025afd:	89 c1                	mov    ecx,eax
c0025aff:	80 e5 ff             	and    ch,0xff
c0025b02:	89 cb                	mov    ebx,ecx
c0025b04:	0f b6 f2             	movzx  esi,dl
c0025b07:	89 d8                	mov    eax,ebx
c0025b09:	89 f2                	mov    edx,esi
c0025b0b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b0e:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b11:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b15:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b19:	83 e0 00             	and    eax,0x0
c0025b1c:	09 d0                	or     eax,edx
c0025b1e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b25:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b2b:	8d 50 01             	lea    edx,[eax+0x1]
c0025b2e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b31:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b37:	0f b6 d0             	movzx  edx,al
c0025b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3d:	83 c2 08             	add    edx,0x8
c0025b40:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b44:	0f b6 c9             	movzx  ecx,cl
c0025b47:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b4d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b51:	83 ec 08             	sub    esp,0x8
c0025b54:	6a 01                	push   0x1
c0025b56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b59:	e8 04 ff ff ff       	call   c0025a62 <IOAPIC::read(int)>
c0025b5e:	83 c4 10             	add    esp,0x10
c0025b61:	c1 f8 10             	sar    eax,0x10
c0025b64:	0f b6 c0             	movzx  eax,al
c0025b67:	8d 50 01             	lea    edx,[eax+0x1]
c0025b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b6d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b73:	b8 00 00 00 00       	mov    eax,0x0
c0025b78:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b7b:	5b                   	pop    ebx
c0025b7c:	5e                   	pop    esi
c0025b7d:	5f                   	pop    edi
c0025b7e:	5d                   	pop    ebp
c0025b7f:	c3                   	ret    

c0025b80 <IOAPIC::write(int, int)>:
c0025b80:	55                   	push   ebp
c0025b81:	89 e5                	mov    ebp,esp
c0025b83:	83 ec 10             	sub    esp,0x10
c0025b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b8f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b95:	0f b6 d0             	movzx  edx,al
c0025b98:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b9b:	89 10                	mov    DWORD PTR [eax],edx
c0025b9d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ba0:	8d 50 10             	lea    edx,[eax+0x10]
c0025ba3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ba6:	89 02                	mov    DWORD PTR [edx],eax
c0025ba8:	90                   	nop
c0025ba9:	c9                   	leave  
c0025baa:	c3                   	ret    
c0025bab:	90                   	nop

c0025bac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025bac:	55                   	push   ebp
c0025bad:	89 e5                	mov    ebp,esp
c0025baf:	53                   	push   ebx
c0025bb0:	83 ec 2c             	sub    esp,0x2c
c0025bb3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bb6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025bb9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025bbc:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025bbf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025bc2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bc5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025bc8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bcb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025bce:	88 d8                	mov    al,bl
c0025bd0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bd3:	88 c8                	mov    al,cl
c0025bd5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bd8:	88 d0                	mov    al,dl
c0025bda:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025bdd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025be1:	83 c0 08             	add    eax,0x8
c0025be4:	01 c0                	add    eax,eax
c0025be6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025be9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bed:	83 c0 08             	add    eax,0x8
c0025bf0:	01 c0                	add    eax,eax
c0025bf2:	40                   	inc    eax
c0025bf3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bf6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bf9:	50                   	push   eax
c0025bfa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bfd:	e8 60 fe ff ff       	call   c0025a62 <IOAPIC::read(int)>
c0025c02:	83 c4 08             	add    esp,0x8
c0025c05:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c08:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c0f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c12:	c1 e0 18             	shl    eax,0x18
c0025c15:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c18:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c1e:	52                   	push   edx
c0025c1f:	50                   	push   eax
c0025c20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c23:	e8 58 ff ff ff       	call   c0025b80 <IOAPIC::write(int, int)>
c0025c28:	83 c4 0c             	add    esp,0xc
c0025c2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c2e:	50                   	push   eax
c0025c2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c32:	e8 2b fe ff ff       	call   c0025a62 <IOAPIC::read(int)>
c0025c37:	83 c4 08             	add    esp,0x8
c0025c3a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c3d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c44:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c4b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c52:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c56:	74 09                	je     c0025c61 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c58:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c5f:	eb 07                	jmp    c0025c68 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c61:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c68:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c6c:	74 09                	je     c0025c77 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c6e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c75:	eb 07                	jmp    c0025c7e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c77:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c7e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c85:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c89:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c8c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c8f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c92:	52                   	push   edx
c0025c93:	50                   	push   eax
c0025c94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c97:	e8 e4 fe ff ff       	call   c0025b80 <IOAPIC::write(int, int)>
c0025c9c:	83 c4 0c             	add    esp,0xc
c0025c9f:	90                   	nop
c0025ca0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025ca3:	c9                   	leave  
c0025ca4:	c3                   	ret    
c0025ca5:	90                   	nop

c0025ca6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025ca6:	55                   	push   ebp
c0025ca7:	89 e5                	mov    ebp,esp
c0025ca9:	57                   	push   edi
c0025caa:	56                   	push   esi
c0025cab:	53                   	push   ebx
c0025cac:	83 ec 2c             	sub    esp,0x2c
c0025caf:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cb2:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025cb5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cb9:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025cbd:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cc1:	74 5a                	je     c0025d1d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cc3:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025cc7:	7f 44                	jg     c0025d0d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025cc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ccc:	05 c0 d6 02 c0       	add    eax,0xc002d6c0
c0025cd1:	8a 00                	mov    al,BYTE PTR [eax]
c0025cd3:	0f b6 c0             	movzx  eax,al
c0025cd6:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cdc:	66 8b 84 00 e0 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf220]
c0025ce4:	0f b7 c0             	movzx  eax,ax
c0025ce7:	83 e0 02             	and    eax,0x2
c0025cea:	85 c0                	test   eax,eax
c0025cec:	74 04                	je     c0025cf2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025cee:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025cf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cf5:	66 8b 84 00 e0 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf220]
c0025cfd:	0f b7 c0             	movzx  eax,ax
c0025d00:	83 e0 08             	and    eax,0x8
c0025d03:	85 c0                	test   eax,eax
c0025d05:	74 16                	je     c0025d1d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d07:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d0b:	eb 10                	jmp    c0025d1d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d0d:	83 ec 0c             	sub    esp,0xc
c0025d10:	68 90 d1 02 c0       	push   0xc002d190
c0025d15:	e8 ed 48 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0025d1a:	83 c4 10             	add    esp,0x10
c0025d1d:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d21:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0025d26:	83 ec 08             	sub    esp,0x8
c0025d29:	50                   	push   eax
c0025d2a:	68 c8 d1 02 c0       	push   0xc002d1c8
c0025d2f:	e8 26 d2 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0025d34:	83 c4 10             	add    esp,0x10
c0025d37:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d3e:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0025d43:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d46:	7d 67                	jge    c0025daf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d48:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d4b:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0025d52:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d55:	83 ec 08             	sub    esp,0x8
c0025d58:	52                   	push   edx
c0025d59:	50                   	push   eax
c0025d5a:	e8 d1 fc ff ff       	call   c0025a30 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d5f:	83 c4 10             	add    esp,0x10
c0025d62:	84 c0                	test   al,al
c0025d64:	74 44                	je     c0025daa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d66:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d69:	8b 1c 85 00 28 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd800]
c0025d70:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d74:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d77:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d7e:	83 c0 20             	add    eax,0x20
c0025d81:	0f b6 f0             	movzx  esi,al
c0025d84:	b8 00 00 00 00       	mov    eax,0x0
c0025d89:	99                   	cdq    
c0025d8a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d8d:	0f b6 c9             	movzx  ecx,cl
c0025d90:	83 ec 04             	sub    esp,0x4
c0025d93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d96:	57                   	push   edi
c0025d97:	56                   	push   esi
c0025d98:	52                   	push   edx
c0025d99:	50                   	push   eax
c0025d9a:	51                   	push   ecx
c0025d9b:	53                   	push   ebx
c0025d9c:	e8 0b fe ff ff       	call   c0025bac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025da1:	83 c4 20             	add    esp,0x20
c0025da4:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025da8:	eb 05                	jmp    c0025daf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025daa:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025dad:	eb 8f                	jmp    c0025d3e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025daf:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025db2:	83 f0 01             	xor    eax,0x1
c0025db5:	84 c0                	test   al,al
c0025db7:	74 10                	je     c0025dc9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025db9:	83 ec 0c             	sub    esp,0xc
c0025dbc:	68 df d1 02 c0       	push   0xc002d1df
c0025dc1:	e8 41 48 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0025dc6:	83 c4 10             	add    esp,0x10
c0025dc9:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025dcd:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025dd4:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025dd8:	7f 65                	jg     c0025e3f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ddd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025de0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025de7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dea:	01 ca                	add    edx,ecx
c0025dec:	83 c2 54             	add    edx,0x54
c0025def:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025df3:	85 c0                	test   eax,eax
c0025df5:	75 43                	jne    c0025e3a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dfa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dfd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e04:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e07:	01 ca                	add    edx,ecx
c0025e09:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e0c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e0f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e16:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e19:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e20:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e23:	01 ca                	add    edx,ecx
c0025e25:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e2b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e2e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e35:	83 e8 20             	sub    eax,0x20
c0025e38:	eb 1a                	jmp    c0025e54 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e3a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e3d:	eb 95                	jmp    c0025dd4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e3f:	83 ec 0c             	sub    esp,0xc
c0025e42:	68 ec d1 02 c0       	push   0xc002d1ec
c0025e47:	e8 bb 47 ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0025e4c:	83 c4 10             	add    esp,0x10
c0025e4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e57:	5b                   	pop    ebx
c0025e58:	5e                   	pop    esi
c0025e59:	5f                   	pop    edi
c0025e5a:	5d                   	pop    ebp
c0025e5b:	c3                   	ret    

c0025e5c <PIC::disable()>:
c0025e5c:	55                   	push   ebp
c0025e5d:	89 e5                	mov    ebp,esp
c0025e5f:	83 ec 10             	sub    esp,0x10
c0025e62:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e68:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e6c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e6f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e73:	ee                   	out    dx,al
c0025e74:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e7a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e7e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e81:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e85:	ee                   	out    dx,al
c0025e86:	90                   	nop
c0025e87:	c9                   	leave  
c0025e88:	c3                   	ret    
c0025e89:	90                   	nop

c0025e8a <PIC::close(int, int, void*)>:
c0025e8a:	55                   	push   ebp
c0025e8b:	89 e5                	mov    ebp,esp
c0025e8d:	83 ec 08             	sub    esp,0x8
c0025e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e93:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e95:	83 c0 3c             	add    eax,0x3c
c0025e98:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e9a:	83 ec 0c             	sub    esp,0xc
c0025e9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea0:	ff d0                	call   eax
c0025ea2:	83 c4 10             	add    esp,0x10
c0025ea5:	b8 00 00 00 00       	mov    eax,0x0
c0025eaa:	c9                   	leave  
c0025eab:	c3                   	ret    

c0025eac <PIC::PIC()>:
c0025eac:	83 ec 0c             	sub    esp,0xc
c0025eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb3:	83 ec 08             	sub    esp,0x8
c0025eb6:	68 98 d2 02 c0       	push   0xc002d298
c0025ebb:	50                   	push   eax
c0025ebc:	e8 1b ee fe ff       	call   c0014cdc <InterruptController::InterruptController(char const*)>
c0025ec1:	83 c4 10             	add    esp,0x10
c0025ec4:	ba c4 d2 02 c0       	mov    edx,0xc002d2c4
c0025ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ecd:	89 10                	mov    DWORD PTR [eax],edx
c0025ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ed9:	0f b6 d0             	movzx  edx,al
c0025edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eeb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ef1:	0f b6 d0             	movzx  edx,al
c0025ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f07:	8d 50 01             	lea    edx,[eax+0x1]
c0025f0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f0e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f14:	0f b6 d0             	movzx  edx,al
c0025f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f1f:	83 e1 3f             	and    ecx,0x3f
c0025f22:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f30:	0f b6 d0             	movzx  edx,al
c0025f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f37:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f48:	0f b6 d0             	movzx  edx,al
c0025f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f5e:	8d 50 01             	lea    edx,[eax+0x1]
c0025f61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f65:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f6b:	0f b6 d0             	movzx  edx,al
c0025f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f72:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f76:	83 e1 3f             	and    ecx,0x3f
c0025f79:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f7d:	90                   	nop
c0025f7e:	83 c4 0c             	add    esp,0xc
c0025f81:	c3                   	ret    

c0025f82 <PIC::ioWait()>:
c0025f82:	eb 00                	jmp    c0025f84 <PIC::ioWait()+0x2>
c0025f84:	eb 00                	jmp    c0025f86 <PIC::ioWait()+0x4>
c0025f86:	90                   	nop
c0025f87:	c3                   	ret    

c0025f88 <PIC::getIRQReg(int)>:
c0025f88:	55                   	push   ebp
c0025f89:	89 e5                	mov    ebp,esp
c0025f8b:	83 ec 10             	sub    esp,0x10
c0025f8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f91:	0f b6 c0             	movzx  eax,al
c0025f94:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f9a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f9d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fa0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fa4:	ee                   	out    dx,al
c0025fa5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fa8:	0f b6 c0             	movzx  eax,al
c0025fab:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fb1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025fb4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fb7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fbb:	ee                   	out    dx,al
c0025fbc:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025fc2:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fc6:	89 c2                	mov    edx,eax
c0025fc8:	ec                   	in     al,dx
c0025fc9:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025fcc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fcf:	0f b6 c0             	movzx  eax,al
c0025fd2:	c1 e0 08             	shl    eax,0x8
c0025fd5:	89 c1                	mov    ecx,eax
c0025fd7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fdd:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fe1:	89 c2                	mov    edx,eax
c0025fe3:	ec                   	in     al,dx
c0025fe4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fe7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fea:	0f b6 c0             	movzx  eax,al
c0025fed:	09 c8                	or     eax,ecx
c0025fef:	c9                   	leave  
c0025ff0:	c3                   	ret    
c0025ff1:	90                   	nop

c0025ff2 <PIC::eoi(unsigned char)>:
c0025ff2:	55                   	push   ebp
c0025ff3:	89 e5                	mov    ebp,esp
c0025ff5:	83 ec 14             	sub    esp,0x14
c0025ff8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ffb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025ffe:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026002:	75 1e                	jne    c0026022 <PIC::eoi(unsigned char)+0x30>
c0026004:	6a 0b                	push   0xb
c0026006:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026009:	e8 7a ff ff ff       	call   c0025f88 <PIC::getIRQReg(int)>
c002600e:	83 c4 08             	add    esp,0x8
c0026011:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026015:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026019:	25 80 00 00 00       	and    eax,0x80
c002601e:	85 c0                	test   eax,eax
c0026020:	74 5f                	je     c0026081 <PIC::eoi(unsigned char)+0x8f>
c0026022:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026026:	75 2d                	jne    c0026055 <PIC::eoi(unsigned char)+0x63>
c0026028:	6a 0b                	push   0xb
c002602a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002602d:	e8 56 ff ff ff       	call   c0025f88 <PIC::getIRQReg(int)>
c0026032:	83 c4 08             	add    esp,0x8
c0026035:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026039:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002603c:	66 85 c0             	test   ax,ax
c002603f:	78 14                	js     c0026055 <PIC::eoi(unsigned char)+0x63>
c0026041:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026047:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002604b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002604e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026052:	ee                   	out    dx,al
c0026053:	eb 2d                	jmp    c0026082 <PIC::eoi(unsigned char)+0x90>
c0026055:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026059:	76 12                	jbe    c002606d <PIC::eoi(unsigned char)+0x7b>
c002605b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026061:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026065:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026068:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002606c:	ee                   	out    dx,al
c002606d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026073:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026077:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002607a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002607e:	ee                   	out    dx,al
c002607f:	eb 01                	jmp    c0026082 <PIC::eoi(unsigned char)+0x90>
c0026081:	90                   	nop
c0026082:	c9                   	leave  
c0026083:	c3                   	ret    

c0026084 <PIC::remap()>:
c0026084:	55                   	push   ebp
c0026085:	89 e5                	mov    ebp,esp
c0026087:	83 ec 48             	sub    esp,0x48
c002608a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026091:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026098:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002609e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260a1:	89 c2                	mov    edx,eax
c00260a3:	ec                   	in     al,dx
c00260a4:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260a7:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260aa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260ad:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260b3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00260b6:	89 c2                	mov    edx,eax
c00260b8:	ec                   	in     al,dx
c00260b9:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00260bc:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00260bf:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260c2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260c8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260cc:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260cf:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260d2:	ee                   	out    dx,al
c00260d3:	83 ec 0c             	sub    esp,0xc
c00260d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d9:	e8 a4 fe ff ff       	call   c0025f82 <PIC::ioWait()>
c00260de:	83 c4 10             	add    esp,0x10
c00260e1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260e7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260eb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260ee:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260f1:	ee                   	out    dx,al
c00260f2:	83 ec 0c             	sub    esp,0xc
c00260f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f8:	e8 85 fe ff ff       	call   c0025f82 <PIC::ioWait()>
c00260fd:	83 c4 10             	add    esp,0x10
c0026100:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026103:	0f b6 c0             	movzx  eax,al
c0026106:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002610c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002610f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026112:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026115:	ee                   	out    dx,al
c0026116:	83 ec 0c             	sub    esp,0xc
c0026119:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611c:	e8 61 fe ff ff       	call   c0025f82 <PIC::ioWait()>
c0026121:	83 c4 10             	add    esp,0x10
c0026124:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026127:	0f b6 c0             	movzx  eax,al
c002612a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026130:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026133:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026136:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026139:	ee                   	out    dx,al
c002613a:	83 ec 0c             	sub    esp,0xc
c002613d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026140:	e8 3d fe ff ff       	call   c0025f82 <PIC::ioWait()>
c0026145:	83 c4 10             	add    esp,0x10
c0026148:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002614e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026152:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026155:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026158:	ee                   	out    dx,al
c0026159:	83 ec 0c             	sub    esp,0xc
c002615c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002615f:	e8 1e fe ff ff       	call   c0025f82 <PIC::ioWait()>
c0026164:	83 c4 10             	add    esp,0x10
c0026167:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002616d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026171:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026174:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026177:	ee                   	out    dx,al
c0026178:	83 ec 0c             	sub    esp,0xc
c002617b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002617e:	e8 ff fd ff ff       	call   c0025f82 <PIC::ioWait()>
c0026183:	83 c4 10             	add    esp,0x10
c0026186:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002618c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026190:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026193:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026196:	ee                   	out    dx,al
c0026197:	83 ec 0c             	sub    esp,0xc
c002619a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002619d:	e8 e0 fd ff ff       	call   c0025f82 <PIC::ioWait()>
c00261a2:	83 c4 10             	add    esp,0x10
c00261a5:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261ab:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261af:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261b2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00261b5:	ee                   	out    dx,al
c00261b6:	83 ec 0c             	sub    esp,0xc
c00261b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261bc:	e8 c1 fd ff ff       	call   c0025f82 <PIC::ioWait()>
c00261c1:	83 c4 10             	add    esp,0x10
c00261c4:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261c8:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261ce:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261d1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261d4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261d7:	ee                   	out    dx,al
c00261d8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261dc:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261e2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261e5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261e8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261eb:	ee                   	out    dx,al
c00261ec:	90                   	nop
c00261ed:	c9                   	leave  
c00261ee:	c3                   	ret    
c00261ef:	90                   	nop

c00261f0 <PIC::open(int, int, void*)>:
c00261f0:	55                   	push   ebp
c00261f1:	89 e5                	mov    ebp,esp
c00261f3:	83 ec 18             	sub    esp,0x18
c00261f6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261fc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026200:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026203:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026207:	ee                   	out    dx,al
c0026208:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002620e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026212:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026215:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026219:	ee                   	out    dx,al
c002621a:	83 ec 0c             	sub    esp,0xc
c002621d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026220:	e8 5f fe ff ff       	call   c0026084 <PIC::remap()>
c0026225:	83 c4 10             	add    esp,0x10
c0026228:	b8 00 00 00 00       	mov    eax,0x0
c002622d:	c9                   	leave  
c002622e:	c3                   	ret    
c002622f:	90                   	nop

c0026230 <APICTimer::close(int, int, void*)>:
c0026230:	b8 00 00 00 00       	mov    eax,0x0
c0026235:	c3                   	ret    

c0026236 <apicTimerHandler(regs*, void*)>:
c0026236:	83 ec 0c             	sub    esp,0xc
c0026239:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002623d:	8b 00                	mov    eax,DWORD PTR [eax]
c002623f:	99                   	cdq    
c0026240:	52                   	push   edx
c0026241:	50                   	push   eax
c0026242:	6a 00                	push   0x0
c0026244:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026249:	e8 8e 07 00 00       	call   c00269dc <__udivdi3>
c002624e:	83 c4 10             	add    esp,0x10
c0026251:	83 ec 08             	sub    esp,0x8
c0026254:	52                   	push   edx
c0026255:	50                   	push   eax
c0026256:	e8 d8 0a ff ff       	call   c0016d33 <timerHandler(unsigned long long)>
c002625b:	83 c4 10             	add    esp,0x10
c002625e:	90                   	nop
c002625f:	83 c4 0c             	add    esp,0xc
c0026262:	c3                   	ret    
c0026263:	90                   	nop

c0026264 <APICTimer::write(int)>:
c0026264:	53                   	push   ebx
c0026265:	83 ec 28             	sub    esp,0x28
c0026268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002626c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026270:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026276:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c002627b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026281:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026287:	83 ec 0c             	sub    esp,0xc
c002628a:	50                   	push   eax
c002628b:	e8 de f4 ff ff       	call   c002576e <APIC::getBase()>
c0026290:	83 c4 10             	add    esp,0x10
c0026293:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026297:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c002629c:	8b 15 f4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eaf4
c00262a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00262aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262ae:	05 e0 03 00 00       	add    eax,0x3e0
c00262b3:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262bd:	05 80 03 00 00       	add    eax,0x380
c00262c2:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262c8:	fb                   	sti    
c00262c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262d1:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262d6:	83 d2 00             	adc    edx,0x0
c00262d9:	89 c1                	mov    ecx,eax
c00262db:	89 d3                	mov    ebx,edx
c00262dd:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c00262e2:	8b 15 f4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eaf4
c00262e8:	39 c8                	cmp    eax,ecx
c00262ea:	89 d0                	mov    eax,edx
c00262ec:	19 d8                	sbb    eax,ebx
c00262ee:	73 02                	jae    c00262f2 <APICTimer::write(int)+0x8e>
c00262f0:	eb d7                	jmp    c00262c9 <APICTimer::write(int)+0x65>
c00262f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262f6:	05 20 03 00 00       	add    eax,0x320
c00262fb:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026301:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026305:	05 90 03 00 00       	add    eax,0x390
c002630a:	8b 00                	mov    eax,DWORD PTR [eax]
c002630c:	f7 d0                	not    eax
c002630e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026312:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026316:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002631a:	ba 00 00 00 00       	mov    edx,0x0
c002631f:	f7 f3                	div    ebx
c0026321:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026325:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026329:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002632f:	0d 00 00 02 00       	or     eax,0x20000
c0026334:	89 c2                	mov    edx,eax
c0026336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002633a:	05 20 03 00 00       	add    eax,0x320
c002633f:	89 10                	mov    DWORD PTR [eax],edx
c0026341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026345:	05 e0 03 00 00       	add    eax,0x3e0
c002634a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026354:	05 80 03 00 00       	add    eax,0x380
c0026359:	89 c2                	mov    edx,eax
c002635b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002635f:	89 02                	mov    DWORD PTR [edx],eax
c0026361:	90                   	nop
c0026362:	83 c4 28             	add    esp,0x28
c0026365:	5b                   	pop    ebx
c0026366:	c3                   	ret    
c0026367:	90                   	nop

c0026368 <APICTimer::open(int, int, void*)>:
c0026368:	57                   	push   edi
c0026369:	56                   	push   esi
c002636a:	53                   	push   ebx
c002636b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002636f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026371:	83 c0 24             	add    eax,0x24
c0026374:	8b 00                	mov    eax,DWORD PTR [eax]
c0026376:	83 ec 08             	sub    esp,0x8
c0026379:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002637d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026381:	ff d0                	call   eax
c0026383:	83 c4 10             	add    esp,0x10
c0026386:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c002638b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026391:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026397:	83 ec 0c             	sub    esp,0xc
c002639a:	50                   	push   eax
c002639b:	e8 ce f3 ff ff       	call   c002576e <APIC::getBase()>
c00263a0:	83 c4 10             	add    esp,0x10
c00263a3:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00263a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263b3:	0f b6 f8             	movzx  edi,al
c00263b6:	89 d0                	mov    eax,edx
c00263b8:	ba 00 00 00 00       	mov    edx,0x0
c00263bd:	89 c1                	mov    ecx,eax
c00263bf:	80 e5 ff             	and    ch,0xff
c00263c2:	89 cb                	mov    ebx,ecx
c00263c4:	0f b6 f2             	movzx  esi,dl
c00263c7:	89 d8                	mov    eax,ebx
c00263c9:	89 f2                	mov    edx,esi
c00263cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263cf:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263d2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263d6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263da:	83 e0 00             	and    eax,0x0
c00263dd:	09 d0                	or     eax,edx
c00263df:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263ed:	8d 50 01             	lea    edx,[eax+0x1]
c00263f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263f4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263fa:	0f b6 d0             	movzx  edx,al
c00263fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026401:	83 c2 08             	add    edx,0x8
c0026404:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026408:	0f b6 c9             	movzx  ecx,cl
c002640b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026411:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026419:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002641d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026427:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002642b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026431:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026435:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002643b:	83 ec 0c             	sub    esp,0xc
c002643e:	51                   	push   ecx
c002643f:	6a 01                	push   0x1
c0026441:	68 36 62 02 c0       	push   0xc0026236
c0026446:	52                   	push   edx
c0026447:	50                   	push   eax
c0026448:	e8 b7 de fe ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002644d:	83 c4 20             	add    esp,0x20
c0026450:	89 c2                	mov    edx,eax
c0026452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026456:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002645c:	b8 00 00 00 00       	mov    eax,0x0
c0026461:	5b                   	pop    ebx
c0026462:	5e                   	pop    esi
c0026463:	5f                   	pop    edi
c0026464:	c3                   	ret    
c0026465:	90                   	nop

c0026466 <APICTimer::APICTimer()>:
c0026466:	83 ec 0c             	sub    esp,0xc
c0026469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002646d:	83 ec 08             	sub    esp,0x8
c0026470:	68 04 d3 02 c0       	push   0xc002d304
c0026475:	50                   	push   eax
c0026476:	e8 29 08 ff ff       	call   c0016ca4 <Timer::Timer(char const*)>
c002647b:	83 c4 10             	add    esp,0x10
c002647e:	ba 18 d3 02 c0       	mov    edx,0xc002d318
c0026483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026487:	89 10                	mov    DWORD PTR [eax],edx
c0026489:	90                   	nop
c002648a:	83 c4 0c             	add    esp,0xc
c002648d:	c3                   	ret    

c002648e <PIT::write(int)>:
c002648e:	83 ec 10             	sub    esp,0x10
c0026491:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026495:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026499:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002649f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00264a3:	a3 24 28 03 c0       	mov    ds:0xc0032824,eax
c00264a8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00264ad:	99                   	cdq    
c00264ae:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00264b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264b6:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00264bd:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264c2:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264c6:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264cb:	ee                   	out    dx,al
c00264cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264d0:	0f b6 c0             	movzx  eax,al
c00264d3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264da:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264de:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264e2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264e7:	ee                   	out    dx,al
c00264e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264ec:	c1 f8 08             	sar    eax,0x8
c00264ef:	0f b6 c0             	movzx  eax,al
c00264f2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264f9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264fd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026501:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026506:	ee                   	out    dx,al
c0026507:	90                   	nop
c0026508:	83 c4 10             	add    esp,0x10
c002650b:	c3                   	ret    

c002650c <pitHandler(regs*, void*)>:
c002650c:	83 ec 0c             	sub    esp,0xc
c002650f:	a1 24 28 03 c0       	mov    eax,ds:0xc0032824
c0026514:	99                   	cdq    
c0026515:	52                   	push   edx
c0026516:	50                   	push   eax
c0026517:	6a 00                	push   0x0
c0026519:	68 00 ca 9a 3b       	push   0x3b9aca00
c002651e:	e8 b9 04 00 00       	call   c00269dc <__udivdi3>
c0026523:	83 c4 10             	add    esp,0x10
c0026526:	83 ec 08             	sub    esp,0x8
c0026529:	52                   	push   edx
c002652a:	50                   	push   eax
c002652b:	e8 03 08 ff ff       	call   c0016d33 <timerHandler(unsigned long long)>
c0026530:	83 c4 10             	add    esp,0x10
c0026533:	90                   	nop
c0026534:	83 c4 0c             	add    esp,0xc
c0026537:	c3                   	ret    

c0026538 <PIT::open(int, int, void*)>:
c0026538:	83 ec 0c             	sub    esp,0xc
c002653b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002653f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026541:	83 c0 24             	add    eax,0x24
c0026544:	8b 00                	mov    eax,DWORD PTR [eax]
c0026546:	83 ec 08             	sub    esp,0x8
c0026549:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002654d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026551:	ff d0                	call   eax
c0026553:	83 c4 10             	add    esp,0x10
c0026556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002655a:	83 ec 0c             	sub    esp,0xc
c002655d:	6a 00                	push   0x0
c002655f:	6a 01                	push   0x1
c0026561:	68 0c 65 02 c0       	push   0xc002650c
c0026566:	6a 00                	push   0x0
c0026568:	50                   	push   eax
c0026569:	e8 96 dd fe ff       	call   c0014304 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002656e:	83 c4 20             	add    esp,0x20
c0026571:	89 c2                	mov    edx,eax
c0026573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026577:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002657d:	b8 00 00 00 00       	mov    eax,0x0
c0026582:	83 c4 0c             	add    esp,0xc
c0026585:	c3                   	ret    

c0026586 <PIT::close(int, int, void*)>:
c0026586:	83 ec 0c             	sub    esp,0xc
c0026589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002658d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002659b:	6a 01                	push   0x1
c002659d:	68 0c 65 02 c0       	push   0xc002650c
c00265a2:	6a 00                	push   0x0
c00265a4:	50                   	push   eax
c00265a5:	e8 98 dd fe ff       	call   c0014342 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00265aa:	83 c4 10             	add    esp,0x10
c00265ad:	b8 00 00 00 00       	mov    eax,0x0
c00265b2:	83 c4 0c             	add    esp,0xc
c00265b5:	c3                   	ret    

c00265b6 <PIT::PIT()>:
c00265b6:	83 ec 0c             	sub    esp,0xc
c00265b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bd:	83 ec 08             	sub    esp,0x8
c00265c0:	68 40 d3 02 c0       	push   0xc002d340
c00265c5:	50                   	push   eax
c00265c6:	e8 d9 06 ff ff       	call   c0016ca4 <Timer::Timer(char const*)>
c00265cb:	83 c4 10             	add    esp,0x10
c00265ce:	ba 68 d3 02 c0       	mov    edx,0xc002d368
c00265d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d7:	89 10                	mov    DWORD PTR [eax],edx
c00265d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265e3:	0f b6 d0             	movzx  edx,al
c00265e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ea:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265fb:	0f b6 d0             	movzx  edx,al
c00265fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026602:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026611:	8d 50 01             	lea    edx,[eax+0x1]
c0026614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026618:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002661e:	0f b6 d0             	movzx  edx,al
c0026621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026625:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026629:	83 e1 3f             	and    ecx,0x3f
c002662c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026630:	90                   	nop
c0026631:	83 c4 0c             	add    esp,0xc
c0026634:	c3                   	ret    
c0026635:	66 90                	xchg   ax,ax
c0026637:	66 90                	xchg   ax,ax
c0026639:	66 90                	xchg   ax,ax
c002663b:	66 90                	xchg   ax,ax
c002663d:	66 90                	xchg   ax,ax
c002663f:	90                   	nop

c0026640 <avxDetect>:
c0026640:	b8 00 00 00 00       	mov    eax,0x0
c0026645:	c3                   	ret    

c0026646 <avxSave>:
c0026646:	c3                   	ret    

c0026647 <avxLoad>:
c0026647:	c3                   	ret    

c0026648 <avxInit>:
c0026648:	c3                   	ret    

c0026649 <avxClose>:
c0026649:	c3                   	ret    

c002664a <wouldSheSayYes>:
c002664a:	c3                   	ret    
c002664b:	49                   	dec    ecx
c002664c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026650:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026654:	75 20                	jne    c0026676 <sseDetect.noSSE+0x1>
c0026656:	4e                   	dec    esi
c0026657:	79 61                	jns    c00266ba <x87Detect+0x14>
c0026659:	68 2e 2e 2e 00       	push   0x2e2e2e
c002665e:	66 90                	xchg   ax,ax

c0026660 <absolutelyNoChanceInHell>:
c0026660:	b8 01 00 00 00       	mov    eax,0x1
c0026665:	0f a2                	cpuid  
c0026667:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002666d:	74 06                	je     c0026675 <sseDetect.noSSE>
c002666f:	b8 01 00 00 00       	mov    eax,0x1
c0026674:	c3                   	ret    

c0026675 <sseDetect.noSSE>:
c0026675:	31 c0                	xor    eax,eax
c0026677:	c3                   	ret    

c0026678 <sseSave>:
c0026678:	0f ae 44 24 08       	fxsave [esp+0x8]
c002667d:	c3                   	ret    

c002667e <sseLoad>:
c002667e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026683:	c3                   	ret    

c0026684 <sseInit>:
c0026684:	e8 43 00 00 00       	call   c00266cc <x87Init>
c0026689:	0f 20 e0             	mov    eax,cr4
c002668c:	66 0d 00 06          	or     ax,0x600
c0026690:	0f 22 e0             	mov    cr4,eax
c0026693:	c3                   	ret    

c0026694 <sseClose>:
c0026694:	c3                   	ret    
c0026695:	66 90                	xchg   ax,ax
c0026697:	66 90                	xchg   ax,ax
c0026699:	66 90                	xchg   ax,ax
c002669b:	66 90                	xchg   ax,ax
c002669d:	66 90                	xchg   ax,ax
c002669f:	90                   	nop

c00266a0 <value_37F>:
c00266a0:	7f 03                	jg     c00266a5 <value_37A+0x1>

c00266a2 <value_37E>:
c00266a2:	7e 03                	jle    c00266a7 <x87Detect+0x1>

c00266a4 <value_37A>:
c00266a4:	7a 03                	jp     c00266a9 <x87Detect+0x3>

c00266a6 <x87Detect>:
c00266a6:	b8 01 00 00 00       	mov    eax,0x1
c00266ab:	0f a2                	cpuid  
c00266ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00266b3:	74 06                	je     c00266bb <x87Detect.nox87>
c00266b5:	b8 01 00 00 00       	mov    eax,0x1
c00266ba:	c3                   	ret    

c00266bb <x87Detect.nox87>:
c00266bb:	b8 00 00 00 00       	mov    eax,0x0
c00266c0:	c3                   	ret    

c00266c1 <x87Save>:
c00266c1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266c6:	c3                   	ret    

c00266c7 <x87Load>:
c00266c7:	dd 64 24 08          	frstor [esp+0x8]
c00266cb:	c3                   	ret    

c00266cc <x87Init>:
c00266cc:	9b db e3             	finit  
c00266cf:	0f 20 c0             	mov    eax,cr0
c00266d2:	66 25 fb ff          	and    ax,0xfffb
c00266d6:	66 0d 22 00          	or     ax,0x22
c00266da:	0f 22 c0             	mov    cr0,eax
c00266dd:	0f 06                	clts   
c00266df:	d9 2d a4 66 02 c0    	fldcw  WORD PTR ds:0xc00266a4
c00266e5:	c3                   	ret    

c00266e6 <x87Close>:
c00266e6:	c3                   	ret    
c00266e7:	90                   	nop

c00266e8 <__do_global_ctors_aux>:
c00266e8:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c00266ed:	83 f8 ff             	cmp    eax,0xffffffff
c00266f0:	74 1a                	je     c002670c <__do_global_ctors_aux+0x24>
c00266f2:	55                   	push   ebp
c00266f3:	89 e5                	mov    ebp,esp
c00266f5:	53                   	push   ebx
c00266f6:	52                   	push   edx
c00266f7:	bb 2c 92 02 c0       	mov    ebx,0xc002922c
c00266fc:	ff d0                	call   eax
c00266fe:	83 eb 04             	sub    ebx,0x4
c0026701:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026703:	83 f8 ff             	cmp    eax,0xffffffff
c0026706:	75 f4                	jne    c00266fc <__do_global_ctors_aux+0x14>
c0026708:	58                   	pop    eax
c0026709:	5b                   	pop    ebx
c002670a:	5d                   	pop    ebp
c002670b:	c3                   	ret    
c002670c:	c3                   	ret    
c002670d:	66 90                	xchg   ax,ax
c002670f:	90                   	nop

c0026710 <__divdi3>:
c0026710:	55                   	push   ebp
c0026711:	57                   	push   edi
c0026712:	56                   	push   esi
c0026713:	53                   	push   ebx
c0026714:	83 ec 1c             	sub    esp,0x1c
c0026717:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002671b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002671f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026722:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026726:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002672a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002672e:	85 db                	test   ebx,ebx
c0026730:	0f 88 8e 00 00 00    	js     c00267c4 <__divdi3+0xb4>
c0026736:	89 dd                	mov    ebp,ebx
c0026738:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026740:	89 d3                	mov    ebx,edx
c0026742:	85 d2                	test   edx,edx
c0026744:	79 0d                	jns    c0026753 <__divdi3+0x43>
c0026746:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002674a:	f7 d8                	neg    eax
c002674c:	83 d2 00             	adc    edx,0x0
c002674f:	f7 da                	neg    edx
c0026751:	89 d3                	mov    ebx,edx
c0026753:	89 c7                	mov    edi,eax
c0026755:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026758:	85 db                	test   ebx,ebx
c002675a:	75 48                	jne    c00267a4 <__divdi3+0x94>
c002675c:	39 ef                	cmp    edi,ebp
c002675e:	76 24                	jbe    c0026784 <__divdi3+0x74>
c0026760:	89 ea                	mov    edx,ebp
c0026762:	f7 f7                	div    edi
c0026764:	89 c1                	mov    ecx,eax
c0026766:	31 f6                	xor    esi,esi
c0026768:	89 c8                	mov    eax,ecx
c002676a:	89 f2                	mov    edx,esi
c002676c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026770:	85 c9                	test   ecx,ecx
c0026772:	74 07                	je     c002677b <__divdi3+0x6b>
c0026774:	f7 d8                	neg    eax
c0026776:	83 d2 00             	adc    edx,0x0
c0026779:	f7 da                	neg    edx
c002677b:	83 c4 1c             	add    esp,0x1c
c002677e:	5b                   	pop    ebx
c002677f:	5e                   	pop    esi
c0026780:	5f                   	pop    edi
c0026781:	5d                   	pop    ebp
c0026782:	c3                   	ret    
c0026783:	90                   	nop
c0026784:	85 ff                	test   edi,edi
c0026786:	75 0b                	jne    c0026793 <__divdi3+0x83>
c0026788:	b8 01 00 00 00       	mov    eax,0x1
c002678d:	31 d2                	xor    edx,edx
c002678f:	f7 f3                	div    ebx
c0026791:	89 c7                	mov    edi,eax
c0026793:	31 d2                	xor    edx,edx
c0026795:	89 e8                	mov    eax,ebp
c0026797:	f7 f7                	div    edi
c0026799:	89 c6                	mov    esi,eax
c002679b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002679e:	f7 f7                	div    edi
c00267a0:	89 c1                	mov    ecx,eax
c00267a2:	eb c4                	jmp    c0026768 <__divdi3+0x58>
c00267a4:	39 eb                	cmp    ebx,ebp
c00267a6:	77 3c                	ja     c00267e4 <__divdi3+0xd4>
c00267a8:	0f bd f3             	bsr    esi,ebx
c00267ab:	83 f6 1f             	xor    esi,0x1f
c00267ae:	75 40                	jne    c00267f0 <__divdi3+0xe0>
c00267b0:	39 eb                	cmp    ebx,ebp
c00267b2:	72 09                	jb     c00267bd <__divdi3+0xad>
c00267b4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00267b7:	0f 87 97 00 00 00    	ja     c0026854 <__divdi3+0x144>
c00267bd:	b9 01 00 00 00       	mov    ecx,0x1
c00267c2:	eb a4                	jmp    c0026768 <__divdi3+0x58>
c00267c4:	f7 d9                	neg    ecx
c00267c6:	83 d3 00             	adc    ebx,0x0
c00267c9:	f7 db                	neg    ebx
c00267cb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267ce:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267d2:	89 dd                	mov    ebp,ebx
c00267d4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267dc:	e9 5f ff ff ff       	jmp    c0026740 <__divdi3+0x30>
c00267e1:	8d 76 00             	lea    esi,[esi+0x0]
c00267e4:	31 f6                	xor    esi,esi
c00267e6:	31 c9                	xor    ecx,ecx
c00267e8:	e9 7b ff ff ff       	jmp    c0026768 <__divdi3+0x58>
c00267ed:	8d 76 00             	lea    esi,[esi+0x0]
c00267f0:	b8 20 00 00 00       	mov    eax,0x20
c00267f5:	29 f0                	sub    eax,esi
c00267f7:	89 f1                	mov    ecx,esi
c00267f9:	d3 e3                	shl    ebx,cl
c00267fb:	89 fa                	mov    edx,edi
c00267fd:	88 c1                	mov    cl,al
c00267ff:	d3 ea                	shr    edx,cl
c0026801:	09 da                	or     edx,ebx
c0026803:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026807:	89 f1                	mov    ecx,esi
c0026809:	d3 e7                	shl    edi,cl
c002680b:	89 eb                	mov    ebx,ebp
c002680d:	88 c1                	mov    cl,al
c002680f:	d3 eb                	shr    ebx,cl
c0026811:	89 f1                	mov    ecx,esi
c0026813:	d3 e5                	shl    ebp,cl
c0026815:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026818:	88 c1                	mov    cl,al
c002681a:	d3 ea                	shr    edx,cl
c002681c:	09 d5                	or     ebp,edx
c002681e:	89 e8                	mov    eax,ebp
c0026820:	89 da                	mov    edx,ebx
c0026822:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026826:	89 d3                	mov    ebx,edx
c0026828:	89 c5                	mov    ebp,eax
c002682a:	f7 e7                	mul    edi
c002682c:	39 d3                	cmp    ebx,edx
c002682e:	72 18                	jb     c0026848 <__divdi3+0x138>
c0026830:	74 0a                	je     c002683c <__divdi3+0x12c>
c0026832:	89 e9                	mov    ecx,ebp
c0026834:	31 f6                	xor    esi,esi
c0026836:	e9 2d ff ff ff       	jmp    c0026768 <__divdi3+0x58>
c002683b:	90                   	nop
c002683c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002683f:	89 f1                	mov    ecx,esi
c0026841:	d3 e7                	shl    edi,cl
c0026843:	39 c7                	cmp    edi,eax
c0026845:	73 eb                	jae    c0026832 <__divdi3+0x122>
c0026847:	90                   	nop
c0026848:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002684b:	31 f6                	xor    esi,esi
c002684d:	e9 16 ff ff ff       	jmp    c0026768 <__divdi3+0x58>
c0026852:	66 90                	xchg   ax,ax
c0026854:	31 c9                	xor    ecx,ecx
c0026856:	e9 0d ff ff ff       	jmp    c0026768 <__divdi3+0x58>
c002685b:	90                   	nop

c002685c <__moddi3>:
c002685c:	55                   	push   ebp
c002685d:	57                   	push   edi
c002685e:	56                   	push   esi
c002685f:	53                   	push   ebx
c0026860:	83 ec 2c             	sub    esp,0x2c
c0026863:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026867:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002686b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002686f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026873:	85 db                	test   ebx,ebx
c0026875:	0f 88 85 00 00 00    	js     c0026900 <__moddi3+0xa4>
c002687b:	89 de                	mov    esi,ebx
c002687d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026885:	89 d7                	mov    edi,edx
c0026887:	85 d2                	test   edx,edx
c0026889:	79 09                	jns    c0026894 <__moddi3+0x38>
c002688b:	f7 d8                	neg    eax
c002688d:	83 d2 00             	adc    edx,0x0
c0026890:	f7 da                	neg    edx
c0026892:	89 d7                	mov    edi,edx
c0026894:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026898:	89 cd                	mov    ebp,ecx
c002689a:	85 ff                	test   edi,edi
c002689c:	75 52                	jne    c00268f0 <__moddi3+0x94>
c002689e:	89 c3                	mov    ebx,eax
c00268a0:	39 f0                	cmp    eax,esi
c00268a2:	76 24                	jbe    c00268c8 <__moddi3+0x6c>
c00268a4:	89 c8                	mov    eax,ecx
c00268a6:	89 f2                	mov    edx,esi
c00268a8:	f7 f3                	div    ebx
c00268aa:	89 d6                	mov    esi,edx
c00268ac:	89 f0                	mov    eax,esi
c00268ae:	31 d2                	xor    edx,edx
c00268b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268b4:	85 c9                	test   ecx,ecx
c00268b6:	74 07                	je     c00268bf <__moddi3+0x63>
c00268b8:	f7 d8                	neg    eax
c00268ba:	83 d2 00             	adc    edx,0x0
c00268bd:	f7 da                	neg    edx
c00268bf:	83 c4 2c             	add    esp,0x2c
c00268c2:	5b                   	pop    ebx
c00268c3:	5e                   	pop    esi
c00268c4:	5f                   	pop    edi
c00268c5:	5d                   	pop    ebp
c00268c6:	c3                   	ret    
c00268c7:	90                   	nop
c00268c8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268cc:	85 db                	test   ebx,ebx
c00268ce:	75 0d                	jne    c00268dd <__moddi3+0x81>
c00268d0:	b8 01 00 00 00       	mov    eax,0x1
c00268d5:	31 d2                	xor    edx,edx
c00268d7:	f7 f7                	div    edi
c00268d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268dd:	89 f0                	mov    eax,esi
c00268df:	31 d2                	xor    edx,edx
c00268e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268e5:	f7 f7                	div    edi
c00268e7:	89 e8                	mov    eax,ebp
c00268e9:	f7 f7                	div    edi
c00268eb:	89 d6                	mov    esi,edx
c00268ed:	eb bd                	jmp    c00268ac <__moddi3+0x50>
c00268ef:	90                   	nop
c00268f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268f4:	39 f7                	cmp    edi,esi
c00268f6:	76 20                	jbe    c0026918 <__moddi3+0xbc>
c00268f8:	89 c8                	mov    eax,ecx
c00268fa:	89 f2                	mov    edx,esi
c00268fc:	eb b2                	jmp    c00268b0 <__moddi3+0x54>
c00268fe:	66 90                	xchg   ax,ax
c0026900:	f7 d9                	neg    ecx
c0026902:	83 d3 00             	adc    ebx,0x0
c0026905:	f7 db                	neg    ebx
c0026907:	89 de                	mov    esi,ebx
c0026909:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026911:	e9 6f ff ff ff       	jmp    c0026885 <__moddi3+0x29>
c0026916:	66 90                	xchg   ax,ax
c0026918:	0f bd c7             	bsr    eax,edi
c002691b:	83 f0 1f             	xor    eax,0x1f
c002691e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026922:	75 24                	jne    c0026948 <__moddi3+0xec>
c0026924:	39 f7                	cmp    edi,esi
c0026926:	72 06                	jb     c002692e <__moddi3+0xd2>
c0026928:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002692c:	77 0c                	ja     c002693a <__moddi3+0xde>
c002692e:	89 e9                	mov    ecx,ebp
c0026930:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026934:	19 fe                	sbb    esi,edi
c0026936:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002693a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002693e:	89 f2                	mov    edx,esi
c0026940:	e9 6b ff ff ff       	jmp    c00268b0 <__moddi3+0x54>
c0026945:	8d 76 00             	lea    esi,[esi+0x0]
c0026948:	b8 20 00 00 00       	mov    eax,0x20
c002694d:	89 c2                	mov    edx,eax
c002694f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026953:	29 da                	sub    edx,ebx
c0026955:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026959:	88 d9                	mov    cl,bl
c002695b:	d3 e7                	shl    edi,cl
c002695d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026961:	88 d1                	mov    cl,dl
c0026963:	d3 e8                	shr    eax,cl
c0026965:	09 c7                	or     edi,eax
c0026967:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002696b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002696f:	89 d8                	mov    eax,ebx
c0026971:	88 d9                	mov    cl,bl
c0026973:	d3 e7                	shl    edi,cl
c0026975:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026979:	89 f3                	mov    ebx,esi
c002697b:	88 d1                	mov    cl,dl
c002697d:	d3 eb                	shr    ebx,cl
c002697f:	89 c7                	mov    edi,eax
c0026981:	88 c1                	mov    cl,al
c0026983:	d3 e6                	shl    esi,cl
c0026985:	89 e8                	mov    eax,ebp
c0026987:	88 d1                	mov    cl,dl
c0026989:	d3 e8                	shr    eax,cl
c002698b:	09 f0                	or     eax,esi
c002698d:	89 f9                	mov    ecx,edi
c002698f:	d3 e5                	shl    ebp,cl
c0026991:	89 da                	mov    edx,ebx
c0026993:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026997:	89 d3                	mov    ebx,edx
c0026999:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002699d:	89 c6                	mov    esi,eax
c002699f:	89 d1                	mov    ecx,edx
c00269a1:	39 d3                	cmp    ebx,edx
c00269a3:	72 27                	jb     c00269cc <__moddi3+0x170>
c00269a5:	74 21                	je     c00269c8 <__moddi3+0x16c>
c00269a7:	29 f5                	sub    ebp,esi
c00269a9:	19 cb                	sbb    ebx,ecx
c00269ab:	89 de                	mov    esi,ebx
c00269ad:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00269b1:	d3 e6                	shl    esi,cl
c00269b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00269b7:	89 f9                	mov    ecx,edi
c00269b9:	d3 ed                	shr    ebp,cl
c00269bb:	09 ee                	or     esi,ebp
c00269bd:	89 f0                	mov    eax,esi
c00269bf:	d3 eb                	shr    ebx,cl
c00269c1:	89 da                	mov    edx,ebx
c00269c3:	e9 e8 fe ff ff       	jmp    c00268b0 <__moddi3+0x54>
c00269c8:	39 c5                	cmp    ebp,eax
c00269ca:	73 db                	jae    c00269a7 <__moddi3+0x14b>
c00269cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269d0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269d4:	89 d1                	mov    ecx,edx
c00269d6:	89 c6                	mov    esi,eax
c00269d8:	eb cd                	jmp    c00269a7 <__moddi3+0x14b>
c00269da:	66 90                	xchg   ax,ax

c00269dc <__udivdi3>:
c00269dc:	55                   	push   ebp
c00269dd:	57                   	push   edi
c00269de:	56                   	push   esi
c00269df:	53                   	push   ebx
c00269e0:	83 ec 1c             	sub    esp,0x1c
c00269e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269f3:	85 d2                	test   edx,edx
c00269f5:	75 41                	jne    c0026a38 <__udivdi3+0x5c>
c00269f7:	39 f7                	cmp    edi,esi
c00269f9:	76 15                	jbe    c0026a10 <__udivdi3+0x34>
c00269fb:	89 e8                	mov    eax,ebp
c00269fd:	89 f2                	mov    edx,esi
c00269ff:	f7 f7                	div    edi
c0026a01:	31 db                	xor    ebx,ebx
c0026a03:	89 da                	mov    edx,ebx
c0026a05:	83 c4 1c             	add    esp,0x1c
c0026a08:	5b                   	pop    ebx
c0026a09:	5e                   	pop    esi
c0026a0a:	5f                   	pop    edi
c0026a0b:	5d                   	pop    ebp
c0026a0c:	c3                   	ret    
c0026a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a10:	89 f9                	mov    ecx,edi
c0026a12:	85 ff                	test   edi,edi
c0026a14:	75 0b                	jne    c0026a21 <__udivdi3+0x45>
c0026a16:	b8 01 00 00 00       	mov    eax,0x1
c0026a1b:	31 d2                	xor    edx,edx
c0026a1d:	f7 f7                	div    edi
c0026a1f:	89 c1                	mov    ecx,eax
c0026a21:	31 d2                	xor    edx,edx
c0026a23:	89 f0                	mov    eax,esi
c0026a25:	f7 f1                	div    ecx
c0026a27:	89 c3                	mov    ebx,eax
c0026a29:	89 e8                	mov    eax,ebp
c0026a2b:	f7 f1                	div    ecx
c0026a2d:	89 da                	mov    edx,ebx
c0026a2f:	83 c4 1c             	add    esp,0x1c
c0026a32:	5b                   	pop    ebx
c0026a33:	5e                   	pop    esi
c0026a34:	5f                   	pop    edi
c0026a35:	5d                   	pop    ebp
c0026a36:	c3                   	ret    
c0026a37:	90                   	nop
c0026a38:	39 f2                	cmp    edx,esi
c0026a3a:	77 1c                	ja     c0026a58 <__udivdi3+0x7c>
c0026a3c:	0f bd da             	bsr    ebx,edx
c0026a3f:	83 f3 1f             	xor    ebx,0x1f
c0026a42:	75 24                	jne    c0026a68 <__udivdi3+0x8c>
c0026a44:	39 f2                	cmp    edx,esi
c0026a46:	72 08                	jb     c0026a50 <__udivdi3+0x74>
c0026a48:	39 ef                	cmp    edi,ebp
c0026a4a:	0f 87 84 00 00 00    	ja     c0026ad4 <__udivdi3+0xf8>
c0026a50:	b8 01 00 00 00       	mov    eax,0x1
c0026a55:	eb ac                	jmp    c0026a03 <__udivdi3+0x27>
c0026a57:	90                   	nop
c0026a58:	31 db                	xor    ebx,ebx
c0026a5a:	31 c0                	xor    eax,eax
c0026a5c:	89 da                	mov    edx,ebx
c0026a5e:	83 c4 1c             	add    esp,0x1c
c0026a61:	5b                   	pop    ebx
c0026a62:	5e                   	pop    esi
c0026a63:	5f                   	pop    edi
c0026a64:	5d                   	pop    ebp
c0026a65:	c3                   	ret    
c0026a66:	66 90                	xchg   ax,ax
c0026a68:	b8 20 00 00 00       	mov    eax,0x20
c0026a6d:	29 d8                	sub    eax,ebx
c0026a6f:	88 d9                	mov    cl,bl
c0026a71:	d3 e2                	shl    edx,cl
c0026a73:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a77:	89 fa                	mov    edx,edi
c0026a79:	88 c1                	mov    cl,al
c0026a7b:	d3 ea                	shr    edx,cl
c0026a7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a81:	09 d1                	or     ecx,edx
c0026a83:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a87:	88 d9                	mov    cl,bl
c0026a89:	d3 e7                	shl    edi,cl
c0026a8b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a8f:	89 f7                	mov    edi,esi
c0026a91:	88 c1                	mov    cl,al
c0026a93:	d3 ef                	shr    edi,cl
c0026a95:	88 d9                	mov    cl,bl
c0026a97:	d3 e6                	shl    esi,cl
c0026a99:	89 ea                	mov    edx,ebp
c0026a9b:	88 c1                	mov    cl,al
c0026a9d:	d3 ea                	shr    edx,cl
c0026a9f:	09 d6                	or     esi,edx
c0026aa1:	89 f0                	mov    eax,esi
c0026aa3:	89 fa                	mov    edx,edi
c0026aa5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026aa9:	89 d7                	mov    edi,edx
c0026aab:	89 c6                	mov    esi,eax
c0026aad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ab1:	39 d7                	cmp    edi,edx
c0026ab3:	72 13                	jb     c0026ac8 <__udivdi3+0xec>
c0026ab5:	74 09                	je     c0026ac0 <__udivdi3+0xe4>
c0026ab7:	89 f0                	mov    eax,esi
c0026ab9:	31 db                	xor    ebx,ebx
c0026abb:	e9 43 ff ff ff       	jmp    c0026a03 <__udivdi3+0x27>
c0026ac0:	88 d9                	mov    cl,bl
c0026ac2:	d3 e5                	shl    ebp,cl
c0026ac4:	39 c5                	cmp    ebp,eax
c0026ac6:	73 ef                	jae    c0026ab7 <__udivdi3+0xdb>
c0026ac8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026acb:	31 db                	xor    ebx,ebx
c0026acd:	e9 31 ff ff ff       	jmp    c0026a03 <__udivdi3+0x27>
c0026ad2:	66 90                	xchg   ax,ax
c0026ad4:	31 c0                	xor    eax,eax
c0026ad6:	e9 28 ff ff ff       	jmp    c0026a03 <__udivdi3+0x27>
c0026adb:	90                   	nop

c0026adc <__umoddi3>:
c0026adc:	55                   	push   ebp
c0026add:	57                   	push   edi
c0026ade:	56                   	push   esi
c0026adf:	53                   	push   ebx
c0026ae0:	83 ec 1c             	sub    esp,0x1c
c0026ae3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ae7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026aeb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026aef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026af3:	89 da                	mov    edx,ebx
c0026af5:	85 c0                	test   eax,eax
c0026af7:	75 37                	jne    c0026b30 <__umoddi3+0x54>
c0026af9:	39 df                	cmp    edi,ebx
c0026afb:	76 13                	jbe    c0026b10 <__umoddi3+0x34>
c0026afd:	89 f0                	mov    eax,esi
c0026aff:	f7 f7                	div    edi
c0026b01:	89 d0                	mov    eax,edx
c0026b03:	31 d2                	xor    edx,edx
c0026b05:	83 c4 1c             	add    esp,0x1c
c0026b08:	5b                   	pop    ebx
c0026b09:	5e                   	pop    esi
c0026b0a:	5f                   	pop    edi
c0026b0b:	5d                   	pop    ebp
c0026b0c:	c3                   	ret    
c0026b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b10:	89 fd                	mov    ebp,edi
c0026b12:	85 ff                	test   edi,edi
c0026b14:	75 0b                	jne    c0026b21 <__umoddi3+0x45>
c0026b16:	b8 01 00 00 00       	mov    eax,0x1
c0026b1b:	31 d2                	xor    edx,edx
c0026b1d:	f7 f7                	div    edi
c0026b1f:	89 c5                	mov    ebp,eax
c0026b21:	89 d8                	mov    eax,ebx
c0026b23:	31 d2                	xor    edx,edx
c0026b25:	f7 f5                	div    ebp
c0026b27:	89 f0                	mov    eax,esi
c0026b29:	f7 f5                	div    ebp
c0026b2b:	89 d0                	mov    eax,edx
c0026b2d:	eb d4                	jmp    c0026b03 <__umoddi3+0x27>
c0026b2f:	90                   	nop
c0026b30:	89 f1                	mov    ecx,esi
c0026b32:	39 d8                	cmp    eax,ebx
c0026b34:	76 0a                	jbe    c0026b40 <__umoddi3+0x64>
c0026b36:	89 f0                	mov    eax,esi
c0026b38:	83 c4 1c             	add    esp,0x1c
c0026b3b:	5b                   	pop    ebx
c0026b3c:	5e                   	pop    esi
c0026b3d:	5f                   	pop    edi
c0026b3e:	5d                   	pop    ebp
c0026b3f:	c3                   	ret    
c0026b40:	0f bd e8             	bsr    ebp,eax
c0026b43:	83 f5 1f             	xor    ebp,0x1f
c0026b46:	75 1c                	jne    c0026b64 <__umoddi3+0x88>
c0026b48:	39 d8                	cmp    eax,ebx
c0026b4a:	72 04                	jb     c0026b50 <__umoddi3+0x74>
c0026b4c:	39 f7                	cmp    edi,esi
c0026b4e:	77 08                	ja     c0026b58 <__umoddi3+0x7c>
c0026b50:	89 da                	mov    edx,ebx
c0026b52:	29 fe                	sub    esi,edi
c0026b54:	19 c2                	sbb    edx,eax
c0026b56:	89 f1                	mov    ecx,esi
c0026b58:	89 c8                	mov    eax,ecx
c0026b5a:	83 c4 1c             	add    esp,0x1c
c0026b5d:	5b                   	pop    ebx
c0026b5e:	5e                   	pop    esi
c0026b5f:	5f                   	pop    edi
c0026b60:	5d                   	pop    ebp
c0026b61:	c3                   	ret    
c0026b62:	66 90                	xchg   ax,ax
c0026b64:	ba 20 00 00 00       	mov    edx,0x20
c0026b69:	29 ea                	sub    edx,ebp
c0026b6b:	89 e9                	mov    ecx,ebp
c0026b6d:	d3 e0                	shl    eax,cl
c0026b6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b73:	89 f8                	mov    eax,edi
c0026b75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b79:	88 d1                	mov    cl,dl
c0026b7b:	d3 e8                	shr    eax,cl
c0026b7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b81:	09 c1                	or     ecx,eax
c0026b83:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b87:	89 e9                	mov    ecx,ebp
c0026b89:	d3 e7                	shl    edi,cl
c0026b8b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b8f:	89 d8                	mov    eax,ebx
c0026b91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b95:	88 d1                	mov    cl,dl
c0026b97:	d3 e8                	shr    eax,cl
c0026b99:	89 c7                	mov    edi,eax
c0026b9b:	89 e9                	mov    ecx,ebp
c0026b9d:	d3 e3                	shl    ebx,cl
c0026b9f:	89 f0                	mov    eax,esi
c0026ba1:	88 d1                	mov    cl,dl
c0026ba3:	d3 e8                	shr    eax,cl
c0026ba5:	09 d8                	or     eax,ebx
c0026ba7:	89 e9                	mov    ecx,ebp
c0026ba9:	d3 e6                	shl    esi,cl
c0026bab:	89 f3                	mov    ebx,esi
c0026bad:	89 fa                	mov    edx,edi
c0026baf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026bb3:	89 d1                	mov    ecx,edx
c0026bb5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026bb9:	89 c6                	mov    esi,eax
c0026bbb:	89 d7                	mov    edi,edx
c0026bbd:	39 d1                	cmp    ecx,edx
c0026bbf:	72 27                	jb     c0026be8 <__umoddi3+0x10c>
c0026bc1:	74 21                	je     c0026be4 <__umoddi3+0x108>
c0026bc3:	89 ca                	mov    edx,ecx
c0026bc5:	29 f3                	sub    ebx,esi
c0026bc7:	19 fa                	sbb    edx,edi
c0026bc9:	89 d0                	mov    eax,edx
c0026bcb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026bcf:	d3 e0                	shl    eax,cl
c0026bd1:	89 e9                	mov    ecx,ebp
c0026bd3:	d3 eb                	shr    ebx,cl
c0026bd5:	09 d8                	or     eax,ebx
c0026bd7:	d3 ea                	shr    edx,cl
c0026bd9:	83 c4 1c             	add    esp,0x1c
c0026bdc:	5b                   	pop    ebx
c0026bdd:	5e                   	pop    esi
c0026bde:	5f                   	pop    edi
c0026bdf:	5d                   	pop    ebp
c0026be0:	c3                   	ret    
c0026be1:	8d 76 00             	lea    esi,[esi+0x0]
c0026be4:	39 c3                	cmp    ebx,eax
c0026be6:	73 db                	jae    c0026bc3 <__umoddi3+0xe7>
c0026be8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bec:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026bf0:	89 d7                	mov    edi,edx
c0026bf2:	89 c6                	mov    esi,eax
c0026bf4:	eb cd                	jmp    c0026bc3 <__umoddi3+0xe7>

c0026bf6 <__addsf3>:
c0026bf6:	55                   	push   ebp
c0026bf7:	89 e5                	mov    ebp,esp
c0026bf9:	57                   	push   edi
c0026bfa:	56                   	push   esi
c0026bfb:	53                   	push   ebx
c0026bfc:	83 ec 08             	sub    esp,0x8
c0026bff:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c02:	89 fa                	mov    edx,edi
c0026c04:	89 f8                	mov    eax,edi
c0026c06:	c1 f8 17             	sar    eax,0x17
c0026c09:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c0c:	c1 e2 08             	shl    edx,0x8
c0026c0f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c15:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c18:	89 de                	mov    esi,ebx
c0026c1a:	c1 fe 17             	sar    esi,0x17
c0026c1d:	c1 e3 08             	shl    ebx,0x8
c0026c20:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c26:	31 f0                	xor    eax,esi
c0026c28:	0f 88 3b 01 00 00    	js     c0026d69 <__addsf3+0x173>
c0026c2e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c31:	29 f1                	sub    ecx,esi
c0026c33:	85 c9                	test   ecx,ecx
c0026c35:	7e 54                	jle    c0026c8b <__addsf3+0x95>
c0026c37:	89 f0                	mov    eax,esi
c0026c39:	84 c0                	test   al,al
c0026c3b:	75 10                	jne    c0026c4d <__addsf3+0x57>
c0026c3d:	85 db                	test   ebx,ebx
c0026c3f:	0f 84 aa 02 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026c45:	49                   	dec    ecx
c0026c46:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c49:	74 38                	je     c0026c83 <__addsf3+0x8d>
c0026c4b:	eb 13                	jmp    c0026c60 <__addsf3+0x6a>
c0026c4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c50:	f7 d0                	not    eax
c0026c52:	84 c0                	test   al,al
c0026c54:	0f 84 95 02 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026c5a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c60:	83 f9 1f             	cmp    ecx,0x1f
c0026c63:	0f 8f 86 02 00 00    	jg     c0026eef <__addsf3+0x2f9>
c0026c69:	89 de                	mov    esi,ebx
c0026c6b:	d3 ee                	shr    esi,cl
c0026c6d:	b8 20 00 00 00       	mov    eax,0x20
c0026c72:	29 c8                	sub    eax,ecx
c0026c74:	89 c1                	mov    ecx,eax
c0026c76:	d3 e3                	shl    ebx,cl
c0026c78:	31 c0                	xor    eax,eax
c0026c7a:	85 db                	test   ebx,ebx
c0026c7c:	0f 95 c0             	setne  al
c0026c7f:	09 f0                	or     eax,esi
c0026c81:	01 d0                	add    eax,edx
c0026c83:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c86:	e9 b6 00 00 00       	jmp    c0026d41 <__addsf3+0x14b>
c0026c8b:	74 5c                	je     c0026ce9 <__addsf3+0xf3>
c0026c8d:	89 f1                	mov    ecx,esi
c0026c8f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c92:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c95:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c99:	75 14                	jne    c0026caf <__addsf3+0xb9>
c0026c9b:	85 d2                	test   edx,edx
c0026c9d:	0f 84 4c 02 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026ca3:	49                   	dec    ecx
c0026ca4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ca7:	0f 84 94 00 00 00    	je     c0026d41 <__addsf3+0x14b>
c0026cad:	eb 12                	jmp    c0026cc1 <__addsf3+0xcb>
c0026caf:	89 f0                	mov    eax,esi
c0026cb1:	f7 d0                	not    eax
c0026cb3:	84 c0                	test   al,al
c0026cb5:	0f 84 34 02 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026cbb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cc1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cc4:	83 f9 1f             	cmp    ecx,0x1f
c0026cc7:	0f 8f 22 02 00 00    	jg     c0026eef <__addsf3+0x2f9>
c0026ccd:	89 d7                	mov    edi,edx
c0026ccf:	d3 ef                	shr    edi,cl
c0026cd1:	b8 20 00 00 00       	mov    eax,0x20
c0026cd6:	29 c8                	sub    eax,ecx
c0026cd8:	89 c1                	mov    ecx,eax
c0026cda:	d3 e2                	shl    edx,cl
c0026cdc:	31 c0                	xor    eax,eax
c0026cde:	85 d2                	test   edx,edx
c0026ce0:	0f 95 c0             	setne  al
c0026ce3:	09 f8                	or     eax,edi
c0026ce5:	01 d8                	add    eax,ebx
c0026ce7:	eb 58                	jmp    c0026d41 <__addsf3+0x14b>
c0026ce9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cec:	8d 70 01             	lea    esi,[eax+0x1]
c0026cef:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026cf5:	75 32                	jne    c0026d29 <__addsf3+0x133>
c0026cf7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cfb:	75 1f                	jne    c0026d1c <__addsf3+0x126>
c0026cfd:	85 d2                	test   edx,edx
c0026cff:	0f 84 e0 01 00 00    	je     c0026ee5 <__addsf3+0x2ef>
c0026d05:	85 db                	test   ebx,ebx
c0026d07:	0f 84 e2 01 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026d0d:	89 d0                	mov    eax,edx
c0026d0f:	01 d8                	add    eax,ebx
c0026d11:	0f 89 a9 01 00 00    	jns    c0026ec0 <__addsf3+0x2ca>
c0026d17:	e9 9d 01 00 00       	jmp    c0026eb9 <__addsf3+0x2c3>
c0026d1c:	85 d2                	test   edx,edx
c0026d1e:	0f 85 cb 01 00 00    	jne    c0026eef <__addsf3+0x2f9>
c0026d24:	e9 bc 01 00 00       	jmp    c0026ee5 <__addsf3+0x2ef>
c0026d29:	31 c0                	xor    eax,eax
c0026d2b:	89 f1                	mov    ecx,esi
c0026d2d:	f7 d1                	not    ecx
c0026d2f:	84 c9                	test   cl,cl
c0026d31:	0f 84 90 01 00 00    	je     c0026ec7 <__addsf3+0x2d1>
c0026d37:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d3a:	d1 e8                	shr    eax,1
c0026d3c:	e9 86 01 00 00       	jmp    c0026ec7 <__addsf3+0x2d1>
c0026d41:	85 c0                	test   eax,eax
c0026d43:	0f 89 7e 01 00 00    	jns    c0026ec7 <__addsf3+0x2d1>
c0026d49:	46                   	inc    esi
c0026d4a:	89 f2                	mov    edx,esi
c0026d4c:	f7 d2                	not    edx
c0026d4e:	84 d2                	test   dl,dl
c0026d50:	0f 84 6f 01 00 00    	je     c0026ec5 <__addsf3+0x2cf>
c0026d56:	89 c2                	mov    edx,eax
c0026d58:	83 e2 01             	and    edx,0x1
c0026d5b:	d1 e8                	shr    eax,1
c0026d5d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d62:	09 d0                	or     eax,edx
c0026d64:	e9 5e 01 00 00       	jmp    c0026ec7 <__addsf3+0x2d1>
c0026d69:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d6d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d70:	89 f0                	mov    eax,esi
c0026d72:	0f b6 c0             	movzx  eax,al
c0026d75:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d78:	29 c1                	sub    ecx,eax
c0026d7a:	85 c9                	test   ecx,ecx
c0026d7c:	7e 55                	jle    c0026dd3 <__addsf3+0x1dd>
c0026d7e:	85 c0                	test   eax,eax
c0026d80:	75 11                	jne    c0026d93 <__addsf3+0x19d>
c0026d82:	85 db                	test   ebx,ebx
c0026d84:	0f 84 65 01 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026d8a:	49                   	dec    ecx
c0026d8b:	75 19                	jne    c0026da6 <__addsf3+0x1b0>
c0026d8d:	89 d0                	mov    eax,edx
c0026d8f:	29 d8                	sub    eax,ebx
c0026d91:	eb 38                	jmp    c0026dcb <__addsf3+0x1d5>
c0026d93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d96:	f7 d0                	not    eax
c0026d98:	84 c0                	test   al,al
c0026d9a:	0f 84 4f 01 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026da0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026da6:	83 f9 1f             	cmp    ecx,0x1f
c0026da9:	0f 8f 40 01 00 00    	jg     c0026eef <__addsf3+0x2f9>
c0026daf:	89 de                	mov    esi,ebx
c0026db1:	d3 ee                	shr    esi,cl
c0026db3:	b8 20 00 00 00       	mov    eax,0x20
c0026db8:	29 c8                	sub    eax,ecx
c0026dba:	89 c1                	mov    ecx,eax
c0026dbc:	d3 e3                	shl    ebx,cl
c0026dbe:	31 c0                	xor    eax,eax
c0026dc0:	85 db                	test   ebx,ebx
c0026dc2:	0f 95 c0             	setne  al
c0026dc5:	09 f0                	or     eax,esi
c0026dc7:	29 c2                	sub    edx,eax
c0026dc9:	89 d0                	mov    eax,edx
c0026dcb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dce:	e9 af 00 00 00       	jmp    c0026e82 <__addsf3+0x28c>
c0026dd3:	74 5c                	je     c0026e31 <__addsf3+0x23b>
c0026dd5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026dd8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ddb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ddf:	75 14                	jne    c0026df5 <__addsf3+0x1ff>
c0026de1:	85 d2                	test   edx,edx
c0026de3:	0f 84 06 01 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026de9:	48                   	dec    eax
c0026dea:	75 1b                	jne    c0026e07 <__addsf3+0x211>
c0026dec:	89 d8                	mov    eax,ebx
c0026dee:	29 d0                	sub    eax,edx
c0026df0:	e9 8d 00 00 00       	jmp    c0026e82 <__addsf3+0x28c>
c0026df5:	89 f1                	mov    ecx,esi
c0026df7:	f7 d1                	not    ecx
c0026df9:	84 c9                	test   cl,cl
c0026dfb:	0f 84 ee 00 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026e01:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e0a:	83 f8 1f             	cmp    eax,0x1f
c0026e0d:	0f 8f dc 00 00 00    	jg     c0026eef <__addsf3+0x2f9>
c0026e13:	89 d7                	mov    edi,edx
c0026e15:	88 c1                	mov    cl,al
c0026e17:	d3 ef                	shr    edi,cl
c0026e19:	b9 20 00 00 00       	mov    ecx,0x20
c0026e1e:	29 c1                	sub    ecx,eax
c0026e20:	d3 e2                	shl    edx,cl
c0026e22:	31 c0                	xor    eax,eax
c0026e24:	85 d2                	test   edx,edx
c0026e26:	0f 95 c0             	setne  al
c0026e29:	09 f8                	or     eax,edi
c0026e2b:	29 c3                	sub    ebx,eax
c0026e2d:	89 d8                	mov    eax,ebx
c0026e2f:	eb 51                	jmp    c0026e82 <__addsf3+0x28c>
c0026e31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e34:	40                   	inc    eax
c0026e35:	a8 fe                	test   al,0xfe
c0026e37:	75 3d                	jne    c0026e76 <__addsf3+0x280>
c0026e39:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e3d:	0f 85 a7 00 00 00    	jne    c0026eea <__addsf3+0x2f4>
c0026e43:	85 d2                	test   edx,edx
c0026e45:	75 12                	jne    c0026e59 <__addsf3+0x263>
c0026e47:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e4a:	85 db                	test   ebx,ebx
c0026e4c:	0f 85 9d 00 00 00    	jne    c0026eef <__addsf3+0x2f9>
c0026e52:	31 ff                	xor    edi,edi
c0026e54:	e9 96 00 00 00       	jmp    c0026eef <__addsf3+0x2f9>
c0026e59:	85 db                	test   ebx,ebx
c0026e5b:	0f 84 8e 00 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026e61:	89 d0                	mov    eax,edx
c0026e63:	29 d8                	sub    eax,ebx
c0026e65:	79 06                	jns    c0026e6d <__addsf3+0x277>
c0026e67:	89 d8                	mov    eax,ebx
c0026e69:	29 d0                	sub    eax,edx
c0026e6b:	eb 5a                	jmp    c0026ec7 <__addsf3+0x2d1>
c0026e6d:	bf 00 00 00 00       	mov    edi,0x0
c0026e72:	74 7b                	je     c0026eef <__addsf3+0x2f9>
c0026e74:	eb 4a                	jmp    c0026ec0 <__addsf3+0x2ca>
c0026e76:	89 d0                	mov    eax,edx
c0026e78:	29 d8                	sub    eax,ebx
c0026e7a:	79 12                	jns    c0026e8e <__addsf3+0x298>
c0026e7c:	89 d8                	mov    eax,ebx
c0026e7e:	29 d0                	sub    eax,edx
c0026e80:	eb 09                	jmp    c0026e8b <__addsf3+0x295>
c0026e82:	85 c0                	test   eax,eax
c0026e84:	79 41                	jns    c0026ec7 <__addsf3+0x2d1>
c0026e86:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e8b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e8e:	31 f6                	xor    esi,esi
c0026e90:	85 c0                	test   eax,eax
c0026e92:	74 33                	je     c0026ec7 <__addsf3+0x2d1>
c0026e94:	0f bd c8             	bsr    ecx,eax
c0026e97:	83 f1 1f             	xor    ecx,0x1f
c0026e9a:	d3 e0                	shl    eax,cl
c0026e9c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ea0:	39 ca                	cmp    edx,ecx
c0026ea2:	7f 10                	jg     c0026eb4 <__addsf3+0x2be>
c0026ea4:	29 d1                	sub    ecx,edx
c0026ea6:	41                   	inc    ecx
c0026ea7:	d3 e8                	shr    eax,cl
c0026ea9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026eac:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026eb2:	eb 13                	jmp    c0026ec7 <__addsf3+0x2d1>
c0026eb4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026eb7:	29 ce                	sub    esi,ecx
c0026eb9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ebe:	eb 07                	jmp    c0026ec7 <__addsf3+0x2d1>
c0026ec0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ec3:	eb 02                	jmp    c0026ec7 <__addsf3+0x2d1>
c0026ec5:	31 c0                	xor    eax,eax
c0026ec7:	89 c2                	mov    edx,eax
c0026ec9:	c1 ea 08             	shr    edx,0x8
c0026ecc:	a8 7f                	test   al,0x7f
c0026ece:	0f 95 c1             	setne  cl
c0026ed1:	09 d1                	or     ecx,edx
c0026ed3:	83 e1 01             	and    ecx,0x1
c0026ed6:	c1 e8 07             	shr    eax,0x7
c0026ed9:	21 c8                	and    eax,ecx
c0026edb:	c1 e6 17             	shl    esi,0x17
c0026ede:	09 d6                	or     esi,edx
c0026ee0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026ee3:	eb 0a                	jmp    c0026eef <__addsf3+0x2f9>
c0026ee5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ee8:	eb 05                	jmp    c0026eef <__addsf3+0x2f9>
c0026eea:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026eef:	89 f8                	mov    eax,edi
c0026ef1:	5a                   	pop    edx
c0026ef2:	59                   	pop    ecx
c0026ef3:	5b                   	pop    ebx
c0026ef4:	5e                   	pop    esi
c0026ef5:	5f                   	pop    edi
c0026ef6:	5d                   	pop    ebp
c0026ef7:	c3                   	ret    

c0026ef8 <__subsf3>:
c0026ef8:	55                   	push   ebp
c0026ef9:	89 e5                	mov    ebp,esp
c0026efb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026efe:	05 00 00 00 80       	add    eax,0x80000000
c0026f03:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f06:	5d                   	pop    ebp
c0026f07:	e9 ea fc ff ff       	jmp    c0026bf6 <__addsf3>

c0026f0c <__negsf2>:
c0026f0c:	55                   	push   ebp
c0026f0d:	89 e5                	mov    ebp,esp
c0026f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f12:	05 00 00 00 80       	add    eax,0x80000000
c0026f17:	5d                   	pop    ebp
c0026f18:	c3                   	ret    

c0026f19 <__mulsf3>:
c0026f19:	55                   	push   ebp
c0026f1a:	89 e5                	mov    ebp,esp
c0026f1c:	57                   	push   edi
c0026f1d:	56                   	push   esi
c0026f1e:	53                   	push   ebx
c0026f1f:	83 ec 1c             	sub    esp,0x1c
c0026f22:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f25:	89 f0                	mov    eax,esi
c0026f27:	89 f1                	mov    ecx,esi
c0026f29:	c1 f9 17             	sar    ecx,0x17
c0026f2c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f2f:	c1 e0 08             	shl    eax,0x8
c0026f32:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f37:	89 c1                	mov    ecx,eax
c0026f39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f3c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f3f:	89 c7                	mov    edi,eax
c0026f41:	c1 ff 17             	sar    edi,0x17
c0026f44:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f48:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f4b:	89 f8                	mov    eax,edi
c0026f4d:	0f b6 c0             	movzx  eax,al
c0026f50:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f53:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f57:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f5a:	42                   	inc    edx
c0026f5b:	80 e2 fe             	and    dl,0xfe
c0026f5e:	75 7b                	jne    c0026fdb <__mulsf3+0xc2>
c0026f60:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f64:	74 54                	je     c0026fba <__mulsf3+0xa1>
c0026f66:	85 c9                	test   ecx,ecx
c0026f68:	0f 85 64 01 00 00    	jne    c00270d2 <__mulsf3+0x1b9>
c0026f6e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f71:	80 e2 fe             	and    dl,0xfe
c0026f74:	75 1f                	jne    c0026f95 <__mulsf3+0x7c>
c0026f76:	85 c0                	test   eax,eax
c0026f78:	b8 00 00 00 00       	mov    eax,0x0
c0026f7d:	74 29                	je     c0026fa8 <__mulsf3+0x8f>
c0026f7f:	53                   	push   ebx
c0026f80:	53                   	push   ebx
c0026f81:	50                   	push   eax
c0026f82:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f85:	e8 96 05 00 00       	call   c0027520 <__nesf2>
c0026f8a:	83 c4 10             	add    esp,0x10
c0026f8d:	85 c0                	test   eax,eax
c0026f8f:	0f 85 3a 01 00 00    	jne    c00270cf <__mulsf3+0x1b6>
c0026f95:	85 ff                	test   edi,edi
c0026f97:	0f 89 35 01 00 00    	jns    c00270d2 <__mulsf3+0x1b9>
c0026f9d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026fa3:	e9 2a 01 00 00       	jmp    c00270d2 <__mulsf3+0x1b9>
c0026fa8:	51                   	push   ecx
c0026fa9:	51                   	push   ecx
c0026faa:	50                   	push   eax
c0026fab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fae:	e8 6d 05 00 00       	call   c0027520 <__nesf2>
c0026fb3:	83 c4 10             	add    esp,0x10
c0026fb6:	85 c0                	test   eax,eax
c0026fb8:	eb 15                	jmp    c0026fcf <__mulsf3+0xb6>
c0026fba:	85 c9                	test   ecx,ecx
c0026fbc:	74 0b                	je     c0026fc9 <__mulsf3+0xb0>
c0026fbe:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fc1:	01 c9                	add    ecx,ecx
c0026fc3:	78 16                	js     c0026fdb <__mulsf3+0xc2>
c0026fc5:	89 d3                	mov    ebx,edx
c0026fc7:	eb f5                	jmp    c0026fbe <__mulsf3+0xa5>
c0026fc9:	89 f8                	mov    eax,edi
c0026fcb:	f7 d0                	not    eax
c0026fcd:	84 c0                	test   al,al
c0026fcf:	75 c4                	jne    c0026f95 <__mulsf3+0x7c>
c0026fd1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fd6:	e9 f7 00 00 00       	jmp    c00270d2 <__mulsf3+0x1b9>
c0026fdb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fde:	c1 e6 08             	shl    esi,0x8
c0026fe1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026fe7:	8d 57 01             	lea    edx,[edi+0x1]
c0026fea:	80 e2 fe             	and    dl,0xfe
c0026fed:	75 63                	jne    c0027052 <__mulsf3+0x139>
c0026fef:	85 c0                	test   eax,eax
c0026ff1:	74 2f                	je     c0027022 <__mulsf3+0x109>
c0026ff3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026ff7:	0f 89 d2 00 00 00    	jns    c00270cf <__mulsf3+0x1b6>
c0026ffd:	52                   	push   edx
c0026ffe:	52                   	push   edx
c0026fff:	6a 00                	push   0x0
c0027001:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027004:	e8 dc 04 00 00       	call   c00274e5 <__eqsf2>
c0027009:	83 c4 10             	add    esp,0x10
c002700c:	85 c0                	test   eax,eax
c002700e:	0f 85 bb 00 00 00    	jne    c00270cf <__mulsf3+0x1b6>
c0027014:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027017:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002701d:	e9 b0 00 00 00       	jmp    c00270d2 <__mulsf3+0x1b9>
c0027022:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027025:	50                   	push   eax
c0027026:	50                   	push   eax
c0027027:	6a 00                	push   0x0
c0027029:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002702c:	e8 b4 04 00 00       	call   c00274e5 <__eqsf2>
c0027031:	83 c4 10             	add    esp,0x10
c0027034:	85 c0                	test   eax,eax
c0027036:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027039:	75 0c                	jne    c0027047 <__mulsf3+0x12e>
c002703b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002703f:	0f 89 8a 00 00 00    	jns    c00270cf <__mulsf3+0x1b6>
c0027045:	eb cd                	jmp    c0027014 <__mulsf3+0xfb>
c0027047:	8d 43 ff             	lea    eax,[ebx-0x1]
c002704a:	01 f6                	add    esi,esi
c002704c:	78 04                	js     c0027052 <__mulsf3+0x139>
c002704e:	89 c3                	mov    ebx,eax
c0027050:	eb f5                	jmp    c0027047 <__mulsf3+0x12e>
c0027052:	89 c8                	mov    eax,ecx
c0027054:	0d 00 00 00 80       	or     eax,0x80000000
c0027059:	81 ce 00 00 00 80    	or     esi,0x80000000
c002705f:	f7 e6                	mul    esi
c0027061:	85 c0                	test   eax,eax
c0027063:	0f 95 c0             	setne  al
c0027066:	0f b6 c0             	movzx  eax,al
c0027069:	09 c2                	or     edx,eax
c002706b:	78 03                	js     c0027070 <__mulsf3+0x157>
c002706d:	01 d2                	add    edx,edx
c002706f:	4b                   	dec    ebx
c0027070:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027076:	7f 22                	jg     c002709a <__mulsf3+0x181>
c0027078:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002707e:	85 db                	test   ebx,ebx
c0027080:	7f 23                	jg     c00270a5 <__mulsf3+0x18c>
c0027082:	83 fb e9             	cmp    ebx,0xffffffe9
c0027085:	7c 1a                	jl     c00270a1 <__mulsf3+0x188>
c0027087:	81 ca 00 00 00 80    	or     edx,0x80000000
c002708d:	b9 01 00 00 00       	mov    ecx,0x1
c0027092:	29 d9                	sub    ecx,ebx
c0027094:	d3 ea                	shr    edx,cl
c0027096:	31 db                	xor    ebx,ebx
c0027098:	eb 0b                	jmp    c00270a5 <__mulsf3+0x18c>
c002709a:	bb ff 00 00 00       	mov    ebx,0xff
c002709f:	eb 02                	jmp    c00270a3 <__mulsf3+0x18a>
c00270a1:	31 db                	xor    ebx,ebx
c00270a3:	31 d2                	xor    edx,edx
c00270a5:	89 d0                	mov    eax,edx
c00270a7:	c1 e8 08             	shr    eax,0x8
c00270aa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270ad:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270b3:	09 fb                	or     ebx,edi
c00270b5:	c1 e3 17             	shl    ebx,0x17
c00270b8:	09 c3                	or     ebx,eax
c00270ba:	f6 c2 7f             	test   dl,0x7f
c00270bd:	0f 95 c1             	setne  cl
c00270c0:	09 c8                	or     eax,ecx
c00270c2:	83 e0 01             	and    eax,0x1
c00270c5:	c1 ea 07             	shr    edx,0x7
c00270c8:	21 c2                	and    edx,eax
c00270ca:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270cd:	eb 03                	jmp    c00270d2 <__mulsf3+0x1b9>
c00270cf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270d2:	89 f0                	mov    eax,esi
c00270d4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270d7:	5b                   	pop    ebx
c00270d8:	5e                   	pop    esi
c00270d9:	5f                   	pop    edi
c00270da:	5d                   	pop    ebp
c00270db:	c3                   	ret    

c00270dc <__divsf3>:
c00270dc:	55                   	push   ebp
c00270dd:	89 e5                	mov    ebp,esp
c00270df:	57                   	push   edi
c00270e0:	56                   	push   esi
c00270e1:	53                   	push   ebx
c00270e2:	83 ec 1c             	sub    esp,0x1c
c00270e5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270e8:	89 d8                	mov    eax,ebx
c00270ea:	89 d9                	mov    ecx,ebx
c00270ec:	c1 f9 17             	sar    ecx,0x17
c00270ef:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270f2:	c1 e0 08             	shl    eax,0x8
c00270f5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270fa:	89 c1                	mov    ecx,eax
c00270fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270ff:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027102:	89 c7                	mov    edi,eax
c0027104:	c1 ff 17             	sar    edi,0x17
c0027107:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002710b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002710e:	89 f8                	mov    eax,edi
c0027110:	0f b6 c0             	movzx  eax,al
c0027113:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027116:	29 c6                	sub    esi,eax
c0027118:	83 c6 7f             	add    esi,0x7f
c002711b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002711e:	42                   	inc    edx
c002711f:	80 e2 fe             	and    dl,0xfe
c0027122:	0f 85 9c 00 00 00    	jne    c00271c4 <__divsf3+0xe8>
c0027128:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002712c:	74 33                	je     c0027161 <__divsf3+0x85>
c002712e:	85 c9                	test   ecx,ecx
c0027130:	0f 85 c7 01 00 00    	jne    c00272fd <__divsf3+0x221>
c0027136:	8d 57 01             	lea    edx,[edi+0x1]
c0027139:	80 e2 fe             	and    dl,0xfe
c002713c:	75 2f                	jne    c002716d <__divsf3+0x91>
c002713e:	85 c0                	test   eax,eax
c0027140:	74 2b                	je     c002716d <__divsf3+0x91>
c0027142:	51                   	push   ecx
c0027143:	51                   	push   ecx
c0027144:	6a 00                	push   0x0
c0027146:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027149:	e8 d2 03 00 00       	call   c0027520 <__nesf2>
c002714e:	83 c4 10             	add    esp,0x10
c0027151:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027154:	85 c0                	test   eax,eax
c0027156:	0f 85 a1 01 00 00    	jne    c00272fd <__divsf3+0x221>
c002715c:	e9 92 01 00 00       	jmp    c00272f3 <__divsf3+0x217>
c0027161:	85 c9                	test   ecx,ecx
c0027163:	75 1b                	jne    c0027180 <__divsf3+0xa4>
c0027165:	8d 57 01             	lea    edx,[edi+0x1]
c0027168:	80 e2 fe             	and    dl,0xfe
c002716b:	74 1e                	je     c002718b <__divsf3+0xaf>
c002716d:	85 ff                	test   edi,edi
c002716f:	0f 89 88 01 00 00    	jns    c00272fd <__divsf3+0x221>
c0027175:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002717b:	e9 7d 01 00 00       	jmp    c00272fd <__divsf3+0x221>
c0027180:	8d 56 ff             	lea    edx,[esi-0x1]
c0027183:	01 c9                	add    ecx,ecx
c0027185:	78 3d                	js     c00271c4 <__divsf3+0xe8>
c0027187:	89 d6                	mov    esi,edx
c0027189:	eb f5                	jmp    c0027180 <__divsf3+0xa4>
c002718b:	85 c0                	test   eax,eax
c002718d:	b8 00 00 00 00       	mov    eax,0x0
c0027192:	74 18                	je     c00271ac <__divsf3+0xd0>
c0027194:	52                   	push   edx
c0027195:	52                   	push   edx
c0027196:	50                   	push   eax
c0027197:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002719a:	e8 81 03 00 00       	call   c0027520 <__nesf2>
c002719f:	83 c4 10             	add    esp,0x10
c00271a2:	85 c0                	test   eax,eax
c00271a4:	0f 85 50 01 00 00    	jne    c00272fa <__divsf3+0x21e>
c00271aa:	eb c1                	jmp    c002716d <__divsf3+0x91>
c00271ac:	56                   	push   esi
c00271ad:	56                   	push   esi
c00271ae:	50                   	push   eax
c00271af:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271b2:	e8 69 03 00 00       	call   c0027520 <__nesf2>
c00271b7:	83 c4 10             	add    esp,0x10
c00271ba:	85 c0                	test   eax,eax
c00271bc:	0f 84 31 01 00 00    	je     c00272f3 <__divsf3+0x217>
c00271c2:	eb a9                	jmp    c002716d <__divsf3+0x91>
c00271c4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271c7:	c1 e3 08             	shl    ebx,0x8
c00271ca:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271d0:	8d 57 01             	lea    edx,[edi+0x1]
c00271d3:	80 e2 fe             	and    dl,0xfe
c00271d6:	75 71                	jne    c0027249 <__divsf3+0x16d>
c00271d8:	85 c0                	test   eax,eax
c00271da:	ba 00 00 00 00       	mov    edx,0x0
c00271df:	74 2f                	je     c0027210 <__divsf3+0x134>
c00271e1:	51                   	push   ecx
c00271e2:	51                   	push   ecx
c00271e3:	52                   	push   edx
c00271e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271e7:	e8 f9 02 00 00       	call   c00274e5 <__eqsf2>
c00271ec:	83 c4 10             	add    esp,0x10
c00271ef:	85 c0                	test   eax,eax
c00271f1:	0f 85 03 01 00 00    	jne    c00272fa <__divsf3+0x21e>
c00271f7:	31 d2                	xor    edx,edx
c00271f9:	89 d3                	mov    ebx,edx
c00271fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271fe:	31 f8                	xor    eax,edi
c0027200:	0f 89 f7 00 00 00    	jns    c00272fd <__divsf3+0x221>
c0027206:	bb 00 00 00 80       	mov    ebx,0x80000000
c002720b:	e9 ed 00 00 00       	jmp    c00272fd <__divsf3+0x221>
c0027210:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027213:	50                   	push   eax
c0027214:	50                   	push   eax
c0027215:	52                   	push   edx
c0027216:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027219:	e8 c7 02 00 00       	call   c00274e5 <__eqsf2>
c002721e:	83 c4 10             	add    esp,0x10
c0027221:	85 c0                	test   eax,eax
c0027223:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027226:	75 16                	jne    c002723e <__divsf3+0x162>
c0027228:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002722b:	31 fb                	xor    ebx,edi
c002722d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027233:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027239:	e9 bf 00 00 00       	jmp    c00272fd <__divsf3+0x221>
c002723e:	8d 46 01             	lea    eax,[esi+0x1]
c0027241:	01 db                	add    ebx,ebx
c0027243:	78 04                	js     c0027249 <__divsf3+0x16d>
c0027245:	89 c6                	mov    esi,eax
c0027247:	eb f5                	jmp    c002723e <__divsf3+0x162>
c0027249:	89 c8                	mov    eax,ecx
c002724b:	0d 00 00 00 80       	or     eax,0x80000000
c0027250:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027256:	31 d2                	xor    edx,edx
c0027258:	39 d8                	cmp    eax,ebx
c002725a:	72 07                	jb     c0027263 <__divsf3+0x187>
c002725c:	29 d8                	sub    eax,ebx
c002725e:	ba 01 00 00 00       	mov    edx,0x1
c0027263:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002726a:	01 d2                	add    edx,edx
c002726c:	89 c1                	mov    ecx,eax
c002726e:	01 c0                	add    eax,eax
c0027270:	85 c9                	test   ecx,ecx
c0027272:	78 04                	js     c0027278 <__divsf3+0x19c>
c0027274:	39 c3                	cmp    ebx,eax
c0027276:	77 05                	ja     c002727d <__divsf3+0x1a1>
c0027278:	29 d8                	sub    eax,ebx
c002727a:	83 ca 01             	or     edx,0x1
c002727d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027280:	75 e8                	jne    c002726a <__divsf3+0x18e>
c0027282:	85 c0                	test   eax,eax
c0027284:	0f 95 c0             	setne  al
c0027287:	0f b6 c0             	movzx  eax,al
c002728a:	c1 e2 06             	shl    edx,0x6
c002728d:	09 c2                	or     edx,eax
c002728f:	78 03                	js     c0027294 <__divsf3+0x1b8>
c0027291:	01 d2                	add    edx,edx
c0027293:	4e                   	dec    esi
c0027294:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002729a:	7f 22                	jg     c00272be <__divsf3+0x1e2>
c002729c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272a2:	85 f6                	test   esi,esi
c00272a4:	7f 23                	jg     c00272c9 <__divsf3+0x1ed>
c00272a6:	83 fe e9             	cmp    esi,0xffffffe9
c00272a9:	7c 1a                	jl     c00272c5 <__divsf3+0x1e9>
c00272ab:	81 ca 00 00 00 80    	or     edx,0x80000000
c00272b1:	b9 01 00 00 00       	mov    ecx,0x1
c00272b6:	29 f1                	sub    ecx,esi
c00272b8:	d3 ea                	shr    edx,cl
c00272ba:	31 f6                	xor    esi,esi
c00272bc:	eb 0b                	jmp    c00272c9 <__divsf3+0x1ed>
c00272be:	be ff 00 00 00       	mov    esi,0xff
c00272c3:	eb 02                	jmp    c00272c7 <__divsf3+0x1eb>
c00272c5:	31 f6                	xor    esi,esi
c00272c7:	31 d2                	xor    edx,edx
c00272c9:	89 d0                	mov    eax,edx
c00272cb:	c1 e8 08             	shr    eax,0x8
c00272ce:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272d1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272d7:	09 fe                	or     esi,edi
c00272d9:	c1 e6 17             	shl    esi,0x17
c00272dc:	09 c6                	or     esi,eax
c00272de:	f6 c2 7f             	test   dl,0x7f
c00272e1:	0f 95 c1             	setne  cl
c00272e4:	09 c8                	or     eax,ecx
c00272e6:	83 e0 01             	and    eax,0x1
c00272e9:	c1 ea 07             	shr    edx,0x7
c00272ec:	21 c2                	and    edx,eax
c00272ee:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272f1:	eb 0a                	jmp    c00272fd <__divsf3+0x221>
c00272f3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272f8:	eb 03                	jmp    c00272fd <__divsf3+0x221>
c00272fa:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272fd:	89 d8                	mov    eax,ebx
c00272ff:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027302:	5b                   	pop    ebx
c0027303:	5e                   	pop    esi
c0027304:	5f                   	pop    edi
c0027305:	5d                   	pop    ebp
c0027306:	c3                   	ret    

c0027307 <__floatsisf>:
c0027307:	55                   	push   ebp
c0027308:	89 e5                	mov    ebp,esp
c002730a:	53                   	push   ebx
c002730b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002730e:	85 d2                	test   edx,edx
c0027310:	7e 2b                	jle    c002733d <__floatsisf+0x36>
c0027312:	0f bd ca             	bsr    ecx,edx
c0027315:	83 f1 1f             	xor    ecx,0x1f
c0027318:	d3 e2                	shl    edx,cl
c002731a:	89 d0                	mov    eax,edx
c002731c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027321:	89 c3                	mov    ebx,eax
c0027323:	c1 eb 08             	shr    ebx,0x8
c0027326:	80 e2 7f             	and    dl,0x7f
c0027329:	0f 95 c2             	setne  dl
c002732c:	09 da                	or     edx,ebx
c002732e:	83 e2 01             	and    edx,0x1
c0027331:	c1 e8 07             	shr    eax,0x7
c0027334:	21 c2                	and    edx,eax
c0027336:	b8 9e 00 00 00       	mov    eax,0x9e
c002733b:	eb 32                	jmp    c002736f <__floatsisf+0x68>
c002733d:	b8 00 00 00 00       	mov    eax,0x0
c0027342:	74 34                	je     c0027378 <__floatsisf+0x71>
c0027344:	f7 da                	neg    edx
c0027346:	0f bd ca             	bsr    ecx,edx
c0027349:	83 f1 1f             	xor    ecx,0x1f
c002734c:	d3 e2                	shl    edx,cl
c002734e:	89 d0                	mov    eax,edx
c0027350:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027355:	89 c3                	mov    ebx,eax
c0027357:	c1 eb 08             	shr    ebx,0x8
c002735a:	80 e2 7f             	and    dl,0x7f
c002735d:	0f 95 c2             	setne  dl
c0027360:	09 da                	or     edx,ebx
c0027362:	83 e2 01             	and    edx,0x1
c0027365:	c1 e8 07             	shr    eax,0x7
c0027368:	21 c2                	and    edx,eax
c002736a:	b8 9e 01 00 00       	mov    eax,0x19e
c002736f:	29 c8                	sub    eax,ecx
c0027371:	c1 e0 17             	shl    eax,0x17
c0027374:	09 d8                	or     eax,ebx
c0027376:	01 d0                	add    eax,edx
c0027378:	5b                   	pop    ebx
c0027379:	5d                   	pop    ebp
c002737a:	c3                   	ret    

c002737b <__floatunsisf>:
c002737b:	55                   	push   ebp
c002737c:	89 e5                	mov    ebp,esp
c002737e:	53                   	push   ebx
c002737f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027382:	31 c0                	xor    eax,eax
c0027384:	85 d2                	test   edx,edx
c0027386:	74 32                	je     c00273ba <__floatunsisf+0x3f>
c0027388:	0f bd ca             	bsr    ecx,edx
c002738b:	83 f1 1f             	xor    ecx,0x1f
c002738e:	d3 e2                	shl    edx,cl
c0027390:	89 d0                	mov    eax,edx
c0027392:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027397:	89 c3                	mov    ebx,eax
c0027399:	c1 eb 08             	shr    ebx,0x8
c002739c:	80 e2 7f             	and    dl,0x7f
c002739f:	0f 95 c2             	setne  dl
c00273a2:	09 da                	or     edx,ebx
c00273a4:	83 e2 01             	and    edx,0x1
c00273a7:	c1 e8 07             	shr    eax,0x7
c00273aa:	21 c2                	and    edx,eax
c00273ac:	b8 9e 00 00 00       	mov    eax,0x9e
c00273b1:	29 c8                	sub    eax,ecx
c00273b3:	c1 e0 17             	shl    eax,0x17
c00273b6:	09 d8                	or     eax,ebx
c00273b8:	01 d0                	add    eax,edx
c00273ba:	5b                   	pop    ebx
c00273bb:	5d                   	pop    ebp
c00273bc:	c3                   	ret    

c00273bd <__fixsfsi>:
c00273bd:	55                   	push   ebp
c00273be:	89 e5                	mov    ebp,esp
c00273c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273c3:	89 d1                	mov    ecx,edx
c00273c5:	c1 e1 08             	shl    ecx,0x8
c00273c8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273ce:	c1 fa 17             	sar    edx,0x17
c00273d1:	78 1c                	js     c00273ef <__fixsfsi+0x32>
c00273d3:	83 ea 7f             	sub    edx,0x7f
c00273d6:	31 c0                	xor    eax,eax
c00273d8:	83 fa 1e             	cmp    edx,0x1e
c00273db:	77 40                	ja     c002741d <__fixsfsi+0x60>
c00273dd:	89 c8                	mov    eax,ecx
c00273df:	0d 00 00 00 80       	or     eax,0x80000000
c00273e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273e9:	29 d1                	sub    ecx,edx
c00273eb:	d3 e8                	shr    eax,cl
c00273ed:	eb 2e                	jmp    c002741d <__fixsfsi+0x60>
c00273ef:	31 c0                	xor    eax,eax
c00273f1:	81 c2 81 00 00 00    	add    edx,0x81
c00273f7:	78 24                	js     c002741d <__fixsfsi+0x60>
c00273f9:	83 fa 1e             	cmp    edx,0x1e
c00273fc:	7e 09                	jle    c0027407 <__fixsfsi+0x4a>
c00273fe:	83 fa 1f             	cmp    edx,0x1f
c0027401:	75 18                	jne    c002741b <__fixsfsi+0x5e>
c0027403:	85 c9                	test   ecx,ecx
c0027405:	75 14                	jne    c002741b <__fixsfsi+0x5e>
c0027407:	89 c8                	mov    eax,ecx
c0027409:	0d 00 00 00 80       	or     eax,0x80000000
c002740e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027413:	29 d1                	sub    ecx,edx
c0027415:	d3 e8                	shr    eax,cl
c0027417:	f7 d8                	neg    eax
c0027419:	eb 02                	jmp    c002741d <__fixsfsi+0x60>
c002741b:	31 c0                	xor    eax,eax
c002741d:	5d                   	pop    ebp
c002741e:	c3                   	ret    

c002741f <__fixunssfsi>:
c002741f:	55                   	push   ebp
c0027420:	89 e5                	mov    ebp,esp
c0027422:	53                   	push   ebx
c0027423:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027426:	89 d3                	mov    ebx,edx
c0027428:	c1 fb 17             	sar    ebx,0x17
c002742b:	83 eb 7f             	sub    ebx,0x7f
c002742e:	31 c0                	xor    eax,eax
c0027430:	83 fb 1f             	cmp    ebx,0x1f
c0027433:	77 18                	ja     c002744d <__fixunssfsi+0x2e>
c0027435:	89 d0                	mov    eax,edx
c0027437:	c1 e0 08             	shl    eax,0x8
c002743a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002743f:	0d 00 00 00 80       	or     eax,0x80000000
c0027444:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027449:	29 d9                	sub    ecx,ebx
c002744b:	d3 e8                	shr    eax,cl
c002744d:	5b                   	pop    ebx
c002744e:	5d                   	pop    ebp
c002744f:	c3                   	ret    

c0027450 <__cmpsf2>:
c0027450:	55                   	push   ebp
c0027451:	89 e5                	mov    ebp,esp
c0027453:	57                   	push   edi
c0027454:	56                   	push   esi
c0027455:	53                   	push   ebx
c0027456:	83 ec 24             	sub    esp,0x24
c0027459:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002745c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002745f:	e8 4f 10 00 00       	call   c00284b3 <__truncdfsf2>
c0027464:	5a                   	pop    edx
c0027465:	59                   	pop    ecx
c0027466:	89 c3                	mov    ebx,eax
c0027468:	c1 e8 17             	shr    eax,0x17
c002746b:	0f b6 f0             	movzx  esi,al
c002746e:	89 d8                	mov    eax,ebx
c0027470:	c1 e8 1f             	shr    eax,0x1f
c0027473:	31 c6                	xor    esi,eax
c0027475:	c1 e3 08             	shl    ebx,0x8
c0027478:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002747b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002747e:	e8 30 10 00 00       	call   c00284b3 <__truncdfsf2>
c0027483:	83 c4 10             	add    esp,0x10
c0027486:	89 c1                	mov    ecx,eax
c0027488:	c1 e9 17             	shr    ecx,0x17
c002748b:	0f b6 c9             	movzx  ecx,cl
c002748e:	89 c7                	mov    edi,eax
c0027490:	c1 ef 1f             	shr    edi,0x1f
c0027493:	89 ca                	mov    edx,ecx
c0027495:	31 fa                	xor    edx,edi
c0027497:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002749a:	c1 e0 08             	shl    eax,0x8
c002749d:	89 c2                	mov    edx,eax
c002749f:	89 d8                	mov    eax,ebx
c00274a1:	09 d0                	or     eax,edx
c00274a3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274a8:	09 f0                	or     eax,esi
c00274aa:	75 08                	jne    c00274b4 <__cmpsf2+0x64>
c00274ac:	31 c0                	xor    eax,eax
c00274ae:	39 f9                	cmp    ecx,edi
c00274b0:	75 0c                	jne    c00274be <__cmpsf2+0x6e>
c00274b2:	eb 29                	jmp    c00274dd <__cmpsf2+0x8d>
c00274b4:	b8 01 00 00 00       	mov    eax,0x1
c00274b9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274bc:	7f 1f                	jg     c00274dd <__cmpsf2+0x8d>
c00274be:	83 c8 ff             	or     eax,0xffffffff
c00274c1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274c4:	7c 17                	jl     c00274dd <__cmpsf2+0x8d>
c00274c6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274cc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274d2:	b8 01 00 00 00       	mov    eax,0x1
c00274d7:	39 d3                	cmp    ebx,edx
c00274d9:	77 02                	ja     c00274dd <__cmpsf2+0x8d>
c00274db:	19 c0                	sbb    eax,eax
c00274dd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274e0:	5b                   	pop    ebx
c00274e1:	5e                   	pop    esi
c00274e2:	5f                   	pop    edi
c00274e3:	5d                   	pop    ebp
c00274e4:	c3                   	ret    

c00274e5 <__eqsf2>:
c00274e5:	55                   	push   ebp
c00274e6:	89 e5                	mov    ebp,esp
c00274e8:	83 ec 24             	sub    esp,0x24
c00274eb:	6a 01                	push   0x1
c00274ed:	83 ec 0c             	sub    esp,0xc
c00274f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274f3:	e8 df 10 00 00       	call   c00285d7 <__extendsfdf2>
c00274f8:	83 c4 10             	add    esp,0x10
c00274fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274fe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027501:	52                   	push   edx
c0027502:	50                   	push   eax
c0027503:	50                   	push   eax
c0027504:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027507:	e8 cb 10 00 00       	call   c00285d7 <__extendsfdf2>
c002750c:	59                   	pop    ecx
c002750d:	59                   	pop    ecx
c002750e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027511:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027514:	52                   	push   edx
c0027515:	50                   	push   eax
c0027516:	e8 35 ff ff ff       	call   c0027450 <__cmpsf2>
c002751b:	83 c4 20             	add    esp,0x20
c002751e:	c9                   	leave  
c002751f:	c3                   	ret    

c0027520 <__nesf2>:
c0027520:	eb c3                	jmp    c00274e5 <__eqsf2>

c0027522 <__gtsf2>:
c0027522:	55                   	push   ebp
c0027523:	89 e5                	mov    ebp,esp
c0027525:	83 ec 24             	sub    esp,0x24
c0027528:	6a ff                	push   0xffffffff
c002752a:	83 ec 0c             	sub    esp,0xc
c002752d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027530:	e8 a2 10 00 00       	call   c00285d7 <__extendsfdf2>
c0027535:	83 c4 10             	add    esp,0x10
c0027538:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002753b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002753e:	52                   	push   edx
c002753f:	50                   	push   eax
c0027540:	50                   	push   eax
c0027541:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027544:	e8 8e 10 00 00       	call   c00285d7 <__extendsfdf2>
c0027549:	59                   	pop    ecx
c002754a:	59                   	pop    ecx
c002754b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002754e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027551:	52                   	push   edx
c0027552:	50                   	push   eax
c0027553:	e8 f8 fe ff ff       	call   c0027450 <__cmpsf2>
c0027558:	83 c4 20             	add    esp,0x20
c002755b:	c9                   	leave  
c002755c:	c3                   	ret    

c002755d <__gesf2>:
c002755d:	eb c3                	jmp    c0027522 <__gtsf2>

c002755f <__ltsf2>:
c002755f:	eb 84                	jmp    c00274e5 <__eqsf2>

c0027561 <__lesf2>:
c0027561:	eb 82                	jmp    c00274e5 <__eqsf2>

c0027563 <__adddf3>:
c0027563:	55                   	push   ebp
c0027564:	89 e5                	mov    ebp,esp
c0027566:	57                   	push   edi
c0027567:	56                   	push   esi
c0027568:	53                   	push   ebx
c0027569:	83 ec 24             	sub    esp,0x24
c002756c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002756f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027572:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027575:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027578:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002757b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002757e:	89 c8                	mov    eax,ecx
c0027580:	89 ce                	mov    esi,ecx
c0027582:	c1 fe 14             	sar    esi,0x14
c0027585:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027588:	89 fb                	mov    ebx,edi
c002758a:	89 fa                	mov    edx,edi
c002758c:	c1 e2 0b             	shl    edx,0xb
c002758f:	c1 e0 0b             	shl    eax,0xb
c0027592:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027597:	c1 eb 15             	shr    ebx,0x15
c002759a:	09 d8                	or     eax,ebx
c002759c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002759f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00275a2:	c1 fe 14             	sar    esi,0x14
c00275a5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275a8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275ab:	89 f3                	mov    ebx,esi
c00275ad:	c1 e3 0b             	shl    ebx,0xb
c00275b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00275b3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275b6:	c1 e3 0b             	shl    ebx,0xb
c00275b9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00275bf:	c1 ee 15             	shr    esi,0x15
c00275c2:	09 f3                	or     ebx,esi
c00275c4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275c7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275ca:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275cd:	0f 88 5f 02 00 00    	js     c0027832 <__adddf3+0x2cf>
c00275d3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275d6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275d9:	85 db                	test   ebx,ebx
c00275db:	0f 8e c7 00 00 00    	jle    c00276a8 <__adddf3+0x145>
c00275e1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275e8:	75 1a                	jne    c0027604 <__adddf3+0xa1>
c00275ea:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275ed:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275f0:	0f 84 b2 05 00 00    	je     c0027ba8 <__adddf3+0x645>
c00275f6:	4b                   	dec    ebx
c00275f7:	75 23                	jne    c002761c <__adddf3+0xb9>
c00275f9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275fc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275ff:	e9 99 00 00 00       	jmp    c002769d <__adddf3+0x13a>
c0027604:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027607:	f7 d6                	not    esi
c0027609:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002760f:	0f 84 93 05 00 00    	je     c0027ba8 <__adddf3+0x645>
c0027615:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002761c:	83 fb 1f             	cmp    ebx,0x1f
c002761f:	7e 42                	jle    c0027663 <__adddf3+0x100>
c0027621:	83 fb 3f             	cmp    ebx,0x3f
c0027624:	0f 8f 7e 05 00 00    	jg     c0027ba8 <__adddf3+0x645>
c002762a:	83 e3 1f             	and    ebx,0x1f
c002762d:	89 d9                	mov    ecx,ebx
c002762f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027632:	d3 ef                	shr    edi,cl
c0027634:	31 db                	xor    ebx,ebx
c0027636:	85 c9                	test   ecx,ecx
c0027638:	74 15                	je     c002764f <__adddf3+0xec>
c002763a:	be 20 00 00 00       	mov    esi,0x20
c002763f:	29 ce                	sub    esi,ecx
c0027641:	89 f1                	mov    ecx,esi
c0027643:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027646:	d3 e6                	shl    esi,cl
c0027648:	31 db                	xor    ebx,ebx
c002764a:	85 f6                	test   esi,esi
c002764c:	0f 95 c3             	setne  bl
c002764f:	31 c9                	xor    ecx,ecx
c0027651:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027655:	0f 95 c1             	setne  cl
c0027658:	09 cf                	or     edi,ecx
c002765a:	09 fb                	or     ebx,edi
c002765c:	01 da                	add    edx,ebx
c002765e:	83 d0 00             	adc    eax,0x0
c0027661:	eb 3a                	jmp    c002769d <__adddf3+0x13a>
c0027663:	bf 20 00 00 00       	mov    edi,0x20
c0027668:	29 df                	sub    edi,ebx
c002766a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002766d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027670:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027673:	d3 e6                	shl    esi,cl
c0027675:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027678:	88 d9                	mov    cl,bl
c002767a:	d3 ef                	shr    edi,cl
c002767c:	09 fe                	or     esi,edi
c002767e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027681:	88 d9                	mov    cl,bl
c0027683:	d3 ef                	shr    edi,cl
c0027685:	89 fb                	mov    ebx,edi
c0027687:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002768a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002768d:	d3 e7                	shl    edi,cl
c002768f:	85 ff                	test   edi,edi
c0027691:	0f 95 c1             	setne  cl
c0027694:	0f b6 c9             	movzx  ecx,cl
c0027697:	09 ce                	or     esi,ecx
c0027699:	01 f2                	add    edx,esi
c002769b:	11 d8                	adc    eax,ebx
c002769d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276a3:	e9 52 01 00 00       	jmp    c00277fa <__adddf3+0x297>
c00276a8:	0f 84 d5 00 00 00    	je     c0027783 <__adddf3+0x220>
c00276ae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276b1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00276b4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276b7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276ba:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276c1:	75 20                	jne    c00276e3 <__adddf3+0x180>
c00276c3:	89 d6                	mov    esi,edx
c00276c5:	09 c6                	or     esi,eax
c00276c7:	0f 84 db 04 00 00    	je     c0027ba8 <__adddf3+0x645>
c00276cd:	4b                   	dec    ebx
c00276ce:	75 29                	jne    c00276f9 <__adddf3+0x196>
c00276d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276d6:	01 d1                	add    ecx,edx
c00276d8:	11 c6                	adc    esi,eax
c00276da:	89 f0                	mov    eax,esi
c00276dc:	89 ca                	mov    edx,ecx
c00276de:	e9 17 01 00 00       	jmp    c00277fa <__adddf3+0x297>
c00276e3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276e6:	f7 d6                	not    esi
c00276e8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276ee:	0f 84 b4 04 00 00    	je     c0027ba8 <__adddf3+0x645>
c00276f4:	0d 00 00 00 80       	or     eax,0x80000000
c00276f9:	83 fb 1f             	cmp    ebx,0x1f
c00276fc:	7e 48                	jle    c0027746 <__adddf3+0x1e3>
c00276fe:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027701:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027704:	83 fb 3f             	cmp    ebx,0x3f
c0027707:	0f 8f 9b 04 00 00    	jg     c0027ba8 <__adddf3+0x645>
c002770d:	83 e3 1f             	and    ebx,0x1f
c0027710:	89 d9                	mov    ecx,ebx
c0027712:	89 c7                	mov    edi,eax
c0027714:	d3 ef                	shr    edi,cl
c0027716:	31 db                	xor    ebx,ebx
c0027718:	85 c9                	test   ecx,ecx
c002771a:	74 12                	je     c002772e <__adddf3+0x1cb>
c002771c:	be 20 00 00 00       	mov    esi,0x20
c0027721:	29 ce                	sub    esi,ecx
c0027723:	89 f1                	mov    ecx,esi
c0027725:	d3 e0                	shl    eax,cl
c0027727:	31 db                	xor    ebx,ebx
c0027729:	85 c0                	test   eax,eax
c002772b:	0f 95 c3             	setne  bl
c002772e:	31 c0                	xor    eax,eax
c0027730:	85 d2                	test   edx,edx
c0027732:	0f 95 c0             	setne  al
c0027735:	09 c7                	or     edi,eax
c0027737:	09 fb                	or     ebx,edi
c0027739:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002773c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002773f:	01 da                	add    edx,ebx
c0027741:	83 d6 00             	adc    esi,0x0
c0027744:	eb 39                	jmp    c002777f <__adddf3+0x21c>
c0027746:	be 20 00 00 00       	mov    esi,0x20
c002774b:	29 de                	sub    esi,ebx
c002774d:	89 c7                	mov    edi,eax
c002774f:	89 f1                	mov    ecx,esi
c0027751:	d3 e7                	shl    edi,cl
c0027753:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027756:	89 d7                	mov    edi,edx
c0027758:	88 d9                	mov    cl,bl
c002775a:	d3 ef                	shr    edi,cl
c002775c:	89 f9                	mov    ecx,edi
c002775e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027761:	09 cf                	or     edi,ecx
c0027763:	88 d9                	mov    cl,bl
c0027765:	d3 e8                	shr    eax,cl
c0027767:	89 f1                	mov    ecx,esi
c0027769:	d3 e2                	shl    edx,cl
c002776b:	85 d2                	test   edx,edx
c002776d:	0f 95 c2             	setne  dl
c0027770:	0f b6 d2             	movzx  edx,dl
c0027773:	09 d7                	or     edi,edx
c0027775:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027778:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002777b:	01 fa                	add    edx,edi
c002777d:	11 c6                	adc    esi,eax
c002777f:	89 f0                	mov    eax,esi
c0027781:	eb 77                	jmp    c00277fa <__adddf3+0x297>
c0027783:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027786:	46                   	inc    esi
c0027787:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002778a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027790:	75 41                	jne    c00277d3 <__adddf3+0x270>
c0027792:	89 d3                	mov    ebx,edx
c0027794:	09 c3                	or     ebx,eax
c0027796:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002779d:	75 27                	jne    c00277c6 <__adddf3+0x263>
c002779f:	85 db                	test   ebx,ebx
c00277a1:	0f 84 fb 03 00 00    	je     c0027ba2 <__adddf3+0x63f>
c00277a7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277aa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277ad:	0f 84 f5 03 00 00    	je     c0027ba8 <__adddf3+0x645>
c00277b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277b9:	85 c0                	test   eax,eax
c00277bb:	0f 89 91 03 00 00    	jns    c0027b52 <__adddf3+0x5ef>
c00277c1:	e9 85 03 00 00       	jmp    c0027b4b <__adddf3+0x5e8>
c00277c6:	85 db                	test   ebx,ebx
c00277c8:	0f 85 da 03 00 00    	jne    c0027ba8 <__adddf3+0x645>
c00277ce:	e9 cf 03 00 00       	jmp    c0027ba2 <__adddf3+0x63f>
c00277d3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277d6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277dc:	f7 d1                	not    ecx
c00277de:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277e4:	0f 84 70 03 00 00    	je     c0027b5a <__adddf3+0x5f7>
c00277ea:	d1 ea                	shr    edx,1
c00277ec:	89 c1                	mov    ecx,eax
c00277ee:	c1 e1 1f             	shl    ecx,0x1f
c00277f1:	09 ca                	or     edx,ecx
c00277f3:	d1 e8                	shr    eax,1
c00277f5:	e9 6f 03 00 00       	jmp    c0027b69 <__adddf3+0x606>
c00277fa:	85 c0                	test   eax,eax
c00277fc:	0f 89 67 03 00 00    	jns    c0027b69 <__adddf3+0x606>
c0027802:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027805:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027808:	f7 d1                	not    ecx
c002780a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027810:	0f 84 44 03 00 00    	je     c0027b5a <__adddf3+0x5f7>
c0027816:	89 d1                	mov    ecx,edx
c0027818:	d1 e9                	shr    ecx,1
c002781a:	83 e2 01             	and    edx,0x1
c002781d:	09 ca                	or     edx,ecx
c002781f:	89 c1                	mov    ecx,eax
c0027821:	c1 e1 1f             	shl    ecx,0x1f
c0027824:	09 ca                	or     edx,ecx
c0027826:	d1 e8                	shr    eax,1
c0027828:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002782d:	e9 37 03 00 00       	jmp    c0027b69 <__adddf3+0x606>
c0027832:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027835:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002783b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002783e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027841:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027847:	29 de                	sub    esi,ebx
c0027849:	85 f6                	test   esi,esi
c002784b:	0f 8e bd 00 00 00    	jle    c002790e <__adddf3+0x3ab>
c0027851:	85 db                	test   ebx,ebx
c0027853:	75 17                	jne    c002786c <__adddf3+0x309>
c0027855:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027858:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002785b:	0f 84 47 03 00 00    	je     c0027ba8 <__adddf3+0x645>
c0027861:	4e                   	dec    esi
c0027862:	75 20                	jne    c0027884 <__adddf3+0x321>
c0027864:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027867:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002786a:	eb 5b                	jmp    c00278c7 <__adddf3+0x364>
c002786c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002786f:	f7 d3                	not    ebx
c0027871:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027877:	0f 84 2b 03 00 00    	je     c0027ba8 <__adddf3+0x645>
c002787d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027884:	83 fe 1f             	cmp    esi,0x1f
c0027887:	7e 49                	jle    c00278d2 <__adddf3+0x36f>
c0027889:	83 fe 3f             	cmp    esi,0x3f
c002788c:	0f 8f 16 03 00 00    	jg     c0027ba8 <__adddf3+0x645>
c0027892:	83 e6 1f             	and    esi,0x1f
c0027895:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027898:	89 f1                	mov    ecx,esi
c002789a:	d3 ef                	shr    edi,cl
c002789c:	31 db                	xor    ebx,ebx
c002789e:	85 f6                	test   esi,esi
c00278a0:	74 13                	je     c00278b5 <__adddf3+0x352>
c00278a2:	b9 20 00 00 00       	mov    ecx,0x20
c00278a7:	29 f1                	sub    ecx,esi
c00278a9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278ac:	d3 e6                	shl    esi,cl
c00278ae:	31 db                	xor    ebx,ebx
c00278b0:	85 f6                	test   esi,esi
c00278b2:	0f 95 c3             	setne  bl
c00278b5:	31 c9                	xor    ecx,ecx
c00278b7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278bb:	0f 95 c1             	setne  cl
c00278be:	09 cf                	or     edi,ecx
c00278c0:	09 fb                	or     ebx,edi
c00278c2:	29 da                	sub    edx,ebx
c00278c4:	83 d8 00             	sbb    eax,0x0
c00278c7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278ca:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278cd:	e9 aa 01 00 00       	jmp    c0027a7c <__adddf3+0x519>
c00278d2:	bf 20 00 00 00       	mov    edi,0x20
c00278d7:	29 f7                	sub    edi,esi
c00278d9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278dc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278df:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278e2:	d3 e3                	shl    ebx,cl
c00278e4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278e7:	89 f1                	mov    ecx,esi
c00278e9:	d3 ef                	shr    edi,cl
c00278eb:	09 fb                	or     ebx,edi
c00278ed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278f0:	89 f1                	mov    ecx,esi
c00278f2:	d3 ef                	shr    edi,cl
c00278f4:	89 fe                	mov    esi,edi
c00278f6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278f9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278fc:	d3 e7                	shl    edi,cl
c00278fe:	85 ff                	test   edi,edi
c0027900:	0f 95 c1             	setne  cl
c0027903:	0f b6 c9             	movzx  ecx,cl
c0027906:	09 cb                	or     ebx,ecx
c0027908:	29 da                	sub    edx,ebx
c002790a:	19 f0                	sbb    eax,esi
c002790c:	eb b9                	jmp    c00278c7 <__adddf3+0x364>
c002790e:	0f 84 cd 00 00 00    	je     c00279e1 <__adddf3+0x47e>
c0027914:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027917:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002791a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002791d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027921:	75 1b                	jne    c002793e <__adddf3+0x3db>
c0027923:	89 d6                	mov    esi,edx
c0027925:	09 c6                	or     esi,eax
c0027927:	0f 84 7b 02 00 00    	je     c0027ba8 <__adddf3+0x645>
c002792d:	4b                   	dec    ebx
c002792e:	75 24                	jne    c0027954 <__adddf3+0x3f1>
c0027930:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027933:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027936:	29 d1                	sub    ecx,edx
c0027938:	19 c6                	sbb    esi,eax
c002793a:	89 ca                	mov    edx,ecx
c002793c:	eb 61                	jmp    c002799f <__adddf3+0x43c>
c002793e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027941:	f7 d6                	not    esi
c0027943:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027949:	0f 84 59 02 00 00    	je     c0027ba8 <__adddf3+0x645>
c002794f:	0d 00 00 00 80       	or     eax,0x80000000
c0027954:	83 fb 1f             	cmp    ebx,0x1f
c0027957:	7e 4d                	jle    c00279a6 <__adddf3+0x443>
c0027959:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002795c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002795f:	83 fb 3f             	cmp    ebx,0x3f
c0027962:	0f 8f 40 02 00 00    	jg     c0027ba8 <__adddf3+0x645>
c0027968:	83 e3 1f             	and    ebx,0x1f
c002796b:	89 d9                	mov    ecx,ebx
c002796d:	89 c7                	mov    edi,eax
c002796f:	d3 ef                	shr    edi,cl
c0027971:	31 db                	xor    ebx,ebx
c0027973:	85 c9                	test   ecx,ecx
c0027975:	74 12                	je     c0027989 <__adddf3+0x426>
c0027977:	be 20 00 00 00       	mov    esi,0x20
c002797c:	29 ce                	sub    esi,ecx
c002797e:	89 f1                	mov    ecx,esi
c0027980:	d3 e0                	shl    eax,cl
c0027982:	31 db                	xor    ebx,ebx
c0027984:	85 c0                	test   eax,eax
c0027986:	0f 95 c3             	setne  bl
c0027989:	31 c0                	xor    eax,eax
c002798b:	85 d2                	test   edx,edx
c002798d:	0f 95 c0             	setne  al
c0027990:	09 c7                	or     edi,eax
c0027992:	09 fb                	or     ebx,edi
c0027994:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027997:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002799a:	29 da                	sub    edx,ebx
c002799c:	83 de 00             	sbb    esi,0x0
c002799f:	89 f0                	mov    eax,esi
c00279a1:	e9 d6 00 00 00       	jmp    c0027a7c <__adddf3+0x519>
c00279a6:	be 20 00 00 00       	mov    esi,0x20
c00279ab:	29 de                	sub    esi,ebx
c00279ad:	89 c7                	mov    edi,eax
c00279af:	89 f1                	mov    ecx,esi
c00279b1:	d3 e7                	shl    edi,cl
c00279b3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279b6:	89 d7                	mov    edi,edx
c00279b8:	88 d9                	mov    cl,bl
c00279ba:	d3 ef                	shr    edi,cl
c00279bc:	89 f9                	mov    ecx,edi
c00279be:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279c1:	09 cf                	or     edi,ecx
c00279c3:	88 d9                	mov    cl,bl
c00279c5:	d3 e8                	shr    eax,cl
c00279c7:	89 f1                	mov    ecx,esi
c00279c9:	d3 e2                	shl    edx,cl
c00279cb:	85 d2                	test   edx,edx
c00279cd:	0f 95 c2             	setne  dl
c00279d0:	0f b6 d2             	movzx  edx,dl
c00279d3:	09 d7                	or     edi,edx
c00279d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279d8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279db:	29 fa                	sub    edx,edi
c00279dd:	19 c6                	sbb    esi,eax
c00279df:	eb be                	jmp    c002799f <__adddf3+0x43c>
c00279e1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279e4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279e7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279ed:	75 6a                	jne    c0027a59 <__adddf3+0x4f6>
c00279ef:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279f3:	75 58                	jne    c0027a4d <__adddf3+0x4ea>
c00279f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279fb:	89 d6                	mov    esi,edx
c00279fd:	09 c6                	or     esi,eax
c00279ff:	75 17                	jne    c0027a18 <__adddf3+0x4b5>
c0027a01:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a04:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a07:	85 db                	test   ebx,ebx
c0027a09:	0f 85 99 01 00 00    	jne    c0027ba8 <__adddf3+0x645>
c0027a0f:	31 ff                	xor    edi,edi
c0027a11:	31 c9                	xor    ecx,ecx
c0027a13:	e9 90 01 00 00       	jmp    c0027ba8 <__adddf3+0x645>
c0027a18:	85 db                	test   ebx,ebx
c0027a1a:	0f 84 88 01 00 00    	je     c0027ba8 <__adddf3+0x645>
c0027a20:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a23:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a26:	85 c0                	test   eax,eax
c0027a28:	79 10                	jns    c0027a3a <__adddf3+0x4d7>
c0027a2a:	31 c9                	xor    ecx,ecx
c0027a2c:	f7 da                	neg    edx
c0027a2e:	0f 95 c1             	setne  cl
c0027a31:	01 c8                	add    eax,ecx
c0027a33:	f7 d8                	neg    eax
c0027a35:	e9 2f 01 00 00       	jmp    c0027b69 <__adddf3+0x606>
c0027a3a:	31 ff                	xor    edi,edi
c0027a3c:	31 c9                	xor    ecx,ecx
c0027a3e:	89 c3                	mov    ebx,eax
c0027a40:	09 d3                	or     ebx,edx
c0027a42:	0f 84 60 01 00 00    	je     c0027ba8 <__adddf3+0x645>
c0027a48:	e9 05 01 00 00       	jmp    c0027b52 <__adddf3+0x5ef>
c0027a4d:	31 ff                	xor    edi,edi
c0027a4f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a54:	e9 4f 01 00 00       	jmp    c0027ba8 <__adddf3+0x645>
c0027a59:	89 c1                	mov    ecx,eax
c0027a5b:	89 d0                	mov    eax,edx
c0027a5d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a60:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a63:	89 ca                	mov    edx,ecx
c0027a65:	85 c9                	test   ecx,ecx
c0027a67:	79 2c                	jns    c0027a95 <__adddf3+0x532>
c0027a69:	31 c9                	xor    ecx,ecx
c0027a6b:	f7 d8                	neg    eax
c0027a6d:	0f 95 c1             	setne  cl
c0027a70:	01 ca                	add    edx,ecx
c0027a72:	f7 da                	neg    edx
c0027a74:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a77:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a7a:	eb 19                	jmp    c0027a95 <__adddf3+0x532>
c0027a7c:	85 c0                	test   eax,eax
c0027a7e:	0f 89 e5 00 00 00    	jns    c0027b69 <__adddf3+0x606>
c0027a84:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a89:	89 c1                	mov    ecx,eax
c0027a8b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a8e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a91:	89 d0                	mov    eax,edx
c0027a93:	89 ca                	mov    edx,ecx
c0027a95:	85 d2                	test   edx,edx
c0027a97:	74 59                	je     c0027af2 <__adddf3+0x58f>
c0027a99:	0f bd da             	bsr    ebx,edx
c0027a9c:	83 f3 1f             	xor    ebx,0x1f
c0027a9f:	88 d9                	mov    cl,bl
c0027aa1:	d3 e2                	shl    edx,cl
c0027aa3:	bf 20 00 00 00       	mov    edi,0x20
c0027aa8:	89 f9                	mov    ecx,edi
c0027aaa:	29 d9                	sub    ecx,ebx
c0027aac:	89 c6                	mov    esi,eax
c0027aae:	d3 ee                	shr    esi,cl
c0027ab0:	09 d6                	or     esi,edx
c0027ab2:	88 d9                	mov    cl,bl
c0027ab4:	d3 e0                	shl    eax,cl
c0027ab6:	89 c2                	mov    edx,eax
c0027ab8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027abb:	25 ff 07 00 00       	and    eax,0x7ff
c0027ac0:	39 d8                	cmp    eax,ebx
c0027ac2:	7f 22                	jg     c0027ae6 <__adddf3+0x583>
c0027ac4:	29 c3                	sub    ebx,eax
c0027ac6:	43                   	inc    ebx
c0027ac7:	88 d9                	mov    cl,bl
c0027ac9:	d3 ea                	shr    edx,cl
c0027acb:	29 df                	sub    edi,ebx
c0027acd:	89 f9                	mov    ecx,edi
c0027acf:	89 f0                	mov    eax,esi
c0027ad1:	d3 e0                	shl    eax,cl
c0027ad3:	09 c2                	or     edx,eax
c0027ad5:	89 f0                	mov    eax,esi
c0027ad7:	88 d9                	mov    cl,bl
c0027ad9:	d3 e8                	shr    eax,cl
c0027adb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ade:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ae4:	eb 6f                	jmp    c0027b55 <__adddf3+0x5f2>
c0027ae6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ae9:	29 d8                	sub    eax,ebx
c0027aeb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027aee:	89 f0                	mov    eax,esi
c0027af0:	eb 59                	jmp    c0027b4b <__adddf3+0x5e8>
c0027af2:	85 c0                	test   eax,eax
c0027af4:	74 6a                	je     c0027b60 <__adddf3+0x5fd>
c0027af6:	0f bd c8             	bsr    ecx,eax
c0027af9:	83 f1 1f             	xor    ecx,0x1f
c0027afc:	d3 e0                	shl    eax,cl
c0027afe:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b01:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b07:	83 c1 20             	add    ecx,0x20
c0027b0a:	39 cb                	cmp    ebx,ecx
c0027b0c:	7f 35                	jg     c0027b43 <__adddf3+0x5e0>
c0027b0e:	29 d9                	sub    ecx,ebx
c0027b10:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b13:	83 fe 1f             	cmp    esi,0x1f
c0027b16:	7e 09                	jle    c0027b21 <__adddf3+0x5be>
c0027b18:	83 e9 1f             	sub    ecx,0x1f
c0027b1b:	d3 e8                	shr    eax,cl
c0027b1d:	89 c3                	mov    ebx,eax
c0027b1f:	eb 11                	jmp    c0027b32 <__adddf3+0x5cf>
c0027b21:	b9 20 00 00 00       	mov    ecx,0x20
c0027b26:	29 f1                	sub    ecx,esi
c0027b28:	89 c3                	mov    ebx,eax
c0027b2a:	d3 e3                	shl    ebx,cl
c0027b2c:	89 f1                	mov    ecx,esi
c0027b2e:	d3 e8                	shr    eax,cl
c0027b30:	89 c2                	mov    edx,eax
c0027b32:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b35:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b3a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b3d:	89 d0                	mov    eax,edx
c0027b3f:	89 da                	mov    edx,ebx
c0027b41:	eb 26                	jmp    c0027b69 <__adddf3+0x606>
c0027b43:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b46:	29 cf                	sub    edi,ecx
c0027b48:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b4b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b50:	eb 17                	jmp    c0027b69 <__adddf3+0x606>
c0027b52:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b55:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b58:	eb 0f                	jmp    c0027b69 <__adddf3+0x606>
c0027b5a:	31 d2                	xor    edx,edx
c0027b5c:	31 c0                	xor    eax,eax
c0027b5e:	eb 09                	jmp    c0027b69 <__adddf3+0x606>
c0027b60:	89 c2                	mov    edx,eax
c0027b62:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b69:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b6c:	c1 e1 14             	shl    ecx,0x14
c0027b6f:	89 c3                	mov    ebx,eax
c0027b71:	c1 eb 0b             	shr    ebx,0xb
c0027b74:	09 d9                	or     ecx,ebx
c0027b76:	89 d3                	mov    ebx,edx
c0027b78:	c1 eb 0b             	shr    ebx,0xb
c0027b7b:	c1 e0 15             	shl    eax,0x15
c0027b7e:	09 d8                	or     eax,ebx
c0027b80:	89 c7                	mov    edi,eax
c0027b82:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b88:	0f 95 c0             	setne  al
c0027b8b:	89 c6                	mov    esi,eax
c0027b8d:	09 f3                	or     ebx,esi
c0027b8f:	83 e3 01             	and    ebx,0x1
c0027b92:	c1 ea 0a             	shr    edx,0xa
c0027b95:	21 da                	and    edx,ebx
c0027b97:	89 f8                	mov    eax,edi
c0027b99:	01 d0                	add    eax,edx
c0027b9b:	83 d1 00             	adc    ecx,0x0
c0027b9e:	89 c7                	mov    edi,eax
c0027ba0:	eb 06                	jmp    c0027ba8 <__adddf3+0x645>
c0027ba2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ba5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ba8:	89 f8                	mov    eax,edi
c0027baa:	89 ca                	mov    edx,ecx
c0027bac:	83 c4 24             	add    esp,0x24
c0027baf:	5b                   	pop    ebx
c0027bb0:	5e                   	pop    esi
c0027bb1:	5f                   	pop    edi
c0027bb2:	5d                   	pop    ebp
c0027bb3:	c3                   	ret    

c0027bb4 <__subdf3>:
c0027bb4:	55                   	push   ebp
c0027bb5:	89 e5                	mov    ebp,esp
c0027bb7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bba:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027bbd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bc3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027bc6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027bc9:	5d                   	pop    ebp
c0027bca:	e9 94 f9 ff ff       	jmp    c0027563 <__adddf3>

c0027bcf <__negdf2>:
c0027bcf:	55                   	push   ebp
c0027bd0:	89 e5                	mov    ebp,esp
c0027bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bd5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bd8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bde:	5d                   	pop    ebp
c0027bdf:	c3                   	ret    

c0027be0 <__muldf3>:
c0027be0:	55                   	push   ebp
c0027be1:	89 e5                	mov    ebp,esp
c0027be3:	57                   	push   edi
c0027be4:	56                   	push   esi
c0027be5:	53                   	push   ebx
c0027be6:	83 ec 24             	sub    esp,0x24
c0027be9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bf2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bf5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027bf8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027bfb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bfe:	89 c8                	mov    eax,ecx
c0027c00:	c1 f8 14             	sar    eax,0x14
c0027c03:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c06:	89 f8                	mov    eax,edi
c0027c08:	89 fb                	mov    ebx,edi
c0027c0a:	c1 e3 0b             	shl    ebx,0xb
c0027c0d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c10:	c1 e1 0b             	shl    ecx,0xb
c0027c13:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c19:	c1 e8 15             	shr    eax,0x15
c0027c1c:	09 c1                	or     ecx,eax
c0027c1e:	89 d6                	mov    esi,edx
c0027c20:	89 d0                	mov    eax,edx
c0027c22:	c1 f8 14             	sar    eax,0x14
c0027c25:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c28:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c2b:	89 c3                	mov    ebx,eax
c0027c2d:	c1 e3 0b             	shl    ebx,0xb
c0027c30:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c33:	c1 e6 0b             	shl    esi,0xb
c0027c36:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c3c:	c1 e8 15             	shr    eax,0x15
c0027c3f:	09 c6                	or     esi,eax
c0027c41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c44:	25 ff 07 00 00       	and    eax,0x7ff
c0027c49:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c4c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c4f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c54:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c57:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c5a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c5d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c64:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c67:	40                   	inc    eax
c0027c68:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c6d:	0f 85 8d 00 00 00    	jne    c0027d00 <__muldf3+0x120>
c0027c73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c76:	09 c8                	or     eax,ecx
c0027c78:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c7c:	74 44                	je     c0027cc2 <__muldf3+0xe2>
c0027c7e:	85 c0                	test   eax,eax
c0027c80:	0f 85 31 02 00 00    	jne    c0027eb7 <__muldf3+0x2d7>
c0027c86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c89:	40                   	inc    eax
c0027c8a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c8f:	75 13                	jne    c0027ca4 <__muldf3+0xc4>
c0027c91:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c94:	09 f1                	or     ecx,esi
c0027c96:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c9a:	74 22                	je     c0027cbe <__muldf3+0xde>
c0027c9c:	85 c9                	test   ecx,ecx
c0027c9e:	0f 85 0d 02 00 00    	jne    c0027eb1 <__muldf3+0x2d1>
c0027ca4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027ca8:	0f 89 09 02 00 00    	jns    c0027eb7 <__muldf3+0x2d7>
c0027cae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cb1:	05 00 00 00 80       	add    eax,0x80000000
c0027cb6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cb9:	e9 f9 01 00 00       	jmp    c0027eb7 <__muldf3+0x2d7>
c0027cbe:	85 c9                	test   ecx,ecx
c0027cc0:	eb 2e                	jmp    c0027cf0 <__muldf3+0x110>
c0027cc2:	85 c0                	test   eax,eax
c0027cc4:	74 20                	je     c0027ce6 <__muldf3+0x106>
c0027cc6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027cc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ccc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ccf:	c1 ef 1f             	shr    edi,0x1f
c0027cd2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027cd5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027cd8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cdb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cde:	09 f9                	or     ecx,edi
c0027ce0:	78 1e                	js     c0027d00 <__muldf3+0x120>
c0027ce2:	89 c3                	mov    ebx,eax
c0027ce4:	eb e0                	jmp    c0027cc6 <__muldf3+0xe6>
c0027ce6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ce9:	f7 d0                	not    eax
c0027ceb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027cf0:	75 b2                	jne    c0027ca4 <__muldf3+0xc4>
c0027cf2:	31 ff                	xor    edi,edi
c0027cf4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027cfb:	e9 b7 01 00 00       	jmp    c0027eb7 <__muldf3+0x2d7>
c0027d00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d03:	40                   	inc    eax
c0027d04:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d09:	75 57                	jne    c0027d62 <__muldf3+0x182>
c0027d0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d0e:	09 f0                	or     eax,esi
c0027d10:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d14:	74 23                	je     c0027d39 <__muldf3+0x159>
c0027d16:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d1a:	0f 89 91 01 00 00    	jns    c0027eb1 <__muldf3+0x2d1>
c0027d20:	85 c0                	test   eax,eax
c0027d22:	0f 85 89 01 00 00    	jne    c0027eb1 <__muldf3+0x2d1>
c0027d28:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d2b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d34:	e9 7e 01 00 00       	jmp    c0027eb7 <__muldf3+0x2d7>
c0027d39:	85 c0                	test   eax,eax
c0027d3b:	75 0c                	jne    c0027d49 <__muldf3+0x169>
c0027d3d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d41:	0f 89 6a 01 00 00    	jns    c0027eb1 <__muldf3+0x2d1>
c0027d47:	eb df                	jmp    c0027d28 <__muldf3+0x148>
c0027d49:	01 f6                	add    esi,esi
c0027d4b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d4e:	c1 ea 1f             	shr    edx,0x1f
c0027d51:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d54:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d57:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d5a:	09 d6                	or     esi,edx
c0027d5c:	78 04                	js     c0027d62 <__muldf3+0x182>
c0027d5e:	89 c3                	mov    ebx,eax
c0027d60:	eb e7                	jmp    c0027d49 <__muldf3+0x169>
c0027d62:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d68:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d6e:	89 c8                	mov    eax,ecx
c0027d70:	f7 e6                	mul    esi
c0027d72:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d75:	89 c7                	mov    edi,eax
c0027d77:	89 c8                	mov    eax,ecx
c0027d79:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d7c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d7f:	89 c1                	mov    ecx,eax
c0027d81:	89 f0                	mov    eax,esi
c0027d83:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d86:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d89:	89 c6                	mov    esi,eax
c0027d8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d8e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d91:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d94:	31 c0                	xor    eax,eax
c0027d96:	01 f1                	add    ecx,esi
c0027d98:	0f 92 c0             	setb   al
c0027d9b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d9e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027da1:	83 d6 00             	adc    esi,0x0
c0027da4:	01 c7                	add    edi,eax
c0027da6:	83 d6 00             	adc    esi,0x0
c0027da9:	01 ca                	add    edx,ecx
c0027dab:	0f 92 c1             	setb   cl
c0027dae:	0f b6 c9             	movzx  ecx,cl
c0027db1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027db4:	83 d6 00             	adc    esi,0x0
c0027db7:	01 cf                	add    edi,ecx
c0027db9:	83 d6 00             	adc    esi,0x0
c0027dbc:	31 c9                	xor    ecx,ecx
c0027dbe:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027dc1:	0f 95 c1             	setne  cl
c0027dc4:	09 cf                	or     edi,ecx
c0027dc6:	85 f6                	test   esi,esi
c0027dc8:	78 0c                	js     c0027dd6 <__muldf3+0x1f6>
c0027dca:	01 f6                	add    esi,esi
c0027dcc:	89 f8                	mov    eax,edi
c0027dce:	c1 e8 1f             	shr    eax,0x1f
c0027dd1:	09 c6                	or     esi,eax
c0027dd3:	01 ff                	add    edi,edi
c0027dd5:	4b                   	dec    ebx
c0027dd6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027ddc:	0f 8f 85 00 00 00    	jg     c0027e67 <__muldf3+0x287>
c0027de2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027de8:	85 db                	test   ebx,ebx
c0027dea:	0f 8f 84 00 00 00    	jg     c0027e74 <__muldf3+0x294>
c0027df0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027df3:	7c 79                	jl     c0027e6e <__muldf3+0x28e>
c0027df5:	ba 01 00 00 00       	mov    edx,0x1
c0027dfa:	29 da                	sub    edx,ebx
c0027dfc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e02:	83 fa 1f             	cmp    edx,0x1f
c0027e05:	7e 30                	jle    c0027e37 <__muldf3+0x257>
c0027e07:	83 fa 20             	cmp    edx,0x20
c0027e0a:	75 0b                	jne    c0027e17 <__muldf3+0x237>
c0027e0c:	31 c0                	xor    eax,eax
c0027e0e:	85 ff                	test   edi,edi
c0027e10:	0f 95 c0             	setne  al
c0027e13:	89 c7                	mov    edi,eax
c0027e15:	eb 1a                	jmp    c0027e31 <__muldf3+0x251>
c0027e17:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e1a:	89 f0                	mov    eax,esi
c0027e1c:	d3 e0                	shl    eax,cl
c0027e1e:	09 f8                	or     eax,edi
c0027e20:	0f 95 c0             	setne  al
c0027e23:	0f b6 c0             	movzx  eax,al
c0027e26:	89 c7                	mov    edi,eax
c0027e28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e2d:	29 d9                	sub    ecx,ebx
c0027e2f:	d3 ee                	shr    esi,cl
c0027e31:	09 f7                	or     edi,esi
c0027e33:	31 db                	xor    ebx,ebx
c0027e35:	eb 3b                	jmp    c0027e72 <__muldf3+0x292>
c0027e37:	83 c3 1f             	add    ebx,0x1f
c0027e3a:	89 f0                	mov    eax,esi
c0027e3c:	88 d9                	mov    cl,bl
c0027e3e:	d3 e0                	shl    eax,cl
c0027e40:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e43:	89 f8                	mov    eax,edi
c0027e45:	88 d1                	mov    cl,dl
c0027e47:	d3 e8                	shr    eax,cl
c0027e49:	89 c1                	mov    ecx,eax
c0027e4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e4e:	09 c8                	or     eax,ecx
c0027e50:	88 d9                	mov    cl,bl
c0027e52:	d3 e7                	shl    edi,cl
c0027e54:	31 db                	xor    ebx,ebx
c0027e56:	85 ff                	test   edi,edi
c0027e58:	0f 95 c3             	setne  bl
c0027e5b:	89 df                	mov    edi,ebx
c0027e5d:	09 c7                	or     edi,eax
c0027e5f:	88 d1                	mov    cl,dl
c0027e61:	d3 ee                	shr    esi,cl
c0027e63:	31 db                	xor    ebx,ebx
c0027e65:	eb 0d                	jmp    c0027e74 <__muldf3+0x294>
c0027e67:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e6c:	eb 02                	jmp    c0027e70 <__muldf3+0x290>
c0027e6e:	31 db                	xor    ebx,ebx
c0027e70:	31 ff                	xor    edi,edi
c0027e72:	31 f6                	xor    esi,esi
c0027e74:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e77:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e7a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e7f:	09 c3                	or     ebx,eax
c0027e81:	c1 e3 14             	shl    ebx,0x14
c0027e84:	89 f0                	mov    eax,esi
c0027e86:	c1 e8 0b             	shr    eax,0xb
c0027e89:	09 c3                	or     ebx,eax
c0027e8b:	89 f8                	mov    eax,edi
c0027e8d:	c1 e8 0b             	shr    eax,0xb
c0027e90:	c1 e6 15             	shl    esi,0x15
c0027e93:	09 c6                	or     esi,eax
c0027e95:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e9b:	0f 95 c1             	setne  cl
c0027e9e:	09 c8                	or     eax,ecx
c0027ea0:	83 e0 01             	and    eax,0x1
c0027ea3:	c1 ef 0a             	shr    edi,0xa
c0027ea6:	21 c7                	and    edi,eax
c0027ea8:	01 f7                	add    edi,esi
c0027eaa:	83 d3 00             	adc    ebx,0x0
c0027ead:	89 da                	mov    edx,ebx
c0027eaf:	eb 03                	jmp    c0027eb4 <__muldf3+0x2d4>
c0027eb1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027eb4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027eb7:	89 f8                	mov    eax,edi
c0027eb9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027ebc:	83 c4 24             	add    esp,0x24
c0027ebf:	5b                   	pop    ebx
c0027ec0:	5e                   	pop    esi
c0027ec1:	5f                   	pop    edi
c0027ec2:	5d                   	pop    ebp
c0027ec3:	c3                   	ret    

c0027ec4 <__divdf3>:
c0027ec4:	55                   	push   ebp
c0027ec5:	89 e5                	mov    ebp,esp
c0027ec7:	57                   	push   edi
c0027ec8:	56                   	push   esi
c0027ec9:	53                   	push   ebx
c0027eca:	83 ec 2c             	sub    esp,0x2c
c0027ecd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ed0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ed3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ed6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ed9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027edc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027edf:	89 ce                	mov    esi,ecx
c0027ee1:	89 c8                	mov    eax,ecx
c0027ee3:	c1 f8 14             	sar    eax,0x14
c0027ee6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ee9:	89 f8                	mov    eax,edi
c0027eeb:	89 fb                	mov    ebx,edi
c0027eed:	c1 e3 0b             	shl    ebx,0xb
c0027ef0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ef3:	c1 e6 0b             	shl    esi,0xb
c0027ef6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027efc:	c1 e8 15             	shr    eax,0x15
c0027eff:	09 c6                	or     esi,eax
c0027f01:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f04:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f07:	89 c2                	mov    edx,eax
c0027f09:	c1 fa 14             	sar    edx,0x14
c0027f0c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f0f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f12:	89 de                	mov    esi,ebx
c0027f14:	c1 e6 0b             	shl    esi,0xb
c0027f17:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f1a:	c1 e0 0b             	shl    eax,0xb
c0027f1d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f22:	c1 eb 15             	shr    ebx,0x15
c0027f25:	09 d8                	or     eax,ebx
c0027f27:	89 c2                	mov    edx,eax
c0027f29:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f2c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f31:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f34:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f37:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f3d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f40:	29 d8                	sub    eax,ebx
c0027f42:	05 ff 03 00 00       	add    eax,0x3ff
c0027f47:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f4a:	46                   	inc    esi
c0027f4b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f51:	0f 85 a5 00 00 00    	jne    c0027ffc <__divdf3+0x138>
c0027f57:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f5a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f5d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f61:	74 2a                	je     c0027f8d <__divdf3+0xc9>
c0027f63:	85 f6                	test   esi,esi
c0027f65:	0f 85 cc 02 00 00    	jne    c0028237 <__divdf3+0x373>
c0027f6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f6e:	40                   	inc    eax
c0027f6f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f74:	75 26                	jne    c0027f9c <__divdf3+0xd8>
c0027f76:	85 db                	test   ebx,ebx
c0027f78:	74 22                	je     c0027f9c <__divdf3+0xd8>
c0027f7a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f7d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f80:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f83:	09 d0                	or     eax,edx
c0027f85:	0f 85 ac 02 00 00    	jne    c0028237 <__divdf3+0x373>
c0027f8b:	eb 63                	jmp    c0027ff0 <__divdf3+0x12c>
c0027f8d:	85 f6                	test   esi,esi
c0027f8f:	75 22                	jne    c0027fb3 <__divdf3+0xef>
c0027f91:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f94:	40                   	inc    eax
c0027f95:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f9a:	74 36                	je     c0027fd2 <__divdf3+0x10e>
c0027f9c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027fa0:	0f 89 91 02 00 00    	jns    c0028237 <__divdf3+0x373>
c0027fa6:	89 f8                	mov    eax,edi
c0027fa8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fae:	e9 80 02 00 00       	jmp    c0028233 <__divdf3+0x36f>
c0027fb3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fb6:	01 f6                	add    esi,esi
c0027fb8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fbb:	c1 ef 1f             	shr    edi,0x1f
c0027fbe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fc1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fc4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fc7:	09 f7                	or     edi,esi
c0027fc9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fcc:	78 2e                	js     c0027ffc <__divdf3+0x138>
c0027fce:	89 c8                	mov    eax,ecx
c0027fd0:	eb e1                	jmp    c0027fb3 <__divdf3+0xef>
c0027fd2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fd5:	09 d0                	or     eax,edx
c0027fd7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fdb:	74 0f                	je     c0027fec <__divdf3+0x128>
c0027fdd:	85 c0                	test   eax,eax
c0027fdf:	74 bb                	je     c0027f9c <__divdf3+0xd8>
c0027fe1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fe4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fe7:	e9 4b 02 00 00       	jmp    c0028237 <__divdf3+0x373>
c0027fec:	85 c0                	test   eax,eax
c0027fee:	75 ac                	jne    c0027f9c <__divdf3+0xd8>
c0027ff0:	31 ff                	xor    edi,edi
c0027ff2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027ff7:	e9 3b 02 00 00       	jmp    c0028237 <__divdf3+0x373>
c0027ffc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fff:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028002:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028008:	75 6b                	jne    c0028075 <__divdf3+0x1b1>
c002800a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002800d:	09 d6                	or     esi,edx
c002800f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028013:	74 28                	je     c002803d <__divdf3+0x179>
c0028015:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028018:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002801b:	85 f6                	test   esi,esi
c002801d:	0f 85 14 02 00 00    	jne    c0028237 <__divdf3+0x373>
c0028023:	31 ff                	xor    edi,edi
c0028025:	31 c9                	xor    ecx,ecx
c0028027:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002802a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002802d:	0f 89 04 02 00 00    	jns    c0028237 <__divdf3+0x373>
c0028033:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028038:	e9 fa 01 00 00       	jmp    c0028237 <__divdf3+0x373>
c002803d:	85 f6                	test   esi,esi
c002803f:	75 1b                	jne    c002805c <__divdf3+0x198>
c0028041:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028044:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028047:	25 00 00 00 80       	and    eax,0x80000000
c002804c:	31 c9                	xor    ecx,ecx
c002804e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028053:	89 cf                	mov    edi,ecx
c0028055:	89 c1                	mov    ecx,eax
c0028057:	e9 db 01 00 00       	jmp    c0028237 <__divdf3+0x373>
c002805c:	01 d2                	add    edx,edx
c002805e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028061:	c1 eb 1f             	shr    ebx,0x1f
c0028064:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028067:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002806a:	8d 48 01             	lea    ecx,[eax+0x1]
c002806d:	09 da                	or     edx,ebx
c002806f:	78 04                	js     c0028075 <__divdf3+0x1b1>
c0028071:	89 c8                	mov    eax,ecx
c0028073:	eb e7                	jmp    c002805c <__divdf3+0x198>
c0028075:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028078:	81 ce 00 00 00 80    	or     esi,0x80000000
c002807e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028084:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028087:	39 d6                	cmp    esi,edx
c0028089:	77 0d                	ja     c0028098 <__divdf3+0x1d4>
c002808b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002808e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028091:	72 1b                	jb     c00280ae <__divdf3+0x1ea>
c0028093:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028096:	75 16                	jne    c00280ae <__divdf3+0x1ea>
c0028098:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002809b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002809e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00280a1:	83 de 00             	sbb    esi,0x0
c00280a4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00280a7:	ba 01 00 00 00       	mov    edx,0x1
c00280ac:	eb 02                	jmp    c00280b0 <__divdf3+0x1ec>
c00280ae:	31 d2                	xor    edx,edx
c00280b0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00280b7:	31 ff                	xor    edi,edi
c00280b9:	01 ff                	add    edi,edi
c00280bb:	89 d1                	mov    ecx,edx
c00280bd:	c1 e9 1f             	shr    ecx,0x1f
c00280c0:	09 cf                	or     edi,ecx
c00280c2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280c5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280c8:	89 da                	mov    edx,ebx
c00280ca:	89 f3                	mov    ebx,esi
c00280cc:	8d 34 36             	lea    esi,[esi+esi*1]
c00280cf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280d2:	c1 e9 1f             	shr    ecx,0x1f
c00280d5:	09 ce                	or     esi,ecx
c00280d7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280da:	01 c9                	add    ecx,ecx
c00280dc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280df:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280e2:	85 db                	test   ebx,ebx
c00280e4:	78 29                	js     c002810f <__divdf3+0x24b>
c00280e6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280e9:	72 07                	jb     c00280f2 <__divdf3+0x22e>
c00280eb:	75 3c                	jne    c0028129 <__divdf3+0x265>
c00280ed:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280f0:	77 37                	ja     c0028129 <__divdf3+0x265>
c00280f2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280f5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280f8:	31 d2                	xor    edx,edx
c00280fa:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280fd:	0f 97 c2             	seta   dl
c0028100:	29 d6                	sub    esi,edx
c0028102:	89 d9                	mov    ecx,ebx
c0028104:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028107:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002810a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002810d:	eb 17                	jmp    c0028126 <__divdf3+0x262>
c002810f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028112:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028115:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028118:	0f 97 c1             	seta   cl
c002811b:	0f b6 c9             	movzx  ecx,cl
c002811e:	29 ce                	sub    esi,ecx
c0028120:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028123:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028126:	83 ca 01             	or     edx,0x1
c0028129:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002812c:	75 8b                	jne    c00280b9 <__divdf3+0x1f5>
c002812e:	c1 e7 09             	shl    edi,0x9
c0028131:	89 d1                	mov    ecx,edx
c0028133:	c1 e9 17             	shr    ecx,0x17
c0028136:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028139:	09 f3                	or     ebx,esi
c002813b:	0f 95 c3             	setne  bl
c002813e:	0f b6 db             	movzx  ebx,bl
c0028141:	c1 e2 09             	shl    edx,0x9
c0028144:	09 d3                	or     ebx,edx
c0028146:	89 ca                	mov    edx,ecx
c0028148:	09 fa                	or     edx,edi
c002814a:	78 0c                	js     c0028158 <__divdf3+0x294>
c002814c:	01 d2                	add    edx,edx
c002814e:	89 d9                	mov    ecx,ebx
c0028150:	c1 e9 1f             	shr    ecx,0x1f
c0028153:	09 ca                	or     edx,ecx
c0028155:	01 db                	add    ebx,ebx
c0028157:	48                   	dec    eax
c0028158:	3d fe 07 00 00       	cmp    eax,0x7fe
c002815d:	0f 8f 83 00 00 00    	jg     c00281e6 <__divdf3+0x322>
c0028163:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028169:	85 c0                	test   eax,eax
c002816b:	0f 8f 82 00 00 00    	jg     c00281f3 <__divdf3+0x32f>
c0028171:	83 f8 cc             	cmp    eax,0xffffffcc
c0028174:	7c 77                	jl     c00281ed <__divdf3+0x329>
c0028176:	be 01 00 00 00       	mov    esi,0x1
c002817b:	29 c6                	sub    esi,eax
c002817d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028183:	83 fe 1f             	cmp    esi,0x1f
c0028186:	7e 2f                	jle    c00281b7 <__divdf3+0x2f3>
c0028188:	83 fe 20             	cmp    esi,0x20
c002818b:	75 0a                	jne    c0028197 <__divdf3+0x2d3>
c002818d:	85 db                	test   ebx,ebx
c002818f:	0f 95 c3             	setne  bl
c0028192:	0f b6 db             	movzx  ebx,bl
c0028195:	eb 1a                	jmp    c00281b1 <__divdf3+0x2ed>
c0028197:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002819a:	89 d7                	mov    edi,edx
c002819c:	d3 e7                	shl    edi,cl
c002819e:	89 f9                	mov    ecx,edi
c00281a0:	09 d9                	or     ecx,ebx
c00281a2:	0f 95 c3             	setne  bl
c00281a5:	0f b6 db             	movzx  ebx,bl
c00281a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281ad:	29 c1                	sub    ecx,eax
c00281af:	d3 ea                	shr    edx,cl
c00281b1:	09 d3                	or     ebx,edx
c00281b3:	31 c0                	xor    eax,eax
c00281b5:	eb 3a                	jmp    c00281f1 <__divdf3+0x32d>
c00281b7:	83 c0 1f             	add    eax,0x1f
c00281ba:	89 d7                	mov    edi,edx
c00281bc:	88 c1                	mov    cl,al
c00281be:	d3 e7                	shl    edi,cl
c00281c0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281c3:	89 df                	mov    edi,ebx
c00281c5:	89 f1                	mov    ecx,esi
c00281c7:	d3 ef                	shr    edi,cl
c00281c9:	89 f9                	mov    ecx,edi
c00281cb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281ce:	09 cf                	or     edi,ecx
c00281d0:	88 c1                	mov    cl,al
c00281d2:	d3 e3                	shl    ebx,cl
c00281d4:	85 db                	test   ebx,ebx
c00281d6:	0f 95 c3             	setne  bl
c00281d9:	0f b6 db             	movzx  ebx,bl
c00281dc:	09 fb                	or     ebx,edi
c00281de:	89 f1                	mov    ecx,esi
c00281e0:	d3 ea                	shr    edx,cl
c00281e2:	31 c0                	xor    eax,eax
c00281e4:	eb 0d                	jmp    c00281f3 <__divdf3+0x32f>
c00281e6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281eb:	eb 02                	jmp    c00281ef <__divdf3+0x32b>
c00281ed:	31 c0                	xor    eax,eax
c00281ef:	31 db                	xor    ebx,ebx
c00281f1:	31 d2                	xor    edx,edx
c00281f3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281f6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281f9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281ff:	09 c8                	or     eax,ecx
c0028201:	c1 e0 14             	shl    eax,0x14
c0028204:	89 d1                	mov    ecx,edx
c0028206:	c1 e9 0b             	shr    ecx,0xb
c0028209:	09 c8                	or     eax,ecx
c002820b:	89 c6                	mov    esi,eax
c002820d:	89 d9                	mov    ecx,ebx
c002820f:	c1 e9 0b             	shr    ecx,0xb
c0028212:	c1 e2 15             	shl    edx,0x15
c0028215:	09 ca                	or     edx,ecx
c0028217:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002821d:	0f 95 c0             	setne  al
c0028220:	09 c1                	or     ecx,eax
c0028222:	83 e1 01             	and    ecx,0x1
c0028225:	c1 eb 0a             	shr    ebx,0xa
c0028228:	21 cb                	and    ebx,ecx
c002822a:	01 d3                	add    ebx,edx
c002822c:	89 d8                	mov    eax,ebx
c002822e:	83 d6 00             	adc    esi,0x0
c0028231:	89 f2                	mov    edx,esi
c0028233:	89 c7                	mov    edi,eax
c0028235:	89 d1                	mov    ecx,edx
c0028237:	89 f8                	mov    eax,edi
c0028239:	89 ca                	mov    edx,ecx
c002823b:	83 c4 2c             	add    esp,0x2c
c002823e:	5b                   	pop    ebx
c002823f:	5e                   	pop    esi
c0028240:	5f                   	pop    edi
c0028241:	5d                   	pop    ebp
c0028242:	c3                   	ret    

c0028243 <__floatsidf>:
c0028243:	55                   	push   ebp
c0028244:	89 e5                	mov    ebp,esp
c0028246:	56                   	push   esi
c0028247:	53                   	push   ebx
c0028248:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002824b:	85 db                	test   ebx,ebx
c002824d:	7e 15                	jle    c0028264 <__floatsidf+0x21>
c002824f:	0f bd cb             	bsr    ecx,ebx
c0028252:	83 f1 1f             	xor    ecx,0x1f
c0028255:	d3 e3                	shl    ebx,cl
c0028257:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002825d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028262:	eb 21                	jmp    c0028285 <__floatsidf+0x42>
c0028264:	b8 00 00 00 00       	mov    eax,0x0
c0028269:	ba 00 00 00 00       	mov    edx,0x0
c002826e:	74 2a                	je     c002829a <__floatsidf+0x57>
c0028270:	f7 db                	neg    ebx
c0028272:	0f bd cb             	bsr    ecx,ebx
c0028275:	83 f1 1f             	xor    ecx,0x1f
c0028278:	d3 e3                	shl    ebx,cl
c002827a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028280:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028285:	29 c8                	sub    eax,ecx
c0028287:	c1 e0 14             	shl    eax,0x14
c002828a:	89 c1                	mov    ecx,eax
c002828c:	89 de                	mov    esi,ebx
c002828e:	c1 ee 0b             	shr    esi,0xb
c0028291:	09 f1                	or     ecx,esi
c0028293:	89 ca                	mov    edx,ecx
c0028295:	c1 e3 15             	shl    ebx,0x15
c0028298:	89 d8                	mov    eax,ebx
c002829a:	5b                   	pop    ebx
c002829b:	5e                   	pop    esi
c002829c:	5d                   	pop    ebp
c002829d:	c3                   	ret    

c002829e <__floatunsidf>:
c002829e:	55                   	push   ebp
c002829f:	89 e5                	mov    ebp,esp
c00282a1:	56                   	push   esi
c00282a2:	53                   	push   ebx
c00282a3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282a6:	85 db                	test   ebx,ebx
c00282a8:	74 2a                	je     c00282d4 <__floatunsidf+0x36>
c00282aa:	0f bd cb             	bsr    ecx,ebx
c00282ad:	83 f1 1f             	xor    ecx,0x1f
c00282b0:	d3 e3                	shl    ebx,cl
c00282b2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282b8:	b8 1e 04 00 00       	mov    eax,0x41e
c00282bd:	29 c8                	sub    eax,ecx
c00282bf:	c1 e0 14             	shl    eax,0x14
c00282c2:	89 c1                	mov    ecx,eax
c00282c4:	89 de                	mov    esi,ebx
c00282c6:	c1 ee 0b             	shr    esi,0xb
c00282c9:	09 f1                	or     ecx,esi
c00282cb:	89 ca                	mov    edx,ecx
c00282cd:	c1 e3 15             	shl    ebx,0x15
c00282d0:	89 d8                	mov    eax,ebx
c00282d2:	eb 04                	jmp    c00282d8 <__floatunsidf+0x3a>
c00282d4:	31 c0                	xor    eax,eax
c00282d6:	31 d2                	xor    edx,edx
c00282d8:	5b                   	pop    ebx
c00282d9:	5e                   	pop    esi
c00282da:	5d                   	pop    ebp
c00282db:	c3                   	ret    

c00282dc <__fixdfsi>:
c00282dc:	55                   	push   ebp
c00282dd:	89 e5                	mov    ebp,esp
c00282df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282e2:	89 d1                	mov    ecx,edx
c00282e4:	c1 e1 0b             	shl    ecx,0xb
c00282e7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282f0:	c1 e8 15             	shr    eax,0x15
c00282f3:	09 c1                	or     ecx,eax
c00282f5:	c1 fa 14             	sar    edx,0x14
c00282f8:	78 1f                	js     c0028319 <__fixdfsi+0x3d>
c00282fa:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028300:	31 c0                	xor    eax,eax
c0028302:	83 fa 1e             	cmp    edx,0x1e
c0028305:	77 40                	ja     c0028347 <__fixdfsi+0x6b>
c0028307:	89 c8                	mov    eax,ecx
c0028309:	0d 00 00 00 80       	or     eax,0x80000000
c002830e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028313:	29 d1                	sub    ecx,edx
c0028315:	d3 e8                	shr    eax,cl
c0028317:	eb 2e                	jmp    c0028347 <__fixdfsi+0x6b>
c0028319:	31 c0                	xor    eax,eax
c002831b:	81 c2 01 04 00 00    	add    edx,0x401
c0028321:	78 24                	js     c0028347 <__fixdfsi+0x6b>
c0028323:	83 fa 1e             	cmp    edx,0x1e
c0028326:	7e 09                	jle    c0028331 <__fixdfsi+0x55>
c0028328:	83 fa 1f             	cmp    edx,0x1f
c002832b:	75 18                	jne    c0028345 <__fixdfsi+0x69>
c002832d:	85 c9                	test   ecx,ecx
c002832f:	75 14                	jne    c0028345 <__fixdfsi+0x69>
c0028331:	89 c8                	mov    eax,ecx
c0028333:	0d 00 00 00 80       	or     eax,0x80000000
c0028338:	b9 1f 00 00 00       	mov    ecx,0x1f
c002833d:	29 d1                	sub    ecx,edx
c002833f:	d3 e8                	shr    eax,cl
c0028341:	f7 d8                	neg    eax
c0028343:	eb 02                	jmp    c0028347 <__fixdfsi+0x6b>
c0028345:	31 c0                	xor    eax,eax
c0028347:	5d                   	pop    ebp
c0028348:	c3                   	ret    

c0028349 <__fixunsdfsi>:
c0028349:	55                   	push   ebp
c002834a:	89 e5                	mov    ebp,esp
c002834c:	53                   	push   ebx
c002834d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028353:	89 d3                	mov    ebx,edx
c0028355:	c1 fb 14             	sar    ebx,0x14
c0028358:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002835e:	31 c0                	xor    eax,eax
c0028360:	83 fb 1f             	cmp    ebx,0x1f
c0028363:	77 1d                	ja     c0028382 <__fixunsdfsi+0x39>
c0028365:	89 d0                	mov    eax,edx
c0028367:	c1 e0 0b             	shl    eax,0xb
c002836a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002836f:	c1 e9 15             	shr    ecx,0x15
c0028372:	09 c8                	or     eax,ecx
c0028374:	0d 00 00 00 80       	or     eax,0x80000000
c0028379:	b9 1f 00 00 00       	mov    ecx,0x1f
c002837e:	29 d9                	sub    ecx,ebx
c0028380:	d3 e8                	shr    eax,cl
c0028382:	5b                   	pop    ebx
c0028383:	5d                   	pop    ebp
c0028384:	c3                   	ret    

c0028385 <__cmpdf2>:
c0028385:	55                   	push   ebp
c0028386:	89 e5                	mov    ebp,esp
c0028388:	57                   	push   edi
c0028389:	56                   	push   esi
c002838a:	53                   	push   ebx
c002838b:	83 ec 0c             	sub    esp,0xc
c002838e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028391:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028394:	89 ca                	mov    edx,ecx
c0028396:	c1 ea 14             	shr    edx,0x14
c0028399:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002839f:	89 cb                	mov    ebx,ecx
c00283a1:	c1 fb 1f             	sar    ebx,0x1f
c00283a4:	31 da                	xor    edx,ebx
c00283a6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283a9:	89 df                	mov    edi,ebx
c00283ab:	c1 e7 0b             	shl    edi,0xb
c00283ae:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283b1:	c1 e1 0b             	shl    ecx,0xb
c00283b4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283ba:	c1 eb 15             	shr    ebx,0x15
c00283bd:	09 d9                	or     ecx,ebx
c00283bf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283c5:	89 ce                	mov    esi,ecx
c00283c7:	c1 ee 14             	shr    esi,0x14
c00283ca:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283d0:	89 cb                	mov    ebx,ecx
c00283d2:	c1 fb 1f             	sar    ebx,0x1f
c00283d5:	31 de                	xor    esi,ebx
c00283d7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283da:	89 df                	mov    edi,ebx
c00283dc:	c1 e7 0b             	shl    edi,0xb
c00283df:	c1 e1 0b             	shl    ecx,0xb
c00283e2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283e8:	c1 eb 15             	shr    ebx,0x15
c00283eb:	09 d9                	or     ecx,ebx
c00283ed:	89 d3                	mov    ebx,edx
c00283ef:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283f5:	43                   	inc    ebx
c00283f6:	83 fb 01             	cmp    ebx,0x1
c00283f9:	77 08                	ja     c0028403 <__cmpdf2+0x7e>
c00283fb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283fe:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028401:	75 68                	jne    c002846b <__cmpdf2+0xe6>
c0028403:	89 f3                	mov    ebx,esi
c0028405:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002840b:	43                   	inc    ebx
c002840c:	83 fb 01             	cmp    ebx,0x1
c002840f:	77 06                	ja     c0028417 <__cmpdf2+0x92>
c0028411:	89 fb                	mov    ebx,edi
c0028413:	09 cb                	or     ebx,ecx
c0028415:	75 54                	jne    c002846b <__cmpdf2+0xe6>
c0028417:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002841a:	09 f8                	or     eax,edi
c002841c:	09 c8                	or     eax,ecx
c002841e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028421:	75 12                	jne    c0028435 <__cmpdf2+0xb0>
c0028423:	8d 42 01             	lea    eax,[edx+0x1]
c0028426:	83 f8 01             	cmp    eax,0x1
c0028429:	77 0a                	ja     c0028435 <__cmpdf2+0xb0>
c002842b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002842e:	31 c0                	xor    eax,eax
c0028430:	83 fb 01             	cmp    ebx,0x1
c0028433:	76 36                	jbe    c002846b <__cmpdf2+0xe6>
c0028435:	b8 01 00 00 00       	mov    eax,0x1
c002843a:	39 f2                	cmp    edx,esi
c002843c:	7f 2d                	jg     c002846b <__cmpdf2+0xe6>
c002843e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028443:	7c 26                	jl     c002846b <__cmpdf2+0xe6>
c0028445:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028448:	77 07                	ja     c0028451 <__cmpdf2+0xcc>
c002844a:	72 16                	jb     c0028462 <__cmpdf2+0xdd>
c002844c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002844f:	76 0a                	jbe    c002845b <__cmpdf2+0xd6>
c0028451:	89 d0                	mov    eax,edx
c0028453:	c1 f8 1f             	sar    eax,0x1f
c0028456:	83 c8 01             	or     eax,0x1
c0028459:	eb 10                	jmp    c002846b <__cmpdf2+0xe6>
c002845b:	b8 00 00 00 00       	mov    eax,0x0
c0028460:	73 09                	jae    c002846b <__cmpdf2+0xe6>
c0028462:	89 d0                	mov    eax,edx
c0028464:	c1 f8 1f             	sar    eax,0x1f
c0028467:	83 e0 02             	and    eax,0x2
c002846a:	48                   	dec    eax
c002846b:	83 c4 0c             	add    esp,0xc
c002846e:	5b                   	pop    ebx
c002846f:	5e                   	pop    esi
c0028470:	5f                   	pop    edi
c0028471:	5d                   	pop    ebp
c0028472:	c3                   	ret    

c0028473 <__eqdf2>:
c0028473:	55                   	push   ebp
c0028474:	89 e5                	mov    ebp,esp
c0028476:	50                   	push   eax
c0028477:	6a 01                	push   0x1
c0028479:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002847c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002847f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028482:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028485:	e8 fb fe ff ff       	call   c0028385 <__cmpdf2>
c002848a:	83 c4 18             	add    esp,0x18
c002848d:	c9                   	leave  
c002848e:	c3                   	ret    

c002848f <__nedf2>:
c002848f:	eb e2                	jmp    c0028473 <__eqdf2>

c0028491 <__gtdf2>:
c0028491:	55                   	push   ebp
c0028492:	89 e5                	mov    ebp,esp
c0028494:	50                   	push   eax
c0028495:	6a ff                	push   0xffffffff
c0028497:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002849a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002849d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284a3:	e8 dd fe ff ff       	call   c0028385 <__cmpdf2>
c00284a8:	83 c4 18             	add    esp,0x18
c00284ab:	c9                   	leave  
c00284ac:	c3                   	ret    

c00284ad <__gedf2>:
c00284ad:	eb e2                	jmp    c0028491 <__gtdf2>

c00284af <__ltdf2>:
c00284af:	eb c2                	jmp    c0028473 <__eqdf2>

c00284b1 <__ledf2>:
c00284b1:	eb c0                	jmp    c0028473 <__eqdf2>

c00284b3 <__truncdfsf2>:
c00284b3:	55                   	push   ebp
c00284b4:	89 e5                	mov    ebp,esp
c00284b6:	57                   	push   edi
c00284b7:	56                   	push   esi
c00284b8:	53                   	push   ebx
c00284b9:	83 ec 0c             	sub    esp,0xc
c00284bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284bf:	89 d1                	mov    ecx,edx
c00284c1:	c1 f9 14             	sar    ecx,0x14
c00284c4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284c7:	89 df                	mov    edi,ebx
c00284c9:	c1 e7 0b             	shl    edi,0xb
c00284cc:	89 d0                	mov    eax,edx
c00284ce:	c1 e0 0b             	shl    eax,0xb
c00284d1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284d6:	c1 eb 15             	shr    ebx,0x15
c00284d9:	09 d8                	or     eax,ebx
c00284db:	89 cb                	mov    ebx,ecx
c00284dd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284e3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284e9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284ef:	0f 86 9e 00 00 00    	jbe    c0028593 <__truncdfsf2+0xe0>
c00284f5:	85 db                	test   ebx,ebx
c00284f7:	75 0a                	jne    c0028503 <__truncdfsf2+0x50>
c00284f9:	c1 fa 17             	sar    edx,0x17
c00284fc:	30 d2                	xor    dl,dl
c00284fe:	e9 84 00 00 00       	jmp    c0028587 <__truncdfsf2+0xd4>
c0028503:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028509:	83 fe 83             	cmp    esi,0xffffff83
c002850c:	7d 4b                	jge    c0028559 <__truncdfsf2+0xa6>
c002850e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028513:	29 f1                	sub    ecx,esi
c0028515:	83 f9 1f             	cmp    ecx,0x1f
c0028518:	7f 6b                	jg     c0028585 <__truncdfsf2+0xd2>
c002851a:	0d 00 00 00 80       	or     eax,0x80000000
c002851f:	89 c3                	mov    ebx,eax
c0028521:	d3 eb                	shr    ebx,cl
c0028523:	be 01 00 00 00       	mov    esi,0x1
c0028528:	d3 e6                	shl    esi,cl
c002852a:	4e                   	dec    esi
c002852b:	21 f0                	and    eax,esi
c002852d:	09 f8                	or     eax,edi
c002852f:	0f 95 c0             	setne  al
c0028532:	0f b6 c0             	movzx  eax,al
c0028535:	09 c3                	or     ebx,eax
c0028537:	89 d9                	mov    ecx,ebx
c0028539:	c1 e9 08             	shr    ecx,0x8
c002853c:	f6 c3 7f             	test   bl,0x7f
c002853f:	0f 95 c0             	setne  al
c0028542:	09 c8                	or     eax,ecx
c0028544:	83 e0 01             	and    eax,0x1
c0028547:	c1 eb 07             	shr    ebx,0x7
c002854a:	21 c3                	and    ebx,eax
c002854c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028552:	09 d1                	or     ecx,edx
c0028554:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028557:	eb 76                	jmp    c00285cf <__truncdfsf2+0x11c>
c0028559:	83 c6 80             	add    esi,0xffffff80
c002855c:	7e 1d                	jle    c002857b <__truncdfsf2+0xc8>
c002855e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028564:	75 0b                	jne    c0028571 <__truncdfsf2+0xbe>
c0028566:	09 f8                	or     eax,edi
c0028568:	74 09                	je     c0028573 <__truncdfsf2+0xc0>
c002856a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002856f:	eb 02                	jmp    c0028573 <__truncdfsf2+0xc0>
c0028571:	31 c0                	xor    eax,eax
c0028573:	c1 fa 17             	sar    edx,0x17
c0028576:	80 ca ff             	or     dl,0xff
c0028579:	eb 0e                	jmp    c0028589 <__truncdfsf2+0xd6>
c002857b:	c1 fa 1f             	sar    edx,0x1f
c002857e:	c1 e2 08             	shl    edx,0x8
c0028581:	09 ca                	or     edx,ecx
c0028583:	eb 04                	jmp    c0028589 <__truncdfsf2+0xd6>
c0028585:	31 d2                	xor    edx,edx
c0028587:	31 c0                	xor    eax,eax
c0028589:	c1 e2 17             	shl    edx,0x17
c002858c:	c1 e8 08             	shr    eax,0x8
c002858f:	09 d0                	or     eax,edx
c0028591:	eb 3c                	jmp    c00285cf <__truncdfsf2+0x11c>
c0028593:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028599:	89 ca                	mov    edx,ecx
c002859b:	c1 fa 0b             	sar    edx,0xb
c002859e:	c1 e2 08             	shl    edx,0x8
c00285a1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00285a4:	31 db                	xor    ebx,ebx
c00285a6:	85 ff                	test   edi,edi
c00285a8:	0f 95 c3             	setne  bl
c00285ab:	09 d8                	or     eax,ebx
c00285ad:	89 c3                	mov    ebx,eax
c00285af:	c1 eb 08             	shr    ebx,0x8
c00285b2:	a8 7f                	test   al,0x7f
c00285b4:	0f 95 c2             	setne  dl
c00285b7:	89 d6                	mov    esi,edx
c00285b9:	09 de                	or     esi,ebx
c00285bb:	83 e6 01             	and    esi,0x1
c00285be:	c1 e8 07             	shr    eax,0x7
c00285c1:	21 f0                	and    eax,esi
c00285c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285c6:	09 ca                	or     edx,ecx
c00285c8:	c1 e2 17             	shl    edx,0x17
c00285cb:	09 da                	or     edx,ebx
c00285cd:	01 d0                	add    eax,edx
c00285cf:	83 c4 0c             	add    esp,0xc
c00285d2:	5b                   	pop    ebx
c00285d3:	5e                   	pop    esi
c00285d4:	5f                   	pop    edi
c00285d5:	5d                   	pop    ebp
c00285d6:	c3                   	ret    

c00285d7 <__extendsfdf2>:
c00285d7:	55                   	push   ebp
c00285d8:	89 e5                	mov    ebp,esp
c00285da:	57                   	push   edi
c00285db:	56                   	push   esi
c00285dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285df:	89 d1                	mov    ecx,edx
c00285e1:	c1 f9 17             	sar    ecx,0x17
c00285e4:	c1 e2 08             	shl    edx,0x8
c00285e7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285ed:	89 c8                	mov    eax,ecx
c00285ef:	80 e4 f8             	and    ah,0xf8
c00285f2:	8d 71 01             	lea    esi,[ecx+0x1]
c00285f5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285fb:	75 27                	jne    c0028624 <__extendsfdf2+0x4d>
c00285fd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028603:	75 18                	jne    c002861d <__extendsfdf2+0x46>
c0028605:	85 d2                	test   edx,edx
c0028607:	74 20                	je     c0028629 <__extendsfdf2+0x52>
c0028609:	41                   	inc    ecx
c002860a:	01 d2                	add    edx,edx
c002860c:	79 fb                	jns    c0028609 <__extendsfdf2+0x32>
c002860e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028614:	29 c8                	sub    eax,ecx
c0028616:	05 81 03 00 00       	add    eax,0x381
c002861b:	eb 0c                	jmp    c0028629 <__extendsfdf2+0x52>
c002861d:	05 00 07 00 00       	add    eax,0x700
c0028622:	eb 05                	jmp    c0028629 <__extendsfdf2+0x52>
c0028624:	05 80 03 00 00       	add    eax,0x380
c0028629:	c1 e0 14             	shl    eax,0x14
c002862c:	89 c1                	mov    ecx,eax
c002862e:	89 d0                	mov    eax,edx
c0028630:	c1 e8 0b             	shr    eax,0xb
c0028633:	09 c1                	or     ecx,eax
c0028635:	c1 e2 15             	shl    edx,0x15
c0028638:	89 d0                	mov    eax,edx
c002863a:	89 ca                	mov    edx,ecx
c002863c:	5e                   	pop    esi
c002863d:	5f                   	pop    edi
c002863e:	5d                   	pop    ebp
c002863f:	c3                   	ret    

c0028640 <fabs>:
c0028640:	83 ec 0c             	sub    esp,0xc
c0028643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028647:	89 04 24             	mov    DWORD PTR [esp],eax
c002864a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002864e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028653:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028657:	dd 04 24             	fld    QWORD PTR [esp]
c002865a:	83 c4 0c             	add    esp,0xc
c002865d:	c3                   	ret    
c002865e:	66 90                	xchg   ax,ax

c0028660 <lrint>:
c0028660:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028664:	83 ec 04             	sub    esp,0x4
c0028667:	db 1c 24             	fistp  DWORD PTR [esp]
c002866a:	58                   	pop    eax
c002866b:	c3                   	ret    

c002866c <lrintf>:
c002866c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028670:	83 ec 04             	sub    esp,0x4
c0028673:	db 1c 24             	fistp  DWORD PTR [esp]
c0028676:	58                   	pop    eax
c0028677:	c3                   	ret    

Disassembly of section .init:

c0028678 <_init>:
c0028678:	55                   	push   ebp
c0028679:	89 e5                	mov    ebp,esp
c002867b:	e8 98 7a fd ff       	call   c0000118 <frame_dummy>
c0028680:	e8 63 e0 ff ff       	call   c00266e8 <__do_global_ctors_aux>
c0028685:	5d                   	pop    ebp
c0028686:	c3                   	ret    

Disassembly of section .fini:

c0028687 <_fini>:
c0028687:	55                   	push   ebp
c0028688:	89 e5                	mov    ebp,esp
c002868a:	e8 19 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002868f:	5d                   	pop    ebp
c0028690:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028692 <Computer::~Computer()>:
c0028692:	83 ec 0c             	sub    esp,0xc
c0028695:	ba c8 a1 02 c0       	mov    edx,0xc002a1c8
c002869a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869e:	89 10                	mov    DWORD PTR [eax],edx
c00286a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a4:	83 ec 0c             	sub    esp,0xc
c00286a7:	50                   	push   eax
c00286a8:	e8 a5 bb fe ff       	call   c0014252 <Device::~Device()>
c00286ad:	83 c4 10             	add    esp,0x10
c00286b0:	90                   	nop
c00286b1:	83 c4 0c             	add    esp,0xc
c00286b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00286b6 <Computer::~Computer()>:
c00286b6:	83 ec 0c             	sub    esp,0xc
c00286b9:	83 ec 0c             	sub    esp,0xc
c00286bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286c0:	e8 cd ff ff ff       	call   c0028692 <Computer::~Computer()>
c00286c5:	83 c4 10             	add    esp,0x10
c00286c8:	83 ec 08             	sub    esp,0x8
c00286cb:	68 ec 01 00 00       	push   0x1ec
c00286d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286d4:	e8 a1 a7 fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c00286d9:	83 c4 10             	add    esp,0x10
c00286dc:	83 c4 0c             	add    esp,0xc
c00286df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286e0 <idleCommon()>:
c00286e0:	83 ec 0c             	sub    esp,0xc
c00286e3:	e8 14 57 ff ff       	call   c001ddfc <lockScheduler()>
c00286e8:	e8 4b 5a ff ff       	call   c001e138 <schedule()>
c00286ed:	83 c4 0c             	add    esp,0xc
c00286f0:	e9 09 57 ff ff       	jmp    c001ddfe <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286f6 <LinkedList<UnixFile>::~LinkedList()>:
c00286f6:	90                   	nop
c00286f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286f8 <LinkedList<UnixFile>::LinkedList()>:
c00286f8:	83 ec 0c             	sub    esp,0xc
c00286fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028709:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028714:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002871b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028729:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028734:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002873b:	83 ec 0c             	sub    esp,0xc
c002873e:	68 86 a4 02 c0       	push   0xc002a486
c0028743:	e8 12 a8 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0028748:	83 c4 10             	add    esp,0x10
c002874b:	90                   	nop
c002874c:	83 c4 0c             	add    esp,0xc
c002874f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028750 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028750:	83 ec 0c             	sub    esp,0xc
c0028753:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028758:	75 10                	jne    c002876a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002875a:	83 ec 0c             	sub    esp,0xc
c002875d:	68 a0 a4 02 c0       	push   0xc002a4a0
c0028762:	e8 a0 1e ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0028767:	83 c4 10             	add    esp,0x10
c002876a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028770:	85 c0                	test   eax,eax
c0028772:	74 34                	je     c00287a8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028778:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877b:	85 c0                	test   eax,eax
c002877d:	74 29                	je     c00287a8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002877f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028783:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028786:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002878a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002878d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028795:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002879f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287a6:	eb 65                	jmp    c002880d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ae:	85 c0                	test   eax,eax
c00287b0:	75 4b                	jne    c00287fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b9:	85 c0                	test   eax,eax
c00287bb:	75 40                	jne    c00287fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287c5:	89 10                	mov    DWORD PTR [eax],edx
c00287c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287e7:	85 c0                	test   eax,eax
c00287e9:	74 22                	je     c002880d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287eb:	83 ec 0c             	sub    esp,0xc
c00287ee:	68 c2 a4 02 c0       	push   0xc002a4c2
c00287f3:	e8 0f 1e ff ff       	call   c001a607 <Krnl::panic(char const*)>
c00287f8:	83 c4 10             	add    esp,0x10
c00287fb:	eb 10                	jmp    c002880d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287fd:	83 ec 0c             	sub    esp,0xc
c0028800:	68 cc a4 02 c0       	push   0xc002a4cc
c0028805:	e8 fd 1d ff ff       	call   c001a607 <Krnl::panic(char const*)>
c002880a:	83 c4 10             	add    esp,0x10
c002880d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028811:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028814:	8d 50 01             	lea    edx,[eax+0x1]
c0028817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002881e:	90                   	nop
c002881f:	83 c4 0c             	add    esp,0xc
c0028822:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028824 <LinkedList<UnixFile>::getFirstElement()>:
c0028824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028828:	8b 00                	mov    eax,DWORD PTR [eax]
c002882a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002882c <LinkedList<UnixFile>::removeFirst()>:
c002882c:	83 ec 0c             	sub    esp,0xc
c002882f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028833:	8b 00                	mov    eax,DWORD PTR [eax]
c0028835:	85 c0                	test   eax,eax
c0028837:	75 12                	jne    c002884b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028839:	83 ec 0c             	sub    esp,0xc
c002883c:	68 d8 a4 02 c0       	push   0xc002a4d8
c0028841:	e8 c1 1d ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0028846:	83 c4 10             	add    esp,0x10
c0028849:	eb 7e                	jmp    c00288c9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002884b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028852:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028855:	85 c0                	test   eax,eax
c0028857:	74 10                	je     c0028869 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028859:	83 ec 0c             	sub    esp,0xc
c002885c:	68 23 a5 02 c0       	push   0xc002a523
c0028861:	e8 a1 1d ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0028866:	83 c4 10             	add    esp,0x10
c0028869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886d:	8b 00                	mov    eax,DWORD PTR [eax]
c002886f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028872:	85 c0                	test   eax,eax
c0028874:	75 33                	jne    c00288a9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028884:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002888b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028892:	83 f8 01             	cmp    eax,0x1
c0028895:	74 21                	je     c00288b8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028897:	83 ec 0c             	sub    esp,0xc
c002889a:	68 fc a4 02 c0       	push   0xc002a4fc
c002889f:	e8 63 1d ff ff       	call   c001a607 <Krnl::panic(char const*)>
c00288a4:	83 c4 10             	add    esp,0x10
c00288a7:	eb 0f                	jmp    c00288b8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00288af:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	89 10                	mov    DWORD PTR [eax],edx
c00288b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288bf:	8d 50 ff             	lea    edx,[eax-0x1]
c00288c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288c9:	83 c4 0c             	add    esp,0xc
c00288cc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288ce <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288d6 <DriverlessDevice::~DriverlessDevice()>:
c00288d6:	ba e4 ac 02 c0       	mov    edx,0xc002ace4
c00288db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288df:	89 10                	mov    DWORD PTR [eax],edx
c00288e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e5:	50                   	push   eax
c00288e6:	e8 67 b9 fe ff       	call   c0014252 <Device::~Device()>
c00288eb:	83 c4 04             	add    esp,0x4
c00288ee:	90                   	nop
c00288ef:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288f0 <DriverlessDevice::~DriverlessDevice()>:
c00288f0:	83 ec 0c             	sub    esp,0xc
c00288f3:	83 ec 0c             	sub    esp,0xc
c00288f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288fa:	e8 d7 ff ff ff       	call   c00288d6 <DriverlessDevice::~DriverlessDevice()>
c00288ff:	83 c4 10             	add    esp,0x10
c0028902:	83 ec 08             	sub    esp,0x8
c0028905:	68 58 01 00 00       	push   0x158
c002890a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002890e:	e8 67 a5 fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028913:	83 c4 10             	add    esp,0x10
c0028916:	83 c4 0c             	add    esp,0xc
c0028919:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002891a <LinkedList<Device>::addElement(Device*)>:
c002891a:	83 ec 0c             	sub    esp,0xc
c002891d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028922:	75 10                	jne    c0028934 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028924:	83 ec 0c             	sub    esp,0xc
c0028927:	68 a0 a4 02 c0       	push   0xc002a4a0
c002892c:	e8 d6 1c ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0028931:	83 c4 10             	add    esp,0x10
c0028934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028938:	8b 00                	mov    eax,DWORD PTR [eax]
c002893a:	85 c0                	test   eax,eax
c002893c:	74 3a                	je     c0028978 <LinkedList<Device>::addElement(Device*)+0x5e>
c002893e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028942:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028945:	85 c0                	test   eax,eax
c0028947:	74 2f                	je     c0028978 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028950:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028954:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002895a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028962:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028969:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002896c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028976:	eb 68                	jmp    c00289e0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897c:	8b 00                	mov    eax,DWORD PTR [eax]
c002897e:	85 c0                	test   eax,eax
c0028980:	75 4e                	jne    c00289d0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028989:	85 c0                	test   eax,eax
c002898b:	75 43                	jne    c00289d0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002898d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028991:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028995:	89 10                	mov    DWORD PTR [eax],edx
c0028997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002899f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289a9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289ba:	85 c0                	test   eax,eax
c00289bc:	74 22                	je     c00289e0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289be:	83 ec 0c             	sub    esp,0xc
c00289c1:	68 c2 a4 02 c0       	push   0xc002a4c2
c00289c6:	e8 3c 1c ff ff       	call   c001a607 <Krnl::panic(char const*)>
c00289cb:	83 c4 10             	add    esp,0x10
c00289ce:	eb 10                	jmp    c00289e0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289d0:	83 ec 0c             	sub    esp,0xc
c00289d3:	68 cc a4 02 c0       	push   0xc002a4cc
c00289d8:	e8 2a 1c ff ff       	call   c001a607 <Krnl::panic(char const*)>
c00289dd:	83 c4 10             	add    esp,0x10
c00289e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289e7:	8d 50 01             	lea    edx,[eax+0x1]
c00289ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289f1:	90                   	nop
c00289f2:	83 c4 0c             	add    esp,0xc
c00289f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289f6 <LinkedList<Device>::LinkedList()>:
c00289f6:	83 ec 0c             	sub    esp,0xc
c00289f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a32:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a39:	83 ec 0c             	sub    esp,0xc
c0028a3c:	68 86 a4 02 c0       	push   0xc002a486
c0028a41:	e8 14 a5 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0028a46:	83 c4 10             	add    esp,0x10
c0028a49:	90                   	nop
c0028a4a:	83 c4 0c             	add    esp,0xc
c0028a4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a52:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5c:	85 c0                	test   eax,eax
c0028a5e:	75 0e                	jne    c0028a6e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a67:	85 c0                	test   eax,eax
c0028a69:	75 03                	jne    c0028a6e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a6b:	b0 01                	mov    al,0x1
c0028a6d:	c3                   	ret    
c0028a6e:	b0 00                	mov    al,0x0
c0028a70:	90                   	nop
c0028a71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a72:	83 ec 0c             	sub    esp,0xc
c0028a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a7b:	85 c0                	test   eax,eax
c0028a7d:	75 15                	jne    c0028a94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a7f:	83 ec 0c             	sub    esp,0xc
c0028a82:	68 d8 a4 02 c0       	push   0xc002a4d8
c0028a87:	e8 7b 1b ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0028a8c:	83 c4 10             	add    esp,0x10
c0028a8f:	e9 88 00 00 00       	jmp    c0028b1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a9e:	85 c0                	test   eax,eax
c0028aa0:	0f 95 c0             	setne  al
c0028aa3:	84 c0                	test   al,al
c0028aa5:	74 10                	je     c0028ab7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028aa7:	83 ec 0c             	sub    esp,0xc
c0028aaa:	68 23 a5 02 c0       	push   0xc002a523
c0028aaf:	e8 53 1b ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0028ab4:	83 c4 10             	add    esp,0x10
c0028ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028abd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ac0:	85 c0                	test   eax,eax
c0028ac2:	0f 94 c0             	sete   al
c0028ac5:	84 c0                	test   al,al
c0028ac7:	74 33                	je     c0028afc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028acd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ae5:	83 f8 01             	cmp    eax,0x1
c0028ae8:	74 21                	je     c0028b0b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aea:	83 ec 0c             	sub    esp,0xc
c0028aed:	68 fc a4 02 c0       	push   0xc002a4fc
c0028af2:	e8 10 1b ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0028af7:	83 c4 10             	add    esp,0x10
c0028afa:	eb 0f                	jmp    c0028b0b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b02:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b09:	89 10                	mov    DWORD PTR [eax],edx
c0028b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b12:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b19:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b1c:	83 c4 0c             	add    esp,0xc
c0028b1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b20:	83 ec 0c             	sub    esp,0xc
c0028b23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b28:	75 10                	jne    c0028b3a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b2a:	83 ec 0c             	sub    esp,0xc
c0028b2d:	68 a0 a4 02 c0       	push   0xc002a4a0
c0028b32:	e8 d0 1a ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0028b37:	83 c4 10             	add    esp,0x10
c0028b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b40:	85 c0                	test   eax,eax
c0028b42:	74 34                	je     c0028b78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b4b:	85 c0                	test   eax,eax
c0028b4d:	74 29                	je     c0028b78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b5a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b65:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b6f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b76:	eb 65                	jmp    c0028bdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b7e:	85 c0                	test   eax,eax
c0028b80:	75 4b                	jne    c0028bcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b89:	85 c0                	test   eax,eax
c0028b8b:	75 40                	jne    c0028bcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b95:	89 10                	mov    DWORD PTR [eax],edx
c0028b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ba9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bb7:	85 c0                	test   eax,eax
c0028bb9:	74 22                	je     c0028bdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bbb:	83 ec 0c             	sub    esp,0xc
c0028bbe:	68 c2 a4 02 c0       	push   0xc002a4c2
c0028bc3:	e8 3f 1a ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0028bc8:	83 c4 10             	add    esp,0x10
c0028bcb:	eb 10                	jmp    c0028bdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bcd:	83 ec 0c             	sub    esp,0xc
c0028bd0:	68 cc a4 02 c0       	push   0xc002a4cc
c0028bd5:	e8 2d 1a ff ff       	call   c001a607 <Krnl::panic(char const*)>
c0028bda:	83 c4 10             	add    esp,0x10
c0028bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028be4:	8d 50 01             	lea    edx,[eax+0x1]
c0028be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028beb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bee:	90                   	nop
c0028bef:	83 c4 0c             	add    esp,0xc
c0028bf2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028bf4 <ACPI::~ACPI()>:
c0028bf4:	83 ec 0c             	sub    esp,0xc
c0028bf7:	ba 48 b6 02 c0       	mov    edx,0xc002b648
c0028bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c00:	89 10                	mov    DWORD PTR [eax],edx
c0028c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c06:	83 ec 0c             	sub    esp,0xc
c0028c09:	50                   	push   eax
c0028c0a:	e8 43 b6 fe ff       	call   c0014252 <Device::~Device()>
c0028c0f:	83 c4 10             	add    esp,0x10
c0028c12:	90                   	nop
c0028c13:	83 c4 0c             	add    esp,0xc
c0028c16:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c18 <ACPI::~ACPI()>:
c0028c18:	83 ec 0c             	sub    esp,0xc
c0028c1b:	83 ec 0c             	sub    esp,0xc
c0028c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c22:	e8 cd ff ff ff       	call   c0028bf4 <ACPI::~ACPI()>
c0028c27:	83 c4 10             	add    esp,0x10
c0028c2a:	83 ec 08             	sub    esp,0x8
c0028c2d:	68 68 12 00 00       	push   0x1268
c0028c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c36:	e8 3f a2 fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028c3b:	83 c4 10             	add    esp,0x10
c0028c3e:	83 c4 0c             	add    esp,0xc
c0028c41:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c42 <CPU::~CPU()>:
c0028c42:	83 ec 0c             	sub    esp,0xc
c0028c45:	ba 38 ba 02 c0       	mov    edx,0xc002ba38
c0028c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4e:	89 10                	mov    DWORD PTR [eax],edx
c0028c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c54:	83 ec 0c             	sub    esp,0xc
c0028c57:	50                   	push   eax
c0028c58:	e8 f5 b5 fe ff       	call   c0014252 <Device::~Device()>
c0028c5d:	83 c4 10             	add    esp,0x10
c0028c60:	90                   	nop
c0028c61:	83 c4 0c             	add    esp,0xc
c0028c64:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c66 <CPU::~CPU()>:
c0028c66:	83 ec 0c             	sub    esp,0xc
c0028c69:	83 ec 0c             	sub    esp,0xc
c0028c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c70:	e8 cd ff ff ff       	call   c0028c42 <CPU::~CPU()>
c0028c75:	83 c4 10             	add    esp,0x10
c0028c78:	83 ec 08             	sub    esp,0x8
c0028c7b:	68 98 11 00 00       	push   0x1198
c0028c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c84:	e8 f1 a1 fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028c89:	83 c4 10             	add    esp,0x10
c0028c8c:	83 c4 0c             	add    esp,0xc
c0028c8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c90 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c90:	90                   	nop
c0028c91:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c92 <ThreadControlBlock::ThreadControlBlock()>:
c0028c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c96:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cac:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cca:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cce:	90                   	nop
c0028ccf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028cd0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028cd0:	83 ec 0c             	sub    esp,0xc
c0028cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d13:	83 ec 0c             	sub    esp,0xc
c0028d16:	68 86 a4 02 c0       	push   0xc002a486
c0028d1b:	e8 3a a2 fe ff       	call   c0012f5a <Dbg::kprintf(char const*, ...)>
c0028d20:	83 c4 10             	add    esp,0x10
c0028d23:	90                   	nop
c0028d24:	83 c4 0c             	add    esp,0xc
c0028d27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d28 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d2c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d2f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d30 <Vm::_FPUState::_FPUState()>:
c0028d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d34:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d3b:	90                   	nop
c0028d3c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d3e <PCI::~PCI()>:
c0028d3e:	83 ec 0c             	sub    esp,0xc
c0028d41:	ba c4 ca 02 c0       	mov    edx,0xc002cac4
c0028d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4a:	89 10                	mov    DWORD PTR [eax],edx
c0028d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	50                   	push   eax
c0028d54:	e8 d1 ae fe ff       	call   c0013c2a <Bus::~Bus()>
c0028d59:	83 c4 10             	add    esp,0x10
c0028d5c:	90                   	nop
c0028d5d:	83 c4 0c             	add    esp,0xc
c0028d60:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d62 <PCI::~PCI()>:
c0028d62:	83 ec 0c             	sub    esp,0xc
c0028d65:	83 ec 0c             	sub    esp,0xc
c0028d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d6c:	e8 cd ff ff ff       	call   c0028d3e <PCI::~PCI()>
c0028d71:	83 c4 10             	add    esp,0x10
c0028d74:	83 ec 08             	sub    esp,0x8
c0028d77:	68 58 01 00 00       	push   0x158
c0028d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d80:	e8 f5 a0 fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028d85:	83 c4 10             	add    esp,0x10
c0028d88:	83 c4 0c             	add    esp,0xc
c0028d8b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d8c <IDE::~IDE()>:
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	ba 28 cd 02 c0       	mov    edx,0xc002cd28
c0028d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d98:	89 10                	mov    DWORD PTR [eax],edx
c0028d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9e:	83 ec 0c             	sub    esp,0xc
c0028da1:	50                   	push   eax
c0028da2:	e8 9b b9 fe ff       	call   c0014742 <HardDiskController::~HardDiskController()>
c0028da7:	83 c4 10             	add    esp,0x10
c0028daa:	90                   	nop
c0028dab:	83 c4 0c             	add    esp,0xc
c0028dae:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028db0 <IDE::~IDE()>:
c0028db0:	83 ec 0c             	sub    esp,0xc
c0028db3:	83 ec 0c             	sub    esp,0xc
c0028db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dba:	e8 cd ff ff ff       	call   c0028d8c <IDE::~IDE()>
c0028dbf:	83 c4 10             	add    esp,0x10
c0028dc2:	83 ec 08             	sub    esp,0x8
c0028dc5:	68 70 02 00 00       	push   0x270
c0028dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dce:	e8 a7 a0 fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028dd3:	83 c4 10             	add    esp,0x10
c0028dd6:	83 c4 0c             	add    esp,0xc
c0028dd9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dda <SATABus::~SATABus()>:
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	ba 08 ce 02 c0       	mov    edx,0xc002ce08
c0028de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de6:	89 10                	mov    DWORD PTR [eax],edx
c0028de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dec:	83 ec 0c             	sub    esp,0xc
c0028def:	50                   	push   eax
c0028df0:	e8 4d b9 fe ff       	call   c0014742 <HardDiskController::~HardDiskController()>
c0028df5:	83 c4 10             	add    esp,0x10
c0028df8:	90                   	nop
c0028df9:	83 c4 0c             	add    esp,0xc
c0028dfc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dfe <SATABus::~SATABus()>:
c0028dfe:	83 ec 0c             	sub    esp,0xc
c0028e01:	83 ec 0c             	sub    esp,0xc
c0028e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e08:	e8 cd ff ff ff       	call   c0028dda <SATABus::~SATABus()>
c0028e0d:	83 c4 10             	add    esp,0x10
c0028e10:	83 ec 08             	sub    esp,0x8
c0028e13:	68 64 01 00 00       	push   0x164
c0028e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e1c:	e8 59 a0 fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028e21:	83 c4 10             	add    esp,0x10
c0028e24:	83 c4 0c             	add    esp,0xc
c0028e27:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e28 <ATA::~ATA()>:
c0028e28:	83 ec 0c             	sub    esp,0xc
c0028e2b:	ba 54 ce 02 c0       	mov    edx,0xc002ce54
c0028e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e34:	89 10                	mov    DWORD PTR [eax],edx
c0028e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3a:	83 ec 0c             	sub    esp,0xc
c0028e3d:	50                   	push   eax
c0028e3e:	e8 f1 b9 fe ff       	call   c0014834 <PhysicalDisk::~PhysicalDisk()>
c0028e43:	83 c4 10             	add    esp,0x10
c0028e46:	90                   	nop
c0028e47:	83 c4 0c             	add    esp,0xc
c0028e4a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e4c <ATA::~ATA()>:
c0028e4c:	83 ec 0c             	sub    esp,0xc
c0028e4f:	83 ec 0c             	sub    esp,0xc
c0028e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e56:	e8 cd ff ff ff       	call   c0028e28 <ATA::~ATA()>
c0028e5b:	83 c4 10             	add    esp,0x10
c0028e5e:	83 ec 08             	sub    esp,0x8
c0028e61:	68 7c 01 00 00       	push   0x17c
c0028e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e6a:	e8 0b a0 fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028e6f:	83 c4 10             	add    esp,0x10
c0028e72:	83 c4 0c             	add    esp,0xc
c0028e75:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e76 <ATAPI::~ATAPI()>:
c0028e76:	83 ec 0c             	sub    esp,0xc
c0028e79:	ba 8c ce 02 c0       	mov    edx,0xc002ce8c
c0028e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e82:	89 10                	mov    DWORD PTR [eax],edx
c0028e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e88:	83 ec 0c             	sub    esp,0xc
c0028e8b:	50                   	push   eax
c0028e8c:	e8 a3 b9 fe ff       	call   c0014834 <PhysicalDisk::~PhysicalDisk()>
c0028e91:	83 c4 10             	add    esp,0x10
c0028e94:	90                   	nop
c0028e95:	83 c4 0c             	add    esp,0xc
c0028e98:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e9a <ATAPI::~ATAPI()>:
c0028e9a:	83 ec 0c             	sub    esp,0xc
c0028e9d:	83 ec 0c             	sub    esp,0xc
c0028ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea4:	e8 cd ff ff ff       	call   c0028e76 <ATAPI::~ATAPI()>
c0028ea9:	83 c4 10             	add    esp,0x10
c0028eac:	83 ec 08             	sub    esp,0x8
c0028eaf:	68 80 01 00 00       	push   0x180
c0028eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb8:	e8 bd 9f fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028ebd:	83 c4 10             	add    esp,0x10
c0028ec0:	83 c4 0c             	add    esp,0xc
c0028ec3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ec4 <SATA::~SATA()>:
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c0028ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed0:	89 10                	mov    DWORD PTR [eax],edx
c0028ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed6:	83 ec 0c             	sub    esp,0xc
c0028ed9:	50                   	push   eax
c0028eda:	e8 55 b9 fe ff       	call   c0014834 <PhysicalDisk::~PhysicalDisk()>
c0028edf:	83 c4 10             	add    esp,0x10
c0028ee2:	90                   	nop
c0028ee3:	83 c4 0c             	add    esp,0xc
c0028ee6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ee8 <SATA::~SATA()>:
c0028ee8:	83 ec 0c             	sub    esp,0xc
c0028eeb:	83 ec 0c             	sub    esp,0xc
c0028eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef2:	e8 cd ff ff ff       	call   c0028ec4 <SATA::~SATA()>
c0028ef7:	83 c4 10             	add    esp,0x10
c0028efa:	83 ec 08             	sub    esp,0x8
c0028efd:	68 7c 01 00 00       	push   0x17c
c0028f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f06:	e8 6f 9f fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028f0b:	83 c4 10             	add    esp,0x10
c0028f0e:	83 c4 0c             	add    esp,0xc
c0028f11:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f12 <SATAPI::~SATAPI()>:
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	ba 1c d0 02 c0       	mov    edx,0xc002d01c
c0028f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1e:	89 10                	mov    DWORD PTR [eax],edx
c0028f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f24:	83 ec 0c             	sub    esp,0xc
c0028f27:	50                   	push   eax
c0028f28:	e8 07 b9 fe ff       	call   c0014834 <PhysicalDisk::~PhysicalDisk()>
c0028f2d:	83 c4 10             	add    esp,0x10
c0028f30:	90                   	nop
c0028f31:	83 c4 0c             	add    esp,0xc
c0028f34:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f36 <SATAPI::~SATAPI()>:
c0028f36:	83 ec 0c             	sub    esp,0xc
c0028f39:	83 ec 0c             	sub    esp,0xc
c0028f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f40:	e8 cd ff ff ff       	call   c0028f12 <SATAPI::~SATAPI()>
c0028f45:	83 c4 10             	add    esp,0x10
c0028f48:	83 ec 08             	sub    esp,0x8
c0028f4b:	68 80 01 00 00       	push   0x180
c0028f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f54:	e8 21 9f fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028f59:	83 c4 10             	add    esp,0x10
c0028f5c:	83 c4 0c             	add    esp,0xc
c0028f5f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f60 <AVX::~AVX()>:
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	ba 5c d0 02 c0       	mov    edx,0xc002d05c
c0028f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6c:	89 10                	mov    DWORD PTR [eax],edx
c0028f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f72:	83 ec 0c             	sub    esp,0xc
c0028f75:	50                   	push   eax
c0028f76:	e8 3d b9 fe ff       	call   c00148b8 <FPU::~FPU()>
c0028f7b:	83 c4 10             	add    esp,0x10
c0028f7e:	90                   	nop
c0028f7f:	83 c4 0c             	add    esp,0xc
c0028f82:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f84 <AVX::~AVX()>:
c0028f84:	83 ec 0c             	sub    esp,0xc
c0028f87:	83 ec 0c             	sub    esp,0xc
c0028f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f8e:	e8 cd ff ff ff       	call   c0028f60 <AVX::~AVX()>
c0028f93:	83 c4 10             	add    esp,0x10
c0028f96:	83 ec 08             	sub    esp,0x8
c0028f99:	68 58 01 00 00       	push   0x158
c0028f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa2:	e8 d3 9e fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028fa7:	83 c4 10             	add    esp,0x10
c0028faa:	83 c4 0c             	add    esp,0xc
c0028fad:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028fae <MMX::~MMX()>:
c0028fae:	83 ec 0c             	sub    esp,0xc
c0028fb1:	ba 9c d0 02 c0       	mov    edx,0xc002d09c
c0028fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fba:	89 10                	mov    DWORD PTR [eax],edx
c0028fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc0:	83 ec 0c             	sub    esp,0xc
c0028fc3:	50                   	push   eax
c0028fc4:	e8 ef b8 fe ff       	call   c00148b8 <FPU::~FPU()>
c0028fc9:	83 c4 10             	add    esp,0x10
c0028fcc:	90                   	nop
c0028fcd:	83 c4 0c             	add    esp,0xc
c0028fd0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fd2 <MMX::~MMX()>:
c0028fd2:	83 ec 0c             	sub    esp,0xc
c0028fd5:	83 ec 0c             	sub    esp,0xc
c0028fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fdc:	e8 cd ff ff ff       	call   c0028fae <MMX::~MMX()>
c0028fe1:	83 c4 10             	add    esp,0x10
c0028fe4:	83 ec 08             	sub    esp,0x8
c0028fe7:	68 58 01 00 00       	push   0x158
c0028fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff0:	e8 85 9e fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0028ff5:	83 c4 10             	add    esp,0x10
c0028ff8:	83 c4 0c             	add    esp,0xc
c0028ffb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028ffc <SSE::~SSE()>:
c0028ffc:	83 ec 0c             	sub    esp,0xc
c0028fff:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c0029004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029008:	89 10                	mov    DWORD PTR [eax],edx
c002900a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900e:	83 ec 0c             	sub    esp,0xc
c0029011:	50                   	push   eax
c0029012:	e8 a1 b8 fe ff       	call   c00148b8 <FPU::~FPU()>
c0029017:	83 c4 10             	add    esp,0x10
c002901a:	90                   	nop
c002901b:	83 c4 0c             	add    esp,0xc
c002901e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029020 <SSE::~SSE()>:
c0029020:	83 ec 0c             	sub    esp,0xc
c0029023:	83 ec 0c             	sub    esp,0xc
c0029026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902a:	e8 cd ff ff ff       	call   c0028ffc <SSE::~SSE()>
c002902f:	83 c4 10             	add    esp,0x10
c0029032:	83 ec 08             	sub    esp,0x8
c0029035:	68 58 01 00 00       	push   0x158
c002903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002903e:	e8 37 9e fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0029043:	83 c4 10             	add    esp,0x10
c0029046:	83 c4 0c             	add    esp,0xc
c0029049:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002904a <x87::~x87()>:
c002904a:	83 ec 0c             	sub    esp,0xc
c002904d:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c0029052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029056:	89 10                	mov    DWORD PTR [eax],edx
c0029058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905c:	83 ec 0c             	sub    esp,0xc
c002905f:	50                   	push   eax
c0029060:	e8 53 b8 fe ff       	call   c00148b8 <FPU::~FPU()>
c0029065:	83 c4 10             	add    esp,0x10
c0029068:	90                   	nop
c0029069:	83 c4 0c             	add    esp,0xc
c002906c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002906e <x87::~x87()>:
c002906e:	83 ec 0c             	sub    esp,0xc
c0029071:	83 ec 0c             	sub    esp,0xc
c0029074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029078:	e8 cd ff ff ff       	call   c002904a <x87::~x87()>
c002907d:	83 c4 10             	add    esp,0x10
c0029080:	83 ec 08             	sub    esp,0x8
c0029083:	68 58 01 00 00       	push   0x158
c0029088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002908c:	e8 e9 9d fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0029091:	83 c4 10             	add    esp,0x10
c0029094:	83 c4 0c             	add    esp,0xc
c0029097:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029098 <IOAPIC::~IOAPIC()>:
c0029098:	83 ec 0c             	sub    esp,0xc
c002909b:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c00290a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a4:	89 10                	mov    DWORD PTR [eax],edx
c00290a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290aa:	83 ec 0c             	sub    esp,0xc
c00290ad:	50                   	push   eax
c00290ae:	e8 9f b1 fe ff       	call   c0014252 <Device::~Device()>
c00290b3:	83 c4 10             	add    esp,0x10
c00290b6:	90                   	nop
c00290b7:	83 c4 0c             	add    esp,0xc
c00290ba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290bc <IOAPIC::~IOAPIC()>:
c00290bc:	83 ec 0c             	sub    esp,0xc
c00290bf:	83 ec 0c             	sub    esp,0xc
c00290c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c6:	e8 cd ff ff ff       	call   c0029098 <IOAPIC::~IOAPIC()>
c00290cb:	83 c4 10             	add    esp,0x10
c00290ce:	83 ec 08             	sub    esp,0x8
c00290d1:	68 68 01 00 00       	push   0x168
c00290d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290da:	e8 9b 9d fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c00290df:	83 c4 10             	add    esp,0x10
c00290e2:	83 c4 0c             	add    esp,0xc
c00290e5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290e6 <APIC::~APIC()>:
c00290e6:	83 ec 0c             	sub    esp,0xc
c00290e9:	ba 2c d2 02 c0       	mov    edx,0xc002d22c
c00290ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f2:	89 10                	mov    DWORD PTR [eax],edx
c00290f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f8:	83 ec 0c             	sub    esp,0xc
c00290fb:	50                   	push   eax
c00290fc:	e8 81 bc fe ff       	call   c0014d82 <InterruptController::~InterruptController()>
c0029101:	83 c4 10             	add    esp,0x10
c0029104:	90                   	nop
c0029105:	83 c4 0c             	add    esp,0xc
c0029108:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002910a <APIC::~APIC()>:
c002910a:	83 ec 0c             	sub    esp,0xc
c002910d:	83 ec 0c             	sub    esp,0xc
c0029110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029114:	e8 cd ff ff ff       	call   c00290e6 <APIC::~APIC()>
c0029119:	83 c4 10             	add    esp,0x10
c002911c:	83 ec 08             	sub    esp,0x8
c002911f:	68 58 21 00 00       	push   0x2158
c0029124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029128:	e8 4d 9d fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c002912d:	83 c4 10             	add    esp,0x10
c0029130:	83 c4 0c             	add    esp,0xc
c0029133:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029134 <PIC::~PIC()>:
c0029134:	83 ec 0c             	sub    esp,0xc
c0029137:	ba c4 d2 02 c0       	mov    edx,0xc002d2c4
c002913c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029140:	89 10                	mov    DWORD PTR [eax],edx
c0029142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029146:	83 ec 0c             	sub    esp,0xc
c0029149:	50                   	push   eax
c002914a:	e8 33 bc fe ff       	call   c0014d82 <InterruptController::~InterruptController()>
c002914f:	83 c4 10             	add    esp,0x10
c0029152:	90                   	nop
c0029153:	83 c4 0c             	add    esp,0xc
c0029156:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029158 <PIC::~PIC()>:
c0029158:	83 ec 0c             	sub    esp,0xc
c002915b:	83 ec 0c             	sub    esp,0xc
c002915e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029162:	e8 cd ff ff ff       	call   c0029134 <PIC::~PIC()>
c0029167:	83 c4 10             	add    esp,0x10
c002916a:	83 ec 08             	sub    esp,0x8
c002916d:	68 58 21 00 00       	push   0x2158
c0029172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029176:	e8 ff 9c fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c002917b:	83 c4 10             	add    esp,0x10
c002917e:	83 c4 0c             	add    esp,0xc
c0029181:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029182 <APICTimer::~APICTimer()>:
c0029182:	83 ec 0c             	sub    esp,0xc
c0029185:	ba 18 d3 02 c0       	mov    edx,0xc002d318
c002918a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918e:	89 10                	mov    DWORD PTR [eax],edx
c0029190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029194:	83 ec 0c             	sub    esp,0xc
c0029197:	50                   	push   eax
c0029198:	e8 3d db fe ff       	call   c0016cda <Timer::~Timer()>
c002919d:	83 c4 10             	add    esp,0x10
c00291a0:	90                   	nop
c00291a1:	83 c4 0c             	add    esp,0xc
c00291a4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291a6 <APICTimer::~APICTimer()>:
c00291a6:	83 ec 0c             	sub    esp,0xc
c00291a9:	83 ec 0c             	sub    esp,0xc
c00291ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b0:	e8 cd ff ff ff       	call   c0029182 <APICTimer::~APICTimer()>
c00291b5:	83 c4 10             	add    esp,0x10
c00291b8:	83 ec 08             	sub    esp,0x8
c00291bb:	68 60 01 00 00       	push   0x160
c00291c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c4:	e8 b1 9c fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c00291c9:	83 c4 10             	add    esp,0x10
c00291cc:	83 c4 0c             	add    esp,0xc
c00291cf:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291d0 <PIT::~PIT()>:
c00291d0:	83 ec 0c             	sub    esp,0xc
c00291d3:	ba 68 d3 02 c0       	mov    edx,0xc002d368
c00291d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291dc:	89 10                	mov    DWORD PTR [eax],edx
c00291de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e2:	83 ec 0c             	sub    esp,0xc
c00291e5:	50                   	push   eax
c00291e6:	e8 ef da fe ff       	call   c0016cda <Timer::~Timer()>
c00291eb:	83 c4 10             	add    esp,0x10
c00291ee:	90                   	nop
c00291ef:	83 c4 0c             	add    esp,0xc
c00291f2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291f4 <PIT::~PIT()>:
c00291f4:	83 ec 0c             	sub    esp,0xc
c00291f7:	83 ec 0c             	sub    esp,0xc
c00291fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291fe:	e8 cd ff ff ff       	call   c00291d0 <PIT::~PIT()>
c0029203:	83 c4 10             	add    esp,0x10
c0029206:	83 ec 08             	sub    esp,0x8
c0029209:	68 5c 01 00 00       	push   0x15c
c002920e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029212:	e8 63 9c fe ff       	call   c0012e7a <operator delete(void*, unsigned long)>
c0029217:	83 c4 10             	add    esp,0x10
c002921a:	83 c4 0c             	add    esp,0xc
c002921d:	c3                   	ret    
